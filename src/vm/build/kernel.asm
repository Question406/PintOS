
kernel.o:     file format elf32-i386


Disassembly of section .text:

c0020078 <start>:
start:

# The loader called into us with CS = 0x2000, SS = 0x0000, ESP = 0xf000,
# but we should initialize the other segment registers.

	mov $0x2000, %ax
c0020078:	b8 00 20 8e d8       	mov    $0xd88e2000,%eax
	mov %ax, %ds
	mov %ax, %es
c002007d:	8e c0                	mov    %eax,%es

# Set string instructions to go upward.
	cld
c002007f:	fc                   	cld    
#### which returns AX = (kB of physical memory) - 1024.  This only
#### works for memory sizes <= 65 MB, which should be fine for our
#### purposes.  We cap memory at 64 MB because that's all we prepare
#### page tables for, below.

	movb $0x88, %ah
c0020080:	b4 88                	mov    $0x88,%ah
	int $0x15
c0020082:	cd 15                	int    $0x15
	addl $1024, %eax	# Total kB memory
c0020084:	66 05 00 04          	add    $0x400,%ax
c0020088:	00 00                	add    %al,(%eax)
	cmp $0x10000, %eax	# Cap at 64 MB
c002008a:	66 3d 00 00          	cmp    $0x0,%ax
c002008e:	01 00                	add    %eax,(%eax)
	jbe 1f
c0020090:	76 06                	jbe    c0020098 <start+0x20>
	mov $0x10000, %eax
c0020092:	66 b8 00 00          	mov    $0x0,%ax
c0020096:	01 00                	add    %eax,(%eax)
1:	shrl $2, %eax		# Total 4 kB pages
c0020098:	66 c1 e8 02          	shr    $0x2,%ax
	addr32 movl %eax, init_ram_pages - LOADER_PHYS_BASE - 0x20000
c002009c:	67 66 a3 7e 01       	addr16 mov %ax,0x17e
c00200a1:	00 00                	add    %al,(%eax)
#### Enable A20.  Address line 20 is tied low when the machine boots,
#### which prevents addressing memory about 1 MB.  This code fixes it.

# Poll status register while busy.

1:	inb $0x64, %al
c00200a3:	e4 64                	in     $0x64,%al
	testb $0x2, %al
c00200a5:	a8 02                	test   $0x2,%al
	jnz 1b
c00200a7:	75 fa                	jne    c00200a3 <start+0x2b>

# Send command for writing output port.

	movb $0xd1, %al
c00200a9:	b0 d1                	mov    $0xd1,%al
	outb %al, $0x64
c00200ab:	e6 64                	out    %al,$0x64

# Poll status register while busy.

1:	inb $0x64, %al
c00200ad:	e4 64                	in     $0x64,%al
	testb $0x2, %al
c00200af:	a8 02                	test   $0x2,%al
	jnz 1b
c00200b1:	75 fa                	jne    c00200ad <start+0x35>

# Enable A20 line.

	movb $0xdf, %al
c00200b3:	b0 df                	mov    $0xdf,%al
	outb %al, $0x60
c00200b5:	e6 60                	out    %al,$0x60

# Poll status register while busy.

1:	inb $0x64, %al
c00200b7:	e4 64                	in     $0x64,%al
	testb $0x2, %al
c00200b9:	a8 02                	test   $0x2,%al
	jnz 1b
c00200bb:	75 fa                	jne    c00200b7 <start+0x3f>

#### Create temporary page directory and page table and set page
#### directory base register.

# Create page directory at 0xf000 (60 kB) and fill with zeroes.
	mov $0xf00, %ax
c00200bd:	b8 00 0f 8e c0       	mov    $0xc08e0f00,%eax
	mov %ax, %es
	subl %eax, %eax
c00200c2:	66 29 c0             	sub    %ax,%ax
	subl %edi, %edi
c00200c5:	66 29 ff             	sub    %di,%di
	movl $0x400, %ecx
c00200c8:	66 b9 00 04          	mov    $0x400,%cx
c00200cc:	00 00                	add    %al,(%eax)
	rep stosl
c00200ce:	66 f3 ab             	rep stos %ax,%es:(%edi)
# Add PDEs to point to page tables for the first 64 MB of RAM.
# Also add identical PDEs starting at LOADER_PHYS_BASE.
# See [IA32-v3a] section 3.7.6 "Page-Directory and Page-Table Entries"
# for a description of the bits in %eax.

	movl $0x10007, %eax
c00200d1:	66 b8 07 00          	mov    $0x7,%ax
c00200d5:	01 00                	add    %eax,(%eax)
	movl $0x11, %ecx
c00200d7:	66 b9 11 00          	mov    $0x11,%cx
c00200db:	00 00                	add    %al,(%eax)
	subl %edi, %edi
c00200dd:	66 29 ff             	sub    %di,%di
1:	movl %eax, %es:(%di)
c00200e0:	26 66 89 05 26 66 89 	mov    %ax,%es:0x85896626
c00200e7:	85 
	movl %eax, %es:LOADER_PHYS_BASE >> 20(%di)
c00200e8:	00 0c 83             	add    %cl,(%ebx,%eax,4)
	addw $4, %di
c00200eb:	c7 04 66 05 00 10 00 	movl   $0x100005,(%esi,%eiz,2)
	addl $0x1000, %eax
c00200f2:	00 e2                	add    %ah,%dl
	loop 1b
c00200f4:	eb b8                	jmp    c00200ae <start+0x36>
# Set up page tables for one-to-map linear to physical map for the
# first 64 MB of RAM.
# See [IA32-v3a] section 3.7.6 "Page-Directory and Page-Table Entries"
# for a description of the bits in %eax.

	movw $0x1000, %ax
c00200f6:	00 10                	add    %dl,(%eax)
	movw %ax, %es
c00200f8:	8e c0                	mov    %eax,%es
	movl $0x7, %eax
c00200fa:	66 b8 07 00          	mov    $0x7,%ax
c00200fe:	00 00                	add    %al,(%eax)
	movl $0x4000, %ecx
c0020100:	66 b9 00 40          	mov    $0x4000,%cx
c0020104:	00 00                	add    %al,(%eax)
	subl %edi, %edi
c0020106:	66 29 ff             	sub    %di,%di
1:	movl %eax, %es:(%di)
c0020109:	26 66 89 05 83 c7 04 	mov    %ax,%es:0x6604c783
c0020110:	66 
	addw $4, %di
	addl $0x1000, %eax
c0020111:	05 00 10 00 00       	add    $0x1000,%eax
	loop 1b
c0020116:	e2 f1                	loop   c0020109 <start+0x91>

# Set page directory base register.

	movl $0xf000, %eax
c0020118:	66 b8 00 f0          	mov    $0xf000,%ax
c002011c:	00 00                	add    %al,(%eax)
	movl %eax, %cr3
c002011e:	0f 22 d8             	mov    %eax,%cr3
#### Switch to protected mode.

# First, disable interrupts.  We won't set up the IDT until we get
# into C code, so any interrupt would blow us away.

	cli
c0020121:	fa                   	cli    
# We need a data32 prefix to ensure that all 32 bits of the GDT
# descriptor are loaded (default is to load only 24 bits).
# The CPU doesn't need an addr32 prefix but ELF doesn't do 16-bit
# relocations.

	data32 addr32 lgdt gdtdesc - LOADER_PHYS_BASE - 0x20000
c0020122:	67 66 0f 01 15       	lgdtw  (%di)
c0020127:	78 01                	js     c002012a <start+0xb2>
c0020129:	00 00                	add    %al,(%eax)
#    WP (Write Protect): if unset, ring 0 code ignores
#       write-protect bits in page tables (!).
#    EM (Emulation): forces floating-point instructions to trap.
#       We don't support floating point.

	movl %cr0, %eax
c002012b:	0f 20 c0             	mov    %cr0,%eax
	orl $CR0_PE | CR0_PG | CR0_WP | CR0_EM, %eax
c002012e:	66 0d 05 00          	or     $0x5,%ax
c0020132:	01 80 0f 22 c0 66    	add    %eax,0x66c0220f(%eax)
# the real-mode code segment cached in %cs's segment descriptor.  We
# need to reload %cs, and the easiest way is to use a far jump.
# Because we're not running in a 32-bit segment the data32 prefix is
# needed to jump to a 32-bit offset in the target segment.

	data32 ljmp $SEL_KCSEG, $1f
c0020138:	ea 3f 01 02 c0 08 00 	ljmp   $0x8,$0xc002013f
	.code32

# Reload all the other segment registers and the stack pointer to
# point into our new GDT.

1:	mov $SEL_KDSEG, %ax
c002013f:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
c0020143:	8e d8                	mov    %eax,%ds
	mov %ax, %es
c0020145:	8e c0                	mov    %eax,%es
	mov %ax, %fs
c0020147:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
c0020149:	8e e8                	mov    %eax,%gs
	mov %ax, %ss
c002014b:	8e d0                	mov    %eax,%ss
	addl $LOADER_PHYS_BASE, %esp
c002014d:	81 c4 00 00 00 c0    	add    $0xc0000000,%esp
	movl $0, %ebp			# Null-terminate main()'s backtrace
c0020153:	bd 00 00 00 00       	mov    $0x0,%ebp

#### Call pintos_init().

	call pintos_init
c0020158:	e8 79 01 00 00       	call   c00202d6 <pintos_init>

# pintos_init() shouldn't ever return.  If it does, spin.

1:	jmp 1b
c002015d:	eb fe                	jmp    c002015d <start+0xe5>
	...

c0020160 <gdt>:
	...
c0020168:	ff                   	(bad)  
c0020169:	ff 00                	incl   (%eax)
c002016b:	00 00                	add    %al,(%eax)
c002016d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
c0020174:	00                   	.byte 0x0
c0020175:	92                   	xchg   %eax,%edx
c0020176:	cf                   	iret   
	...

c0020178 <gdtdesc>:
c0020178:	17                   	pop    %ss
c0020179:	00 60 01             	add    %ah,0x1(%eax)
c002017c:	02 c0                	add    %al,%al

c002017e <init_ram_pages>:
c002017e:	00 00                	add    %al,(%eax)
	...

c0020182 <pg_ofs>:
#define PGBITS  12                         /* Number of offset bits. */
#define PGSIZE  (1 << PGBITS)              /* Bytes in a page. */
#define PGMASK  BITMASK(PGSHIFT, PGBITS)   /* Page offset bits (0:12). */

/* Offset within a page. */
static inline unsigned pg_ofs (const void *va) {
c0020182:	55                   	push   %ebp
c0020183:	89 e5                	mov    %esp,%ebp
  return (uintptr_t) va & PGMASK;
c0020185:	8b 45 08             	mov    0x8(%ebp),%eax
c0020188:	25 ff 0f 00 00       	and    $0xfff,%eax
}
c002018d:	5d                   	pop    %ebp
c002018e:	c3                   	ret    

c002018f <is_kernel_vaddr>:
}

/* Returns true if VADDR is a kernel virtual address. */
static inline bool
is_kernel_vaddr (const void *vaddr) 
{
c002018f:	55                   	push   %ebp
c0020190:	89 e5                	mov    %esp,%ebp
  return vaddr >= PHYS_BASE;
c0020192:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0020199:	0f 97 c0             	seta   %al
}
c002019c:	5d                   	pop    %ebp
c002019d:	c3                   	ret    

c002019e <ptov>:

/* Returns kernel virtual address at which physical address PADDR
   is mapped. */
static inline void *
ptov (uintptr_t paddr)
{
c002019e:	55                   	push   %ebp
c002019f:	89 e5                	mov    %esp,%ebp
c00201a1:	83 ec 08             	sub    $0x8,%esp
  ASSERT ((void *) paddr < PHYS_BASE);
c00201a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00201a7:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c00201ac:	76 1e                	jbe    c00201cc <ptov+0x2e>
c00201ae:	83 ec 0c             	sub    $0xc,%esp
c00201b1:	68 80 3c 03 c0       	push   $0xc0033c80
c00201b6:	68 9b 3c 03 c0       	push   $0xc0033c9b
c00201bb:	68 04 43 03 c0       	push   $0xc0034304
c00201c0:	6a 4a                	push   $0x4a
c00201c2:	68 b2 3c 03 c0       	push   $0xc0033cb2
c00201c7:	e8 c5 a3 00 00       	call   c002a591 <debug_panic>

  return (void *) (paddr + PHYS_BASE);
c00201cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00201cf:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c00201d4:	c9                   	leave  
c00201d5:	c3                   	ret    

c00201d6 <vtop>:

/* Returns physical address at which kernel virtual address VADDR
   is mapped. */
static inline uintptr_t
vtop (const void *vaddr)
{
c00201d6:	55                   	push   %ebp
c00201d7:	89 e5                	mov    %esp,%ebp
c00201d9:	83 ec 08             	sub    $0x8,%esp
  ASSERT (is_kernel_vaddr (vaddr));
c00201dc:	ff 75 08             	pushl  0x8(%ebp)
c00201df:	e8 ab ff ff ff       	call   c002018f <is_kernel_vaddr>
c00201e4:	83 c4 04             	add    $0x4,%esp
c00201e7:	84 c0                	test   %al,%al
c00201e9:	75 1e                	jne    c0020209 <vtop+0x33>
c00201eb:	83 ec 0c             	sub    $0xc,%esp
c00201ee:	68 c8 3c 03 c0       	push   $0xc0033cc8
c00201f3:	68 9b 3c 03 c0       	push   $0xc0033c9b
c00201f8:	68 2c 43 03 c0       	push   $0xc003432c
c00201fd:	6a 54                	push   $0x54
c00201ff:	68 b2 3c 03 c0       	push   $0xc0033cb2
c0020204:	e8 88 a3 00 00       	call   c002a591 <debug_panic>

  return (uintptr_t) vaddr - (uintptr_t) PHYS_BASE;
c0020209:	8b 45 08             	mov    0x8(%ebp),%eax
c002020c:	05 00 00 00 40       	add    $0x40000000,%eax
}
c0020211:	c9                   	leave  
c0020212:	c3                   	ret    

c0020213 <pt_no>:
#define PDSHIFT (PTSHIFT + PTBITS)         /* First page directory bit. */
#define PDBITS  10                         /* Number of page dir bits. */
#define PDMASK  BITMASK(PDSHIFT, PDBITS)   /* Page directory bits (22:31). */

/* Obtains page table index from a virtual address. */
static inline unsigned pt_no (const void *va) {
c0020213:	55                   	push   %ebp
c0020214:	89 e5                	mov    %esp,%ebp
  return ((uintptr_t) va & PTMASK) >> PTSHIFT;
c0020216:	8b 45 08             	mov    0x8(%ebp),%eax
c0020219:	c1 e8 0c             	shr    $0xc,%eax
c002021c:	25 ff 03 00 00       	and    $0x3ff,%eax
}
c0020221:	5d                   	pop    %ebp
c0020222:	c3                   	ret    

c0020223 <pd_no>:

/* Obtains page directory index from a virtual address. */
static inline uintptr_t pd_no (const void *va) {
c0020223:	55                   	push   %ebp
c0020224:	89 e5                	mov    %esp,%ebp
  return (uintptr_t) va >> PDSHIFT;
c0020226:	8b 45 08             	mov    0x8(%ebp),%eax
c0020229:	c1 e8 16             	shr    $0x16,%eax
}
c002022c:	5d                   	pop    %ebp
c002022d:	c3                   	ret    

c002022e <pde_create>:
#define PTE_U 0x4               /* 1=user/kernel, 0=kernel only. */
#define PTE_A 0x20              /* 1=accessed, 0=not acccessed. */
#define PTE_D 0x40              /* 1=dirty, 0=not dirty (PTEs only). */

/* Returns a PDE that points to page table PT. */
static inline uint32_t pde_create (uint32_t *pt) {
c002022e:	55                   	push   %ebp
c002022f:	89 e5                	mov    %esp,%ebp
c0020231:	83 ec 08             	sub    $0x8,%esp
  ASSERT (pg_ofs (pt) == 0);
c0020234:	ff 75 08             	pushl  0x8(%ebp)
c0020237:	e8 46 ff ff ff       	call   c0020182 <pg_ofs>
c002023c:	83 c4 04             	add    $0x4,%esp
c002023f:	85 c0                	test   %eax,%eax
c0020241:	74 1e                	je     c0020261 <pde_create+0x33>
c0020243:	83 ec 0c             	sub    $0xc,%esp
c0020246:	68 e0 3c 03 c0       	push   $0xc0033ce0
c002024b:	68 9b 3c 03 c0       	push   $0xc0033c9b
c0020250:	68 0c 43 03 c0       	push   $0xc003430c
c0020255:	6a 48                	push   $0x48
c0020257:	68 f1 3c 03 c0       	push   $0xc0033cf1
c002025c:	e8 30 a3 00 00       	call   c002a591 <debug_panic>
  return vtop (pt) | PTE_U | PTE_P | PTE_W;
c0020261:	83 ec 0c             	sub    $0xc,%esp
c0020264:	ff 75 08             	pushl  0x8(%ebp)
c0020267:	e8 6a ff ff ff       	call   c00201d6 <vtop>
c002026c:	83 c4 10             	add    $0x10,%esp
c002026f:	83 c8 07             	or     $0x7,%eax
}
c0020272:	c9                   	leave  
c0020273:	c3                   	ret    

c0020274 <pte_create_kernel>:

/* Returns a PTE that points to PAGE.
   The PTE's page is readable.
   If WRITABLE is true then it will be writable as well.
   The page will be usable only by ring 0 code (the kernel). */
static inline uint32_t pte_create_kernel (void *page, bool writable) {
c0020274:	55                   	push   %ebp
c0020275:	89 e5                	mov    %esp,%ebp
c0020277:	83 ec 18             	sub    $0x18,%esp
c002027a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002027d:	88 45 f4             	mov    %al,-0xc(%ebp)
  ASSERT (pg_ofs (page) == 0);
c0020280:	ff 75 08             	pushl  0x8(%ebp)
c0020283:	e8 fa fe ff ff       	call   c0020182 <pg_ofs>
c0020288:	83 c4 04             	add    $0x4,%esp
c002028b:	85 c0                	test   %eax,%eax
c002028d:	74 1e                	je     c00202ad <pte_create_kernel+0x39>
c002028f:	83 ec 0c             	sub    $0xc,%esp
c0020292:	68 05 3d 03 c0       	push   $0xc0033d05
c0020297:	68 9b 3c 03 c0       	push   $0xc0033c9b
c002029c:	68 18 43 03 c0       	push   $0xc0034318
c00202a1:	6a 58                	push   $0x58
c00202a3:	68 f1 3c 03 c0       	push   $0xc0033cf1
c00202a8:	e8 e4 a2 00 00       	call   c002a591 <debug_panic>
  return vtop (page) | PTE_P | (writable ? PTE_W : 0);
c00202ad:	83 ec 0c             	sub    $0xc,%esp
c00202b0:	ff 75 08             	pushl  0x8(%ebp)
c00202b3:	e8 1e ff ff ff       	call   c00201d6 <vtop>
c00202b8:	83 c4 10             	add    $0x10,%esp
c00202bb:	89 c2                	mov    %eax,%edx
c00202bd:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c00202c1:	74 07                	je     c00202ca <pte_create_kernel+0x56>
c00202c3:	b8 02 00 00 00       	mov    $0x2,%eax
c00202c8:	eb 05                	jmp    c00202cf <pte_create_kernel+0x5b>
c00202ca:	b8 00 00 00 00       	mov    $0x0,%eax
c00202cf:	09 d0                	or     %edx,%eax
c00202d1:	83 c8 01             	or     $0x1,%eax
}
c00202d4:	c9                   	leave  
c00202d5:	c3                   	ret    

c00202d6 <pintos_init>:
int pintos_init (void) NO_RETURN;

/* Pintos main entry point. */
int
pintos_init (void)
{
c00202d6:	55                   	push   %ebp
c00202d7:	89 e5                	mov    %esp,%ebp
c00202d9:	83 ec 18             	sub    $0x18,%esp
  char **argv;

  /* Clear BSS. */  
  bss_init ();
c00202dc:	e8 ea 00 00 00       	call   c00203cb <bss_init>

  /* Break command line into arguments and parse options. */
  argv = read_command_line ();
c00202e1:	e8 4a 02 00 00       	call   c0020530 <read_command_line>
c00202e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  argv = parse_options (argv);
c00202e9:	83 ec 0c             	sub    $0xc,%esp
c00202ec:	ff 75 f4             	pushl  -0xc(%ebp)
c00202ef:	e8 6c 03 00 00       	call   c0020660 <parse_options>
c00202f4:	83 c4 10             	add    $0x10,%esp
c00202f7:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Initialize ourselves as a thread so we can use locks,
     then enable console locking. */
  thread_init ();
c00202fa:	e8 e2 07 00 00       	call   c0020ae1 <thread_init>
  console_init ();  
c00202ff:	e8 f1 c3 00 00       	call   c002c6f5 <console_init>

  /* Greet user. */
  printf ("Pintos booting with %'"PRIu32" kB RAM...\n",
          init_ram_pages * PGSIZE / 1024);
c0020304:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c0020309:	c1 e0 0c             	shl    $0xc,%eax
  printf ("Pintos booting with %'"PRIu32" kB RAM...\n",
c002030c:	c1 e8 0a             	shr    $0xa,%eax
c002030f:	83 ec 08             	sub    $0x8,%esp
c0020312:	50                   	push   %eax
c0020313:	68 18 3d 03 c0       	push   $0xc0033d18
c0020318:	e8 13 7d 00 00       	call   c0028030 <printf>
c002031d:	83 c4 10             	add    $0x10,%esp

  /* Initialize memory system. */
  palloc_init (user_page_limit);
c0020320:	a1 00 dd 03 c0       	mov    0xc003dd00,%eax
c0020325:	83 ec 0c             	sub    $0xc,%esp
c0020328:	50                   	push   %eax
c0020329:	e8 5e 39 00 00       	call   c0023c8c <palloc_init>
c002032e:	83 c4 10             	add    $0x10,%esp
  malloc_init ();
c0020331:	e8 67 3d 00 00       	call   c002409d <malloc_init>
  paging_init ();
c0020336:	e8 ba 00 00 00       	call   c00203f5 <paging_init>

#ifdef VM
  vm_frame_init();
c002033b:	e8 ad 28 01 00       	call   c0032bed <vm_frame_init>
#endif
  /* Segmentation. */
#ifdef USERPROG
  tss_init ();
c0020340:	e8 ea fb 00 00       	call   c002ff2f <tss_init>
  gdt_init ();
c0020345:	e8 12 f9 00 00       	call   c002fc5c <gdt_init>
#endif

  /* Initialize interrupt handlers. */
  intr_init ();
c002034a:	e8 b1 1a 00 00       	call   c0021e00 <intr_init>
  timer_init ();
c002034f:	e8 04 45 00 00       	call   c0024858 <timer_init>
  kbd_init ();
c0020354:	e8 45 4c 00 00       	call   c0024f9e <kbd_init>
  input_init ();
c0020359:	e8 3d 6f 00 00       	call   c002729b <input_init>

#ifdef USERPROG
  exception_init ();
c002035e:	e8 33 dd 00 00       	call   c002e096 <exception_init>
  syscall_init ();
c0020363:	e8 5a e2 00 00       	call   c002e5c2 <syscall_init>
#endif

  /* Start thread scheduler and enable interrupts. */
  thread_start ();
c0020368:	e8 25 08 00 00       	call   c0020b92 <thread_start>
  serial_init_queue ();
c002036d:	e8 27 54 00 00       	call   c0025799 <serial_init_queue>
  timer_calibrate ();
c0020372:	e8 22 45 00 00       	call   c0024899 <timer_calibrate>

#ifdef FILESYS
  /* Initialize file system. */
  ide_init ();
c0020377:	e8 0b 62 00 00       	call   c0026587 <ide_init>
  locate_block_devices ();
c002037c:	e8 43 06 00 00       	call   c00209c4 <locate_block_devices>
  filesys_init (format_filesys);
c0020381:	a0 a0 e5 03 c0       	mov    0xc003e5a0,%al
c0020386:	0f b6 c0             	movzbl %al,%eax
c0020389:	83 ec 0c             	sub    $0xc,%esp
c002038c:	50                   	push   %eax
c002038d:	e8 4e fc 00 00       	call   c002ffe0 <filesys_init>
c0020392:	83 c4 10             	add    $0x10,%esp
#endif
#ifdef VM
    vm_swap_init ();
c0020395:	e8 37 37 01 00       	call   c0033ad1 <vm_swap_init>
#endif
  printf ("Boot complete.\n");
c002039a:	83 ec 0c             	sub    $0xc,%esp
c002039d:	68 3b 3d 03 c0       	push   $0xc0033d3b
c00203a2:	e8 b1 c4 00 00       	call   c002c858 <puts>
c00203a7:	83 c4 10             	add    $0x10,%esp
  
  if (*argv != NULL) {
c00203aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00203ad:	8b 00                	mov    (%eax),%eax
c00203af:	85 c0                	test   %eax,%eax
c00203b1:	74 0e                	je     c00203c1 <pintos_init+0xeb>
    /* Run actions specified on kernel command line. */
    run_actions (argv);
c00203b3:	83 ec 0c             	sub    $0xc,%esp
c00203b6:	ff 75 f4             	pushl  -0xc(%ebp)
c00203b9:	e8 07 05 00 00       	call   c00208c5 <run_actions>
c00203be:	83 c4 10             	add    $0x10,%esp
  } else {
    // TODO: no command line passed to kernel. Run interactively 
  }

  /* Finish up. */
  shutdown ();
c00203c1:	e8 93 76 00 00       	call   c0027a59 <shutdown>
  thread_exit ();
c00203c6:	e8 9e 0b 00 00       	call   c0020f69 <thread_exit>

c00203cb <bss_init>:

   The start and end of the BSS segment is recorded by the
   linker as _start_bss and _end_bss.  See kernel.lds. */
static void
bss_init (void) 
{
c00203cb:	55                   	push   %ebp
c00203cc:	89 e5                	mov    %esp,%ebp
c00203ce:	83 ec 08             	sub    $0x8,%esp
  extern char _start_bss, _end_bss;
  memset (&_start_bss, 0, &_end_bss - &_start_bss);
c00203d1:	ba 84 87 04 c0       	mov    $0xc0048784,%edx
c00203d6:	b8 84 e5 03 c0       	mov    $0xc003e584,%eax
c00203db:	29 c2                	sub    %eax,%edx
c00203dd:	89 d0                	mov    %edx,%eax
c00203df:	83 ec 04             	sub    $0x4,%esp
c00203e2:	50                   	push   %eax
c00203e3:	6a 00                	push   $0x0
c00203e5:	68 84 e5 03 c0       	push   $0xc003e584
c00203ea:	e8 68 94 00 00       	call   c0029857 <memset>
c00203ef:	83 c4 10             	add    $0x10,%esp
}
c00203f2:	90                   	nop
c00203f3:	c9                   	leave  
c00203f4:	c3                   	ret    

c00203f5 <paging_init>:
   kernel virtual mapping, and then sets up the CPU to use the
   new page directory.  Points init_page_dir to the page
   directory it creates. */
static void
paging_init (void)
{
c00203f5:	55                   	push   %ebp
c00203f6:	89 e5                	mov    %esp,%ebp
c00203f8:	53                   	push   %ebx
c00203f9:	83 ec 24             	sub    $0x24,%esp
  uint32_t *pd, *pt;
  size_t page;
  extern char _start, _end_kernel_text;

  pd = init_page_dir = palloc_get_page (PAL_ASSERT | PAL_ZERO);
c00203fc:	83 ec 0c             	sub    $0xc,%esp
c00203ff:	6a 03                	push   $0x3
c0020401:	e8 02 3a 00 00       	call   c0023e08 <palloc_get_page>
c0020406:	83 c4 10             	add    $0x10,%esp
c0020409:	a3 3c 87 04 c0       	mov    %eax,0xc004873c
c002040e:	a1 3c 87 04 c0       	mov    0xc004873c,%eax
c0020413:	89 45 ec             	mov    %eax,-0x14(%ebp)
  pt = NULL;
c0020416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  for (page = 0; page < init_ram_pages; page++)
c002041d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0020424:	e9 df 00 00 00       	jmp    c0020508 <paging_init+0x113>
    {
      uintptr_t paddr = page * PGSIZE;
c0020429:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002042c:	c1 e0 0c             	shl    $0xc,%eax
c002042f:	89 45 e8             	mov    %eax,-0x18(%ebp)
      char *vaddr = ptov (paddr);
c0020432:	83 ec 0c             	sub    $0xc,%esp
c0020435:	ff 75 e8             	pushl  -0x18(%ebp)
c0020438:	e8 61 fd ff ff       	call   c002019e <ptov>
c002043d:	83 c4 10             	add    $0x10,%esp
c0020440:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      size_t pde_idx = pd_no (vaddr);
c0020443:	83 ec 0c             	sub    $0xc,%esp
c0020446:	ff 75 e4             	pushl  -0x1c(%ebp)
c0020449:	e8 d5 fd ff ff       	call   c0020223 <pd_no>
c002044e:	83 c4 10             	add    $0x10,%esp
c0020451:	89 45 e0             	mov    %eax,-0x20(%ebp)
      size_t pte_idx = pt_no (vaddr);
c0020454:	83 ec 0c             	sub    $0xc,%esp
c0020457:	ff 75 e4             	pushl  -0x1c(%ebp)
c002045a:	e8 b4 fd ff ff       	call   c0020213 <pt_no>
c002045f:	83 c4 10             	add    $0x10,%esp
c0020462:	89 45 dc             	mov    %eax,-0x24(%ebp)
      bool in_kernel_text = &_start <= vaddr && vaddr < &_end_kernel_text;
c0020465:	81 7d e4 00 00 02 c0 	cmpl   $0xc0020000,-0x1c(%ebp)
c002046c:	72 10                	jb     c002047e <paging_init+0x89>
c002046e:	81 7d e4 00 90 03 c0 	cmpl   $0xc0039000,-0x1c(%ebp)
c0020475:	73 07                	jae    c002047e <paging_init+0x89>
c0020477:	b8 01 00 00 00       	mov    $0x1,%eax
c002047c:	eb 05                	jmp    c0020483 <paging_init+0x8e>
c002047e:	b8 00 00 00 00       	mov    $0x0,%eax
c0020483:	88 45 db             	mov    %al,-0x25(%ebp)
c0020486:	80 65 db 01          	andb   $0x1,-0x25(%ebp)

      if (pd[pde_idx] == 0)
c002048a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002048d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0020494:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0020497:	01 d0                	add    %edx,%eax
c0020499:	8b 00                	mov    (%eax),%eax
c002049b:	85 c0                	test   %eax,%eax
c002049d:	75 30                	jne    c00204cf <paging_init+0xda>
        {
          pt = palloc_get_page (PAL_ASSERT | PAL_ZERO);
c002049f:	83 ec 0c             	sub    $0xc,%esp
c00204a2:	6a 03                	push   $0x3
c00204a4:	e8 5f 39 00 00       	call   c0023e08 <palloc_get_page>
c00204a9:	83 c4 10             	add    $0x10,%esp
c00204ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
          pd[pde_idx] = pde_create (pt);
c00204af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00204b2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00204b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00204bc:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c00204bf:	83 ec 0c             	sub    $0xc,%esp
c00204c2:	ff 75 f4             	pushl  -0xc(%ebp)
c00204c5:	e8 64 fd ff ff       	call   c002022e <pde_create>
c00204ca:	83 c4 10             	add    $0x10,%esp
c00204cd:	89 03                	mov    %eax,(%ebx)
        }

      pt[pte_idx] = pte_create_kernel (vaddr, !in_kernel_text);
c00204cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00204d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00204d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00204dc:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c00204df:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c00204e3:	85 c0                	test   %eax,%eax
c00204e5:	0f 95 c0             	setne  %al
c00204e8:	83 f0 01             	xor    $0x1,%eax
c00204eb:	0f b6 c0             	movzbl %al,%eax
c00204ee:	83 e0 01             	and    $0x1,%eax
c00204f1:	0f b6 c0             	movzbl %al,%eax
c00204f4:	83 ec 08             	sub    $0x8,%esp
c00204f7:	50                   	push   %eax
c00204f8:	ff 75 e4             	pushl  -0x1c(%ebp)
c00204fb:	e8 74 fd ff ff       	call   c0020274 <pte_create_kernel>
c0020500:	83 c4 10             	add    $0x10,%esp
c0020503:	89 03                	mov    %eax,(%ebx)
  for (page = 0; page < init_ram_pages; page++)
c0020505:	ff 45 f0             	incl   -0x10(%ebp)
c0020508:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c002050d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0020510:	0f 82 13 ff ff ff    	jb     c0020429 <paging_init+0x34>
  /* Store the physical address of the page directory into CR3
     aka PDBR (page directory base register).  This activates our
     new page tables immediately.  See [IA32-v2a] "MOV--Move
     to/from Control Registers" and [IA32-v3a] 3.7.5 "Base Address
     of the Page Directory". */
  asm volatile ("movl %0, %%cr3" : : "r" (vtop (init_page_dir)));
c0020516:	a1 3c 87 04 c0       	mov    0xc004873c,%eax
c002051b:	83 ec 0c             	sub    $0xc,%esp
c002051e:	50                   	push   %eax
c002051f:	e8 b2 fc ff ff       	call   c00201d6 <vtop>
c0020524:	83 c4 10             	add    $0x10,%esp
c0020527:	0f 22 d8             	mov    %eax,%cr3
}
c002052a:	90                   	nop
c002052b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002052e:	c9                   	leave  
c002052f:	c3                   	ret    

c0020530 <read_command_line>:

/* Breaks the kernel command line into words and returns them as
   an argv-like array. */
static char **
read_command_line (void) 
{
c0020530:	55                   	push   %ebp
c0020531:	89 e5                	mov    %esp,%ebp
c0020533:	83 ec 18             	sub    $0x18,%esp
  static char *argv[LOADER_ARGS_LEN / 2 + 1];
  char *p, *end;
  int argc;
  int i;

  argc = *(uint32_t *) ptov (LOADER_ARG_CNT);
c0020536:	83 ec 0c             	sub    $0xc,%esp
c0020539:	68 3a 7d 00 00       	push   $0x7d3a
c002053e:	e8 5b fc ff ff       	call   c002019e <ptov>
c0020543:	83 c4 10             	add    $0x10,%esp
c0020546:	8b 00                	mov    (%eax),%eax
c0020548:	89 45 ec             	mov    %eax,-0x14(%ebp)
  p = ptov (LOADER_ARGS);
c002054b:	83 ec 0c             	sub    $0xc,%esp
c002054e:	68 3e 7d 00 00       	push   $0x7d3e
c0020553:	e8 46 fc ff ff       	call   c002019e <ptov>
c0020558:	83 c4 10             	add    $0x10,%esp
c002055b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  end = p + LOADER_ARGS_LEN;
c002055e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020561:	83 e8 80             	sub    $0xffffff80,%eax
c0020564:	89 45 e8             	mov    %eax,-0x18(%ebp)
  for (i = 0; i < argc; i++) 
c0020567:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002056e:	eb 4e                	jmp    c00205be <read_command_line+0x8e>
    {
      if (p >= end)
c0020570:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020573:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0020576:	72 19                	jb     c0020591 <read_command_line+0x61>
        PANIC ("command line arguments overflow");
c0020578:	68 4c 3d 03 c0       	push   $0xc0033d4c
c002057d:	68 34 43 03 c0       	push   $0xc0034334
c0020582:	68 e3 00 00 00       	push   $0xe3
c0020587:	68 6c 3d 03 c0       	push   $0xc0033d6c
c002058c:	e8 00 a0 00 00       	call   c002a591 <debug_panic>

      argv[i] = p;
c0020591:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020594:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0020597:	89 14 85 c0 e5 03 c0 	mov    %edx,-0x3ffc1a40(,%eax,4)
      p += strnlen (p, end - p) + 1;
c002059e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00205a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00205a4:	29 c2                	sub    %eax,%edx
c00205a6:	89 d0                	mov    %edx,%eax
c00205a8:	83 ec 08             	sub    $0x8,%esp
c00205ab:	50                   	push   %eax
c00205ac:	ff 75 f4             	pushl  -0xc(%ebp)
c00205af:	e8 4b 93 00 00       	call   c00298ff <strnlen>
c00205b4:	83 c4 10             	add    $0x10,%esp
c00205b7:	40                   	inc    %eax
c00205b8:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (i = 0; i < argc; i++) 
c00205bb:	ff 45 f0             	incl   -0x10(%ebp)
c00205be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00205c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00205c4:	7c aa                	jl     c0020570 <read_command_line+0x40>
    }
  argv[argc] = NULL;
c00205c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00205c9:	c7 04 85 c0 e5 03 c0 	movl   $0x0,-0x3ffc1a40(,%eax,4)
c00205d0:	00 00 00 00 

  /* Print kernel command line. */
  printf ("Kernel command line:");
c00205d4:	83 ec 0c             	sub    $0xc,%esp
c00205d7:	68 81 3d 03 c0       	push   $0xc0033d81
c00205dc:	e8 4f 7a 00 00       	call   c0028030 <printf>
c00205e1:	83 c4 10             	add    $0x10,%esp
  for (i = 0; i < argc; i++)
c00205e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c00205eb:	eb 57                	jmp    c0020644 <read_command_line+0x114>
    if (strchr (argv[i], ' ') == NULL)
c00205ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00205f0:	8b 04 85 c0 e5 03 c0 	mov    -0x3ffc1a40(,%eax,4),%eax
c00205f7:	83 ec 08             	sub    $0x8,%esp
c00205fa:	6a 20                	push   $0x20
c00205fc:	50                   	push   %eax
c00205fd:	e8 64 8f 00 00       	call   c0029566 <strchr>
c0020602:	83 c4 10             	add    $0x10,%esp
c0020605:	85 c0                	test   %eax,%eax
c0020607:	75 1d                	jne    c0020626 <read_command_line+0xf6>
      printf (" %s", argv[i]);
c0020609:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002060c:	8b 04 85 c0 e5 03 c0 	mov    -0x3ffc1a40(,%eax,4),%eax
c0020613:	83 ec 08             	sub    $0x8,%esp
c0020616:	50                   	push   %eax
c0020617:	68 96 3d 03 c0       	push   $0xc0033d96
c002061c:	e8 0f 7a 00 00       	call   c0028030 <printf>
c0020621:	83 c4 10             	add    $0x10,%esp
c0020624:	eb 1b                	jmp    c0020641 <read_command_line+0x111>
    else
      printf (" '%s'", argv[i]);
c0020626:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020629:	8b 04 85 c0 e5 03 c0 	mov    -0x3ffc1a40(,%eax,4),%eax
c0020630:	83 ec 08             	sub    $0x8,%esp
c0020633:	50                   	push   %eax
c0020634:	68 9a 3d 03 c0       	push   $0xc0033d9a
c0020639:	e8 f2 79 00 00       	call   c0028030 <printf>
c002063e:	83 c4 10             	add    $0x10,%esp
  for (i = 0; i < argc; i++)
c0020641:	ff 45 f0             	incl   -0x10(%ebp)
c0020644:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020647:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002064a:	7c a1                	jl     c00205ed <read_command_line+0xbd>
  printf ("\n");
c002064c:	83 ec 0c             	sub    $0xc,%esp
c002064f:	6a 0a                	push   $0xa
c0020651:	e8 8a c2 00 00       	call   c002c8e0 <putchar>
c0020656:	83 c4 10             	add    $0x10,%esp

  return argv;
c0020659:	b8 c0 e5 03 c0       	mov    $0xc003e5c0,%eax
}
c002065e:	c9                   	leave  
c002065f:	c3                   	ret    

c0020660 <parse_options>:

/* Parses options in ARGV[]
   and returns the first non-option argument. */
static char **
parse_options (char **argv) 
{
c0020660:	55                   	push   %ebp
c0020661:	89 e5                	mov    %esp,%ebp
c0020663:	83 ec 18             	sub    $0x18,%esp
  for (; *argv != NULL && **argv == '-'; argv++)
c0020666:	e9 da 01 00 00       	jmp    c0020845 <parse_options+0x1e5>
    {
      char *save_ptr;
      char *name = strtok_r (*argv, "=", &save_ptr);
c002066b:	8b 45 08             	mov    0x8(%ebp),%eax
c002066e:	8b 00                	mov    (%eax),%eax
c0020670:	83 ec 04             	sub    $0x4,%esp
c0020673:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0020676:	52                   	push   %edx
c0020677:	68 a0 3d 03 c0       	push   $0xc0033da0
c002067c:	50                   	push   %eax
c002067d:	e8 c1 90 00 00       	call   c0029743 <strtok_r>
c0020682:	83 c4 10             	add    $0x10,%esp
c0020685:	89 45 f4             	mov    %eax,-0xc(%ebp)
      char *value = strtok_r (NULL, "", &save_ptr);
c0020688:	83 ec 04             	sub    $0x4,%esp
c002068b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c002068e:	50                   	push   %eax
c002068f:	68 a2 3d 03 c0       	push   $0xc0033da2
c0020694:	6a 00                	push   $0x0
c0020696:	e8 a8 90 00 00       	call   c0029743 <strtok_r>
c002069b:	83 c4 10             	add    $0x10,%esp
c002069e:	89 45 f0             	mov    %eax,-0x10(%ebp)
      
      if (!strcmp (name, "-h"))
c00206a1:	83 ec 08             	sub    $0x8,%esp
c00206a4:	68 a3 3d 03 c0       	push   $0xc0033da3
c00206a9:	ff 75 f4             	pushl  -0xc(%ebp)
c00206ac:	e8 a8 8d 00 00       	call   c0029459 <strcmp>
c00206b1:	83 c4 10             	add    $0x10,%esp
c00206b4:	85 c0                	test   %eax,%eax
c00206b6:	75 0a                	jne    c00206c2 <parse_options+0x62>
        usage ();
c00206b8:	e8 ec 02 00 00       	call   c00209a9 <usage>
c00206bd:	e9 7f 01 00 00       	jmp    c0020841 <parse_options+0x1e1>
      else if (!strcmp (name, "-q"))
c00206c2:	83 ec 08             	sub    $0x8,%esp
c00206c5:	68 a6 3d 03 c0       	push   $0xc0033da6
c00206ca:	ff 75 f4             	pushl  -0xc(%ebp)
c00206cd:	e8 87 8d 00 00       	call   c0029459 <strcmp>
c00206d2:	83 c4 10             	add    $0x10,%esp
c00206d5:	85 c0                	test   %eax,%eax
c00206d7:	75 12                	jne    c00206eb <parse_options+0x8b>
        shutdown_configure (SHUTDOWN_POWER_OFF);
c00206d9:	83 ec 0c             	sub    $0xc,%esp
c00206dc:	6a 01                	push   $0x1
c00206de:	e8 9a 73 00 00       	call   c0027a7d <shutdown_configure>
c00206e3:	83 c4 10             	add    $0x10,%esp
c00206e6:	e9 56 01 00 00       	jmp    c0020841 <parse_options+0x1e1>
      else if (!strcmp (name, "-r"))
c00206eb:	83 ec 08             	sub    $0x8,%esp
c00206ee:	68 a9 3d 03 c0       	push   $0xc0033da9
c00206f3:	ff 75 f4             	pushl  -0xc(%ebp)
c00206f6:	e8 5e 8d 00 00       	call   c0029459 <strcmp>
c00206fb:	83 c4 10             	add    $0x10,%esp
c00206fe:	85 c0                	test   %eax,%eax
c0020700:	75 12                	jne    c0020714 <parse_options+0xb4>
        shutdown_configure (SHUTDOWN_REBOOT);
c0020702:	83 ec 0c             	sub    $0xc,%esp
c0020705:	6a 02                	push   $0x2
c0020707:	e8 71 73 00 00       	call   c0027a7d <shutdown_configure>
c002070c:	83 c4 10             	add    $0x10,%esp
c002070f:	e9 2d 01 00 00       	jmp    c0020841 <parse_options+0x1e1>
#ifdef FILESYS
      else if (!strcmp (name, "-f"))
c0020714:	83 ec 08             	sub    $0x8,%esp
c0020717:	68 ac 3d 03 c0       	push   $0xc0033dac
c002071c:	ff 75 f4             	pushl  -0xc(%ebp)
c002071f:	e8 35 8d 00 00       	call   c0029459 <strcmp>
c0020724:	83 c4 10             	add    $0x10,%esp
c0020727:	85 c0                	test   %eax,%eax
c0020729:	75 0c                	jne    c0020737 <parse_options+0xd7>
        format_filesys = true;
c002072b:	c6 05 a0 e5 03 c0 01 	movb   $0x1,0xc003e5a0
c0020732:	e9 0a 01 00 00       	jmp    c0020841 <parse_options+0x1e1>
      else if (!strcmp (name, "-filesys"))
c0020737:	83 ec 08             	sub    $0x8,%esp
c002073a:	68 af 3d 03 c0       	push   $0xc0033daf
c002073f:	ff 75 f4             	pushl  -0xc(%ebp)
c0020742:	e8 12 8d 00 00       	call   c0029459 <strcmp>
c0020747:	83 c4 10             	add    $0x10,%esp
c002074a:	85 c0                	test   %eax,%eax
c002074c:	75 0d                	jne    c002075b <parse_options+0xfb>
        filesys_bdev_name = value;
c002074e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020751:	a3 a4 e5 03 c0       	mov    %eax,0xc003e5a4
c0020756:	e9 e6 00 00 00       	jmp    c0020841 <parse_options+0x1e1>
      else if (!strcmp (name, "-scratch"))
c002075b:	83 ec 08             	sub    $0x8,%esp
c002075e:	68 b8 3d 03 c0       	push   $0xc0033db8
c0020763:	ff 75 f4             	pushl  -0xc(%ebp)
c0020766:	e8 ee 8c 00 00       	call   c0029459 <strcmp>
c002076b:	83 c4 10             	add    $0x10,%esp
c002076e:	85 c0                	test   %eax,%eax
c0020770:	75 0d                	jne    c002077f <parse_options+0x11f>
        scratch_bdev_name = value;
c0020772:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020775:	a3 a8 e5 03 c0       	mov    %eax,0xc003e5a8
c002077a:	e9 c2 00 00 00       	jmp    c0020841 <parse_options+0x1e1>
#ifdef VM
      else if (!strcmp (name, "-swap"))
c002077f:	83 ec 08             	sub    $0x8,%esp
c0020782:	68 c1 3d 03 c0       	push   $0xc0033dc1
c0020787:	ff 75 f4             	pushl  -0xc(%ebp)
c002078a:	e8 ca 8c 00 00       	call   c0029459 <strcmp>
c002078f:	83 c4 10             	add    $0x10,%esp
c0020792:	85 c0                	test   %eax,%eax
c0020794:	75 0d                	jne    c00207a3 <parse_options+0x143>
        swap_bdev_name = value;
c0020796:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020799:	a3 ac e5 03 c0       	mov    %eax,0xc003e5ac
c002079e:	e9 9e 00 00 00       	jmp    c0020841 <parse_options+0x1e1>
#endif
#endif
      else if (!strcmp (name, "-rs"))
c00207a3:	83 ec 08             	sub    $0x8,%esp
c00207a6:	68 c7 3d 03 c0       	push   $0xc0033dc7
c00207ab:	ff 75 f4             	pushl  -0xc(%ebp)
c00207ae:	e8 a6 8c 00 00       	call   c0029459 <strcmp>
c00207b3:	83 c4 10             	add    $0x10,%esp
c00207b6:	85 c0                	test   %eax,%eax
c00207b8:	75 1c                	jne    c00207d6 <parse_options+0x176>
        random_init (atoi (value));
c00207ba:	83 ec 0c             	sub    $0xc,%esp
c00207bd:	ff 75 f0             	pushl  -0x10(%ebp)
c00207c0:	e8 70 86 00 00       	call   c0028e35 <atoi>
c00207c5:	83 c4 10             	add    $0x10,%esp
c00207c8:	83 ec 0c             	sub    $0xc,%esp
c00207cb:	50                   	push   %eax
c00207cc:	e8 de 75 00 00       	call   c0027daf <random_init>
c00207d1:	83 c4 10             	add    $0x10,%esp
c00207d4:	eb 6b                	jmp    c0020841 <parse_options+0x1e1>
      else if (!strcmp (name, "-mlfqs"))
c00207d6:	83 ec 08             	sub    $0x8,%esp
c00207d9:	68 cb 3d 03 c0       	push   $0xc0033dcb
c00207de:	ff 75 f4             	pushl  -0xc(%ebp)
c00207e1:	e8 73 8c 00 00       	call   c0029459 <strcmp>
c00207e6:	83 c4 10             	add    $0x10,%esp
c00207e9:	85 c0                	test   %eax,%eax
c00207eb:	75 09                	jne    c00207f6 <parse_options+0x196>
        thread_mlfqs = true;
c00207ed:	c6 05 48 87 04 c0 01 	movb   $0x1,0xc0048748
c00207f4:	eb 4b                	jmp    c0020841 <parse_options+0x1e1>
#ifdef USERPROG
      else if (!strcmp (name, "-ul"))
c00207f6:	83 ec 08             	sub    $0x8,%esp
c00207f9:	68 d2 3d 03 c0       	push   $0xc0033dd2
c00207fe:	ff 75 f4             	pushl  -0xc(%ebp)
c0020801:	e8 53 8c 00 00       	call   c0029459 <strcmp>
c0020806:	83 c4 10             	add    $0x10,%esp
c0020809:	85 c0                	test   %eax,%eax
c002080b:	75 15                	jne    c0020822 <parse_options+0x1c2>
        user_page_limit = atoi (value);
c002080d:	83 ec 0c             	sub    $0xc,%esp
c0020810:	ff 75 f0             	pushl  -0x10(%ebp)
c0020813:	e8 1d 86 00 00       	call   c0028e35 <atoi>
c0020818:	83 c4 10             	add    $0x10,%esp
c002081b:	a3 00 dd 03 c0       	mov    %eax,0xc003dd00
c0020820:	eb 1f                	jmp    c0020841 <parse_options+0x1e1>
#endif
      else
        PANIC ("unknown option `%s' (use -h for help)", name);
c0020822:	83 ec 0c             	sub    $0xc,%esp
c0020825:	ff 75 f4             	pushl  -0xc(%ebp)
c0020828:	68 d8 3d 03 c0       	push   $0xc0033dd8
c002082d:	68 48 43 03 c0       	push   $0xc0034348
c0020832:	68 1c 01 00 00       	push   $0x11c
c0020837:	68 6c 3d 03 c0       	push   $0xc0033d6c
c002083c:	e8 50 9d 00 00       	call   c002a591 <debug_panic>
  for (; *argv != NULL && **argv == '-'; argv++)
c0020841:	83 45 08 04          	addl   $0x4,0x8(%ebp)
c0020845:	8b 45 08             	mov    0x8(%ebp),%eax
c0020848:	8b 00                	mov    (%eax),%eax
c002084a:	85 c0                	test   %eax,%eax
c002084c:	74 0f                	je     c002085d <parse_options+0x1fd>
c002084e:	8b 45 08             	mov    0x8(%ebp),%eax
c0020851:	8b 00                	mov    (%eax),%eax
c0020853:	8a 00                	mov    (%eax),%al
c0020855:	3c 2d                	cmp    $0x2d,%al
c0020857:	0f 84 0e fe ff ff    	je     c002066b <parse_options+0xb>
     When running under Bochs, this is not enough by itself to
     get a good seed value, because the pintos script sets the
     initial time to a predictable value, not to the local time,
     for reproducibility.  To fix this, give the "-r" option to
     the pintos script to request real-time execution. */
  random_init (rtc_get_time ());
c002085d:	e8 b5 6f 00 00       	call   c0027817 <rtc_get_time>
c0020862:	83 ec 0c             	sub    $0xc,%esp
c0020865:	50                   	push   %eax
c0020866:	e8 44 75 00 00       	call   c0027daf <random_init>
c002086b:	83 c4 10             	add    $0x10,%esp
  
  return argv;
c002086e:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0020871:	c9                   	leave  
c0020872:	c3                   	ret    

c0020873 <run_task>:

/* Runs the task specified in ARGV[1]. */
static void
run_task (char **argv)
{
c0020873:	55                   	push   %ebp
c0020874:	89 e5                	mov    %esp,%ebp
c0020876:	83 ec 18             	sub    $0x18,%esp
  const char *task = argv[1];
c0020879:	8b 45 08             	mov    0x8(%ebp),%eax
c002087c:	8b 40 04             	mov    0x4(%eax),%eax
c002087f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  printf ("Executing '%s':\n", task);
c0020882:	83 ec 08             	sub    $0x8,%esp
c0020885:	ff 75 f4             	pushl  -0xc(%ebp)
c0020888:	68 fe 3d 03 c0       	push   $0xc0033dfe
c002088d:	e8 9e 77 00 00       	call   c0028030 <printf>
c0020892:	83 c4 10             	add    $0x10,%esp
#ifdef USERPROG
  process_wait (process_execute (task));
c0020895:	83 ec 0c             	sub    $0xc,%esp
c0020898:	ff 75 f4             	pushl  -0xc(%ebp)
c002089b:	e8 2d c1 00 00       	call   c002c9cd <process_execute>
c00208a0:	83 c4 10             	add    $0x10,%esp
c00208a3:	83 ec 0c             	sub    $0xc,%esp
c00208a6:	50                   	push   %eax
c00208a7:	e8 27 c5 00 00       	call   c002cdd3 <process_wait>
c00208ac:	83 c4 10             	add    $0x10,%esp
#else
  run_test (task);
#endif
  printf ("Execution of '%s' complete.\n", task);
c00208af:	83 ec 08             	sub    $0x8,%esp
c00208b2:	ff 75 f4             	pushl  -0xc(%ebp)
c00208b5:	68 0f 3e 03 c0       	push   $0xc0033e0f
c00208ba:	e8 71 77 00 00       	call   c0028030 <printf>
c00208bf:	83 c4 10             	add    $0x10,%esp
}
c00208c2:	90                   	nop
c00208c3:	c9                   	leave  
c00208c4:	c3                   	ret    

c00208c5 <run_actions>:

/* Executes all of the actions specified in ARGV[]
   up to the null pointer sentinel. */
static void
run_actions (char **argv) 
{
c00208c5:	55                   	push   %ebp
c00208c6:	89 e5                	mov    %esp,%ebp
c00208c8:	83 ec 18             	sub    $0x18,%esp
      {"append", 2, fsutil_append},
#endif
      {NULL, 0, NULL},
    };

  while (*argv != NULL)
c00208cb:	e9 c9 00 00 00       	jmp    c0020999 <run_actions+0xd4>
    {
      const struct action *a;
      int i;

      /* Find action name. */
      for (a = actions; ; a++)
c00208d0:	c7 45 f4 80 43 03 c0 	movl   $0xc0034380,-0xc(%ebp)
        if (a->name == NULL)
c00208d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00208da:	8b 00                	mov    (%eax),%eax
c00208dc:	85 c0                	test   %eax,%eax
c00208de:	75 22                	jne    c0020902 <run_actions+0x3d>
          PANIC ("unknown action `%s' (use -h for help)", *argv);
c00208e0:	8b 45 08             	mov    0x8(%ebp),%eax
c00208e3:	8b 00                	mov    (%eax),%eax
c00208e5:	83 ec 0c             	sub    $0xc,%esp
c00208e8:	50                   	push   %eax
c00208e9:	68 2c 3e 03 c0       	push   $0xc0033e2c
c00208ee:	68 d4 43 03 c0       	push   $0xc00343d4
c00208f3:	68 5e 01 00 00       	push   $0x15e
c00208f8:	68 6c 3d 03 c0       	push   $0xc0033d6c
c00208fd:	e8 8f 9c 00 00       	call   c002a591 <debug_panic>
        else if (!strcmp (*argv, a->name))
c0020902:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020905:	8b 10                	mov    (%eax),%edx
c0020907:	8b 45 08             	mov    0x8(%ebp),%eax
c002090a:	8b 00                	mov    (%eax),%eax
c002090c:	83 ec 08             	sub    $0x8,%esp
c002090f:	52                   	push   %edx
c0020910:	50                   	push   %eax
c0020911:	e8 43 8b 00 00       	call   c0029459 <strcmp>
c0020916:	83 c4 10             	add    $0x10,%esp
c0020919:	85 c0                	test   %eax,%eax
c002091b:	74 06                	je     c0020923 <run_actions+0x5e>
      for (a = actions; ; a++)
c002091d:	83 45 f4 0c          	addl   $0xc,-0xc(%ebp)
        if (a->name == NULL)
c0020921:	eb b4                	jmp    c00208d7 <run_actions+0x12>
          break;
c0020923:	90                   	nop

      /* Check for required arguments. */
      for (i = 1; i < a->argc; i++)
c0020924:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c002092b:	eb 44                	jmp    c0020971 <run_actions+0xac>
        if (argv[i] == NULL)
c002092d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020930:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0020937:	8b 45 08             	mov    0x8(%ebp),%eax
c002093a:	01 d0                	add    %edx,%eax
c002093c:	8b 00                	mov    (%eax),%eax
c002093e:	85 c0                	test   %eax,%eax
c0020940:	75 2c                	jne    c002096e <run_actions+0xa9>
          PANIC ("action `%s' requires %d argument(s)", *argv, a->argc - 1);
c0020942:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020945:	8b 40 04             	mov    0x4(%eax),%eax
c0020948:	8d 50 ff             	lea    -0x1(%eax),%edx
c002094b:	8b 45 08             	mov    0x8(%ebp),%eax
c002094e:	8b 00                	mov    (%eax),%eax
c0020950:	83 ec 08             	sub    $0x8,%esp
c0020953:	52                   	push   %edx
c0020954:	50                   	push   %eax
c0020955:	68 54 3e 03 c0       	push   $0xc0033e54
c002095a:	68 d4 43 03 c0       	push   $0xc00343d4
c002095f:	68 65 01 00 00       	push   $0x165
c0020964:	68 6c 3d 03 c0       	push   $0xc0033d6c
c0020969:	e8 23 9c 00 00       	call   c002a591 <debug_panic>
      for (i = 1; i < a->argc; i++)
c002096e:	ff 45 f0             	incl   -0x10(%ebp)
c0020971:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020974:	8b 40 04             	mov    0x4(%eax),%eax
c0020977:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002097a:	7f b1                	jg     c002092d <run_actions+0x68>

      /* Invoke action and advance. */
      a->function (argv);
c002097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002097f:	8b 40 08             	mov    0x8(%eax),%eax
c0020982:	83 ec 0c             	sub    $0xc,%esp
c0020985:	ff 75 08             	pushl  0x8(%ebp)
c0020988:	ff d0                	call   *%eax
c002098a:	83 c4 10             	add    $0x10,%esp
      argv += a->argc;
c002098d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020990:	8b 40 04             	mov    0x4(%eax),%eax
c0020993:	c1 e0 02             	shl    $0x2,%eax
c0020996:	01 45 08             	add    %eax,0x8(%ebp)
  while (*argv != NULL)
c0020999:	8b 45 08             	mov    0x8(%ebp),%eax
c002099c:	8b 00                	mov    (%eax),%eax
c002099e:	85 c0                	test   %eax,%eax
c00209a0:	0f 85 2a ff ff ff    	jne    c00208d0 <run_actions+0xb>
    }
  
}
c00209a6:	90                   	nop
c00209a7:	c9                   	leave  
c00209a8:	c3                   	ret    

c00209a9 <usage>:

/* Prints a kernel command line help message and powers off the
   machine. */
static void
usage (void)
{
c00209a9:	55                   	push   %ebp
c00209aa:	89 e5                	mov    %esp,%ebp
c00209ac:	83 ec 08             	sub    $0x8,%esp
  printf ("\nCommand line syntax: [OPTION...] [ACTION...]\n"
c00209af:	83 ec 0c             	sub    $0xc,%esp
c00209b2:	68 78 3e 03 c0       	push   $0xc0033e78
c00209b7:	e8 9c be 00 00       	call   c002c858 <puts>
c00209bc:	83 c4 10             	add    $0x10,%esp
          "  -mlfqs             Use multi-level feedback queue scheduler.\n"
#ifdef USERPROG
          "  -ul=COUNT          Limit user memory to COUNT pages.\n"
#endif
          );
  shutdown_power_off ();
c00209bf:	e8 4e 71 00 00       	call   c0027b12 <shutdown_power_off>

c00209c4 <locate_block_devices>:

#ifdef FILESYS
/* Figure out what block devices to cast in the various Pintos roles. */
static void
locate_block_devices (void)
{
c00209c4:	55                   	push   %ebp
c00209c5:	89 e5                	mov    %esp,%ebp
c00209c7:	83 ec 08             	sub    $0x8,%esp
  locate_block_device (BLOCK_FILESYS, filesys_bdev_name);
c00209ca:	a1 a4 e5 03 c0       	mov    0xc003e5a4,%eax
c00209cf:	83 ec 08             	sub    $0x8,%esp
c00209d2:	50                   	push   %eax
c00209d3:	6a 01                	push   $0x1
c00209d5:	e8 2c 00 00 00       	call   c0020a06 <locate_block_device>
c00209da:	83 c4 10             	add    $0x10,%esp
  locate_block_device (BLOCK_SCRATCH, scratch_bdev_name);
c00209dd:	a1 a8 e5 03 c0       	mov    0xc003e5a8,%eax
c00209e2:	83 ec 08             	sub    $0x8,%esp
c00209e5:	50                   	push   %eax
c00209e6:	6a 02                	push   $0x2
c00209e8:	e8 19 00 00 00       	call   c0020a06 <locate_block_device>
c00209ed:	83 c4 10             	add    $0x10,%esp
#ifdef VM
  locate_block_device (BLOCK_SWAP, swap_bdev_name);
c00209f0:	a1 ac e5 03 c0       	mov    0xc003e5ac,%eax
c00209f5:	83 ec 08             	sub    $0x8,%esp
c00209f8:	50                   	push   %eax
c00209f9:	6a 03                	push   $0x3
c00209fb:	e8 06 00 00 00       	call   c0020a06 <locate_block_device>
c0020a00:	83 c4 10             	add    $0x10,%esp
#endif
}
c0020a03:	90                   	nop
c0020a04:	c9                   	leave  
c0020a05:	c3                   	ret    

c0020a06 <locate_block_device>:
   block device with the given NAME, if NAME is non-null,
   otherwise the first block device in probe order of type
   ROLE. */
static void
locate_block_device (enum block_type role, const char *name)
{
c0020a06:	55                   	push   %ebp
c0020a07:	89 e5                	mov    %esp,%ebp
c0020a09:	53                   	push   %ebx
c0020a0a:	83 ec 14             	sub    $0x14,%esp
  struct block *block = NULL;
c0020a0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (name != NULL)
c0020a14:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0020a18:	74 36                	je     c0020a50 <locate_block_device+0x4a>
    {
      block = block_get_by_name (name);
c0020a1a:	83 ec 0c             	sub    $0xc,%esp
c0020a1d:	ff 75 0c             	pushl  0xc(%ebp)
c0020a20:	e8 56 52 00 00       	call   c0025c7b <block_get_by_name>
c0020a25:	83 c4 10             	add    $0x10,%esp
c0020a28:	89 45 f4             	mov    %eax,-0xc(%ebp)
      if (block == NULL)
c0020a2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0020a2f:	75 56                	jne    c0020a87 <locate_block_device+0x81>
        PANIC ("No such block device \"%s\"", name);
c0020a31:	83 ec 0c             	sub    $0xc,%esp
c0020a34:	ff 75 0c             	pushl  0xc(%ebp)
c0020a37:	68 db 42 03 c0       	push   $0xc00342db
c0020a3c:	68 e0 43 03 c0       	push   $0xc00343e0
c0020a41:	68 b2 01 00 00       	push   $0x1b2
c0020a46:	68 6c 3d 03 c0       	push   $0xc0033d6c
c0020a4b:	e8 41 9b 00 00       	call   c002a591 <debug_panic>
    }
  else
    {
      for (block = block_first (); block != NULL; block = block_next (block))
c0020a50:	e8 df 51 00 00       	call   c0025c34 <block_first>
c0020a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0020a58:	eb 24                	jmp    c0020a7e <locate_block_device+0x78>
        if (block_type (block) == role)
c0020a5a:	83 ec 0c             	sub    $0xc,%esp
c0020a5d:	ff 75 f4             	pushl  -0xc(%ebp)
c0020a60:	e8 b3 53 00 00       	call   c0025e18 <block_type>
c0020a65:	83 c4 10             	add    $0x10,%esp
c0020a68:	3b 45 08             	cmp    0x8(%ebp),%eax
c0020a6b:	74 19                	je     c0020a86 <locate_block_device+0x80>
      for (block = block_first (); block != NULL; block = block_next (block))
c0020a6d:	83 ec 0c             	sub    $0xc,%esp
c0020a70:	ff 75 f4             	pushl  -0xc(%ebp)
c0020a73:	e8 e0 51 00 00       	call   c0025c58 <block_next>
c0020a78:	83 c4 10             	add    $0x10,%esp
c0020a7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0020a7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0020a82:	75 d6                	jne    c0020a5a <locate_block_device+0x54>
c0020a84:	eb 01                	jmp    c0020a87 <locate_block_device+0x81>
          break;
c0020a86:	90                   	nop
    }

  if (block != NULL)
c0020a87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0020a8b:	74 41                	je     c0020ace <locate_block_device+0xc8>
    {
      printf ("%s: using %s\n", block_type_name (role), block_name (block));
c0020a8d:	83 ec 0c             	sub    $0xc,%esp
c0020a90:	ff 75 f4             	pushl  -0xc(%ebp)
c0020a93:	e8 75 53 00 00       	call   c0025e0d <block_name>
c0020a98:	83 c4 10             	add    $0x10,%esp
c0020a9b:	89 c3                	mov    %eax,%ebx
c0020a9d:	83 ec 0c             	sub    $0xc,%esp
c0020aa0:	ff 75 08             	pushl  0x8(%ebp)
c0020aa3:	e8 e6 50 00 00       	call   c0025b8e <block_type_name>
c0020aa8:	83 c4 10             	add    $0x10,%esp
c0020aab:	83 ec 04             	sub    $0x4,%esp
c0020aae:	53                   	push   %ebx
c0020aaf:	50                   	push   %eax
c0020ab0:	68 f5 42 03 c0       	push   $0xc00342f5
c0020ab5:	e8 76 75 00 00       	call   c0028030 <printf>
c0020aba:	83 c4 10             	add    $0x10,%esp
      block_set_role (role, block);
c0020abd:	83 ec 08             	sub    $0x8,%esp
c0020ac0:	ff 75 f4             	pushl  -0xc(%ebp)
c0020ac3:	ff 75 08             	pushl  0x8(%ebp)
c0020ac6:	e8 2f 51 00 00       	call   c0025bfa <block_set_role>
c0020acb:	83 c4 10             	add    $0x10,%esp
    }
}
c0020ace:	90                   	nop
c0020acf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0020ad2:	c9                   	leave  
c0020ad3:	c3                   	ret    

c0020ad4 <pg_round_down>:
static inline void *pg_round_down (const void *va) {
c0020ad4:	55                   	push   %ebp
c0020ad5:	89 e5                	mov    %esp,%ebp
  return (void *) ((uintptr_t) va & ~PGMASK);
c0020ad7:	8b 45 08             	mov    0x8(%ebp),%eax
c0020ada:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
c0020adf:	5d                   	pop    %ebp
c0020ae0:	c3                   	ret    

c0020ae1 <thread_init>:

   It is not safe to call thread_current() until this function
   finishes. */
void
thread_init (void) 
{
c0020ae1:	55                   	push   %ebp
c0020ae2:	89 e5                	mov    %esp,%ebp
c0020ae4:	53                   	push   %ebx
c0020ae5:	83 ec 04             	sub    $0x4,%esp
  ASSERT (intr_get_level () == INTR_OFF);
c0020ae8:	e8 8a 12 00 00       	call   c0021d77 <intr_get_level>
c0020aed:	85 c0                	test   %eax,%eax
c0020aef:	74 1e                	je     c0020b0f <thread_init+0x2e>
c0020af1:	83 ec 0c             	sub    $0xc,%esp
c0020af4:	68 f4 43 03 c0       	push   $0xc00343f4
c0020af9:	68 12 44 03 c0       	push   $0xc0034412
c0020afe:	68 1c 46 03 c0       	push   $0xc003461c
c0020b03:	6a 5e                	push   $0x5e
c0020b05:	68 29 44 03 c0       	push   $0xc0034429
c0020b0a:	e8 82 9a 00 00       	call   c002a591 <debug_panic>

  lock_init (&tid_lock);
c0020b0f:	83 ec 0c             	sub    $0xc,%esp
c0020b12:	68 20 e7 03 c0       	push   $0xc003e720
c0020b17:	e8 c5 29 00 00       	call   c00234e1 <lock_init>
c0020b1c:	83 c4 10             	add    $0x10,%esp
  list_init (&ready_list);
c0020b1f:	83 ec 0c             	sub    $0xc,%esp
c0020b22:	68 e0 e6 03 c0       	push   $0xc003e6e0
c0020b27:	e8 d8 9c 00 00       	call   c002a804 <list_init>
c0020b2c:	83 c4 10             	add    $0x10,%esp
  list_init (&all_list);
c0020b2f:	83 ec 0c             	sub    $0xc,%esp
c0020b32:	68 f0 e6 03 c0       	push   $0xc003e6f0
c0020b37:	e8 c8 9c 00 00       	call   c002a804 <list_init>
c0020b3c:	83 c4 10             	add    $0x10,%esp

  /* Set up a thread structure for the running thread. */
  initial_thread = running_thread ();
c0020b3f:	e8 60 07 00 00       	call   c00212a4 <running_thread>
c0020b44:	a3 04 e7 03 c0       	mov    %eax,0xc003e704
  init_thread (initial_thread, "main", PRI_DEFAULT);
c0020b49:	a1 04 e7 03 c0       	mov    0xc003e704,%eax
c0020b4e:	83 ec 04             	sub    $0x4,%esp
c0020b51:	6a 1f                	push   $0x1f
c0020b53:	68 40 44 03 c0       	push   $0xc0034440
c0020b58:	50                   	push   %eax
c0020b59:	e8 88 07 00 00       	call   c00212e6 <init_thread>
c0020b5e:	83 c4 10             	add    $0x10,%esp
  initial_thread->status = THREAD_RUNNING;
c0020b61:	a1 04 e7 03 c0       	mov    0xc003e704,%eax
c0020b66:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  initial_thread->tid = allocate_tid ();
c0020b6d:	8b 1d 04 e7 03 c0    	mov    0xc003e704,%ebx
c0020b73:	e8 5b 0b 00 00       	call   c00216d3 <allocate_tid>
c0020b78:	89 03                	mov    %eax,(%ebx)

  load_avg = convert_to_fixed_point(0);
c0020b7a:	83 ec 0c             	sub    $0xc,%esp
c0020b7d:	6a 00                	push   $0x0
c0020b7f:	e8 df 98 00 00       	call   c002a463 <convert_to_fixed_point>
c0020b84:	83 c4 10             	add    $0x10,%esp
c0020b87:	a3 44 87 04 c0       	mov    %eax,0xc0048744
  // if (thread_mlfqs)
  //   printf("123\n");
  // else
  //   printf("1243421\n");
}
c0020b8c:	90                   	nop
c0020b8d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0020b90:	c9                   	leave  
c0020b91:	c3                   	ret    

c0020b92 <thread_start>:

/* Starts preemptive thread scheduling by enabling interrupts.
   Also creates the idle thread. */
void
thread_start (void) 
{
c0020b92:	55                   	push   %ebp
c0020b93:	89 e5                	mov    %esp,%ebp
c0020b95:	83 ec 28             	sub    $0x28,%esp
  /* Create the idle thread. */
  struct semaphore idle_started;
  sema_init (&idle_started, 0);
c0020b98:	83 ec 08             	sub    $0x8,%esp
c0020b9b:	6a 00                	push   $0x0
c0020b9d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0020ba0:	50                   	push   %eax
c0020ba1:	e8 52 26 00 00       	call   c00231f8 <sema_init>
c0020ba6:	83 c4 10             	add    $0x10,%esp
  thread_create ("idle", PRI_MIN, idle, &idle_started);
c0020ba9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0020bac:	50                   	push   %eax
c0020bad:	68 2d 12 02 c0       	push   $0xc002122d
c0020bb2:	6a 00                	push   $0x0
c0020bb4:	68 45 44 03 c0       	push   $0xc0034445
c0020bb9:	e8 fc 00 00 00       	call   c0020cba <thread_create>
c0020bbe:	83 c4 10             	add    $0x10,%esp

  /* Start preemptive thread scheduling. */
  intr_enable ();
c0020bc1:	e8 e8 11 00 00       	call   c0021dae <intr_enable>

  /* Wait for the idle thread to initialize idle_thread. */
  sema_down (&idle_started);
c0020bc6:	83 ec 0c             	sub    $0xc,%esp
c0020bc9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0020bcc:	50                   	push   %eax
c0020bcd:	e8 6d 26 00 00       	call   c002323f <sema_down>
c0020bd2:	83 c4 10             	add    $0x10,%esp
}
c0020bd5:	90                   	nop
c0020bd6:	c9                   	leave  
c0020bd7:	c3                   	ret    

c0020bd8 <thread_tick>:

/* Called by the timer interrupt handler at each timer tick.
   Thus, this function runs in an external interrupt context. */
void
thread_tick (void) 
{
c0020bd8:	55                   	push   %ebp
c0020bd9:	89 e5                	mov    %esp,%ebp
c0020bdb:	83 ec 18             	sub    $0x18,%esp
  struct thread *t = thread_current ();
c0020bde:	e8 06 03 00 00       	call   c0020ee9 <thread_current>
c0020be3:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Update statistics. */
  if (t == idle_thread)
c0020be6:	a1 00 e7 03 c0       	mov    0xc003e700,%eax
c0020beb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0020bee:	75 1e                	jne    c0020c0e <thread_tick+0x36>
    idle_ticks++;
c0020bf0:	a1 48 e7 03 c0       	mov    0xc003e748,%eax
c0020bf5:	8b 15 4c e7 03 c0    	mov    0xc003e74c,%edx
c0020bfb:	83 c0 01             	add    $0x1,%eax
c0020bfe:	83 d2 00             	adc    $0x0,%edx
c0020c01:	a3 48 e7 03 c0       	mov    %eax,0xc003e748
c0020c06:	89 15 4c e7 03 c0    	mov    %edx,0xc003e74c
c0020c0c:	eb 44                	jmp    c0020c52 <thread_tick+0x7a>
#ifdef USERPROG
  else if (t->pagedir != NULL)
c0020c0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020c11:	8b 40 30             	mov    0x30(%eax),%eax
c0020c14:	85 c0                	test   %eax,%eax
c0020c16:	74 1e                	je     c0020c36 <thread_tick+0x5e>
    user_ticks++;
c0020c18:	a1 58 e7 03 c0       	mov    0xc003e758,%eax
c0020c1d:	8b 15 5c e7 03 c0    	mov    0xc003e75c,%edx
c0020c23:	83 c0 01             	add    $0x1,%eax
c0020c26:	83 d2 00             	adc    $0x0,%edx
c0020c29:	a3 58 e7 03 c0       	mov    %eax,0xc003e758
c0020c2e:	89 15 5c e7 03 c0    	mov    %edx,0xc003e75c
c0020c34:	eb 1c                	jmp    c0020c52 <thread_tick+0x7a>
#endif
  else
    kernel_ticks++;
c0020c36:	a1 50 e7 03 c0       	mov    0xc003e750,%eax
c0020c3b:	8b 15 54 e7 03 c0    	mov    0xc003e754,%edx
c0020c41:	83 c0 01             	add    $0x1,%eax
c0020c44:	83 d2 00             	adc    $0x0,%edx
c0020c47:	a3 50 e7 03 c0       	mov    %eax,0xc003e750
c0020c4c:	89 15 54 e7 03 c0    	mov    %edx,0xc003e754

  /* Enforce preemption. */
  if (++thread_ticks >= TIME_SLICE)
c0020c52:	a1 60 e7 03 c0       	mov    0xc003e760,%eax
c0020c57:	40                   	inc    %eax
c0020c58:	a3 60 e7 03 c0       	mov    %eax,0xc003e760
c0020c5d:	a1 60 e7 03 c0       	mov    0xc003e760,%eax
c0020c62:	83 f8 03             	cmp    $0x3,%eax
c0020c65:	76 05                	jbe    c0020c6c <thread_tick+0x94>
    intr_yield_on_return ();
c0020c67:	e8 5b 14 00 00       	call   c00220c7 <intr_yield_on_return>
}
c0020c6c:	90                   	nop
c0020c6d:	c9                   	leave  
c0020c6e:	c3                   	ret    

c0020c6f <thread_print_stats>:

/* Prints thread statistics. */
void
thread_print_stats (void) 
{
c0020c6f:	55                   	push   %ebp
c0020c70:	89 e5                	mov    %esp,%ebp
c0020c72:	57                   	push   %edi
c0020c73:	56                   	push   %esi
c0020c74:	53                   	push   %ebx
c0020c75:	83 ec 0c             	sub    $0xc,%esp
  printf ("Thread: %lld idle ticks, %lld kernel ticks, %lld user ticks\n",
c0020c78:	8b 35 58 e7 03 c0    	mov    0xc003e758,%esi
c0020c7e:	8b 3d 5c e7 03 c0    	mov    0xc003e75c,%edi
c0020c84:	8b 0d 50 e7 03 c0    	mov    0xc003e750,%ecx
c0020c8a:	8b 1d 54 e7 03 c0    	mov    0xc003e754,%ebx
c0020c90:	a1 48 e7 03 c0       	mov    0xc003e748,%eax
c0020c95:	8b 15 4c e7 03 c0    	mov    0xc003e74c,%edx
c0020c9b:	83 ec 04             	sub    $0x4,%esp
c0020c9e:	57                   	push   %edi
c0020c9f:	56                   	push   %esi
c0020ca0:	53                   	push   %ebx
c0020ca1:	51                   	push   %ecx
c0020ca2:	52                   	push   %edx
c0020ca3:	50                   	push   %eax
c0020ca4:	68 4c 44 03 c0       	push   $0xc003444c
c0020ca9:	e8 82 73 00 00       	call   c0028030 <printf>
c0020cae:	83 c4 20             	add    $0x20,%esp
          idle_ticks, kernel_ticks, user_ticks);
}
c0020cb1:	90                   	nop
c0020cb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0020cb5:	5b                   	pop    %ebx
c0020cb6:	5e                   	pop    %esi
c0020cb7:	5f                   	pop    %edi
c0020cb8:	5d                   	pop    %ebp
c0020cb9:	c3                   	ret    

c0020cba <thread_create>:
   PRIORITY, but no actual priority scheduling is implemented.
   Priority scheduling is the goal of Problem 1-3. */
tid_t
thread_create (const char *name, int priority,
               thread_func *function, void *aux) 
{
c0020cba:	55                   	push   %ebp
c0020cbb:	89 e5                	mov    %esp,%ebp
c0020cbd:	83 ec 28             	sub    $0x28,%esp
  struct kernel_thread_frame *kf;
  struct switch_entry_frame *ef;
  struct switch_threads_frame *sf;
  tid_t tid;

  ASSERT (function != NULL);
c0020cc0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0020cc4:	75 21                	jne    c0020ce7 <thread_create+0x2d>
c0020cc6:	83 ec 0c             	sub    $0xc,%esp
c0020cc9:	68 89 44 03 c0       	push   $0xc0034489
c0020cce:	68 12 44 03 c0       	push   $0xc0034412
c0020cd3:	68 28 46 03 c0       	push   $0xc0034628
c0020cd8:	68 b9 00 00 00       	push   $0xb9
c0020cdd:	68 29 44 03 c0       	push   $0xc0034429
c0020ce2:	e8 aa 98 00 00       	call   c002a591 <debug_panic>

  /* Allocate thread. */
  t = palloc_get_page (PAL_ZERO);
c0020ce7:	83 ec 0c             	sub    $0xc,%esp
c0020cea:	6a 02                	push   $0x2
c0020cec:	e8 17 31 00 00       	call   c0023e08 <palloc_get_page>
c0020cf1:	83 c4 10             	add    $0x10,%esp
c0020cf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (t == NULL)
c0020cf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0020cfb:	75 0a                	jne    c0020d07 <thread_create+0x4d>
    return TID_ERROR;
c0020cfd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0020d02:	e9 bc 00 00 00       	jmp    c0020dc3 <thread_create+0x109>

  /* Initialize thread. */
  init_thread (t, name, priority);
c0020d07:	83 ec 04             	sub    $0x4,%esp
c0020d0a:	ff 75 0c             	pushl  0xc(%ebp)
c0020d0d:	ff 75 08             	pushl  0x8(%ebp)
c0020d10:	ff 75 f4             	pushl  -0xc(%ebp)
c0020d13:	e8 ce 05 00 00       	call   c00212e6 <init_thread>
c0020d18:	83 c4 10             	add    $0x10,%esp

  tid = t->tid = allocate_tid ();
c0020d1b:	e8 b3 09 00 00       	call   c00216d3 <allocate_tid>
c0020d20:	89 c2                	mov    %eax,%edx
c0020d22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020d25:	89 10                	mov    %edx,(%eax)
c0020d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020d2a:	8b 00                	mov    (%eax),%eax
c0020d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // printf("%d, create %d\n", thread_current()->tid, tid);

  /* Stack frame for kernel_thread(). */
  kf = alloc_frame (t, sizeof *kf);
c0020d2f:	83 ec 08             	sub    $0x8,%esp
c0020d32:	6a 0c                	push   $0xc
c0020d34:	ff 75 f4             	pushl  -0xc(%ebp)
c0020d37:	e8 64 07 00 00       	call   c00214a0 <alloc_frame>
c0020d3c:	83 c4 10             	add    $0x10,%esp
c0020d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  kf->eip = NULL;
c0020d42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0020d45:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  kf->function = function;
c0020d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0020d4e:	8b 55 10             	mov    0x10(%ebp),%edx
c0020d51:	89 50 04             	mov    %edx,0x4(%eax)
  kf->aux = aux;
c0020d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0020d57:	8b 55 14             	mov    0x14(%ebp),%edx
c0020d5a:	89 50 08             	mov    %edx,0x8(%eax)

  /* Stack frame for switch_entry(). */
  ef = alloc_frame (t, sizeof *ef);
c0020d5d:	83 ec 08             	sub    $0x8,%esp
c0020d60:	6a 04                	push   $0x4
c0020d62:	ff 75 f4             	pushl  -0xc(%ebp)
c0020d65:	e8 36 07 00 00       	call   c00214a0 <alloc_frame>
c0020d6a:	83 c4 10             	add    $0x10,%esp
c0020d6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  ef->eip = (void (*) (void)) kernel_thread;
c0020d70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0020d73:	c7 00 5f 12 02 c0    	movl   $0xc002125f,(%eax)

  /* Stack frame for switch_threads(). */
  sf = alloc_frame (t, sizeof *sf);
c0020d79:	83 ec 08             	sub    $0x8,%esp
c0020d7c:	6a 1c                	push   $0x1c
c0020d7e:	ff 75 f4             	pushl  -0xc(%ebp)
c0020d81:	e8 1a 07 00 00       	call   c00214a0 <alloc_frame>
c0020d86:	83 c4 10             	add    $0x10,%esp
c0020d89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  sf->eip = switch_entry;
c0020d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0020d8f:	c7 40 10 4b 1d 02 c0 	movl   $0xc0021d4b,0x10(%eax)
  sf->ebp = 0;
c0020d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0020d99:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  /* Add to run queue. */
  thread_unblock (t);
c0020da0:	83 ec 0c             	sub    $0xc,%esp
c0020da3:	ff 75 f4             	pushl  -0xc(%ebp)
c0020da6:	e8 8b 00 00 00       	call   c0020e36 <thread_unblock>
c0020dab:	83 c4 10             	add    $0x10,%esp

  if (thread_current() -> priority < priority)
c0020dae:	e8 36 01 00 00       	call   c0020ee9 <thread_current>
c0020db3:	8b 40 1c             	mov    0x1c(%eax),%eax
c0020db6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0020db9:	7d 05                	jge    c0020dc0 <thread_create+0x106>
    thread_yield();
c0020dbb:	e8 24 02 00 00       	call   c0020fe4 <thread_yield>

  return tid;
c0020dc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0020dc3:	c9                   	leave  
c0020dc4:	c3                   	ret    

c0020dc5 <thread_block>:
   This function must be called with interrupts turned off.  It
   is usually a better idea to use one of the synchronization
   primitives in synch.h. */
void
thread_block (void) 
{
c0020dc5:	55                   	push   %ebp
c0020dc6:	89 e5                	mov    %esp,%ebp
c0020dc8:	83 ec 08             	sub    $0x8,%esp
  ASSERT (!intr_context ());
c0020dcb:	e8 eb 12 00 00       	call   c00220bb <intr_context>
c0020dd0:	83 f0 01             	xor    $0x1,%eax
c0020dd3:	84 c0                	test   %al,%al
c0020dd5:	75 21                	jne    c0020df8 <thread_block+0x33>
c0020dd7:	83 ec 0c             	sub    $0xc,%esp
c0020dda:	68 9a 44 03 c0       	push   $0xc003449a
c0020ddf:	68 12 44 03 c0       	push   $0xc0034412
c0020de4:	68 38 46 03 c0       	push   $0xc0034638
c0020de9:	68 e8 00 00 00       	push   $0xe8
c0020dee:	68 29 44 03 c0       	push   $0xc0034429
c0020df3:	e8 99 97 00 00       	call   c002a591 <debug_panic>
  ASSERT (intr_get_level () == INTR_OFF);
c0020df8:	e8 7a 0f 00 00       	call   c0021d77 <intr_get_level>
c0020dfd:	85 c0                	test   %eax,%eax
c0020dff:	74 21                	je     c0020e22 <thread_block+0x5d>
c0020e01:	83 ec 0c             	sub    $0xc,%esp
c0020e04:	68 f4 43 03 c0       	push   $0xc00343f4
c0020e09:	68 12 44 03 c0       	push   $0xc0034412
c0020e0e:	68 38 46 03 c0       	push   $0xc0034638
c0020e13:	68 e9 00 00 00       	push   $0xe9
c0020e18:	68 29 44 03 c0       	push   $0xc0034429
c0020e1d:	e8 6f 97 00 00       	call   c002a591 <debug_panic>

  thread_current ()->status = THREAD_BLOCKED;
c0020e22:	e8 c2 00 00 00       	call   c0020ee9 <thread_current>
c0020e27:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
  schedule ();
c0020e2e:	e8 ce 07 00 00       	call   c0021601 <schedule>
}
c0020e33:	90                   	nop
c0020e34:	c9                   	leave  
c0020e35:	c3                   	ret    

c0020e36 <thread_unblock>:
   be important: if the caller had disabled interrupts itself,
   it may expect that it can atomically unblock a thread and
   update other data. */
void
thread_unblock (struct thread *t) 
{
c0020e36:	55                   	push   %ebp
c0020e37:	89 e5                	mov    %esp,%ebp
c0020e39:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level;

  ASSERT (is_thread (t));
c0020e3c:	83 ec 0c             	sub    $0xc,%esp
c0020e3f:	ff 75 08             	pushl  0x8(%ebp)
c0020e42:	e8 75 04 00 00       	call   c00212bc <is_thread>
c0020e47:	83 c4 10             	add    $0x10,%esp
c0020e4a:	84 c0                	test   %al,%al
c0020e4c:	75 21                	jne    c0020e6f <thread_unblock+0x39>
c0020e4e:	83 ec 0c             	sub    $0xc,%esp
c0020e51:	68 ab 44 03 c0       	push   $0xc00344ab
c0020e56:	68 12 44 03 c0       	push   $0xc0034412
c0020e5b:	68 48 46 03 c0       	push   $0xc0034648
c0020e60:	68 fc 00 00 00       	push   $0xfc
c0020e65:	68 29 44 03 c0       	push   $0xc0034429
c0020e6a:	e8 22 97 00 00       	call   c002a591 <debug_panic>

  old_level = intr_disable ();
c0020e6f:	e8 78 0f 00 00       	call   c0021dec <intr_disable>
c0020e74:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ASSERT (t->status == THREAD_BLOCKED);
c0020e77:	8b 45 08             	mov    0x8(%ebp),%eax
c0020e7a:	8b 40 04             	mov    0x4(%eax),%eax
c0020e7d:	83 f8 02             	cmp    $0x2,%eax
c0020e80:	74 21                	je     c0020ea3 <thread_unblock+0x6d>
c0020e82:	83 ec 0c             	sub    $0xc,%esp
c0020e85:	68 b9 44 03 c0       	push   $0xc00344b9
c0020e8a:	68 12 44 03 c0       	push   $0xc0034412
c0020e8f:	68 48 46 03 c0       	push   $0xc0034648
c0020e94:	68 ff 00 00 00       	push   $0xff
c0020e99:	68 29 44 03 c0       	push   $0xc0034429
c0020e9e:	e8 ee 96 00 00       	call   c002a591 <debug_panic>

  // list_push_back (&ready_list, &t->elem);
  list_insert_ordered(&ready_list, &t->elem, thread_priority_cmp, NULL);
c0020ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0020ea6:	83 c0 28             	add    $0x28,%eax
c0020ea9:	6a 00                	push   $0x0
c0020eab:	68 64 17 02 c0       	push   $0xc0021764
c0020eb0:	50                   	push   %eax
c0020eb1:	68 e0 e6 03 c0       	push   $0xc003e6e0
c0020eb6:	e8 f1 a3 00 00       	call   c002b2ac <list_insert_ordered>
c0020ebb:	83 c4 10             	add    $0x10,%esp

  t->status = THREAD_READY;
c0020ebe:	8b 45 08             	mov    0x8(%ebp),%eax
c0020ec1:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
  intr_set_level (old_level);
c0020ec8:	83 ec 0c             	sub    $0xc,%esp
c0020ecb:	ff 75 f4             	pushl  -0xc(%ebp)
c0020ece:	e8 c1 0e 00 00       	call   c0021d94 <intr_set_level>
c0020ed3:	83 c4 10             	add    $0x10,%esp
}
c0020ed6:	90                   	nop
c0020ed7:	c9                   	leave  
c0020ed8:	c3                   	ret    

c0020ed9 <thread_name>:

/* Returns the name of the running thread. */
const char *
thread_name (void) 
{
c0020ed9:	55                   	push   %ebp
c0020eda:	89 e5                	mov    %esp,%ebp
c0020edc:	83 ec 08             	sub    $0x8,%esp
  return thread_current ()->name;
c0020edf:	e8 05 00 00 00       	call   c0020ee9 <thread_current>
c0020ee4:	83 c0 08             	add    $0x8,%eax
}
c0020ee7:	c9                   	leave  
c0020ee8:	c3                   	ret    

c0020ee9 <thread_current>:
/* Returns the running thread.
   This is running_thread() plus a couple of sanity checks.
   See the big comment at the top of thread.h for details. */
struct thread *
thread_current (void) 
{
c0020ee9:	55                   	push   %ebp
c0020eea:	89 e5                	mov    %esp,%ebp
c0020eec:	83 ec 18             	sub    $0x18,%esp
  struct thread *t = running_thread ();
c0020eef:	e8 b0 03 00 00       	call   c00212a4 <running_thread>
c0020ef4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  /* Make sure T is really a thread.
     If either of these assertions fire, then your thread may
     have overflowed its stack.  Each thread has less than 4 kB
     of stack, so a few big automatic arrays or moderate
     recursion can cause stack overflow. */
  ASSERT (is_thread (t));
c0020ef7:	83 ec 0c             	sub    $0xc,%esp
c0020efa:	ff 75 f4             	pushl  -0xc(%ebp)
c0020efd:	e8 ba 03 00 00       	call   c00212bc <is_thread>
c0020f02:	83 c4 10             	add    $0x10,%esp
c0020f05:	84 c0                	test   %al,%al
c0020f07:	75 21                	jne    c0020f2a <thread_current+0x41>
c0020f09:	83 ec 0c             	sub    $0xc,%esp
c0020f0c:	68 ab 44 03 c0       	push   $0xc00344ab
c0020f11:	68 12 44 03 c0       	push   $0xc0034412
c0020f16:	68 58 46 03 c0       	push   $0xc0034658
c0020f1b:	68 1c 01 00 00       	push   $0x11c
c0020f20:	68 29 44 03 c0       	push   $0xc0034429
c0020f25:	e8 67 96 00 00       	call   c002a591 <debug_panic>
  ASSERT (t->status == THREAD_RUNNING);
c0020f2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020f2d:	8b 40 04             	mov    0x4(%eax),%eax
c0020f30:	85 c0                	test   %eax,%eax
c0020f32:	74 21                	je     c0020f55 <thread_current+0x6c>
c0020f34:	83 ec 0c             	sub    $0xc,%esp
c0020f37:	68 d5 44 03 c0       	push   $0xc00344d5
c0020f3c:	68 12 44 03 c0       	push   $0xc0034412
c0020f41:	68 58 46 03 c0       	push   $0xc0034658
c0020f46:	68 1d 01 00 00       	push   $0x11d
c0020f4b:	68 29 44 03 c0       	push   $0xc0034429
c0020f50:	e8 3c 96 00 00       	call   c002a591 <debug_panic>

  return t;
c0020f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0020f58:	c9                   	leave  
c0020f59:	c3                   	ret    

c0020f5a <thread_tid>:

/* Returns the running thread's tid. */
tid_t
thread_tid (void) 
{
c0020f5a:	55                   	push   %ebp
c0020f5b:	89 e5                	mov    %esp,%ebp
c0020f5d:	83 ec 08             	sub    $0x8,%esp
  return thread_current ()->tid;
c0020f60:	e8 84 ff ff ff       	call   c0020ee9 <thread_current>
c0020f65:	8b 00                	mov    (%eax),%eax
}
c0020f67:	c9                   	leave  
c0020f68:	c3                   	ret    

c0020f69 <thread_exit>:

/* Deschedules the current thread and destroys it.  Never
   returns to the caller. */
void
thread_exit (void) 
{
c0020f69:	55                   	push   %ebp
c0020f6a:	89 e5                	mov    %esp,%ebp
c0020f6c:	83 ec 08             	sub    $0x8,%esp
  ASSERT (!intr_context ());
c0020f6f:	e8 47 11 00 00       	call   c00220bb <intr_context>
c0020f74:	83 f0 01             	xor    $0x1,%eax
c0020f77:	84 c0                	test   %al,%al
c0020f79:	75 21                	jne    c0020f9c <thread_exit+0x33>
c0020f7b:	83 ec 0c             	sub    $0xc,%esp
c0020f7e:	68 9a 44 03 c0       	push   $0xc003449a
c0020f83:	68 12 44 03 c0       	push   $0xc0034412
c0020f88:	68 68 46 03 c0       	push   $0xc0034668
c0020f8d:	68 2e 01 00 00       	push   $0x12e
c0020f92:	68 29 44 03 c0       	push   $0xc0034429
c0020f97:	e8 f5 95 00 00       	call   c002a591 <debug_panic>

#ifdef USERPROG
  process_exit ();
c0020f9c:	e8 f3 be 00 00       	call   c002ce94 <process_exit>
#endif

  /* Remove thread from all threads list, set our status to dying,
     and schedule another process.  That process will destroy us
     when it calls thread_schedule_tail(). */
  intr_disable ();
c0020fa1:	e8 46 0e 00 00       	call   c0021dec <intr_disable>
  list_remove (&thread_current()->allelem);
c0020fa6:	e8 3e ff ff ff       	call   c0020ee9 <thread_current>
c0020fab:	83 c0 20             	add    $0x20,%eax
c0020fae:	83 ec 0c             	sub    $0xc,%esp
c0020fb1:	50                   	push   %eax
c0020fb2:	e8 53 9c 00 00       	call   c002ac0a <list_remove>
c0020fb7:	83 c4 10             	add    $0x10,%esp
  thread_current ()->status = THREAD_DYING;
c0020fba:	e8 2a ff ff ff       	call   c0020ee9 <thread_current>
c0020fbf:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
  schedule ();
c0020fc6:	e8 36 06 00 00       	call   c0021601 <schedule>
  NOT_REACHED ();
c0020fcb:	68 f4 44 03 c0       	push   $0xc00344f4
c0020fd0:	68 68 46 03 c0       	push   $0xc0034668
c0020fd5:	68 3b 01 00 00       	push   $0x13b
c0020fda:	68 29 44 03 c0       	push   $0xc0034429
c0020fdf:	e8 ad 95 00 00       	call   c002a591 <debug_panic>

c0020fe4 <thread_yield>:

/* Yields the CPU.  The current thread is not put to sleep and
   may be scheduled again immediately at the scheduler's whim. */
void
thread_yield (void) 
{
c0020fe4:	55                   	push   %ebp
c0020fe5:	89 e5                	mov    %esp,%ebp
c0020fe7:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur = thread_current ();
c0020fea:	e8 fa fe ff ff       	call   c0020ee9 <thread_current>
c0020fef:	89 45 f4             	mov    %eax,-0xc(%ebp)
  enum intr_level old_level;
  
  ASSERT (!intr_context ());
c0020ff2:	e8 c4 10 00 00       	call   c00220bb <intr_context>
c0020ff7:	83 f0 01             	xor    $0x1,%eax
c0020ffa:	84 c0                	test   %al,%al
c0020ffc:	75 21                	jne    c002101f <thread_yield+0x3b>
c0020ffe:	83 ec 0c             	sub    $0xc,%esp
c0021001:	68 9a 44 03 c0       	push   $0xc003449a
c0021006:	68 12 44 03 c0       	push   $0xc0034412
c002100b:	68 74 46 03 c0       	push   $0xc0034674
c0021010:	68 46 01 00 00       	push   $0x146
c0021015:	68 29 44 03 c0       	push   $0xc0034429
c002101a:	e8 72 95 00 00       	call   c002a591 <debug_panic>

  old_level = intr_disable ();
c002101f:	e8 c8 0d 00 00       	call   c0021dec <intr_disable>
c0021024:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (cur != idle_thread) 
c0021027:	a1 00 e7 03 c0       	mov    0xc003e700,%eax
c002102c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c002102f:	74 1b                	je     c002104c <thread_yield+0x68>
    list_insert_ordered(&ready_list, &cur->elem, thread_priority_cmp, NULL);
c0021031:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021034:	83 c0 28             	add    $0x28,%eax
c0021037:	6a 00                	push   $0x0
c0021039:	68 64 17 02 c0       	push   $0xc0021764
c002103e:	50                   	push   %eax
c002103f:	68 e0 e6 03 c0       	push   $0xc003e6e0
c0021044:	e8 63 a2 00 00       	call   c002b2ac <list_insert_ordered>
c0021049:	83 c4 10             	add    $0x10,%esp

  cur->status = THREAD_READY;
c002104c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002104f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
  schedule ();
c0021056:	e8 a6 05 00 00       	call   c0021601 <schedule>
  intr_set_level (old_level);
c002105b:	83 ec 0c             	sub    $0xc,%esp
c002105e:	ff 75 f0             	pushl  -0x10(%ebp)
c0021061:	e8 2e 0d 00 00       	call   c0021d94 <intr_set_level>
c0021066:	83 c4 10             	add    $0x10,%esp
}
c0021069:	90                   	nop
c002106a:	c9                   	leave  
c002106b:	c3                   	ret    

c002106c <thread_foreach>:

/* Invoke function 'func' on all threads, passing along 'aux'.
   This function must be called with interrupts off. */
void
thread_foreach (thread_action_func *func, void *aux)
{
c002106c:	55                   	push   %ebp
c002106d:	89 e5                	mov    %esp,%ebp
c002106f:	83 ec 18             	sub    $0x18,%esp
  struct list_elem *e;

  ASSERT (intr_get_level () == INTR_OFF);
c0021072:	e8 00 0d 00 00       	call   c0021d77 <intr_get_level>
c0021077:	85 c0                	test   %eax,%eax
c0021079:	74 21                	je     c002109c <thread_foreach+0x30>
c002107b:	83 ec 0c             	sub    $0xc,%esp
c002107e:	68 f4 43 03 c0       	push   $0xc00343f4
c0021083:	68 12 44 03 c0       	push   $0xc0034412
c0021088:	68 84 46 03 c0       	push   $0xc0034684
c002108d:	68 58 01 00 00       	push   $0x158
c0021092:	68 29 44 03 c0       	push   $0xc0034429
c0021097:	e8 f5 94 00 00       	call   c002a591 <debug_panic>

  for (e = list_begin (&all_list); e != list_end (&all_list);
c002109c:	83 ec 0c             	sub    $0xc,%esp
c002109f:	68 f0 e6 03 c0       	push   $0xc003e6f0
c00210a4:	e8 b0 97 00 00       	call   c002a859 <list_begin>
c00210a9:	83 c4 10             	add    $0x10,%esp
c00210ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00210af:	eb 2e                	jmp    c00210df <thread_foreach+0x73>
       e = list_next (e))
    {
      struct thread *t = list_entry (e, struct thread, allelem);
c00210b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00210b4:	83 c0 04             	add    $0x4,%eax
c00210b7:	83 e8 24             	sub    $0x24,%eax
c00210ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
      func (t, aux);
c00210bd:	83 ec 08             	sub    $0x8,%esp
c00210c0:	ff 75 0c             	pushl  0xc(%ebp)
c00210c3:	ff 75 f0             	pushl  -0x10(%ebp)
c00210c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00210c9:	ff d0                	call   *%eax
c00210cb:	83 c4 10             	add    $0x10,%esp
       e = list_next (e))
c00210ce:	83 ec 0c             	sub    $0xc,%esp
c00210d1:	ff 75 f4             	pushl  -0xc(%ebp)
c00210d4:	e8 b2 97 00 00       	call   c002a88b <list_next>
c00210d9:	83 c4 10             	add    $0x10,%esp
c00210dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (e = list_begin (&all_list); e != list_end (&all_list);
c00210df:	83 ec 0c             	sub    $0xc,%esp
c00210e2:	68 f0 e6 03 c0       	push   $0xc003e6f0
c00210e7:	e8 e9 97 00 00       	call   c002a8d5 <list_end>
c00210ec:	83 c4 10             	add    $0x10,%esp
c00210ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00210f2:	75 bd                	jne    c00210b1 <thread_foreach+0x45>
    }
}
c00210f4:	90                   	nop
c00210f5:	c9                   	leave  
c00210f6:	c3                   	ret    

c00210f7 <thread_set_priority>:

/* Sets the current thread's priority to NEW_PRIORITY. */
void
thread_set_priority (int new_priority) 
{
c00210f7:	55                   	push   %ebp
c00210f8:	89 e5                	mov    %esp,%ebp
c00210fa:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c00210fd:	e8 ea 0c 00 00       	call   c0021dec <intr_disable>
c0021102:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (! thread_mlfqs)
c0021105:	a0 48 87 04 c0       	mov    0xc0048748,%al
c002110a:	83 f0 01             	xor    $0x1,%eax
c002110d:	84 c0                	test   %al,%al
c002110f:	74 53                	je     c0021164 <thread_set_priority+0x6d>
  {
    struct thread* cur_thread = thread_current ();
c0021111:	e8 d3 fd ff ff       	call   c0020ee9 <thread_current>
c0021116:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cur_thread->old_priority = new_priority;
c0021119:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002111c:	8b 55 08             	mov    0x8(%ebp),%edx
c002111f:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    
    thread_update_priority(cur_thread);
c0021125:	83 ec 0c             	sub    $0xc,%esp
c0021128:	ff 75 f0             	pushl  -0x10(%ebp)
c002112b:	e8 31 07 00 00       	call   c0021861 <thread_update_priority>
c0021130:	83 c4 10             	add    $0x10,%esp
    if (list_empty (&cur_thread->holding_locks) || new_priority > cur_thread->priority)
c0021133:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0021136:	05 88 00 00 00       	add    $0x88,%eax
c002113b:	83 ec 0c             	sub    $0xc,%esp
c002113e:	50                   	push   %eax
c002113f:	e8 48 9c 00 00       	call   c002ad8c <list_empty>
c0021144:	83 c4 10             	add    $0x10,%esp
c0021147:	84 c0                	test   %al,%al
c0021149:	75 0b                	jne    c0021156 <thread_set_priority+0x5f>
c002114b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002114e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0021151:	3b 45 08             	cmp    0x8(%ebp),%eax
c0021154:	7d 0e                	jge    c0021164 <thread_set_priority+0x6d>
    {
      cur_thread->priority = new_priority;
c0021156:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0021159:	8b 55 08             	mov    0x8(%ebp),%edx
c002115c:	89 50 1c             	mov    %edx,0x1c(%eax)
      thread_yield();
c002115f:	e8 80 fe ff ff       	call   c0020fe4 <thread_yield>
    }
  }

  intr_set_level (old_level);
c0021164:	83 ec 0c             	sub    $0xc,%esp
c0021167:	ff 75 f4             	pushl  -0xc(%ebp)
c002116a:	e8 25 0c 00 00       	call   c0021d94 <intr_set_level>
c002116f:	83 c4 10             	add    $0x10,%esp
}
c0021172:	90                   	nop
c0021173:	c9                   	leave  
c0021174:	c3                   	ret    

c0021175 <thread_get_priority>:

/* Returns the current thread's priority. */
int
thread_get_priority (void) 
{
c0021175:	55                   	push   %ebp
c0021176:	89 e5                	mov    %esp,%ebp
c0021178:	83 ec 08             	sub    $0x8,%esp
  return thread_current ()->priority;
c002117b:	e8 69 fd ff ff       	call   c0020ee9 <thread_current>
c0021180:	8b 40 1c             	mov    0x1c(%eax),%eax
}
c0021183:	c9                   	leave  
c0021184:	c3                   	ret    

c0021185 <thread_set_nice>:

/* Sets the current thread's nice value to NICE. */
void
thread_set_nice (int nice) 
{
c0021185:	55                   	push   %ebp
c0021186:	89 e5                	mov    %esp,%ebp
c0021188:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable();
c002118b:	e8 5c 0c 00 00       	call   c0021dec <intr_disable>
c0021190:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct thread* cur_thread = thread_current();
c0021193:	e8 51 fd ff ff       	call   c0020ee9 <thread_current>
c0021198:	89 45 f0             	mov    %eax,-0x10(%ebp)
  cur_thread->nice_val = nice;
c002119b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002119e:	8b 55 08             	mov    0x8(%ebp),%edx
c00211a1:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
  thread_update_priority_mlfqs(cur_thread);
c00211a7:	83 ec 0c             	sub    $0xc,%esp
c00211aa:	ff 75 f0             	pushl  -0x10(%ebp)
c00211ad:	e8 67 09 00 00       	call   c0021b19 <thread_update_priority_mlfqs>
c00211b2:	83 c4 10             	add    $0x10,%esp
  intr_set_level(old_level);
c00211b5:	83 ec 0c             	sub    $0xc,%esp
c00211b8:	ff 75 f4             	pushl  -0xc(%ebp)
c00211bb:	e8 d4 0b 00 00       	call   c0021d94 <intr_set_level>
c00211c0:	83 c4 10             	add    $0x10,%esp
}
c00211c3:	90                   	nop
c00211c4:	c9                   	leave  
c00211c5:	c3                   	ret    

c00211c6 <thread_get_nice>:

/* Returns the current thread's nice value. */
int
thread_get_nice (void) 
{
c00211c6:	55                   	push   %ebp
c00211c7:	89 e5                	mov    %esp,%ebp
c00211c9:	83 ec 08             	sub    $0x8,%esp
  return thread_current()->nice_val;
c00211cc:	e8 18 fd ff ff       	call   c0020ee9 <thread_current>
c00211d1:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
}
c00211d7:	c9                   	leave  
c00211d8:	c3                   	ret    

c00211d9 <thread_get_load_avg>:

/* Returns 100 times the system load average. */
int
thread_get_load_avg (void) 
{
c00211d9:	55                   	push   %ebp
c00211da:	89 e5                	mov    %esp,%ebp
c00211dc:	83 ec 08             	sub    $0x8,%esp
  // int t = ff_mul_with_int(load_avg, 100);
  return convert_to_int_round(ff_mul_with_int(load_avg, 100));
c00211df:	a1 44 87 04 c0       	mov    0xc0048744,%eax
c00211e4:	83 ec 08             	sub    $0x8,%esp
c00211e7:	6a 64                	push   $0x64
c00211e9:	50                   	push   %eax
c00211ea:	e8 5f 93 00 00       	call   c002a54e <ff_mul_with_int>
c00211ef:	83 c4 10             	add    $0x10,%esp
c00211f2:	83 ec 0c             	sub    $0xc,%esp
c00211f5:	50                   	push   %eax
c00211f6:	e8 89 92 00 00       	call   c002a484 <convert_to_int_round>
c00211fb:	83 c4 10             	add    $0x10,%esp
  // return convert_to_int_round(t);
}
c00211fe:	c9                   	leave  
c00211ff:	c3                   	ret    

c0021200 <thread_get_recent_cpu>:

/* Returns 100 times the current thread's recent_cpu value. */
int
thread_get_recent_cpu (void) 
{
c0021200:	55                   	push   %ebp
c0021201:	89 e5                	mov    %esp,%ebp
c0021203:	83 ec 08             	sub    $0x8,%esp
  return convert_to_int_round(ff_mul_with_int(thread_current()->recent_cpu, 100));
c0021206:	e8 de fc ff ff       	call   c0020ee9 <thread_current>
c002120b:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0021211:	83 ec 08             	sub    $0x8,%esp
c0021214:	6a 64                	push   $0x64
c0021216:	50                   	push   %eax
c0021217:	e8 32 93 00 00       	call   c002a54e <ff_mul_with_int>
c002121c:	83 c4 10             	add    $0x10,%esp
c002121f:	83 ec 0c             	sub    $0xc,%esp
c0021222:	50                   	push   %eax
c0021223:	e8 5c 92 00 00       	call   c002a484 <convert_to_int_round>
c0021228:	83 c4 10             	add    $0x10,%esp
}
c002122b:	c9                   	leave  
c002122c:	c3                   	ret    

c002122d <idle>:
   blocks.  After that, the idle thread never appears in the
   ready list.  It is returned by next_thread_to_run() as a
   special case when the ready list is empty. */
static void
idle (void *idle_started_ UNUSED) 
{
c002122d:	55                   	push   %ebp
c002122e:	89 e5                	mov    %esp,%ebp
c0021230:	83 ec 18             	sub    $0x18,%esp
  struct semaphore *idle_started = idle_started_;
c0021233:	8b 45 08             	mov    0x8(%ebp),%eax
c0021236:	89 45 f4             	mov    %eax,-0xc(%ebp)
  idle_thread = thread_current ();
c0021239:	e8 ab fc ff ff       	call   c0020ee9 <thread_current>
c002123e:	a3 00 e7 03 c0       	mov    %eax,0xc003e700
  sema_up (idle_started);
c0021243:	83 ec 0c             	sub    $0xc,%esp
c0021246:	ff 75 f4             	pushl  -0xc(%ebp)
c0021249:	e8 00 21 00 00       	call   c002334e <sema_up>
c002124e:	83 c4 10             	add    $0x10,%esp

  for (;;) 
    {
      /* Let someone else run. */
      intr_disable ();
c0021251:	e8 96 0b 00 00       	call   c0021dec <intr_disable>
      thread_block ();
c0021256:	e8 6a fb ff ff       	call   c0020dc5 <thread_block>
         one to occur, wasting as much as one clock tick worth of
         time.

         See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3a]
         7.11.1 "HLT Instruction". */
      asm volatile ("sti; hlt" : : : "memory");
c002125b:	fb                   	sti    
c002125c:	f4                   	hlt    
      intr_disable ();
c002125d:	eb f2                	jmp    c0021251 <idle+0x24>

c002125f <kernel_thread>:
}

/* Function used as the basis for a kernel thread. */
static void
kernel_thread (thread_func *function, void *aux) 
{
c002125f:	55                   	push   %ebp
c0021260:	89 e5                	mov    %esp,%ebp
c0021262:	83 ec 08             	sub    $0x8,%esp
  ASSERT (function != NULL);
c0021265:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0021269:	75 21                	jne    c002128c <kernel_thread+0x2d>
c002126b:	83 ec 0c             	sub    $0xc,%esp
c002126e:	68 89 44 03 c0       	push   $0xc0034489
c0021273:	68 12 44 03 c0       	push   $0xc0034412
c0021278:	68 94 46 03 c0       	push   $0xc0034694
c002127d:	68 ca 01 00 00       	push   $0x1ca
c0021282:	68 29 44 03 c0       	push   $0xc0034429
c0021287:	e8 05 93 00 00       	call   c002a591 <debug_panic>

  intr_enable ();       /* The scheduler runs with interrupts off. */
c002128c:	e8 1d 0b 00 00       	call   c0021dae <intr_enable>
  function (aux);       /* Execute the thread function. */
c0021291:	83 ec 0c             	sub    $0xc,%esp
c0021294:	ff 75 0c             	pushl  0xc(%ebp)
c0021297:	8b 45 08             	mov    0x8(%ebp),%eax
c002129a:	ff d0                	call   *%eax
c002129c:	83 c4 10             	add    $0x10,%esp
  thread_exit ();       /* If function() returns, kill the thread. */
c002129f:	e8 c5 fc ff ff       	call   c0020f69 <thread_exit>

c00212a4 <running_thread>:
}

/* Returns the running thread. */
struct thread *
running_thread (void) 
{
c00212a4:	55                   	push   %ebp
c00212a5:	89 e5                	mov    %esp,%ebp
c00212a7:	83 ec 10             	sub    $0x10,%esp

  /* Copy the CPU's stack pointer into `esp', and then round that
     down to the start of a page.  Because `struct thread' is
     always at the beginning of a page and the stack pointer is
     somewhere in the middle, this locates the curent thread. */
  asm ("mov %%esp, %0" : "=g" (esp));
c00212aa:	89 e0                	mov    %esp,%eax
c00212ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return pg_round_down (esp);
c00212af:	ff 75 fc             	pushl  -0x4(%ebp)
c00212b2:	e8 1d f8 ff ff       	call   c0020ad4 <pg_round_down>
c00212b7:	83 c4 04             	add    $0x4,%esp
}
c00212ba:	c9                   	leave  
c00212bb:	c3                   	ret    

c00212bc <is_thread>:

/* Returns true if T appears to point to a valid thread. */
static bool
is_thread (struct thread *t)
{
c00212bc:	55                   	push   %ebp
c00212bd:	89 e5                	mov    %esp,%ebp
  return t != NULL && t->magic == THREAD_MAGIC;
c00212bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00212c3:	74 17                	je     c00212dc <is_thread+0x20>
c00212c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00212c8:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c00212ce:	3d 4b bf 6a cd       	cmp    $0xcd6abf4b,%eax
c00212d3:	75 07                	jne    c00212dc <is_thread+0x20>
c00212d5:	b8 01 00 00 00       	mov    $0x1,%eax
c00212da:	eb 05                	jmp    c00212e1 <is_thread+0x25>
c00212dc:	b8 00 00 00 00       	mov    $0x0,%eax
c00212e1:	83 e0 01             	and    $0x1,%eax
}
c00212e4:	5d                   	pop    %ebp
c00212e5:	c3                   	ret    

c00212e6 <init_thread>:

/* Does basic initialization of T as a blocked thread named
   NAME. */
static void
init_thread (struct thread *t, const char *name, int priority)
{
c00212e6:	55                   	push   %ebp
c00212e7:	89 e5                	mov    %esp,%ebp
c00212e9:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level;

  ASSERT (t != NULL);
c00212ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00212f0:	75 21                	jne    c0021313 <init_thread+0x2d>
c00212f2:	83 ec 0c             	sub    $0xc,%esp
c00212f5:	68 16 45 03 c0       	push   $0xc0034516
c00212fa:	68 12 44 03 c0       	push   $0xc0034412
c00212ff:	68 a4 46 03 c0       	push   $0xc00346a4
c0021304:	68 ed 01 00 00       	push   $0x1ed
c0021309:	68 29 44 03 c0       	push   $0xc0034429
c002130e:	e8 7e 92 00 00       	call   c002a591 <debug_panic>
  ASSERT (PRI_MIN <= priority && priority <= PRI_MAX);
c0021313:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0021317:	78 06                	js     c002131f <init_thread+0x39>
c0021319:	83 7d 10 3f          	cmpl   $0x3f,0x10(%ebp)
c002131d:	7e 21                	jle    c0021340 <init_thread+0x5a>
c002131f:	83 ec 0c             	sub    $0xc,%esp
c0021322:	68 20 45 03 c0       	push   $0xc0034520
c0021327:	68 12 44 03 c0       	push   $0xc0034412
c002132c:	68 a4 46 03 c0       	push   $0xc00346a4
c0021331:	68 ee 01 00 00       	push   $0x1ee
c0021336:	68 29 44 03 c0       	push   $0xc0034429
c002133b:	e8 51 92 00 00       	call   c002a591 <debug_panic>
  ASSERT (name != NULL);
c0021340:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0021344:	75 21                	jne    c0021367 <init_thread+0x81>
c0021346:	83 ec 0c             	sub    $0xc,%esp
c0021349:	68 4b 45 03 c0       	push   $0xc003454b
c002134e:	68 12 44 03 c0       	push   $0xc0034412
c0021353:	68 a4 46 03 c0       	push   $0xc00346a4
c0021358:	68 ef 01 00 00       	push   $0x1ef
c002135d:	68 29 44 03 c0       	push   $0xc0034429
c0021362:	e8 2a 92 00 00       	call   c002a591 <debug_panic>

  memset (t, 0, sizeof *t);
c0021367:	83 ec 04             	sub    $0x4,%esp
c002136a:	68 b0 00 00 00       	push   $0xb0
c002136f:	6a 00                	push   $0x0
c0021371:	ff 75 08             	pushl  0x8(%ebp)
c0021374:	e8 de 84 00 00       	call   c0029857 <memset>
c0021379:	83 c4 10             	add    $0x10,%esp
  t->status = THREAD_BLOCKED;
c002137c:	8b 45 08             	mov    0x8(%ebp),%eax
c002137f:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
  strlcpy (t->name, name, sizeof t->name);
c0021386:	8b 45 08             	mov    0x8(%ebp),%eax
c0021389:	83 c0 08             	add    $0x8,%eax
c002138c:	83 ec 04             	sub    $0x4,%esp
c002138f:	6a 10                	push   $0x10
c0021391:	ff 75 0c             	pushl  0xc(%ebp)
c0021394:	50                   	push   %eax
c0021395:	e8 94 85 00 00       	call   c002992e <strlcpy>
c002139a:	83 c4 10             	add    $0x10,%esp
  t->stack = (uint8_t *) t + PGSIZE;
c002139d:	8b 45 08             	mov    0x8(%ebp),%eax
c00213a0:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
c00213a6:	8b 45 08             	mov    0x8(%ebp),%eax
c00213a9:	89 50 18             	mov    %edx,0x18(%eax)
  t->priority = priority;
c00213ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00213af:	8b 55 10             	mov    0x10(%ebp),%edx
c00213b2:	89 50 1c             	mov    %edx,0x1c(%eax)
  t->magic = THREAD_MAGIC;
c00213b5:	8b 45 08             	mov    0x8(%ebp),%eax
c00213b8:	c7 80 ac 00 00 00 4b 	movl   $0xcd6abf4b,0xac(%eax)
c00213bf:	bf 6a cd 

  #ifdef USERPROG
  t->pcb = NULL;
c00213c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00213c5:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
  list_init(&t->child_threads);
c00213cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00213cf:	83 c0 34             	add    $0x34,%eax
c00213d2:	83 ec 0c             	sub    $0xc,%esp
c00213d5:	50                   	push   %eax
c00213d6:	e8 29 94 00 00       	call   c002a804 <list_init>
c00213db:	83 c4 10             	add    $0x10,%esp
  list_init(&t->opened_files);
c00213de:	8b 45 08             	mov    0x8(%ebp),%eax
c00213e1:	83 c0 44             	add    $0x44,%eax
c00213e4:	83 ec 0c             	sub    $0xc,%esp
c00213e7:	50                   	push   %eax
c00213e8:	e8 17 94 00 00       	call   c002a804 <list_init>
c00213ed:	83 c4 10             	add    $0x10,%esp
  t->executing_file = NULL;
c00213f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00213f3:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
  #endif

  #ifdef VM
    list_init(&t->mmap_list);
c00213fa:	8b 45 08             	mov    0x8(%ebp),%eax
c00213fd:	83 c0 68             	add    $0x68,%eax
c0021400:	83 ec 0c             	sub    $0xc,%esp
c0021403:	50                   	push   %eax
c0021404:	e8 fb 93 00 00       	call   c002a804 <list_init>
c0021409:	83 c4 10             	add    $0x10,%esp
  #endif

  if (!thread_mlfqs) 
c002140c:	a0 48 87 04 c0       	mov    0xc0048748,%al
c0021411:	83 f0 01             	xor    $0x1,%eax
c0021414:	84 c0                	test   %al,%al
c0021416:	74 2f                	je     c0021447 <init_thread+0x161>
  {
    t->old_priority = priority;
c0021418:	8b 45 08             	mov    0x8(%ebp),%eax
c002141b:	8b 55 10             	mov    0x10(%ebp),%edx
c002141e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    list_init(&t->holding_locks);
c0021424:	8b 45 08             	mov    0x8(%ebp),%eax
c0021427:	05 88 00 00 00       	add    $0x88,%eax
c002142c:	83 ec 0c             	sub    $0xc,%esp
c002142f:	50                   	push   %eax
c0021430:	e8 cf 93 00 00       	call   c002a804 <list_init>
c0021435:	83 c4 10             	add    $0x10,%esp
    t->lock_waiting = NULL;
c0021438:	8b 45 08             	mov    0x8(%ebp),%eax
c002143b:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c0021442:	00 00 00 
c0021445:	eb 25                	jmp    c002146c <init_thread+0x186>
  } else
  {
    t->nice_val = 0;
c0021447:	8b 45 08             	mov    0x8(%ebp),%eax
c002144a:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c0021451:	00 00 00 
    t->recent_cpu = convert_to_fixed_point(0);
c0021454:	83 ec 0c             	sub    $0xc,%esp
c0021457:	6a 00                	push   $0x0
c0021459:	e8 05 90 00 00       	call   c002a463 <convert_to_fixed_point>
c002145e:	83 c4 10             	add    $0x10,%esp
c0021461:	89 c2                	mov    %eax,%edx
c0021463:	8b 45 08             	mov    0x8(%ebp),%eax
c0021466:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
  }

  old_level = intr_disable ();
c002146c:	e8 7b 09 00 00       	call   c0021dec <intr_disable>
c0021471:	89 45 f4             	mov    %eax,-0xc(%ebp)
  list_insert_ordered (&all_list, &t->allelem, thread_priority_cmp, NULL);
c0021474:	8b 45 08             	mov    0x8(%ebp),%eax
c0021477:	83 c0 20             	add    $0x20,%eax
c002147a:	6a 00                	push   $0x0
c002147c:	68 64 17 02 c0       	push   $0xc0021764
c0021481:	50                   	push   %eax
c0021482:	68 f0 e6 03 c0       	push   $0xc003e6f0
c0021487:	e8 20 9e 00 00       	call   c002b2ac <list_insert_ordered>
c002148c:	83 c4 10             	add    $0x10,%esp

  intr_set_level (old_level);
c002148f:	83 ec 0c             	sub    $0xc,%esp
c0021492:	ff 75 f4             	pushl  -0xc(%ebp)
c0021495:	e8 fa 08 00 00       	call   c0021d94 <intr_set_level>
c002149a:	83 c4 10             	add    $0x10,%esp
}
c002149d:	90                   	nop
c002149e:	c9                   	leave  
c002149f:	c3                   	ret    

c00214a0 <alloc_frame>:

/* Allocates a SIZE-byte frame at the top of thread T's stack and
   returns a pointer to the frame's base. */
static void *
alloc_frame (struct thread *t, size_t size) 
{
c00214a0:	55                   	push   %ebp
c00214a1:	89 e5                	mov    %esp,%ebp
c00214a3:	83 ec 08             	sub    $0x8,%esp
  /* Stack data is always allocated in word-size units. */
  ASSERT (is_thread (t));
c00214a6:	ff 75 08             	pushl  0x8(%ebp)
c00214a9:	e8 0e fe ff ff       	call   c00212bc <is_thread>
c00214ae:	83 c4 04             	add    $0x4,%esp
c00214b1:	84 c0                	test   %al,%al
c00214b3:	75 21                	jne    c00214d6 <alloc_frame+0x36>
c00214b5:	83 ec 0c             	sub    $0xc,%esp
c00214b8:	68 ab 44 03 c0       	push   $0xc00344ab
c00214bd:	68 12 44 03 c0       	push   $0xc0034412
c00214c2:	68 b0 46 03 c0       	push   $0xc00346b0
c00214c7:	68 1a 02 00 00       	push   $0x21a
c00214cc:	68 29 44 03 c0       	push   $0xc0034429
c00214d1:	e8 bb 90 00 00       	call   c002a591 <debug_panic>
  ASSERT (size % sizeof (uint32_t) == 0);
c00214d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00214d9:	83 e0 03             	and    $0x3,%eax
c00214dc:	85 c0                	test   %eax,%eax
c00214de:	74 21                	je     c0021501 <alloc_frame+0x61>
c00214e0:	83 ec 0c             	sub    $0xc,%esp
c00214e3:	68 58 45 03 c0       	push   $0xc0034558
c00214e8:	68 12 44 03 c0       	push   $0xc0034412
c00214ed:	68 b0 46 03 c0       	push   $0xc00346b0
c00214f2:	68 1b 02 00 00       	push   $0x21b
c00214f7:	68 29 44 03 c0       	push   $0xc0034429
c00214fc:	e8 90 90 00 00       	call   c002a591 <debug_panic>

  t->stack -= size;
c0021501:	8b 45 08             	mov    0x8(%ebp),%eax
c0021504:	8b 40 18             	mov    0x18(%eax),%eax
c0021507:	8b 55 0c             	mov    0xc(%ebp),%edx
c002150a:	f7 da                	neg    %edx
c002150c:	01 c2                	add    %eax,%edx
c002150e:	8b 45 08             	mov    0x8(%ebp),%eax
c0021511:	89 50 18             	mov    %edx,0x18(%eax)
  return t->stack;
c0021514:	8b 45 08             	mov    0x8(%ebp),%eax
c0021517:	8b 40 18             	mov    0x18(%eax),%eax
}
c002151a:	c9                   	leave  
c002151b:	c3                   	ret    

c002151c <next_thread_to_run>:
   empty.  (If the running thread can continue running, then it
   will be in the run queue.)  If the run queue is empty, return
   idle_thread. */
static struct thread *
next_thread_to_run (void) 
{
c002151c:	55                   	push   %ebp
c002151d:	89 e5                	mov    %esp,%ebp
c002151f:	83 ec 08             	sub    $0x8,%esp
  if (list_empty (&ready_list))
c0021522:	83 ec 0c             	sub    $0xc,%esp
c0021525:	68 e0 e6 03 c0       	push   $0xc003e6e0
c002152a:	e8 5d 98 00 00       	call   c002ad8c <list_empty>
c002152f:	83 c4 10             	add    $0x10,%esp
c0021532:	84 c0                	test   %al,%al
c0021534:	74 07                	je     c002153d <next_thread_to_run+0x21>
    return idle_thread;
c0021536:	a1 00 e7 03 c0       	mov    0xc003e700,%eax
c002153b:	eb 16                	jmp    c0021553 <next_thread_to_run+0x37>
  else
    return list_entry (list_pop_front (&ready_list), struct thread, elem);
c002153d:	83 ec 0c             	sub    $0xc,%esp
c0021540:	68 e0 e6 03 c0       	push   $0xc003e6e0
c0021545:	e8 19 97 00 00       	call   c002ac63 <list_pop_front>
c002154a:	83 c4 10             	add    $0x10,%esp
c002154d:	83 c0 04             	add    $0x4,%eax
c0021550:	83 e8 2c             	sub    $0x2c,%eax
}
c0021553:	c9                   	leave  
c0021554:	c3                   	ret    

c0021555 <thread_schedule_tail>:

   After this function and its caller returns, the thread switch
   is complete. */
void
thread_schedule_tail (struct thread *prev)
{
c0021555:	55                   	push   %ebp
c0021556:	89 e5                	mov    %esp,%ebp
c0021558:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur = running_thread ();
c002155b:	e8 44 fd ff ff       	call   c00212a4 <running_thread>
c0021560:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  ASSERT (intr_get_level () == INTR_OFF);
c0021563:	e8 0f 08 00 00       	call   c0021d77 <intr_get_level>
c0021568:	85 c0                	test   %eax,%eax
c002156a:	74 21                	je     c002158d <thread_schedule_tail+0x38>
c002156c:	83 ec 0c             	sub    $0xc,%esp
c002156f:	68 f4 43 03 c0       	push   $0xc00343f4
c0021574:	68 12 44 03 c0       	push   $0xc0034412
c0021579:	68 bc 46 03 c0       	push   $0xc00346bc
c002157e:	68 44 02 00 00       	push   $0x244
c0021583:	68 29 44 03 c0       	push   $0xc0034429
c0021588:	e8 04 90 00 00       	call   c002a591 <debug_panic>

  /* Mark us as running. */
  cur->status = THREAD_RUNNING;
c002158d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021590:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

  /* Start new time slice. */
  thread_ticks = 0;
c0021597:	c7 05 60 e7 03 c0 00 	movl   $0x0,0xc003e760
c002159e:	00 00 00 

#ifdef USERPROG
  /* Activate the new address space. */
  if (prev != NULL)           // highlight: prev not NULL, means didn't switched, so don't need to activate process since it's just running
c00215a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00215a5:	74 05                	je     c00215ac <thread_schedule_tail+0x57>
    process_activate ();
c00215a7:	e8 fd ba 00 00       	call   c002d0a9 <process_activate>
  /* If the thread we switched from is dying, destroy its struct
     thread.  This must happen late so that thread_exit() doesn't
     pull out the rug under itself.  (We don't free
     initial_thread because its memory was not obtained via
     palloc().) */
  if (prev != NULL && prev->status == THREAD_DYING && prev != initial_thread) 
c00215ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00215b0:	74 4c                	je     c00215fe <thread_schedule_tail+0xa9>
c00215b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00215b5:	8b 40 04             	mov    0x4(%eax),%eax
c00215b8:	83 f8 03             	cmp    $0x3,%eax
c00215bb:	75 41                	jne    c00215fe <thread_schedule_tail+0xa9>
c00215bd:	a1 04 e7 03 c0       	mov    0xc003e704,%eax
c00215c2:	39 45 08             	cmp    %eax,0x8(%ebp)
c00215c5:	74 37                	je     c00215fe <thread_schedule_tail+0xa9>
    {
      ASSERT (prev != cur);
c00215c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00215ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00215cd:	75 21                	jne    c00215f0 <thread_schedule_tail+0x9b>
c00215cf:	83 ec 0c             	sub    $0xc,%esp
c00215d2:	68 76 45 03 c0       	push   $0xc0034576
c00215d7:	68 12 44 03 c0       	push   $0xc0034412
c00215dc:	68 bc 46 03 c0       	push   $0xc00346bc
c00215e1:	68 59 02 00 00       	push   $0x259
c00215e6:	68 29 44 03 c0       	push   $0xc0034429
c00215eb:	e8 a1 8f 00 00       	call   c002a591 <debug_panic>
      palloc_free_page (prev);
c00215f0:	83 ec 0c             	sub    $0xc,%esp
c00215f3:	ff 75 08             	pushl  0x8(%ebp)
c00215f6:	e8 65 29 00 00       	call   c0023f60 <palloc_free_page>
c00215fb:	83 c4 10             	add    $0x10,%esp
    }
}
c00215fe:	90                   	nop
c00215ff:	c9                   	leave  
c0021600:	c3                   	ret    

c0021601 <schedule>:

   It's not safe to call printf() until thread_schedule_tail()
   has completed. */
static void
schedule (void) 
{
c0021601:	55                   	push   %ebp
c0021602:	89 e5                	mov    %esp,%ebp
c0021604:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur = running_thread ();
c0021607:	e8 98 fc ff ff       	call   c00212a4 <running_thread>
c002160c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct thread *next = next_thread_to_run ();
c002160f:	e8 08 ff ff ff       	call   c002151c <next_thread_to_run>
c0021614:	89 45 ec             	mov    %eax,-0x14(%ebp)
  struct thread *prev = NULL;
c0021617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  ASSERT (intr_get_level () == INTR_OFF);
c002161e:	e8 54 07 00 00       	call   c0021d77 <intr_get_level>
c0021623:	85 c0                	test   %eax,%eax
c0021625:	74 21                	je     c0021648 <schedule+0x47>
c0021627:	83 ec 0c             	sub    $0xc,%esp
c002162a:	68 f4 43 03 c0       	push   $0xc00343f4
c002162f:	68 12 44 03 c0       	push   $0xc0034412
c0021634:	68 d4 46 03 c0       	push   $0xc00346d4
c0021639:	68 6c 02 00 00       	push   $0x26c
c002163e:	68 29 44 03 c0       	push   $0xc0034429
c0021643:	e8 49 8f 00 00       	call   c002a591 <debug_panic>
  ASSERT (cur->status != THREAD_RUNNING);
c0021648:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002164b:	8b 40 04             	mov    0x4(%eax),%eax
c002164e:	85 c0                	test   %eax,%eax
c0021650:	75 21                	jne    c0021673 <schedule+0x72>
c0021652:	83 ec 0c             	sub    $0xc,%esp
c0021655:	68 82 45 03 c0       	push   $0xc0034582
c002165a:	68 12 44 03 c0       	push   $0xc0034412
c002165f:	68 d4 46 03 c0       	push   $0xc00346d4
c0021664:	68 6d 02 00 00       	push   $0x26d
c0021669:	68 29 44 03 c0       	push   $0xc0034429
c002166e:	e8 1e 8f 00 00       	call   c002a591 <debug_panic>
  ASSERT (is_thread (next));
c0021673:	83 ec 0c             	sub    $0xc,%esp
c0021676:	ff 75 ec             	pushl  -0x14(%ebp)
c0021679:	e8 3e fc ff ff       	call   c00212bc <is_thread>
c002167e:	83 c4 10             	add    $0x10,%esp
c0021681:	84 c0                	test   %al,%al
c0021683:	75 21                	jne    c00216a6 <schedule+0xa5>
c0021685:	83 ec 0c             	sub    $0xc,%esp
c0021688:	68 a0 45 03 c0       	push   $0xc00345a0
c002168d:	68 12 44 03 c0       	push   $0xc0034412
c0021692:	68 d4 46 03 c0       	push   $0xc00346d4
c0021697:	68 6e 02 00 00       	push   $0x26e
c002169c:	68 29 44 03 c0       	push   $0xc0034429
c00216a1:	e8 eb 8e 00 00       	call   c002a591 <debug_panic>

  if (cur != next)
c00216a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00216a9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00216ac:	74 14                	je     c00216c2 <schedule+0xc1>
    prev = switch_threads (cur, next);
c00216ae:	83 ec 08             	sub    $0x8,%esp
c00216b1:	ff 75 ec             	pushl  -0x14(%ebp)
c00216b4:	ff 75 f0             	pushl  -0x10(%ebp)
c00216b7:	e8 72 06 00 00       	call   c0021d2e <switch_threads>
c00216bc:	83 c4 10             	add    $0x10,%esp
c00216bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
  thread_schedule_tail (prev);
c00216c2:	83 ec 0c             	sub    $0xc,%esp
c00216c5:	ff 75 f4             	pushl  -0xc(%ebp)
c00216c8:	e8 88 fe ff ff       	call   c0021555 <thread_schedule_tail>
c00216cd:	83 c4 10             	add    $0x10,%esp
}
c00216d0:	90                   	nop
c00216d1:	c9                   	leave  
c00216d2:	c3                   	ret    

c00216d3 <allocate_tid>:

/* Returns a tid to use for a new thread. */
static tid_t
allocate_tid (void) 
{
c00216d3:	55                   	push   %ebp
c00216d4:	89 e5                	mov    %esp,%ebp
c00216d6:	83 ec 18             	sub    $0x18,%esp
  static tid_t next_tid = 1;
  tid_t tid;

  lock_acquire (&tid_lock);
c00216d9:	83 ec 0c             	sub    $0xc,%esp
c00216dc:	68 20 e7 03 c0       	push   $0xc003e720
c00216e1:	e8 48 1e 00 00       	call   c002352e <lock_acquire>
c00216e6:	83 c4 10             	add    $0x10,%esp
  tid = next_tid++;
c00216e9:	a1 08 dd 03 c0       	mov    0xc003dd08,%eax
c00216ee:	8d 50 01             	lea    0x1(%eax),%edx
c00216f1:	89 15 08 dd 03 c0    	mov    %edx,0xc003dd08
c00216f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_release (&tid_lock);
c00216fa:	83 ec 0c             	sub    $0xc,%esp
c00216fd:	68 20 e7 03 c0       	push   $0xc003e720
c0021702:	e8 68 20 00 00       	call   c002376f <lock_release>
c0021707:	83 c4 10             	add    $0x10,%esp

  return tid;
c002170a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002170d:	c9                   	leave  
c002170e:	c3                   	ret    

c002170f <sleep_thread_cmp>:


/* Used to compare the wake up time for threads */
bool
sleep_thread_cmp (const struct list_elem* t1, const struct list_elem* t2, void* aux)
{
c002170f:	55                   	push   %ebp
c0021710:	89 e5                	mov    %esp,%ebp
c0021712:	56                   	push   %esi
c0021713:	53                   	push   %ebx
c0021714:	83 ec 10             	sub    $0x10,%esp
  struct thread* thread1 = list_entry(t1, struct thread, sleepelem);
c0021717:	8b 45 08             	mov    0x8(%ebp),%eax
c002171a:	83 c0 04             	add    $0x4,%eax
c002171d:	2d 84 00 00 00       	sub    $0x84,%eax
c0021722:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct thread* thread2 = list_entry(t2, struct thread, sleepelem);
c0021725:	8b 45 0c             	mov    0xc(%ebp),%eax
c0021728:	83 c0 04             	add    $0x4,%eax
c002172b:	2d 84 00 00 00       	sub    $0x84,%eax
c0021730:	89 45 f0             	mov    %eax,-0x10(%ebp)
  return thread1->wake_tick <= thread2->wake_tick;
c0021733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021736:	8b 48 78             	mov    0x78(%eax),%ecx
c0021739:	8b 58 7c             	mov    0x7c(%eax),%ebx
c002173c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002173f:	8b 50 7c             	mov    0x7c(%eax),%edx
c0021742:	8b 40 78             	mov    0x78(%eax),%eax
c0021745:	be 01 00 00 00       	mov    $0x1,%esi
c002174a:	39 d3                	cmp    %edx,%ebx
c002174c:	7c 0d                	jl     c002175b <sleep_thread_cmp+0x4c>
c002174e:	39 d3                	cmp    %edx,%ebx
c0021750:	7f 04                	jg     c0021756 <sleep_thread_cmp+0x47>
c0021752:	39 c1                	cmp    %eax,%ecx
c0021754:	76 05                	jbe    c002175b <sleep_thread_cmp+0x4c>
c0021756:	be 00 00 00 00       	mov    $0x0,%esi
c002175b:	89 f0                	mov    %esi,%eax
}
c002175d:	83 c4 10             	add    $0x10,%esp
c0021760:	5b                   	pop    %ebx
c0021761:	5e                   	pop    %esi
c0021762:	5d                   	pop    %ebp
c0021763:	c3                   	ret    

c0021764 <thread_priority_cmp>:

/* Used to compare the priority between threads */
bool
thread_priority_cmp (const struct list_elem* t1, const struct list_elem* t2, void* aux)
{
c0021764:	55                   	push   %ebp
c0021765:	89 e5                	mov    %esp,%ebp
c0021767:	83 ec 10             	sub    $0x10,%esp
  struct thread* thread1 = list_entry(t1, struct thread, elem);
c002176a:	8b 45 08             	mov    0x8(%ebp),%eax
c002176d:	83 c0 04             	add    $0x4,%eax
c0021770:	83 e8 2c             	sub    $0x2c,%eax
c0021773:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct thread* thread2 = list_entry(t2, struct thread, elem);
c0021776:	8b 45 0c             	mov    0xc(%ebp),%eax
c0021779:	83 c0 04             	add    $0x4,%eax
c002177c:	83 e8 2c             	sub    $0x2c,%eax
c002177f:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return thread1->priority > thread2->priority;
c0021782:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0021785:	8b 50 1c             	mov    0x1c(%eax),%edx
c0021788:	8b 45 f8             	mov    -0x8(%ebp),%eax
c002178b:	8b 40 1c             	mov    0x1c(%eax),%eax
c002178e:	39 c2                	cmp    %eax,%edx
c0021790:	0f 9f c0             	setg   %al
}
c0021793:	c9                   	leave  
c0021794:	c3                   	ret    

c0021795 <thread_donate_priority>:

/* Used to donate priority */
void 
thread_donate_priority (const struct thread* donate_to) 
{
c0021795:	55                   	push   %ebp
c0021796:	89 e5                	mov    %esp,%ebp
c0021798:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c002179b:	e8 4c 06 00 00       	call   c0021dec <intr_disable>
c00217a0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  thread_update_priority (donate_to); /* donate_to thread already has a bigger clock */
c00217a3:	83 ec 0c             	sub    $0xc,%esp
c00217a6:	ff 75 08             	pushl  0x8(%ebp)
c00217a9:	e8 b3 00 00 00       	call   c0021861 <thread_update_priority>
c00217ae:	83 c4 10             	add    $0x10,%esp

  if (donate_to->status == THREAD_READY) /* let it run immediately */
c00217b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00217b4:	8b 40 04             	mov    0x4(%eax),%eax
c00217b7:	83 f8 01             	cmp    $0x1,%eax
c00217ba:	75 2d                	jne    c00217e9 <thread_donate_priority+0x54>
  {
    list_remove (&donate_to->elem);
c00217bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00217bf:	83 c0 28             	add    $0x28,%eax
c00217c2:	83 ec 0c             	sub    $0xc,%esp
c00217c5:	50                   	push   %eax
c00217c6:	e8 3f 94 00 00       	call   c002ac0a <list_remove>
c00217cb:	83 c4 10             	add    $0x10,%esp
    list_insert_ordered (&ready_list, &donate_to->elem, thread_priority_cmp, NULL);
c00217ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00217d1:	83 c0 28             	add    $0x28,%eax
c00217d4:	6a 00                	push   $0x0
c00217d6:	68 64 17 02 c0       	push   $0xc0021764
c00217db:	50                   	push   %eax
c00217dc:	68 e0 e6 03 c0       	push   $0xc003e6e0
c00217e1:	e8 c6 9a 00 00       	call   c002b2ac <list_insert_ordered>
c00217e6:	83 c4 10             	add    $0x10,%esp
  }

  intr_set_level (old_level);
c00217e9:	83 ec 0c             	sub    $0xc,%esp
c00217ec:	ff 75 f4             	pushl  -0xc(%ebp)
c00217ef:	e8 a0 05 00 00       	call   c0021d94 <intr_set_level>
c00217f4:	83 c4 10             	add    $0x10,%esp
}
c00217f7:	90                   	nop
c00217f8:	c9                   	leave  
c00217f9:	c3                   	ret    

c00217fa <thread_hold_lock>:

/* let cur_thread hold a lock */
void 
thread_hold_lock (struct lock* lock)
{
c00217fa:	55                   	push   %ebp
c00217fb:	89 e5                	mov    %esp,%ebp
c00217fd:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c0021800:	e8 e7 05 00 00       	call   c0021dec <intr_disable>
c0021805:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct thread* cur_thread = thread_current();
c0021808:	e8 dc f6 ff ff       	call   c0020ee9 <thread_current>
c002180d:	89 45 f0             	mov    %eax,-0x10(%ebp)

  list_insert_ordered (&cur_thread->holding_locks, &lock->lock_elem, lock_priority_cmp, NULL);
c0021810:	8b 45 08             	mov    0x8(%ebp),%eax
c0021813:	8d 50 18             	lea    0x18(%eax),%edx
c0021816:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0021819:	05 88 00 00 00       	add    $0x88,%eax
c002181e:	6a 00                	push   $0x0
c0021820:	68 42 3b 02 c0       	push   $0xc0023b42
c0021825:	52                   	push   %edx
c0021826:	50                   	push   %eax
c0021827:	e8 80 9a 00 00       	call   c002b2ac <list_insert_ordered>
c002182c:	83 c4 10             	add    $0x10,%esp
  
  if (cur_thread->priority < lock->max_priority)
c002182f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0021832:	8b 50 1c             	mov    0x1c(%eax),%edx
c0021835:	8b 45 08             	mov    0x8(%ebp),%eax
c0021838:	8b 40 20             	mov    0x20(%eax),%eax
c002183b:	39 c2                	cmp    %eax,%edx
c002183d:	7d 11                	jge    c0021850 <thread_hold_lock+0x56>
  {
    cur_thread->priority = lock->max_priority;
c002183f:	8b 45 08             	mov    0x8(%ebp),%eax
c0021842:	8b 50 20             	mov    0x20(%eax),%edx
c0021845:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0021848:	89 50 1c             	mov    %edx,0x1c(%eax)
    thread_yield ();
c002184b:	e8 94 f7 ff ff       	call   c0020fe4 <thread_yield>
  }

  intr_set_level (old_level);
c0021850:	83 ec 0c             	sub    $0xc,%esp
c0021853:	ff 75 f4             	pushl  -0xc(%ebp)
c0021856:	e8 39 05 00 00       	call   c0021d94 <intr_set_level>
c002185b:	83 c4 10             	add    $0x10,%esp
}
c002185e:	90                   	nop
c002185f:	c9                   	leave  
c0021860:	c3                   	ret    

c0021861 <thread_update_priority>:


/* update thread's priority from the holding_locks && its old_priority */
void 
thread_update_priority(struct thread* to_update)
{
c0021861:	55                   	push   %ebp
c0021862:	89 e5                	mov    %esp,%ebp
c0021864:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c0021867:	e8 80 05 00 00       	call   c0021dec <intr_disable>
c002186c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int to_update_priority = to_update->old_priority;
c002186f:	8b 45 08             	mov    0x8(%ebp),%eax
c0021872:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c0021878:	89 45 f4             	mov    %eax,-0xc(%ebp)

  if (! list_empty(&to_update->holding_locks)) 
c002187b:	8b 45 08             	mov    0x8(%ebp),%eax
c002187e:	05 88 00 00 00       	add    $0x88,%eax
c0021883:	83 ec 0c             	sub    $0xc,%esp
c0021886:	50                   	push   %eax
c0021887:	e8 00 95 00 00       	call   c002ad8c <list_empty>
c002188c:	83 c4 10             	add    $0x10,%esp
c002188f:	83 f0 01             	xor    $0x1,%eax
c0021892:	84 c0                	test   %al,%al
c0021894:	74 49                	je     c00218df <thread_update_priority+0x7e>
  {
    list_sort(&to_update->holding_locks, lock_priority_cmp, NULL);
c0021896:	8b 45 08             	mov    0x8(%ebp),%eax
c0021899:	05 88 00 00 00       	add    $0x88,%eax
c002189e:	83 ec 04             	sub    $0x4,%esp
c00218a1:	6a 00                	push   $0x0
c00218a3:	68 42 3b 02 c0       	push   $0xc0023b42
c00218a8:	50                   	push   %eax
c00218a9:	e8 95 98 00 00       	call   c002b143 <list_sort>
c00218ae:	83 c4 10             	add    $0x10,%esp
    int lock_max_priority;
    lock_max_priority = list_entry (list_front (&to_update->holding_locks), 
c00218b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00218b4:	05 88 00 00 00       	add    $0x88,%eax
c00218b9:	83 ec 0c             	sub    $0xc,%esp
c00218bc:	50                   	push   %eax
c00218bd:	e8 f5 93 00 00       	call   c002acb7 <list_front>
c00218c2:	83 c4 10             	add    $0x10,%esp
c00218c5:	83 c0 04             	add    $0x4,%eax
c00218c8:	83 e8 1c             	sub    $0x1c,%eax
c00218cb:	8b 40 20             	mov    0x20(%eax),%eax
c00218ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
                                      struct lock, lock_elem)->max_priority;
    if (lock_max_priority > to_update_priority)
c00218d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00218d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00218d7:	7e 06                	jle    c00218df <thread_update_priority+0x7e>
      to_update_priority = lock_max_priority;
c00218d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00218dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }
  
  if (to_update->old_priority > to_update_priority)
c00218df:	8b 45 08             	mov    0x8(%ebp),%eax
c00218e2:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c00218e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00218eb:	7e 0c                	jle    c00218f9 <thread_update_priority+0x98>
    to_update_priority = to_update->old_priority;
c00218ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00218f0:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c00218f6:	89 45 f4             	mov    %eax,-0xc(%ebp)

  to_update->priority = to_update_priority;
c00218f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00218fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00218ff:	89 50 1c             	mov    %edx,0x1c(%eax)

  intr_set_level (old_level);
c0021902:	83 ec 0c             	sub    $0xc,%esp
c0021905:	ff 75 f0             	pushl  -0x10(%ebp)
c0021908:	e8 87 04 00 00       	call   c0021d94 <intr_set_level>
c002190d:	83 c4 10             	add    $0x10,%esp
}
c0021910:	90                   	nop
c0021911:	c9                   	leave  
c0021912:	c3                   	ret    

c0021913 <thread_remove_lock>:


/* remove the lock from holding_locks in cur_thread*/
void 
thread_remove_lock(struct lock* to_rm) 
{
c0021913:	55                   	push   %ebp
c0021914:	89 e5                	mov    %esp,%ebp
c0021916:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c0021919:	e8 ce 04 00 00       	call   c0021dec <intr_disable>
c002191e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  struct thread* cur_thread = thread_current();
c0021921:	e8 c3 f5 ff ff       	call   c0020ee9 <thread_current>
c0021926:	89 45 f0             	mov    %eax,-0x10(%ebp)
  list_remove(&to_rm->lock_elem);
c0021929:	8b 45 08             	mov    0x8(%ebp),%eax
c002192c:	83 c0 18             	add    $0x18,%eax
c002192f:	83 ec 0c             	sub    $0xc,%esp
c0021932:	50                   	push   %eax
c0021933:	e8 d2 92 00 00       	call   c002ac0a <list_remove>
c0021938:	83 c4 10             	add    $0x10,%esp
  thread_update_priority(cur_thread);
c002193b:	83 ec 0c             	sub    $0xc,%esp
c002193e:	ff 75 f0             	pushl  -0x10(%ebp)
c0021941:	e8 1b ff ff ff       	call   c0021861 <thread_update_priority>
c0021946:	83 c4 10             	add    $0x10,%esp

  intr_set_level (old_level);
c0021949:	83 ec 0c             	sub    $0xc,%esp
c002194c:	ff 75 f4             	pushl  -0xc(%ebp)
c002194f:	e8 40 04 00 00       	call   c0021d94 <intr_set_level>
c0021954:	83 c4 10             	add    $0x10,%esp
}
c0021957:	90                   	nop
c0021958:	c9                   	leave  
c0021959:	c3                   	ret    

c002195a <thread_update_recent_cpu_and_load_avg>:

/* update all recent_cpu and load_avg for mlfqs */
void 
thread_update_recent_cpu_and_load_avg()
{
c002195a:	55                   	push   %ebp
c002195b:	89 e5                	mov    %esp,%ebp
c002195d:	53                   	push   %ebx
c002195e:	83 ec 24             	sub    $0x24,%esp
  struct thread *cur_thread = thread_current ();
c0021961:	e8 83 f5 ff ff       	call   c0020ee9 <thread_current>
c0021966:	89 45 f0             	mov    %eax,-0x10(%ebp)
  /* update load_avg */
  size_t ready_threads = list_size (&ready_list);
c0021969:	83 ec 0c             	sub    $0xc,%esp
c002196c:	68 e0 e6 03 c0       	push   $0xc003e6e0
c0021971:	e8 c9 93 00 00       	call   c002ad3f <list_size>
c0021976:	83 c4 10             	add    $0x10,%esp
c0021979:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (cur_thread != idle_thread)
c002197c:	a1 00 e7 03 c0       	mov    0xc003e700,%eax
c0021981:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0021984:	74 03                	je     c0021989 <thread_update_recent_cpu_and_load_avg+0x2f>
    ready_threads = ready_threads + 1;
c0021986:	ff 45 f4             	incl   -0xc(%ebp)
  int ff_ready_threads = convert_to_fixed_point (ready_threads);
c0021989:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002198c:	83 ec 0c             	sub    $0xc,%esp
c002198f:	50                   	push   %eax
c0021990:	e8 ce 8a 00 00       	call   c002a463 <convert_to_fixed_point>
c0021995:	83 c4 10             	add    $0x10,%esp
c0021998:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int ff_59_60 = ff_div_with_int (convert_to_fixed_point (59), 60);
c002199b:	83 ec 0c             	sub    $0xc,%esp
c002199e:	6a 3b                	push   $0x3b
c00219a0:	e8 be 8a 00 00       	call   c002a463 <convert_to_fixed_point>
c00219a5:	83 c4 10             	add    $0x10,%esp
c00219a8:	83 ec 08             	sub    $0x8,%esp
c00219ab:	6a 3c                	push   $0x3c
c00219ad:	50                   	push   %eax
c00219ae:	e8 d2 8b 00 00       	call   c002a585 <ff_div_with_int>
c00219b3:	83 c4 10             	add    $0x10,%esp
c00219b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
  int ff_1_60 = ff_div_with_int (convert_to_fixed_point (1), 60);
c00219b9:	83 ec 0c             	sub    $0xc,%esp
c00219bc:	6a 01                	push   $0x1
c00219be:	e8 a0 8a 00 00       	call   c002a463 <convert_to_fixed_point>
c00219c3:	83 c4 10             	add    $0x10,%esp
c00219c6:	83 ec 08             	sub    $0x8,%esp
c00219c9:	6a 3c                	push   $0x3c
c00219cb:	50                   	push   %eax
c00219cc:	e8 b4 8b 00 00       	call   c002a585 <ff_div_with_int>
c00219d1:	83 c4 10             	add    $0x10,%esp
c00219d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  load_avg = ff_add (ff_mul (ff_59_60, load_avg), ff_mul (ff_1_60, ff_ready_threads));
c00219d7:	83 ec 08             	sub    $0x8,%esp
c00219da:	ff 75 ec             	pushl  -0x14(%ebp)
c00219dd:	ff 75 e4             	pushl  -0x1c(%ebp)
c00219e0:	e8 14 8b 00 00       	call   c002a4f9 <ff_mul>
c00219e5:	83 c4 10             	add    $0x10,%esp
c00219e8:	89 c3                	mov    %eax,%ebx
c00219ea:	a1 44 87 04 c0       	mov    0xc0048744,%eax
c00219ef:	83 ec 08             	sub    $0x8,%esp
c00219f2:	50                   	push   %eax
c00219f3:	ff 75 e8             	pushl  -0x18(%ebp)
c00219f6:	e8 fe 8a 00 00       	call   c002a4f9 <ff_mul>
c00219fb:	83 c4 10             	add    $0x10,%esp
c00219fe:	83 ec 08             	sub    $0x8,%esp
c0021a01:	53                   	push   %ebx
c0021a02:	50                   	push   %eax
c0021a03:	e8 b5 8a 00 00       	call   c002a4bd <ff_add>
c0021a08:	83 c4 10             	add    $0x10,%esp
c0021a0b:	a3 44 87 04 c0       	mov    %eax,0xc0048744
  /* update recent_cpu */
  thread_foreach(thread_update_recent_cpu, NULL);
c0021a10:	83 ec 08             	sub    $0x8,%esp
c0021a13:	6a 00                	push   $0x0
c0021a15:	68 28 1a 02 c0       	push   $0xc0021a28
c0021a1a:	e8 4d f6 ff ff       	call   c002106c <thread_foreach>
c0021a1f:	83 c4 10             	add    $0x10,%esp
}
c0021a22:	90                   	nop
c0021a23:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0021a26:	c9                   	leave  
c0021a27:	c3                   	ret    

c0021a28 <thread_update_recent_cpu>:

/* update recent_cpu for a single thread for mlfqs */
void
thread_update_recent_cpu(struct thread *t, void *aux)
{
c0021a28:	55                   	push   %ebp
c0021a29:	89 e5                	mov    %esp,%ebp
c0021a2b:	53                   	push   %ebx
c0021a2c:	83 ec 14             	sub    $0x14,%esp
  if (t == idle_thread)
c0021a2f:	a1 00 e7 03 c0       	mov    0xc003e700,%eax
c0021a34:	39 45 08             	cmp    %eax,0x8(%ebp)
c0021a37:	0f 84 97 00 00 00    	je     c0021ad4 <thread_update_recent_cpu+0xac>
    return;
  enum intr_level old_level = intr_disable ();
c0021a3d:	e8 aa 03 00 00       	call   c0021dec <intr_disable>
c0021a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
  int timesload_avg = ff_mul_with_int(load_avg, 2);
c0021a45:	a1 44 87 04 c0       	mov    0xc0048744,%eax
c0021a4a:	83 ec 08             	sub    $0x8,%esp
c0021a4d:	6a 02                	push   $0x2
c0021a4f:	50                   	push   %eax
c0021a50:	e8 f9 8a 00 00       	call   c002a54e <ff_mul_with_int>
c0021a55:	83 c4 10             	add    $0x10,%esp
c0021a58:	89 45 f0             	mov    %eax,-0x10(%ebp)
  // int load_avg_res = ff_div(ff_mul_with_int(load_avg, 2), ff_add_with_int(ff_mul_with_int(load_avg, 2), 1));
  int load_avg_res = ff_div(timesload_avg, ff_add_with_int(timesload_avg, 1));
c0021a5b:	83 ec 08             	sub    $0x8,%esp
c0021a5e:	6a 01                	push   $0x1
c0021a60:	ff 75 f0             	pushl  -0x10(%ebp)
c0021a63:	e8 6d 8a 00 00       	call   c002a4d5 <ff_add_with_int>
c0021a68:	83 c4 10             	add    $0x10,%esp
c0021a6b:	83 ec 08             	sub    $0x8,%esp
c0021a6e:	50                   	push   %eax
c0021a6f:	ff 75 f0             	pushl  -0x10(%ebp)
c0021a72:	e8 e3 8a 00 00       	call   c002a55a <ff_div>
c0021a77:	83 c4 10             	add    $0x10,%esp
c0021a7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  t->recent_cpu = ff_add_with_int(ff_mul(load_avg_res, t->recent_cpu), t->nice_val);
c0021a7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0021a80:	8b 98 a0 00 00 00    	mov    0xa0(%eax),%ebx
c0021a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0021a89:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0021a8f:	83 ec 08             	sub    $0x8,%esp
c0021a92:	50                   	push   %eax
c0021a93:	ff 75 ec             	pushl  -0x14(%ebp)
c0021a96:	e8 5e 8a 00 00       	call   c002a4f9 <ff_mul>
c0021a9b:	83 c4 10             	add    $0x10,%esp
c0021a9e:	83 ec 08             	sub    $0x8,%esp
c0021aa1:	53                   	push   %ebx
c0021aa2:	50                   	push   %eax
c0021aa3:	e8 2d 8a 00 00       	call   c002a4d5 <ff_add_with_int>
c0021aa8:	83 c4 10             	add    $0x10,%esp
c0021aab:	89 c2                	mov    %eax,%edx
c0021aad:	8b 45 08             	mov    0x8(%ebp),%eax
c0021ab0:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
  thread_update_priority_mlfqs(t);
c0021ab6:	83 ec 0c             	sub    $0xc,%esp
c0021ab9:	ff 75 08             	pushl  0x8(%ebp)
c0021abc:	e8 58 00 00 00       	call   c0021b19 <thread_update_priority_mlfqs>
c0021ac1:	83 c4 10             	add    $0x10,%esp
  intr_set_level (old_level);
c0021ac4:	83 ec 0c             	sub    $0xc,%esp
c0021ac7:	ff 75 f4             	pushl  -0xc(%ebp)
c0021aca:	e8 c5 02 00 00       	call   c0021d94 <intr_set_level>
c0021acf:	83 c4 10             	add    $0x10,%esp
c0021ad2:	eb 01                	jmp    c0021ad5 <thread_update_recent_cpu+0xad>
    return;
c0021ad4:	90                   	nop
}
c0021ad5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0021ad8:	c9                   	leave  
c0021ad9:	c3                   	ret    

c0021ada <thread_update_recent_cpu_one>:

/* update recent_cpu for mlfqs */
void 
thread_update_recent_cpu_one()
{
c0021ada:	55                   	push   %ebp
c0021adb:	89 e5                	mov    %esp,%ebp
c0021add:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur_thread = thread_current ();
c0021ae0:	e8 04 f4 ff ff       	call   c0020ee9 <thread_current>
c0021ae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (cur_thread == idle_thread)
c0021ae8:	a1 00 e7 03 c0       	mov    0xc003e700,%eax
c0021aed:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0021af0:	74 24                	je     c0021b16 <thread_update_recent_cpu_one+0x3c>
    return;
  cur_thread->recent_cpu = ff_add_with_int (cur_thread->recent_cpu, 1);
c0021af2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021af5:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0021afb:	83 ec 08             	sub    $0x8,%esp
c0021afe:	6a 01                	push   $0x1
c0021b00:	50                   	push   %eax
c0021b01:	e8 cf 89 00 00       	call   c002a4d5 <ff_add_with_int>
c0021b06:	83 c4 10             	add    $0x10,%esp
c0021b09:	89 c2                	mov    %eax,%edx
c0021b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021b0e:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
c0021b14:	eb 01                	jmp    c0021b17 <thread_update_recent_cpu_one+0x3d>
    return;
c0021b16:	90                   	nop
}
c0021b17:	c9                   	leave  
c0021b18:	c3                   	ret    

c0021b19 <thread_update_priority_mlfqs>:

/* update priority in mlfqs */
void 
thread_update_priority_mlfqs(struct thread* to_update)
{
c0021b19:	55                   	push   %ebp
c0021b1a:	89 e5                	mov    %esp,%ebp
c0021b1c:	83 ec 18             	sub    $0x18,%esp
  if (to_update == idle_thread)
c0021b1f:	a1 00 e7 03 c0       	mov    0xc003e700,%eax
c0021b24:	39 45 08             	cmp    %eax,0x8(%ebp)
c0021b27:	0f 84 98 00 00 00    	je     c0021bc5 <thread_update_priority_mlfqs+0xac>
    return;
  int tmp_priority;
  tmp_priority = ff_div_with_int(to_update->recent_cpu, 4);
c0021b2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0021b30:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0021b36:	83 ec 08             	sub    $0x8,%esp
c0021b39:	6a 04                	push   $0x4
c0021b3b:	50                   	push   %eax
c0021b3c:	e8 44 8a 00 00       	call   c002a585 <ff_div_with_int>
c0021b41:	83 c4 10             	add    $0x10,%esp
c0021b44:	89 45 f4             	mov    %eax,-0xc(%ebp)
  tmp_priority = ff_sub(convert_to_fixed_point(PRI_MAX), tmp_priority);
c0021b47:	83 ec 0c             	sub    $0xc,%esp
c0021b4a:	6a 3f                	push   $0x3f
c0021b4c:	e8 12 89 00 00       	call   c002a463 <convert_to_fixed_point>
c0021b51:	83 c4 10             	add    $0x10,%esp
c0021b54:	83 ec 08             	sub    $0x8,%esp
c0021b57:	ff 75 f4             	pushl  -0xc(%ebp)
c0021b5a:	50                   	push   %eax
c0021b5b:	e8 6a 89 00 00       	call   c002a4ca <ff_sub>
c0021b60:	83 c4 10             	add    $0x10,%esp
c0021b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
  // tmp_priority = ff_sub(tmp_priority, ff_mul_with_int(to_update->nice_val, 2));
  tmp_priority = ff_sub(tmp_priority, convert_to_fixed_point(to_update->nice_val * 2));
c0021b66:	8b 45 08             	mov    0x8(%ebp),%eax
c0021b69:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
c0021b6f:	01 c0                	add    %eax,%eax
c0021b71:	83 ec 0c             	sub    $0xc,%esp
c0021b74:	50                   	push   %eax
c0021b75:	e8 e9 88 00 00       	call   c002a463 <convert_to_fixed_point>
c0021b7a:	83 c4 10             	add    $0x10,%esp
c0021b7d:	83 ec 08             	sub    $0x8,%esp
c0021b80:	50                   	push   %eax
c0021b81:	ff 75 f4             	pushl  -0xc(%ebp)
c0021b84:	e8 41 89 00 00       	call   c002a4ca <ff_sub>
c0021b89:	83 c4 10             	add    $0x10,%esp
c0021b8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  tmp_priority = convert_to_int_round(tmp_priority);
c0021b8f:	83 ec 0c             	sub    $0xc,%esp
c0021b92:	ff 75 f4             	pushl  -0xc(%ebp)
c0021b95:	e8 ea 88 00 00       	call   c002a484 <convert_to_int_round>
c0021b9a:	83 c4 10             	add    $0x10,%esp
c0021b9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (tmp_priority < PRI_MIN)
c0021ba0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0021ba4:	79 07                	jns    c0021bad <thread_update_priority_mlfqs+0x94>
    tmp_priority = PRI_MIN;
c0021ba6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  if (tmp_priority > PRI_MAX)
c0021bad:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
c0021bb1:	7e 07                	jle    c0021bba <thread_update_priority_mlfqs+0xa1>
    tmp_priority = PRI_MAX;
c0021bb3:	c7 45 f4 3f 00 00 00 	movl   $0x3f,-0xc(%ebp)
  to_update->priority = tmp_priority;
c0021bba:	8b 45 08             	mov    0x8(%ebp),%eax
c0021bbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0021bc0:	89 50 1c             	mov    %edx,0x1c(%eax)
c0021bc3:	eb 01                	jmp    c0021bc6 <thread_update_priority_mlfqs+0xad>
    return;
c0021bc5:	90                   	nop
}
c0021bc6:	c9                   	leave  
c0021bc7:	c3                   	ret    

c0021bc8 <get_child_thread>:

#ifdef USERPROG
/* get specific child thread*/
struct process_control_block* 
get_child_thread(struct thread* cur, tid_t child_id)
{
c0021bc8:	55                   	push   %ebp
c0021bc9:	89 e5                	mov    %esp,%ebp
c0021bcb:	83 ec 18             	sub    $0x18,%esp
  struct list* child_threads = &(cur->child_threads);
c0021bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0021bd1:	83 c0 34             	add    $0x34,%eax
c0021bd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct list_elem *itr = NULL, *next = NULL;
c0021bd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021bde:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  // printf("[DEBUG] %s, getChild start, asking %d\n", cur->name, child_id);  
  if (!list_empty(child_threads)) {
c0021be5:	83 ec 0c             	sub    $0xc,%esp
c0021be8:	ff 75 f0             	pushl  -0x10(%ebp)
c0021beb:	e8 9c 91 00 00       	call   c002ad8c <list_empty>
c0021bf0:	83 c4 10             	add    $0x10,%esp
c0021bf3:	83 f0 01             	xor    $0x1,%eax
c0021bf6:	84 c0                	test   %al,%al
c0021bf8:	74 58                	je     c0021c52 <get_child_thread+0x8a>
    for ( itr = list_front(child_threads); 
c0021bfa:	83 ec 0c             	sub    $0xc,%esp
c0021bfd:	ff 75 f0             	pushl  -0x10(%ebp)
c0021c00:	e8 b2 90 00 00       	call   c002acb7 <list_front>
c0021c05:	83 c4 10             	add    $0x10,%esp
c0021c08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0021c0b:	eb 32                	jmp    c0021c3f <get_child_thread+0x77>
          itr != list_end(child_threads); 
          itr = next) {
      next = list_next(itr);
c0021c0d:	83 ec 0c             	sub    $0xc,%esp
c0021c10:	ff 75 f4             	pushl  -0xc(%ebp)
c0021c13:	e8 73 8c 00 00       	call   c002a88b <list_next>
c0021c18:	83 c4 10             	add    $0x10,%esp
c0021c1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
      struct process_control_block *child_thread = list_entry(itr, struct process_control_block, child_elem);
c0021c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021c21:	83 c0 04             	add    $0x4,%eax
c0021c24:	83 e8 40             	sub    $0x40,%eax
c0021c27:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (child_thread->tid == child_id) {
c0021c2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0021c2d:	8b 00                	mov    (%eax),%eax
c0021c2f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0021c32:	75 05                	jne    c0021c39 <get_child_thread+0x71>
        return child_thread;
c0021c34:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0021c37:	eb 1e                	jmp    c0021c57 <get_child_thread+0x8f>
          itr = next) {
c0021c39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0021c3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          itr != list_end(child_threads); 
c0021c3f:	83 ec 0c             	sub    $0xc,%esp
c0021c42:	ff 75 f0             	pushl  -0x10(%ebp)
c0021c45:	e8 8b 8c 00 00       	call   c002a8d5 <list_end>
c0021c4a:	83 c4 10             	add    $0x10,%esp
    for ( itr = list_front(child_threads); 
c0021c4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0021c50:	75 bb                	jne    c0021c0d <get_child_thread+0x45>
      }
    }
  }
  // printf("[DEBUG] %s, getChild end\n", cur->name);
  return NULL;
c0021c52:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0021c57:	c9                   	leave  
c0021c58:	c3                   	ret    

c0021c59 <traverseChild>:


/*********************************************/
void traverseChild(struct thread* cur) {
c0021c59:	55                   	push   %ebp
c0021c5a:	89 e5                	mov    %esp,%ebp
c0021c5c:	83 ec 18             	sub    $0x18,%esp
  struct list* child_threads = &(cur->child_threads);
c0021c5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0021c62:	83 c0 34             	add    $0x34,%eax
c0021c65:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct list_elem *itr = NULL, *next = NULL;
c0021c68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021c6f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  printf("[DEBUG] %s traverseChild start\n", cur->name); 
c0021c76:	8b 45 08             	mov    0x8(%ebp),%eax
c0021c79:	83 c0 08             	add    $0x8,%eax
c0021c7c:	83 ec 08             	sub    $0x8,%esp
c0021c7f:	50                   	push   %eax
c0021c80:	68 b4 45 03 c0       	push   $0xc00345b4
c0021c85:	e8 a6 63 00 00       	call   c0028030 <printf>
c0021c8a:	83 c4 10             	add    $0x10,%esp
  // lock_acquire(&cur->child_thread_lock); 
  if (!list_empty(child_threads)) {
c0021c8d:	83 ec 0c             	sub    $0xc,%esp
c0021c90:	ff 75 f0             	pushl  -0x10(%ebp)
c0021c93:	e8 f4 90 00 00       	call   c002ad8c <list_empty>
c0021c98:	83 c4 10             	add    $0x10,%esp
c0021c9b:	83 f0 01             	xor    $0x1,%eax
c0021c9e:	84 c0                	test   %al,%al
c0021ca0:	74 72                	je     c0021d14 <traverseChild+0xbb>
    for (itr = list_front(child_threads); 
c0021ca2:	83 ec 0c             	sub    $0xc,%esp
c0021ca5:	ff 75 f0             	pushl  -0x10(%ebp)
c0021ca8:	e8 0a 90 00 00       	call   c002acb7 <list_front>
c0021cad:	83 c4 10             	add    $0x10,%esp
c0021cb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0021cb3:	eb 4c                	jmp    c0021d01 <traverseChild+0xa8>
          itr != list_end(child_threads); 
          itr = next) {
      next = list_next(itr);
c0021cb5:	83 ec 0c             	sub    $0xc,%esp
c0021cb8:	ff 75 f4             	pushl  -0xc(%ebp)
c0021cbb:	e8 cb 8b 00 00       	call   c002a88b <list_next>
c0021cc0:	83 c4 10             	add    $0x10,%esp
c0021cc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
      printf("[DEBUG] next list_elem %d\n", next);
c0021cc6:	83 ec 08             	sub    $0x8,%esp
c0021cc9:	ff 75 ec             	pushl  -0x14(%ebp)
c0021ccc:	68 d4 45 03 c0       	push   $0xc00345d4
c0021cd1:	e8 5a 63 00 00       	call   c0028030 <printf>
c0021cd6:	83 c4 10             	add    $0x10,%esp
      struct process_control_block *child_thread = list_entry(itr, struct process_control_block, child_elem);
c0021cd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021cdc:	83 c0 04             	add    $0x4,%eax
c0021cdf:	83 e8 40             	sub    $0x40,%eax
c0021ce2:	89 45 e8             	mov    %eax,-0x18(%ebp)
      printf("[DEBUG] %d\n", child_thread->tid);
c0021ce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0021ce8:	8b 00                	mov    (%eax),%eax
c0021cea:	83 ec 08             	sub    $0x8,%esp
c0021ced:	50                   	push   %eax
c0021cee:	68 ef 45 03 c0       	push   $0xc00345ef
c0021cf3:	e8 38 63 00 00       	call   c0028030 <printf>
c0021cf8:	83 c4 10             	add    $0x10,%esp
          itr = next) {
c0021cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0021cfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
          itr != list_end(child_threads); 
c0021d01:	83 ec 0c             	sub    $0xc,%esp
c0021d04:	ff 75 f0             	pushl  -0x10(%ebp)
c0021d07:	e8 c9 8b 00 00       	call   c002a8d5 <list_end>
c0021d0c:	83 c4 10             	add    $0x10,%esp
    for (itr = list_front(child_threads); 
c0021d0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0021d12:	75 a1                	jne    c0021cb5 <traverseChild+0x5c>
    }
  }
  printf("[DEBUG] %s traverseChild end\n", cur->name);  
c0021d14:	8b 45 08             	mov    0x8(%ebp),%eax
c0021d17:	83 c0 08             	add    $0x8,%eax
c0021d1a:	83 ec 08             	sub    $0x8,%esp
c0021d1d:	50                   	push   %eax
c0021d1e:	68 fb 45 03 c0       	push   $0xc00345fb
c0021d23:	e8 08 63 00 00       	call   c0028030 <printf>
c0021d28:	83 c4 10             	add    $0x10,%esp
  // lock_release(&cur->child_thread_lock); 
}
c0021d2b:	90                   	nop
c0021d2c:	c9                   	leave  
c0021d2d:	c3                   	ret    

c0021d2e <switch_threads>:
	# but requires us to preserve %ebx, %ebp, %esi, %edi.  See
	# [SysV-ABI-386] pages 3-11 and 3-12 for details.
	#
	# This stack frame must match the one set up by thread_create()
	# in size.
	pushl %ebx
c0021d2e:	53                   	push   %ebx
	pushl %ebp
c0021d2f:	55                   	push   %ebp
	pushl %esi
c0021d30:	56                   	push   %esi
	pushl %edi
c0021d31:	57                   	push   %edi

	# Get offsetof (struct thread, stack).
.globl thread_stack_ofs
	mov thread_stack_ofs, %edx
c0021d32:	8b 15 04 dd 03 c0    	mov    0xc003dd04,%edx

	# Save current stack pointer to old thread's stack, if any.
	movl SWITCH_CUR(%esp), %eax
c0021d38:	8b 44 24 14          	mov    0x14(%esp),%eax
	movl %esp, (%eax,%edx,1)
c0021d3c:	89 24 10             	mov    %esp,(%eax,%edx,1)

	# Restore stack pointer from new thread's stack.
	movl SWITCH_NEXT(%esp), %ecx
c0021d3f:	8b 4c 24 18          	mov    0x18(%esp),%ecx
	movl (%ecx,%edx,1), %esp
c0021d43:	8b 24 11             	mov    (%ecx,%edx,1),%esp

	# Restore caller's register state.
	popl %edi
c0021d46:	5f                   	pop    %edi
	popl %esi
c0021d47:	5e                   	pop    %esi
	popl %ebp
c0021d48:	5d                   	pop    %ebp
	popl %ebx
c0021d49:	5b                   	pop    %ebx
        ret
c0021d4a:	c3                   	ret    

c0021d4b <switch_entry>:

.globl switch_entry
.func switch_entry
switch_entry:
	# Discard switch_threads() arguments.
	addl $8, %esp
c0021d4b:	83 c4 08             	add    $0x8,%esp

	# Call thread_schedule_tail(prev).
	pushl %eax
c0021d4e:	50                   	push   %eax
.globl thread_schedule_tail
	call thread_schedule_tail
c0021d4f:	e8 01 f8 ff ff       	call   c0021555 <thread_schedule_tail>
	addl $4, %esp
c0021d54:	83 c4 04             	add    $0x4,%esp

	# Start thread proper.
	ret
c0021d57:	c3                   	ret    

c0021d58 <outb>:
c0021d58:	55                   	push   %ebp
c0021d59:	89 e5                	mov    %esp,%ebp
c0021d5b:	83 ec 08             	sub    $0x8,%esp
c0021d5e:	8b 55 08             	mov    0x8(%ebp),%edx
c0021d61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0021d64:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0021d68:	88 45 f8             	mov    %al,-0x8(%ebp)
c0021d6b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0021d6f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0021d73:	ee                   	out    %al,(%dx)
c0021d74:	90                   	nop
c0021d75:	c9                   	leave  
c0021d76:	c3                   	ret    

c0021d77 <intr_get_level>:
c0021d77:	55                   	push   %ebp
c0021d78:	89 e5                	mov    %esp,%ebp
c0021d7a:	83 ec 10             	sub    $0x10,%esp
c0021d7d:	9c                   	pushf  
c0021d7e:	58                   	pop    %eax
c0021d7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0021d82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0021d85:	25 00 02 00 00       	and    $0x200,%eax
c0021d8a:	85 c0                	test   %eax,%eax
c0021d8c:	0f 95 c0             	setne  %al
c0021d8f:	0f b6 c0             	movzbl %al,%eax
c0021d92:	c9                   	leave  
c0021d93:	c3                   	ret    

c0021d94 <intr_set_level>:
c0021d94:	55                   	push   %ebp
c0021d95:	89 e5                	mov    %esp,%ebp
c0021d97:	83 ec 08             	sub    $0x8,%esp
c0021d9a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0021d9e:	75 07                	jne    c0021da7 <intr_set_level+0x13>
c0021da0:	e8 09 00 00 00       	call   c0021dae <intr_enable>
c0021da5:	eb 05                	jmp    c0021dac <intr_set_level+0x18>
c0021da7:	e8 40 00 00 00       	call   c0021dec <intr_disable>
c0021dac:	c9                   	leave  
c0021dad:	c3                   	ret    

c0021dae <intr_enable>:
c0021dae:	55                   	push   %ebp
c0021daf:	89 e5                	mov    %esp,%ebp
c0021db1:	83 ec 18             	sub    $0x18,%esp
c0021db4:	e8 be ff ff ff       	call   c0021d77 <intr_get_level>
c0021db9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0021dbc:	e8 fa 02 00 00       	call   c00220bb <intr_context>
c0021dc1:	83 f0 01             	xor    $0x1,%eax
c0021dc4:	84 c0                	test   %al,%al
c0021dc6:	75 1e                	jne    c0021de6 <intr_enable+0x38>
c0021dc8:	83 ec 0c             	sub    $0xc,%esp
c0021dcb:	68 e0 46 03 c0       	push   $0xc00346e0
c0021dd0:	68 f1 46 03 c0       	push   $0xc00346f1
c0021dd5:	68 f0 4a 03 c0       	push   $0xc0034af0
c0021dda:	6a 5b                	push   $0x5b
c0021ddc:	68 08 47 03 c0       	push   $0xc0034708
c0021de1:	e8 ab 87 00 00       	call   c002a591 <debug_panic>
c0021de6:	fb                   	sti    
c0021de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021dea:	c9                   	leave  
c0021deb:	c3                   	ret    

c0021dec <intr_disable>:
c0021dec:	55                   	push   %ebp
c0021ded:	89 e5                	mov    %esp,%ebp
c0021def:	83 ec 10             	sub    $0x10,%esp
c0021df2:	e8 80 ff ff ff       	call   c0021d77 <intr_get_level>
c0021df7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0021dfa:	fa                   	cli    
c0021dfb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0021dfe:	c9                   	leave  
c0021dff:	c3                   	ret    

c0021e00 <intr_init>:
c0021e00:	55                   	push   %ebp
c0021e01:	89 e5                	mov    %esp,%ebp
c0021e03:	83 ec 18             	sub    $0x18,%esp
c0021e06:	e8 f6 02 00 00       	call   c0022101 <pic_init>
c0021e0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021e12:	eb 2d                	jmp    c0021e41 <intr_init+0x41>
c0021e14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021e17:	8b 04 85 0c dd 03 c0 	mov    -0x3ffc22f4(,%eax,4),%eax
c0021e1e:	83 ec 08             	sub    $0x8,%esp
c0021e21:	6a 00                	push   $0x0
c0021e23:	50                   	push   %eax
c0021e24:	e8 d1 04 00 00       	call   c00222fa <make_intr_gate>
c0021e29:	83 c4 10             	add    $0x10,%esp
c0021e2c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0021e2f:	89 04 cd 80 e7 03 c0 	mov    %eax,-0x3ffc1880(,%ecx,8)
c0021e36:	89 14 cd 84 e7 03 c0 	mov    %edx,-0x3ffc187c(,%ecx,8)
c0021e3d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0021e41:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
c0021e48:	7e ca                	jle    c0021e14 <intr_init+0x14>
c0021e4a:	83 ec 08             	sub    $0x8,%esp
c0021e4d:	68 80 e7 03 c0       	push   $0xc003e780
c0021e52:	68 ff 07 00 00       	push   $0x7ff
c0021e57:	e8 d4 04 00 00       	call   c0022330 <make_idtr_operand>
c0021e5c:	83 c4 10             	add    $0x10,%esp
c0021e5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0021e62:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0021e65:	0f 01 5d e8          	lidtl  -0x18(%ebp)
c0021e69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021e70:	eb 12                	jmp    c0021e84 <intr_init+0x84>
c0021e72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021e75:	c7 04 85 80 f3 03 c0 	movl   $0xc0034722,-0x3ffc0c80(,%eax,4)
c0021e7c:	22 47 03 c0 
c0021e80:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0021e84:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
c0021e8b:	7e e5                	jle    c0021e72 <intr_init+0x72>
c0021e8d:	c7 05 80 f3 03 c0 2a 	movl   $0xc003472a,0xc003f380
c0021e94:	47 03 c0 
c0021e97:	c7 05 84 f3 03 c0 3b 	movl   $0xc003473b,0xc003f384
c0021e9e:	47 03 c0 
c0021ea1:	c7 05 88 f3 03 c0 4f 	movl   $0xc003474f,0xc003f388
c0021ea8:	47 03 c0 
c0021eab:	c7 05 8c f3 03 c0 5d 	movl   $0xc003475d,0xc003f38c
c0021eb2:	47 03 c0 
c0021eb5:	c7 05 90 f3 03 c0 76 	movl   $0xc0034776,0xc003f390
c0021ebc:	47 03 c0 
c0021ebf:	c7 05 94 f3 03 c0 90 	movl   $0xc0034790,0xc003f394
c0021ec6:	47 03 c0 
c0021ec9:	c7 05 98 f3 03 c0 b3 	movl   $0xc00347b3,0xc003f398
c0021ed0:	47 03 c0 
c0021ed3:	c7 05 9c f3 03 c0 d0 	movl   $0xc00347d0,0xc003f39c
c0021eda:	47 03 c0 
c0021edd:	c7 05 a0 f3 03 c0 f3 	movl   $0xc00347f3,0xc003f3a0
c0021ee4:	47 03 c0 
c0021ee7:	c7 05 a4 f3 03 c0 0e 	movl   $0xc003480e,0xc003f3a4
c0021eee:	48 03 c0 
c0021ef1:	c7 05 a8 f3 03 c0 2a 	movl   $0xc003482a,0xc003f3a8
c0021ef8:	48 03 c0 
c0021efb:	c7 05 ac f3 03 c0 44 	movl   $0xc0034844,0xc003f3ac
c0021f02:	48 03 c0 
c0021f05:	c7 05 b0 f3 03 c0 5c 	movl   $0xc003485c,0xc003f3b0
c0021f0c:	48 03 c0 
c0021f0f:	c7 05 b4 f3 03 c0 78 	movl   $0xc0034878,0xc003f3b4
c0021f16:	48 03 c0 
c0021f19:	c7 05 b8 f3 03 c0 99 	movl   $0xc0034899,0xc003f3b8
c0021f20:	48 03 c0 
c0021f23:	c7 05 c0 f3 03 c0 b4 	movl   $0xc00348b4,0xc003f3c0
c0021f2a:	48 03 c0 
c0021f2d:	c7 05 c4 f3 03 c0 d5 	movl   $0xc00348d5,0xc003f3c4
c0021f34:	48 03 c0 
c0021f37:	c7 05 c8 f3 03 c0 f3 	movl   $0xc00348f3,0xc003f3c8
c0021f3e:	48 03 c0 
c0021f41:	c7 05 cc f3 03 c0 10 	movl   $0xc0034910,0xc003f3cc
c0021f48:	49 03 c0 
c0021f4b:	90                   	nop
c0021f4c:	c9                   	leave  
c0021f4d:	c3                   	ret    

c0021f4e <register_handler>:
c0021f4e:	55                   	push   %ebp
c0021f4f:	89 e5                	mov    %esp,%ebp
c0021f51:	53                   	push   %ebx
c0021f52:	83 ec 14             	sub    $0x14,%esp
c0021f55:	8b 45 08             	mov    0x8(%ebp),%eax
c0021f58:	88 45 f4             	mov    %al,-0xc(%ebp)
c0021f5b:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021f5f:	8b 04 85 80 ef 03 c0 	mov    -0x3ffc1080(,%eax,4),%eax
c0021f66:	85 c0                	test   %eax,%eax
c0021f68:	74 21                	je     c0021f8b <register_handler+0x3d>
c0021f6a:	83 ec 0c             	sub    $0xc,%esp
c0021f6d:	68 32 49 03 c0       	push   $0xc0034932
c0021f72:	68 f1 46 03 c0       	push   $0xc00346f1
c0021f77:	68 fc 4a 03 c0       	push   $0xc0034afc
c0021f7c:	68 a8 00 00 00       	push   $0xa8
c0021f81:	68 08 47 03 c0       	push   $0xc0034708
c0021f86:	e8 06 86 00 00       	call   c002a591 <debug_panic>
c0021f8b:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c0021f8f:	75 2e                	jne    c0021fbf <register_handler+0x71>
c0021f91:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
c0021f95:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021f99:	8b 04 85 0c dd 03 c0 	mov    -0x3ffc22f4(,%eax,4),%eax
c0021fa0:	83 ec 08             	sub    $0x8,%esp
c0021fa3:	ff 75 0c             	pushl  0xc(%ebp)
c0021fa6:	50                   	push   %eax
c0021fa7:	e8 69 03 00 00       	call   c0022315 <make_trap_gate>
c0021fac:	83 c4 10             	add    $0x10,%esp
c0021faf:	89 04 dd 80 e7 03 c0 	mov    %eax,-0x3ffc1880(,%ebx,8)
c0021fb6:	89 14 dd 84 e7 03 c0 	mov    %edx,-0x3ffc187c(,%ebx,8)
c0021fbd:	eb 2c                	jmp    c0021feb <register_handler+0x9d>
c0021fbf:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
c0021fc3:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021fc7:	8b 04 85 0c dd 03 c0 	mov    -0x3ffc22f4(,%eax,4),%eax
c0021fce:	83 ec 08             	sub    $0x8,%esp
c0021fd1:	ff 75 0c             	pushl  0xc(%ebp)
c0021fd4:	50                   	push   %eax
c0021fd5:	e8 20 03 00 00       	call   c00222fa <make_intr_gate>
c0021fda:	83 c4 10             	add    $0x10,%esp
c0021fdd:	89 04 dd 80 e7 03 c0 	mov    %eax,-0x3ffc1880(,%ebx,8)
c0021fe4:	89 14 dd 84 e7 03 c0 	mov    %edx,-0x3ffc187c(,%ebx,8)
c0021feb:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021fef:	8b 55 14             	mov    0x14(%ebp),%edx
c0021ff2:	89 14 85 80 ef 03 c0 	mov    %edx,-0x3ffc1080(,%eax,4)
c0021ff9:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021ffd:	8b 55 18             	mov    0x18(%ebp),%edx
c0022000:	89 14 85 80 f3 03 c0 	mov    %edx,-0x3ffc0c80(,%eax,4)
c0022007:	90                   	nop
c0022008:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002200b:	c9                   	leave  
c002200c:	c3                   	ret    

c002200d <intr_register_ext>:
c002200d:	55                   	push   %ebp
c002200e:	89 e5                	mov    %esp,%ebp
c0022010:	83 ec 18             	sub    $0x18,%esp
c0022013:	8b 45 08             	mov    0x8(%ebp),%eax
c0022016:	88 45 f4             	mov    %al,-0xc(%ebp)
c0022019:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
c002201d:	76 06                	jbe    c0022025 <intr_register_ext+0x18>
c002201f:	80 7d f4 2f          	cmpb   $0x2f,-0xc(%ebp)
c0022023:	76 21                	jbe    c0022046 <intr_register_ext+0x39>
c0022025:	83 ec 0c             	sub    $0xc,%esp
c0022028:	68 50 49 03 c0       	push   $0xc0034950
c002202d:	68 f1 46 03 c0       	push   $0xc00346f1
c0022032:	68 10 4b 03 c0       	push   $0xc0034b10
c0022037:	68 b8 00 00 00       	push   $0xb8
c002203c:	68 08 47 03 c0       	push   $0xc0034708
c0022041:	e8 4b 85 00 00       	call   c002a591 <debug_panic>
c0022046:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002204a:	83 ec 0c             	sub    $0xc,%esp
c002204d:	ff 75 10             	pushl  0x10(%ebp)
c0022050:	ff 75 0c             	pushl  0xc(%ebp)
c0022053:	6a 00                	push   $0x0
c0022055:	6a 00                	push   $0x0
c0022057:	50                   	push   %eax
c0022058:	e8 f1 fe ff ff       	call   c0021f4e <register_handler>
c002205d:	83 c4 20             	add    $0x20,%esp
c0022060:	90                   	nop
c0022061:	c9                   	leave  
c0022062:	c3                   	ret    

c0022063 <intr_register_int>:
c0022063:	55                   	push   %ebp
c0022064:	89 e5                	mov    %esp,%ebp
c0022066:	83 ec 18             	sub    $0x18,%esp
c0022069:	8b 45 08             	mov    0x8(%ebp),%eax
c002206c:	88 45 f4             	mov    %al,-0xc(%ebp)
c002206f:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
c0022073:	76 27                	jbe    c002209c <intr_register_int+0x39>
c0022075:	80 7d f4 2f          	cmpb   $0x2f,-0xc(%ebp)
c0022079:	77 21                	ja     c002209c <intr_register_int+0x39>
c002207b:	83 ec 0c             	sub    $0xc,%esp
c002207e:	68 74 49 03 c0       	push   $0xc0034974
c0022083:	68 f1 46 03 c0       	push   $0xc00346f1
c0022088:	68 24 4b 03 c0       	push   $0xc0034b24
c002208d:	68 cd 00 00 00       	push   $0xcd
c0022092:	68 08 47 03 c0       	push   $0xc0034708
c0022097:	e8 f5 84 00 00       	call   c002a591 <debug_panic>
c002209c:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00220a0:	83 ec 0c             	sub    $0xc,%esp
c00220a3:	ff 75 18             	pushl  0x18(%ebp)
c00220a6:	ff 75 14             	pushl  0x14(%ebp)
c00220a9:	ff 75 10             	pushl  0x10(%ebp)
c00220ac:	ff 75 0c             	pushl  0xc(%ebp)
c00220af:	50                   	push   %eax
c00220b0:	e8 99 fe ff ff       	call   c0021f4e <register_handler>
c00220b5:	83 c4 20             	add    $0x20,%esp
c00220b8:	90                   	nop
c00220b9:	c9                   	leave  
c00220ba:	c3                   	ret    

c00220bb <intr_context>:
c00220bb:	55                   	push   %ebp
c00220bc:	89 e5                	mov    %esp,%ebp
c00220be:	0f b6 05 80 fb 03 c0 	movzbl 0xc003fb80,%eax
c00220c5:	5d                   	pop    %ebp
c00220c6:	c3                   	ret    

c00220c7 <intr_yield_on_return>:
c00220c7:	55                   	push   %ebp
c00220c8:	89 e5                	mov    %esp,%ebp
c00220ca:	83 ec 08             	sub    $0x8,%esp
c00220cd:	e8 e9 ff ff ff       	call   c00220bb <intr_context>
c00220d2:	84 c0                	test   %al,%al
c00220d4:	75 21                	jne    c00220f7 <intr_yield_on_return+0x30>
c00220d6:	83 ec 0c             	sub    $0xc,%esp
c00220d9:	68 93 49 03 c0       	push   $0xc0034993
c00220de:	68 f1 46 03 c0       	push   $0xc00346f1
c00220e3:	68 38 4b 03 c0       	push   $0xc0034b38
c00220e8:	68 e0 00 00 00       	push   $0xe0
c00220ed:	68 08 47 03 c0       	push   $0xc0034708
c00220f2:	e8 9a 84 00 00       	call   c002a591 <debug_panic>
c00220f7:	c6 05 81 fb 03 c0 01 	movb   $0x1,0xc003fb81
c00220fe:	90                   	nop
c00220ff:	c9                   	leave  
c0022100:	c3                   	ret    

c0022101 <pic_init>:
c0022101:	55                   	push   %ebp
c0022102:	89 e5                	mov    %esp,%ebp
c0022104:	68 ff 00 00 00       	push   $0xff
c0022109:	6a 21                	push   $0x21
c002210b:	e8 48 fc ff ff       	call   c0021d58 <outb>
c0022110:	83 c4 08             	add    $0x8,%esp
c0022113:	68 ff 00 00 00       	push   $0xff
c0022118:	68 a1 00 00 00       	push   $0xa1
c002211d:	e8 36 fc ff ff       	call   c0021d58 <outb>
c0022122:	83 c4 08             	add    $0x8,%esp
c0022125:	6a 11                	push   $0x11
c0022127:	6a 20                	push   $0x20
c0022129:	e8 2a fc ff ff       	call   c0021d58 <outb>
c002212e:	83 c4 08             	add    $0x8,%esp
c0022131:	6a 20                	push   $0x20
c0022133:	6a 21                	push   $0x21
c0022135:	e8 1e fc ff ff       	call   c0021d58 <outb>
c002213a:	83 c4 08             	add    $0x8,%esp
c002213d:	6a 04                	push   $0x4
c002213f:	6a 21                	push   $0x21
c0022141:	e8 12 fc ff ff       	call   c0021d58 <outb>
c0022146:	83 c4 08             	add    $0x8,%esp
c0022149:	6a 01                	push   $0x1
c002214b:	6a 21                	push   $0x21
c002214d:	e8 06 fc ff ff       	call   c0021d58 <outb>
c0022152:	83 c4 08             	add    $0x8,%esp
c0022155:	6a 11                	push   $0x11
c0022157:	68 a0 00 00 00       	push   $0xa0
c002215c:	e8 f7 fb ff ff       	call   c0021d58 <outb>
c0022161:	83 c4 08             	add    $0x8,%esp
c0022164:	6a 28                	push   $0x28
c0022166:	68 a1 00 00 00       	push   $0xa1
c002216b:	e8 e8 fb ff ff       	call   c0021d58 <outb>
c0022170:	83 c4 08             	add    $0x8,%esp
c0022173:	6a 02                	push   $0x2
c0022175:	68 a1 00 00 00       	push   $0xa1
c002217a:	e8 d9 fb ff ff       	call   c0021d58 <outb>
c002217f:	83 c4 08             	add    $0x8,%esp
c0022182:	6a 01                	push   $0x1
c0022184:	68 a1 00 00 00       	push   $0xa1
c0022189:	e8 ca fb ff ff       	call   c0021d58 <outb>
c002218e:	83 c4 08             	add    $0x8,%esp
c0022191:	6a 00                	push   $0x0
c0022193:	6a 21                	push   $0x21
c0022195:	e8 be fb ff ff       	call   c0021d58 <outb>
c002219a:	83 c4 08             	add    $0x8,%esp
c002219d:	6a 00                	push   $0x0
c002219f:	68 a1 00 00 00       	push   $0xa1
c00221a4:	e8 af fb ff ff       	call   c0021d58 <outb>
c00221a9:	83 c4 08             	add    $0x8,%esp
c00221ac:	90                   	nop
c00221ad:	c9                   	leave  
c00221ae:	c3                   	ret    

c00221af <pic_end_of_interrupt>:
c00221af:	55                   	push   %ebp
c00221b0:	89 e5                	mov    %esp,%ebp
c00221b2:	83 ec 08             	sub    $0x8,%esp
c00221b5:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c00221b9:	7e 06                	jle    c00221c1 <pic_end_of_interrupt+0x12>
c00221bb:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c00221bf:	7e 21                	jle    c00221e2 <pic_end_of_interrupt+0x33>
c00221c1:	83 ec 0c             	sub    $0xc,%esp
c00221c4:	68 a3 49 03 c0       	push   $0xc00349a3
c00221c9:	68 f1 46 03 c0       	push   $0xc00346f1
c00221ce:	68 50 4b 03 c0       	push   $0xc0034b50
c00221d3:	68 0b 01 00 00       	push   $0x10b
c00221d8:	68 08 47 03 c0       	push   $0xc0034708
c00221dd:	e8 af 83 00 00       	call   c002a591 <debug_panic>
c00221e2:	83 ec 08             	sub    $0x8,%esp
c00221e5:	6a 20                	push   $0x20
c00221e7:	6a 20                	push   $0x20
c00221e9:	e8 6a fb ff ff       	call   c0021d58 <outb>
c00221ee:	83 c4 10             	add    $0x10,%esp
c00221f1:	83 7d 08 27          	cmpl   $0x27,0x8(%ebp)
c00221f5:	7e 12                	jle    c0022209 <pic_end_of_interrupt+0x5a>
c00221f7:	83 ec 08             	sub    $0x8,%esp
c00221fa:	6a 20                	push   $0x20
c00221fc:	68 a0 00 00 00       	push   $0xa0
c0022201:	e8 52 fb ff ff       	call   c0021d58 <outb>
c0022206:	83 c4 10             	add    $0x10,%esp
c0022209:	90                   	nop
c002220a:	c9                   	leave  
c002220b:	c3                   	ret    

c002220c <make_gate>:
c002220c:	55                   	push   %ebp
c002220d:	89 e5                	mov    %esp,%ebp
c002220f:	57                   	push   %edi
c0022210:	56                   	push   %esi
c0022211:	53                   	push   %ebx
c0022212:	83 ec 2c             	sub    $0x2c,%esp
c0022215:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0022219:	75 21                	jne    c002223c <make_gate+0x30>
c002221b:	83 ec 0c             	sub    $0xc,%esp
c002221e:	68 bd 49 03 c0       	push   $0xc00349bd
c0022223:	68 f1 46 03 c0       	push   $0xc00346f1
c0022228:	68 68 4b 03 c0       	push   $0xc0034b68
c002222d:	68 2a 01 00 00       	push   $0x12a
c0022232:	68 08 47 03 c0       	push   $0xc0034708
c0022237:	e8 55 83 00 00       	call   c002a591 <debug_panic>
c002223c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0022240:	78 06                	js     c0022248 <make_gate+0x3c>
c0022242:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
c0022246:	7e 21                	jle    c0022269 <make_gate+0x5d>
c0022248:	83 ec 0c             	sub    $0xc,%esp
c002224b:	68 ce 49 03 c0       	push   $0xc00349ce
c0022250:	68 f1 46 03 c0       	push   $0xc00346f1
c0022255:	68 68 4b 03 c0       	push   $0xc0034b68
c002225a:	68 2b 01 00 00       	push   $0x12b
c002225f:	68 08 47 03 c0       	push   $0xc0034708
c0022264:	e8 28 83 00 00       	call   c002a591 <debug_panic>
c0022269:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002226d:	78 06                	js     c0022275 <make_gate+0x69>
c002226f:	83 7d 10 0f          	cmpl   $0xf,0x10(%ebp)
c0022273:	7e 21                	jle    c0022296 <make_gate+0x8a>
c0022275:	83 ec 0c             	sub    $0xc,%esp
c0022278:	68 e3 49 03 c0       	push   $0xc00349e3
c002227d:	68 f1 46 03 c0       	push   $0xc00346f1
c0022282:	68 68 4b 03 c0       	push   $0xc0034b68
c0022287:	68 2c 01 00 00       	push   $0x12c
c002228c:	68 08 47 03 c0       	push   $0xc0034708
c0022291:	e8 fb 82 00 00       	call   c002a591 <debug_panic>
c0022296:	8b 45 08             	mov    0x8(%ebp),%eax
c0022299:	0f b7 c0             	movzwl %ax,%eax
c002229c:	0d 00 00 08 00       	or     $0x80000,%eax
c00222a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00222a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00222a7:	66 b8 00 00          	mov    $0x0,%ax
c00222ab:	89 c2                	mov    %eax,%edx
c00222ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c00222b0:	c1 e0 0d             	shl    $0xd,%eax
c00222b3:	09 c2                	or     %eax,%edx
c00222b5:	8b 45 10             	mov    0x10(%ebp),%eax
c00222b8:	c1 e0 08             	shl    $0x8,%eax
c00222bb:	09 d0                	or     %edx,%eax
c00222bd:	80 cc 80             	or     $0x80,%ah
c00222c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00222c3:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c00222c6:	bf 00 00 00 00       	mov    $0x0,%edi
c00222cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00222ce:	ba 00 00 00 00       	mov    $0x0,%edx
c00222d3:	89 c2                	mov    %eax,%edx
c00222d5:	b8 00 00 00 00       	mov    $0x0,%eax
c00222da:	89 45 d0             	mov    %eax,-0x30(%ebp)
c00222dd:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c00222e0:	89 f0                	mov    %esi,%eax
c00222e2:	0b 45 d0             	or     -0x30(%ebp),%eax
c00222e5:	89 c1                	mov    %eax,%ecx
c00222e7:	89 f8                	mov    %edi,%eax
c00222e9:	0b 45 d4             	or     -0x2c(%ebp),%eax
c00222ec:	89 c3                	mov    %eax,%ebx
c00222ee:	89 c8                	mov    %ecx,%eax
c00222f0:	89 da                	mov    %ebx,%edx
c00222f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c00222f5:	5b                   	pop    %ebx
c00222f6:	5e                   	pop    %esi
c00222f7:	5f                   	pop    %edi
c00222f8:	5d                   	pop    %ebp
c00222f9:	c3                   	ret    

c00222fa <make_intr_gate>:
c00222fa:	55                   	push   %ebp
c00222fb:	89 e5                	mov    %esp,%ebp
c00222fd:	83 ec 08             	sub    $0x8,%esp
c0022300:	83 ec 04             	sub    $0x4,%esp
c0022303:	6a 0e                	push   $0xe
c0022305:	ff 75 0c             	pushl  0xc(%ebp)
c0022308:	ff 75 08             	pushl  0x8(%ebp)
c002230b:	e8 fc fe ff ff       	call   c002220c <make_gate>
c0022310:	83 c4 10             	add    $0x10,%esp
c0022313:	c9                   	leave  
c0022314:	c3                   	ret    

c0022315 <make_trap_gate>:
c0022315:	55                   	push   %ebp
c0022316:	89 e5                	mov    %esp,%ebp
c0022318:	83 ec 08             	sub    $0x8,%esp
c002231b:	83 ec 04             	sub    $0x4,%esp
c002231e:	6a 0f                	push   $0xf
c0022320:	ff 75 0c             	pushl  0xc(%ebp)
c0022323:	ff 75 08             	pushl  0x8(%ebp)
c0022326:	e8 e1 fe ff ff       	call   c002220c <make_gate>
c002232b:	83 c4 10             	add    $0x10,%esp
c002232e:	c9                   	leave  
c002232f:	c3                   	ret    

c0022330 <make_idtr_operand>:
c0022330:	55                   	push   %ebp
c0022331:	89 e5                	mov    %esp,%ebp
c0022333:	57                   	push   %edi
c0022334:	56                   	push   %esi
c0022335:	53                   	push   %ebx
c0022336:	83 ec 14             	sub    $0x14,%esp
c0022339:	8b 45 08             	mov    0x8(%ebp),%eax
c002233c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0022340:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0022344:	89 c6                	mov    %eax,%esi
c0022346:	bf 00 00 00 00       	mov    $0x0,%edi
c002234b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002234e:	ba 00 00 00 00       	mov    $0x0,%edx
c0022353:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c0022357:	c1 e0 10             	shl    $0x10,%eax
c002235a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002235d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0022360:	89 f0                	mov    %esi,%eax
c0022362:	0b 45 e0             	or     -0x20(%ebp),%eax
c0022365:	89 c1                	mov    %eax,%ecx
c0022367:	89 f8                	mov    %edi,%eax
c0022369:	0b 45 e4             	or     -0x1c(%ebp),%eax
c002236c:	89 c3                	mov    %eax,%ebx
c002236e:	89 c8                	mov    %ecx,%eax
c0022370:	89 da                	mov    %ebx,%edx
c0022372:	83 c4 14             	add    $0x14,%esp
c0022375:	5b                   	pop    %ebx
c0022376:	5e                   	pop    %esi
c0022377:	5f                   	pop    %edi
c0022378:	5d                   	pop    %ebp
c0022379:	c3                   	ret    

c002237a <intr_handler>:
c002237a:	55                   	push   %ebp
c002237b:	89 e5                	mov    %esp,%ebp
c002237d:	83 ec 18             	sub    $0x18,%esp
c0022380:	8b 45 08             	mov    0x8(%ebp),%eax
c0022383:	8b 40 30             	mov    0x30(%eax),%eax
c0022386:	83 f8 1f             	cmp    $0x1f,%eax
c0022389:	76 12                	jbe    c002239d <intr_handler+0x23>
c002238b:	8b 45 08             	mov    0x8(%ebp),%eax
c002238e:	8b 40 30             	mov    0x30(%eax),%eax
c0022391:	83 f8 2f             	cmp    $0x2f,%eax
c0022394:	77 07                	ja     c002239d <intr_handler+0x23>
c0022396:	b8 01 00 00 00       	mov    $0x1,%eax
c002239b:	eb 05                	jmp    c00223a2 <intr_handler+0x28>
c002239d:	b8 00 00 00 00       	mov    $0x0,%eax
c00223a2:	88 45 f7             	mov    %al,-0x9(%ebp)
c00223a5:	80 65 f7 01          	andb   $0x1,-0x9(%ebp)
c00223a9:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c00223ad:	74 65                	je     c0022414 <intr_handler+0x9a>
c00223af:	e8 c3 f9 ff ff       	call   c0021d77 <intr_get_level>
c00223b4:	85 c0                	test   %eax,%eax
c00223b6:	74 21                	je     c00223d9 <intr_handler+0x5f>
c00223b8:	83 ec 0c             	sub    $0xc,%esp
c00223bb:	68 fb 49 03 c0       	push   $0xc00349fb
c00223c0:	68 f1 46 03 c0       	push   $0xc00346f1
c00223c5:	68 74 4b 03 c0       	push   $0xc0034b74
c00223ca:	68 65 01 00 00       	push   $0x165
c00223cf:	68 08 47 03 c0       	push   $0xc0034708
c00223d4:	e8 b8 81 00 00       	call   c002a591 <debug_panic>
c00223d9:	e8 dd fc ff ff       	call   c00220bb <intr_context>
c00223de:	83 f0 01             	xor    $0x1,%eax
c00223e1:	84 c0                	test   %al,%al
c00223e3:	75 21                	jne    c0022406 <intr_handler+0x8c>
c00223e5:	83 ec 0c             	sub    $0xc,%esp
c00223e8:	68 e0 46 03 c0       	push   $0xc00346e0
c00223ed:	68 f1 46 03 c0       	push   $0xc00346f1
c00223f2:	68 74 4b 03 c0       	push   $0xc0034b74
c00223f7:	68 66 01 00 00       	push   $0x166
c00223fc:	68 08 47 03 c0       	push   $0xc0034708
c0022401:	e8 8b 81 00 00       	call   c002a591 <debug_panic>
c0022406:	c6 05 80 fb 03 c0 01 	movb   $0x1,0xc003fb80
c002240d:	c6 05 81 fb 03 c0 00 	movb   $0x0,0xc003fb81
c0022414:	8b 45 08             	mov    0x8(%ebp),%eax
c0022417:	8b 40 30             	mov    0x30(%eax),%eax
c002241a:	8b 04 85 80 ef 03 c0 	mov    -0x3ffc1080(,%eax,4),%eax
c0022421:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0022424:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0022428:	74 10                	je     c002243a <intr_handler+0xc0>
c002242a:	83 ec 0c             	sub    $0xc,%esp
c002242d:	ff 75 08             	pushl  0x8(%ebp)
c0022430:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0022433:	ff d0                	call   *%eax
c0022435:	83 c4 10             	add    $0x10,%esp
c0022438:	eb 24                	jmp    c002245e <intr_handler+0xe4>
c002243a:	8b 45 08             	mov    0x8(%ebp),%eax
c002243d:	8b 40 30             	mov    0x30(%eax),%eax
c0022440:	83 f8 27             	cmp    $0x27,%eax
c0022443:	74 19                	je     c002245e <intr_handler+0xe4>
c0022445:	8b 45 08             	mov    0x8(%ebp),%eax
c0022448:	8b 40 30             	mov    0x30(%eax),%eax
c002244b:	83 f8 2f             	cmp    $0x2f,%eax
c002244e:	74 0e                	je     c002245e <intr_handler+0xe4>
c0022450:	83 ec 0c             	sub    $0xc,%esp
c0022453:	ff 75 08             	pushl  0x8(%ebp)
c0022456:	e8 89 00 00 00       	call   c00224e4 <unexpected_interrupt>
c002245b:	83 c4 10             	add    $0x10,%esp
c002245e:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0022462:	74 7d                	je     c00224e1 <intr_handler+0x167>
c0022464:	e8 0e f9 ff ff       	call   c0021d77 <intr_get_level>
c0022469:	85 c0                	test   %eax,%eax
c002246b:	74 21                	je     c002248e <intr_handler+0x114>
c002246d:	83 ec 0c             	sub    $0xc,%esp
c0022470:	68 fb 49 03 c0       	push   $0xc00349fb
c0022475:	68 f1 46 03 c0       	push   $0xc00346f1
c002247a:	68 74 4b 03 c0       	push   $0xc0034b74
c002247f:	68 7c 01 00 00       	push   $0x17c
c0022484:	68 08 47 03 c0       	push   $0xc0034708
c0022489:	e8 03 81 00 00       	call   c002a591 <debug_panic>
c002248e:	e8 28 fc ff ff       	call   c00220bb <intr_context>
c0022493:	84 c0                	test   %al,%al
c0022495:	75 21                	jne    c00224b8 <intr_handler+0x13e>
c0022497:	83 ec 0c             	sub    $0xc,%esp
c002249a:	68 93 49 03 c0       	push   $0xc0034993
c002249f:	68 f1 46 03 c0       	push   $0xc00346f1
c00224a4:	68 74 4b 03 c0       	push   $0xc0034b74
c00224a9:	68 7d 01 00 00       	push   $0x17d
c00224ae:	68 08 47 03 c0       	push   $0xc0034708
c00224b3:	e8 d9 80 00 00       	call   c002a591 <debug_panic>
c00224b8:	c6 05 80 fb 03 c0 00 	movb   $0x0,0xc003fb80
c00224bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00224c2:	8b 40 30             	mov    0x30(%eax),%eax
c00224c5:	83 ec 0c             	sub    $0xc,%esp
c00224c8:	50                   	push   %eax
c00224c9:	e8 e1 fc ff ff       	call   c00221af <pic_end_of_interrupt>
c00224ce:	83 c4 10             	add    $0x10,%esp
c00224d1:	0f b6 05 81 fb 03 c0 	movzbl 0xc003fb81,%eax
c00224d8:	84 c0                	test   %al,%al
c00224da:	74 05                	je     c00224e1 <intr_handler+0x167>
c00224dc:	e8 03 eb ff ff       	call   c0020fe4 <thread_yield>
c00224e1:	90                   	nop
c00224e2:	c9                   	leave  
c00224e3:	c3                   	ret    

c00224e4 <unexpected_interrupt>:
c00224e4:	55                   	push   %ebp
c00224e5:	89 e5                	mov    %esp,%ebp
c00224e7:	83 ec 18             	sub    $0x18,%esp
c00224ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00224ed:	8b 40 30             	mov    0x30(%eax),%eax
c00224f0:	8b 14 85 80 f7 03 c0 	mov    -0x3ffc0880(,%eax,4),%edx
c00224f7:	83 c2 01             	add    $0x1,%edx
c00224fa:	89 14 85 80 f7 03 c0 	mov    %edx,-0x3ffc0880(,%eax,4)
c0022501:	8b 04 85 80 f7 03 c0 	mov    -0x3ffc0880(,%eax,4),%eax
c0022508:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002250b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002250e:	83 e8 01             	sub    $0x1,%eax
c0022511:	23 45 f4             	and    -0xc(%ebp),%eax
c0022514:	85 c0                	test   %eax,%eax
c0022516:	75 25                	jne    c002253d <unexpected_interrupt+0x59>
c0022518:	8b 45 08             	mov    0x8(%ebp),%eax
c002251b:	8b 40 30             	mov    0x30(%eax),%eax
c002251e:	8b 14 85 80 f3 03 c0 	mov    -0x3ffc0c80(,%eax,4),%edx
c0022525:	8b 45 08             	mov    0x8(%ebp),%eax
c0022528:	8b 40 30             	mov    0x30(%eax),%eax
c002252b:	83 ec 04             	sub    $0x4,%esp
c002252e:	52                   	push   %edx
c002252f:	50                   	push   %eax
c0022530:	68 1c 4a 03 c0       	push   $0xc0034a1c
c0022535:	e8 f6 5a 00 00       	call   c0028030 <printf>
c002253a:	83 c4 10             	add    $0x10,%esp
c002253d:	90                   	nop
c002253e:	c9                   	leave  
c002253f:	c3                   	ret    

c0022540 <intr_dump_frame>:
c0022540:	55                   	push   %ebp
c0022541:	89 e5                	mov    %esp,%ebp
c0022543:	53                   	push   %ebx
c0022544:	83 ec 14             	sub    $0x14,%esp
c0022547:	0f 20 d0             	mov    %cr2,%eax
c002254a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002254d:	8b 45 08             	mov    0x8(%ebp),%eax
c0022550:	8b 48 3c             	mov    0x3c(%eax),%ecx
c0022553:	8b 45 08             	mov    0x8(%ebp),%eax
c0022556:	8b 40 30             	mov    0x30(%eax),%eax
c0022559:	8b 14 85 80 f3 03 c0 	mov    -0x3ffc0c80(,%eax,4),%edx
c0022560:	8b 45 08             	mov    0x8(%ebp),%eax
c0022563:	8b 40 30             	mov    0x30(%eax),%eax
c0022566:	51                   	push   %ecx
c0022567:	52                   	push   %edx
c0022568:	50                   	push   %eax
c0022569:	68 40 4a 03 c0       	push   $0xc0034a40
c002256e:	e8 bd 5a 00 00       	call   c0028030 <printf>
c0022573:	83 c4 10             	add    $0x10,%esp
c0022576:	8b 45 08             	mov    0x8(%ebp),%eax
c0022579:	8b 40 34             	mov    0x34(%eax),%eax
c002257c:	83 ec 04             	sub    $0x4,%esp
c002257f:	50                   	push   %eax
c0022580:	ff 75 f4             	pushl  -0xc(%ebp)
c0022583:	68 60 4a 03 c0       	push   $0xc0034a60
c0022588:	e8 a3 5a 00 00       	call   c0028030 <printf>
c002258d:	83 c4 10             	add    $0x10,%esp
c0022590:	8b 45 08             	mov    0x8(%ebp),%eax
c0022593:	8b 58 14             	mov    0x14(%eax),%ebx
c0022596:	8b 45 08             	mov    0x8(%ebp),%eax
c0022599:	8b 48 18             	mov    0x18(%eax),%ecx
c002259c:	8b 45 08             	mov    0x8(%ebp),%eax
c002259f:	8b 50 10             	mov    0x10(%eax),%edx
c00225a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00225a5:	8b 40 1c             	mov    0x1c(%eax),%eax
c00225a8:	83 ec 0c             	sub    $0xc,%esp
c00225ab:	53                   	push   %ebx
c00225ac:	51                   	push   %ecx
c00225ad:	52                   	push   %edx
c00225ae:	50                   	push   %eax
c00225af:	68 78 4a 03 c0       	push   $0xc0034a78
c00225b4:	e8 77 5a 00 00       	call   c0028030 <printf>
c00225b9:	83 c4 20             	add    $0x20,%esp
c00225bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00225bf:	8b 48 08             	mov    0x8(%eax),%ecx
c00225c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00225c5:	8b 40 48             	mov    0x48(%eax),%eax
c00225c8:	89 c3                	mov    %eax,%ebx
c00225ca:	8b 45 08             	mov    0x8(%ebp),%eax
c00225cd:	8b 10                	mov    (%eax),%edx
c00225cf:	8b 45 08             	mov    0x8(%ebp),%eax
c00225d2:	8b 40 04             	mov    0x4(%eax),%eax
c00225d5:	83 ec 0c             	sub    $0xc,%esp
c00225d8:	51                   	push   %ecx
c00225d9:	53                   	push   %ebx
c00225da:	52                   	push   %edx
c00225db:	50                   	push   %eax
c00225dc:	68 a0 4a 03 c0       	push   $0xc0034aa0
c00225e1:	e8 4a 5a 00 00       	call   c0028030 <printf>
c00225e6:	83 c4 20             	add    $0x20,%esp
c00225e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00225ec:	0f b7 40 4c          	movzwl 0x4c(%eax),%eax
c00225f0:	0f b7 d8             	movzwl %ax,%ebx
c00225f3:	8b 45 08             	mov    0x8(%ebp),%eax
c00225f6:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c00225fa:	0f b7 c8             	movzwl %ax,%ecx
c00225fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0022600:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0022604:	0f b7 d0             	movzwl %ax,%edx
c0022607:	8b 45 08             	mov    0x8(%ebp),%eax
c002260a:	0f b7 40 40          	movzwl 0x40(%eax),%eax
c002260e:	0f b7 c0             	movzwl %ax,%eax
c0022611:	83 ec 0c             	sub    $0xc,%esp
c0022614:	53                   	push   %ebx
c0022615:	51                   	push   %ecx
c0022616:	52                   	push   %edx
c0022617:	50                   	push   %eax
c0022618:	68 c8 4a 03 c0       	push   $0xc0034ac8
c002261d:	e8 0e 5a 00 00       	call   c0028030 <printf>
c0022622:	83 c4 20             	add    $0x20,%esp
c0022625:	90                   	nop
c0022626:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0022629:	c9                   	leave  
c002262a:	c3                   	ret    

c002262b <intr_name>:
c002262b:	55                   	push   %ebp
c002262c:	89 e5                	mov    %esp,%ebp
c002262e:	83 ec 04             	sub    $0x4,%esp
c0022631:	8b 45 08             	mov    0x8(%ebp),%eax
c0022634:	88 45 fc             	mov    %al,-0x4(%ebp)
c0022637:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c002263b:	8b 04 85 80 f3 03 c0 	mov    -0x3ffc0c80(,%eax,4),%eax
c0022642:	c9                   	leave  
c0022643:	c3                   	ret    

c0022644 <intr_entry>:
   We "fall through" to intr_exit to return from the interrupt.
*/
.func intr_entry
intr_entry:
	/* Save caller's registers. */
	pushl %ds
c0022644:	1e                   	push   %ds
	pushl %es
c0022645:	06                   	push   %es
	pushl %fs
c0022646:	0f a0                	push   %fs
	pushl %gs
c0022648:	0f a8                	push   %gs
	pushal
c002264a:	60                   	pusha  
        
	/* Set up kernel environment. */
	cld			/* String instructions go upward. */
c002264b:	fc                   	cld    
	mov $SEL_KDSEG, %eax	/* Initialize segment registers. */
c002264c:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
c0022651:	8e d8                	mov    %eax,%ds
	mov %eax, %es
c0022653:	8e c0                	mov    %eax,%es
	leal 56(%esp), %ebp	/* Set up frame pointer. */
c0022655:	8d 6c 24 38          	lea    0x38(%esp),%ebp

	/* Call interrupt handler. */
	pushl %esp
c0022659:	54                   	push   %esp
.globl intr_handler
	call intr_handler
c002265a:	e8 1b fd ff ff       	call   c002237a <intr_handler>
	addl $4, %esp
c002265f:	83 c4 04             	add    $0x4,%esp

c0022662 <intr_exit>:
   userprog/process.c). */
.globl intr_exit
.func intr_exit
intr_exit:
        /* Restore caller's registers. */
	popal
c0022662:	61                   	popa   
	popl %gs
c0022663:	0f a9                	pop    %gs
	popl %fs
c0022665:	0f a1                	pop    %fs
	popl %es
c0022667:	07                   	pop    %es
	popl %ds
c0022668:	1f                   	pop    %ds

        /* Discard `struct intr_frame' vec_no, error_code,
           frame_pointer members. */
	addl $12, %esp
c0022669:	83 c4 0c             	add    $0xc,%esp

        /* Return to caller. */
	iret
c002266c:	cf                   	iret   

c002266d <intr00_stub>:
                                                \
	.data;                                  \
	.long intr##NUMBER##_stub;

/* All the stubs. */
STUB(00, zero) STUB(01, zero) STUB(02, zero) STUB(03, zero)
c002266d:	55                   	push   %ebp
c002266e:	6a 00                	push   $0x0
c0022670:	6a 00                	push   $0x0
c0022672:	eb d0                	jmp    c0022644 <intr_entry>

c0022674 <intr01_stub>:
c0022674:	55                   	push   %ebp
c0022675:	6a 00                	push   $0x0
c0022677:	6a 01                	push   $0x1
c0022679:	eb c9                	jmp    c0022644 <intr_entry>

c002267b <intr02_stub>:
c002267b:	55                   	push   %ebp
c002267c:	6a 00                	push   $0x0
c002267e:	6a 02                	push   $0x2
c0022680:	eb c2                	jmp    c0022644 <intr_entry>

c0022682 <intr03_stub>:
c0022682:	55                   	push   %ebp
c0022683:	6a 00                	push   $0x0
c0022685:	6a 03                	push   $0x3
c0022687:	eb bb                	jmp    c0022644 <intr_entry>

c0022689 <intr04_stub>:
STUB(04, zero) STUB(05, zero) STUB(06, zero) STUB(07, zero)
c0022689:	55                   	push   %ebp
c002268a:	6a 00                	push   $0x0
c002268c:	6a 04                	push   $0x4
c002268e:	eb b4                	jmp    c0022644 <intr_entry>

c0022690 <intr05_stub>:
c0022690:	55                   	push   %ebp
c0022691:	6a 00                	push   $0x0
c0022693:	6a 05                	push   $0x5
c0022695:	eb ad                	jmp    c0022644 <intr_entry>

c0022697 <intr06_stub>:
c0022697:	55                   	push   %ebp
c0022698:	6a 00                	push   $0x0
c002269a:	6a 06                	push   $0x6
c002269c:	eb a6                	jmp    c0022644 <intr_entry>

c002269e <intr07_stub>:
c002269e:	55                   	push   %ebp
c002269f:	6a 00                	push   $0x0
c00226a1:	6a 07                	push   $0x7
c00226a3:	eb 9f                	jmp    c0022644 <intr_entry>

c00226a5 <intr08_stub>:
STUB(08, REAL) STUB(09, zero) STUB(0a, REAL) STUB(0b, REAL)
c00226a5:	ff 34 24             	pushl  (%esp)
c00226a8:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00226ac:	6a 08                	push   $0x8
c00226ae:	eb 94                	jmp    c0022644 <intr_entry>

c00226b0 <intr09_stub>:
c00226b0:	55                   	push   %ebp
c00226b1:	6a 00                	push   $0x0
c00226b3:	6a 09                	push   $0x9
c00226b5:	eb 8d                	jmp    c0022644 <intr_entry>

c00226b7 <intr0a_stub>:
c00226b7:	ff 34 24             	pushl  (%esp)
c00226ba:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00226be:	6a 0a                	push   $0xa
c00226c0:	eb 82                	jmp    c0022644 <intr_entry>

c00226c2 <intr0b_stub>:
c00226c2:	ff 34 24             	pushl  (%esp)
c00226c5:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00226c9:	6a 0b                	push   $0xb
c00226cb:	e9 74 ff ff ff       	jmp    c0022644 <intr_entry>

c00226d0 <intr0c_stub>:
STUB(0c, zero) STUB(0d, REAL) STUB(0e, REAL) STUB(0f, zero)
c00226d0:	55                   	push   %ebp
c00226d1:	6a 00                	push   $0x0
c00226d3:	6a 0c                	push   $0xc
c00226d5:	e9 6a ff ff ff       	jmp    c0022644 <intr_entry>

c00226da <intr0d_stub>:
c00226da:	ff 34 24             	pushl  (%esp)
c00226dd:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00226e1:	6a 0d                	push   $0xd
c00226e3:	e9 5c ff ff ff       	jmp    c0022644 <intr_entry>

c00226e8 <intr0e_stub>:
c00226e8:	ff 34 24             	pushl  (%esp)
c00226eb:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00226ef:	6a 0e                	push   $0xe
c00226f1:	e9 4e ff ff ff       	jmp    c0022644 <intr_entry>

c00226f6 <intr0f_stub>:
c00226f6:	55                   	push   %ebp
c00226f7:	6a 00                	push   $0x0
c00226f9:	6a 0f                	push   $0xf
c00226fb:	e9 44 ff ff ff       	jmp    c0022644 <intr_entry>

c0022700 <intr10_stub>:

STUB(10, zero) STUB(11, REAL) STUB(12, zero) STUB(13, zero)
c0022700:	55                   	push   %ebp
c0022701:	6a 00                	push   $0x0
c0022703:	6a 10                	push   $0x10
c0022705:	e9 3a ff ff ff       	jmp    c0022644 <intr_entry>

c002270a <intr11_stub>:
c002270a:	ff 34 24             	pushl  (%esp)
c002270d:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022711:	6a 11                	push   $0x11
c0022713:	e9 2c ff ff ff       	jmp    c0022644 <intr_entry>

c0022718 <intr12_stub>:
c0022718:	55                   	push   %ebp
c0022719:	6a 00                	push   $0x0
c002271b:	6a 12                	push   $0x12
c002271d:	e9 22 ff ff ff       	jmp    c0022644 <intr_entry>

c0022722 <intr13_stub>:
c0022722:	55                   	push   %ebp
c0022723:	6a 00                	push   $0x0
c0022725:	6a 13                	push   $0x13
c0022727:	e9 18 ff ff ff       	jmp    c0022644 <intr_entry>

c002272c <intr14_stub>:
STUB(14, zero) STUB(15, zero) STUB(16, zero) STUB(17, zero)
c002272c:	55                   	push   %ebp
c002272d:	6a 00                	push   $0x0
c002272f:	6a 14                	push   $0x14
c0022731:	e9 0e ff ff ff       	jmp    c0022644 <intr_entry>

c0022736 <intr15_stub>:
c0022736:	55                   	push   %ebp
c0022737:	6a 00                	push   $0x0
c0022739:	6a 15                	push   $0x15
c002273b:	e9 04 ff ff ff       	jmp    c0022644 <intr_entry>

c0022740 <intr16_stub>:
c0022740:	55                   	push   %ebp
c0022741:	6a 00                	push   $0x0
c0022743:	6a 16                	push   $0x16
c0022745:	e9 fa fe ff ff       	jmp    c0022644 <intr_entry>

c002274a <intr17_stub>:
c002274a:	55                   	push   %ebp
c002274b:	6a 00                	push   $0x0
c002274d:	6a 17                	push   $0x17
c002274f:	e9 f0 fe ff ff       	jmp    c0022644 <intr_entry>

c0022754 <intr18_stub>:
STUB(18, REAL) STUB(19, zero) STUB(1a, REAL) STUB(1b, REAL)
c0022754:	ff 34 24             	pushl  (%esp)
c0022757:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c002275b:	6a 18                	push   $0x18
c002275d:	e9 e2 fe ff ff       	jmp    c0022644 <intr_entry>

c0022762 <intr19_stub>:
c0022762:	55                   	push   %ebp
c0022763:	6a 00                	push   $0x0
c0022765:	6a 19                	push   $0x19
c0022767:	e9 d8 fe ff ff       	jmp    c0022644 <intr_entry>

c002276c <intr1a_stub>:
c002276c:	ff 34 24             	pushl  (%esp)
c002276f:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022773:	6a 1a                	push   $0x1a
c0022775:	e9 ca fe ff ff       	jmp    c0022644 <intr_entry>

c002277a <intr1b_stub>:
c002277a:	ff 34 24             	pushl  (%esp)
c002277d:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022781:	6a 1b                	push   $0x1b
c0022783:	e9 bc fe ff ff       	jmp    c0022644 <intr_entry>

c0022788 <intr1c_stub>:
STUB(1c, zero) STUB(1d, REAL) STUB(1e, REAL) STUB(1f, zero)
c0022788:	55                   	push   %ebp
c0022789:	6a 00                	push   $0x0
c002278b:	6a 1c                	push   $0x1c
c002278d:	e9 b2 fe ff ff       	jmp    c0022644 <intr_entry>

c0022792 <intr1d_stub>:
c0022792:	ff 34 24             	pushl  (%esp)
c0022795:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022799:	6a 1d                	push   $0x1d
c002279b:	e9 a4 fe ff ff       	jmp    c0022644 <intr_entry>

c00227a0 <intr1e_stub>:
c00227a0:	ff 34 24             	pushl  (%esp)
c00227a3:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00227a7:	6a 1e                	push   $0x1e
c00227a9:	e9 96 fe ff ff       	jmp    c0022644 <intr_entry>

c00227ae <intr1f_stub>:
c00227ae:	55                   	push   %ebp
c00227af:	6a 00                	push   $0x0
c00227b1:	6a 1f                	push   $0x1f
c00227b3:	e9 8c fe ff ff       	jmp    c0022644 <intr_entry>

c00227b8 <intr20_stub>:

STUB(20, zero) STUB(21, zero) STUB(22, zero) STUB(23, zero)
c00227b8:	55                   	push   %ebp
c00227b9:	6a 00                	push   $0x0
c00227bb:	6a 20                	push   $0x20
c00227bd:	e9 82 fe ff ff       	jmp    c0022644 <intr_entry>

c00227c2 <intr21_stub>:
c00227c2:	55                   	push   %ebp
c00227c3:	6a 00                	push   $0x0
c00227c5:	6a 21                	push   $0x21
c00227c7:	e9 78 fe ff ff       	jmp    c0022644 <intr_entry>

c00227cc <intr22_stub>:
c00227cc:	55                   	push   %ebp
c00227cd:	6a 00                	push   $0x0
c00227cf:	6a 22                	push   $0x22
c00227d1:	e9 6e fe ff ff       	jmp    c0022644 <intr_entry>

c00227d6 <intr23_stub>:
c00227d6:	55                   	push   %ebp
c00227d7:	6a 00                	push   $0x0
c00227d9:	6a 23                	push   $0x23
c00227db:	e9 64 fe ff ff       	jmp    c0022644 <intr_entry>

c00227e0 <intr24_stub>:
STUB(24, zero) STUB(25, zero) STUB(26, zero) STUB(27, zero)
c00227e0:	55                   	push   %ebp
c00227e1:	6a 00                	push   $0x0
c00227e3:	6a 24                	push   $0x24
c00227e5:	e9 5a fe ff ff       	jmp    c0022644 <intr_entry>

c00227ea <intr25_stub>:
c00227ea:	55                   	push   %ebp
c00227eb:	6a 00                	push   $0x0
c00227ed:	6a 25                	push   $0x25
c00227ef:	e9 50 fe ff ff       	jmp    c0022644 <intr_entry>

c00227f4 <intr26_stub>:
c00227f4:	55                   	push   %ebp
c00227f5:	6a 00                	push   $0x0
c00227f7:	6a 26                	push   $0x26
c00227f9:	e9 46 fe ff ff       	jmp    c0022644 <intr_entry>

c00227fe <intr27_stub>:
c00227fe:	55                   	push   %ebp
c00227ff:	6a 00                	push   $0x0
c0022801:	6a 27                	push   $0x27
c0022803:	e9 3c fe ff ff       	jmp    c0022644 <intr_entry>

c0022808 <intr28_stub>:
STUB(28, zero) STUB(29, zero) STUB(2a, zero) STUB(2b, zero)
c0022808:	55                   	push   %ebp
c0022809:	6a 00                	push   $0x0
c002280b:	6a 28                	push   $0x28
c002280d:	e9 32 fe ff ff       	jmp    c0022644 <intr_entry>

c0022812 <intr29_stub>:
c0022812:	55                   	push   %ebp
c0022813:	6a 00                	push   $0x0
c0022815:	6a 29                	push   $0x29
c0022817:	e9 28 fe ff ff       	jmp    c0022644 <intr_entry>

c002281c <intr2a_stub>:
c002281c:	55                   	push   %ebp
c002281d:	6a 00                	push   $0x0
c002281f:	6a 2a                	push   $0x2a
c0022821:	e9 1e fe ff ff       	jmp    c0022644 <intr_entry>

c0022826 <intr2b_stub>:
c0022826:	55                   	push   %ebp
c0022827:	6a 00                	push   $0x0
c0022829:	6a 2b                	push   $0x2b
c002282b:	e9 14 fe ff ff       	jmp    c0022644 <intr_entry>

c0022830 <intr2c_stub>:
STUB(2c, zero) STUB(2d, zero) STUB(2e, zero) STUB(2f, zero)
c0022830:	55                   	push   %ebp
c0022831:	6a 00                	push   $0x0
c0022833:	6a 2c                	push   $0x2c
c0022835:	e9 0a fe ff ff       	jmp    c0022644 <intr_entry>

c002283a <intr2d_stub>:
c002283a:	55                   	push   %ebp
c002283b:	6a 00                	push   $0x0
c002283d:	6a 2d                	push   $0x2d
c002283f:	e9 00 fe ff ff       	jmp    c0022644 <intr_entry>

c0022844 <intr2e_stub>:
c0022844:	55                   	push   %ebp
c0022845:	6a 00                	push   $0x0
c0022847:	6a 2e                	push   $0x2e
c0022849:	e9 f6 fd ff ff       	jmp    c0022644 <intr_entry>

c002284e <intr2f_stub>:
c002284e:	55                   	push   %ebp
c002284f:	6a 00                	push   $0x0
c0022851:	6a 2f                	push   $0x2f
c0022853:	e9 ec fd ff ff       	jmp    c0022644 <intr_entry>

c0022858 <intr30_stub>:

STUB(30, zero) STUB(31, zero) STUB(32, zero) STUB(33, zero)
c0022858:	55                   	push   %ebp
c0022859:	6a 00                	push   $0x0
c002285b:	6a 30                	push   $0x30
c002285d:	e9 e2 fd ff ff       	jmp    c0022644 <intr_entry>

c0022862 <intr31_stub>:
c0022862:	55                   	push   %ebp
c0022863:	6a 00                	push   $0x0
c0022865:	6a 31                	push   $0x31
c0022867:	e9 d8 fd ff ff       	jmp    c0022644 <intr_entry>

c002286c <intr32_stub>:
c002286c:	55                   	push   %ebp
c002286d:	6a 00                	push   $0x0
c002286f:	6a 32                	push   $0x32
c0022871:	e9 ce fd ff ff       	jmp    c0022644 <intr_entry>

c0022876 <intr33_stub>:
c0022876:	55                   	push   %ebp
c0022877:	6a 00                	push   $0x0
c0022879:	6a 33                	push   $0x33
c002287b:	e9 c4 fd ff ff       	jmp    c0022644 <intr_entry>

c0022880 <intr34_stub>:
STUB(34, zero) STUB(35, zero) STUB(36, zero) STUB(37, zero)
c0022880:	55                   	push   %ebp
c0022881:	6a 00                	push   $0x0
c0022883:	6a 34                	push   $0x34
c0022885:	e9 ba fd ff ff       	jmp    c0022644 <intr_entry>

c002288a <intr35_stub>:
c002288a:	55                   	push   %ebp
c002288b:	6a 00                	push   $0x0
c002288d:	6a 35                	push   $0x35
c002288f:	e9 b0 fd ff ff       	jmp    c0022644 <intr_entry>

c0022894 <intr36_stub>:
c0022894:	55                   	push   %ebp
c0022895:	6a 00                	push   $0x0
c0022897:	6a 36                	push   $0x36
c0022899:	e9 a6 fd ff ff       	jmp    c0022644 <intr_entry>

c002289e <intr37_stub>:
c002289e:	55                   	push   %ebp
c002289f:	6a 00                	push   $0x0
c00228a1:	6a 37                	push   $0x37
c00228a3:	e9 9c fd ff ff       	jmp    c0022644 <intr_entry>

c00228a8 <intr38_stub>:
STUB(38, zero) STUB(39, zero) STUB(3a, zero) STUB(3b, zero)
c00228a8:	55                   	push   %ebp
c00228a9:	6a 00                	push   $0x0
c00228ab:	6a 38                	push   $0x38
c00228ad:	e9 92 fd ff ff       	jmp    c0022644 <intr_entry>

c00228b2 <intr39_stub>:
c00228b2:	55                   	push   %ebp
c00228b3:	6a 00                	push   $0x0
c00228b5:	6a 39                	push   $0x39
c00228b7:	e9 88 fd ff ff       	jmp    c0022644 <intr_entry>

c00228bc <intr3a_stub>:
c00228bc:	55                   	push   %ebp
c00228bd:	6a 00                	push   $0x0
c00228bf:	6a 3a                	push   $0x3a
c00228c1:	e9 7e fd ff ff       	jmp    c0022644 <intr_entry>

c00228c6 <intr3b_stub>:
c00228c6:	55                   	push   %ebp
c00228c7:	6a 00                	push   $0x0
c00228c9:	6a 3b                	push   $0x3b
c00228cb:	e9 74 fd ff ff       	jmp    c0022644 <intr_entry>

c00228d0 <intr3c_stub>:
STUB(3c, zero) STUB(3d, zero) STUB(3e, zero) STUB(3f, zero)
c00228d0:	55                   	push   %ebp
c00228d1:	6a 00                	push   $0x0
c00228d3:	6a 3c                	push   $0x3c
c00228d5:	e9 6a fd ff ff       	jmp    c0022644 <intr_entry>

c00228da <intr3d_stub>:
c00228da:	55                   	push   %ebp
c00228db:	6a 00                	push   $0x0
c00228dd:	6a 3d                	push   $0x3d
c00228df:	e9 60 fd ff ff       	jmp    c0022644 <intr_entry>

c00228e4 <intr3e_stub>:
c00228e4:	55                   	push   %ebp
c00228e5:	6a 00                	push   $0x0
c00228e7:	6a 3e                	push   $0x3e
c00228e9:	e9 56 fd ff ff       	jmp    c0022644 <intr_entry>

c00228ee <intr3f_stub>:
c00228ee:	55                   	push   %ebp
c00228ef:	6a 00                	push   $0x0
c00228f1:	6a 3f                	push   $0x3f
c00228f3:	e9 4c fd ff ff       	jmp    c0022644 <intr_entry>

c00228f8 <intr40_stub>:

STUB(40, zero) STUB(41, zero) STUB(42, zero) STUB(43, zero)
c00228f8:	55                   	push   %ebp
c00228f9:	6a 00                	push   $0x0
c00228fb:	6a 40                	push   $0x40
c00228fd:	e9 42 fd ff ff       	jmp    c0022644 <intr_entry>

c0022902 <intr41_stub>:
c0022902:	55                   	push   %ebp
c0022903:	6a 00                	push   $0x0
c0022905:	6a 41                	push   $0x41
c0022907:	e9 38 fd ff ff       	jmp    c0022644 <intr_entry>

c002290c <intr42_stub>:
c002290c:	55                   	push   %ebp
c002290d:	6a 00                	push   $0x0
c002290f:	6a 42                	push   $0x42
c0022911:	e9 2e fd ff ff       	jmp    c0022644 <intr_entry>

c0022916 <intr43_stub>:
c0022916:	55                   	push   %ebp
c0022917:	6a 00                	push   $0x0
c0022919:	6a 43                	push   $0x43
c002291b:	e9 24 fd ff ff       	jmp    c0022644 <intr_entry>

c0022920 <intr44_stub>:
STUB(44, zero) STUB(45, zero) STUB(46, zero) STUB(47, zero)
c0022920:	55                   	push   %ebp
c0022921:	6a 00                	push   $0x0
c0022923:	6a 44                	push   $0x44
c0022925:	e9 1a fd ff ff       	jmp    c0022644 <intr_entry>

c002292a <intr45_stub>:
c002292a:	55                   	push   %ebp
c002292b:	6a 00                	push   $0x0
c002292d:	6a 45                	push   $0x45
c002292f:	e9 10 fd ff ff       	jmp    c0022644 <intr_entry>

c0022934 <intr46_stub>:
c0022934:	55                   	push   %ebp
c0022935:	6a 00                	push   $0x0
c0022937:	6a 46                	push   $0x46
c0022939:	e9 06 fd ff ff       	jmp    c0022644 <intr_entry>

c002293e <intr47_stub>:
c002293e:	55                   	push   %ebp
c002293f:	6a 00                	push   $0x0
c0022941:	6a 47                	push   $0x47
c0022943:	e9 fc fc ff ff       	jmp    c0022644 <intr_entry>

c0022948 <intr48_stub>:
STUB(48, zero) STUB(49, zero) STUB(4a, zero) STUB(4b, zero)
c0022948:	55                   	push   %ebp
c0022949:	6a 00                	push   $0x0
c002294b:	6a 48                	push   $0x48
c002294d:	e9 f2 fc ff ff       	jmp    c0022644 <intr_entry>

c0022952 <intr49_stub>:
c0022952:	55                   	push   %ebp
c0022953:	6a 00                	push   $0x0
c0022955:	6a 49                	push   $0x49
c0022957:	e9 e8 fc ff ff       	jmp    c0022644 <intr_entry>

c002295c <intr4a_stub>:
c002295c:	55                   	push   %ebp
c002295d:	6a 00                	push   $0x0
c002295f:	6a 4a                	push   $0x4a
c0022961:	e9 de fc ff ff       	jmp    c0022644 <intr_entry>

c0022966 <intr4b_stub>:
c0022966:	55                   	push   %ebp
c0022967:	6a 00                	push   $0x0
c0022969:	6a 4b                	push   $0x4b
c002296b:	e9 d4 fc ff ff       	jmp    c0022644 <intr_entry>

c0022970 <intr4c_stub>:
STUB(4c, zero) STUB(4d, zero) STUB(4e, zero) STUB(4f, zero)
c0022970:	55                   	push   %ebp
c0022971:	6a 00                	push   $0x0
c0022973:	6a 4c                	push   $0x4c
c0022975:	e9 ca fc ff ff       	jmp    c0022644 <intr_entry>

c002297a <intr4d_stub>:
c002297a:	55                   	push   %ebp
c002297b:	6a 00                	push   $0x0
c002297d:	6a 4d                	push   $0x4d
c002297f:	e9 c0 fc ff ff       	jmp    c0022644 <intr_entry>

c0022984 <intr4e_stub>:
c0022984:	55                   	push   %ebp
c0022985:	6a 00                	push   $0x0
c0022987:	6a 4e                	push   $0x4e
c0022989:	e9 b6 fc ff ff       	jmp    c0022644 <intr_entry>

c002298e <intr4f_stub>:
c002298e:	55                   	push   %ebp
c002298f:	6a 00                	push   $0x0
c0022991:	6a 4f                	push   $0x4f
c0022993:	e9 ac fc ff ff       	jmp    c0022644 <intr_entry>

c0022998 <intr50_stub>:

STUB(50, zero) STUB(51, zero) STUB(52, zero) STUB(53, zero)
c0022998:	55                   	push   %ebp
c0022999:	6a 00                	push   $0x0
c002299b:	6a 50                	push   $0x50
c002299d:	e9 a2 fc ff ff       	jmp    c0022644 <intr_entry>

c00229a2 <intr51_stub>:
c00229a2:	55                   	push   %ebp
c00229a3:	6a 00                	push   $0x0
c00229a5:	6a 51                	push   $0x51
c00229a7:	e9 98 fc ff ff       	jmp    c0022644 <intr_entry>

c00229ac <intr52_stub>:
c00229ac:	55                   	push   %ebp
c00229ad:	6a 00                	push   $0x0
c00229af:	6a 52                	push   $0x52
c00229b1:	e9 8e fc ff ff       	jmp    c0022644 <intr_entry>

c00229b6 <intr53_stub>:
c00229b6:	55                   	push   %ebp
c00229b7:	6a 00                	push   $0x0
c00229b9:	6a 53                	push   $0x53
c00229bb:	e9 84 fc ff ff       	jmp    c0022644 <intr_entry>

c00229c0 <intr54_stub>:
STUB(54, zero) STUB(55, zero) STUB(56, zero) STUB(57, zero)
c00229c0:	55                   	push   %ebp
c00229c1:	6a 00                	push   $0x0
c00229c3:	6a 54                	push   $0x54
c00229c5:	e9 7a fc ff ff       	jmp    c0022644 <intr_entry>

c00229ca <intr55_stub>:
c00229ca:	55                   	push   %ebp
c00229cb:	6a 00                	push   $0x0
c00229cd:	6a 55                	push   $0x55
c00229cf:	e9 70 fc ff ff       	jmp    c0022644 <intr_entry>

c00229d4 <intr56_stub>:
c00229d4:	55                   	push   %ebp
c00229d5:	6a 00                	push   $0x0
c00229d7:	6a 56                	push   $0x56
c00229d9:	e9 66 fc ff ff       	jmp    c0022644 <intr_entry>

c00229de <intr57_stub>:
c00229de:	55                   	push   %ebp
c00229df:	6a 00                	push   $0x0
c00229e1:	6a 57                	push   $0x57
c00229e3:	e9 5c fc ff ff       	jmp    c0022644 <intr_entry>

c00229e8 <intr58_stub>:
STUB(58, zero) STUB(59, zero) STUB(5a, zero) STUB(5b, zero)
c00229e8:	55                   	push   %ebp
c00229e9:	6a 00                	push   $0x0
c00229eb:	6a 58                	push   $0x58
c00229ed:	e9 52 fc ff ff       	jmp    c0022644 <intr_entry>

c00229f2 <intr59_stub>:
c00229f2:	55                   	push   %ebp
c00229f3:	6a 00                	push   $0x0
c00229f5:	6a 59                	push   $0x59
c00229f7:	e9 48 fc ff ff       	jmp    c0022644 <intr_entry>

c00229fc <intr5a_stub>:
c00229fc:	55                   	push   %ebp
c00229fd:	6a 00                	push   $0x0
c00229ff:	6a 5a                	push   $0x5a
c0022a01:	e9 3e fc ff ff       	jmp    c0022644 <intr_entry>

c0022a06 <intr5b_stub>:
c0022a06:	55                   	push   %ebp
c0022a07:	6a 00                	push   $0x0
c0022a09:	6a 5b                	push   $0x5b
c0022a0b:	e9 34 fc ff ff       	jmp    c0022644 <intr_entry>

c0022a10 <intr5c_stub>:
STUB(5c, zero) STUB(5d, zero) STUB(5e, zero) STUB(5f, zero)
c0022a10:	55                   	push   %ebp
c0022a11:	6a 00                	push   $0x0
c0022a13:	6a 5c                	push   $0x5c
c0022a15:	e9 2a fc ff ff       	jmp    c0022644 <intr_entry>

c0022a1a <intr5d_stub>:
c0022a1a:	55                   	push   %ebp
c0022a1b:	6a 00                	push   $0x0
c0022a1d:	6a 5d                	push   $0x5d
c0022a1f:	e9 20 fc ff ff       	jmp    c0022644 <intr_entry>

c0022a24 <intr5e_stub>:
c0022a24:	55                   	push   %ebp
c0022a25:	6a 00                	push   $0x0
c0022a27:	6a 5e                	push   $0x5e
c0022a29:	e9 16 fc ff ff       	jmp    c0022644 <intr_entry>

c0022a2e <intr5f_stub>:
c0022a2e:	55                   	push   %ebp
c0022a2f:	6a 00                	push   $0x0
c0022a31:	6a 5f                	push   $0x5f
c0022a33:	e9 0c fc ff ff       	jmp    c0022644 <intr_entry>

c0022a38 <intr60_stub>:

STUB(60, zero) STUB(61, zero) STUB(62, zero) STUB(63, zero)
c0022a38:	55                   	push   %ebp
c0022a39:	6a 00                	push   $0x0
c0022a3b:	6a 60                	push   $0x60
c0022a3d:	e9 02 fc ff ff       	jmp    c0022644 <intr_entry>

c0022a42 <intr61_stub>:
c0022a42:	55                   	push   %ebp
c0022a43:	6a 00                	push   $0x0
c0022a45:	6a 61                	push   $0x61
c0022a47:	e9 f8 fb ff ff       	jmp    c0022644 <intr_entry>

c0022a4c <intr62_stub>:
c0022a4c:	55                   	push   %ebp
c0022a4d:	6a 00                	push   $0x0
c0022a4f:	6a 62                	push   $0x62
c0022a51:	e9 ee fb ff ff       	jmp    c0022644 <intr_entry>

c0022a56 <intr63_stub>:
c0022a56:	55                   	push   %ebp
c0022a57:	6a 00                	push   $0x0
c0022a59:	6a 63                	push   $0x63
c0022a5b:	e9 e4 fb ff ff       	jmp    c0022644 <intr_entry>

c0022a60 <intr64_stub>:
STUB(64, zero) STUB(65, zero) STUB(66, zero) STUB(67, zero)
c0022a60:	55                   	push   %ebp
c0022a61:	6a 00                	push   $0x0
c0022a63:	6a 64                	push   $0x64
c0022a65:	e9 da fb ff ff       	jmp    c0022644 <intr_entry>

c0022a6a <intr65_stub>:
c0022a6a:	55                   	push   %ebp
c0022a6b:	6a 00                	push   $0x0
c0022a6d:	6a 65                	push   $0x65
c0022a6f:	e9 d0 fb ff ff       	jmp    c0022644 <intr_entry>

c0022a74 <intr66_stub>:
c0022a74:	55                   	push   %ebp
c0022a75:	6a 00                	push   $0x0
c0022a77:	6a 66                	push   $0x66
c0022a79:	e9 c6 fb ff ff       	jmp    c0022644 <intr_entry>

c0022a7e <intr67_stub>:
c0022a7e:	55                   	push   %ebp
c0022a7f:	6a 00                	push   $0x0
c0022a81:	6a 67                	push   $0x67
c0022a83:	e9 bc fb ff ff       	jmp    c0022644 <intr_entry>

c0022a88 <intr68_stub>:
STUB(68, zero) STUB(69, zero) STUB(6a, zero) STUB(6b, zero)
c0022a88:	55                   	push   %ebp
c0022a89:	6a 00                	push   $0x0
c0022a8b:	6a 68                	push   $0x68
c0022a8d:	e9 b2 fb ff ff       	jmp    c0022644 <intr_entry>

c0022a92 <intr69_stub>:
c0022a92:	55                   	push   %ebp
c0022a93:	6a 00                	push   $0x0
c0022a95:	6a 69                	push   $0x69
c0022a97:	e9 a8 fb ff ff       	jmp    c0022644 <intr_entry>

c0022a9c <intr6a_stub>:
c0022a9c:	55                   	push   %ebp
c0022a9d:	6a 00                	push   $0x0
c0022a9f:	6a 6a                	push   $0x6a
c0022aa1:	e9 9e fb ff ff       	jmp    c0022644 <intr_entry>

c0022aa6 <intr6b_stub>:
c0022aa6:	55                   	push   %ebp
c0022aa7:	6a 00                	push   $0x0
c0022aa9:	6a 6b                	push   $0x6b
c0022aab:	e9 94 fb ff ff       	jmp    c0022644 <intr_entry>

c0022ab0 <intr6c_stub>:
STUB(6c, zero) STUB(6d, zero) STUB(6e, zero) STUB(6f, zero)
c0022ab0:	55                   	push   %ebp
c0022ab1:	6a 00                	push   $0x0
c0022ab3:	6a 6c                	push   $0x6c
c0022ab5:	e9 8a fb ff ff       	jmp    c0022644 <intr_entry>

c0022aba <intr6d_stub>:
c0022aba:	55                   	push   %ebp
c0022abb:	6a 00                	push   $0x0
c0022abd:	6a 6d                	push   $0x6d
c0022abf:	e9 80 fb ff ff       	jmp    c0022644 <intr_entry>

c0022ac4 <intr6e_stub>:
c0022ac4:	55                   	push   %ebp
c0022ac5:	6a 00                	push   $0x0
c0022ac7:	6a 6e                	push   $0x6e
c0022ac9:	e9 76 fb ff ff       	jmp    c0022644 <intr_entry>

c0022ace <intr6f_stub>:
c0022ace:	55                   	push   %ebp
c0022acf:	6a 00                	push   $0x0
c0022ad1:	6a 6f                	push   $0x6f
c0022ad3:	e9 6c fb ff ff       	jmp    c0022644 <intr_entry>

c0022ad8 <intr70_stub>:

STUB(70, zero) STUB(71, zero) STUB(72, zero) STUB(73, zero)
c0022ad8:	55                   	push   %ebp
c0022ad9:	6a 00                	push   $0x0
c0022adb:	6a 70                	push   $0x70
c0022add:	e9 62 fb ff ff       	jmp    c0022644 <intr_entry>

c0022ae2 <intr71_stub>:
c0022ae2:	55                   	push   %ebp
c0022ae3:	6a 00                	push   $0x0
c0022ae5:	6a 71                	push   $0x71
c0022ae7:	e9 58 fb ff ff       	jmp    c0022644 <intr_entry>

c0022aec <intr72_stub>:
c0022aec:	55                   	push   %ebp
c0022aed:	6a 00                	push   $0x0
c0022aef:	6a 72                	push   $0x72
c0022af1:	e9 4e fb ff ff       	jmp    c0022644 <intr_entry>

c0022af6 <intr73_stub>:
c0022af6:	55                   	push   %ebp
c0022af7:	6a 00                	push   $0x0
c0022af9:	6a 73                	push   $0x73
c0022afb:	e9 44 fb ff ff       	jmp    c0022644 <intr_entry>

c0022b00 <intr74_stub>:
STUB(74, zero) STUB(75, zero) STUB(76, zero) STUB(77, zero)
c0022b00:	55                   	push   %ebp
c0022b01:	6a 00                	push   $0x0
c0022b03:	6a 74                	push   $0x74
c0022b05:	e9 3a fb ff ff       	jmp    c0022644 <intr_entry>

c0022b0a <intr75_stub>:
c0022b0a:	55                   	push   %ebp
c0022b0b:	6a 00                	push   $0x0
c0022b0d:	6a 75                	push   $0x75
c0022b0f:	e9 30 fb ff ff       	jmp    c0022644 <intr_entry>

c0022b14 <intr76_stub>:
c0022b14:	55                   	push   %ebp
c0022b15:	6a 00                	push   $0x0
c0022b17:	6a 76                	push   $0x76
c0022b19:	e9 26 fb ff ff       	jmp    c0022644 <intr_entry>

c0022b1e <intr77_stub>:
c0022b1e:	55                   	push   %ebp
c0022b1f:	6a 00                	push   $0x0
c0022b21:	6a 77                	push   $0x77
c0022b23:	e9 1c fb ff ff       	jmp    c0022644 <intr_entry>

c0022b28 <intr78_stub>:
STUB(78, zero) STUB(79, zero) STUB(7a, zero) STUB(7b, zero)
c0022b28:	55                   	push   %ebp
c0022b29:	6a 00                	push   $0x0
c0022b2b:	6a 78                	push   $0x78
c0022b2d:	e9 12 fb ff ff       	jmp    c0022644 <intr_entry>

c0022b32 <intr79_stub>:
c0022b32:	55                   	push   %ebp
c0022b33:	6a 00                	push   $0x0
c0022b35:	6a 79                	push   $0x79
c0022b37:	e9 08 fb ff ff       	jmp    c0022644 <intr_entry>

c0022b3c <intr7a_stub>:
c0022b3c:	55                   	push   %ebp
c0022b3d:	6a 00                	push   $0x0
c0022b3f:	6a 7a                	push   $0x7a
c0022b41:	e9 fe fa ff ff       	jmp    c0022644 <intr_entry>

c0022b46 <intr7b_stub>:
c0022b46:	55                   	push   %ebp
c0022b47:	6a 00                	push   $0x0
c0022b49:	6a 7b                	push   $0x7b
c0022b4b:	e9 f4 fa ff ff       	jmp    c0022644 <intr_entry>

c0022b50 <intr7c_stub>:
STUB(7c, zero) STUB(7d, zero) STUB(7e, zero) STUB(7f, zero)
c0022b50:	55                   	push   %ebp
c0022b51:	6a 00                	push   $0x0
c0022b53:	6a 7c                	push   $0x7c
c0022b55:	e9 ea fa ff ff       	jmp    c0022644 <intr_entry>

c0022b5a <intr7d_stub>:
c0022b5a:	55                   	push   %ebp
c0022b5b:	6a 00                	push   $0x0
c0022b5d:	6a 7d                	push   $0x7d
c0022b5f:	e9 e0 fa ff ff       	jmp    c0022644 <intr_entry>

c0022b64 <intr7e_stub>:
c0022b64:	55                   	push   %ebp
c0022b65:	6a 00                	push   $0x0
c0022b67:	6a 7e                	push   $0x7e
c0022b69:	e9 d6 fa ff ff       	jmp    c0022644 <intr_entry>

c0022b6e <intr7f_stub>:
c0022b6e:	55                   	push   %ebp
c0022b6f:	6a 00                	push   $0x0
c0022b71:	6a 7f                	push   $0x7f
c0022b73:	e9 cc fa ff ff       	jmp    c0022644 <intr_entry>

c0022b78 <intr80_stub>:

STUB(80, zero) STUB(81, zero) STUB(82, zero) STUB(83, zero)
c0022b78:	55                   	push   %ebp
c0022b79:	6a 00                	push   $0x0
c0022b7b:	68 80 00 00 00       	push   $0x80
c0022b80:	e9 bf fa ff ff       	jmp    c0022644 <intr_entry>

c0022b85 <intr81_stub>:
c0022b85:	55                   	push   %ebp
c0022b86:	6a 00                	push   $0x0
c0022b88:	68 81 00 00 00       	push   $0x81
c0022b8d:	e9 b2 fa ff ff       	jmp    c0022644 <intr_entry>

c0022b92 <intr82_stub>:
c0022b92:	55                   	push   %ebp
c0022b93:	6a 00                	push   $0x0
c0022b95:	68 82 00 00 00       	push   $0x82
c0022b9a:	e9 a5 fa ff ff       	jmp    c0022644 <intr_entry>

c0022b9f <intr83_stub>:
c0022b9f:	55                   	push   %ebp
c0022ba0:	6a 00                	push   $0x0
c0022ba2:	68 83 00 00 00       	push   $0x83
c0022ba7:	e9 98 fa ff ff       	jmp    c0022644 <intr_entry>

c0022bac <intr84_stub>:
STUB(84, zero) STUB(85, zero) STUB(86, zero) STUB(87, zero)
c0022bac:	55                   	push   %ebp
c0022bad:	6a 00                	push   $0x0
c0022baf:	68 84 00 00 00       	push   $0x84
c0022bb4:	e9 8b fa ff ff       	jmp    c0022644 <intr_entry>

c0022bb9 <intr85_stub>:
c0022bb9:	55                   	push   %ebp
c0022bba:	6a 00                	push   $0x0
c0022bbc:	68 85 00 00 00       	push   $0x85
c0022bc1:	e9 7e fa ff ff       	jmp    c0022644 <intr_entry>

c0022bc6 <intr86_stub>:
c0022bc6:	55                   	push   %ebp
c0022bc7:	6a 00                	push   $0x0
c0022bc9:	68 86 00 00 00       	push   $0x86
c0022bce:	e9 71 fa ff ff       	jmp    c0022644 <intr_entry>

c0022bd3 <intr87_stub>:
c0022bd3:	55                   	push   %ebp
c0022bd4:	6a 00                	push   $0x0
c0022bd6:	68 87 00 00 00       	push   $0x87
c0022bdb:	e9 64 fa ff ff       	jmp    c0022644 <intr_entry>

c0022be0 <intr88_stub>:
STUB(88, zero) STUB(89, zero) STUB(8a, zero) STUB(8b, zero)
c0022be0:	55                   	push   %ebp
c0022be1:	6a 00                	push   $0x0
c0022be3:	68 88 00 00 00       	push   $0x88
c0022be8:	e9 57 fa ff ff       	jmp    c0022644 <intr_entry>

c0022bed <intr89_stub>:
c0022bed:	55                   	push   %ebp
c0022bee:	6a 00                	push   $0x0
c0022bf0:	68 89 00 00 00       	push   $0x89
c0022bf5:	e9 4a fa ff ff       	jmp    c0022644 <intr_entry>

c0022bfa <intr8a_stub>:
c0022bfa:	55                   	push   %ebp
c0022bfb:	6a 00                	push   $0x0
c0022bfd:	68 8a 00 00 00       	push   $0x8a
c0022c02:	e9 3d fa ff ff       	jmp    c0022644 <intr_entry>

c0022c07 <intr8b_stub>:
c0022c07:	55                   	push   %ebp
c0022c08:	6a 00                	push   $0x0
c0022c0a:	68 8b 00 00 00       	push   $0x8b
c0022c0f:	e9 30 fa ff ff       	jmp    c0022644 <intr_entry>

c0022c14 <intr8c_stub>:
STUB(8c, zero) STUB(8d, zero) STUB(8e, zero) STUB(8f, zero)
c0022c14:	55                   	push   %ebp
c0022c15:	6a 00                	push   $0x0
c0022c17:	68 8c 00 00 00       	push   $0x8c
c0022c1c:	e9 23 fa ff ff       	jmp    c0022644 <intr_entry>

c0022c21 <intr8d_stub>:
c0022c21:	55                   	push   %ebp
c0022c22:	6a 00                	push   $0x0
c0022c24:	68 8d 00 00 00       	push   $0x8d
c0022c29:	e9 16 fa ff ff       	jmp    c0022644 <intr_entry>

c0022c2e <intr8e_stub>:
c0022c2e:	55                   	push   %ebp
c0022c2f:	6a 00                	push   $0x0
c0022c31:	68 8e 00 00 00       	push   $0x8e
c0022c36:	e9 09 fa ff ff       	jmp    c0022644 <intr_entry>

c0022c3b <intr8f_stub>:
c0022c3b:	55                   	push   %ebp
c0022c3c:	6a 00                	push   $0x0
c0022c3e:	68 8f 00 00 00       	push   $0x8f
c0022c43:	e9 fc f9 ff ff       	jmp    c0022644 <intr_entry>

c0022c48 <intr90_stub>:

STUB(90, zero) STUB(91, zero) STUB(92, zero) STUB(93, zero)
c0022c48:	55                   	push   %ebp
c0022c49:	6a 00                	push   $0x0
c0022c4b:	68 90 00 00 00       	push   $0x90
c0022c50:	e9 ef f9 ff ff       	jmp    c0022644 <intr_entry>

c0022c55 <intr91_stub>:
c0022c55:	55                   	push   %ebp
c0022c56:	6a 00                	push   $0x0
c0022c58:	68 91 00 00 00       	push   $0x91
c0022c5d:	e9 e2 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022c62 <intr92_stub>:
c0022c62:	55                   	push   %ebp
c0022c63:	6a 00                	push   $0x0
c0022c65:	68 92 00 00 00       	push   $0x92
c0022c6a:	e9 d5 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022c6f <intr93_stub>:
c0022c6f:	55                   	push   %ebp
c0022c70:	6a 00                	push   $0x0
c0022c72:	68 93 00 00 00       	push   $0x93
c0022c77:	e9 c8 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022c7c <intr94_stub>:
STUB(94, zero) STUB(95, zero) STUB(96, zero) STUB(97, zero)
c0022c7c:	55                   	push   %ebp
c0022c7d:	6a 00                	push   $0x0
c0022c7f:	68 94 00 00 00       	push   $0x94
c0022c84:	e9 bb f9 ff ff       	jmp    c0022644 <intr_entry>

c0022c89 <intr95_stub>:
c0022c89:	55                   	push   %ebp
c0022c8a:	6a 00                	push   $0x0
c0022c8c:	68 95 00 00 00       	push   $0x95
c0022c91:	e9 ae f9 ff ff       	jmp    c0022644 <intr_entry>

c0022c96 <intr96_stub>:
c0022c96:	55                   	push   %ebp
c0022c97:	6a 00                	push   $0x0
c0022c99:	68 96 00 00 00       	push   $0x96
c0022c9e:	e9 a1 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022ca3 <intr97_stub>:
c0022ca3:	55                   	push   %ebp
c0022ca4:	6a 00                	push   $0x0
c0022ca6:	68 97 00 00 00       	push   $0x97
c0022cab:	e9 94 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022cb0 <intr98_stub>:
STUB(98, zero) STUB(99, zero) STUB(9a, zero) STUB(9b, zero)
c0022cb0:	55                   	push   %ebp
c0022cb1:	6a 00                	push   $0x0
c0022cb3:	68 98 00 00 00       	push   $0x98
c0022cb8:	e9 87 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022cbd <intr99_stub>:
c0022cbd:	55                   	push   %ebp
c0022cbe:	6a 00                	push   $0x0
c0022cc0:	68 99 00 00 00       	push   $0x99
c0022cc5:	e9 7a f9 ff ff       	jmp    c0022644 <intr_entry>

c0022cca <intr9a_stub>:
c0022cca:	55                   	push   %ebp
c0022ccb:	6a 00                	push   $0x0
c0022ccd:	68 9a 00 00 00       	push   $0x9a
c0022cd2:	e9 6d f9 ff ff       	jmp    c0022644 <intr_entry>

c0022cd7 <intr9b_stub>:
c0022cd7:	55                   	push   %ebp
c0022cd8:	6a 00                	push   $0x0
c0022cda:	68 9b 00 00 00       	push   $0x9b
c0022cdf:	e9 60 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022ce4 <intr9c_stub>:
STUB(9c, zero) STUB(9d, zero) STUB(9e, zero) STUB(9f, zero)
c0022ce4:	55                   	push   %ebp
c0022ce5:	6a 00                	push   $0x0
c0022ce7:	68 9c 00 00 00       	push   $0x9c
c0022cec:	e9 53 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022cf1 <intr9d_stub>:
c0022cf1:	55                   	push   %ebp
c0022cf2:	6a 00                	push   $0x0
c0022cf4:	68 9d 00 00 00       	push   $0x9d
c0022cf9:	e9 46 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022cfe <intr9e_stub>:
c0022cfe:	55                   	push   %ebp
c0022cff:	6a 00                	push   $0x0
c0022d01:	68 9e 00 00 00       	push   $0x9e
c0022d06:	e9 39 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022d0b <intr9f_stub>:
c0022d0b:	55                   	push   %ebp
c0022d0c:	6a 00                	push   $0x0
c0022d0e:	68 9f 00 00 00       	push   $0x9f
c0022d13:	e9 2c f9 ff ff       	jmp    c0022644 <intr_entry>

c0022d18 <intra0_stub>:

STUB(a0, zero) STUB(a1, zero) STUB(a2, zero) STUB(a3, zero)
c0022d18:	55                   	push   %ebp
c0022d19:	6a 00                	push   $0x0
c0022d1b:	68 a0 00 00 00       	push   $0xa0
c0022d20:	e9 1f f9 ff ff       	jmp    c0022644 <intr_entry>

c0022d25 <intra1_stub>:
c0022d25:	55                   	push   %ebp
c0022d26:	6a 00                	push   $0x0
c0022d28:	68 a1 00 00 00       	push   $0xa1
c0022d2d:	e9 12 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022d32 <intra2_stub>:
c0022d32:	55                   	push   %ebp
c0022d33:	6a 00                	push   $0x0
c0022d35:	68 a2 00 00 00       	push   $0xa2
c0022d3a:	e9 05 f9 ff ff       	jmp    c0022644 <intr_entry>

c0022d3f <intra3_stub>:
c0022d3f:	55                   	push   %ebp
c0022d40:	6a 00                	push   $0x0
c0022d42:	68 a3 00 00 00       	push   $0xa3
c0022d47:	e9 f8 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022d4c <intra4_stub>:
STUB(a4, zero) STUB(a5, zero) STUB(a6, zero) STUB(a7, zero)
c0022d4c:	55                   	push   %ebp
c0022d4d:	6a 00                	push   $0x0
c0022d4f:	68 a4 00 00 00       	push   $0xa4
c0022d54:	e9 eb f8 ff ff       	jmp    c0022644 <intr_entry>

c0022d59 <intra5_stub>:
c0022d59:	55                   	push   %ebp
c0022d5a:	6a 00                	push   $0x0
c0022d5c:	68 a5 00 00 00       	push   $0xa5
c0022d61:	e9 de f8 ff ff       	jmp    c0022644 <intr_entry>

c0022d66 <intra6_stub>:
c0022d66:	55                   	push   %ebp
c0022d67:	6a 00                	push   $0x0
c0022d69:	68 a6 00 00 00       	push   $0xa6
c0022d6e:	e9 d1 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022d73 <intra7_stub>:
c0022d73:	55                   	push   %ebp
c0022d74:	6a 00                	push   $0x0
c0022d76:	68 a7 00 00 00       	push   $0xa7
c0022d7b:	e9 c4 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022d80 <intra8_stub>:
STUB(a8, zero) STUB(a9, zero) STUB(aa, zero) STUB(ab, zero)
c0022d80:	55                   	push   %ebp
c0022d81:	6a 00                	push   $0x0
c0022d83:	68 a8 00 00 00       	push   $0xa8
c0022d88:	e9 b7 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022d8d <intra9_stub>:
c0022d8d:	55                   	push   %ebp
c0022d8e:	6a 00                	push   $0x0
c0022d90:	68 a9 00 00 00       	push   $0xa9
c0022d95:	e9 aa f8 ff ff       	jmp    c0022644 <intr_entry>

c0022d9a <intraa_stub>:
c0022d9a:	55                   	push   %ebp
c0022d9b:	6a 00                	push   $0x0
c0022d9d:	68 aa 00 00 00       	push   $0xaa
c0022da2:	e9 9d f8 ff ff       	jmp    c0022644 <intr_entry>

c0022da7 <intrab_stub>:
c0022da7:	55                   	push   %ebp
c0022da8:	6a 00                	push   $0x0
c0022daa:	68 ab 00 00 00       	push   $0xab
c0022daf:	e9 90 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022db4 <intrac_stub>:
STUB(ac, zero) STUB(ad, zero) STUB(ae, zero) STUB(af, zero)
c0022db4:	55                   	push   %ebp
c0022db5:	6a 00                	push   $0x0
c0022db7:	68 ac 00 00 00       	push   $0xac
c0022dbc:	e9 83 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022dc1 <intrad_stub>:
c0022dc1:	55                   	push   %ebp
c0022dc2:	6a 00                	push   $0x0
c0022dc4:	68 ad 00 00 00       	push   $0xad
c0022dc9:	e9 76 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022dce <intrae_stub>:
c0022dce:	55                   	push   %ebp
c0022dcf:	6a 00                	push   $0x0
c0022dd1:	68 ae 00 00 00       	push   $0xae
c0022dd6:	e9 69 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022ddb <intraf_stub>:
c0022ddb:	55                   	push   %ebp
c0022ddc:	6a 00                	push   $0x0
c0022dde:	68 af 00 00 00       	push   $0xaf
c0022de3:	e9 5c f8 ff ff       	jmp    c0022644 <intr_entry>

c0022de8 <intrb0_stub>:

STUB(b0, zero) STUB(b1, zero) STUB(b2, zero) STUB(b3, zero)
c0022de8:	55                   	push   %ebp
c0022de9:	6a 00                	push   $0x0
c0022deb:	68 b0 00 00 00       	push   $0xb0
c0022df0:	e9 4f f8 ff ff       	jmp    c0022644 <intr_entry>

c0022df5 <intrb1_stub>:
c0022df5:	55                   	push   %ebp
c0022df6:	6a 00                	push   $0x0
c0022df8:	68 b1 00 00 00       	push   $0xb1
c0022dfd:	e9 42 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022e02 <intrb2_stub>:
c0022e02:	55                   	push   %ebp
c0022e03:	6a 00                	push   $0x0
c0022e05:	68 b2 00 00 00       	push   $0xb2
c0022e0a:	e9 35 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022e0f <intrb3_stub>:
c0022e0f:	55                   	push   %ebp
c0022e10:	6a 00                	push   $0x0
c0022e12:	68 b3 00 00 00       	push   $0xb3
c0022e17:	e9 28 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022e1c <intrb4_stub>:
STUB(b4, zero) STUB(b5, zero) STUB(b6, zero) STUB(b7, zero)
c0022e1c:	55                   	push   %ebp
c0022e1d:	6a 00                	push   $0x0
c0022e1f:	68 b4 00 00 00       	push   $0xb4
c0022e24:	e9 1b f8 ff ff       	jmp    c0022644 <intr_entry>

c0022e29 <intrb5_stub>:
c0022e29:	55                   	push   %ebp
c0022e2a:	6a 00                	push   $0x0
c0022e2c:	68 b5 00 00 00       	push   $0xb5
c0022e31:	e9 0e f8 ff ff       	jmp    c0022644 <intr_entry>

c0022e36 <intrb6_stub>:
c0022e36:	55                   	push   %ebp
c0022e37:	6a 00                	push   $0x0
c0022e39:	68 b6 00 00 00       	push   $0xb6
c0022e3e:	e9 01 f8 ff ff       	jmp    c0022644 <intr_entry>

c0022e43 <intrb7_stub>:
c0022e43:	55                   	push   %ebp
c0022e44:	6a 00                	push   $0x0
c0022e46:	68 b7 00 00 00       	push   $0xb7
c0022e4b:	e9 f4 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022e50 <intrb8_stub>:
STUB(b8, zero) STUB(b9, zero) STUB(ba, zero) STUB(bb, zero)
c0022e50:	55                   	push   %ebp
c0022e51:	6a 00                	push   $0x0
c0022e53:	68 b8 00 00 00       	push   $0xb8
c0022e58:	e9 e7 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022e5d <intrb9_stub>:
c0022e5d:	55                   	push   %ebp
c0022e5e:	6a 00                	push   $0x0
c0022e60:	68 b9 00 00 00       	push   $0xb9
c0022e65:	e9 da f7 ff ff       	jmp    c0022644 <intr_entry>

c0022e6a <intrba_stub>:
c0022e6a:	55                   	push   %ebp
c0022e6b:	6a 00                	push   $0x0
c0022e6d:	68 ba 00 00 00       	push   $0xba
c0022e72:	e9 cd f7 ff ff       	jmp    c0022644 <intr_entry>

c0022e77 <intrbb_stub>:
c0022e77:	55                   	push   %ebp
c0022e78:	6a 00                	push   $0x0
c0022e7a:	68 bb 00 00 00       	push   $0xbb
c0022e7f:	e9 c0 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022e84 <intrbc_stub>:
STUB(bc, zero) STUB(bd, zero) STUB(be, zero) STUB(bf, zero)
c0022e84:	55                   	push   %ebp
c0022e85:	6a 00                	push   $0x0
c0022e87:	68 bc 00 00 00       	push   $0xbc
c0022e8c:	e9 b3 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022e91 <intrbd_stub>:
c0022e91:	55                   	push   %ebp
c0022e92:	6a 00                	push   $0x0
c0022e94:	68 bd 00 00 00       	push   $0xbd
c0022e99:	e9 a6 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022e9e <intrbe_stub>:
c0022e9e:	55                   	push   %ebp
c0022e9f:	6a 00                	push   $0x0
c0022ea1:	68 be 00 00 00       	push   $0xbe
c0022ea6:	e9 99 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022eab <intrbf_stub>:
c0022eab:	55                   	push   %ebp
c0022eac:	6a 00                	push   $0x0
c0022eae:	68 bf 00 00 00       	push   $0xbf
c0022eb3:	e9 8c f7 ff ff       	jmp    c0022644 <intr_entry>

c0022eb8 <intrc0_stub>:

STUB(c0, zero) STUB(c1, zero) STUB(c2, zero) STUB(c3, zero)
c0022eb8:	55                   	push   %ebp
c0022eb9:	6a 00                	push   $0x0
c0022ebb:	68 c0 00 00 00       	push   $0xc0
c0022ec0:	e9 7f f7 ff ff       	jmp    c0022644 <intr_entry>

c0022ec5 <intrc1_stub>:
c0022ec5:	55                   	push   %ebp
c0022ec6:	6a 00                	push   $0x0
c0022ec8:	68 c1 00 00 00       	push   $0xc1
c0022ecd:	e9 72 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022ed2 <intrc2_stub>:
c0022ed2:	55                   	push   %ebp
c0022ed3:	6a 00                	push   $0x0
c0022ed5:	68 c2 00 00 00       	push   $0xc2
c0022eda:	e9 65 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022edf <intrc3_stub>:
c0022edf:	55                   	push   %ebp
c0022ee0:	6a 00                	push   $0x0
c0022ee2:	68 c3 00 00 00       	push   $0xc3
c0022ee7:	e9 58 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022eec <intrc4_stub>:
STUB(c4, zero) STUB(c5, zero) STUB(c6, zero) STUB(c7, zero)
c0022eec:	55                   	push   %ebp
c0022eed:	6a 00                	push   $0x0
c0022eef:	68 c4 00 00 00       	push   $0xc4
c0022ef4:	e9 4b f7 ff ff       	jmp    c0022644 <intr_entry>

c0022ef9 <intrc5_stub>:
c0022ef9:	55                   	push   %ebp
c0022efa:	6a 00                	push   $0x0
c0022efc:	68 c5 00 00 00       	push   $0xc5
c0022f01:	e9 3e f7 ff ff       	jmp    c0022644 <intr_entry>

c0022f06 <intrc6_stub>:
c0022f06:	55                   	push   %ebp
c0022f07:	6a 00                	push   $0x0
c0022f09:	68 c6 00 00 00       	push   $0xc6
c0022f0e:	e9 31 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022f13 <intrc7_stub>:
c0022f13:	55                   	push   %ebp
c0022f14:	6a 00                	push   $0x0
c0022f16:	68 c7 00 00 00       	push   $0xc7
c0022f1b:	e9 24 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022f20 <intrc8_stub>:
STUB(c8, zero) STUB(c9, zero) STUB(ca, zero) STUB(cb, zero)
c0022f20:	55                   	push   %ebp
c0022f21:	6a 00                	push   $0x0
c0022f23:	68 c8 00 00 00       	push   $0xc8
c0022f28:	e9 17 f7 ff ff       	jmp    c0022644 <intr_entry>

c0022f2d <intrc9_stub>:
c0022f2d:	55                   	push   %ebp
c0022f2e:	6a 00                	push   $0x0
c0022f30:	68 c9 00 00 00       	push   $0xc9
c0022f35:	e9 0a f7 ff ff       	jmp    c0022644 <intr_entry>

c0022f3a <intrca_stub>:
c0022f3a:	55                   	push   %ebp
c0022f3b:	6a 00                	push   $0x0
c0022f3d:	68 ca 00 00 00       	push   $0xca
c0022f42:	e9 fd f6 ff ff       	jmp    c0022644 <intr_entry>

c0022f47 <intrcb_stub>:
c0022f47:	55                   	push   %ebp
c0022f48:	6a 00                	push   $0x0
c0022f4a:	68 cb 00 00 00       	push   $0xcb
c0022f4f:	e9 f0 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022f54 <intrcc_stub>:
STUB(cc, zero) STUB(cd, zero) STUB(ce, zero) STUB(cf, zero)
c0022f54:	55                   	push   %ebp
c0022f55:	6a 00                	push   $0x0
c0022f57:	68 cc 00 00 00       	push   $0xcc
c0022f5c:	e9 e3 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022f61 <intrcd_stub>:
c0022f61:	55                   	push   %ebp
c0022f62:	6a 00                	push   $0x0
c0022f64:	68 cd 00 00 00       	push   $0xcd
c0022f69:	e9 d6 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022f6e <intrce_stub>:
c0022f6e:	55                   	push   %ebp
c0022f6f:	6a 00                	push   $0x0
c0022f71:	68 ce 00 00 00       	push   $0xce
c0022f76:	e9 c9 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022f7b <intrcf_stub>:
c0022f7b:	55                   	push   %ebp
c0022f7c:	6a 00                	push   $0x0
c0022f7e:	68 cf 00 00 00       	push   $0xcf
c0022f83:	e9 bc f6 ff ff       	jmp    c0022644 <intr_entry>

c0022f88 <intrd0_stub>:

STUB(d0, zero) STUB(d1, zero) STUB(d2, zero) STUB(d3, zero)
c0022f88:	55                   	push   %ebp
c0022f89:	6a 00                	push   $0x0
c0022f8b:	68 d0 00 00 00       	push   $0xd0
c0022f90:	e9 af f6 ff ff       	jmp    c0022644 <intr_entry>

c0022f95 <intrd1_stub>:
c0022f95:	55                   	push   %ebp
c0022f96:	6a 00                	push   $0x0
c0022f98:	68 d1 00 00 00       	push   $0xd1
c0022f9d:	e9 a2 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022fa2 <intrd2_stub>:
c0022fa2:	55                   	push   %ebp
c0022fa3:	6a 00                	push   $0x0
c0022fa5:	68 d2 00 00 00       	push   $0xd2
c0022faa:	e9 95 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022faf <intrd3_stub>:
c0022faf:	55                   	push   %ebp
c0022fb0:	6a 00                	push   $0x0
c0022fb2:	68 d3 00 00 00       	push   $0xd3
c0022fb7:	e9 88 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022fbc <intrd4_stub>:
STUB(d4, zero) STUB(d5, zero) STUB(d6, zero) STUB(d7, zero)
c0022fbc:	55                   	push   %ebp
c0022fbd:	6a 00                	push   $0x0
c0022fbf:	68 d4 00 00 00       	push   $0xd4
c0022fc4:	e9 7b f6 ff ff       	jmp    c0022644 <intr_entry>

c0022fc9 <intrd5_stub>:
c0022fc9:	55                   	push   %ebp
c0022fca:	6a 00                	push   $0x0
c0022fcc:	68 d5 00 00 00       	push   $0xd5
c0022fd1:	e9 6e f6 ff ff       	jmp    c0022644 <intr_entry>

c0022fd6 <intrd6_stub>:
c0022fd6:	55                   	push   %ebp
c0022fd7:	6a 00                	push   $0x0
c0022fd9:	68 d6 00 00 00       	push   $0xd6
c0022fde:	e9 61 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022fe3 <intrd7_stub>:
c0022fe3:	55                   	push   %ebp
c0022fe4:	6a 00                	push   $0x0
c0022fe6:	68 d7 00 00 00       	push   $0xd7
c0022feb:	e9 54 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022ff0 <intrd8_stub>:
STUB(d8, zero) STUB(d9, zero) STUB(da, zero) STUB(db, zero)
c0022ff0:	55                   	push   %ebp
c0022ff1:	6a 00                	push   $0x0
c0022ff3:	68 d8 00 00 00       	push   $0xd8
c0022ff8:	e9 47 f6 ff ff       	jmp    c0022644 <intr_entry>

c0022ffd <intrd9_stub>:
c0022ffd:	55                   	push   %ebp
c0022ffe:	6a 00                	push   $0x0
c0023000:	68 d9 00 00 00       	push   $0xd9
c0023005:	e9 3a f6 ff ff       	jmp    c0022644 <intr_entry>

c002300a <intrda_stub>:
c002300a:	55                   	push   %ebp
c002300b:	6a 00                	push   $0x0
c002300d:	68 da 00 00 00       	push   $0xda
c0023012:	e9 2d f6 ff ff       	jmp    c0022644 <intr_entry>

c0023017 <intrdb_stub>:
c0023017:	55                   	push   %ebp
c0023018:	6a 00                	push   $0x0
c002301a:	68 db 00 00 00       	push   $0xdb
c002301f:	e9 20 f6 ff ff       	jmp    c0022644 <intr_entry>

c0023024 <intrdc_stub>:
STUB(dc, zero) STUB(dd, zero) STUB(de, zero) STUB(df, zero)
c0023024:	55                   	push   %ebp
c0023025:	6a 00                	push   $0x0
c0023027:	68 dc 00 00 00       	push   $0xdc
c002302c:	e9 13 f6 ff ff       	jmp    c0022644 <intr_entry>

c0023031 <intrdd_stub>:
c0023031:	55                   	push   %ebp
c0023032:	6a 00                	push   $0x0
c0023034:	68 dd 00 00 00       	push   $0xdd
c0023039:	e9 06 f6 ff ff       	jmp    c0022644 <intr_entry>

c002303e <intrde_stub>:
c002303e:	55                   	push   %ebp
c002303f:	6a 00                	push   $0x0
c0023041:	68 de 00 00 00       	push   $0xde
c0023046:	e9 f9 f5 ff ff       	jmp    c0022644 <intr_entry>

c002304b <intrdf_stub>:
c002304b:	55                   	push   %ebp
c002304c:	6a 00                	push   $0x0
c002304e:	68 df 00 00 00       	push   $0xdf
c0023053:	e9 ec f5 ff ff       	jmp    c0022644 <intr_entry>

c0023058 <intre0_stub>:

STUB(e0, zero) STUB(e1, zero) STUB(e2, zero) STUB(e3, zero)
c0023058:	55                   	push   %ebp
c0023059:	6a 00                	push   $0x0
c002305b:	68 e0 00 00 00       	push   $0xe0
c0023060:	e9 df f5 ff ff       	jmp    c0022644 <intr_entry>

c0023065 <intre1_stub>:
c0023065:	55                   	push   %ebp
c0023066:	6a 00                	push   $0x0
c0023068:	68 e1 00 00 00       	push   $0xe1
c002306d:	e9 d2 f5 ff ff       	jmp    c0022644 <intr_entry>

c0023072 <intre2_stub>:
c0023072:	55                   	push   %ebp
c0023073:	6a 00                	push   $0x0
c0023075:	68 e2 00 00 00       	push   $0xe2
c002307a:	e9 c5 f5 ff ff       	jmp    c0022644 <intr_entry>

c002307f <intre3_stub>:
c002307f:	55                   	push   %ebp
c0023080:	6a 00                	push   $0x0
c0023082:	68 e3 00 00 00       	push   $0xe3
c0023087:	e9 b8 f5 ff ff       	jmp    c0022644 <intr_entry>

c002308c <intre4_stub>:
STUB(e4, zero) STUB(e5, zero) STUB(e6, zero) STUB(e7, zero)
c002308c:	55                   	push   %ebp
c002308d:	6a 00                	push   $0x0
c002308f:	68 e4 00 00 00       	push   $0xe4
c0023094:	e9 ab f5 ff ff       	jmp    c0022644 <intr_entry>

c0023099 <intre5_stub>:
c0023099:	55                   	push   %ebp
c002309a:	6a 00                	push   $0x0
c002309c:	68 e5 00 00 00       	push   $0xe5
c00230a1:	e9 9e f5 ff ff       	jmp    c0022644 <intr_entry>

c00230a6 <intre6_stub>:
c00230a6:	55                   	push   %ebp
c00230a7:	6a 00                	push   $0x0
c00230a9:	68 e6 00 00 00       	push   $0xe6
c00230ae:	e9 91 f5 ff ff       	jmp    c0022644 <intr_entry>

c00230b3 <intre7_stub>:
c00230b3:	55                   	push   %ebp
c00230b4:	6a 00                	push   $0x0
c00230b6:	68 e7 00 00 00       	push   $0xe7
c00230bb:	e9 84 f5 ff ff       	jmp    c0022644 <intr_entry>

c00230c0 <intre8_stub>:
STUB(e8, zero) STUB(e9, zero) STUB(ea, zero) STUB(eb, zero)
c00230c0:	55                   	push   %ebp
c00230c1:	6a 00                	push   $0x0
c00230c3:	68 e8 00 00 00       	push   $0xe8
c00230c8:	e9 77 f5 ff ff       	jmp    c0022644 <intr_entry>

c00230cd <intre9_stub>:
c00230cd:	55                   	push   %ebp
c00230ce:	6a 00                	push   $0x0
c00230d0:	68 e9 00 00 00       	push   $0xe9
c00230d5:	e9 6a f5 ff ff       	jmp    c0022644 <intr_entry>

c00230da <intrea_stub>:
c00230da:	55                   	push   %ebp
c00230db:	6a 00                	push   $0x0
c00230dd:	68 ea 00 00 00       	push   $0xea
c00230e2:	e9 5d f5 ff ff       	jmp    c0022644 <intr_entry>

c00230e7 <intreb_stub>:
c00230e7:	55                   	push   %ebp
c00230e8:	6a 00                	push   $0x0
c00230ea:	68 eb 00 00 00       	push   $0xeb
c00230ef:	e9 50 f5 ff ff       	jmp    c0022644 <intr_entry>

c00230f4 <intrec_stub>:
STUB(ec, zero) STUB(ed, zero) STUB(ee, zero) STUB(ef, zero)
c00230f4:	55                   	push   %ebp
c00230f5:	6a 00                	push   $0x0
c00230f7:	68 ec 00 00 00       	push   $0xec
c00230fc:	e9 43 f5 ff ff       	jmp    c0022644 <intr_entry>

c0023101 <intred_stub>:
c0023101:	55                   	push   %ebp
c0023102:	6a 00                	push   $0x0
c0023104:	68 ed 00 00 00       	push   $0xed
c0023109:	e9 36 f5 ff ff       	jmp    c0022644 <intr_entry>

c002310e <intree_stub>:
c002310e:	55                   	push   %ebp
c002310f:	6a 00                	push   $0x0
c0023111:	68 ee 00 00 00       	push   $0xee
c0023116:	e9 29 f5 ff ff       	jmp    c0022644 <intr_entry>

c002311b <intref_stub>:
c002311b:	55                   	push   %ebp
c002311c:	6a 00                	push   $0x0
c002311e:	68 ef 00 00 00       	push   $0xef
c0023123:	e9 1c f5 ff ff       	jmp    c0022644 <intr_entry>

c0023128 <intrf0_stub>:

STUB(f0, zero) STUB(f1, zero) STUB(f2, zero) STUB(f3, zero)
c0023128:	55                   	push   %ebp
c0023129:	6a 00                	push   $0x0
c002312b:	68 f0 00 00 00       	push   $0xf0
c0023130:	e9 0f f5 ff ff       	jmp    c0022644 <intr_entry>

c0023135 <intrf1_stub>:
c0023135:	55                   	push   %ebp
c0023136:	6a 00                	push   $0x0
c0023138:	68 f1 00 00 00       	push   $0xf1
c002313d:	e9 02 f5 ff ff       	jmp    c0022644 <intr_entry>

c0023142 <intrf2_stub>:
c0023142:	55                   	push   %ebp
c0023143:	6a 00                	push   $0x0
c0023145:	68 f2 00 00 00       	push   $0xf2
c002314a:	e9 f5 f4 ff ff       	jmp    c0022644 <intr_entry>

c002314f <intrf3_stub>:
c002314f:	55                   	push   %ebp
c0023150:	6a 00                	push   $0x0
c0023152:	68 f3 00 00 00       	push   $0xf3
c0023157:	e9 e8 f4 ff ff       	jmp    c0022644 <intr_entry>

c002315c <intrf4_stub>:
STUB(f4, zero) STUB(f5, zero) STUB(f6, zero) STUB(f7, zero)
c002315c:	55                   	push   %ebp
c002315d:	6a 00                	push   $0x0
c002315f:	68 f4 00 00 00       	push   $0xf4
c0023164:	e9 db f4 ff ff       	jmp    c0022644 <intr_entry>

c0023169 <intrf5_stub>:
c0023169:	55                   	push   %ebp
c002316a:	6a 00                	push   $0x0
c002316c:	68 f5 00 00 00       	push   $0xf5
c0023171:	e9 ce f4 ff ff       	jmp    c0022644 <intr_entry>

c0023176 <intrf6_stub>:
c0023176:	55                   	push   %ebp
c0023177:	6a 00                	push   $0x0
c0023179:	68 f6 00 00 00       	push   $0xf6
c002317e:	e9 c1 f4 ff ff       	jmp    c0022644 <intr_entry>

c0023183 <intrf7_stub>:
c0023183:	55                   	push   %ebp
c0023184:	6a 00                	push   $0x0
c0023186:	68 f7 00 00 00       	push   $0xf7
c002318b:	e9 b4 f4 ff ff       	jmp    c0022644 <intr_entry>

c0023190 <intrf8_stub>:
STUB(f8, zero) STUB(f9, zero) STUB(fa, zero) STUB(fb, zero)
c0023190:	55                   	push   %ebp
c0023191:	6a 00                	push   $0x0
c0023193:	68 f8 00 00 00       	push   $0xf8
c0023198:	e9 a7 f4 ff ff       	jmp    c0022644 <intr_entry>

c002319d <intrf9_stub>:
c002319d:	55                   	push   %ebp
c002319e:	6a 00                	push   $0x0
c00231a0:	68 f9 00 00 00       	push   $0xf9
c00231a5:	e9 9a f4 ff ff       	jmp    c0022644 <intr_entry>

c00231aa <intrfa_stub>:
c00231aa:	55                   	push   %ebp
c00231ab:	6a 00                	push   $0x0
c00231ad:	68 fa 00 00 00       	push   $0xfa
c00231b2:	e9 8d f4 ff ff       	jmp    c0022644 <intr_entry>

c00231b7 <intrfb_stub>:
c00231b7:	55                   	push   %ebp
c00231b8:	6a 00                	push   $0x0
c00231ba:	68 fb 00 00 00       	push   $0xfb
c00231bf:	e9 80 f4 ff ff       	jmp    c0022644 <intr_entry>

c00231c4 <intrfc_stub>:
STUB(fc, zero) STUB(fd, zero) STUB(fe, zero) STUB(ff, zero)
c00231c4:	55                   	push   %ebp
c00231c5:	6a 00                	push   $0x0
c00231c7:	68 fc 00 00 00       	push   $0xfc
c00231cc:	e9 73 f4 ff ff       	jmp    c0022644 <intr_entry>

c00231d1 <intrfd_stub>:
c00231d1:	55                   	push   %ebp
c00231d2:	6a 00                	push   $0x0
c00231d4:	68 fd 00 00 00       	push   $0xfd
c00231d9:	e9 66 f4 ff ff       	jmp    c0022644 <intr_entry>

c00231de <intrfe_stub>:
c00231de:	55                   	push   %ebp
c00231df:	6a 00                	push   $0x0
c00231e1:	68 fe 00 00 00       	push   $0xfe
c00231e6:	e9 59 f4 ff ff       	jmp    c0022644 <intr_entry>

c00231eb <intrff_stub>:
c00231eb:	55                   	push   %ebp
c00231ec:	6a 00                	push   $0x0
c00231ee:	68 ff 00 00 00       	push   $0xff
c00231f3:	e9 4c f4 ff ff       	jmp    c0022644 <intr_entry>

c00231f8 <sema_init>:
c00231f8:	55                   	push   %ebp
c00231f9:	89 e5                	mov    %esp,%ebp
c00231fb:	83 ec 08             	sub    $0x8,%esp
c00231fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023202:	75 1e                	jne    c0023222 <sema_init+0x2a>
c0023204:	83 ec 0c             	sub    $0xc,%esp
c0023207:	68 84 4b 03 c0       	push   $0xc0034b84
c002320c:	68 91 4b 03 c0       	push   $0xc0034b91
c0023211:	68 58 4c 03 c0       	push   $0xc0034c58
c0023216:	6a 2f                	push   $0x2f
c0023218:	68 a8 4b 03 c0       	push   $0xc0034ba8
c002321d:	e8 6f 73 00 00       	call   c002a591 <debug_panic>
c0023222:	8b 45 08             	mov    0x8(%ebp),%eax
c0023225:	8b 55 0c             	mov    0xc(%ebp),%edx
c0023228:	89 10                	mov    %edx,(%eax)
c002322a:	8b 45 08             	mov    0x8(%ebp),%eax
c002322d:	83 c0 04             	add    $0x4,%eax
c0023230:	83 ec 0c             	sub    $0xc,%esp
c0023233:	50                   	push   %eax
c0023234:	e8 cb 75 00 00       	call   c002a804 <list_init>
c0023239:	83 c4 10             	add    $0x10,%esp
c002323c:	90                   	nop
c002323d:	c9                   	leave  
c002323e:	c3                   	ret    

c002323f <sema_down>:
c002323f:	55                   	push   %ebp
c0023240:	89 e5                	mov    %esp,%ebp
c0023242:	83 ec 18             	sub    $0x18,%esp
c0023245:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023249:	75 1e                	jne    c0023269 <sema_down+0x2a>
c002324b:	83 ec 0c             	sub    $0xc,%esp
c002324e:	68 84 4b 03 c0       	push   $0xc0034b84
c0023253:	68 91 4b 03 c0       	push   $0xc0034b91
c0023258:	68 64 4c 03 c0       	push   $0xc0034c64
c002325d:	6a 41                	push   $0x41
c002325f:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023264:	e8 28 73 00 00       	call   c002a591 <debug_panic>
c0023269:	e8 4d ee ff ff       	call   c00220bb <intr_context>
c002326e:	83 f0 01             	xor    $0x1,%eax
c0023271:	84 c0                	test   %al,%al
c0023273:	75 1e                	jne    c0023293 <sema_down+0x54>
c0023275:	83 ec 0c             	sub    $0xc,%esp
c0023278:	68 be 4b 03 c0       	push   $0xc0034bbe
c002327d:	68 91 4b 03 c0       	push   $0xc0034b91
c0023282:	68 64 4c 03 c0       	push   $0xc0034c64
c0023287:	6a 42                	push   $0x42
c0023289:	68 a8 4b 03 c0       	push   $0xc0034ba8
c002328e:	e8 fe 72 00 00       	call   c002a591 <debug_panic>
c0023293:	e8 54 eb ff ff       	call   c0021dec <intr_disable>
c0023298:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002329b:	eb 24                	jmp    c00232c1 <sema_down+0x82>
c002329d:	e8 47 dc ff ff       	call   c0020ee9 <thread_current>
c00232a2:	8d 50 28             	lea    0x28(%eax),%edx
c00232a5:	8b 45 08             	mov    0x8(%ebp),%eax
c00232a8:	83 c0 04             	add    $0x4,%eax
c00232ab:	6a 00                	push   $0x0
c00232ad:	68 64 17 02 c0       	push   $0xc0021764
c00232b2:	52                   	push   %edx
c00232b3:	50                   	push   %eax
c00232b4:	e8 f3 7f 00 00       	call   c002b2ac <list_insert_ordered>
c00232b9:	83 c4 10             	add    $0x10,%esp
c00232bc:	e8 04 db ff ff       	call   c0020dc5 <thread_block>
c00232c1:	8b 45 08             	mov    0x8(%ebp),%eax
c00232c4:	8b 00                	mov    (%eax),%eax
c00232c6:	85 c0                	test   %eax,%eax
c00232c8:	74 d3                	je     c002329d <sema_down+0x5e>
c00232ca:	8b 45 08             	mov    0x8(%ebp),%eax
c00232cd:	8b 00                	mov    (%eax),%eax
c00232cf:	8d 50 ff             	lea    -0x1(%eax),%edx
c00232d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00232d5:	89 10                	mov    %edx,(%eax)
c00232d7:	83 ec 0c             	sub    $0xc,%esp
c00232da:	ff 75 f4             	pushl  -0xc(%ebp)
c00232dd:	e8 b2 ea ff ff       	call   c0021d94 <intr_set_level>
c00232e2:	83 c4 10             	add    $0x10,%esp
c00232e5:	90                   	nop
c00232e6:	c9                   	leave  
c00232e7:	c3                   	ret    

c00232e8 <sema_try_down>:
c00232e8:	55                   	push   %ebp
c00232e9:	89 e5                	mov    %esp,%ebp
c00232eb:	83 ec 18             	sub    $0x18,%esp
c00232ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00232f2:	75 1e                	jne    c0023312 <sema_try_down+0x2a>
c00232f4:	83 ec 0c             	sub    $0xc,%esp
c00232f7:	68 84 4b 03 c0       	push   $0xc0034b84
c00232fc:	68 91 4b 03 c0       	push   $0xc0034b91
c0023301:	68 70 4c 03 c0       	push   $0xc0034c70
c0023306:	6a 5a                	push   $0x5a
c0023308:	68 a8 4b 03 c0       	push   $0xc0034ba8
c002330d:	e8 7f 72 00 00       	call   c002a591 <debug_panic>
c0023312:	e8 d5 ea ff ff       	call   c0021dec <intr_disable>
c0023317:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002331a:	8b 45 08             	mov    0x8(%ebp),%eax
c002331d:	8b 00                	mov    (%eax),%eax
c002331f:	85 c0                	test   %eax,%eax
c0023321:	74 13                	je     c0023336 <sema_try_down+0x4e>
c0023323:	8b 45 08             	mov    0x8(%ebp),%eax
c0023326:	8b 00                	mov    (%eax),%eax
c0023328:	8d 50 ff             	lea    -0x1(%eax),%edx
c002332b:	8b 45 08             	mov    0x8(%ebp),%eax
c002332e:	89 10                	mov    %edx,(%eax)
c0023330:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c0023334:	eb 04                	jmp    c002333a <sema_try_down+0x52>
c0023336:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c002333a:	83 ec 0c             	sub    $0xc,%esp
c002333d:	ff 75 f0             	pushl  -0x10(%ebp)
c0023340:	e8 4f ea ff ff       	call   c0021d94 <intr_set_level>
c0023345:	83 c4 10             	add    $0x10,%esp
c0023348:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c002334c:	c9                   	leave  
c002334d:	c3                   	ret    

c002334e <sema_up>:
c002334e:	55                   	push   %ebp
c002334f:	89 e5                	mov    %esp,%ebp
c0023351:	83 ec 18             	sub    $0x18,%esp
c0023354:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023358:	75 1e                	jne    c0023378 <sema_up+0x2a>
c002335a:	83 ec 0c             	sub    $0xc,%esp
c002335d:	68 84 4b 03 c0       	push   $0xc0034b84
c0023362:	68 91 4b 03 c0       	push   $0xc0034b91
c0023367:	68 80 4c 03 c0       	push   $0xc0034c80
c002336c:	6a 72                	push   $0x72
c002336e:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023373:	e8 19 72 00 00       	call   c002a591 <debug_panic>
c0023378:	e8 6f ea ff ff       	call   c0021dec <intr_disable>
c002337d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023380:	8b 45 08             	mov    0x8(%ebp),%eax
c0023383:	83 c0 04             	add    $0x4,%eax
c0023386:	83 ec 0c             	sub    $0xc,%esp
c0023389:	50                   	push   %eax
c002338a:	e8 fd 79 00 00       	call   c002ad8c <list_empty>
c002338f:	83 c4 10             	add    $0x10,%esp
c0023392:	83 f0 01             	xor    $0x1,%eax
c0023395:	84 c0                	test   %al,%al
c0023397:	74 3d                	je     c00233d6 <sema_up+0x88>
c0023399:	8b 45 08             	mov    0x8(%ebp),%eax
c002339c:	83 c0 04             	add    $0x4,%eax
c002339f:	83 ec 04             	sub    $0x4,%esp
c00233a2:	6a 00                	push   $0x0
c00233a4:	68 64 17 02 c0       	push   $0xc0021764
c00233a9:	50                   	push   %eax
c00233aa:	e8 94 7d 00 00       	call   c002b143 <list_sort>
c00233af:	83 c4 10             	add    $0x10,%esp
c00233b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00233b5:	83 c0 04             	add    $0x4,%eax
c00233b8:	83 ec 0c             	sub    $0xc,%esp
c00233bb:	50                   	push   %eax
c00233bc:	e8 a2 78 00 00       	call   c002ac63 <list_pop_front>
c00233c1:	83 c4 10             	add    $0x10,%esp
c00233c4:	83 c0 04             	add    $0x4,%eax
c00233c7:	83 e8 2c             	sub    $0x2c,%eax
c00233ca:	83 ec 0c             	sub    $0xc,%esp
c00233cd:	50                   	push   %eax
c00233ce:	e8 63 da ff ff       	call   c0020e36 <thread_unblock>
c00233d3:	83 c4 10             	add    $0x10,%esp
c00233d6:	8b 45 08             	mov    0x8(%ebp),%eax
c00233d9:	8b 00                	mov    (%eax),%eax
c00233db:	8d 50 01             	lea    0x1(%eax),%edx
c00233de:	8b 45 08             	mov    0x8(%ebp),%eax
c00233e1:	89 10                	mov    %edx,(%eax)
c00233e3:	e8 d3 ec ff ff       	call   c00220bb <intr_context>
c00233e8:	83 f0 01             	xor    $0x1,%eax
c00233eb:	84 c0                	test   %al,%al
c00233ed:	74 05                	je     c00233f4 <sema_up+0xa6>
c00233ef:	e8 f0 db ff ff       	call   c0020fe4 <thread_yield>
c00233f4:	83 ec 0c             	sub    $0xc,%esp
c00233f7:	ff 75 f4             	pushl  -0xc(%ebp)
c00233fa:	e8 95 e9 ff ff       	call   c0021d94 <intr_set_level>
c00233ff:	83 c4 10             	add    $0x10,%esp
c0023402:	90                   	nop
c0023403:	c9                   	leave  
c0023404:	c3                   	ret    

c0023405 <sema_self_test>:
c0023405:	55                   	push   %ebp
c0023406:	89 e5                	mov    %esp,%ebp
c0023408:	83 ec 38             	sub    $0x38,%esp
c002340b:	83 ec 0c             	sub    $0xc,%esp
c002340e:	68 cf 4b 03 c0       	push   $0xc0034bcf
c0023413:	e8 18 4c 00 00       	call   c0028030 <printf>
c0023418:	83 c4 10             	add    $0x10,%esp
c002341b:	83 ec 08             	sub    $0x8,%esp
c002341e:	6a 00                	push   $0x0
c0023420:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0023423:	50                   	push   %eax
c0023424:	e8 cf fd ff ff       	call   c00231f8 <sema_init>
c0023429:	83 c4 10             	add    $0x10,%esp
c002342c:	83 ec 08             	sub    $0x8,%esp
c002342f:	6a 00                	push   $0x0
c0023431:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0023434:	83 c0 14             	add    $0x14,%eax
c0023437:	50                   	push   %eax
c0023438:	e8 bb fd ff ff       	call   c00231f8 <sema_init>
c002343d:	83 c4 10             	add    $0x10,%esp
c0023440:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0023443:	50                   	push   %eax
c0023444:	68 9f 34 02 c0       	push   $0xc002349f
c0023449:	6a 1f                	push   $0x1f
c002344b:	68 e5 4b 03 c0       	push   $0xc0034be5
c0023450:	e8 65 d8 ff ff       	call   c0020cba <thread_create>
c0023455:	83 c4 10             	add    $0x10,%esp
c0023458:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002345f:	eb 25                	jmp    c0023486 <sema_self_test+0x81>
c0023461:	83 ec 0c             	sub    $0xc,%esp
c0023464:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0023467:	50                   	push   %eax
c0023468:	e8 e1 fe ff ff       	call   c002334e <sema_up>
c002346d:	83 c4 10             	add    $0x10,%esp
c0023470:	83 ec 0c             	sub    $0xc,%esp
c0023473:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0023476:	83 c0 14             	add    $0x14,%eax
c0023479:	50                   	push   %eax
c002347a:	e8 c0 fd ff ff       	call   c002323f <sema_down>
c002347f:	83 c4 10             	add    $0x10,%esp
c0023482:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0023486:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c002348a:	7e d5                	jle    c0023461 <sema_self_test+0x5c>
c002348c:	83 ec 0c             	sub    $0xc,%esp
c002348f:	68 ef 4b 03 c0       	push   $0xc0034bef
c0023494:	e8 bf 93 00 00       	call   c002c858 <puts>
c0023499:	83 c4 10             	add    $0x10,%esp
c002349c:	90                   	nop
c002349d:	c9                   	leave  
c002349e:	c3                   	ret    

c002349f <sema_test_helper>:
c002349f:	55                   	push   %ebp
c00234a0:	89 e5                	mov    %esp,%ebp
c00234a2:	83 ec 18             	sub    $0x18,%esp
c00234a5:	8b 45 08             	mov    0x8(%ebp),%eax
c00234a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00234ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00234b2:	eb 24                	jmp    c00234d8 <sema_test_helper+0x39>
c00234b4:	83 ec 0c             	sub    $0xc,%esp
c00234b7:	ff 75 f0             	pushl  -0x10(%ebp)
c00234ba:	e8 80 fd ff ff       	call   c002323f <sema_down>
c00234bf:	83 c4 10             	add    $0x10,%esp
c00234c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00234c5:	83 c0 14             	add    $0x14,%eax
c00234c8:	83 ec 0c             	sub    $0xc,%esp
c00234cb:	50                   	push   %eax
c00234cc:	e8 7d fe ff ff       	call   c002334e <sema_up>
c00234d1:	83 c4 10             	add    $0x10,%esp
c00234d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00234d8:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c00234dc:	7e d6                	jle    c00234b4 <sema_test_helper+0x15>
c00234de:	90                   	nop
c00234df:	c9                   	leave  
c00234e0:	c3                   	ret    

c00234e1 <lock_init>:
c00234e1:	55                   	push   %ebp
c00234e2:	89 e5                	mov    %esp,%ebp
c00234e4:	83 ec 08             	sub    $0x8,%esp
c00234e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00234eb:	75 21                	jne    c002350e <lock_init+0x2d>
c00234ed:	83 ec 0c             	sub    $0xc,%esp
c00234f0:	68 f5 4b 03 c0       	push   $0xc0034bf5
c00234f5:	68 91 4b 03 c0       	push   $0xc0034b91
c00234fa:	68 88 4c 03 c0       	push   $0xc0034c88
c00234ff:	68 b8 00 00 00       	push   $0xb8
c0023504:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023509:	e8 83 70 00 00       	call   c002a591 <debug_panic>
c002350e:	8b 45 08             	mov    0x8(%ebp),%eax
c0023511:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0023517:	8b 45 08             	mov    0x8(%ebp),%eax
c002351a:	83 c0 04             	add    $0x4,%eax
c002351d:	83 ec 08             	sub    $0x8,%esp
c0023520:	6a 01                	push   $0x1
c0023522:	50                   	push   %eax
c0023523:	e8 d0 fc ff ff       	call   c00231f8 <sema_init>
c0023528:	83 c4 10             	add    $0x10,%esp
c002352b:	90                   	nop
c002352c:	c9                   	leave  
c002352d:	c3                   	ret    

c002352e <lock_acquire>:
c002352e:	55                   	push   %ebp
c002352f:	89 e5                	mov    %esp,%ebp
c0023531:	83 ec 18             	sub    $0x18,%esp
c0023534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023538:	75 21                	jne    c002355b <lock_acquire+0x2d>
c002353a:	83 ec 0c             	sub    $0xc,%esp
c002353d:	68 f5 4b 03 c0       	push   $0xc0034bf5
c0023542:	68 91 4b 03 c0       	push   $0xc0034b91
c0023547:	68 94 4c 03 c0       	push   $0xc0034c94
c002354c:	68 c9 00 00 00       	push   $0xc9
c0023551:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023556:	e8 36 70 00 00       	call   c002a591 <debug_panic>
c002355b:	e8 5b eb ff ff       	call   c00220bb <intr_context>
c0023560:	83 f0 01             	xor    $0x1,%eax
c0023563:	84 c0                	test   %al,%al
c0023565:	75 21                	jne    c0023588 <lock_acquire+0x5a>
c0023567:	83 ec 0c             	sub    $0xc,%esp
c002356a:	68 be 4b 03 c0       	push   $0xc0034bbe
c002356f:	68 91 4b 03 c0       	push   $0xc0034b91
c0023574:	68 94 4c 03 c0       	push   $0xc0034c94
c0023579:	68 ca 00 00 00       	push   $0xca
c002357e:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023583:	e8 09 70 00 00       	call   c002a591 <debug_panic>
c0023588:	83 ec 0c             	sub    $0xc,%esp
c002358b:	ff 75 08             	pushl  0x8(%ebp)
c002358e:	e8 9d 02 00 00       	call   c0023830 <lock_held_by_current_thread>
c0023593:	83 c4 10             	add    $0x10,%esp
c0023596:	83 f0 01             	xor    $0x1,%eax
c0023599:	84 c0                	test   %al,%al
c002359b:	75 21                	jne    c00235be <lock_acquire+0x90>
c002359d:	83 ec 0c             	sub    $0xc,%esp
c00235a0:	68 04 4c 03 c0       	push   $0xc0034c04
c00235a5:	68 91 4b 03 c0       	push   $0xc0034b91
c00235aa:	68 94 4c 03 c0       	push   $0xc0034c94
c00235af:	68 cb 00 00 00       	push   $0xcb
c00235b4:	68 a8 4b 03 c0       	push   $0xc0034ba8
c00235b9:	e8 d3 6f 00 00       	call   c002a591 <debug_panic>
c00235be:	e8 26 d9 ff ff       	call   c0020ee9 <thread_current>
c00235c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00235c6:	0f b6 05 48 87 04 c0 	movzbl 0xc0048748,%eax
c00235cd:	83 f0 01             	xor    $0x1,%eax
c00235d0:	84 c0                	test   %al,%al
c00235d2:	74 5f                	je     c0023633 <lock_acquire+0x105>
c00235d4:	8b 45 08             	mov    0x8(%ebp),%eax
c00235d7:	8b 00                	mov    (%eax),%eax
c00235d9:	85 c0                	test   %eax,%eax
c00235db:	74 56                	je     c0023633 <lock_acquire+0x105>
c00235dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00235e0:	8b 55 08             	mov    0x8(%ebp),%edx
c00235e3:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c00235e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00235ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00235ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00235f2:	8b 40 1c             	mov    0x1c(%eax),%eax
c00235f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00235f8:	eb 28                	jmp    c0023622 <lock_acquire+0xf4>
c00235fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00235fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0023600:	89 50 20             	mov    %edx,0x20(%eax)
c0023603:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023606:	8b 00                	mov    (%eax),%eax
c0023608:	83 ec 0c             	sub    $0xc,%esp
c002360b:	50                   	push   %eax
c002360c:	e8 84 e1 ff ff       	call   c0021795 <thread_donate_priority>
c0023611:	83 c4 10             	add    $0x10,%esp
c0023614:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023617:	8b 00                	mov    (%eax),%eax
c0023619:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c002361f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023622:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0023626:	74 0b                	je     c0023633 <lock_acquire+0x105>
c0023628:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002362b:	8b 40 20             	mov    0x20(%eax),%eax
c002362e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0023631:	7c c7                	jl     c00235fa <lock_acquire+0xcc>
c0023633:	8b 45 08             	mov    0x8(%ebp),%eax
c0023636:	83 c0 04             	add    $0x4,%eax
c0023639:	83 ec 0c             	sub    $0xc,%esp
c002363c:	50                   	push   %eax
c002363d:	e8 fd fb ff ff       	call   c002323f <sema_down>
c0023642:	83 c4 10             	add    $0x10,%esp
c0023645:	e8 a2 e7 ff ff       	call   c0021dec <intr_disable>
c002364a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002364d:	e8 97 d8 ff ff       	call   c0020ee9 <thread_current>
c0023652:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023655:	0f b6 05 48 87 04 c0 	movzbl 0xc0048748,%eax
c002365c:	83 f0 01             	xor    $0x1,%eax
c002365f:	84 c0                	test   %al,%al
c0023661:	74 63                	je     c00236c6 <lock_acquire+0x198>
c0023663:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023666:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c002366d:	00 00 00 
c0023670:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023673:	8b 50 1c             	mov    0x1c(%eax),%edx
c0023676:	8b 45 08             	mov    0x8(%ebp),%eax
c0023679:	89 50 20             	mov    %edx,0x20(%eax)
c002367c:	8b 45 08             	mov    0x8(%ebp),%eax
c002367f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0023682:	89 10                	mov    %edx,(%eax)
c0023684:	8b 45 08             	mov    0x8(%ebp),%eax
c0023687:	8d 50 18             	lea    0x18(%eax),%edx
c002368a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002368d:	05 88 00 00 00       	add    $0x88,%eax
c0023692:	6a 00                	push   $0x0
c0023694:	68 42 3b 02 c0       	push   $0xc0023b42
c0023699:	52                   	push   %edx
c002369a:	50                   	push   %eax
c002369b:	e8 0c 7c 00 00       	call   c002b2ac <list_insert_ordered>
c00236a0:	83 c4 10             	add    $0x10,%esp
c00236a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00236a6:	8b 50 1c             	mov    0x1c(%eax),%edx
c00236a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00236ac:	8b 40 20             	mov    0x20(%eax),%eax
c00236af:	39 c2                	cmp    %eax,%edx
c00236b1:	7d 1b                	jge    c00236ce <lock_acquire+0x1a0>
c00236b3:	8b 45 08             	mov    0x8(%ebp),%eax
c00236b6:	8b 50 20             	mov    0x20(%eax),%edx
c00236b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00236bc:	89 50 1c             	mov    %edx,0x1c(%eax)
c00236bf:	e8 20 d9 ff ff       	call   c0020fe4 <thread_yield>
c00236c4:	eb 08                	jmp    c00236ce <lock_acquire+0x1a0>
c00236c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00236c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00236cc:	89 10                	mov    %edx,(%eax)
c00236ce:	83 ec 0c             	sub    $0xc,%esp
c00236d1:	ff 75 e8             	pushl  -0x18(%ebp)
c00236d4:	e8 bb e6 ff ff       	call   c0021d94 <intr_set_level>
c00236d9:	83 c4 10             	add    $0x10,%esp
c00236dc:	90                   	nop
c00236dd:	c9                   	leave  
c00236de:	c3                   	ret    

c00236df <lock_try_acquire>:
c00236df:	55                   	push   %ebp
c00236e0:	89 e5                	mov    %esp,%ebp
c00236e2:	83 ec 18             	sub    $0x18,%esp
c00236e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00236e9:	75 21                	jne    c002370c <lock_try_acquire+0x2d>
c00236eb:	83 ec 0c             	sub    $0xc,%esp
c00236ee:	68 f5 4b 03 c0       	push   $0xc0034bf5
c00236f3:	68 91 4b 03 c0       	push   $0xc0034b91
c00236f8:	68 a4 4c 03 c0       	push   $0xc0034ca4
c00236fd:	68 03 01 00 00       	push   $0x103
c0023702:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023707:	e8 85 6e 00 00       	call   c002a591 <debug_panic>
c002370c:	83 ec 0c             	sub    $0xc,%esp
c002370f:	ff 75 08             	pushl  0x8(%ebp)
c0023712:	e8 19 01 00 00       	call   c0023830 <lock_held_by_current_thread>
c0023717:	83 c4 10             	add    $0x10,%esp
c002371a:	83 f0 01             	xor    $0x1,%eax
c002371d:	84 c0                	test   %al,%al
c002371f:	75 21                	jne    c0023742 <lock_try_acquire+0x63>
c0023721:	83 ec 0c             	sub    $0xc,%esp
c0023724:	68 04 4c 03 c0       	push   $0xc0034c04
c0023729:	68 91 4b 03 c0       	push   $0xc0034b91
c002372e:	68 a4 4c 03 c0       	push   $0xc0034ca4
c0023733:	68 04 01 00 00       	push   $0x104
c0023738:	68 a8 4b 03 c0       	push   $0xc0034ba8
c002373d:	e8 4f 6e 00 00       	call   c002a591 <debug_panic>
c0023742:	8b 45 08             	mov    0x8(%ebp),%eax
c0023745:	83 c0 04             	add    $0x4,%eax
c0023748:	83 ec 0c             	sub    $0xc,%esp
c002374b:	50                   	push   %eax
c002374c:	e8 97 fb ff ff       	call   c00232e8 <sema_try_down>
c0023751:	83 c4 10             	add    $0x10,%esp
c0023754:	88 45 f7             	mov    %al,-0x9(%ebp)
c0023757:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c002375b:	74 0c                	je     c0023769 <lock_try_acquire+0x8a>
c002375d:	e8 87 d7 ff ff       	call   c0020ee9 <thread_current>
c0023762:	89 c2                	mov    %eax,%edx
c0023764:	8b 45 08             	mov    0x8(%ebp),%eax
c0023767:	89 10                	mov    %edx,(%eax)
c0023769:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c002376d:	c9                   	leave  
c002376e:	c3                   	ret    

c002376f <lock_release>:
c002376f:	55                   	push   %ebp
c0023770:	89 e5                	mov    %esp,%ebp
c0023772:	83 ec 18             	sub    $0x18,%esp
c0023775:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023779:	75 21                	jne    c002379c <lock_release+0x2d>
c002377b:	83 ec 0c             	sub    $0xc,%esp
c002377e:	68 f5 4b 03 c0       	push   $0xc0034bf5
c0023783:	68 91 4b 03 c0       	push   $0xc0034b91
c0023788:	68 b8 4c 03 c0       	push   $0xc0034cb8
c002378d:	68 14 01 00 00       	push   $0x114
c0023792:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023797:	e8 f5 6d 00 00       	call   c002a591 <debug_panic>
c002379c:	83 ec 0c             	sub    $0xc,%esp
c002379f:	ff 75 08             	pushl  0x8(%ebp)
c00237a2:	e8 89 00 00 00       	call   c0023830 <lock_held_by_current_thread>
c00237a7:	83 c4 10             	add    $0x10,%esp
c00237aa:	84 c0                	test   %al,%al
c00237ac:	75 21                	jne    c00237cf <lock_release+0x60>
c00237ae:	83 ec 0c             	sub    $0xc,%esp
c00237b1:	68 28 4c 03 c0       	push   $0xc0034c28
c00237b6:	68 91 4b 03 c0       	push   $0xc0034b91
c00237bb:	68 b8 4c 03 c0       	push   $0xc0034cb8
c00237c0:	68 15 01 00 00       	push   $0x115
c00237c5:	68 a8 4b 03 c0       	push   $0xc0034ba8
c00237ca:	e8 c2 6d 00 00       	call   c002a591 <debug_panic>
c00237cf:	e8 18 e6 ff ff       	call   c0021dec <intr_disable>
c00237d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00237d7:	0f b6 05 48 87 04 c0 	movzbl 0xc0048748,%eax
c00237de:	83 f0 01             	xor    $0x1,%eax
c00237e1:	84 c0                	test   %al,%al
c00237e3:	74 1f                	je     c0023804 <lock_release+0x95>
c00237e5:	83 ec 0c             	sub    $0xc,%esp
c00237e8:	ff 75 08             	pushl  0x8(%ebp)
c00237eb:	e8 23 e1 ff ff       	call   c0021913 <thread_remove_lock>
c00237f0:	83 c4 10             	add    $0x10,%esp
c00237f3:	e8 f1 d6 ff ff       	call   c0020ee9 <thread_current>
c00237f8:	83 ec 0c             	sub    $0xc,%esp
c00237fb:	50                   	push   %eax
c00237fc:	e8 60 e0 ff ff       	call   c0021861 <thread_update_priority>
c0023801:	83 c4 10             	add    $0x10,%esp
c0023804:	8b 45 08             	mov    0x8(%ebp),%eax
c0023807:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002380d:	8b 45 08             	mov    0x8(%ebp),%eax
c0023810:	83 c0 04             	add    $0x4,%eax
c0023813:	83 ec 0c             	sub    $0xc,%esp
c0023816:	50                   	push   %eax
c0023817:	e8 32 fb ff ff       	call   c002334e <sema_up>
c002381c:	83 c4 10             	add    $0x10,%esp
c002381f:	83 ec 0c             	sub    $0xc,%esp
c0023822:	ff 75 f4             	pushl  -0xc(%ebp)
c0023825:	e8 6a e5 ff ff       	call   c0021d94 <intr_set_level>
c002382a:	83 c4 10             	add    $0x10,%esp
c002382d:	90                   	nop
c002382e:	c9                   	leave  
c002382f:	c3                   	ret    

c0023830 <lock_held_by_current_thread>:
c0023830:	55                   	push   %ebp
c0023831:	89 e5                	mov    %esp,%ebp
c0023833:	53                   	push   %ebx
c0023834:	83 ec 04             	sub    $0x4,%esp
c0023837:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002383b:	75 21                	jne    c002385e <lock_held_by_current_thread+0x2e>
c002383d:	83 ec 0c             	sub    $0xc,%esp
c0023840:	68 f5 4b 03 c0       	push   $0xc0034bf5
c0023845:	68 91 4b 03 c0       	push   $0xc0034b91
c002384a:	68 c8 4c 03 c0       	push   $0xc0034cc8
c002384f:	68 2a 01 00 00       	push   $0x12a
c0023854:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023859:	e8 33 6d 00 00       	call   c002a591 <debug_panic>
c002385e:	8b 45 08             	mov    0x8(%ebp),%eax
c0023861:	8b 18                	mov    (%eax),%ebx
c0023863:	e8 81 d6 ff ff       	call   c0020ee9 <thread_current>
c0023868:	39 c3                	cmp    %eax,%ebx
c002386a:	0f 94 c0             	sete   %al
c002386d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0023870:	c9                   	leave  
c0023871:	c3                   	ret    

c0023872 <cond_init>:
c0023872:	55                   	push   %ebp
c0023873:	89 e5                	mov    %esp,%ebp
c0023875:	83 ec 08             	sub    $0x8,%esp
c0023878:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002387c:	75 21                	jne    c002389f <cond_init+0x2d>
c002387e:	83 ec 0c             	sub    $0xc,%esp
c0023881:	68 4b 4c 03 c0       	push   $0xc0034c4b
c0023886:	68 91 4b 03 c0       	push   $0xc0034b91
c002388b:	68 e4 4c 03 c0       	push   $0xc0034ce4
c0023890:	68 3c 01 00 00       	push   $0x13c
c0023895:	68 a8 4b 03 c0       	push   $0xc0034ba8
c002389a:	e8 f2 6c 00 00       	call   c002a591 <debug_panic>
c002389f:	8b 45 08             	mov    0x8(%ebp),%eax
c00238a2:	83 ec 0c             	sub    $0xc,%esp
c00238a5:	50                   	push   %eax
c00238a6:	e8 59 6f 00 00       	call   c002a804 <list_init>
c00238ab:	83 c4 10             	add    $0x10,%esp
c00238ae:	90                   	nop
c00238af:	c9                   	leave  
c00238b0:	c3                   	ret    

c00238b1 <cond_wait>:
c00238b1:	55                   	push   %ebp
c00238b2:	89 e5                	mov    %esp,%ebp
c00238b4:	83 ec 28             	sub    $0x28,%esp
c00238b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00238bb:	75 21                	jne    c00238de <cond_wait+0x2d>
c00238bd:	83 ec 0c             	sub    $0xc,%esp
c00238c0:	68 4b 4c 03 c0       	push   $0xc0034c4b
c00238c5:	68 91 4b 03 c0       	push   $0xc0034b91
c00238ca:	68 f0 4c 03 c0       	push   $0xc0034cf0
c00238cf:	68 5a 01 00 00       	push   $0x15a
c00238d4:	68 a8 4b 03 c0       	push   $0xc0034ba8
c00238d9:	e8 b3 6c 00 00       	call   c002a591 <debug_panic>
c00238de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00238e2:	75 21                	jne    c0023905 <cond_wait+0x54>
c00238e4:	83 ec 0c             	sub    $0xc,%esp
c00238e7:	68 f5 4b 03 c0       	push   $0xc0034bf5
c00238ec:	68 91 4b 03 c0       	push   $0xc0034b91
c00238f1:	68 f0 4c 03 c0       	push   $0xc0034cf0
c00238f6:	68 5b 01 00 00       	push   $0x15b
c00238fb:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023900:	e8 8c 6c 00 00       	call   c002a591 <debug_panic>
c0023905:	e8 b1 e7 ff ff       	call   c00220bb <intr_context>
c002390a:	83 f0 01             	xor    $0x1,%eax
c002390d:	84 c0                	test   %al,%al
c002390f:	75 21                	jne    c0023932 <cond_wait+0x81>
c0023911:	83 ec 0c             	sub    $0xc,%esp
c0023914:	68 be 4b 03 c0       	push   $0xc0034bbe
c0023919:	68 91 4b 03 c0       	push   $0xc0034b91
c002391e:	68 f0 4c 03 c0       	push   $0xc0034cf0
c0023923:	68 5c 01 00 00       	push   $0x15c
c0023928:	68 a8 4b 03 c0       	push   $0xc0034ba8
c002392d:	e8 5f 6c 00 00       	call   c002a591 <debug_panic>
c0023932:	83 ec 0c             	sub    $0xc,%esp
c0023935:	ff 75 0c             	pushl  0xc(%ebp)
c0023938:	e8 f3 fe ff ff       	call   c0023830 <lock_held_by_current_thread>
c002393d:	83 c4 10             	add    $0x10,%esp
c0023940:	84 c0                	test   %al,%al
c0023942:	75 21                	jne    c0023965 <cond_wait+0xb4>
c0023944:	83 ec 0c             	sub    $0xc,%esp
c0023947:	68 28 4c 03 c0       	push   $0xc0034c28
c002394c:	68 91 4b 03 c0       	push   $0xc0034b91
c0023951:	68 f0 4c 03 c0       	push   $0xc0034cf0
c0023956:	68 5d 01 00 00       	push   $0x15d
c002395b:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023960:	e8 2c 6c 00 00       	call   c002a591 <debug_panic>
c0023965:	83 ec 08             	sub    $0x8,%esp
c0023968:	6a 00                	push   $0x0
c002396a:	8d 45 dc             	lea    -0x24(%ebp),%eax
c002396d:	83 c0 08             	add    $0x8,%eax
c0023970:	50                   	push   %eax
c0023971:	e8 82 f8 ff ff       	call   c00231f8 <sema_init>
c0023976:	83 c4 10             	add    $0x10,%esp
c0023979:	8b 45 08             	mov    0x8(%ebp),%eax
c002397c:	83 ec 08             	sub    $0x8,%esp
c002397f:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0023982:	52                   	push   %edx
c0023983:	50                   	push   %eax
c0023984:	e8 5b 72 00 00       	call   c002abe4 <list_push_back>
c0023989:	83 c4 10             	add    $0x10,%esp
c002398c:	83 ec 0c             	sub    $0xc,%esp
c002398f:	ff 75 0c             	pushl  0xc(%ebp)
c0023992:	e8 d8 fd ff ff       	call   c002376f <lock_release>
c0023997:	83 c4 10             	add    $0x10,%esp
c002399a:	83 ec 0c             	sub    $0xc,%esp
c002399d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c00239a0:	83 c0 08             	add    $0x8,%eax
c00239a3:	50                   	push   %eax
c00239a4:	e8 96 f8 ff ff       	call   c002323f <sema_down>
c00239a9:	83 c4 10             	add    $0x10,%esp
c00239ac:	83 ec 0c             	sub    $0xc,%esp
c00239af:	ff 75 0c             	pushl  0xc(%ebp)
c00239b2:	e8 77 fb ff ff       	call   c002352e <lock_acquire>
c00239b7:	83 c4 10             	add    $0x10,%esp
c00239ba:	90                   	nop
c00239bb:	c9                   	leave  
c00239bc:	c3                   	ret    

c00239bd <cond_signal>:
c00239bd:	55                   	push   %ebp
c00239be:	89 e5                	mov    %esp,%ebp
c00239c0:	83 ec 08             	sub    $0x8,%esp
c00239c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00239c7:	75 21                	jne    c00239ea <cond_signal+0x2d>
c00239c9:	83 ec 0c             	sub    $0xc,%esp
c00239cc:	68 4b 4c 03 c0       	push   $0xc0034c4b
c00239d1:	68 91 4b 03 c0       	push   $0xc0034b91
c00239d6:	68 fc 4c 03 c0       	push   $0xc0034cfc
c00239db:	68 70 01 00 00       	push   $0x170
c00239e0:	68 a8 4b 03 c0       	push   $0xc0034ba8
c00239e5:	e8 a7 6b 00 00       	call   c002a591 <debug_panic>
c00239ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00239ee:	75 21                	jne    c0023a11 <cond_signal+0x54>
c00239f0:	83 ec 0c             	sub    $0xc,%esp
c00239f3:	68 f5 4b 03 c0       	push   $0xc0034bf5
c00239f8:	68 91 4b 03 c0       	push   $0xc0034b91
c00239fd:	68 fc 4c 03 c0       	push   $0xc0034cfc
c0023a02:	68 71 01 00 00       	push   $0x171
c0023a07:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023a0c:	e8 80 6b 00 00       	call   c002a591 <debug_panic>
c0023a11:	e8 a5 e6 ff ff       	call   c00220bb <intr_context>
c0023a16:	83 f0 01             	xor    $0x1,%eax
c0023a19:	84 c0                	test   %al,%al
c0023a1b:	75 21                	jne    c0023a3e <cond_signal+0x81>
c0023a1d:	83 ec 0c             	sub    $0xc,%esp
c0023a20:	68 be 4b 03 c0       	push   $0xc0034bbe
c0023a25:	68 91 4b 03 c0       	push   $0xc0034b91
c0023a2a:	68 fc 4c 03 c0       	push   $0xc0034cfc
c0023a2f:	68 72 01 00 00       	push   $0x172
c0023a34:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023a39:	e8 53 6b 00 00       	call   c002a591 <debug_panic>
c0023a3e:	83 ec 0c             	sub    $0xc,%esp
c0023a41:	ff 75 0c             	pushl  0xc(%ebp)
c0023a44:	e8 e7 fd ff ff       	call   c0023830 <lock_held_by_current_thread>
c0023a49:	83 c4 10             	add    $0x10,%esp
c0023a4c:	84 c0                	test   %al,%al
c0023a4e:	75 21                	jne    c0023a71 <cond_signal+0xb4>
c0023a50:	83 ec 0c             	sub    $0xc,%esp
c0023a53:	68 28 4c 03 c0       	push   $0xc0034c28
c0023a58:	68 91 4b 03 c0       	push   $0xc0034b91
c0023a5d:	68 fc 4c 03 c0       	push   $0xc0034cfc
c0023a62:	68 73 01 00 00       	push   $0x173
c0023a67:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023a6c:	e8 20 6b 00 00       	call   c002a591 <debug_panic>
c0023a71:	8b 45 08             	mov    0x8(%ebp),%eax
c0023a74:	83 ec 0c             	sub    $0xc,%esp
c0023a77:	50                   	push   %eax
c0023a78:	e8 0f 73 00 00       	call   c002ad8c <list_empty>
c0023a7d:	83 c4 10             	add    $0x10,%esp
c0023a80:	83 f0 01             	xor    $0x1,%eax
c0023a83:	84 c0                	test   %al,%al
c0023a85:	74 3a                	je     c0023ac1 <cond_signal+0x104>
c0023a87:	8b 45 08             	mov    0x8(%ebp),%eax
c0023a8a:	83 ec 04             	sub    $0x4,%esp
c0023a8d:	6a 00                	push   $0x0
c0023a8f:	68 73 3b 02 c0       	push   $0xc0023b73
c0023a94:	50                   	push   %eax
c0023a95:	e8 a9 76 00 00       	call   c002b143 <list_sort>
c0023a9a:	83 c4 10             	add    $0x10,%esp
c0023a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0023aa0:	83 ec 0c             	sub    $0xc,%esp
c0023aa3:	50                   	push   %eax
c0023aa4:	e8 ba 71 00 00       	call   c002ac63 <list_pop_front>
c0023aa9:	83 c4 10             	add    $0x10,%esp
c0023aac:	83 c0 04             	add    $0x4,%eax
c0023aaf:	83 e8 04             	sub    $0x4,%eax
c0023ab2:	83 c0 08             	add    $0x8,%eax
c0023ab5:	83 ec 0c             	sub    $0xc,%esp
c0023ab8:	50                   	push   %eax
c0023ab9:	e8 90 f8 ff ff       	call   c002334e <sema_up>
c0023abe:	83 c4 10             	add    $0x10,%esp
c0023ac1:	90                   	nop
c0023ac2:	c9                   	leave  
c0023ac3:	c3                   	ret    

c0023ac4 <cond_broadcast>:
c0023ac4:	55                   	push   %ebp
c0023ac5:	89 e5                	mov    %esp,%ebp
c0023ac7:	83 ec 08             	sub    $0x8,%esp
c0023aca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023ace:	75 21                	jne    c0023af1 <cond_broadcast+0x2d>
c0023ad0:	83 ec 0c             	sub    $0xc,%esp
c0023ad3:	68 4b 4c 03 c0       	push   $0xc0034c4b
c0023ad8:	68 91 4b 03 c0       	push   $0xc0034b91
c0023add:	68 08 4d 03 c0       	push   $0xc0034d08
c0023ae2:	68 86 01 00 00       	push   $0x186
c0023ae7:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023aec:	e8 a0 6a 00 00       	call   c002a591 <debug_panic>
c0023af1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0023af5:	75 32                	jne    c0023b29 <cond_broadcast+0x65>
c0023af7:	83 ec 0c             	sub    $0xc,%esp
c0023afa:	68 f5 4b 03 c0       	push   $0xc0034bf5
c0023aff:	68 91 4b 03 c0       	push   $0xc0034b91
c0023b04:	68 08 4d 03 c0       	push   $0xc0034d08
c0023b09:	68 87 01 00 00       	push   $0x187
c0023b0e:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0023b13:	e8 79 6a 00 00       	call   c002a591 <debug_panic>
c0023b18:	83 ec 08             	sub    $0x8,%esp
c0023b1b:	ff 75 0c             	pushl  0xc(%ebp)
c0023b1e:	ff 75 08             	pushl  0x8(%ebp)
c0023b21:	e8 97 fe ff ff       	call   c00239bd <cond_signal>
c0023b26:	83 c4 10             	add    $0x10,%esp
c0023b29:	8b 45 08             	mov    0x8(%ebp),%eax
c0023b2c:	83 ec 0c             	sub    $0xc,%esp
c0023b2f:	50                   	push   %eax
c0023b30:	e8 57 72 00 00       	call   c002ad8c <list_empty>
c0023b35:	83 c4 10             	add    $0x10,%esp
c0023b38:	83 f0 01             	xor    $0x1,%eax
c0023b3b:	84 c0                	test   %al,%al
c0023b3d:	75 d9                	jne    c0023b18 <cond_broadcast+0x54>
c0023b3f:	90                   	nop
c0023b40:	c9                   	leave  
c0023b41:	c3                   	ret    

c0023b42 <lock_priority_cmp>:
c0023b42:	55                   	push   %ebp
c0023b43:	89 e5                	mov    %esp,%ebp
c0023b45:	83 ec 10             	sub    $0x10,%esp
c0023b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0023b4b:	83 c0 04             	add    $0x4,%eax
c0023b4e:	83 e8 1c             	sub    $0x1c,%eax
c0023b51:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0023b54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023b57:	83 c0 04             	add    $0x4,%eax
c0023b5a:	83 e8 1c             	sub    $0x1c,%eax
c0023b5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0023b60:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0023b63:	8b 50 20             	mov    0x20(%eax),%edx
c0023b66:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0023b69:	8b 40 20             	mov    0x20(%eax),%eax
c0023b6c:	39 c2                	cmp    %eax,%edx
c0023b6e:	0f 9f c0             	setg   %al
c0023b71:	c9                   	leave  
c0023b72:	c3                   	ret    

c0023b73 <cond_sema_cmp>:
c0023b73:	55                   	push   %ebp
c0023b74:	89 e5                	mov    %esp,%ebp
c0023b76:	83 ec 18             	sub    $0x18,%esp
c0023b79:	8b 45 08             	mov    0x8(%ebp),%eax
c0023b7c:	83 c0 04             	add    $0x4,%eax
c0023b7f:	83 e8 04             	sub    $0x4,%eax
c0023b82:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023b85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023b88:	83 c0 04             	add    $0x4,%eax
c0023b8b:	83 e8 04             	sub    $0x4,%eax
c0023b8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023b94:	83 c0 0c             	add    $0xc,%eax
c0023b97:	83 ec 0c             	sub    $0xc,%esp
c0023b9a:	50                   	push   %eax
c0023b9b:	e8 17 71 00 00       	call   c002acb7 <list_front>
c0023ba0:	83 c4 10             	add    $0x10,%esp
c0023ba3:	83 c0 04             	add    $0x4,%eax
c0023ba6:	83 e8 2c             	sub    $0x2c,%eax
c0023ba9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023bac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023baf:	83 c0 0c             	add    $0xc,%eax
c0023bb2:	83 ec 0c             	sub    $0xc,%esp
c0023bb5:	50                   	push   %eax
c0023bb6:	e8 fc 70 00 00       	call   c002acb7 <list_front>
c0023bbb:	83 c4 10             	add    $0x10,%esp
c0023bbe:	83 c0 04             	add    $0x4,%eax
c0023bc1:	83 e8 2c             	sub    $0x2c,%eax
c0023bc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0023bc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0023bca:	8b 50 1c             	mov    0x1c(%eax),%edx
c0023bcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0023bd0:	8b 40 1c             	mov    0x1c(%eax),%eax
c0023bd3:	39 c2                	cmp    %eax,%edx
c0023bd5:	0f 9f c0             	setg   %al
c0023bd8:	c9                   	leave  
c0023bd9:	c3                   	ret    

c0023bda <lock_update_priority>:
c0023bda:	55                   	push   %ebp
c0023bdb:	89 e5                	mov    %esp,%ebp
c0023bdd:	83 ec 18             	sub    $0x18,%esp
c0023be0:	e8 07 e2 ff ff       	call   c0021dec <intr_disable>
c0023be5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0023beb:	83 c0 08             	add    $0x8,%eax
c0023bee:	83 ec 0c             	sub    $0xc,%esp
c0023bf1:	50                   	push   %eax
c0023bf2:	e8 95 71 00 00       	call   c002ad8c <list_empty>
c0023bf7:	83 c4 10             	add    $0x10,%esp
c0023bfa:	84 c0                	test   %al,%al
c0023bfc:	74 0c                	je     c0023c0a <lock_update_priority+0x30>
c0023bfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c01:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0023c08:	eb 21                	jmp    c0023c2b <lock_update_priority+0x51>
c0023c0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c0d:	83 c0 08             	add    $0x8,%eax
c0023c10:	83 ec 0c             	sub    $0xc,%esp
c0023c13:	50                   	push   %eax
c0023c14:	e8 9e 70 00 00       	call   c002acb7 <list_front>
c0023c19:	83 c4 10             	add    $0x10,%esp
c0023c1c:	83 c0 04             	add    $0x4,%eax
c0023c1f:	83 e8 2c             	sub    $0x2c,%eax
c0023c22:	8b 50 1c             	mov    0x1c(%eax),%edx
c0023c25:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c28:	89 50 20             	mov    %edx,0x20(%eax)
c0023c2b:	83 ec 0c             	sub    $0xc,%esp
c0023c2e:	ff 75 f4             	pushl  -0xc(%ebp)
c0023c31:	e8 5e e1 ff ff       	call   c0021d94 <intr_set_level>
c0023c36:	83 c4 10             	add    $0x10,%esp
c0023c39:	90                   	nop
c0023c3a:	c9                   	leave  
c0023c3b:	c3                   	ret    

c0023c3c <pg_ofs>:
c0023c3c:	55                   	push   %ebp
c0023c3d:	89 e5                	mov    %esp,%ebp
c0023c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c42:	25 ff 0f 00 00       	and    $0xfff,%eax
c0023c47:	5d                   	pop    %ebp
c0023c48:	c3                   	ret    

c0023c49 <pg_no>:
c0023c49:	55                   	push   %ebp
c0023c4a:	89 e5                	mov    %esp,%ebp
c0023c4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c4f:	c1 e8 0c             	shr    $0xc,%eax
c0023c52:	5d                   	pop    %ebp
c0023c53:	c3                   	ret    

c0023c54 <ptov>:
c0023c54:	55                   	push   %ebp
c0023c55:	89 e5                	mov    %esp,%ebp
c0023c57:	83 ec 08             	sub    $0x8,%esp
c0023c5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c5d:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c0023c62:	76 1e                	jbe    c0023c82 <ptov+0x2e>
c0023c64:	83 ec 0c             	sub    $0xc,%esp
c0023c67:	68 18 4d 03 c0       	push   $0xc0034d18
c0023c6c:	68 33 4d 03 c0       	push   $0xc0034d33
c0023c71:	68 50 4e 03 c0       	push   $0xc0034e50
c0023c76:	6a 4a                	push   $0x4a
c0023c78:	68 4a 4d 03 c0       	push   $0xc0034d4a
c0023c7d:	e8 0f 69 00 00       	call   c002a591 <debug_panic>
c0023c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c85:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0023c8a:	c9                   	leave  
c0023c8b:	c3                   	ret    

c0023c8c <palloc_init>:
c0023c8c:	55                   	push   %ebp
c0023c8d:	89 e5                	mov    %esp,%ebp
c0023c8f:	83 ec 28             	sub    $0x28,%esp
c0023c92:	83 ec 0c             	sub    $0xc,%esp
c0023c95:	68 00 00 10 00       	push   $0x100000
c0023c9a:	e8 b5 ff ff ff       	call   c0023c54 <ptov>
c0023c9f:	83 c4 10             	add    $0x10,%esp
c0023ca2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023ca5:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c0023caa:	c1 e0 0c             	shl    $0xc,%eax
c0023cad:	83 ec 0c             	sub    $0xc,%esp
c0023cb0:	50                   	push   %eax
c0023cb1:	e8 9e ff ff ff       	call   c0023c54 <ptov>
c0023cb6:	83 c4 10             	add    $0x10,%esp
c0023cb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023cbc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0023cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023cc2:	29 c2                	sub    %eax,%edx
c0023cc4:	89 d0                	mov    %edx,%eax
c0023cc6:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0023ccc:	85 c0                	test   %eax,%eax
c0023cce:	0f 48 c2             	cmovs  %edx,%eax
c0023cd1:	c1 f8 0c             	sar    $0xc,%eax
c0023cd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0023cd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0023cda:	d1 e8                	shr    %eax
c0023cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023cdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023ce2:	3b 45 08             	cmp    0x8(%ebp),%eax
c0023ce5:	76 06                	jbe    c0023ced <palloc_init+0x61>
c0023ce7:	8b 45 08             	mov    0x8(%ebp),%eax
c0023cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023ced:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0023cf0:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0023cf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0023cf6:	68 60 4d 03 c0       	push   $0xc0034d60
c0023cfb:	ff 75 e4             	pushl  -0x1c(%ebp)
c0023cfe:	ff 75 f0             	pushl  -0x10(%ebp)
c0023d01:	68 a0 fb 03 c0       	push   $0xc003fba0
c0023d06:	e8 6e 02 00 00       	call   c0023f79 <init_pool>
c0023d0b:	83 c4 10             	add    $0x10,%esp
c0023d0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0023d11:	c1 e0 0c             	shl    $0xc,%eax
c0023d14:	89 c2                	mov    %eax,%edx
c0023d16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d19:	01 d0                	add    %edx,%eax
c0023d1b:	68 6c 4d 03 c0       	push   $0xc0034d6c
c0023d20:	ff 75 f4             	pushl  -0xc(%ebp)
c0023d23:	50                   	push   %eax
c0023d24:	68 e0 fb 03 c0       	push   $0xc003fbe0
c0023d29:	e8 4b 02 00 00       	call   c0023f79 <init_pool>
c0023d2e:	83 c4 10             	add    $0x10,%esp
c0023d31:	90                   	nop
c0023d32:	c9                   	leave  
c0023d33:	c3                   	ret    

c0023d34 <palloc_get_multiple>:
c0023d34:	55                   	push   %ebp
c0023d35:	89 e5                	mov    %esp,%ebp
c0023d37:	83 ec 18             	sub    $0x18,%esp
c0023d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0023d3d:	83 e0 04             	and    $0x4,%eax
c0023d40:	85 c0                	test   %eax,%eax
c0023d42:	74 07                	je     c0023d4b <palloc_get_multiple+0x17>
c0023d44:	b8 e0 fb 03 c0       	mov    $0xc003fbe0,%eax
c0023d49:	eb 05                	jmp    c0023d50 <palloc_get_multiple+0x1c>
c0023d4b:	b8 a0 fb 03 c0       	mov    $0xc003fba0,%eax
c0023d50:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023d53:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0023d57:	75 0a                	jne    c0023d63 <palloc_get_multiple+0x2f>
c0023d59:	b8 00 00 00 00       	mov    $0x0,%eax
c0023d5e:	e9 a3 00 00 00       	jmp    c0023e06 <palloc_get_multiple+0xd2>
c0023d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d66:	83 ec 0c             	sub    $0xc,%esp
c0023d69:	50                   	push   %eax
c0023d6a:	e8 bf f7 ff ff       	call   c002352e <lock_acquire>
c0023d6f:	83 c4 10             	add    $0x10,%esp
c0023d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d75:	8b 40 24             	mov    0x24(%eax),%eax
c0023d78:	6a 00                	push   $0x0
c0023d7a:	ff 75 0c             	pushl  0xc(%ebp)
c0023d7d:	6a 00                	push   $0x0
c0023d7f:	50                   	push   %eax
c0023d80:	e8 6c 7f 00 00       	call   c002bcf1 <bitmap_scan_and_flip>
c0023d85:	83 c4 10             	add    $0x10,%esp
c0023d88:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023d8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d8e:	83 ec 0c             	sub    $0xc,%esp
c0023d91:	50                   	push   %eax
c0023d92:	e8 d8 f9 ff ff       	call   c002376f <lock_release>
c0023d97:	83 c4 10             	add    $0x10,%esp
c0023d9a:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0023d9e:	74 13                	je     c0023db3 <palloc_get_multiple+0x7f>
c0023da0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023da3:	8b 40 28             	mov    0x28(%eax),%eax
c0023da6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0023da9:	c1 e2 0c             	shl    $0xc,%edx
c0023dac:	01 d0                	add    %edx,%eax
c0023dae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023db1:	eb 07                	jmp    c0023dba <palloc_get_multiple+0x86>
c0023db3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0023dba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0023dbe:	74 23                	je     c0023de3 <palloc_get_multiple+0xaf>
c0023dc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0023dc3:	83 e0 02             	and    $0x2,%eax
c0023dc6:	85 c0                	test   %eax,%eax
c0023dc8:	74 39                	je     c0023e03 <palloc_get_multiple+0xcf>
c0023dca:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023dcd:	c1 e0 0c             	shl    $0xc,%eax
c0023dd0:	83 ec 04             	sub    $0x4,%esp
c0023dd3:	50                   	push   %eax
c0023dd4:	6a 00                	push   $0x0
c0023dd6:	ff 75 f4             	pushl  -0xc(%ebp)
c0023dd9:	e8 79 5a 00 00       	call   c0029857 <memset>
c0023dde:	83 c4 10             	add    $0x10,%esp
c0023de1:	eb 20                	jmp    c0023e03 <palloc_get_multiple+0xcf>
c0023de3:	8b 45 08             	mov    0x8(%ebp),%eax
c0023de6:	83 e0 01             	and    $0x1,%eax
c0023de9:	85 c0                	test   %eax,%eax
c0023deb:	74 16                	je     c0023e03 <palloc_get_multiple+0xcf>
c0023ded:	68 76 4d 03 c0       	push   $0xc0034d76
c0023df2:	68 58 4e 03 c0       	push   $0xc0034e58
c0023df7:	6a 61                	push   $0x61
c0023df9:	68 8f 4d 03 c0       	push   $0xc0034d8f
c0023dfe:	e8 8e 67 00 00       	call   c002a591 <debug_panic>
c0023e03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023e06:	c9                   	leave  
c0023e07:	c3                   	ret    

c0023e08 <palloc_get_page>:
c0023e08:	55                   	push   %ebp
c0023e09:	89 e5                	mov    %esp,%ebp
c0023e0b:	83 ec 08             	sub    $0x8,%esp
c0023e0e:	83 ec 08             	sub    $0x8,%esp
c0023e11:	6a 01                	push   $0x1
c0023e13:	ff 75 08             	pushl  0x8(%ebp)
c0023e16:	e8 19 ff ff ff       	call   c0023d34 <palloc_get_multiple>
c0023e1b:	83 c4 10             	add    $0x10,%esp
c0023e1e:	c9                   	leave  
c0023e1f:	c3                   	ret    

c0023e20 <palloc_free_multiple>:
c0023e20:	55                   	push   %ebp
c0023e21:	89 e5                	mov    %esp,%ebp
c0023e23:	53                   	push   %ebx
c0023e24:	83 ec 14             	sub    $0x14,%esp
c0023e27:	ff 75 08             	pushl  0x8(%ebp)
c0023e2a:	e8 0d fe ff ff       	call   c0023c3c <pg_ofs>
c0023e2f:	83 c4 04             	add    $0x4,%esp
c0023e32:	85 c0                	test   %eax,%eax
c0023e34:	74 1e                	je     c0023e54 <palloc_free_multiple+0x34>
c0023e36:	83 ec 0c             	sub    $0xc,%esp
c0023e39:	68 a6 4d 03 c0       	push   $0xc0034da6
c0023e3e:	68 33 4d 03 c0       	push   $0xc0034d33
c0023e43:	68 6c 4e 03 c0       	push   $0xc0034e6c
c0023e48:	6a 7b                	push   $0x7b
c0023e4a:	68 8f 4d 03 c0       	push   $0xc0034d8f
c0023e4f:	e8 3d 67 00 00       	call   c002a591 <debug_panic>
c0023e54:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023e58:	0f 84 fc 00 00 00    	je     c0023f5a <palloc_free_multiple+0x13a>
c0023e5e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0023e62:	0f 84 f2 00 00 00    	je     c0023f5a <palloc_free_multiple+0x13a>
c0023e68:	83 ec 08             	sub    $0x8,%esp
c0023e6b:	ff 75 08             	pushl  0x8(%ebp)
c0023e6e:	68 a0 fb 03 c0       	push   $0xc003fba0
c0023e73:	e8 a8 01 00 00       	call   c0024020 <page_from_pool>
c0023e78:	83 c4 10             	add    $0x10,%esp
c0023e7b:	84 c0                	test   %al,%al
c0023e7d:	74 09                	je     c0023e88 <palloc_free_multiple+0x68>
c0023e7f:	c7 45 f4 a0 fb 03 c0 	movl   $0xc003fba0,-0xc(%ebp)
c0023e86:	eb 39                	jmp    c0023ec1 <palloc_free_multiple+0xa1>
c0023e88:	83 ec 08             	sub    $0x8,%esp
c0023e8b:	ff 75 08             	pushl  0x8(%ebp)
c0023e8e:	68 e0 fb 03 c0       	push   $0xc003fbe0
c0023e93:	e8 88 01 00 00       	call   c0024020 <page_from_pool>
c0023e98:	83 c4 10             	add    $0x10,%esp
c0023e9b:	84 c0                	test   %al,%al
c0023e9d:	74 09                	je     c0023ea8 <palloc_free_multiple+0x88>
c0023e9f:	c7 45 f4 e0 fb 03 c0 	movl   $0xc003fbe0,-0xc(%ebp)
c0023ea6:	eb 19                	jmp    c0023ec1 <palloc_free_multiple+0xa1>
c0023ea8:	68 bc 4d 03 c0       	push   $0xc0034dbc
c0023ead:	68 6c 4e 03 c0       	push   $0xc0034e6c
c0023eb2:	68 84 00 00 00       	push   $0x84
c0023eb7:	68 8f 4d 03 c0       	push   $0xc0034d8f
c0023ebc:	e8 d0 66 00 00       	call   c002a591 <debug_panic>
c0023ec1:	83 ec 0c             	sub    $0xc,%esp
c0023ec4:	ff 75 08             	pushl  0x8(%ebp)
c0023ec7:	e8 7d fd ff ff       	call   c0023c49 <pg_no>
c0023ecc:	83 c4 10             	add    $0x10,%esp
c0023ecf:	89 c3                	mov    %eax,%ebx
c0023ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023ed4:	8b 40 28             	mov    0x28(%eax),%eax
c0023ed7:	83 ec 0c             	sub    $0xc,%esp
c0023eda:	50                   	push   %eax
c0023edb:	e8 69 fd ff ff       	call   c0023c49 <pg_no>
c0023ee0:	83 c4 10             	add    $0x10,%esp
c0023ee3:	29 c3                	sub    %eax,%ebx
c0023ee5:	89 d8                	mov    %ebx,%eax
c0023ee7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023eea:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023eed:	c1 e0 0c             	shl    $0xc,%eax
c0023ef0:	83 ec 04             	sub    $0x4,%esp
c0023ef3:	50                   	push   %eax
c0023ef4:	68 cc 00 00 00       	push   $0xcc
c0023ef9:	ff 75 08             	pushl  0x8(%ebp)
c0023efc:	e8 56 59 00 00       	call   c0029857 <memset>
c0023f01:	83 c4 10             	add    $0x10,%esp
c0023f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023f07:	8b 40 24             	mov    0x24(%eax),%eax
c0023f0a:	83 ec 04             	sub    $0x4,%esp
c0023f0d:	ff 75 0c             	pushl  0xc(%ebp)
c0023f10:	ff 75 f0             	pushl  -0x10(%ebp)
c0023f13:	50                   	push   %eax
c0023f14:	e8 f6 7c 00 00       	call   c002bc0f <bitmap_all>
c0023f19:	83 c4 10             	add    $0x10,%esp
c0023f1c:	84 c0                	test   %al,%al
c0023f1e:	75 21                	jne    c0023f41 <palloc_free_multiple+0x121>
c0023f20:	83 ec 0c             	sub    $0xc,%esp
c0023f23:	68 e0 4d 03 c0       	push   $0xc0034de0
c0023f28:	68 33 4d 03 c0       	push   $0xc0034d33
c0023f2d:	68 6c 4e 03 c0       	push   $0xc0034e6c
c0023f32:	68 8c 00 00 00       	push   $0x8c
c0023f37:	68 8f 4d 03 c0       	push   $0xc0034d8f
c0023f3c:	e8 50 66 00 00       	call   c002a591 <debug_panic>
c0023f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023f44:	8b 40 24             	mov    0x24(%eax),%eax
c0023f47:	6a 00                	push   $0x0
c0023f49:	ff 75 0c             	pushl  0xc(%ebp)
c0023f4c:	ff 75 f0             	pushl  -0x10(%ebp)
c0023f4f:	50                   	push   %eax
c0023f50:	e8 0f 7a 00 00       	call   c002b964 <bitmap_set_multiple>
c0023f55:	83 c4 10             	add    $0x10,%esp
c0023f58:	eb 01                	jmp    c0023f5b <palloc_free_multiple+0x13b>
c0023f5a:	90                   	nop
c0023f5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0023f5e:	c9                   	leave  
c0023f5f:	c3                   	ret    

c0023f60 <palloc_free_page>:
c0023f60:	55                   	push   %ebp
c0023f61:	89 e5                	mov    %esp,%ebp
c0023f63:	83 ec 08             	sub    $0x8,%esp
c0023f66:	83 ec 08             	sub    $0x8,%esp
c0023f69:	6a 01                	push   $0x1
c0023f6b:	ff 75 08             	pushl  0x8(%ebp)
c0023f6e:	e8 ad fe ff ff       	call   c0023e20 <palloc_free_multiple>
c0023f73:	83 c4 10             	add    $0x10,%esp
c0023f76:	90                   	nop
c0023f77:	c9                   	leave  
c0023f78:	c3                   	ret    

c0023f79 <init_pool>:
c0023f79:	55                   	push   %ebp
c0023f7a:	89 e5                	mov    %esp,%ebp
c0023f7c:	83 ec 18             	sub    $0x18,%esp
c0023f7f:	83 ec 0c             	sub    $0xc,%esp
c0023f82:	ff 75 10             	pushl  0x10(%ebp)
c0023f85:	e8 70 77 00 00       	call   c002b6fa <bitmap_buf_size>
c0023f8a:	83 c4 10             	add    $0x10,%esp
c0023f8d:	05 ff 0f 00 00       	add    $0xfff,%eax
c0023f92:	c1 e8 0c             	shr    $0xc,%eax
c0023f95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023f9b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0023f9e:	76 1f                	jbe    c0023fbf <init_pool+0x46>
c0023fa0:	83 ec 0c             	sub    $0xc,%esp
c0023fa3:	ff 75 14             	pushl  0x14(%ebp)
c0023fa6:	68 10 4e 03 c0       	push   $0xc0034e10
c0023fab:	68 84 4e 03 c0       	push   $0xc0034e84
c0023fb0:	68 a1 00 00 00       	push   $0xa1
c0023fb5:	68 8f 4d 03 c0       	push   $0xc0034d8f
c0023fba:	e8 d2 65 00 00       	call   c002a591 <debug_panic>
c0023fbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023fc2:	29 45 10             	sub    %eax,0x10(%ebp)
c0023fc5:	83 ec 04             	sub    $0x4,%esp
c0023fc8:	ff 75 14             	pushl  0x14(%ebp)
c0023fcb:	ff 75 10             	pushl  0x10(%ebp)
c0023fce:	68 34 4e 03 c0       	push   $0xc0034e34
c0023fd3:	e8 58 40 00 00       	call   c0028030 <printf>
c0023fd8:	83 c4 10             	add    $0x10,%esp
c0023fdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0023fde:	83 ec 0c             	sub    $0xc,%esp
c0023fe1:	50                   	push   %eax
c0023fe2:	e8 fa f4 ff ff       	call   c00234e1 <lock_init>
c0023fe7:	83 c4 10             	add    $0x10,%esp
c0023fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023fed:	c1 e0 0c             	shl    $0xc,%eax
c0023ff0:	83 ec 04             	sub    $0x4,%esp
c0023ff3:	50                   	push   %eax
c0023ff4:	ff 75 0c             	pushl  0xc(%ebp)
c0023ff7:	ff 75 10             	pushl  0x10(%ebp)
c0023ffa:	e8 95 76 00 00       	call   c002b694 <bitmap_create_in_buf>
c0023fff:	83 c4 10             	add    $0x10,%esp
c0024002:	89 c2                	mov    %eax,%edx
c0024004:	8b 45 08             	mov    0x8(%ebp),%eax
c0024007:	89 50 24             	mov    %edx,0x24(%eax)
c002400a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002400d:	c1 e0 0c             	shl    $0xc,%eax
c0024010:	89 c2                	mov    %eax,%edx
c0024012:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024015:	01 c2                	add    %eax,%edx
c0024017:	8b 45 08             	mov    0x8(%ebp),%eax
c002401a:	89 50 28             	mov    %edx,0x28(%eax)
c002401d:	90                   	nop
c002401e:	c9                   	leave  
c002401f:	c3                   	ret    

c0024020 <page_from_pool>:
c0024020:	55                   	push   %ebp
c0024021:	89 e5                	mov    %esp,%ebp
c0024023:	83 ec 18             	sub    $0x18,%esp
c0024026:	ff 75 0c             	pushl  0xc(%ebp)
c0024029:	e8 1b fc ff ff       	call   c0023c49 <pg_no>
c002402e:	83 c4 04             	add    $0x4,%esp
c0024031:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024034:	8b 45 08             	mov    0x8(%ebp),%eax
c0024037:	8b 40 28             	mov    0x28(%eax),%eax
c002403a:	50                   	push   %eax
c002403b:	e8 09 fc ff ff       	call   c0023c49 <pg_no>
c0024040:	83 c4 04             	add    $0x4,%esp
c0024043:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024046:	8b 45 08             	mov    0x8(%ebp),%eax
c0024049:	8b 40 24             	mov    0x24(%eax),%eax
c002404c:	83 ec 0c             	sub    $0xc,%esp
c002404f:	50                   	push   %eax
c0024050:	e8 e7 76 00 00       	call   c002b73c <bitmap_size>
c0024055:	83 c4 10             	add    $0x10,%esp
c0024058:	89 c2                	mov    %eax,%edx
c002405a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002405d:	01 d0                	add    %edx,%eax
c002405f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024065:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0024068:	72 0f                	jb     c0024079 <page_from_pool+0x59>
c002406a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002406d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0024070:	73 07                	jae    c0024079 <page_from_pool+0x59>
c0024072:	b8 01 00 00 00       	mov    $0x1,%eax
c0024077:	eb 05                	jmp    c002407e <page_from_pool+0x5e>
c0024079:	b8 00 00 00 00       	mov    $0x0,%eax
c002407e:	83 e0 01             	and    $0x1,%eax
c0024081:	c9                   	leave  
c0024082:	c3                   	ret    

c0024083 <pg_ofs>:
c0024083:	55                   	push   %ebp
c0024084:	89 e5                	mov    %esp,%ebp
c0024086:	8b 45 08             	mov    0x8(%ebp),%eax
c0024089:	25 ff 0f 00 00       	and    $0xfff,%eax
c002408e:	5d                   	pop    %ebp
c002408f:	c3                   	ret    

c0024090 <pg_round_down>:
c0024090:	55                   	push   %ebp
c0024091:	89 e5                	mov    %esp,%ebp
c0024093:	8b 45 08             	mov    0x8(%ebp),%eax
c0024096:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002409b:	5d                   	pop    %ebp
c002409c:	c3                   	ret    

c002409d <malloc_init>:
c002409d:	55                   	push   %ebp
c002409e:	89 e5                	mov    %esp,%ebp
c00240a0:	83 ec 18             	sub    $0x18,%esp
c00240a3:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
c00240aa:	e9 94 00 00 00       	jmp    c0024143 <malloc_init+0xa6>
c00240af:	a1 78 fe 03 c0       	mov    0xc003fe78,%eax
c00240b4:	8d 50 01             	lea    0x1(%eax),%edx
c00240b7:	89 15 78 fe 03 c0    	mov    %edx,0xc003fe78
c00240bd:	89 c2                	mov    %eax,%edx
c00240bf:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
c00240c6:	89 c2                	mov    %eax,%edx
c00240c8:	89 d0                	mov    %edx,%eax
c00240ca:	c1 e0 04             	shl    $0x4,%eax
c00240cd:	29 d0                	sub    %edx,%eax
c00240cf:	05 20 fc 03 c0       	add    $0xc003fc20,%eax
c00240d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00240d7:	a1 78 fe 03 c0       	mov    0xc003fe78,%eax
c00240dc:	83 f8 0a             	cmp    $0xa,%eax
c00240df:	76 1e                	jbe    c00240ff <malloc_init+0x62>
c00240e1:	83 ec 0c             	sub    $0xc,%esp
c00240e4:	68 90 4e 03 c0       	push   $0xc0034e90
c00240e9:	68 b9 4e 03 c0       	push   $0xc0034eb9
c00240ee:	68 c4 4f 03 c0       	push   $0xc0034fc4
c00240f3:	6a 4f                	push   $0x4f
c00240f5:	68 d0 4e 03 c0       	push   $0xc0034ed0
c00240fa:	e8 92 64 00 00       	call   c002a591 <debug_panic>
c00240ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024102:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0024105:	89 10                	mov    %edx,(%eax)
c0024107:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c002410c:	ba 00 00 00 00       	mov    $0x0,%edx
c0024111:	f7 75 f4             	divl   -0xc(%ebp)
c0024114:	89 c2                	mov    %eax,%edx
c0024116:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024119:	89 50 04             	mov    %edx,0x4(%eax)
c002411c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002411f:	83 c0 08             	add    $0x8,%eax
c0024122:	83 ec 0c             	sub    $0xc,%esp
c0024125:	50                   	push   %eax
c0024126:	e8 d9 66 00 00       	call   c002a804 <list_init>
c002412b:	83 c4 10             	add    $0x10,%esp
c002412e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024131:	83 c0 18             	add    $0x18,%eax
c0024134:	83 ec 0c             	sub    $0xc,%esp
c0024137:	50                   	push   %eax
c0024138:	e8 a4 f3 ff ff       	call   c00234e1 <lock_init>
c002413d:	83 c4 10             	add    $0x10,%esp
c0024140:	d1 65 f4             	shll   -0xc(%ebp)
c0024143:	81 7d f4 ff 07 00 00 	cmpl   $0x7ff,-0xc(%ebp)
c002414a:	0f 86 5f ff ff ff    	jbe    c00240af <malloc_init+0x12>
c0024150:	90                   	nop
c0024151:	c9                   	leave  
c0024152:	c3                   	ret    

c0024153 <malloc>:
c0024153:	55                   	push   %ebp
c0024154:	89 e5                	mov    %esp,%ebp
c0024156:	83 ec 28             	sub    $0x28,%esp
c0024159:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002415d:	75 0a                	jne    c0024169 <malloc+0x16>
c002415f:	b8 00 00 00 00       	mov    $0x0,%eax
c0024164:	e9 b6 01 00 00       	jmp    c002431f <malloc+0x1cc>
c0024169:	c7 45 f4 20 fc 03 c0 	movl   $0xc003fc20,-0xc(%ebp)
c0024170:	eb 0e                	jmp    c0024180 <malloc+0x2d>
c0024172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024175:	8b 00                	mov    (%eax),%eax
c0024177:	3b 45 08             	cmp    0x8(%ebp),%eax
c002417a:	73 21                	jae    c002419d <malloc+0x4a>
c002417c:	83 45 f4 3c          	addl   $0x3c,-0xc(%ebp)
c0024180:	a1 78 fe 03 c0       	mov    0xc003fe78,%eax
c0024185:	c1 e0 02             	shl    $0x2,%eax
c0024188:	89 c2                	mov    %eax,%edx
c002418a:	c1 e2 04             	shl    $0x4,%edx
c002418d:	29 c2                	sub    %eax,%edx
c002418f:	89 d0                	mov    %edx,%eax
c0024191:	05 20 fc 03 c0       	add    $0xc003fc20,%eax
c0024196:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0024199:	77 d7                	ja     c0024172 <malloc+0x1f>
c002419b:	eb 01                	jmp    c002419e <malloc+0x4b>
c002419d:	90                   	nop
c002419e:	a1 78 fe 03 c0       	mov    0xc003fe78,%eax
c00241a3:	c1 e0 02             	shl    $0x2,%eax
c00241a6:	89 c2                	mov    %eax,%edx
c00241a8:	c1 e2 04             	shl    $0x4,%edx
c00241ab:	29 c2                	sub    %eax,%edx
c00241ad:	89 d0                	mov    %edx,%eax
c00241af:	05 20 fc 03 c0       	add    $0xc003fc20,%eax
c00241b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00241b7:	75 58                	jne    c0024211 <malloc+0xbe>
c00241b9:	8b 45 08             	mov    0x8(%ebp),%eax
c00241bc:	05 0b 10 00 00       	add    $0x100b,%eax
c00241c1:	c1 e8 0c             	shr    $0xc,%eax
c00241c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00241c7:	83 ec 08             	sub    $0x8,%esp
c00241ca:	ff 75 ec             	pushl  -0x14(%ebp)
c00241cd:	6a 00                	push   $0x0
c00241cf:	e8 60 fb ff ff       	call   c0023d34 <palloc_get_multiple>
c00241d4:	83 c4 10             	add    $0x10,%esp
c00241d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00241da:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00241de:	75 0a                	jne    c00241ea <malloc+0x97>
c00241e0:	b8 00 00 00 00       	mov    $0x0,%eax
c00241e5:	e9 35 01 00 00       	jmp    c002431f <malloc+0x1cc>
c00241ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00241ed:	c7 00 ed 8e 54 9a    	movl   $0x9a548eed,(%eax)
c00241f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00241f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c00241fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024200:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0024203:	89 50 08             	mov    %edx,0x8(%eax)
c0024206:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024209:	83 c0 0c             	add    $0xc,%eax
c002420c:	e9 0e 01 00 00       	jmp    c002431f <malloc+0x1cc>
c0024211:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024214:	83 c0 18             	add    $0x18,%eax
c0024217:	83 ec 0c             	sub    $0xc,%esp
c002421a:	50                   	push   %eax
c002421b:	e8 0e f3 ff ff       	call   c002352e <lock_acquire>
c0024220:	83 c4 10             	add    $0x10,%esp
c0024223:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024226:	83 c0 08             	add    $0x8,%eax
c0024229:	83 ec 0c             	sub    $0xc,%esp
c002422c:	50                   	push   %eax
c002422d:	e8 5a 6b 00 00       	call   c002ad8c <list_empty>
c0024232:	83 c4 10             	add    $0x10,%esp
c0024235:	84 c0                	test   %al,%al
c0024237:	0f 84 92 00 00 00    	je     c00242cf <malloc+0x17c>
c002423d:	83 ec 0c             	sub    $0xc,%esp
c0024240:	6a 00                	push   $0x0
c0024242:	e8 c1 fb ff ff       	call   c0023e08 <palloc_get_page>
c0024247:	83 c4 10             	add    $0x10,%esp
c002424a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002424d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0024251:	75 1c                	jne    c002426f <malloc+0x11c>
c0024253:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024256:	83 c0 18             	add    $0x18,%eax
c0024259:	83 ec 0c             	sub    $0xc,%esp
c002425c:	50                   	push   %eax
c002425d:	e8 0d f5 ff ff       	call   c002376f <lock_release>
c0024262:	83 c4 10             	add    $0x10,%esp
c0024265:	b8 00 00 00 00       	mov    $0x0,%eax
c002426a:	e9 b0 00 00 00       	jmp    c002431f <malloc+0x1cc>
c002426f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024272:	c7 00 ed 8e 54 9a    	movl   $0x9a548eed,(%eax)
c0024278:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002427b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002427e:	89 50 04             	mov    %edx,0x4(%eax)
c0024281:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024284:	8b 50 04             	mov    0x4(%eax),%edx
c0024287:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002428a:	89 50 08             	mov    %edx,0x8(%eax)
c002428d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0024294:	eb 2e                	jmp    c00242c4 <malloc+0x171>
c0024296:	83 ec 08             	sub    $0x8,%esp
c0024299:	ff 75 f0             	pushl  -0x10(%ebp)
c002429c:	ff 75 e8             	pushl  -0x18(%ebp)
c002429f:	e8 ea 03 00 00       	call   c002468e <arena_to_block>
c00242a4:	83 c4 10             	add    $0x10,%esp
c00242a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00242aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00242ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00242b0:	83 c2 08             	add    $0x8,%edx
c00242b3:	83 ec 08             	sub    $0x8,%esp
c00242b6:	50                   	push   %eax
c00242b7:	52                   	push   %edx
c00242b8:	e8 27 69 00 00       	call   c002abe4 <list_push_back>
c00242bd:	83 c4 10             	add    $0x10,%esp
c00242c0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c00242c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00242c7:	8b 40 04             	mov    0x4(%eax),%eax
c00242ca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c00242cd:	77 c7                	ja     c0024296 <malloc+0x143>
c00242cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00242d2:	83 c0 08             	add    $0x8,%eax
c00242d5:	83 ec 0c             	sub    $0xc,%esp
c00242d8:	50                   	push   %eax
c00242d9:	e8 85 69 00 00       	call   c002ac63 <list_pop_front>
c00242de:	83 c4 10             	add    $0x10,%esp
c00242e1:	83 c0 04             	add    $0x4,%eax
c00242e4:	83 e8 04             	sub    $0x4,%eax
c00242e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00242ea:	83 ec 0c             	sub    $0xc,%esp
c00242ed:	ff 75 e0             	pushl  -0x20(%ebp)
c00242f0:	e8 9b 02 00 00       	call   c0024590 <block_to_arena>
c00242f5:	83 c4 10             	add    $0x10,%esp
c00242f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00242fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00242fe:	8b 40 08             	mov    0x8(%eax),%eax
c0024301:	8d 50 ff             	lea    -0x1(%eax),%edx
c0024304:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024307:	89 50 08             	mov    %edx,0x8(%eax)
c002430a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002430d:	83 c0 18             	add    $0x18,%eax
c0024310:	83 ec 0c             	sub    $0xc,%esp
c0024313:	50                   	push   %eax
c0024314:	e8 56 f4 ff ff       	call   c002376f <lock_release>
c0024319:	83 c4 10             	add    $0x10,%esp
c002431c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002431f:	c9                   	leave  
c0024320:	c3                   	ret    

c0024321 <calloc>:
c0024321:	55                   	push   %ebp
c0024322:	89 e5                	mov    %esp,%ebp
c0024324:	83 ec 18             	sub    $0x18,%esp
c0024327:	8b 45 08             	mov    0x8(%ebp),%eax
c002432a:	0f af 45 0c          	imul   0xc(%ebp),%eax
c002432e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024331:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024334:	3b 45 08             	cmp    0x8(%ebp),%eax
c0024337:	72 08                	jb     c0024341 <calloc+0x20>
c0024339:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002433c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002433f:	73 07                	jae    c0024348 <calloc+0x27>
c0024341:	b8 00 00 00 00       	mov    $0x0,%eax
c0024346:	eb 2d                	jmp    c0024375 <calloc+0x54>
c0024348:	83 ec 0c             	sub    $0xc,%esp
c002434b:	ff 75 f4             	pushl  -0xc(%ebp)
c002434e:	e8 00 fe ff ff       	call   c0024153 <malloc>
c0024353:	83 c4 10             	add    $0x10,%esp
c0024356:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024359:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002435d:	74 13                	je     c0024372 <calloc+0x51>
c002435f:	83 ec 04             	sub    $0x4,%esp
c0024362:	ff 75 f4             	pushl  -0xc(%ebp)
c0024365:	6a 00                	push   $0x0
c0024367:	ff 75 f0             	pushl  -0x10(%ebp)
c002436a:	e8 e8 54 00 00       	call   c0029857 <memset>
c002436f:	83 c4 10             	add    $0x10,%esp
c0024372:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024375:	c9                   	leave  
c0024376:	c3                   	ret    

c0024377 <block_size>:
c0024377:	55                   	push   %ebp
c0024378:	89 e5                	mov    %esp,%ebp
c002437a:	53                   	push   %ebx
c002437b:	83 ec 14             	sub    $0x14,%esp
c002437e:	8b 45 08             	mov    0x8(%ebp),%eax
c0024381:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024384:	83 ec 0c             	sub    $0xc,%esp
c0024387:	ff 75 f4             	pushl  -0xc(%ebp)
c002438a:	e8 01 02 00 00       	call   c0024590 <block_to_arena>
c002438f:	83 c4 10             	add    $0x10,%esp
c0024392:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024395:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024398:	8b 40 04             	mov    0x4(%eax),%eax
c002439b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002439e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00243a2:	74 07                	je     c00243ab <block_size+0x34>
c00243a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00243a7:	8b 00                	mov    (%eax),%eax
c00243a9:	eb 1d                	jmp    c00243c8 <block_size+0x51>
c00243ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00243ae:	8b 40 08             	mov    0x8(%eax),%eax
c00243b1:	c1 e0 0c             	shl    $0xc,%eax
c00243b4:	89 c3                	mov    %eax,%ebx
c00243b6:	83 ec 0c             	sub    $0xc,%esp
c00243b9:	ff 75 08             	pushl  0x8(%ebp)
c00243bc:	e8 c2 fc ff ff       	call   c0024083 <pg_ofs>
c00243c1:	83 c4 10             	add    $0x10,%esp
c00243c4:	29 c3                	sub    %eax,%ebx
c00243c6:	89 d8                	mov    %ebx,%eax
c00243c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00243cb:	c9                   	leave  
c00243cc:	c3                   	ret    

c00243cd <realloc>:
c00243cd:	55                   	push   %ebp
c00243ce:	89 e5                	mov    %esp,%ebp
c00243d0:	83 ec 18             	sub    $0x18,%esp
c00243d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00243d7:	75 15                	jne    c00243ee <realloc+0x21>
c00243d9:	83 ec 0c             	sub    $0xc,%esp
c00243dc:	ff 75 08             	pushl  0x8(%ebp)
c00243df:	e8 6c 00 00 00       	call   c0024450 <free>
c00243e4:	83 c4 10             	add    $0x10,%esp
c00243e7:	b8 00 00 00 00       	mov    $0x0,%eax
c00243ec:	eb 60                	jmp    c002444e <realloc+0x81>
c00243ee:	83 ec 0c             	sub    $0xc,%esp
c00243f1:	ff 75 0c             	pushl  0xc(%ebp)
c00243f4:	e8 5a fd ff ff       	call   c0024153 <malloc>
c00243f9:	83 c4 10             	add    $0x10,%esp
c00243fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00243ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0024403:	74 46                	je     c002444b <realloc+0x7e>
c0024405:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0024409:	74 40                	je     c002444b <realloc+0x7e>
c002440b:	83 ec 0c             	sub    $0xc,%esp
c002440e:	ff 75 08             	pushl  0x8(%ebp)
c0024411:	e8 61 ff ff ff       	call   c0024377 <block_size>
c0024416:	83 c4 10             	add    $0x10,%esp
c0024419:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002441c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002441f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0024422:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
c0024426:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024429:	83 ec 04             	sub    $0x4,%esp
c002442c:	ff 75 ec             	pushl  -0x14(%ebp)
c002442f:	ff 75 08             	pushl  0x8(%ebp)
c0024432:	ff 75 f4             	pushl  -0xc(%ebp)
c0024435:	e8 17 4e 00 00       	call   c0029251 <memcpy>
c002443a:	83 c4 10             	add    $0x10,%esp
c002443d:	83 ec 0c             	sub    $0xc,%esp
c0024440:	ff 75 08             	pushl  0x8(%ebp)
c0024443:	e8 08 00 00 00       	call   c0024450 <free>
c0024448:	83 c4 10             	add    $0x10,%esp
c002444b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002444e:	c9                   	leave  
c002444f:	c3                   	ret    

c0024450 <free>:
c0024450:	55                   	push   %ebp
c0024451:	89 e5                	mov    %esp,%ebp
c0024453:	83 ec 28             	sub    $0x28,%esp
c0024456:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002445a:	0f 84 2e 01 00 00    	je     c002458e <free+0x13e>
c0024460:	8b 45 08             	mov    0x8(%ebp),%eax
c0024463:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024466:	83 ec 0c             	sub    $0xc,%esp
c0024469:	ff 75 f0             	pushl  -0x10(%ebp)
c002446c:	e8 1f 01 00 00       	call   c0024590 <block_to_arena>
c0024471:	83 c4 10             	add    $0x10,%esp
c0024474:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024477:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002447a:	8b 40 04             	mov    0x4(%eax),%eax
c002447d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0024480:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0024484:	0f 84 ee 00 00 00    	je     c0024578 <free+0x128>
c002448a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002448d:	8b 00                	mov    (%eax),%eax
c002448f:	83 ec 04             	sub    $0x4,%esp
c0024492:	50                   	push   %eax
c0024493:	68 cc 00 00 00       	push   $0xcc
c0024498:	ff 75 f0             	pushl  -0x10(%ebp)
c002449b:	e8 b7 53 00 00       	call   c0029857 <memset>
c00244a0:	83 c4 10             	add    $0x10,%esp
c00244a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00244a6:	83 c0 18             	add    $0x18,%eax
c00244a9:	83 ec 0c             	sub    $0xc,%esp
c00244ac:	50                   	push   %eax
c00244ad:	e8 7c f0 ff ff       	call   c002352e <lock_acquire>
c00244b2:	83 c4 10             	add    $0x10,%esp
c00244b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00244b8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00244bb:	83 c2 08             	add    $0x8,%edx
c00244be:	83 ec 08             	sub    $0x8,%esp
c00244c1:	50                   	push   %eax
c00244c2:	52                   	push   %edx
c00244c3:	e8 f6 66 00 00       	call   c002abbe <list_push_front>
c00244c8:	83 c4 10             	add    $0x10,%esp
c00244cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00244ce:	8b 40 08             	mov    0x8(%eax),%eax
c00244d1:	8d 50 01             	lea    0x1(%eax),%edx
c00244d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00244d7:	89 50 08             	mov    %edx,0x8(%eax)
c00244da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00244dd:	8b 50 08             	mov    0x8(%eax),%edx
c00244e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00244e3:	8b 40 04             	mov    0x4(%eax),%eax
c00244e6:	39 c2                	cmp    %eax,%edx
c00244e8:	72 7a                	jb     c0024564 <free+0x114>
c00244ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00244ed:	8b 50 08             	mov    0x8(%eax),%edx
c00244f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00244f3:	8b 40 04             	mov    0x4(%eax),%eax
c00244f6:	39 c2                	cmp    %eax,%edx
c00244f8:	74 21                	je     c002451b <free+0xcb>
c00244fa:	83 ec 0c             	sub    $0xc,%esp
c00244fd:	68 e8 4e 03 c0       	push   $0xc0034ee8
c0024502:	68 b9 4e 03 c0       	push   $0xc0034eb9
c0024507:	68 d0 4f 03 c0       	push   $0xc0034fd0
c002450c:	68 f6 00 00 00       	push   $0xf6
c0024511:	68 d0 4e 03 c0       	push   $0xc0034ed0
c0024516:	e8 76 60 00 00       	call   c002a591 <debug_panic>
c002451b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0024522:	eb 27                	jmp    c002454b <free+0xfb>
c0024524:	83 ec 08             	sub    $0x8,%esp
c0024527:	ff 75 f4             	pushl  -0xc(%ebp)
c002452a:	ff 75 ec             	pushl  -0x14(%ebp)
c002452d:	e8 5c 01 00 00       	call   c002468e <arena_to_block>
c0024532:	83 c4 10             	add    $0x10,%esp
c0024535:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0024538:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002453b:	83 ec 0c             	sub    $0xc,%esp
c002453e:	50                   	push   %eax
c002453f:	e8 c6 66 00 00       	call   c002ac0a <list_remove>
c0024544:	83 c4 10             	add    $0x10,%esp
c0024547:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002454b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002454e:	8b 40 04             	mov    0x4(%eax),%eax
c0024551:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0024554:	77 ce                	ja     c0024524 <free+0xd4>
c0024556:	83 ec 0c             	sub    $0xc,%esp
c0024559:	ff 75 ec             	pushl  -0x14(%ebp)
c002455c:	e8 ff f9 ff ff       	call   c0023f60 <palloc_free_page>
c0024561:	83 c4 10             	add    $0x10,%esp
c0024564:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024567:	83 c0 18             	add    $0x18,%eax
c002456a:	83 ec 0c             	sub    $0xc,%esp
c002456d:	50                   	push   %eax
c002456e:	e8 fc f1 ff ff       	call   c002376f <lock_release>
c0024573:	83 c4 10             	add    $0x10,%esp
c0024576:	eb 16                	jmp    c002458e <free+0x13e>
c0024578:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002457b:	8b 40 08             	mov    0x8(%eax),%eax
c002457e:	83 ec 08             	sub    $0x8,%esp
c0024581:	50                   	push   %eax
c0024582:	ff 75 ec             	pushl  -0x14(%ebp)
c0024585:	e8 96 f8 ff ff       	call   c0023e20 <palloc_free_multiple>
c002458a:	83 c4 10             	add    $0x10,%esp
c002458d:	90                   	nop
c002458e:	c9                   	leave  
c002458f:	c3                   	ret    

c0024590 <block_to_arena>:
c0024590:	55                   	push   %ebp
c0024591:	89 e5                	mov    %esp,%ebp
c0024593:	83 ec 18             	sub    $0x18,%esp
c0024596:	ff 75 08             	pushl  0x8(%ebp)
c0024599:	e8 f2 fa ff ff       	call   c0024090 <pg_round_down>
c002459e:	83 c4 04             	add    $0x4,%esp
c00245a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00245a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00245a8:	75 21                	jne    c00245cb <block_to_arena+0x3b>
c00245aa:	83 ec 0c             	sub    $0xc,%esp
c00245ad:	68 0b 4f 03 c0       	push   $0xc0034f0b
c00245b2:	68 b9 4e 03 c0       	push   $0xc0034eb9
c00245b7:	68 d8 4f 03 c0       	push   $0xc0034fd8
c00245bc:	68 11 01 00 00       	push   $0x111
c00245c1:	68 d0 4e 03 c0       	push   $0xc0034ed0
c00245c6:	e8 c6 5f 00 00       	call   c002a591 <debug_panic>
c00245cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00245ce:	8b 00                	mov    (%eax),%eax
c00245d0:	3d ed 8e 54 9a       	cmp    $0x9a548eed,%eax
c00245d5:	74 21                	je     c00245f8 <block_to_arena+0x68>
c00245d7:	83 ec 0c             	sub    $0xc,%esp
c00245da:	68 15 4f 03 c0       	push   $0xc0034f15
c00245df:	68 b9 4e 03 c0       	push   $0xc0034eb9
c00245e4:	68 d8 4f 03 c0       	push   $0xc0034fd8
c00245e9:	68 12 01 00 00       	push   $0x112
c00245ee:	68 d0 4e 03 c0       	push   $0xc0034ed0
c00245f3:	e8 99 5f 00 00       	call   c002a591 <debug_panic>
c00245f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00245fb:	8b 40 04             	mov    0x4(%eax),%eax
c00245fe:	85 c0                	test   %eax,%eax
c0024600:	74 49                	je     c002464b <block_to_arena+0xbb>
c0024602:	83 ec 0c             	sub    $0xc,%esp
c0024605:	ff 75 08             	pushl  0x8(%ebp)
c0024608:	e8 76 fa ff ff       	call   c0024083 <pg_ofs>
c002460d:	83 c4 10             	add    $0x10,%esp
c0024610:	8d 50 f4             	lea    -0xc(%eax),%edx
c0024613:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024616:	8b 40 04             	mov    0x4(%eax),%eax
c0024619:	8b 08                	mov    (%eax),%ecx
c002461b:	89 d0                	mov    %edx,%eax
c002461d:	ba 00 00 00 00       	mov    $0x0,%edx
c0024622:	f7 f1                	div    %ecx
c0024624:	89 d0                	mov    %edx,%eax
c0024626:	85 c0                	test   %eax,%eax
c0024628:	74 21                	je     c002464b <block_to_arena+0xbb>
c002462a:	83 ec 0c             	sub    $0xc,%esp
c002462d:	68 30 4f 03 c0       	push   $0xc0034f30
c0024632:	68 b9 4e 03 c0       	push   $0xc0034eb9
c0024637:	68 d8 4f 03 c0       	push   $0xc0034fd8
c002463c:	68 16 01 00 00       	push   $0x116
c0024641:	68 d0 4e 03 c0       	push   $0xc0034ed0
c0024646:	e8 46 5f 00 00       	call   c002a591 <debug_panic>
c002464b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002464e:	8b 40 04             	mov    0x4(%eax),%eax
c0024651:	85 c0                	test   %eax,%eax
c0024653:	75 34                	jne    c0024689 <block_to_arena+0xf9>
c0024655:	83 ec 0c             	sub    $0xc,%esp
c0024658:	ff 75 08             	pushl  0x8(%ebp)
c002465b:	e8 23 fa ff ff       	call   c0024083 <pg_ofs>
c0024660:	83 c4 10             	add    $0x10,%esp
c0024663:	83 f8 0c             	cmp    $0xc,%eax
c0024666:	74 21                	je     c0024689 <block_to_arena+0xf9>
c0024668:	83 ec 0c             	sub    $0xc,%esp
c002466b:	68 78 4f 03 c0       	push   $0xc0034f78
c0024670:	68 b9 4e 03 c0       	push   $0xc0034eb9
c0024675:	68 d8 4f 03 c0       	push   $0xc0034fd8
c002467a:	68 17 01 00 00       	push   $0x117
c002467f:	68 d0 4e 03 c0       	push   $0xc0034ed0
c0024684:	e8 08 5f 00 00       	call   c002a591 <debug_panic>
c0024689:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002468c:	c9                   	leave  
c002468d:	c3                   	ret    

c002468e <arena_to_block>:
c002468e:	55                   	push   %ebp
c002468f:	89 e5                	mov    %esp,%ebp
c0024691:	83 ec 08             	sub    $0x8,%esp
c0024694:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0024698:	75 21                	jne    c00246bb <arena_to_block+0x2d>
c002469a:	83 ec 0c             	sub    $0xc,%esp
c002469d:	68 0b 4f 03 c0       	push   $0xc0034f0b
c00246a2:	68 b9 4e 03 c0       	push   $0xc0034eb9
c00246a7:	68 e8 4f 03 c0       	push   $0xc0034fe8
c00246ac:	68 20 01 00 00       	push   $0x120
c00246b1:	68 d0 4e 03 c0       	push   $0xc0034ed0
c00246b6:	e8 d6 5e 00 00       	call   c002a591 <debug_panic>
c00246bb:	8b 45 08             	mov    0x8(%ebp),%eax
c00246be:	8b 00                	mov    (%eax),%eax
c00246c0:	3d ed 8e 54 9a       	cmp    $0x9a548eed,%eax
c00246c5:	74 21                	je     c00246e8 <arena_to_block+0x5a>
c00246c7:	83 ec 0c             	sub    $0xc,%esp
c00246ca:	68 15 4f 03 c0       	push   $0xc0034f15
c00246cf:	68 b9 4e 03 c0       	push   $0xc0034eb9
c00246d4:	68 e8 4f 03 c0       	push   $0xc0034fe8
c00246d9:	68 21 01 00 00       	push   $0x121
c00246de:	68 d0 4e 03 c0       	push   $0xc0034ed0
c00246e3:	e8 a9 5e 00 00       	call   c002a591 <debug_panic>
c00246e8:	8b 45 08             	mov    0x8(%ebp),%eax
c00246eb:	8b 40 04             	mov    0x4(%eax),%eax
c00246ee:	8b 40 04             	mov    0x4(%eax),%eax
c00246f1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00246f4:	77 21                	ja     c0024717 <arena_to_block+0x89>
c00246f6:	83 ec 0c             	sub    $0xc,%esp
c00246f9:	68 a4 4f 03 c0       	push   $0xc0034fa4
c00246fe:	68 b9 4e 03 c0       	push   $0xc0034eb9
c0024703:	68 e8 4f 03 c0       	push   $0xc0034fe8
c0024708:	68 22 01 00 00       	push   $0x122
c002470d:	68 d0 4e 03 c0       	push   $0xc0034ed0
c0024712:	e8 7a 5e 00 00       	call   c002a591 <debug_panic>
c0024717:	8b 45 08             	mov    0x8(%ebp),%eax
c002471a:	8b 40 04             	mov    0x4(%eax),%eax
c002471d:	8b 00                	mov    (%eax),%eax
c002471f:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0024723:	8d 50 0c             	lea    0xc(%eax),%edx
c0024726:	8b 45 08             	mov    0x8(%ebp),%eax
c0024729:	01 d0                	add    %edx,%eax
c002472b:	c9                   	leave  
c002472c:	c3                   	ret    

c002472d <outb>:
c002472d:	55                   	push   %ebp
c002472e:	89 e5                	mov    %esp,%ebp
c0024730:	83 ec 08             	sub    $0x8,%esp
c0024733:	8b 55 08             	mov    0x8(%ebp),%edx
c0024736:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024739:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c002473d:	88 45 f8             	mov    %al,-0x8(%ebp)
c0024740:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0024744:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0024748:	ee                   	out    %al,(%dx)
c0024749:	90                   	nop
c002474a:	c9                   	leave  
c002474b:	c3                   	ret    

c002474c <pit_configure_channel>:
c002474c:	55                   	push   %ebp
c002474d:	89 e5                	mov    %esp,%ebp
c002474f:	83 ec 18             	sub    $0x18,%esp
c0024752:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0024756:	74 24                	je     c002477c <pit_configure_channel+0x30>
c0024758:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c002475c:	74 1e                	je     c002477c <pit_configure_channel+0x30>
c002475e:	83 ec 0c             	sub    $0xc,%esp
c0024761:	68 f8 4f 03 c0       	push   $0xc0034ff8
c0024766:	68 15 50 03 c0       	push   $0xc0035015
c002476b:	68 58 50 03 c0       	push   $0xc0035058
c0024770:	6a 33                	push   $0x33
c0024772:	68 2c 50 03 c0       	push   $0xc003502c
c0024777:	e8 15 5e 00 00       	call   c002a591 <debug_panic>
c002477c:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
c0024780:	74 24                	je     c00247a6 <pit_configure_channel+0x5a>
c0024782:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
c0024786:	74 1e                	je     c00247a6 <pit_configure_channel+0x5a>
c0024788:	83 ec 0c             	sub    $0xc,%esp
c002478b:	68 40 50 03 c0       	push   $0xc0035040
c0024790:	68 15 50 03 c0       	push   $0xc0035015
c0024795:	68 58 50 03 c0       	push   $0xc0035058
c002479a:	6a 34                	push   $0x34
c002479c:	68 2c 50 03 c0       	push   $0xc003502c
c00247a1:	e8 eb 5d 00 00       	call   c002a591 <debug_panic>
c00247a6:	83 7d 10 12          	cmpl   $0x12,0x10(%ebp)
c00247aa:	7f 08                	jg     c00247b4 <pit_configure_channel+0x68>
c00247ac:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c00247b2:	eb 2a                	jmp    c00247de <pit_configure_channel+0x92>
c00247b4:	81 7d 10 dc 34 12 00 	cmpl   $0x1234dc,0x10(%ebp)
c00247bb:	7e 08                	jle    c00247c5 <pit_configure_channel+0x79>
c00247bd:	66 c7 45 f6 02 00    	movw   $0x2,-0xa(%ebp)
c00247c3:	eb 19                	jmp    c00247de <pit_configure_channel+0x92>
c00247c5:	8b 45 10             	mov    0x10(%ebp),%eax
c00247c8:	89 c2                	mov    %eax,%edx
c00247ca:	c1 ea 1f             	shr    $0x1f,%edx
c00247cd:	01 d0                	add    %edx,%eax
c00247cf:	d1 f8                	sar    %eax
c00247d1:	05 dc 34 12 00       	add    $0x1234dc,%eax
c00247d6:	99                   	cltd   
c00247d7:	f7 7d 10             	idivl  0x10(%ebp)
c00247da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c00247de:	e8 09 d6 ff ff       	call   c0021dec <intr_disable>
c00247e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00247e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00247e9:	c1 e0 06             	shl    $0x6,%eax
c00247ec:	83 c8 30             	or     $0x30,%eax
c00247ef:	89 c2                	mov    %eax,%edx
c00247f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00247f4:	01 c0                	add    %eax,%eax
c00247f6:	09 d0                	or     %edx,%eax
c00247f8:	0f b6 c0             	movzbl %al,%eax
c00247fb:	83 ec 08             	sub    $0x8,%esp
c00247fe:	50                   	push   %eax
c00247ff:	6a 43                	push   $0x43
c0024801:	e8 27 ff ff ff       	call   c002472d <outb>
c0024806:	83 c4 10             	add    $0x10,%esp
c0024809:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c002480d:	0f b6 d0             	movzbl %al,%edx
c0024810:	8b 45 08             	mov    0x8(%ebp),%eax
c0024813:	83 c0 40             	add    $0x40,%eax
c0024816:	0f b7 c0             	movzwl %ax,%eax
c0024819:	83 ec 08             	sub    $0x8,%esp
c002481c:	52                   	push   %edx
c002481d:	50                   	push   %eax
c002481e:	e8 0a ff ff ff       	call   c002472d <outb>
c0024823:	83 c4 10             	add    $0x10,%esp
c0024826:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c002482a:	66 c1 e8 08          	shr    $0x8,%ax
c002482e:	0f b6 d0             	movzbl %al,%edx
c0024831:	8b 45 08             	mov    0x8(%ebp),%eax
c0024834:	83 c0 40             	add    $0x40,%eax
c0024837:	0f b7 c0             	movzwl %ax,%eax
c002483a:	83 ec 08             	sub    $0x8,%esp
c002483d:	52                   	push   %edx
c002483e:	50                   	push   %eax
c002483f:	e8 e9 fe ff ff       	call   c002472d <outb>
c0024844:	83 c4 10             	add    $0x10,%esp
c0024847:	83 ec 0c             	sub    $0xc,%esp
c002484a:	ff 75 f0             	pushl  -0x10(%ebp)
c002484d:	e8 42 d5 ff ff       	call   c0021d94 <intr_set_level>
c0024852:	83 c4 10             	add    $0x10,%esp
c0024855:	90                   	nop
c0024856:	c9                   	leave  
c0024857:	c3                   	ret    

c0024858 <timer_init>:
c0024858:	55                   	push   %ebp
c0024859:	89 e5                	mov    %esp,%ebp
c002485b:	83 ec 08             	sub    $0x8,%esp
c002485e:	83 ec 0c             	sub    $0xc,%esp
c0024861:	68 8c fe 03 c0       	push   $0xc003fe8c
c0024866:	e8 99 5f 00 00       	call   c002a804 <list_init>
c002486b:	83 c4 10             	add    $0x10,%esp
c002486e:	83 ec 04             	sub    $0x4,%esp
c0024871:	6a 64                	push   $0x64
c0024873:	6a 02                	push   $0x2
c0024875:	6a 00                	push   $0x0
c0024877:	e8 d0 fe ff ff       	call   c002474c <pit_configure_channel>
c002487c:	83 c4 10             	add    $0x10,%esp
c002487f:	83 ec 04             	sub    $0x4,%esp
c0024882:	68 70 50 03 c0       	push   $0xc0035070
c0024887:	68 e1 4b 02 c0       	push   $0xc0024be1
c002488c:	6a 20                	push   $0x20
c002488e:	e8 7a d7 ff ff       	call   c002200d <intr_register_ext>
c0024893:	83 c4 10             	add    $0x10,%esp
c0024896:	90                   	nop
c0024897:	c9                   	leave  
c0024898:	c3                   	ret    

c0024899 <timer_calibrate>:
c0024899:	55                   	push   %ebp
c002489a:	89 e5                	mov    %esp,%ebp
c002489c:	53                   	push   %ebx
c002489d:	83 ec 14             	sub    $0x14,%esp
c00248a0:	e8 d2 d4 ff ff       	call   c0021d77 <intr_get_level>
c00248a5:	83 f8 01             	cmp    $0x1,%eax
c00248a8:	74 1e                	je     c00248c8 <timer_calibrate+0x2f>
c00248aa:	83 ec 0c             	sub    $0xc,%esp
c00248ad:	68 7b 50 03 c0       	push   $0xc003507b
c00248b2:	68 98 50 03 c0       	push   $0xc0035098
c00248b7:	68 28 51 03 c0       	push   $0xc0035128
c00248bc:	6a 34                	push   $0x34
c00248be:	68 af 50 03 c0       	push   $0xc00350af
c00248c3:	e8 c9 5c 00 00       	call   c002a591 <debug_panic>
c00248c8:	83 ec 0c             	sub    $0xc,%esp
c00248cb:	68 c5 50 03 c0       	push   $0xc00350c5
c00248d0:	e8 5b 37 00 00       	call   c0028030 <printf>
c00248d5:	83 c4 10             	add    $0x10,%esp
c00248d8:	c7 05 88 fe 03 c0 00 	movl   $0x400,0xc003fe88
c00248df:	04 00 00 
c00248e2:	eb 33                	jmp    c0024917 <timer_calibrate+0x7e>
c00248e4:	a1 88 fe 03 c0       	mov    0xc003fe88,%eax
c00248e9:	01 c0                	add    %eax,%eax
c00248eb:	a3 88 fe 03 c0       	mov    %eax,0xc003fe88
c00248f0:	a1 88 fe 03 c0       	mov    0xc003fe88,%eax
c00248f5:	85 c0                	test   %eax,%eax
c00248f7:	75 1e                	jne    c0024917 <timer_calibrate+0x7e>
c00248f9:	83 ec 0c             	sub    $0xc,%esp
c00248fc:	68 dc 50 03 c0       	push   $0xc00350dc
c0024901:	68 98 50 03 c0       	push   $0xc0035098
c0024906:	68 28 51 03 c0       	push   $0xc0035128
c002490b:	6a 3d                	push   $0x3d
c002490d:	68 af 50 03 c0       	push   $0xc00350af
c0024912:	e8 7a 5c 00 00       	call   c002a591 <debug_panic>
c0024917:	a1 88 fe 03 c0       	mov    0xc003fe88,%eax
c002491c:	01 c0                	add    %eax,%eax
c002491e:	83 ec 0c             	sub    $0xc,%esp
c0024921:	50                   	push   %eax
c0024922:	e8 ca 03 00 00       	call   c0024cf1 <too_many_loops>
c0024927:	83 c4 10             	add    $0x10,%esp
c002492a:	83 f0 01             	xor    $0x1,%eax
c002492d:	84 c0                	test   %al,%al
c002492f:	75 b3                	jne    c00248e4 <timer_calibrate+0x4b>
c0024931:	a1 88 fe 03 c0       	mov    0xc003fe88,%eax
c0024936:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024939:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002493c:	d1 e8                	shr    %eax
c002493e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024941:	eb 29                	jmp    c002496c <timer_calibrate+0xd3>
c0024943:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024946:	0b 45 f4             	or     -0xc(%ebp),%eax
c0024949:	83 ec 0c             	sub    $0xc,%esp
c002494c:	50                   	push   %eax
c002494d:	e8 9f 03 00 00       	call   c0024cf1 <too_many_loops>
c0024952:	83 c4 10             	add    $0x10,%esp
c0024955:	83 f0 01             	xor    $0x1,%eax
c0024958:	84 c0                	test   %al,%al
c002495a:	74 0d                	je     c0024969 <timer_calibrate+0xd0>
c002495c:	a1 88 fe 03 c0       	mov    0xc003fe88,%eax
c0024961:	0b 45 f4             	or     -0xc(%ebp),%eax
c0024964:	a3 88 fe 03 c0       	mov    %eax,0xc003fe88
c0024969:	d1 6d f4             	shrl   -0xc(%ebp)
c002496c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002496f:	c1 e8 0a             	shr    $0xa,%eax
c0024972:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0024975:	75 cc                	jne    c0024943 <timer_calibrate+0xaa>
c0024977:	a1 88 fe 03 c0       	mov    0xc003fe88,%eax
c002497c:	ba 00 00 00 00       	mov    $0x0,%edx
c0024981:	6b da 64             	imul   $0x64,%edx,%ebx
c0024984:	6b c8 00             	imul   $0x0,%eax,%ecx
c0024987:	01 d9                	add    %ebx,%ecx
c0024989:	bb 64 00 00 00       	mov    $0x64,%ebx
c002498e:	f7 e3                	mul    %ebx
c0024990:	01 d1                	add    %edx,%ecx
c0024992:	89 ca                	mov    %ecx,%edx
c0024994:	83 ec 04             	sub    $0x4,%esp
c0024997:	52                   	push   %edx
c0024998:	50                   	push   %eax
c0024999:	68 f0 50 03 c0       	push   $0xc00350f0
c002499e:	e8 8d 36 00 00       	call   c0028030 <printf>
c00249a3:	83 c4 10             	add    $0x10,%esp
c00249a6:	90                   	nop
c00249a7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00249aa:	c9                   	leave  
c00249ab:	c3                   	ret    

c00249ac <timer_ticks>:
c00249ac:	55                   	push   %ebp
c00249ad:	89 e5                	mov    %esp,%ebp
c00249af:	83 ec 18             	sub    $0x18,%esp
c00249b2:	e8 35 d4 ff ff       	call   c0021dec <intr_disable>
c00249b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00249ba:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c00249bf:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c00249c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00249c8:	89 55 ec             	mov    %edx,-0x14(%ebp)
c00249cb:	83 ec 0c             	sub    $0xc,%esp
c00249ce:	ff 75 f4             	pushl  -0xc(%ebp)
c00249d1:	e8 be d3 ff ff       	call   c0021d94 <intr_set_level>
c00249d6:	83 c4 10             	add    $0x10,%esp
c00249d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00249dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00249df:	c9                   	leave  
c00249e0:	c3                   	ret    

c00249e1 <timer_elapsed>:
c00249e1:	55                   	push   %ebp
c00249e2:	89 e5                	mov    %esp,%ebp
c00249e4:	83 ec 18             	sub    $0x18,%esp
c00249e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00249ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00249ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c00249f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00249f3:	e8 b4 ff ff ff       	call   c00249ac <timer_ticks>
c00249f8:	2b 45 f0             	sub    -0x10(%ebp),%eax
c00249fb:	1b 55 f4             	sbb    -0xc(%ebp),%edx
c00249fe:	c9                   	leave  
c00249ff:	c3                   	ret    

c0024a00 <timer_sleep>:
c0024a00:	55                   	push   %ebp
c0024a01:	89 e5                	mov    %esp,%ebp
c0024a03:	53                   	push   %ebx
c0024a04:	83 ec 24             	sub    $0x24,%esp
c0024a07:	8b 45 08             	mov    0x8(%ebp),%eax
c0024a0a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0024a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024a10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0024a13:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0024a17:	7f 14                	jg     c0024a2d <timer_sleep+0x2d>
c0024a19:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0024a1d:	0f 88 96 00 00 00    	js     c0024ab9 <timer_sleep+0xb9>
c0024a23:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0024a27:	0f 86 8c 00 00 00    	jbe    c0024ab9 <timer_sleep+0xb9>
c0024a2d:	e8 7a ff ff ff       	call   c00249ac <timer_ticks>
c0024a32:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024a35:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0024a38:	e8 3a d3 ff ff       	call   c0021d77 <intr_get_level>
c0024a3d:	83 f8 01             	cmp    $0x1,%eax
c0024a40:	74 1e                	je     c0024a60 <timer_sleep+0x60>
c0024a42:	83 ec 0c             	sub    $0xc,%esp
c0024a45:	68 7b 50 03 c0       	push   $0xc003507b
c0024a4a:	68 98 50 03 c0       	push   $0xc0035098
c0024a4f:	68 38 51 03 c0       	push   $0xc0035138
c0024a54:	6a 69                	push   $0x69
c0024a56:	68 af 50 03 c0       	push   $0xc00350af
c0024a5b:	e8 31 5b 00 00       	call   c002a591 <debug_panic>
c0024a60:	e8 87 d3 ff ff       	call   c0021dec <intr_disable>
c0024a65:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024a68:	e8 7c c4 ff ff       	call   c0020ee9 <thread_current>
c0024a6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0024a70:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0024a73:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0024a76:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0024a79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0024a7c:	01 c8                	add    %ecx,%eax
c0024a7e:	11 da                	adc    %ebx,%edx
c0024a80:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0024a83:	89 41 78             	mov    %eax,0x78(%ecx)
c0024a86:	89 51 7c             	mov    %edx,0x7c(%ecx)
c0024a89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024a8c:	83 e8 80             	sub    $0xffffff80,%eax
c0024a8f:	6a 00                	push   $0x0
c0024a91:	68 0f 17 02 c0       	push   $0xc002170f
c0024a96:	50                   	push   %eax
c0024a97:	68 8c fe 03 c0       	push   $0xc003fe8c
c0024a9c:	e8 0b 68 00 00       	call   c002b2ac <list_insert_ordered>
c0024aa1:	83 c4 10             	add    $0x10,%esp
c0024aa4:	e8 1c c3 ff ff       	call   c0020dc5 <thread_block>
c0024aa9:	83 ec 0c             	sub    $0xc,%esp
c0024aac:	ff 75 ec             	pushl  -0x14(%ebp)
c0024aaf:	e8 e0 d2 ff ff       	call   c0021d94 <intr_set_level>
c0024ab4:	83 c4 10             	add    $0x10,%esp
c0024ab7:	eb 01                	jmp    c0024aba <timer_sleep+0xba>
c0024ab9:	90                   	nop
c0024aba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0024abd:	c9                   	leave  
c0024abe:	c3                   	ret    

c0024abf <timer_msleep>:
c0024abf:	55                   	push   %ebp
c0024ac0:	89 e5                	mov    %esp,%ebp
c0024ac2:	83 ec 18             	sub    $0x18,%esp
c0024ac5:	8b 45 08             	mov    0x8(%ebp),%eax
c0024ac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024acb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024ace:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024ad1:	83 ec 04             	sub    $0x4,%esp
c0024ad4:	68 e8 03 00 00       	push   $0x3e8
c0024ad9:	ff 75 f4             	pushl  -0xc(%ebp)
c0024adc:	ff 75 f0             	pushl  -0x10(%ebp)
c0024adf:	e8 cf 02 00 00       	call   c0024db3 <real_time_sleep>
c0024ae4:	83 c4 10             	add    $0x10,%esp
c0024ae7:	90                   	nop
c0024ae8:	c9                   	leave  
c0024ae9:	c3                   	ret    

c0024aea <timer_usleep>:
c0024aea:	55                   	push   %ebp
c0024aeb:	89 e5                	mov    %esp,%ebp
c0024aed:	83 ec 18             	sub    $0x18,%esp
c0024af0:	8b 45 08             	mov    0x8(%ebp),%eax
c0024af3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024af6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024af9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024afc:	83 ec 04             	sub    $0x4,%esp
c0024aff:	68 40 42 0f 00       	push   $0xf4240
c0024b04:	ff 75 f4             	pushl  -0xc(%ebp)
c0024b07:	ff 75 f0             	pushl  -0x10(%ebp)
c0024b0a:	e8 a4 02 00 00       	call   c0024db3 <real_time_sleep>
c0024b0f:	83 c4 10             	add    $0x10,%esp
c0024b12:	90                   	nop
c0024b13:	c9                   	leave  
c0024b14:	c3                   	ret    

c0024b15 <timer_nsleep>:
c0024b15:	55                   	push   %ebp
c0024b16:	89 e5                	mov    %esp,%ebp
c0024b18:	83 ec 18             	sub    $0x18,%esp
c0024b1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0024b1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024b21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024b24:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024b27:	83 ec 04             	sub    $0x4,%esp
c0024b2a:	68 00 ca 9a 3b       	push   $0x3b9aca00
c0024b2f:	ff 75 f4             	pushl  -0xc(%ebp)
c0024b32:	ff 75 f0             	pushl  -0x10(%ebp)
c0024b35:	e8 79 02 00 00       	call   c0024db3 <real_time_sleep>
c0024b3a:	83 c4 10             	add    $0x10,%esp
c0024b3d:	90                   	nop
c0024b3e:	c9                   	leave  
c0024b3f:	c3                   	ret    

c0024b40 <timer_mdelay>:
c0024b40:	55                   	push   %ebp
c0024b41:	89 e5                	mov    %esp,%ebp
c0024b43:	83 ec 18             	sub    $0x18,%esp
c0024b46:	8b 45 08             	mov    0x8(%ebp),%eax
c0024b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024b4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024b52:	83 ec 04             	sub    $0x4,%esp
c0024b55:	68 e8 03 00 00       	push   $0x3e8
c0024b5a:	ff 75 f4             	pushl  -0xc(%ebp)
c0024b5d:	ff 75 f0             	pushl  -0x10(%ebp)
c0024b60:	e8 00 03 00 00       	call   c0024e65 <real_time_delay>
c0024b65:	83 c4 10             	add    $0x10,%esp
c0024b68:	90                   	nop
c0024b69:	c9                   	leave  
c0024b6a:	c3                   	ret    

c0024b6b <timer_udelay>:
c0024b6b:	55                   	push   %ebp
c0024b6c:	89 e5                	mov    %esp,%ebp
c0024b6e:	83 ec 18             	sub    $0x18,%esp
c0024b71:	8b 45 08             	mov    0x8(%ebp),%eax
c0024b74:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024b77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024b7d:	83 ec 04             	sub    $0x4,%esp
c0024b80:	68 40 42 0f 00       	push   $0xf4240
c0024b85:	ff 75 f4             	pushl  -0xc(%ebp)
c0024b88:	ff 75 f0             	pushl  -0x10(%ebp)
c0024b8b:	e8 d5 02 00 00       	call   c0024e65 <real_time_delay>
c0024b90:	83 c4 10             	add    $0x10,%esp
c0024b93:	90                   	nop
c0024b94:	c9                   	leave  
c0024b95:	c3                   	ret    

c0024b96 <timer_ndelay>:
c0024b96:	55                   	push   %ebp
c0024b97:	89 e5                	mov    %esp,%ebp
c0024b99:	83 ec 18             	sub    $0x18,%esp
c0024b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0024b9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024ba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024ba8:	83 ec 04             	sub    $0x4,%esp
c0024bab:	68 00 ca 9a 3b       	push   $0x3b9aca00
c0024bb0:	ff 75 f4             	pushl  -0xc(%ebp)
c0024bb3:	ff 75 f0             	pushl  -0x10(%ebp)
c0024bb6:	e8 aa 02 00 00       	call   c0024e65 <real_time_delay>
c0024bbb:	83 c4 10             	add    $0x10,%esp
c0024bbe:	90                   	nop
c0024bbf:	c9                   	leave  
c0024bc0:	c3                   	ret    

c0024bc1 <timer_print_stats>:
c0024bc1:	55                   	push   %ebp
c0024bc2:	89 e5                	mov    %esp,%ebp
c0024bc4:	83 ec 08             	sub    $0x8,%esp
c0024bc7:	e8 e0 fd ff ff       	call   c00249ac <timer_ticks>
c0024bcc:	83 ec 04             	sub    $0x4,%esp
c0024bcf:	52                   	push   %edx
c0024bd0:	50                   	push   %eax
c0024bd1:	68 00 51 03 c0       	push   $0xc0035100
c0024bd6:	e8 55 34 00 00       	call   c0028030 <printf>
c0024bdb:	83 c4 10             	add    $0x10,%esp
c0024bde:	90                   	nop
c0024bdf:	c9                   	leave  
c0024be0:	c3                   	ret    

c0024be1 <timer_interrupt>:
c0024be1:	55                   	push   %ebp
c0024be2:	89 e5                	mov    %esp,%ebp
c0024be4:	56                   	push   %esi
c0024be5:	53                   	push   %ebx
c0024be6:	83 ec 10             	sub    $0x10,%esp
c0024be9:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024bee:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024bf4:	83 c0 01             	add    $0x1,%eax
c0024bf7:	83 d2 00             	adc    $0x0,%edx
c0024bfa:	a3 80 fe 03 c0       	mov    %eax,0xc003fe80
c0024bff:	89 15 84 fe 03 c0    	mov    %edx,0xc003fe84
c0024c05:	e8 ce bf ff ff       	call   c0020bd8 <thread_tick>
c0024c0a:	0f b6 05 48 87 04 c0 	movzbl 0xc0048748,%eax
c0024c11:	84 c0                	test   %al,%al
c0024c13:	0f 84 b6 00 00 00    	je     c0024ccf <timer_interrupt+0xee>
c0024c19:	e8 bc ce ff ff       	call   c0021ada <thread_update_recent_cpu_one>
c0024c1e:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024c23:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024c29:	89 c1                	mov    %eax,%ecx
c0024c2b:	83 e1 03             	and    $0x3,%ecx
c0024c2e:	89 cb                	mov    %ecx,%ebx
c0024c30:	89 d0                	mov    %edx,%eax
c0024c32:	83 e0 00             	and    $0x0,%eax
c0024c35:	89 c6                	mov    %eax,%esi
c0024c37:	89 f0                	mov    %esi,%eax
c0024c39:	09 d8                	or     %ebx,%eax
c0024c3b:	85 c0                	test   %eax,%eax
c0024c3d:	75 11                	jne    c0024c50 <timer_interrupt+0x6f>
c0024c3f:	e8 a5 c2 ff ff       	call   c0020ee9 <thread_current>
c0024c44:	83 ec 0c             	sub    $0xc,%esp
c0024c47:	50                   	push   %eax
c0024c48:	e8 cc ce ff ff       	call   c0021b19 <thread_update_priority_mlfqs>
c0024c4d:	83 c4 10             	add    $0x10,%esp
c0024c50:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024c55:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024c5b:	6a 00                	push   $0x0
c0024c5d:	6a 64                	push   $0x64
c0024c5f:	52                   	push   %edx
c0024c60:	50                   	push   %eax
c0024c61:	e8 0b 52 00 00       	call   c0029e71 <__moddi3>
c0024c66:	83 c4 10             	add    $0x10,%esp
c0024c69:	09 d0                	or     %edx,%eax
c0024c6b:	85 c0                	test   %eax,%eax
c0024c6d:	75 60                	jne    c0024ccf <timer_interrupt+0xee>
c0024c6f:	e8 e6 cc ff ff       	call   c002195a <thread_update_recent_cpu_and_load_avg>
c0024c74:	eb 59                	jmp    c0024ccf <timer_interrupt+0xee>
c0024c76:	83 ec 0c             	sub    $0xc,%esp
c0024c79:	68 8c fe 03 c0       	push   $0xc003fe8c
c0024c7e:	e8 34 60 00 00       	call   c002acb7 <list_front>
c0024c83:	83 c4 10             	add    $0x10,%esp
c0024c86:	83 c0 04             	add    $0x4,%eax
c0024c89:	2d 84 00 00 00       	sub    $0x84,%eax
c0024c8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024c91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024c94:	8b 48 78             	mov    0x78(%eax),%ecx
c0024c97:	8b 58 7c             	mov    0x7c(%eax),%ebx
c0024c9a:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024c9f:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024ca5:	39 d3                	cmp    %edx,%ebx
c0024ca7:	7f 3f                	jg     c0024ce8 <timer_interrupt+0x107>
c0024ca9:	39 d3                	cmp    %edx,%ebx
c0024cab:	7c 04                	jl     c0024cb1 <timer_interrupt+0xd0>
c0024cad:	39 c1                	cmp    %eax,%ecx
c0024caf:	77 37                	ja     c0024ce8 <timer_interrupt+0x107>
c0024cb1:	83 ec 0c             	sub    $0xc,%esp
c0024cb4:	ff 75 f4             	pushl  -0xc(%ebp)
c0024cb7:	e8 7a c1 ff ff       	call   c0020e36 <thread_unblock>
c0024cbc:	83 c4 10             	add    $0x10,%esp
c0024cbf:	83 ec 0c             	sub    $0xc,%esp
c0024cc2:	68 8c fe 03 c0       	push   $0xc003fe8c
c0024cc7:	e8 97 5f 00 00       	call   c002ac63 <list_pop_front>
c0024ccc:	83 c4 10             	add    $0x10,%esp
c0024ccf:	83 ec 0c             	sub    $0xc,%esp
c0024cd2:	68 8c fe 03 c0       	push   $0xc003fe8c
c0024cd7:	e8 b0 60 00 00       	call   c002ad8c <list_empty>
c0024cdc:	83 c4 10             	add    $0x10,%esp
c0024cdf:	83 f0 01             	xor    $0x1,%eax
c0024ce2:	84 c0                	test   %al,%al
c0024ce4:	75 90                	jne    c0024c76 <timer_interrupt+0x95>
c0024ce6:	eb 01                	jmp    c0024ce9 <timer_interrupt+0x108>
c0024ce8:	90                   	nop
c0024ce9:	90                   	nop
c0024cea:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0024ced:	5b                   	pop    %ebx
c0024cee:	5e                   	pop    %esi
c0024cef:	5d                   	pop    %ebp
c0024cf0:	c3                   	ret    

c0024cf1 <too_many_loops>:
c0024cf1:	55                   	push   %ebp
c0024cf2:	89 e5                	mov    %esp,%ebp
c0024cf4:	56                   	push   %esi
c0024cf5:	53                   	push   %ebx
c0024cf6:	83 ec 10             	sub    $0x10,%esp
c0024cf9:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024cfe:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024d04:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024d07:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0024d0a:	eb 00                	jmp    c0024d0c <too_many_loops+0x1b>
c0024d0c:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024d11:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024d17:	89 d1                	mov    %edx,%ecx
c0024d19:	33 4d f4             	xor    -0xc(%ebp),%ecx
c0024d1c:	33 45 f0             	xor    -0x10(%ebp),%eax
c0024d1f:	09 c8                	or     %ecx,%eax
c0024d21:	85 c0                	test   %eax,%eax
c0024d23:	74 e7                	je     c0024d0c <too_many_loops+0x1b>
c0024d25:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024d2a:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024d30:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024d33:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0024d36:	8b 45 08             	mov    0x8(%ebp),%eax
c0024d39:	ba 00 00 00 00       	mov    $0x0,%edx
c0024d3e:	83 ec 08             	sub    $0x8,%esp
c0024d41:	52                   	push   %edx
c0024d42:	50                   	push   %eax
c0024d43:	e8 2c 00 00 00       	call   c0024d74 <busy_wait>
c0024d48:	83 c4 10             	add    $0x10,%esp
c0024d4b:	a1 80 fe 03 c0       	mov    0xc003fe80,%eax
c0024d50:	8b 15 84 fe 03 c0    	mov    0xc003fe84,%edx
c0024d56:	89 c1                	mov    %eax,%ecx
c0024d58:	33 4d f0             	xor    -0x10(%ebp),%ecx
c0024d5b:	89 cb                	mov    %ecx,%ebx
c0024d5d:	89 d0                	mov    %edx,%eax
c0024d5f:	33 45 f4             	xor    -0xc(%ebp),%eax
c0024d62:	89 c6                	mov    %eax,%esi
c0024d64:	89 d8                	mov    %ebx,%eax
c0024d66:	09 f0                	or     %esi,%eax
c0024d68:	85 c0                	test   %eax,%eax
c0024d6a:	0f 95 c0             	setne  %al
c0024d6d:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0024d70:	5b                   	pop    %ebx
c0024d71:	5e                   	pop    %esi
c0024d72:	5d                   	pop    %ebp
c0024d73:	c3                   	ret    

c0024d74 <busy_wait>:
c0024d74:	55                   	push   %ebp
c0024d75:	89 e5                	mov    %esp,%ebp
c0024d77:	53                   	push   %ebx
c0024d78:	83 ec 0c             	sub    $0xc,%esp
c0024d7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0024d7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024d81:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024d84:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024d87:	eb 00                	jmp    c0024d89 <busy_wait+0x15>
c0024d89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024d8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0024d8f:	89 c1                	mov    %eax,%ecx
c0024d91:	89 d3                	mov    %edx,%ebx
c0024d93:	83 c1 ff             	add    $0xffffffff,%ecx
c0024d96:	83 d3 ff             	adc    $0xffffffff,%ebx
c0024d99:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0024d9c:	89 5d f4             	mov    %ebx,-0xc(%ebp)
c0024d9f:	85 d2                	test   %edx,%edx
c0024da1:	7f e6                	jg     c0024d89 <busy_wait+0x15>
c0024da3:	85 d2                	test   %edx,%edx
c0024da5:	78 05                	js     c0024dac <busy_wait+0x38>
c0024da7:	83 f8 00             	cmp    $0x0,%eax
c0024daa:	77 dd                	ja     c0024d89 <busy_wait+0x15>
c0024dac:	90                   	nop
c0024dad:	83 c4 0c             	add    $0xc,%esp
c0024db0:	5b                   	pop    %ebx
c0024db1:	5d                   	pop    %ebp
c0024db2:	c3                   	ret    

c0024db3 <real_time_sleep>:
c0024db3:	55                   	push   %ebp
c0024db4:	89 e5                	mov    %esp,%ebp
c0024db6:	53                   	push   %ebx
c0024db7:	83 ec 24             	sub    $0x24,%esp
c0024dba:	8b 45 08             	mov    0x8(%ebp),%eax
c0024dbd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0024dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024dc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0024dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0024dc9:	6b d0 64             	imul   $0x64,%eax,%edx
c0024dcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0024dcf:	6b c0 00             	imul   $0x0,%eax,%eax
c0024dd2:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0024dd5:	b8 64 00 00 00       	mov    $0x64,%eax
c0024dda:	f7 65 e0             	mull   -0x20(%ebp)
c0024ddd:	01 d1                	add    %edx,%ecx
c0024ddf:	89 ca                	mov    %ecx,%edx
c0024de1:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0024de4:	89 cb                	mov    %ecx,%ebx
c0024de6:	c1 fb 1f             	sar    $0x1f,%ebx
c0024de9:	53                   	push   %ebx
c0024dea:	51                   	push   %ecx
c0024deb:	52                   	push   %edx
c0024dec:	50                   	push   %eax
c0024ded:	e8 4b 50 00 00       	call   c0029e3d <__divdi3>
c0024df2:	83 c4 10             	add    $0x10,%esp
c0024df5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024df8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0024dfb:	e8 77 cf ff ff       	call   c0021d77 <intr_get_level>
c0024e00:	83 f8 01             	cmp    $0x1,%eax
c0024e03:	74 21                	je     c0024e26 <real_time_sleep+0x73>
c0024e05:	83 ec 0c             	sub    $0xc,%esp
c0024e08:	68 7b 50 03 c0       	push   $0xc003507b
c0024e0d:	68 98 50 03 c0       	push   $0xc0035098
c0024e12:	68 44 51 03 c0       	push   $0xc0035144
c0024e17:	68 03 01 00 00       	push   $0x103
c0024e1c:	68 af 50 03 c0       	push   $0xc00350af
c0024e21:	e8 6b 57 00 00       	call   c002a591 <debug_panic>
c0024e26:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0024e2a:	78 1f                	js     c0024e4b <real_time_sleep+0x98>
c0024e2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0024e30:	7f 06                	jg     c0024e38 <real_time_sleep+0x85>
c0024e32:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0024e36:	76 13                	jbe    c0024e4b <real_time_sleep+0x98>
c0024e38:	83 ec 08             	sub    $0x8,%esp
c0024e3b:	ff 75 f4             	pushl  -0xc(%ebp)
c0024e3e:	ff 75 f0             	pushl  -0x10(%ebp)
c0024e41:	e8 ba fb ff ff       	call   c0024a00 <timer_sleep>
c0024e46:	83 c4 10             	add    $0x10,%esp
c0024e49:	eb 14                	jmp    c0024e5f <real_time_sleep+0xac>
c0024e4b:	83 ec 04             	sub    $0x4,%esp
c0024e4e:	ff 75 10             	pushl  0x10(%ebp)
c0024e51:	ff 75 e4             	pushl  -0x1c(%ebp)
c0024e54:	ff 75 e0             	pushl  -0x20(%ebp)
c0024e57:	e8 09 00 00 00       	call   c0024e65 <real_time_delay>
c0024e5c:	83 c4 10             	add    $0x10,%esp
c0024e5f:	90                   	nop
c0024e60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0024e63:	c9                   	leave  
c0024e64:	c3                   	ret    

c0024e65 <real_time_delay>:
c0024e65:	55                   	push   %ebp
c0024e66:	89 e5                	mov    %esp,%ebp
c0024e68:	56                   	push   %esi
c0024e69:	53                   	push   %ebx
c0024e6a:	83 ec 10             	sub    $0x10,%esp
c0024e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0024e70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024e73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024e76:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024e79:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0024e7c:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c0024e81:	89 c8                	mov    %ecx,%eax
c0024e83:	f7 ea                	imul   %edx
c0024e85:	c1 fa 06             	sar    $0x6,%edx
c0024e88:	89 c8                	mov    %ecx,%eax
c0024e8a:	c1 f8 1f             	sar    $0x1f,%eax
c0024e8d:	29 c2                	sub    %eax,%edx
c0024e8f:	89 d0                	mov    %edx,%eax
c0024e91:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c0024e97:	29 c1                	sub    %eax,%ecx
c0024e99:	89 c8                	mov    %ecx,%eax
c0024e9b:	85 c0                	test   %eax,%eax
c0024e9d:	74 21                	je     c0024ec0 <real_time_delay+0x5b>
c0024e9f:	83 ec 0c             	sub    $0xc,%esp
c0024ea2:	68 13 51 03 c0       	push   $0xc0035113
c0024ea7:	68 98 50 03 c0       	push   $0xc0035098
c0024eac:	68 54 51 03 c0       	push   $0xc0035154
c0024eb1:	68 19 01 00 00       	push   $0x119
c0024eb6:	68 af 50 03 c0       	push   $0xc00350af
c0024ebb:	e8 d1 56 00 00       	call   c002a591 <debug_panic>
c0024ec0:	a1 88 fe 03 c0       	mov    0xc003fe88,%eax
c0024ec5:	ba 00 00 00 00       	mov    $0x0,%edx
c0024eca:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0024ecd:	89 cb                	mov    %ecx,%ebx
c0024ecf:	0f af da             	imul   %edx,%ebx
c0024ed2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0024ed5:	0f af c8             	imul   %eax,%ecx
c0024ed8:	01 d9                	add    %ebx,%ecx
c0024eda:	f7 65 f0             	mull   -0x10(%ebp)
c0024edd:	01 d1                	add    %edx,%ecx
c0024edf:	89 ca                	mov    %ecx,%edx
c0024ee1:	6a 00                	push   $0x0
c0024ee3:	68 e8 03 00 00       	push   $0x3e8
c0024ee8:	52                   	push   %edx
c0024ee9:	50                   	push   %eax
c0024eea:	e8 4e 4f 00 00       	call   c0029e3d <__divdi3>
c0024eef:	83 c4 10             	add    $0x10,%esp
c0024ef2:	6b da 64             	imul   $0x64,%edx,%ebx
c0024ef5:	6b c8 00             	imul   $0x0,%eax,%ecx
c0024ef8:	8d 34 0b             	lea    (%ebx,%ecx,1),%esi
c0024efb:	b9 64 00 00 00       	mov    $0x64,%ecx
c0024f00:	f7 e1                	mul    %ecx
c0024f02:	89 c1                	mov    %eax,%ecx
c0024f04:	89 d3                	mov    %edx,%ebx
c0024f06:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
c0024f09:	89 c3                	mov    %eax,%ebx
c0024f0b:	8b 75 10             	mov    0x10(%ebp),%esi
c0024f0e:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c0024f13:	89 f0                	mov    %esi,%eax
c0024f15:	f7 ea                	imul   %edx
c0024f17:	c1 fa 06             	sar    $0x6,%edx
c0024f1a:	89 f0                	mov    %esi,%eax
c0024f1c:	c1 f8 1f             	sar    $0x1f,%eax
c0024f1f:	29 c2                	sub    %eax,%edx
c0024f21:	89 d0                	mov    %edx,%eax
c0024f23:	99                   	cltd   
c0024f24:	52                   	push   %edx
c0024f25:	50                   	push   %eax
c0024f26:	53                   	push   %ebx
c0024f27:	51                   	push   %ecx
c0024f28:	e8 10 4f 00 00       	call   c0029e3d <__divdi3>
c0024f2d:	83 c4 10             	add    $0x10,%esp
c0024f30:	83 ec 08             	sub    $0x8,%esp
c0024f33:	52                   	push   %edx
c0024f34:	50                   	push   %eax
c0024f35:	e8 3a fe ff ff       	call   c0024d74 <busy_wait>
c0024f3a:	83 c4 10             	add    $0x10,%esp
c0024f3d:	90                   	nop
c0024f3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0024f41:	5b                   	pop    %ebx
c0024f42:	5e                   	pop    %esi
c0024f43:	5d                   	pop    %ebp
c0024f44:	c3                   	ret    

c0024f45 <isupper>:
c0024f45:	55                   	push   %ebp
c0024f46:	89 e5                	mov    %esp,%ebp
c0024f48:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0024f4c:	7e 0d                	jle    c0024f5b <isupper+0x16>
c0024f4e:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0024f52:	7f 07                	jg     c0024f5b <isupper+0x16>
c0024f54:	b8 01 00 00 00       	mov    $0x1,%eax
c0024f59:	eb 05                	jmp    c0024f60 <isupper+0x1b>
c0024f5b:	b8 00 00 00 00       	mov    $0x0,%eax
c0024f60:	5d                   	pop    %ebp
c0024f61:	c3                   	ret    

c0024f62 <tolower>:
c0024f62:	55                   	push   %ebp
c0024f63:	89 e5                	mov    %esp,%ebp
c0024f65:	ff 75 08             	pushl  0x8(%ebp)
c0024f68:	e8 d8 ff ff ff       	call   c0024f45 <isupper>
c0024f6d:	83 c4 04             	add    $0x4,%esp
c0024f70:	85 c0                	test   %eax,%eax
c0024f72:	74 08                	je     c0024f7c <tolower+0x1a>
c0024f74:	8b 45 08             	mov    0x8(%ebp),%eax
c0024f77:	83 c0 20             	add    $0x20,%eax
c0024f7a:	eb 03                	jmp    c0024f7f <tolower+0x1d>
c0024f7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0024f7f:	c9                   	leave  
c0024f80:	c3                   	ret    

c0024f81 <inb>:
c0024f81:	55                   	push   %ebp
c0024f82:	89 e5                	mov    %esp,%ebp
c0024f84:	83 ec 14             	sub    $0x14,%esp
c0024f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0024f8a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0024f8e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0024f92:	89 c2                	mov    %eax,%edx
c0024f94:	ec                   	in     (%dx),%al
c0024f95:	88 45 ff             	mov    %al,-0x1(%ebp)
c0024f98:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0024f9c:	c9                   	leave  
c0024f9d:	c3                   	ret    

c0024f9e <kbd_init>:
c0024f9e:	55                   	push   %ebp
c0024f9f:	89 e5                	mov    %esp,%ebp
c0024fa1:	83 ec 08             	sub    $0x8,%esp
c0024fa4:	83 ec 04             	sub    $0x4,%esp
c0024fa7:	68 80 51 03 c0       	push   $0xc0035180
c0024fac:	68 e4 4f 02 c0       	push   $0xc0024fe4
c0024fb1:	6a 21                	push   $0x21
c0024fb3:	e8 55 d0 ff ff       	call   c002200d <intr_register_ext>
c0024fb8:	83 c4 10             	add    $0x10,%esp
c0024fbb:	90                   	nop
c0024fbc:	c9                   	leave  
c0024fbd:	c3                   	ret    

c0024fbe <kbd_print_stats>:
c0024fbe:	55                   	push   %ebp
c0024fbf:	89 e5                	mov    %esp,%ebp
c0024fc1:	83 ec 08             	sub    $0x8,%esp
c0024fc4:	a1 a8 fe 03 c0       	mov    0xc003fea8,%eax
c0024fc9:	8b 15 ac fe 03 c0    	mov    0xc003feac,%edx
c0024fcf:	83 ec 04             	sub    $0x4,%esp
c0024fd2:	52                   	push   %edx
c0024fd3:	50                   	push   %eax
c0024fd4:	68 8e 51 03 c0       	push   $0xc003518e
c0024fd9:	e8 52 30 00 00       	call   c0028030 <printf>
c0024fde:	83 c4 10             	add    $0x10,%esp
c0024fe1:	90                   	nop
c0024fe2:	c9                   	leave  
c0024fe3:	c3                   	ret    

c0024fe4 <keyboard_interrupt>:
c0024fe4:	55                   	push   %ebp
c0024fe5:	89 e5                	mov    %esp,%ebp
c0024fe7:	53                   	push   %ebx
c0024fe8:	83 ec 14             	sub    $0x14,%esp
c0024feb:	0f b6 05 a0 fe 03 c0 	movzbl 0xc003fea0,%eax
c0024ff2:	84 c0                	test   %al,%al
c0024ff4:	75 0b                	jne    c0025001 <keyboard_interrupt+0x1d>
c0024ff6:	0f b6 05 a1 fe 03 c0 	movzbl 0xc003fea1,%eax
c0024ffd:	84 c0                	test   %al,%al
c0024fff:	74 07                	je     c0025008 <keyboard_interrupt+0x24>
c0025001:	b8 01 00 00 00       	mov    $0x1,%eax
c0025006:	eb 05                	jmp    c002500d <keyboard_interrupt+0x29>
c0025008:	b8 00 00 00 00       	mov    $0x0,%eax
c002500d:	88 45 ef             	mov    %al,-0x11(%ebp)
c0025010:	80 65 ef 01          	andb   $0x1,-0x11(%ebp)
c0025014:	0f b6 05 a2 fe 03 c0 	movzbl 0xc003fea2,%eax
c002501b:	84 c0                	test   %al,%al
c002501d:	75 0b                	jne    c002502a <keyboard_interrupt+0x46>
c002501f:	0f b6 05 a3 fe 03 c0 	movzbl 0xc003fea3,%eax
c0025026:	84 c0                	test   %al,%al
c0025028:	74 07                	je     c0025031 <keyboard_interrupt+0x4d>
c002502a:	b8 01 00 00 00       	mov    $0x1,%eax
c002502f:	eb 05                	jmp    c0025036 <keyboard_interrupt+0x52>
c0025031:	b8 00 00 00 00       	mov    $0x0,%eax
c0025036:	88 45 ee             	mov    %al,-0x12(%ebp)
c0025039:	80 65 ee 01          	andb   $0x1,-0x12(%ebp)
c002503d:	0f b6 05 a4 fe 03 c0 	movzbl 0xc003fea4,%eax
c0025044:	84 c0                	test   %al,%al
c0025046:	75 0b                	jne    c0025053 <keyboard_interrupt+0x6f>
c0025048:	0f b6 05 a5 fe 03 c0 	movzbl 0xc003fea5,%eax
c002504f:	84 c0                	test   %al,%al
c0025051:	74 07                	je     c002505a <keyboard_interrupt+0x76>
c0025053:	b8 01 00 00 00       	mov    $0x1,%eax
c0025058:	eb 05                	jmp    c002505f <keyboard_interrupt+0x7b>
c002505a:	b8 00 00 00 00       	mov    $0x0,%eax
c002505f:	88 45 ed             	mov    %al,-0x13(%ebp)
c0025062:	80 65 ed 01          	andb   $0x1,-0x13(%ebp)
c0025066:	6a 60                	push   $0x60
c0025068:	e8 14 ff ff ff       	call   c0024f81 <inb>
c002506d:	83 c4 04             	add    $0x4,%esp
c0025070:	0f b6 c0             	movzbl %al,%eax
c0025073:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025076:	81 7d f4 e0 00 00 00 	cmpl   $0xe0,-0xc(%ebp)
c002507d:	75 1a                	jne    c0025099 <keyboard_interrupt+0xb5>
c002507f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025082:	c1 e0 08             	shl    $0x8,%eax
c0025085:	89 c3                	mov    %eax,%ebx
c0025087:	6a 60                	push   $0x60
c0025089:	e8 f3 fe ff ff       	call   c0024f81 <inb>
c002508e:	83 c4 04             	add    $0x4,%esp
c0025091:	0f b6 c0             	movzbl %al,%eax
c0025094:	09 d8                	or     %ebx,%eax
c0025096:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025099:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002509c:	25 80 00 00 00       	and    $0x80,%eax
c00250a1:	85 c0                	test   %eax,%eax
c00250a3:	0f 95 c0             	setne  %al
c00250a6:	88 45 ec             	mov    %al,-0x14(%ebp)
c00250a9:	81 65 f4 7f ff ff ff 	andl   $0xffffff7f,-0xc(%ebp)
c00250b0:	83 7d f4 3a          	cmpl   $0x3a,-0xc(%ebp)
c00250b4:	75 31                	jne    c00250e7 <keyboard_interrupt+0x103>
c00250b6:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00250ba:	83 f0 01             	xor    $0x1,%eax
c00250bd:	84 c0                	test   %al,%al
c00250bf:	0f 84 84 01 00 00    	je     c0025249 <keyboard_interrupt+0x265>
c00250c5:	0f b6 05 a6 fe 03 c0 	movzbl 0xc003fea6,%eax
c00250cc:	0f b6 c0             	movzbl %al,%eax
c00250cf:	85 c0                	test   %eax,%eax
c00250d1:	0f 95 c0             	setne  %al
c00250d4:	83 f0 01             	xor    $0x1,%eax
c00250d7:	0f b6 c0             	movzbl %al,%eax
c00250da:	83 e0 01             	and    $0x1,%eax
c00250dd:	a2 a6 fe 03 c0       	mov    %al,0xc003fea6
c00250e2:	e9 62 01 00 00       	jmp    c0025249 <keyboard_interrupt+0x265>
c00250e7:	83 ec 04             	sub    $0x4,%esp
c00250ea:	8d 45 eb             	lea    -0x15(%ebp),%eax
c00250ed:	50                   	push   %eax
c00250ee:	ff 75 f4             	pushl  -0xc(%ebp)
c00250f1:	68 e0 51 03 c0       	push   $0xc00351e0
c00250f6:	e8 54 01 00 00       	call   c002524f <map_key>
c00250fb:	83 c4 10             	add    $0x10,%esp
c00250fe:	84 c0                	test   %al,%al
c0025100:	75 4f                	jne    c0025151 <keyboard_interrupt+0x16d>
c0025102:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0025106:	83 f0 01             	xor    $0x1,%eax
c0025109:	84 c0                	test   %al,%al
c002510b:	74 1b                	je     c0025128 <keyboard_interrupt+0x144>
c002510d:	83 ec 04             	sub    $0x4,%esp
c0025110:	8d 45 eb             	lea    -0x15(%ebp),%eax
c0025113:	50                   	push   %eax
c0025114:	ff 75 f4             	pushl  -0xc(%ebp)
c0025117:	68 60 52 03 c0       	push   $0xc0035260
c002511c:	e8 2e 01 00 00       	call   c002524f <map_key>
c0025121:	83 c4 10             	add    $0x10,%esp
c0025124:	84 c0                	test   %al,%al
c0025126:	75 29                	jne    c0025151 <keyboard_interrupt+0x16d>
c0025128:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c002512c:	0f 84 d8 00 00 00    	je     c002520a <keyboard_interrupt+0x226>
c0025132:	83 ec 04             	sub    $0x4,%esp
c0025135:	8d 45 eb             	lea    -0x15(%ebp),%eax
c0025138:	50                   	push   %eax
c0025139:	ff 75 f4             	pushl  -0xc(%ebp)
c002513c:	68 c0 52 03 c0       	push   $0xc00352c0
c0025141:	e8 09 01 00 00       	call   c002524f <map_key>
c0025146:	83 c4 10             	add    $0x10,%esp
c0025149:	84 c0                	test   %al,%al
c002514b:	0f 84 b9 00 00 00    	je     c002520a <keyboard_interrupt+0x226>
c0025151:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0025155:	83 f0 01             	xor    $0x1,%eax
c0025158:	84 c0                	test   %al,%al
c002515a:	0f 84 e8 00 00 00    	je     c0025248 <keyboard_interrupt+0x264>
c0025160:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0025164:	3c 7f                	cmp    $0x7f,%al
c0025166:	75 11                	jne    c0025179 <keyboard_interrupt+0x195>
c0025168:	80 7d ed 00          	cmpb   $0x0,-0x13(%ebp)
c002516c:	74 0b                	je     c0025179 <keyboard_interrupt+0x195>
c002516e:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c0025172:	74 05                	je     c0025179 <keyboard_interrupt+0x195>
c0025174:	e8 12 29 00 00       	call   c0027a8b <shutdown_reboot>
c0025179:	80 7d ed 00          	cmpb   $0x0,-0x13(%ebp)
c002517d:	74 1c                	je     c002519b <keyboard_interrupt+0x1b7>
c002517f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0025183:	3c 3f                	cmp    $0x3f,%al
c0025185:	76 14                	jbe    c002519b <keyboard_interrupt+0x1b7>
c0025187:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c002518b:	3c 5f                	cmp    $0x5f,%al
c002518d:	77 0c                	ja     c002519b <keyboard_interrupt+0x1b7>
c002518f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0025193:	83 e8 40             	sub    $0x40,%eax
c0025196:	88 45 eb             	mov    %al,-0x15(%ebp)
c0025199:	eb 22                	jmp    c00251bd <keyboard_interrupt+0x1d9>
c002519b:	0f b6 05 a6 fe 03 c0 	movzbl 0xc003fea6,%eax
c00251a2:	38 45 ef             	cmp    %al,-0x11(%ebp)
c00251a5:	75 16                	jne    c00251bd <keyboard_interrupt+0x1d9>
c00251a7:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c00251ab:	0f b6 c0             	movzbl %al,%eax
c00251ae:	83 ec 0c             	sub    $0xc,%esp
c00251b1:	50                   	push   %eax
c00251b2:	e8 ab fd ff ff       	call   c0024f62 <tolower>
c00251b7:	83 c4 10             	add    $0x10,%esp
c00251ba:	88 45 eb             	mov    %al,-0x15(%ebp)
c00251bd:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c00251c1:	74 0a                	je     c00251cd <keyboard_interrupt+0x1e9>
c00251c3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c00251c7:	83 c0 80             	add    $0xffffff80,%eax
c00251ca:	88 45 eb             	mov    %al,-0x15(%ebp)
c00251cd:	e8 a1 21 00 00       	call   c0027373 <input_full>
c00251d2:	83 f0 01             	xor    $0x1,%eax
c00251d5:	84 c0                	test   %al,%al
c00251d7:	74 6f                	je     c0025248 <keyboard_interrupt+0x264>
c00251d9:	a1 a8 fe 03 c0       	mov    0xc003fea8,%eax
c00251de:	8b 15 ac fe 03 c0    	mov    0xc003feac,%edx
c00251e4:	83 c0 01             	add    $0x1,%eax
c00251e7:	83 d2 00             	adc    $0x0,%edx
c00251ea:	a3 a8 fe 03 c0       	mov    %eax,0xc003fea8
c00251ef:	89 15 ac fe 03 c0    	mov    %edx,0xc003feac
c00251f5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c00251f9:	0f b6 c0             	movzbl %al,%eax
c00251fc:	83 ec 0c             	sub    $0xc,%esp
c00251ff:	50                   	push   %eax
c0025200:	e8 af 20 00 00       	call   c00272b4 <input_putc>
c0025205:	83 c4 10             	add    $0x10,%esp
c0025208:	eb 3e                	jmp    c0025248 <keyboard_interrupt+0x264>
c002520a:	c7 45 f0 00 53 03 c0 	movl   $0xc0035300,-0x10(%ebp)
c0025211:	eb 2a                	jmp    c002523d <keyboard_interrupt+0x259>
c0025213:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025216:	8b 00                	mov    (%eax),%eax
c0025218:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002521b:	75 1c                	jne    c0025239 <keyboard_interrupt+0x255>
c002521d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025220:	8b 50 04             	mov    0x4(%eax),%edx
c0025223:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0025227:	85 c0                	test   %eax,%eax
c0025229:	0f 95 c0             	setne  %al
c002522c:	83 f0 01             	xor    $0x1,%eax
c002522f:	0f b6 c0             	movzbl %al,%eax
c0025232:	83 e0 01             	and    $0x1,%eax
c0025235:	88 02                	mov    %al,(%edx)
c0025237:	eb 10                	jmp    c0025249 <keyboard_interrupt+0x265>
c0025239:	83 45 f0 08          	addl   $0x8,-0x10(%ebp)
c002523d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025240:	8b 00                	mov    (%eax),%eax
c0025242:	85 c0                	test   %eax,%eax
c0025244:	75 cd                	jne    c0025213 <keyboard_interrupt+0x22f>
c0025246:	eb 01                	jmp    c0025249 <keyboard_interrupt+0x265>
c0025248:	90                   	nop
c0025249:	90                   	nop
c002524a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002524d:	c9                   	leave  
c002524e:	c3                   	ret    

c002524f <map_key>:
c002524f:	55                   	push   %ebp
c0025250:	89 e5                	mov    %esp,%ebp
c0025252:	53                   	push   %ebx
c0025253:	83 ec 04             	sub    $0x4,%esp
c0025256:	eb 5d                	jmp    c00252b5 <map_key+0x66>
c0025258:	8b 45 08             	mov    0x8(%ebp),%eax
c002525b:	0f b6 00             	movzbl (%eax),%eax
c002525e:	0f b6 c0             	movzbl %al,%eax
c0025261:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0025264:	77 4b                	ja     c00252b1 <map_key+0x62>
c0025266:	8b 45 08             	mov    0x8(%ebp),%eax
c0025269:	0f b6 00             	movzbl (%eax),%eax
c002526c:	0f b6 d8             	movzbl %al,%ebx
c002526f:	8b 45 08             	mov    0x8(%ebp),%eax
c0025272:	8b 40 04             	mov    0x4(%eax),%eax
c0025275:	83 ec 0c             	sub    $0xc,%esp
c0025278:	50                   	push   %eax
c0025279:	e8 32 46 00 00       	call   c00298b0 <strlen>
c002527e:	83 c4 10             	add    $0x10,%esp
c0025281:	01 d8                	add    %ebx,%eax
c0025283:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0025286:	76 29                	jbe    c00252b1 <map_key+0x62>
c0025288:	8b 45 08             	mov    0x8(%ebp),%eax
c002528b:	8b 50 04             	mov    0x4(%eax),%edx
c002528e:	8b 45 08             	mov    0x8(%ebp),%eax
c0025291:	0f b6 00             	movzbl (%eax),%eax
c0025294:	0f b6 c0             	movzbl %al,%eax
c0025297:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c002529a:	29 c1                	sub    %eax,%ecx
c002529c:	89 c8                	mov    %ecx,%eax
c002529e:	01 d0                	add    %edx,%eax
c00252a0:	0f b6 00             	movzbl (%eax),%eax
c00252a3:	89 c2                	mov    %eax,%edx
c00252a5:	8b 45 10             	mov    0x10(%ebp),%eax
c00252a8:	88 10                	mov    %dl,(%eax)
c00252aa:	b8 01 00 00 00       	mov    $0x1,%eax
c00252af:	eb 13                	jmp    c00252c4 <map_key+0x75>
c00252b1:	83 45 08 08          	addl   $0x8,0x8(%ebp)
c00252b5:	8b 45 08             	mov    0x8(%ebp),%eax
c00252b8:	0f b6 00             	movzbl (%eax),%eax
c00252bb:	84 c0                	test   %al,%al
c00252bd:	75 99                	jne    c0025258 <map_key+0x9>
c00252bf:	b8 00 00 00 00       	mov    $0x0,%eax
c00252c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00252c7:	c9                   	leave  
c00252c8:	c3                   	ret    

c00252c9 <inb>:
c00252c9:	55                   	push   %ebp
c00252ca:	89 e5                	mov    %esp,%ebp
c00252cc:	83 ec 14             	sub    $0x14,%esp
c00252cf:	8b 45 08             	mov    0x8(%ebp),%eax
c00252d2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c00252d6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00252da:	89 c2                	mov    %eax,%edx
c00252dc:	ec                   	in     (%dx),%al
c00252dd:	88 45 ff             	mov    %al,-0x1(%ebp)
c00252e0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00252e4:	c9                   	leave  
c00252e5:	c3                   	ret    

c00252e6 <outb>:
c00252e6:	55                   	push   %ebp
c00252e7:	89 e5                	mov    %esp,%ebp
c00252e9:	83 ec 08             	sub    $0x8,%esp
c00252ec:	8b 55 08             	mov    0x8(%ebp),%edx
c00252ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c00252f2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00252f6:	88 45 f8             	mov    %al,-0x8(%ebp)
c00252f9:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00252fd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0025301:	ee                   	out    %al,(%dx)
c0025302:	90                   	nop
c0025303:	c9                   	leave  
c0025304:	c3                   	ret    

c0025305 <outw>:
c0025305:	55                   	push   %ebp
c0025306:	89 e5                	mov    %esp,%ebp
c0025308:	83 ec 08             	sub    $0x8,%esp
c002530b:	8b 55 08             	mov    0x8(%ebp),%edx
c002530e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0025311:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0025315:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c0025319:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c002531d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0025321:	66 ef                	out    %ax,(%dx)
c0025323:	90                   	nop
c0025324:	c9                   	leave  
c0025325:	c3                   	ret    

c0025326 <ptov>:
c0025326:	55                   	push   %ebp
c0025327:	89 e5                	mov    %esp,%ebp
c0025329:	83 ec 08             	sub    $0x8,%esp
c002532c:	8b 45 08             	mov    0x8(%ebp),%eax
c002532f:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c0025334:	76 1e                	jbe    c0025354 <ptov+0x2e>
c0025336:	83 ec 0c             	sub    $0xc,%esp
c0025339:	68 38 53 03 c0       	push   $0xc0035338
c002533e:	68 53 53 03 c0       	push   $0xc0035353
c0025343:	68 9c 53 03 c0       	push   $0xc003539c
c0025348:	6a 4a                	push   $0x4a
c002534a:	68 6a 53 03 c0       	push   $0xc003536a
c002534f:	e8 3d 52 00 00       	call   c002a591 <debug_panic>
c0025354:	8b 45 08             	mov    0x8(%ebp),%eax
c0025357:	2d 00 00 00 40       	sub    $0x40000000,%eax
c002535c:	c9                   	leave  
c002535d:	c3                   	ret    

c002535e <init>:
c002535e:	55                   	push   %ebp
c002535f:	89 e5                	mov    %esp,%ebp
c0025361:	83 ec 08             	sub    $0x8,%esp
c0025364:	0f b6 05 bc fe 03 c0 	movzbl 0xc003febc,%eax
c002536b:	83 f0 01             	xor    $0x1,%eax
c002536e:	84 c0                	test   %al,%al
c0025370:	74 31                	je     c00253a3 <init+0x45>
c0025372:	83 ec 0c             	sub    $0xc,%esp
c0025375:	68 00 80 0b 00       	push   $0xb8000
c002537a:	e8 a7 ff ff ff       	call   c0025326 <ptov>
c002537f:	83 c4 10             	add    $0x10,%esp
c0025382:	a3 b8 fe 03 c0       	mov    %eax,0xc003feb8
c0025387:	83 ec 08             	sub    $0x8,%esp
c002538a:	68 b4 fe 03 c0       	push   $0xc003feb4
c002538f:	68 b0 fe 03 c0       	push   $0xc003feb0
c0025394:	e8 9a 02 00 00       	call   c0025633 <find_cursor>
c0025399:	83 c4 10             	add    $0x10,%esp
c002539c:	c6 05 bc fe 03 c0 01 	movb   $0x1,0xc003febc
c00253a3:	90                   	nop
c00253a4:	c9                   	leave  
c00253a5:	c3                   	ret    

c00253a6 <vga_putc>:
c00253a6:	55                   	push   %ebp
c00253a7:	89 e5                	mov    %esp,%ebp
c00253a9:	83 ec 18             	sub    $0x18,%esp
c00253ac:	e8 3b ca ff ff       	call   c0021dec <intr_disable>
c00253b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00253b4:	e8 a5 ff ff ff       	call   c002535e <init>
c00253b9:	8b 45 08             	mov    0x8(%ebp),%eax
c00253bc:	83 e8 07             	sub    $0x7,%eax
c00253bf:	83 f8 06             	cmp    $0x6,%eax
c00253c2:	0f 87 90 00 00 00    	ja     c0025458 <vga_putc+0xb2>
c00253c8:	8b 04 85 80 53 03 c0 	mov    -0x3ffcac80(,%eax,4),%eax
c00253cf:	ff e0                	jmp    *%eax
c00253d1:	e8 9e 01 00 00       	call   c0025574 <newline>
c00253d6:	e9 e9 00 00 00       	jmp    c00254c4 <vga_putc+0x11e>
c00253db:	e8 fa 00 00 00       	call   c00254da <cls>
c00253e0:	e9 df 00 00 00       	jmp    c00254c4 <vga_putc+0x11e>
c00253e5:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c00253ea:	85 c0                	test   %eax,%eax
c00253ec:	0f 84 cb 00 00 00    	je     c00254bd <vga_putc+0x117>
c00253f2:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c00253f7:	83 e8 01             	sub    $0x1,%eax
c00253fa:	a3 b0 fe 03 c0       	mov    %eax,0xc003feb0
c00253ff:	e9 b9 00 00 00       	jmp    c00254bd <vga_putc+0x117>
c0025404:	c7 05 b0 fe 03 c0 00 	movl   $0x0,0xc003feb0
c002540b:	00 00 00 
c002540e:	e9 b1 00 00 00       	jmp    c00254c4 <vga_putc+0x11e>
c0025413:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c0025418:	83 c0 08             	add    $0x8,%eax
c002541b:	c1 e8 03             	shr    $0x3,%eax
c002541e:	c1 e0 03             	shl    $0x3,%eax
c0025421:	a3 b0 fe 03 c0       	mov    %eax,0xc003feb0
c0025426:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c002542b:	83 f8 4f             	cmp    $0x4f,%eax
c002542e:	0f 86 8c 00 00 00    	jbe    c00254c0 <vga_putc+0x11a>
c0025434:	e8 3b 01 00 00       	call   c0025574 <newline>
c0025439:	e9 82 00 00 00       	jmp    c00254c0 <vga_putc+0x11a>
c002543e:	83 ec 0c             	sub    $0xc,%esp
c0025441:	ff 75 f4             	pushl  -0xc(%ebp)
c0025444:	e8 4b c9 ff ff       	call   c0021d94 <intr_set_level>
c0025449:	83 c4 10             	add    $0x10,%esp
c002544c:	e8 70 28 00 00       	call   c0027cc1 <speaker_beep>
c0025451:	e8 96 c9 ff ff       	call   c0021dec <intr_disable>
c0025456:	eb 6c                	jmp    c00254c4 <vga_putc+0x11e>
c0025458:	8b 0d b8 fe 03 c0    	mov    0xc003feb8,%ecx
c002545e:	8b 15 b4 fe 03 c0    	mov    0xc003feb4,%edx
c0025464:	89 d0                	mov    %edx,%eax
c0025466:	c1 e0 02             	shl    $0x2,%eax
c0025469:	01 d0                	add    %edx,%eax
c002546b:	c1 e0 05             	shl    $0x5,%eax
c002546e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0025471:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c0025476:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0025479:	88 0c 42             	mov    %cl,(%edx,%eax,2)
c002547c:	8b 0d b8 fe 03 c0    	mov    0xc003feb8,%ecx
c0025482:	8b 15 b4 fe 03 c0    	mov    0xc003feb4,%edx
c0025488:	89 d0                	mov    %edx,%eax
c002548a:	c1 e0 02             	shl    $0x2,%eax
c002548d:	01 d0                	add    %edx,%eax
c002548f:	c1 e0 05             	shl    $0x5,%eax
c0025492:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0025495:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c002549a:	c6 44 42 01 07       	movb   $0x7,0x1(%edx,%eax,2)
c002549f:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c00254a4:	83 c0 01             	add    $0x1,%eax
c00254a7:	a3 b0 fe 03 c0       	mov    %eax,0xc003feb0
c00254ac:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c00254b1:	83 f8 4f             	cmp    $0x4f,%eax
c00254b4:	76 0d                	jbe    c00254c3 <vga_putc+0x11d>
c00254b6:	e8 b9 00 00 00       	call   c0025574 <newline>
c00254bb:	eb 06                	jmp    c00254c3 <vga_putc+0x11d>
c00254bd:	90                   	nop
c00254be:	eb 04                	jmp    c00254c4 <vga_putc+0x11e>
c00254c0:	90                   	nop
c00254c1:	eb 01                	jmp    c00254c4 <vga_putc+0x11e>
c00254c3:	90                   	nop
c00254c4:	e8 0e 01 00 00       	call   c00255d7 <move_cursor>
c00254c9:	83 ec 0c             	sub    $0xc,%esp
c00254cc:	ff 75 f4             	pushl  -0xc(%ebp)
c00254cf:	e8 c0 c8 ff ff       	call   c0021d94 <intr_set_level>
c00254d4:	83 c4 10             	add    $0x10,%esp
c00254d7:	90                   	nop
c00254d8:	c9                   	leave  
c00254d9:	c3                   	ret    

c00254da <cls>:
c00254da:	55                   	push   %ebp
c00254db:	89 e5                	mov    %esp,%ebp
c00254dd:	83 ec 18             	sub    $0x18,%esp
c00254e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00254e7:	eb 12                	jmp    c00254fb <cls+0x21>
c00254e9:	83 ec 0c             	sub    $0xc,%esp
c00254ec:	ff 75 f4             	pushl  -0xc(%ebp)
c00254ef:	e8 29 00 00 00       	call   c002551d <clear_row>
c00254f4:	83 c4 10             	add    $0x10,%esp
c00254f7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00254fb:	83 7d f4 18          	cmpl   $0x18,-0xc(%ebp)
c00254ff:	76 e8                	jbe    c00254e9 <cls+0xf>
c0025501:	c7 05 b4 fe 03 c0 00 	movl   $0x0,0xc003feb4
c0025508:	00 00 00 
c002550b:	a1 b4 fe 03 c0       	mov    0xc003feb4,%eax
c0025510:	a3 b0 fe 03 c0       	mov    %eax,0xc003feb0
c0025515:	e8 bd 00 00 00       	call   c00255d7 <move_cursor>
c002551a:	90                   	nop
c002551b:	c9                   	leave  
c002551c:	c3                   	ret    

c002551d <clear_row>:
c002551d:	55                   	push   %ebp
c002551e:	89 e5                	mov    %esp,%ebp
c0025520:	83 ec 10             	sub    $0x10,%esp
c0025523:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c002552a:	eb 3f                	jmp    c002556b <clear_row+0x4e>
c002552c:	8b 0d b8 fe 03 c0    	mov    0xc003feb8,%ecx
c0025532:	8b 55 08             	mov    0x8(%ebp),%edx
c0025535:	89 d0                	mov    %edx,%eax
c0025537:	c1 e0 02             	shl    $0x2,%eax
c002553a:	01 d0                	add    %edx,%eax
c002553c:	c1 e0 05             	shl    $0x5,%eax
c002553f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0025542:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0025545:	c6 04 42 20          	movb   $0x20,(%edx,%eax,2)
c0025549:	8b 0d b8 fe 03 c0    	mov    0xc003feb8,%ecx
c002554f:	8b 55 08             	mov    0x8(%ebp),%edx
c0025552:	89 d0                	mov    %edx,%eax
c0025554:	c1 e0 02             	shl    $0x2,%eax
c0025557:	01 d0                	add    %edx,%eax
c0025559:	c1 e0 05             	shl    $0x5,%eax
c002555c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c002555f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0025562:	c6 44 42 01 07       	movb   $0x7,0x1(%edx,%eax,2)
c0025567:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c002556b:	83 7d fc 4f          	cmpl   $0x4f,-0x4(%ebp)
c002556f:	76 bb                	jbe    c002552c <clear_row+0xf>
c0025571:	90                   	nop
c0025572:	c9                   	leave  
c0025573:	c3                   	ret    

c0025574 <newline>:
c0025574:	55                   	push   %ebp
c0025575:	89 e5                	mov    %esp,%ebp
c0025577:	83 ec 08             	sub    $0x8,%esp
c002557a:	c7 05 b0 fe 03 c0 00 	movl   $0x0,0xc003feb0
c0025581:	00 00 00 
c0025584:	a1 b4 fe 03 c0       	mov    0xc003feb4,%eax
c0025589:	83 c0 01             	add    $0x1,%eax
c002558c:	a3 b4 fe 03 c0       	mov    %eax,0xc003feb4
c0025591:	a1 b4 fe 03 c0       	mov    0xc003feb4,%eax
c0025596:	83 f8 18             	cmp    $0x18,%eax
c0025599:	76 39                	jbe    c00255d4 <newline+0x60>
c002559b:	c7 05 b4 fe 03 c0 18 	movl   $0x18,0xc003feb4
c00255a2:	00 00 00 
c00255a5:	a1 b8 fe 03 c0       	mov    0xc003feb8,%eax
c00255aa:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c00255b0:	a1 b8 fe 03 c0       	mov    0xc003feb8,%eax
c00255b5:	83 ec 04             	sub    $0x4,%esp
c00255b8:	68 00 0f 00 00       	push   $0xf00
c00255bd:	52                   	push   %edx
c00255be:	50                   	push   %eax
c00255bf:	e8 1c 3d 00 00       	call   c00292e0 <memmove>
c00255c4:	83 c4 10             	add    $0x10,%esp
c00255c7:	83 ec 0c             	sub    $0xc,%esp
c00255ca:	6a 18                	push   $0x18
c00255cc:	e8 4c ff ff ff       	call   c002551d <clear_row>
c00255d1:	83 c4 10             	add    $0x10,%esp
c00255d4:	90                   	nop
c00255d5:	c9                   	leave  
c00255d6:	c3                   	ret    

c00255d7 <move_cursor>:
c00255d7:	55                   	push   %ebp
c00255d8:	89 e5                	mov    %esp,%ebp
c00255da:	83 ec 10             	sub    $0x10,%esp
c00255dd:	a1 b4 fe 03 c0       	mov    0xc003feb4,%eax
c00255e2:	89 c2                	mov    %eax,%edx
c00255e4:	89 d0                	mov    %edx,%eax
c00255e6:	c1 e0 02             	shl    $0x2,%eax
c00255e9:	01 d0                	add    %edx,%eax
c00255eb:	c1 e0 04             	shl    $0x4,%eax
c00255ee:	89 c2                	mov    %eax,%edx
c00255f0:	a1 b0 fe 03 c0       	mov    0xc003feb0,%eax
c00255f5:	01 d0                	add    %edx,%eax
c00255f7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
c00255fb:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c00255ff:	b0 00                	mov    $0x0,%al
c0025601:	83 c8 0e             	or     $0xe,%eax
c0025604:	0f b7 c0             	movzwl %ax,%eax
c0025607:	50                   	push   %eax
c0025608:	68 d4 03 00 00       	push   $0x3d4
c002560d:	e8 f3 fc ff ff       	call   c0025305 <outw>
c0025612:	83 c4 08             	add    $0x8,%esp
c0025615:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0025619:	c1 e0 08             	shl    $0x8,%eax
c002561c:	83 c8 0f             	or     $0xf,%eax
c002561f:	0f b7 c0             	movzwl %ax,%eax
c0025622:	50                   	push   %eax
c0025623:	68 d4 03 00 00       	push   $0x3d4
c0025628:	e8 d8 fc ff ff       	call   c0025305 <outw>
c002562d:	83 c4 08             	add    $0x8,%esp
c0025630:	90                   	nop
c0025631:	c9                   	leave  
c0025632:	c3                   	ret    

c0025633 <find_cursor>:
c0025633:	55                   	push   %ebp
c0025634:	89 e5                	mov    %esp,%ebp
c0025636:	83 ec 10             	sub    $0x10,%esp
c0025639:	6a 0e                	push   $0xe
c002563b:	68 d4 03 00 00       	push   $0x3d4
c0025640:	e8 a1 fc ff ff       	call   c00252e6 <outb>
c0025645:	83 c4 08             	add    $0x8,%esp
c0025648:	68 d5 03 00 00       	push   $0x3d5
c002564d:	e8 77 fc ff ff       	call   c00252c9 <inb>
c0025652:	83 c4 04             	add    $0x4,%esp
c0025655:	0f b6 c0             	movzbl %al,%eax
c0025658:	c1 e0 08             	shl    $0x8,%eax
c002565b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
c002565f:	6a 0f                	push   $0xf
c0025661:	68 d4 03 00 00       	push   $0x3d4
c0025666:	e8 7b fc ff ff       	call   c00252e6 <outb>
c002566b:	83 c4 08             	add    $0x8,%esp
c002566e:	68 d5 03 00 00       	push   $0x3d5
c0025673:	e8 51 fc ff ff       	call   c00252c9 <inb>
c0025678:	83 c4 04             	add    $0x4,%esp
c002567b:	0f b6 c0             	movzbl %al,%eax
c002567e:	66 09 45 fe          	or     %ax,-0x2(%ebp)
c0025682:	0f b7 4d fe          	movzwl -0x2(%ebp),%ecx
c0025686:	0f b7 c1             	movzwl %cx,%eax
c0025689:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c002568f:	c1 e8 10             	shr    $0x10,%eax
c0025692:	89 c2                	mov    %eax,%edx
c0025694:	66 c1 ea 06          	shr    $0x6,%dx
c0025698:	89 d0                	mov    %edx,%eax
c002569a:	c1 e0 02             	shl    $0x2,%eax
c002569d:	01 d0                	add    %edx,%eax
c002569f:	c1 e0 04             	shl    $0x4,%eax
c00256a2:	29 c1                	sub    %eax,%ecx
c00256a4:	89 ca                	mov    %ecx,%edx
c00256a6:	0f b7 d2             	movzwl %dx,%edx
c00256a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00256ac:	89 10                	mov    %edx,(%eax)
c00256ae:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c00256b2:	0f b7 c0             	movzwl %ax,%eax
c00256b5:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c00256bb:	c1 e8 10             	shr    $0x10,%eax
c00256be:	66 c1 e8 06          	shr    $0x6,%ax
c00256c2:	0f b7 d0             	movzwl %ax,%edx
c00256c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00256c8:	89 10                	mov    %edx,(%eax)
c00256ca:	90                   	nop
c00256cb:	c9                   	leave  
c00256cc:	c3                   	ret    

c00256cd <inb>:
c00256cd:	55                   	push   %ebp
c00256ce:	89 e5                	mov    %esp,%ebp
c00256d0:	83 ec 14             	sub    $0x14,%esp
c00256d3:	8b 45 08             	mov    0x8(%ebp),%eax
c00256d6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c00256da:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00256de:	89 c2                	mov    %eax,%edx
c00256e0:	ec                   	in     (%dx),%al
c00256e1:	88 45 ff             	mov    %al,-0x1(%ebp)
c00256e4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00256e8:	c9                   	leave  
c00256e9:	c3                   	ret    

c00256ea <outb>:
c00256ea:	55                   	push   %ebp
c00256eb:	89 e5                	mov    %esp,%ebp
c00256ed:	83 ec 08             	sub    $0x8,%esp
c00256f0:	8b 55 08             	mov    0x8(%ebp),%edx
c00256f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00256f6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00256fa:	88 45 f8             	mov    %al,-0x8(%ebp)
c00256fd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0025701:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0025705:	ee                   	out    %al,(%dx)
c0025706:	90                   	nop
c0025707:	c9                   	leave  
c0025708:	c3                   	ret    

c0025709 <init_poll>:
c0025709:	55                   	push   %ebp
c002570a:	89 e5                	mov    %esp,%ebp
c002570c:	83 ec 08             	sub    $0x8,%esp
c002570f:	a1 c0 fe 03 c0       	mov    0xc003fec0,%eax
c0025714:	85 c0                	test   %eax,%eax
c0025716:	74 1e                	je     c0025736 <init_poll+0x2d>
c0025718:	83 ec 0c             	sub    $0xc,%esp
c002571b:	68 a4 53 03 c0       	push   $0xc00353a4
c0025720:	68 b3 53 03 c0       	push   $0xc00353b3
c0025725:	68 30 54 03 c0       	push   $0xc0035430
c002572a:	6a 45                	push   $0x45
c002572c:	68 ca 53 03 c0       	push   $0xc00353ca
c0025731:	e8 5b 4e 00 00       	call   c002a591 <debug_panic>
c0025736:	83 ec 08             	sub    $0x8,%esp
c0025739:	6a 00                	push   $0x0
c002573b:	68 f9 03 00 00       	push   $0x3f9
c0025740:	e8 a5 ff ff ff       	call   c00256ea <outb>
c0025745:	83 c4 10             	add    $0x10,%esp
c0025748:	83 ec 08             	sub    $0x8,%esp
c002574b:	6a 00                	push   $0x0
c002574d:	68 fa 03 00 00       	push   $0x3fa
c0025752:	e8 93 ff ff ff       	call   c00256ea <outb>
c0025757:	83 c4 10             	add    $0x10,%esp
c002575a:	83 ec 0c             	sub    $0xc,%esp
c002575d:	68 80 25 00 00       	push   $0x2580
c0025762:	e8 e8 01 00 00       	call   c002594f <set_serial>
c0025767:	83 c4 10             	add    $0x10,%esp
c002576a:	83 ec 08             	sub    $0x8,%esp
c002576d:	6a 08                	push   $0x8
c002576f:	68 fc 03 00 00       	push   $0x3fc
c0025774:	e8 71 ff ff ff       	call   c00256ea <outb>
c0025779:	83 c4 10             	add    $0x10,%esp
c002577c:	83 ec 0c             	sub    $0xc,%esp
c002577f:	68 e0 fe 03 c0       	push   $0xc003fee0
c0025784:	e8 29 1c 00 00       	call   c00273b2 <intq_init>
c0025789:	83 c4 10             	add    $0x10,%esp
c002578c:	c7 05 c0 fe 03 c0 01 	movl   $0x1,0xc003fec0
c0025793:	00 00 00 
c0025796:	90                   	nop
c0025797:	c9                   	leave  
c0025798:	c3                   	ret    

c0025799 <serial_init_queue>:
c0025799:	55                   	push   %ebp
c002579a:	89 e5                	mov    %esp,%ebp
c002579c:	83 ec 18             	sub    $0x18,%esp
c002579f:	a1 c0 fe 03 c0       	mov    0xc003fec0,%eax
c00257a4:	85 c0                	test   %eax,%eax
c00257a6:	75 05                	jne    c00257ad <serial_init_queue+0x14>
c00257a8:	e8 5c ff ff ff       	call   c0025709 <init_poll>
c00257ad:	a1 c0 fe 03 c0       	mov    0xc003fec0,%eax
c00257b2:	83 f8 01             	cmp    $0x1,%eax
c00257b5:	74 1e                	je     c00257d5 <serial_init_queue+0x3c>
c00257b7:	83 ec 0c             	sub    $0xc,%esp
c00257ba:	68 e1 53 03 c0       	push   $0xc00353e1
c00257bf:	68 b3 53 03 c0       	push   $0xc00353b3
c00257c4:	68 3c 54 03 c0       	push   $0xc003543c
c00257c9:	6a 58                	push   $0x58
c00257cb:	68 ca 53 03 c0       	push   $0xc00353ca
c00257d0:	e8 bc 4d 00 00       	call   c002a591 <debug_panic>
c00257d5:	83 ec 04             	sub    $0x4,%esp
c00257d8:	68 ee 53 03 c0       	push   $0xc00353ee
c00257dd:	68 d8 5a 02 c0       	push   $0xc0025ad8
c00257e2:	6a 24                	push   $0x24
c00257e4:	e8 24 c8 ff ff       	call   c002200d <intr_register_ext>
c00257e9:	83 c4 10             	add    $0x10,%esp
c00257ec:	c7 05 c0 fe 03 c0 02 	movl   $0x2,0xc003fec0
c00257f3:	00 00 00 
c00257f6:	e8 f1 c5 ff ff       	call   c0021dec <intr_disable>
c00257fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00257fe:	e8 f5 01 00 00       	call   c00259f8 <write_ier>
c0025803:	83 ec 0c             	sub    $0xc,%esp
c0025806:	ff 75 f4             	pushl  -0xc(%ebp)
c0025809:	e8 86 c5 ff ff       	call   c0021d94 <intr_set_level>
c002580e:	83 c4 10             	add    $0x10,%esp
c0025811:	90                   	nop
c0025812:	c9                   	leave  
c0025813:	c3                   	ret    

c0025814 <serial_putc>:
c0025814:	55                   	push   %ebp
c0025815:	89 e5                	mov    %esp,%ebp
c0025817:	83 ec 28             	sub    $0x28,%esp
c002581a:	8b 45 08             	mov    0x8(%ebp),%eax
c002581d:	88 45 e4             	mov    %al,-0x1c(%ebp)
c0025820:	e8 c7 c5 ff ff       	call   c0021dec <intr_disable>
c0025825:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025828:	a1 c0 fe 03 c0       	mov    0xc003fec0,%eax
c002582d:	83 f8 02             	cmp    $0x2,%eax
c0025830:	74 20                	je     c0025852 <serial_putc+0x3e>
c0025832:	a1 c0 fe 03 c0       	mov    0xc003fec0,%eax
c0025837:	85 c0                	test   %eax,%eax
c0025839:	75 05                	jne    c0025840 <serial_putc+0x2c>
c002583b:	e8 c9 fe ff ff       	call   c0025709 <init_poll>
c0025840:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0025844:	83 ec 0c             	sub    $0xc,%esp
c0025847:	50                   	push   %eax
c0025848:	e8 22 02 00 00       	call   c0025a6f <putc_poll>
c002584d:	83 c4 10             	add    $0x10,%esp
c0025850:	eb 53                	jmp    c00258a5 <serial_putc+0x91>
c0025852:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0025856:	75 33                	jne    c002588b <serial_putc+0x77>
c0025858:	83 ec 0c             	sub    $0xc,%esp
c002585b:	68 e0 fe 03 c0       	push   $0xc003fee0
c0025860:	e8 d1 1b 00 00       	call   c0027436 <intq_full>
c0025865:	83 c4 10             	add    $0x10,%esp
c0025868:	84 c0                	test   %al,%al
c002586a:	74 1f                	je     c002588b <serial_putc+0x77>
c002586c:	83 ec 0c             	sub    $0xc,%esp
c002586f:	68 e0 fe 03 c0       	push   $0xc003fee0
c0025874:	e8 0b 1c 00 00       	call   c0027484 <intq_getc>
c0025879:	83 c4 10             	add    $0x10,%esp
c002587c:	0f b6 c0             	movzbl %al,%eax
c002587f:	83 ec 0c             	sub    $0xc,%esp
c0025882:	50                   	push   %eax
c0025883:	e8 e7 01 00 00       	call   c0025a6f <putc_poll>
c0025888:	83 c4 10             	add    $0x10,%esp
c002588b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002588f:	83 ec 08             	sub    $0x8,%esp
c0025892:	50                   	push   %eax
c0025893:	68 e0 fe 03 c0       	push   $0xc003fee0
c0025898:	e8 c9 1c 00 00       	call   c0027566 <intq_putc>
c002589d:	83 c4 10             	add    $0x10,%esp
c00258a0:	e8 53 01 00 00       	call   c00259f8 <write_ier>
c00258a5:	83 ec 0c             	sub    $0xc,%esp
c00258a8:	ff 75 f4             	pushl  -0xc(%ebp)
c00258ab:	e8 e4 c4 ff ff       	call   c0021d94 <intr_set_level>
c00258b0:	83 c4 10             	add    $0x10,%esp
c00258b3:	90                   	nop
c00258b4:	c9                   	leave  
c00258b5:	c3                   	ret    

c00258b6 <serial_flush>:
c00258b6:	55                   	push   %ebp
c00258b7:	89 e5                	mov    %esp,%ebp
c00258b9:	83 ec 18             	sub    $0x18,%esp
c00258bc:	e8 2b c5 ff ff       	call   c0021dec <intr_disable>
c00258c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00258c4:	eb 1f                	jmp    c00258e5 <serial_flush+0x2f>
c00258c6:	83 ec 0c             	sub    $0xc,%esp
c00258c9:	68 e0 fe 03 c0       	push   $0xc003fee0
c00258ce:	e8 b1 1b 00 00       	call   c0027484 <intq_getc>
c00258d3:	83 c4 10             	add    $0x10,%esp
c00258d6:	0f b6 c0             	movzbl %al,%eax
c00258d9:	83 ec 0c             	sub    $0xc,%esp
c00258dc:	50                   	push   %eax
c00258dd:	e8 8d 01 00 00       	call   c0025a6f <putc_poll>
c00258e2:	83 c4 10             	add    $0x10,%esp
c00258e5:	83 ec 0c             	sub    $0xc,%esp
c00258e8:	68 e0 fe 03 c0       	push   $0xc003fee0
c00258ed:	e8 04 1b 00 00       	call   c00273f6 <intq_empty>
c00258f2:	83 c4 10             	add    $0x10,%esp
c00258f5:	83 f0 01             	xor    $0x1,%eax
c00258f8:	84 c0                	test   %al,%al
c00258fa:	75 ca                	jne    c00258c6 <serial_flush+0x10>
c00258fc:	83 ec 0c             	sub    $0xc,%esp
c00258ff:	ff 75 f4             	pushl  -0xc(%ebp)
c0025902:	e8 8d c4 ff ff       	call   c0021d94 <intr_set_level>
c0025907:	83 c4 10             	add    $0x10,%esp
c002590a:	90                   	nop
c002590b:	c9                   	leave  
c002590c:	c3                   	ret    

c002590d <serial_notify>:
c002590d:	55                   	push   %ebp
c002590e:	89 e5                	mov    %esp,%ebp
c0025910:	83 ec 08             	sub    $0x8,%esp
c0025913:	e8 5f c4 ff ff       	call   c0021d77 <intr_get_level>
c0025918:	85 c0                	test   %eax,%eax
c002591a:	74 21                	je     c002593d <serial_notify+0x30>
c002591c:	83 ec 0c             	sub    $0xc,%esp
c002591f:	68 f5 53 03 c0       	push   $0xc00353f5
c0025924:	68 b3 53 03 c0       	push   $0xc00353b3
c0025929:	68 50 54 03 c0       	push   $0xc0035450
c002592e:	68 96 00 00 00       	push   $0x96
c0025933:	68 ca 53 03 c0       	push   $0xc00353ca
c0025938:	e8 54 4c 00 00       	call   c002a591 <debug_panic>
c002593d:	a1 c0 fe 03 c0       	mov    0xc003fec0,%eax
c0025942:	83 f8 02             	cmp    $0x2,%eax
c0025945:	75 05                	jne    c002594c <serial_notify+0x3f>
c0025947:	e8 ac 00 00 00       	call   c00259f8 <write_ier>
c002594c:	90                   	nop
c002594d:	c9                   	leave  
c002594e:	c3                   	ret    

c002594f <set_serial>:
c002594f:	55                   	push   %ebp
c0025950:	89 e5                	mov    %esp,%ebp
c0025952:	83 ec 18             	sub    $0x18,%esp
c0025955:	c7 45 f4 00 c2 01 00 	movl   $0x1c200,-0xc(%ebp)
c002595c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002595f:	99                   	cltd   
c0025960:	f7 7d 08             	idivl  0x8(%ebp)
c0025963:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0025967:	81 7d 08 2b 01 00 00 	cmpl   $0x12b,0x8(%ebp)
c002596e:	7e 09                	jle    c0025979 <set_serial+0x2a>
c0025970:	81 7d 08 00 c2 01 00 	cmpl   $0x1c200,0x8(%ebp)
c0025977:	7e 21                	jle    c002599a <set_serial+0x4b>
c0025979:	83 ec 0c             	sub    $0xc,%esp
c002597c:	68 13 54 03 c0       	push   $0xc0035413
c0025981:	68 b3 53 03 c0       	push   $0xc00353b3
c0025986:	68 60 54 03 c0       	push   $0xc0035460
c002598b:	68 a2 00 00 00       	push   $0xa2
c0025990:	68 ca 53 03 c0       	push   $0xc00353ca
c0025995:	e8 f7 4b 00 00       	call   c002a591 <debug_panic>
c002599a:	83 ec 08             	sub    $0x8,%esp
c002599d:	68 83 00 00 00       	push   $0x83
c00259a2:	68 fb 03 00 00       	push   $0x3fb
c00259a7:	e8 3e fd ff ff       	call   c00256ea <outb>
c00259ac:	83 c4 10             	add    $0x10,%esp
c00259af:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c00259b3:	0f b6 c0             	movzbl %al,%eax
c00259b6:	83 ec 08             	sub    $0x8,%esp
c00259b9:	50                   	push   %eax
c00259ba:	68 f8 03 00 00       	push   $0x3f8
c00259bf:	e8 26 fd ff ff       	call   c00256ea <outb>
c00259c4:	83 c4 10             	add    $0x10,%esp
c00259c7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c00259cb:	66 c1 e8 08          	shr    $0x8,%ax
c00259cf:	0f b6 c0             	movzbl %al,%eax
c00259d2:	83 ec 08             	sub    $0x8,%esp
c00259d5:	50                   	push   %eax
c00259d6:	68 f9 03 00 00       	push   $0x3f9
c00259db:	e8 0a fd ff ff       	call   c00256ea <outb>
c00259e0:	83 c4 10             	add    $0x10,%esp
c00259e3:	83 ec 08             	sub    $0x8,%esp
c00259e6:	6a 03                	push   $0x3
c00259e8:	68 fb 03 00 00       	push   $0x3fb
c00259ed:	e8 f8 fc ff ff       	call   c00256ea <outb>
c00259f2:	83 c4 10             	add    $0x10,%esp
c00259f5:	90                   	nop
c00259f6:	c9                   	leave  
c00259f7:	c3                   	ret    

c00259f8 <write_ier>:
c00259f8:	55                   	push   %ebp
c00259f9:	89 e5                	mov    %esp,%ebp
c00259fb:	83 ec 18             	sub    $0x18,%esp
c00259fe:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0025a02:	e8 70 c3 ff ff       	call   c0021d77 <intr_get_level>
c0025a07:	85 c0                	test   %eax,%eax
c0025a09:	74 21                	je     c0025a2c <write_ier+0x34>
c0025a0b:	83 ec 0c             	sub    $0xc,%esp
c0025a0e:	68 f5 53 03 c0       	push   $0xc00353f5
c0025a13:	68 b3 53 03 c0       	push   $0xc00353b3
c0025a18:	68 6c 54 03 c0       	push   $0xc003546c
c0025a1d:	68 b5 00 00 00       	push   $0xb5
c0025a22:	68 ca 53 03 c0       	push   $0xc00353ca
c0025a27:	e8 65 4b 00 00       	call   c002a591 <debug_panic>
c0025a2c:	83 ec 0c             	sub    $0xc,%esp
c0025a2f:	68 e0 fe 03 c0       	push   $0xc003fee0
c0025a34:	e8 bd 19 00 00       	call   c00273f6 <intq_empty>
c0025a39:	83 c4 10             	add    $0x10,%esp
c0025a3c:	83 f0 01             	xor    $0x1,%eax
c0025a3f:	84 c0                	test   %al,%al
c0025a41:	74 04                	je     c0025a47 <write_ier+0x4f>
c0025a43:	80 4d f7 02          	orb    $0x2,-0x9(%ebp)
c0025a47:	e8 27 19 00 00       	call   c0027373 <input_full>
c0025a4c:	83 f0 01             	xor    $0x1,%eax
c0025a4f:	84 c0                	test   %al,%al
c0025a51:	74 04                	je     c0025a57 <write_ier+0x5f>
c0025a53:	80 4d f7 01          	orb    $0x1,-0x9(%ebp)
c0025a57:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0025a5b:	83 ec 08             	sub    $0x8,%esp
c0025a5e:	50                   	push   %eax
c0025a5f:	68 f9 03 00 00       	push   $0x3f9
c0025a64:	e8 81 fc ff ff       	call   c00256ea <outb>
c0025a69:	83 c4 10             	add    $0x10,%esp
c0025a6c:	90                   	nop
c0025a6d:	c9                   	leave  
c0025a6e:	c3                   	ret    

c0025a6f <putc_poll>:
c0025a6f:	55                   	push   %ebp
c0025a70:	89 e5                	mov    %esp,%ebp
c0025a72:	83 ec 18             	sub    $0x18,%esp
c0025a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0025a78:	88 45 f4             	mov    %al,-0xc(%ebp)
c0025a7b:	e8 f7 c2 ff ff       	call   c0021d77 <intr_get_level>
c0025a80:	85 c0                	test   %eax,%eax
c0025a82:	74 22                	je     c0025aa6 <putc_poll+0x37>
c0025a84:	83 ec 0c             	sub    $0xc,%esp
c0025a87:	68 f5 53 03 c0       	push   $0xc00353f5
c0025a8c:	68 b3 53 03 c0       	push   $0xc00353b3
c0025a91:	68 78 54 03 c0       	push   $0xc0035478
c0025a96:	68 c9 00 00 00       	push   $0xc9
c0025a9b:	68 ca 53 03 c0       	push   $0xc00353ca
c0025aa0:	e8 ec 4a 00 00       	call   c002a591 <debug_panic>
c0025aa5:	90                   	nop
c0025aa6:	83 ec 0c             	sub    $0xc,%esp
c0025aa9:	68 fd 03 00 00       	push   $0x3fd
c0025aae:	e8 1a fc ff ff       	call   c00256cd <inb>
c0025ab3:	83 c4 10             	add    $0x10,%esp
c0025ab6:	0f b6 c0             	movzbl %al,%eax
c0025ab9:	83 e0 20             	and    $0x20,%eax
c0025abc:	85 c0                	test   %eax,%eax
c0025abe:	74 e5                	je     c0025aa5 <putc_poll+0x36>
c0025ac0:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0025ac4:	83 ec 08             	sub    $0x8,%esp
c0025ac7:	50                   	push   %eax
c0025ac8:	68 f8 03 00 00       	push   $0x3f8
c0025acd:	e8 18 fc ff ff       	call   c00256ea <outb>
c0025ad2:	83 c4 10             	add    $0x10,%esp
c0025ad5:	90                   	nop
c0025ad6:	c9                   	leave  
c0025ad7:	c3                   	ret    

c0025ad8 <serial_interrupt>:
c0025ad8:	55                   	push   %ebp
c0025ad9:	89 e5                	mov    %esp,%ebp
c0025adb:	83 ec 08             	sub    $0x8,%esp
c0025ade:	68 fa 03 00 00       	push   $0x3fa
c0025ae3:	e8 e5 fb ff ff       	call   c00256cd <inb>
c0025ae8:	83 c4 04             	add    $0x4,%esp
c0025aeb:	eb 1c                	jmp    c0025b09 <serial_interrupt+0x31>
c0025aed:	68 f8 03 00 00       	push   $0x3f8
c0025af2:	e8 d6 fb ff ff       	call   c00256cd <inb>
c0025af7:	83 c4 04             	add    $0x4,%esp
c0025afa:	0f b6 c0             	movzbl %al,%eax
c0025afd:	83 ec 0c             	sub    $0xc,%esp
c0025b00:	50                   	push   %eax
c0025b01:	e8 ae 17 00 00       	call   c00272b4 <input_putc>
c0025b06:	83 c4 10             	add    $0x10,%esp
c0025b09:	e8 65 18 00 00       	call   c0027373 <input_full>
c0025b0e:	83 f0 01             	xor    $0x1,%eax
c0025b11:	84 c0                	test   %al,%al
c0025b13:	74 40                	je     c0025b55 <serial_interrupt+0x7d>
c0025b15:	83 ec 0c             	sub    $0xc,%esp
c0025b18:	68 fd 03 00 00       	push   $0x3fd
c0025b1d:	e8 ab fb ff ff       	call   c00256cd <inb>
c0025b22:	83 c4 10             	add    $0x10,%esp
c0025b25:	0f b6 c0             	movzbl %al,%eax
c0025b28:	83 e0 01             	and    $0x1,%eax
c0025b2b:	85 c0                	test   %eax,%eax
c0025b2d:	75 be                	jne    c0025aed <serial_interrupt+0x15>
c0025b2f:	eb 24                	jmp    c0025b55 <serial_interrupt+0x7d>
c0025b31:	83 ec 0c             	sub    $0xc,%esp
c0025b34:	68 e0 fe 03 c0       	push   $0xc003fee0
c0025b39:	e8 46 19 00 00       	call   c0027484 <intq_getc>
c0025b3e:	83 c4 10             	add    $0x10,%esp
c0025b41:	0f b6 c0             	movzbl %al,%eax
c0025b44:	83 ec 08             	sub    $0x8,%esp
c0025b47:	50                   	push   %eax
c0025b48:	68 f8 03 00 00       	push   $0x3f8
c0025b4d:	e8 98 fb ff ff       	call   c00256ea <outb>
c0025b52:	83 c4 10             	add    $0x10,%esp
c0025b55:	83 ec 0c             	sub    $0xc,%esp
c0025b58:	68 e0 fe 03 c0       	push   $0xc003fee0
c0025b5d:	e8 94 18 00 00       	call   c00273f6 <intq_empty>
c0025b62:	83 c4 10             	add    $0x10,%esp
c0025b65:	83 f0 01             	xor    $0x1,%eax
c0025b68:	84 c0                	test   %al,%al
c0025b6a:	74 1a                	je     c0025b86 <serial_interrupt+0xae>
c0025b6c:	83 ec 0c             	sub    $0xc,%esp
c0025b6f:	68 fd 03 00 00       	push   $0x3fd
c0025b74:	e8 54 fb ff ff       	call   c00256cd <inb>
c0025b79:	83 c4 10             	add    $0x10,%esp
c0025b7c:	0f b6 c0             	movzbl %al,%eax
c0025b7f:	83 e0 20             	and    $0x20,%eax
c0025b82:	85 c0                	test   %eax,%eax
c0025b84:	75 ab                	jne    c0025b31 <serial_interrupt+0x59>
c0025b86:	e8 6d fe ff ff       	call   c00259f8 <write_ier>
c0025b8b:	90                   	nop
c0025b8c:	c9                   	leave  
c0025b8d:	c3                   	ret    

c0025b8e <block_type_name>:
c0025b8e:	55                   	push   %ebp
c0025b8f:	89 e5                	mov    %esp,%ebp
c0025b91:	83 ec 08             	sub    $0x8,%esp
c0025b94:	83 7d 08 05          	cmpl   $0x5,0x8(%ebp)
c0025b98:	76 1e                	jbe    c0025bb8 <block_type_name+0x2a>
c0025b9a:	83 ec 0c             	sub    $0xc,%esp
c0025b9d:	68 84 54 03 c0       	push   $0xc0035484
c0025ba2:	68 95 54 03 c0       	push   $0xc0035495
c0025ba7:	68 9c 55 03 c0       	push   $0xc003559c
c0025bac:	6a 2f                	push   $0x2f
c0025bae:	68 ac 54 03 c0       	push   $0xc00354ac
c0025bb3:	e8 d9 49 00 00       	call   c002a591 <debug_panic>
c0025bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0025bbb:	8b 04 85 1c e1 03 c0 	mov    -0x3ffc1ee4(,%eax,4),%eax
c0025bc2:	c9                   	leave  
c0025bc3:	c3                   	ret    

c0025bc4 <block_get_role>:
c0025bc4:	55                   	push   %ebp
c0025bc5:	89 e5                	mov    %esp,%ebp
c0025bc7:	83 ec 08             	sub    $0x8,%esp
c0025bca:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c0025bce:	76 1e                	jbe    c0025bee <block_get_role+0x2a>
c0025bd0:	83 ec 0c             	sub    $0xc,%esp
c0025bd3:	68 c2 54 03 c0       	push   $0xc00354c2
c0025bd8:	68 95 54 03 c0       	push   $0xc0035495
c0025bdd:	68 d4 55 03 c0       	push   $0xc00355d4
c0025be2:	6a 38                	push   $0x38
c0025be4:	68 ac 54 03 c0       	push   $0xc00354ac
c0025be9:	e8 a3 49 00 00       	call   c002a591 <debug_panic>
c0025bee:	8b 45 08             	mov    0x8(%ebp),%eax
c0025bf1:	8b 04 85 54 ff 03 c0 	mov    -0x3ffc00ac(,%eax,4),%eax
c0025bf8:	c9                   	leave  
c0025bf9:	c3                   	ret    

c0025bfa <block_set_role>:
c0025bfa:	55                   	push   %ebp
c0025bfb:	89 e5                	mov    %esp,%ebp
c0025bfd:	83 ec 08             	sub    $0x8,%esp
c0025c00:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c0025c04:	76 1e                	jbe    c0025c24 <block_set_role+0x2a>
c0025c06:	83 ec 0c             	sub    $0xc,%esp
c0025c09:	68 c2 54 03 c0       	push   $0xc00354c2
c0025c0e:	68 95 54 03 c0       	push   $0xc0035495
c0025c13:	68 e4 55 03 c0       	push   $0xc00355e4
c0025c18:	6a 40                	push   $0x40
c0025c1a:	68 ac 54 03 c0       	push   $0xc00354ac
c0025c1f:	e8 6d 49 00 00       	call   c002a591 <debug_panic>
c0025c24:	8b 45 08             	mov    0x8(%ebp),%eax
c0025c27:	8b 55 0c             	mov    0xc(%ebp),%edx
c0025c2a:	89 14 85 54 ff 03 c0 	mov    %edx,-0x3ffc00ac(,%eax,4)
c0025c31:	90                   	nop
c0025c32:	c9                   	leave  
c0025c33:	c3                   	ret    

c0025c34 <block_first>:
c0025c34:	55                   	push   %ebp
c0025c35:	89 e5                	mov    %esp,%ebp
c0025c37:	83 ec 08             	sub    $0x8,%esp
c0025c3a:	83 ec 0c             	sub    $0xc,%esp
c0025c3d:	68 0c e1 03 c0       	push   $0xc003e10c
c0025c42:	e8 12 4c 00 00       	call   c002a859 <list_begin>
c0025c47:	83 c4 10             	add    $0x10,%esp
c0025c4a:	83 ec 0c             	sub    $0xc,%esp
c0025c4d:	50                   	push   %eax
c0025c4e:	e8 6d 03 00 00       	call   c0025fc0 <list_elem_to_block>
c0025c53:	83 c4 10             	add    $0x10,%esp
c0025c56:	c9                   	leave  
c0025c57:	c3                   	ret    

c0025c58 <block_next>:
c0025c58:	55                   	push   %ebp
c0025c59:	89 e5                	mov    %esp,%ebp
c0025c5b:	83 ec 08             	sub    $0x8,%esp
c0025c5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0025c61:	83 ec 0c             	sub    $0xc,%esp
c0025c64:	50                   	push   %eax
c0025c65:	e8 21 4c 00 00       	call   c002a88b <list_next>
c0025c6a:	83 c4 10             	add    $0x10,%esp
c0025c6d:	83 ec 0c             	sub    $0xc,%esp
c0025c70:	50                   	push   %eax
c0025c71:	e8 4a 03 00 00       	call   c0025fc0 <list_elem_to_block>
c0025c76:	83 c4 10             	add    $0x10,%esp
c0025c79:	c9                   	leave  
c0025c7a:	c3                   	ret    

c0025c7b <block_get_by_name>:
c0025c7b:	55                   	push   %ebp
c0025c7c:	89 e5                	mov    %esp,%ebp
c0025c7e:	83 ec 18             	sub    $0x18,%esp
c0025c81:	83 ec 0c             	sub    $0xc,%esp
c0025c84:	68 0c e1 03 c0       	push   $0xc003e10c
c0025c89:	e8 cb 4b 00 00       	call   c002a859 <list_begin>
c0025c8e:	83 c4 10             	add    $0x10,%esp
c0025c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025c94:	eb 3b                	jmp    c0025cd1 <block_get_by_name+0x56>
c0025c96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025c99:	83 c0 04             	add    $0x4,%eax
c0025c9c:	83 e8 04             	sub    $0x4,%eax
c0025c9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0025ca2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025ca5:	83 c0 08             	add    $0x8,%eax
c0025ca8:	83 ec 08             	sub    $0x8,%esp
c0025cab:	50                   	push   %eax
c0025cac:	ff 75 08             	pushl  0x8(%ebp)
c0025caf:	e8 a5 37 00 00       	call   c0029459 <strcmp>
c0025cb4:	83 c4 10             	add    $0x10,%esp
c0025cb7:	85 c0                	test   %eax,%eax
c0025cb9:	75 05                	jne    c0025cc0 <block_get_by_name+0x45>
c0025cbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025cbe:	eb 2b                	jmp    c0025ceb <block_get_by_name+0x70>
c0025cc0:	83 ec 0c             	sub    $0xc,%esp
c0025cc3:	ff 75 f4             	pushl  -0xc(%ebp)
c0025cc6:	e8 c0 4b 00 00       	call   c002a88b <list_next>
c0025ccb:	83 c4 10             	add    $0x10,%esp
c0025cce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025cd1:	83 ec 0c             	sub    $0xc,%esp
c0025cd4:	68 0c e1 03 c0       	push   $0xc003e10c
c0025cd9:	e8 f7 4b 00 00       	call   c002a8d5 <list_end>
c0025cde:	83 c4 10             	add    $0x10,%esp
c0025ce1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0025ce4:	75 b0                	jne    c0025c96 <block_get_by_name+0x1b>
c0025ce6:	b8 00 00 00 00       	mov    $0x0,%eax
c0025ceb:	c9                   	leave  
c0025cec:	c3                   	ret    

c0025ced <check_sector>:
c0025ced:	55                   	push   %ebp
c0025cee:	89 e5                	mov    %esp,%ebp
c0025cf0:	53                   	push   %ebx
c0025cf1:	83 ec 04             	sub    $0x4,%esp
c0025cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0025cf7:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025cfa:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0025cfd:	77 32                	ja     c0025d31 <check_sector+0x44>
c0025cff:	8b 45 08             	mov    0x8(%ebp),%eax
c0025d02:	8b 58 1c             	mov    0x1c(%eax),%ebx
c0025d05:	83 ec 0c             	sub    $0xc,%esp
c0025d08:	ff 75 08             	pushl  0x8(%ebp)
c0025d0b:	e8 fd 00 00 00       	call   c0025e0d <block_name>
c0025d10:	83 c4 10             	add    $0x10,%esp
c0025d13:	83 ec 04             	sub    $0x4,%esp
c0025d16:	53                   	push   %ebx
c0025d17:	ff 75 0c             	pushl  0xc(%ebp)
c0025d1a:	50                   	push   %eax
c0025d1b:	68 d8 54 03 c0       	push   $0xc00354d8
c0025d20:	68 f4 55 03 c0       	push   $0xc00355f4
c0025d25:	6a 70                	push   $0x70
c0025d27:	68 ac 54 03 c0       	push   $0xc00354ac
c0025d2c:	e8 60 48 00 00       	call   c002a591 <debug_panic>
c0025d31:	90                   	nop
c0025d32:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0025d35:	c9                   	leave  
c0025d36:	c3                   	ret    

c0025d37 <block_read>:
c0025d37:	55                   	push   %ebp
c0025d38:	89 e5                	mov    %esp,%ebp
c0025d3a:	83 ec 08             	sub    $0x8,%esp
c0025d3d:	83 ec 08             	sub    $0x8,%esp
c0025d40:	ff 75 0c             	pushl  0xc(%ebp)
c0025d43:	ff 75 08             	pushl  0x8(%ebp)
c0025d46:	e8 a2 ff ff ff       	call   c0025ced <check_sector>
c0025d4b:	83 c4 10             	add    $0x10,%esp
c0025d4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0025d51:	8b 40 20             	mov    0x20(%eax),%eax
c0025d54:	8b 00                	mov    (%eax),%eax
c0025d56:	8b 55 08             	mov    0x8(%ebp),%edx
c0025d59:	8b 52 24             	mov    0x24(%edx),%edx
c0025d5c:	83 ec 04             	sub    $0x4,%esp
c0025d5f:	ff 75 10             	pushl  0x10(%ebp)
c0025d62:	ff 75 0c             	pushl  0xc(%ebp)
c0025d65:	52                   	push   %edx
c0025d66:	ff d0                	call   *%eax
c0025d68:	83 c4 10             	add    $0x10,%esp
c0025d6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0025d6e:	8b 50 2c             	mov    0x2c(%eax),%edx
c0025d71:	8b 40 28             	mov    0x28(%eax),%eax
c0025d74:	83 c0 01             	add    $0x1,%eax
c0025d77:	83 d2 00             	adc    $0x0,%edx
c0025d7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0025d7d:	89 41 28             	mov    %eax,0x28(%ecx)
c0025d80:	89 51 2c             	mov    %edx,0x2c(%ecx)
c0025d83:	90                   	nop
c0025d84:	c9                   	leave  
c0025d85:	c3                   	ret    

c0025d86 <block_write>:
c0025d86:	55                   	push   %ebp
c0025d87:	89 e5                	mov    %esp,%ebp
c0025d89:	83 ec 08             	sub    $0x8,%esp
c0025d8c:	83 ec 08             	sub    $0x8,%esp
c0025d8f:	ff 75 0c             	pushl  0xc(%ebp)
c0025d92:	ff 75 08             	pushl  0x8(%ebp)
c0025d95:	e8 53 ff ff ff       	call   c0025ced <check_sector>
c0025d9a:	83 c4 10             	add    $0x10,%esp
c0025d9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0025da0:	8b 40 18             	mov    0x18(%eax),%eax
c0025da3:	83 f8 05             	cmp    $0x5,%eax
c0025da6:	75 21                	jne    c0025dc9 <block_write+0x43>
c0025da8:	83 ec 0c             	sub    $0xc,%esp
c0025dab:	68 0b 55 03 c0       	push   $0xc003550b
c0025db0:	68 95 54 03 c0       	push   $0xc0035495
c0025db5:	68 04 56 03 c0       	push   $0xc0035604
c0025dba:	68 89 00 00 00       	push   $0x89
c0025dbf:	68 ac 54 03 c0       	push   $0xc00354ac
c0025dc4:	e8 c8 47 00 00       	call   c002a591 <debug_panic>
c0025dc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0025dcc:	8b 40 20             	mov    0x20(%eax),%eax
c0025dcf:	8b 40 04             	mov    0x4(%eax),%eax
c0025dd2:	8b 55 08             	mov    0x8(%ebp),%edx
c0025dd5:	8b 52 24             	mov    0x24(%edx),%edx
c0025dd8:	83 ec 04             	sub    $0x4,%esp
c0025ddb:	ff 75 10             	pushl  0x10(%ebp)
c0025dde:	ff 75 0c             	pushl  0xc(%ebp)
c0025de1:	52                   	push   %edx
c0025de2:	ff d0                	call   *%eax
c0025de4:	83 c4 10             	add    $0x10,%esp
c0025de7:	8b 45 08             	mov    0x8(%ebp),%eax
c0025dea:	8b 50 34             	mov    0x34(%eax),%edx
c0025ded:	8b 40 30             	mov    0x30(%eax),%eax
c0025df0:	83 c0 01             	add    $0x1,%eax
c0025df3:	83 d2 00             	adc    $0x0,%edx
c0025df6:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0025df9:	89 41 30             	mov    %eax,0x30(%ecx)
c0025dfc:	89 51 34             	mov    %edx,0x34(%ecx)
c0025dff:	90                   	nop
c0025e00:	c9                   	leave  
c0025e01:	c3                   	ret    

c0025e02 <block_size>:
c0025e02:	55                   	push   %ebp
c0025e03:	89 e5                	mov    %esp,%ebp
c0025e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0025e08:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025e0b:	5d                   	pop    %ebp
c0025e0c:	c3                   	ret    

c0025e0d <block_name>:
c0025e0d:	55                   	push   %ebp
c0025e0e:	89 e5                	mov    %esp,%ebp
c0025e10:	8b 45 08             	mov    0x8(%ebp),%eax
c0025e13:	83 c0 08             	add    $0x8,%eax
c0025e16:	5d                   	pop    %ebp
c0025e17:	c3                   	ret    

c0025e18 <block_type>:
c0025e18:	55                   	push   %ebp
c0025e19:	89 e5                	mov    %esp,%ebp
c0025e1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0025e1e:	8b 40 18             	mov    0x18(%eax),%eax
c0025e21:	5d                   	pop    %ebp
c0025e22:	c3                   	ret    

c0025e23 <block_print_stats>:
c0025e23:	55                   	push   %ebp
c0025e24:	89 e5                	mov    %esp,%ebp
c0025e26:	56                   	push   %esi
c0025e27:	53                   	push   %ebx
c0025e28:	83 ec 20             	sub    $0x20,%esp
c0025e2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0025e32:	eb 63                	jmp    c0025e97 <block_print_stats+0x74>
c0025e34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025e37:	8b 04 85 54 ff 03 c0 	mov    -0x3ffc00ac(,%eax,4),%eax
c0025e3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0025e41:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0025e45:	74 4c                	je     c0025e93 <block_print_stats+0x70>
c0025e47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025e4a:	8b 50 34             	mov    0x34(%eax),%edx
c0025e4d:	8b 40 30             	mov    0x30(%eax),%eax
c0025e50:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0025e53:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0025e56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025e59:	8b 58 28             	mov    0x28(%eax),%ebx
c0025e5c:	8b 70 2c             	mov    0x2c(%eax),%esi
c0025e5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025e62:	8b 40 18             	mov    0x18(%eax),%eax
c0025e65:	83 ec 0c             	sub    $0xc,%esp
c0025e68:	50                   	push   %eax
c0025e69:	e8 20 fd ff ff       	call   c0025b8e <block_type_name>
c0025e6e:	83 c4 10             	add    $0x10,%esp
c0025e71:	89 c2                	mov    %eax,%edx
c0025e73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025e76:	83 c0 08             	add    $0x8,%eax
c0025e79:	83 ec 04             	sub    $0x4,%esp
c0025e7c:	ff 75 e4             	pushl  -0x1c(%ebp)
c0025e7f:	ff 75 e0             	pushl  -0x20(%ebp)
c0025e82:	56                   	push   %esi
c0025e83:	53                   	push   %ebx
c0025e84:	52                   	push   %edx
c0025e85:	50                   	push   %eax
c0025e86:	68 28 55 03 c0       	push   $0xc0035528
c0025e8b:	e8 a0 21 00 00       	call   c0028030 <printf>
c0025e90:	83 c4 20             	add    $0x20,%esp
c0025e93:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0025e97:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c0025e9b:	7e 97                	jle    c0025e34 <block_print_stats+0x11>
c0025e9d:	90                   	nop
c0025e9e:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0025ea1:	5b                   	pop    %ebx
c0025ea2:	5e                   	pop    %esi
c0025ea3:	5d                   	pop    %ebp
c0025ea4:	c3                   	ret    

c0025ea5 <block_register>:
c0025ea5:	55                   	push   %ebp
c0025ea6:	89 e5                	mov    %esp,%ebp
c0025ea8:	83 ec 18             	sub    $0x18,%esp
c0025eab:	83 ec 0c             	sub    $0xc,%esp
c0025eae:	6a 38                	push   $0x38
c0025eb0:	e8 9e e2 ff ff       	call   c0024153 <malloc>
c0025eb5:	83 c4 10             	add    $0x10,%esp
c0025eb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025ebb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0025ebf:	75 19                	jne    c0025eda <block_register+0x35>
c0025ec1:	68 4c 55 03 c0       	push   $0xc003554c
c0025ec6:	68 10 56 03 c0       	push   $0xc0035610
c0025ecb:	68 c1 00 00 00       	push   $0xc1
c0025ed0:	68 ac 54 03 c0       	push   $0xc00354ac
c0025ed5:	e8 b7 46 00 00       	call   c002a591 <debug_panic>
c0025eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025edd:	83 ec 08             	sub    $0x8,%esp
c0025ee0:	50                   	push   %eax
c0025ee1:	68 0c e1 03 c0       	push   $0xc003e10c
c0025ee6:	e8 f9 4c 00 00       	call   c002abe4 <list_push_back>
c0025eeb:	83 c4 10             	add    $0x10,%esp
c0025eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025ef1:	83 c0 08             	add    $0x8,%eax
c0025ef4:	83 ec 04             	sub    $0x4,%esp
c0025ef7:	6a 10                	push   $0x10
c0025ef9:	ff 75 08             	pushl  0x8(%ebp)
c0025efc:	50                   	push   %eax
c0025efd:	e8 2c 3a 00 00       	call   c002992e <strlcpy>
c0025f02:	83 c4 10             	add    $0x10,%esp
c0025f05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f08:	8b 55 0c             	mov    0xc(%ebp),%edx
c0025f0b:	89 50 18             	mov    %edx,0x18(%eax)
c0025f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f11:	8b 55 14             	mov    0x14(%ebp),%edx
c0025f14:	89 50 1c             	mov    %edx,0x1c(%eax)
c0025f17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f1a:	8b 55 18             	mov    0x18(%ebp),%edx
c0025f1d:	89 50 20             	mov    %edx,0x20(%eax)
c0025f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f23:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0025f26:	89 50 24             	mov    %edx,0x24(%eax)
c0025f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f2c:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c0025f33:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
c0025f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f3d:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
c0025f44:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
c0025f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f4e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0025f54:	83 c2 08             	add    $0x8,%edx
c0025f57:	83 ec 04             	sub    $0x4,%esp
c0025f5a:	50                   	push   %eax
c0025f5b:	52                   	push   %edx
c0025f5c:	68 82 55 03 c0       	push   $0xc0035582
c0025f61:	e8 ca 20 00 00       	call   c0028030 <printf>
c0025f66:	83 c4 10             	add    $0x10,%esp
c0025f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f6c:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025f6f:	ba 00 00 00 00       	mov    $0x0,%edx
c0025f74:	0f a4 c2 09          	shld   $0x9,%eax,%edx
c0025f78:	c1 e0 09             	shl    $0x9,%eax
c0025f7b:	83 ec 08             	sub    $0x8,%esp
c0025f7e:	52                   	push   %edx
c0025f7f:	50                   	push   %eax
c0025f80:	e8 d0 2d 00 00       	call   c0028d55 <print_human_readable_size>
c0025f85:	83 c4 10             	add    $0x10,%esp
c0025f88:	83 ec 0c             	sub    $0xc,%esp
c0025f8b:	6a 29                	push   $0x29
c0025f8d:	e8 4e 69 00 00       	call   c002c8e0 <putchar>
c0025f92:	83 c4 10             	add    $0x10,%esp
c0025f95:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0025f99:	74 13                	je     c0025fae <block_register+0x109>
c0025f9b:	83 ec 08             	sub    $0x8,%esp
c0025f9e:	ff 75 10             	pushl  0x10(%ebp)
c0025fa1:	68 94 55 03 c0       	push   $0xc0035594
c0025fa6:	e8 85 20 00 00       	call   c0028030 <printf>
c0025fab:	83 c4 10             	add    $0x10,%esp
c0025fae:	83 ec 0c             	sub    $0xc,%esp
c0025fb1:	6a 0a                	push   $0xa
c0025fb3:	e8 28 69 00 00       	call   c002c8e0 <putchar>
c0025fb8:	83 c4 10             	add    $0x10,%esp
c0025fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025fbe:	c9                   	leave  
c0025fbf:	c3                   	ret    

c0025fc0 <list_elem_to_block>:
c0025fc0:	55                   	push   %ebp
c0025fc1:	89 e5                	mov    %esp,%ebp
c0025fc3:	83 ec 08             	sub    $0x8,%esp
c0025fc6:	83 ec 0c             	sub    $0xc,%esp
c0025fc9:	68 0c e1 03 c0       	push   $0xc003e10c
c0025fce:	e8 02 49 00 00       	call   c002a8d5 <list_end>
c0025fd3:	83 c4 10             	add    $0x10,%esp
c0025fd6:	3b 45 08             	cmp    0x8(%ebp),%eax
c0025fd9:	74 0b                	je     c0025fe6 <list_elem_to_block+0x26>
c0025fdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0025fde:	83 c0 04             	add    $0x4,%eax
c0025fe1:	83 e8 04             	sub    $0x4,%eax
c0025fe4:	eb 05                	jmp    c0025feb <list_elem_to_block+0x2b>
c0025fe6:	b8 00 00 00 00       	mov    $0x0,%eax
c0025feb:	c9                   	leave  
c0025fec:	c3                   	ret    

c0025fed <partition_scan>:
c0025fed:	55                   	push   %ebp
c0025fee:	89 e5                	mov    %esp,%ebp
c0025ff0:	83 ec 18             	sub    $0x18,%esp
c0025ff3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0025ffa:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0025ffd:	50                   	push   %eax
c0025ffe:	6a 00                	push   $0x0
c0026000:	6a 00                	push   $0x0
c0026002:	ff 75 08             	pushl  0x8(%ebp)
c0026005:	e8 2c 00 00 00       	call   c0026036 <read_partition_table>
c002600a:	83 c4 10             	add    $0x10,%esp
c002600d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026010:	85 c0                	test   %eax,%eax
c0026012:	75 1f                	jne    c0026033 <partition_scan+0x46>
c0026014:	83 ec 0c             	sub    $0xc,%esp
c0026017:	ff 75 08             	pushl  0x8(%ebp)
c002601a:	e8 ee fd ff ff       	call   c0025e0d <block_name>
c002601f:	83 c4 10             	add    $0x10,%esp
c0026022:	83 ec 08             	sub    $0x8,%esp
c0026025:	50                   	push   %eax
c0026026:	68 20 56 03 c0       	push   $0xc0035620
c002602b:	e8 00 20 00 00       	call   c0028030 <printf>
c0026030:	83 c4 10             	add    $0x10,%esp
c0026033:	90                   	nop
c0026034:	c9                   	leave  
c0026035:	c3                   	ret    

c0026036 <read_partition_table>:
c0026036:	55                   	push   %ebp
c0026037:	89 e5                	mov    %esp,%ebp
c0026039:	53                   	push   %ebx
c002603a:	83 ec 14             	sub    $0x14,%esp
c002603d:	83 ec 0c             	sub    $0xc,%esp
c0026040:	ff 75 08             	pushl  0x8(%ebp)
c0026043:	e8 ba fd ff ff       	call   c0025e02 <block_size>
c0026048:	83 c4 10             	add    $0x10,%esp
c002604b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002604e:	77 27                	ja     c0026077 <read_partition_table+0x41>
c0026050:	83 ec 0c             	sub    $0xc,%esp
c0026053:	ff 75 08             	pushl  0x8(%ebp)
c0026056:	e8 b2 fd ff ff       	call   c0025e0d <block_name>
c002605b:	83 c4 10             	add    $0x10,%esp
c002605e:	83 ec 04             	sub    $0x4,%esp
c0026061:	ff 75 0c             	pushl  0xc(%ebp)
c0026064:	50                   	push   %eax
c0026065:	68 44 56 03 c0       	push   $0xc0035644
c002606a:	e8 c1 1f 00 00       	call   c0028030 <printf>
c002606f:	83 c4 10             	add    $0x10,%esp
c0026072:	e9 d9 01 00 00       	jmp    c0026250 <read_partition_table+0x21a>
c0026077:	83 ec 0c             	sub    $0xc,%esp
c002607a:	68 00 02 00 00       	push   $0x200
c002607f:	e8 cf e0 ff ff       	call   c0024153 <malloc>
c0026084:	83 c4 10             	add    $0x10,%esp
c0026087:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002608a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002608e:	75 16                	jne    c00260a6 <read_partition_table+0x70>
c0026090:	68 7c 56 03 c0       	push   $0xc003567c
c0026095:	68 04 58 03 c0       	push   $0xc0035804
c002609a:	6a 5a                	push   $0x5a
c002609c:	68 ab 56 03 c0       	push   $0xc00356ab
c00260a1:	e8 eb 44 00 00       	call   c002a591 <debug_panic>
c00260a6:	83 ec 04             	sub    $0x4,%esp
c00260a9:	ff 75 f0             	pushl  -0x10(%ebp)
c00260ac:	6a 00                	push   $0x0
c00260ae:	ff 75 08             	pushl  0x8(%ebp)
c00260b1:	e8 81 fc ff ff       	call   c0025d37 <block_read>
c00260b6:	83 c4 10             	add    $0x10,%esp
c00260b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00260bc:	0f b7 80 fe 01 00 00 	movzwl 0x1fe(%eax),%eax
c00260c3:	66 3d 55 aa          	cmp    $0xaa55,%ax
c00260c7:	74 5c                	je     c0026125 <read_partition_table+0xef>
c00260c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00260cd:	75 21                	jne    c00260f0 <read_partition_table+0xba>
c00260cf:	83 ec 0c             	sub    $0xc,%esp
c00260d2:	ff 75 08             	pushl  0x8(%ebp)
c00260d5:	e8 33 fd ff ff       	call   c0025e0d <block_name>
c00260da:	83 c4 10             	add    $0x10,%esp
c00260dd:	83 ec 08             	sub    $0x8,%esp
c00260e0:	50                   	push   %eax
c00260e1:	68 c8 56 03 c0       	push   $0xc00356c8
c00260e6:	e8 45 1f 00 00       	call   c0028030 <printf>
c00260eb:	83 c4 10             	add    $0x10,%esp
c00260ee:	eb 22                	jmp    c0026112 <read_partition_table+0xdc>
c00260f0:	83 ec 0c             	sub    $0xc,%esp
c00260f3:	ff 75 08             	pushl  0x8(%ebp)
c00260f6:	e8 12 fd ff ff       	call   c0025e0d <block_name>
c00260fb:	83 c4 10             	add    $0x10,%esp
c00260fe:	83 ec 04             	sub    $0x4,%esp
c0026101:	ff 75 0c             	pushl  0xc(%ebp)
c0026104:	50                   	push   %eax
c0026105:	68 f0 56 03 c0       	push   $0xc00356f0
c002610a:	e8 21 1f 00 00       	call   c0028030 <printf>
c002610f:	83 c4 10             	add    $0x10,%esp
c0026112:	83 ec 0c             	sub    $0xc,%esp
c0026115:	ff 75 f0             	pushl  -0x10(%ebp)
c0026118:	e8 33 e3 ff ff       	call   c0024450 <free>
c002611d:	83 c4 10             	add    $0x10,%esp
c0026120:	e9 2b 01 00 00       	jmp    c0026250 <read_partition_table+0x21a>
c0026125:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002612c:	e9 07 01 00 00       	jmp    c0026238 <read_partition_table+0x202>
c0026131:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026134:	83 c0 1b             	add    $0x1b,%eax
c0026137:	c1 e0 04             	shl    $0x4,%eax
c002613a:	89 c2                	mov    %eax,%edx
c002613c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002613f:	01 d0                	add    %edx,%eax
c0026141:	83 c0 0e             	add    $0xe,%eax
c0026144:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0026147:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002614a:	8b 40 0c             	mov    0xc(%eax),%eax
c002614d:	85 c0                	test   %eax,%eax
c002614f:	0f 84 df 00 00 00    	je     c0026234 <read_partition_table+0x1fe>
c0026155:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026158:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c002615c:	84 c0                	test   %al,%al
c002615e:	0f 84 d0 00 00 00    	je     c0026234 <read_partition_table+0x1fe>
c0026164:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026167:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c002616b:	3c 05                	cmp    $0x5,%al
c002616d:	74 21                	je     c0026190 <read_partition_table+0x15a>
c002616f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026172:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0026176:	3c 0f                	cmp    $0xf,%al
c0026178:	74 16                	je     c0026190 <read_partition_table+0x15a>
c002617a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002617d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0026181:	3c 85                	cmp    $0x85,%al
c0026183:	74 0b                	je     c0026190 <read_partition_table+0x15a>
c0026185:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026188:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c002618c:	3c c5                	cmp    $0xc5,%al
c002618e:	75 65                	jne    c00261f5 <read_partition_table+0x1bf>
c0026190:	83 ec 0c             	sub    $0xc,%esp
c0026193:	ff 75 08             	pushl  0x8(%ebp)
c0026196:	e8 72 fc ff ff       	call   c0025e0d <block_name>
c002619b:	83 c4 10             	add    $0x10,%esp
c002619e:	83 ec 04             	sub    $0x4,%esp
c00261a1:	ff 75 0c             	pushl  0xc(%ebp)
c00261a4:	50                   	push   %eax
c00261a5:	68 24 57 03 c0       	push   $0xc0035724
c00261aa:	e8 81 1e 00 00       	call   c0028030 <printf>
c00261af:	83 c4 10             	add    $0x10,%esp
c00261b2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00261b6:	75 1e                	jne    c00261d6 <read_partition_table+0x1a0>
c00261b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00261bb:	8b 50 08             	mov    0x8(%eax),%edx
c00261be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00261c1:	8b 40 08             	mov    0x8(%eax),%eax
c00261c4:	ff 75 14             	pushl  0x14(%ebp)
c00261c7:	52                   	push   %edx
c00261c8:	50                   	push   %eax
c00261c9:	ff 75 08             	pushl  0x8(%ebp)
c00261cc:	e8 65 fe ff ff       	call   c0026036 <read_partition_table>
c00261d1:	83 c4 10             	add    $0x10,%esp
c00261d4:	eb 5e                	jmp    c0026234 <read_partition_table+0x1fe>
c00261d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00261d9:	8b 50 08             	mov    0x8(%eax),%edx
c00261dc:	8b 45 10             	mov    0x10(%ebp),%eax
c00261df:	01 d0                	add    %edx,%eax
c00261e1:	ff 75 14             	pushl  0x14(%ebp)
c00261e4:	ff 75 10             	pushl  0x10(%ebp)
c00261e7:	50                   	push   %eax
c00261e8:	ff 75 08             	pushl  0x8(%ebp)
c00261eb:	e8 46 fe ff ff       	call   c0026036 <read_partition_table>
c00261f0:	83 c4 10             	add    $0x10,%esp
c00261f3:	eb 3f                	jmp    c0026234 <read_partition_table+0x1fe>
c00261f5:	8b 45 14             	mov    0x14(%ebp),%eax
c00261f8:	8b 00                	mov    (%eax),%eax
c00261fa:	8d 50 01             	lea    0x1(%eax),%edx
c00261fd:	8b 45 14             	mov    0x14(%ebp),%eax
c0026200:	89 10                	mov    %edx,(%eax)
c0026202:	8b 45 14             	mov    0x14(%ebp),%eax
c0026205:	8b 08                	mov    (%eax),%ecx
c0026207:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002620a:	8b 50 0c             	mov    0xc(%eax),%edx
c002620d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026210:	8b 58 08             	mov    0x8(%eax),%ebx
c0026213:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026216:	01 c3                	add    %eax,%ebx
c0026218:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002621b:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c002621f:	0f b6 c0             	movzbl %al,%eax
c0026222:	83 ec 0c             	sub    $0xc,%esp
c0026225:	51                   	push   %ecx
c0026226:	52                   	push   %edx
c0026227:	53                   	push   %ebx
c0026228:	50                   	push   %eax
c0026229:	ff 75 08             	pushl  0x8(%ebp)
c002622c:	e8 24 00 00 00       	call   c0026255 <found_partition>
c0026231:	83 c4 20             	add    $0x20,%esp
c0026234:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0026238:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c002623c:	0f 86 ef fe ff ff    	jbe    c0026131 <read_partition_table+0xfb>
c0026242:	83 ec 0c             	sub    $0xc,%esp
c0026245:	ff 75 f0             	pushl  -0x10(%ebp)
c0026248:	e8 03 e2 ff ff       	call   c0024450 <free>
c002624d:	83 c4 10             	add    $0x10,%esp
c0026250:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0026253:	c9                   	leave  
c0026254:	c3                   	ret    

c0026255 <found_partition>:
c0026255:	55                   	push   %ebp
c0026256:	89 e5                	mov    %esp,%ebp
c0026258:	56                   	push   %esi
c0026259:	53                   	push   %ebx
c002625a:	81 ec b0 00 00 00    	sub    $0xb0,%esp
c0026260:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026263:	88 85 54 ff ff ff    	mov    %al,-0xac(%ebp)
c0026269:	83 ec 0c             	sub    $0xc,%esp
c002626c:	ff 75 08             	pushl  0x8(%ebp)
c002626f:	e8 8e fb ff ff       	call   c0025e02 <block_size>
c0026274:	83 c4 10             	add    $0x10,%esp
c0026277:	3b 45 10             	cmp    0x10(%ebp),%eax
c002627a:	77 27                	ja     c00262a3 <found_partition+0x4e>
c002627c:	83 ec 0c             	sub    $0xc,%esp
c002627f:	ff 75 08             	pushl  0x8(%ebp)
c0026282:	e8 86 fb ff ff       	call   c0025e0d <block_name>
c0026287:	83 c4 10             	add    $0x10,%esp
c002628a:	ff 75 10             	pushl  0x10(%ebp)
c002628d:	ff 75 18             	pushl  0x18(%ebp)
c0026290:	50                   	push   %eax
c0026291:	68 4c 57 03 c0       	push   $0xc003574c
c0026296:	e8 95 1d 00 00       	call   c0028030 <printf>
c002629b:	83 c4 10             	add    $0x10,%esp
c002629e:	e9 76 01 00 00       	jmp    c0026419 <found_partition+0x1c4>
c00262a3:	8b 55 10             	mov    0x10(%ebp),%edx
c00262a6:	8b 45 14             	mov    0x14(%ebp),%eax
c00262a9:	01 d0                	add    %edx,%eax
c00262ab:	3b 45 10             	cmp    0x10(%ebp),%eax
c00262ae:	72 1b                	jb     c00262cb <found_partition+0x76>
c00262b0:	8b 55 10             	mov    0x10(%ebp),%edx
c00262b3:	8b 45 14             	mov    0x14(%ebp),%eax
c00262b6:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c00262b9:	83 ec 0c             	sub    $0xc,%esp
c00262bc:	ff 75 08             	pushl  0x8(%ebp)
c00262bf:	e8 3e fb ff ff       	call   c0025e02 <block_size>
c00262c4:	83 c4 10             	add    $0x10,%esp
c00262c7:	39 c3                	cmp    %eax,%ebx
c00262c9:	76 42                	jbe    c002630d <found_partition+0xb8>
c00262cb:	83 ec 0c             	sub    $0xc,%esp
c00262ce:	ff 75 08             	pushl  0x8(%ebp)
c00262d1:	e8 2c fb ff ff       	call   c0025e02 <block_size>
c00262d6:	83 c4 10             	add    $0x10,%esp
c00262d9:	89 c6                	mov    %eax,%esi
c00262db:	8b 55 10             	mov    0x10(%ebp),%edx
c00262de:	8b 45 14             	mov    0x14(%ebp),%eax
c00262e1:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c00262e4:	83 ec 0c             	sub    $0xc,%esp
c00262e7:	ff 75 08             	pushl  0x8(%ebp)
c00262ea:	e8 1e fb ff ff       	call   c0025e0d <block_name>
c00262ef:	83 c4 10             	add    $0x10,%esp
c00262f2:	83 ec 0c             	sub    $0xc,%esp
c00262f5:	56                   	push   %esi
c00262f6:	53                   	push   %ebx
c00262f7:	ff 75 18             	pushl  0x18(%ebp)
c00262fa:	50                   	push   %eax
c00262fb:	68 84 57 03 c0       	push   $0xc0035784
c0026300:	e8 2b 1d 00 00       	call   c0028030 <printf>
c0026305:	83 c4 20             	add    $0x20,%esp
c0026308:	e9 0c 01 00 00       	jmp    c0026419 <found_partition+0x1c4>
c002630d:	80 bd 54 ff ff ff 20 	cmpb   $0x20,-0xac(%ebp)
c0026314:	74 37                	je     c002634d <found_partition+0xf8>
c0026316:	80 bd 54 ff ff ff 21 	cmpb   $0x21,-0xac(%ebp)
c002631d:	74 27                	je     c0026346 <found_partition+0xf1>
c002631f:	80 bd 54 ff ff ff 22 	cmpb   $0x22,-0xac(%ebp)
c0026326:	74 17                	je     c002633f <found_partition+0xea>
c0026328:	80 bd 54 ff ff ff 23 	cmpb   $0x23,-0xac(%ebp)
c002632f:	75 07                	jne    c0026338 <found_partition+0xe3>
c0026331:	b8 03 00 00 00       	mov    $0x3,%eax
c0026336:	eb 1a                	jmp    c0026352 <found_partition+0xfd>
c0026338:	b8 05 00 00 00       	mov    $0x5,%eax
c002633d:	eb 13                	jmp    c0026352 <found_partition+0xfd>
c002633f:	b8 02 00 00 00       	mov    $0x2,%eax
c0026344:	eb 0c                	jmp    c0026352 <found_partition+0xfd>
c0026346:	b8 01 00 00 00       	mov    $0x1,%eax
c002634b:	eb 05                	jmp    c0026352 <found_partition+0xfd>
c002634d:	b8 00 00 00 00       	mov    $0x0,%eax
c0026352:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026355:	83 ec 0c             	sub    $0xc,%esp
c0026358:	6a 08                	push   $0x8
c002635a:	e8 f4 dd ff ff       	call   c0024153 <malloc>
c002635f:	83 c4 10             	add    $0x10,%esp
c0026362:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026365:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0026369:	75 19                	jne    c0026384 <found_partition+0x12f>
c002636b:	68 b8 57 03 c0       	push   $0xc00357b8
c0026370:	68 1c 58 03 c0       	push   $0xc003581c
c0026375:	68 b1 00 00 00       	push   $0xb1
c002637a:	68 ab 56 03 c0       	push   $0xc00356ab
c002637f:	e8 0d 42 00 00       	call   c002a591 <debug_panic>
c0026384:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026387:	8b 55 08             	mov    0x8(%ebp),%edx
c002638a:	89 10                	mov    %edx,(%eax)
c002638c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002638f:	8b 55 10             	mov    0x10(%ebp),%edx
c0026392:	89 50 04             	mov    %edx,0x4(%eax)
c0026395:	83 ec 0c             	sub    $0xc,%esp
c0026398:	ff 75 08             	pushl  0x8(%ebp)
c002639b:	e8 6d fa ff ff       	call   c0025e0d <block_name>
c00263a0:	83 c4 10             	add    $0x10,%esp
c00263a3:	83 ec 0c             	sub    $0xc,%esp
c00263a6:	ff 75 18             	pushl  0x18(%ebp)
c00263a9:	50                   	push   %eax
c00263aa:	68 eb 57 03 c0       	push   $0xc00357eb
c00263af:	6a 10                	push   $0x10
c00263b1:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00263b4:	50                   	push   %eax
c00263b5:	e8 4d 1c 00 00       	call   c0028007 <snprintf>
c00263ba:	83 c4 20             	add    $0x20,%esp
c00263bd:	0f b6 9d 54 ff ff ff 	movzbl -0xac(%ebp),%ebx
c00263c4:	0f b6 85 54 ff ff ff 	movzbl -0xac(%ebp),%eax
c00263cb:	83 ec 0c             	sub    $0xc,%esp
c00263ce:	50                   	push   %eax
c00263cf:	e8 4d 00 00 00       	call   c0026421 <partition_type_name>
c00263d4:	83 c4 10             	add    $0x10,%esp
c00263d7:	83 ec 0c             	sub    $0xc,%esp
c00263da:	53                   	push   %ebx
c00263db:	50                   	push   %eax
c00263dc:	68 f0 57 03 c0       	push   $0xc00357f0
c00263e1:	68 80 00 00 00       	push   $0x80
c00263e6:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
c00263ec:	50                   	push   %eax
c00263ed:	e8 15 1c 00 00       	call   c0028007 <snprintf>
c00263f2:	83 c4 20             	add    $0x20,%esp
c00263f5:	83 ec 08             	sub    $0x8,%esp
c00263f8:	ff 75 f0             	pushl  -0x10(%ebp)
c00263fb:	68 40 e1 03 c0       	push   $0xc003e140
c0026400:	ff 75 14             	pushl  0x14(%ebp)
c0026403:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
c0026409:	50                   	push   %eax
c002640a:	ff 75 f4             	pushl  -0xc(%ebp)
c002640d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0026410:	50                   	push   %eax
c0026411:	e8 8f fa ff ff       	call   c0025ea5 <block_register>
c0026416:	83 c4 20             	add    $0x20,%esp
c0026419:	90                   	nop
c002641a:	8d 65 f8             	lea    -0x8(%ebp),%esp
c002641d:	5b                   	pop    %ebx
c002641e:	5e                   	pop    %esi
c002641f:	5d                   	pop    %ebp
c0026420:	c3                   	ret    

c0026421 <partition_type_name>:
c0026421:	55                   	push   %ebp
c0026422:	89 e5                	mov    %esp,%ebp
c0026424:	83 ec 04             	sub    $0x4,%esp
c0026427:	8b 45 08             	mov    0x8(%ebp),%eax
c002642a:	88 45 fc             	mov    %al,-0x4(%ebp)
c002642d:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0026431:	8b 04 85 60 e1 03 c0 	mov    -0x3ffc1ea0(,%eax,4),%eax
c0026438:	85 c0                	test   %eax,%eax
c002643a:	74 0d                	je     c0026449 <partition_type_name+0x28>
c002643c:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0026440:	8b 04 85 60 e1 03 c0 	mov    -0x3ffc1ea0(,%eax,4),%eax
c0026447:	eb 05                	jmp    c002644e <partition_type_name+0x2d>
c0026449:	b8 fa 57 03 c0       	mov    $0xc00357fa,%eax
c002644e:	c9                   	leave  
c002644f:	c3                   	ret    

c0026450 <partition_read>:
c0026450:	55                   	push   %ebp
c0026451:	89 e5                	mov    %esp,%ebp
c0026453:	83 ec 18             	sub    $0x18,%esp
c0026456:	8b 45 08             	mov    0x8(%ebp),%eax
c0026459:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002645c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002645f:	8b 50 04             	mov    0x4(%eax),%edx
c0026462:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026465:	01 c2                	add    %eax,%edx
c0026467:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002646a:	8b 00                	mov    (%eax),%eax
c002646c:	83 ec 04             	sub    $0x4,%esp
c002646f:	ff 75 10             	pushl  0x10(%ebp)
c0026472:	52                   	push   %edx
c0026473:	50                   	push   %eax
c0026474:	e8 be f8 ff ff       	call   c0025d37 <block_read>
c0026479:	83 c4 10             	add    $0x10,%esp
c002647c:	90                   	nop
c002647d:	c9                   	leave  
c002647e:	c3                   	ret    

c002647f <partition_write>:
c002647f:	55                   	push   %ebp
c0026480:	89 e5                	mov    %esp,%ebp
c0026482:	83 ec 18             	sub    $0x18,%esp
c0026485:	8b 45 08             	mov    0x8(%ebp),%eax
c0026488:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002648b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002648e:	8b 50 04             	mov    0x4(%eax),%edx
c0026491:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026494:	01 c2                	add    %eax,%edx
c0026496:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026499:	8b 00                	mov    (%eax),%eax
c002649b:	83 ec 04             	sub    $0x4,%esp
c002649e:	ff 75 10             	pushl  0x10(%ebp)
c00264a1:	52                   	push   %edx
c00264a2:	50                   	push   %eax
c00264a3:	e8 de f8 ff ff       	call   c0025d86 <block_write>
c00264a8:	83 c4 10             	add    $0x10,%esp
c00264ab:	90                   	nop
c00264ac:	c9                   	leave  
c00264ad:	c3                   	ret    

c00264ae <isspace>:
c00264ae:	55                   	push   %ebp
c00264af:	89 e5                	mov    %esp,%ebp
c00264b1:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c00264b5:	74 1e                	je     c00264d5 <isspace+0x27>
c00264b7:	83 7d 08 0c          	cmpl   $0xc,0x8(%ebp)
c00264bb:	74 18                	je     c00264d5 <isspace+0x27>
c00264bd:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c00264c1:	74 12                	je     c00264d5 <isspace+0x27>
c00264c3:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
c00264c7:	74 0c                	je     c00264d5 <isspace+0x27>
c00264c9:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c00264cd:	74 06                	je     c00264d5 <isspace+0x27>
c00264cf:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
c00264d3:	75 07                	jne    c00264dc <isspace+0x2e>
c00264d5:	b8 01 00 00 00       	mov    $0x1,%eax
c00264da:	eb 05                	jmp    c00264e1 <isspace+0x33>
c00264dc:	b8 00 00 00 00       	mov    $0x0,%eax
c00264e1:	5d                   	pop    %ebp
c00264e2:	c3                   	ret    

c00264e3 <inb>:
c00264e3:	55                   	push   %ebp
c00264e4:	89 e5                	mov    %esp,%ebp
c00264e6:	83 ec 14             	sub    $0x14,%esp
c00264e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00264ec:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c00264f0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00264f4:	89 c2                	mov    %eax,%edx
c00264f6:	ec                   	in     (%dx),%al
c00264f7:	88 45 ff             	mov    %al,-0x1(%ebp)
c00264fa:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00264fe:	c9                   	leave  
c00264ff:	c3                   	ret    

c0026500 <insw>:
c0026500:	55                   	push   %ebp
c0026501:	89 e5                	mov    %esp,%ebp
c0026503:	57                   	push   %edi
c0026504:	53                   	push   %ebx
c0026505:	83 ec 04             	sub    $0x4,%esp
c0026508:	8b 45 08             	mov    0x8(%ebp),%eax
c002650b:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
c002650f:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0026513:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0026516:	8b 45 10             	mov    0x10(%ebp),%eax
c0026519:	89 cb                	mov    %ecx,%ebx
c002651b:	89 df                	mov    %ebx,%edi
c002651d:	89 c1                	mov    %eax,%ecx
c002651f:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c0026522:	89 c8                	mov    %ecx,%eax
c0026524:	89 fb                	mov    %edi,%ebx
c0026526:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0026529:	89 45 10             	mov    %eax,0x10(%ebp)
c002652c:	90                   	nop
c002652d:	83 c4 04             	add    $0x4,%esp
c0026530:	5b                   	pop    %ebx
c0026531:	5f                   	pop    %edi
c0026532:	5d                   	pop    %ebp
c0026533:	c3                   	ret    

c0026534 <outb>:
c0026534:	55                   	push   %ebp
c0026535:	89 e5                	mov    %esp,%ebp
c0026537:	83 ec 08             	sub    $0x8,%esp
c002653a:	8b 55 08             	mov    0x8(%ebp),%edx
c002653d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026540:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0026544:	88 45 f8             	mov    %al,-0x8(%ebp)
c0026547:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c002654b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c002654f:	ee                   	out    %al,(%dx)
c0026550:	90                   	nop
c0026551:	c9                   	leave  
c0026552:	c3                   	ret    

c0026553 <outsw>:
c0026553:	55                   	push   %ebp
c0026554:	89 e5                	mov    %esp,%ebp
c0026556:	56                   	push   %esi
c0026557:	53                   	push   %ebx
c0026558:	83 ec 04             	sub    $0x4,%esp
c002655b:	8b 45 08             	mov    0x8(%ebp),%eax
c002655e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
c0026562:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0026566:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0026569:	8b 45 10             	mov    0x10(%ebp),%eax
c002656c:	89 cb                	mov    %ecx,%ebx
c002656e:	89 de                	mov    %ebx,%esi
c0026570:	89 c1                	mov    %eax,%ecx
c0026572:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c0026575:	89 c8                	mov    %ecx,%eax
c0026577:	89 f3                	mov    %esi,%ebx
c0026579:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c002657c:	89 45 10             	mov    %eax,0x10(%ebp)
c002657f:	90                   	nop
c0026580:	83 c4 04             	add    $0x4,%esp
c0026583:	5b                   	pop    %ebx
c0026584:	5e                   	pop    %esi
c0026585:	5d                   	pop    %ebp
c0026586:	c3                   	ret    

c0026587 <ide_init>:
c0026587:	55                   	push   %ebp
c0026588:	89 e5                	mov    %esp,%ebp
c002658a:	83 ec 18             	sub    $0x18,%esp
c002658d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0026594:	e9 bd 01 00 00       	jmp    c0026756 <ide_init+0x1cf>
c0026599:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002659c:	89 c2                	mov    %eax,%edx
c002659e:	89 d0                	mov    %edx,%eax
c00265a0:	c1 e0 04             	shl    $0x4,%eax
c00265a3:	89 c2                	mov    %eax,%edx
c00265a5:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c00265ac:	29 d0                	sub    %edx,%eax
c00265ae:	05 80 ff 03 c0       	add    $0xc003ff80,%eax
c00265b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00265b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265b9:	ff 75 f4             	pushl  -0xc(%ebp)
c00265bc:	68 f0 5c 03 c0       	push   $0xc0035cf0
c00265c1:	6a 08                	push   $0x8
c00265c3:	50                   	push   %eax
c00265c4:	e8 3e 1a 00 00       	call   c0028007 <snprintf>
c00265c9:	83 c4 10             	add    $0x10,%esp
c00265cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00265cf:	85 c0                	test   %eax,%eax
c00265d1:	74 07                	je     c00265da <ide_init+0x53>
c00265d3:	83 f8 01             	cmp    $0x1,%eax
c00265d6:	74 14                	je     c00265ec <ide_init+0x65>
c00265d8:	eb 24                	jmp    c00265fe <ide_init+0x77>
c00265da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265dd:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
c00265e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265e6:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
c00265ea:	eb 28                	jmp    c0026614 <ide_init+0x8d>
c00265ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265ef:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
c00265f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265f8:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
c00265fc:	eb 16                	jmp    c0026614 <ide_init+0x8d>
c00265fe:	68 f8 5c 03 c0       	push   $0xc0035cf8
c0026603:	68 4c 5e 03 c0       	push   $0xc0035e4c
c0026608:	6a 7c                	push   $0x7c
c002660a:	68 1a 5d 03 c0       	push   $0xc0035d1a
c002660f:	e8 7d 3f 00 00       	call   c002a591 <debug_panic>
c0026614:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026617:	83 c0 0c             	add    $0xc,%eax
c002661a:	83 ec 0c             	sub    $0xc,%esp
c002661d:	50                   	push   %eax
c002661e:	e8 be ce ff ff       	call   c00234e1 <lock_init>
c0026623:	83 c4 10             	add    $0x10,%esp
c0026626:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026629:	c6 40 30 00          	movb   $0x0,0x30(%eax)
c002662d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026630:	83 c0 34             	add    $0x34,%eax
c0026633:	83 ec 08             	sub    $0x8,%esp
c0026636:	6a 00                	push   $0x0
c0026638:	50                   	push   %eax
c0026639:	e8 ba cb ff ff       	call   c00231f8 <sema_init>
c002663e:	83 c4 10             	add    $0x10,%esp
c0026641:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0026648:	eb 5a                	jmp    c00266a4 <ide_init+0x11d>
c002664a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002664d:	89 d0                	mov    %edx,%eax
c002664f:	c1 e0 02             	shl    $0x2,%eax
c0026652:	01 d0                	add    %edx,%eax
c0026654:	c1 e0 02             	shl    $0x2,%eax
c0026657:	8d 50 40             	lea    0x40(%eax),%edx
c002665a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002665d:	01 d0                	add    %edx,%eax
c002665f:	83 c0 08             	add    $0x8,%eax
c0026662:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0026665:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026668:	8d 14 00             	lea    (%eax,%eax,1),%edx
c002666b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002666e:	01 d0                	add    %edx,%eax
c0026670:	8d 50 61             	lea    0x61(%eax),%edx
c0026673:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0026676:	52                   	push   %edx
c0026677:	68 2e 5d 03 c0       	push   $0xc0035d2e
c002667c:	6a 08                	push   $0x8
c002667e:	50                   	push   %eax
c002667f:	e8 83 19 00 00       	call   c0028007 <snprintf>
c0026684:	83 c4 10             	add    $0x10,%esp
c0026687:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002668a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002668d:	89 50 08             	mov    %edx,0x8(%eax)
c0026690:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0026693:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0026696:	89 50 0c             	mov    %edx,0xc(%eax)
c0026699:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002669c:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c00266a0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c00266a4:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
c00266a8:	7e a0                	jle    c002664a <ide_init+0xc3>
c00266aa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00266ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00266b0:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c00266b4:	0f b6 c0             	movzbl %al,%eax
c00266b7:	83 ec 04             	sub    $0x4,%esp
c00266ba:	52                   	push   %edx
c00266bb:	68 04 72 02 c0       	push   $0xc0027204
c00266c0:	50                   	push   %eax
c00266c1:	e8 47 b9 ff ff       	call   c002200d <intr_register_ext>
c00266c6:	83 c4 10             	add    $0x10,%esp
c00266c9:	83 ec 0c             	sub    $0xc,%esp
c00266cc:	ff 75 ec             	pushl  -0x14(%ebp)
c00266cf:	e8 8f 00 00 00       	call   c0026763 <reset_channel>
c00266d4:	83 c4 10             	add    $0x10,%esp
c00266d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00266da:	83 c0 48             	add    $0x48,%eax
c00266dd:	83 ec 0c             	sub    $0xc,%esp
c00266e0:	50                   	push   %eax
c00266e1:	e8 09 03 00 00       	call   c00269ef <check_device_type>
c00266e6:	83 c4 10             	add    $0x10,%esp
c00266e9:	84 c0                	test   %al,%al
c00266eb:	74 12                	je     c00266ff <ide_init+0x178>
c00266ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00266f0:	83 c0 5c             	add    $0x5c,%eax
c00266f3:	83 ec 0c             	sub    $0xc,%esp
c00266f6:	50                   	push   %eax
c00266f7:	e8 f3 02 00 00       	call   c00269ef <check_device_type>
c00266fc:	83 c4 10             	add    $0x10,%esp
c00266ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0026706:	eb 44                	jmp    c002674c <ide_init+0x1c5>
c0026708:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c002670b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002670e:	89 d0                	mov    %edx,%eax
c0026710:	c1 e0 02             	shl    $0x2,%eax
c0026713:	01 d0                	add    %edx,%eax
c0026715:	c1 e0 02             	shl    $0x2,%eax
c0026718:	01 c8                	add    %ecx,%eax
c002671a:	83 c0 58             	add    $0x58,%eax
c002671d:	0f b6 00             	movzbl (%eax),%eax
c0026720:	84 c0                	test   %al,%al
c0026722:	74 24                	je     c0026748 <ide_init+0x1c1>
c0026724:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0026727:	89 d0                	mov    %edx,%eax
c0026729:	c1 e0 02             	shl    $0x2,%eax
c002672c:	01 d0                	add    %edx,%eax
c002672e:	c1 e0 02             	shl    $0x2,%eax
c0026731:	8d 50 40             	lea    0x40(%eax),%edx
c0026734:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026737:	01 d0                	add    %edx,%eax
c0026739:	83 c0 08             	add    $0x8,%eax
c002673c:	83 ec 0c             	sub    $0xc,%esp
c002673f:	50                   	push   %eax
c0026740:	e8 a5 03 00 00       	call   c0026aea <identify_ata_device>
c0026745:	83 c4 10             	add    $0x10,%esp
c0026748:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002674c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
c0026750:	7e b6                	jle    c0026708 <ide_init+0x181>
c0026752:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0026756:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c002675a:	0f 86 39 fe ff ff    	jbe    c0026599 <ide_init+0x12>
c0026760:	90                   	nop
c0026761:	c9                   	leave  
c0026762:	c3                   	ret    

c0026763 <reset_channel>:
c0026763:	55                   	push   %ebp
c0026764:	89 e5                	mov    %esp,%ebp
c0026766:	83 ec 18             	sub    $0x18,%esp
c0026769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0026770:	e9 2b 01 00 00       	jmp    c00268a0 <reset_channel+0x13d>
c0026775:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0026778:	89 d0                	mov    %edx,%eax
c002677a:	c1 e0 02             	shl    $0x2,%eax
c002677d:	01 d0                	add    %edx,%eax
c002677f:	c1 e0 02             	shl    $0x2,%eax
c0026782:	8d 50 40             	lea    0x40(%eax),%edx
c0026785:	8b 45 08             	mov    0x8(%ebp),%eax
c0026788:	01 d0                	add    %edx,%eax
c002678a:	83 c0 08             	add    $0x8,%eax
c002678d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0026790:	83 ec 0c             	sub    $0xc,%esp
c0026793:	ff 75 ec             	pushl  -0x14(%ebp)
c0026796:	e8 cd 09 00 00       	call   c0027168 <select_device>
c002679b:	83 c4 10             	add    $0x10,%esp
c002679e:	8b 45 08             	mov    0x8(%ebp),%eax
c00267a1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00267a5:	83 c0 02             	add    $0x2,%eax
c00267a8:	0f b7 c0             	movzwl %ax,%eax
c00267ab:	83 ec 08             	sub    $0x8,%esp
c00267ae:	6a 55                	push   $0x55
c00267b0:	50                   	push   %eax
c00267b1:	e8 7e fd ff ff       	call   c0026534 <outb>
c00267b6:	83 c4 10             	add    $0x10,%esp
c00267b9:	8b 45 08             	mov    0x8(%ebp),%eax
c00267bc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00267c0:	83 c0 03             	add    $0x3,%eax
c00267c3:	0f b7 c0             	movzwl %ax,%eax
c00267c6:	83 ec 08             	sub    $0x8,%esp
c00267c9:	68 aa 00 00 00       	push   $0xaa
c00267ce:	50                   	push   %eax
c00267cf:	e8 60 fd ff ff       	call   c0026534 <outb>
c00267d4:	83 c4 10             	add    $0x10,%esp
c00267d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00267da:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00267de:	83 c0 02             	add    $0x2,%eax
c00267e1:	0f b7 c0             	movzwl %ax,%eax
c00267e4:	83 ec 08             	sub    $0x8,%esp
c00267e7:	68 aa 00 00 00       	push   $0xaa
c00267ec:	50                   	push   %eax
c00267ed:	e8 42 fd ff ff       	call   c0026534 <outb>
c00267f2:	83 c4 10             	add    $0x10,%esp
c00267f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00267f8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00267fc:	83 c0 03             	add    $0x3,%eax
c00267ff:	0f b7 c0             	movzwl %ax,%eax
c0026802:	83 ec 08             	sub    $0x8,%esp
c0026805:	6a 55                	push   $0x55
c0026807:	50                   	push   %eax
c0026808:	e8 27 fd ff ff       	call   c0026534 <outb>
c002680d:	83 c4 10             	add    $0x10,%esp
c0026810:	8b 45 08             	mov    0x8(%ebp),%eax
c0026813:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026817:	83 c0 02             	add    $0x2,%eax
c002681a:	0f b7 c0             	movzwl %ax,%eax
c002681d:	83 ec 08             	sub    $0x8,%esp
c0026820:	6a 55                	push   $0x55
c0026822:	50                   	push   %eax
c0026823:	e8 0c fd ff ff       	call   c0026534 <outb>
c0026828:	83 c4 10             	add    $0x10,%esp
c002682b:	8b 45 08             	mov    0x8(%ebp),%eax
c002682e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026832:	83 c0 03             	add    $0x3,%eax
c0026835:	0f b7 c0             	movzwl %ax,%eax
c0026838:	83 ec 08             	sub    $0x8,%esp
c002683b:	68 aa 00 00 00       	push   $0xaa
c0026840:	50                   	push   %eax
c0026841:	e8 ee fc ff ff       	call   c0026534 <outb>
c0026846:	83 c4 10             	add    $0x10,%esp
c0026849:	8b 45 08             	mov    0x8(%ebp),%eax
c002684c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026850:	83 c0 02             	add    $0x2,%eax
c0026853:	0f b7 c0             	movzwl %ax,%eax
c0026856:	83 ec 0c             	sub    $0xc,%esp
c0026859:	50                   	push   %eax
c002685a:	e8 84 fc ff ff       	call   c00264e3 <inb>
c002685f:	83 c4 10             	add    $0x10,%esp
c0026862:	3c 55                	cmp    $0x55,%al
c0026864:	75 24                	jne    c002688a <reset_channel+0x127>
c0026866:	8b 45 08             	mov    0x8(%ebp),%eax
c0026869:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c002686d:	83 c0 03             	add    $0x3,%eax
c0026870:	0f b7 c0             	movzwl %ax,%eax
c0026873:	83 ec 0c             	sub    $0xc,%esp
c0026876:	50                   	push   %eax
c0026877:	e8 67 fc ff ff       	call   c00264e3 <inb>
c002687c:	83 c4 10             	add    $0x10,%esp
c002687f:	3c aa                	cmp    $0xaa,%al
c0026881:	75 07                	jne    c002688a <reset_channel+0x127>
c0026883:	b8 01 00 00 00       	mov    $0x1,%eax
c0026888:	eb 05                	jmp    c002688f <reset_channel+0x12c>
c002688a:	b8 00 00 00 00       	mov    $0x0,%eax
c002688f:	83 e0 01             	and    $0x1,%eax
c0026892:	8d 4d ea             	lea    -0x16(%ebp),%ecx
c0026895:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0026898:	01 ca                	add    %ecx,%edx
c002689a:	88 02                	mov    %al,(%edx)
c002689c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00268a0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c00268a4:	0f 8e cb fe ff ff    	jle    c0026775 <reset_channel+0x12>
c00268aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00268ad:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00268b1:	66 05 06 02          	add    $0x206,%ax
c00268b5:	0f b7 c0             	movzwl %ax,%eax
c00268b8:	83 ec 08             	sub    $0x8,%esp
c00268bb:	6a 00                	push   $0x0
c00268bd:	50                   	push   %eax
c00268be:	e8 71 fc ff ff       	call   c0026534 <outb>
c00268c3:	83 c4 10             	add    $0x10,%esp
c00268c6:	83 ec 08             	sub    $0x8,%esp
c00268c9:	6a 00                	push   $0x0
c00268cb:	6a 0a                	push   $0xa
c00268cd:	e8 18 e2 ff ff       	call   c0024aea <timer_usleep>
c00268d2:	83 c4 10             	add    $0x10,%esp
c00268d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00268d8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00268dc:	66 05 06 02          	add    $0x206,%ax
c00268e0:	0f b7 c0             	movzwl %ax,%eax
c00268e3:	83 ec 08             	sub    $0x8,%esp
c00268e6:	6a 04                	push   $0x4
c00268e8:	50                   	push   %eax
c00268e9:	e8 46 fc ff ff       	call   c0026534 <outb>
c00268ee:	83 c4 10             	add    $0x10,%esp
c00268f1:	83 ec 08             	sub    $0x8,%esp
c00268f4:	6a 00                	push   $0x0
c00268f6:	6a 0a                	push   $0xa
c00268f8:	e8 ed e1 ff ff       	call   c0024aea <timer_usleep>
c00268fd:	83 c4 10             	add    $0x10,%esp
c0026900:	8b 45 08             	mov    0x8(%ebp),%eax
c0026903:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026907:	66 05 06 02          	add    $0x206,%ax
c002690b:	0f b7 c0             	movzwl %ax,%eax
c002690e:	83 ec 08             	sub    $0x8,%esp
c0026911:	6a 00                	push   $0x0
c0026913:	50                   	push   %eax
c0026914:	e8 1b fc ff ff       	call   c0026534 <outb>
c0026919:	83 c4 10             	add    $0x10,%esp
c002691c:	83 ec 08             	sub    $0x8,%esp
c002691f:	6a 00                	push   $0x0
c0026921:	68 96 00 00 00       	push   $0x96
c0026926:	e8 94 e1 ff ff       	call   c0024abf <timer_msleep>
c002692b:	83 c4 10             	add    $0x10,%esp
c002692e:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0026932:	84 c0                	test   %al,%al
c0026934:	74 24                	je     c002695a <reset_channel+0x1f7>
c0026936:	8b 45 08             	mov    0x8(%ebp),%eax
c0026939:	83 c0 48             	add    $0x48,%eax
c002693c:	83 ec 0c             	sub    $0xc,%esp
c002693f:	50                   	push   %eax
c0026940:	e8 23 08 00 00       	call   c0027168 <select_device>
c0026945:	83 c4 10             	add    $0x10,%esp
c0026948:	8b 45 08             	mov    0x8(%ebp),%eax
c002694b:	83 c0 48             	add    $0x48,%eax
c002694e:	83 ec 0c             	sub    $0xc,%esp
c0026951:	50                   	push   %eax
c0026952:	e8 44 07 00 00       	call   c002709b <wait_while_busy>
c0026957:	83 c4 10             	add    $0x10,%esp
c002695a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c002695e:	84 c0                	test   %al,%al
c0026960:	0f 84 86 00 00 00    	je     c00269ec <reset_channel+0x289>
c0026966:	8b 45 08             	mov    0x8(%ebp),%eax
c0026969:	83 c0 5c             	add    $0x5c,%eax
c002696c:	83 ec 0c             	sub    $0xc,%esp
c002696f:	50                   	push   %eax
c0026970:	e8 f3 07 00 00       	call   c0027168 <select_device>
c0026975:	83 c4 10             	add    $0x10,%esp
c0026978:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002697f:	eb 4d                	jmp    c00269ce <reset_channel+0x26b>
c0026981:	8b 45 08             	mov    0x8(%ebp),%eax
c0026984:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026988:	83 c0 02             	add    $0x2,%eax
c002698b:	0f b7 c0             	movzwl %ax,%eax
c002698e:	83 ec 0c             	sub    $0xc,%esp
c0026991:	50                   	push   %eax
c0026992:	e8 4c fb ff ff       	call   c00264e3 <inb>
c0026997:	83 c4 10             	add    $0x10,%esp
c002699a:	3c 01                	cmp    $0x1,%al
c002699c:	75 1d                	jne    c00269bb <reset_channel+0x258>
c002699e:	8b 45 08             	mov    0x8(%ebp),%eax
c00269a1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00269a5:	83 c0 03             	add    $0x3,%eax
c00269a8:	0f b7 c0             	movzwl %ax,%eax
c00269ab:	83 ec 0c             	sub    $0xc,%esp
c00269ae:	50                   	push   %eax
c00269af:	e8 2f fb ff ff       	call   c00264e3 <inb>
c00269b4:	83 c4 10             	add    $0x10,%esp
c00269b7:	3c 01                	cmp    $0x1,%al
c00269b9:	74 1e                	je     c00269d9 <reset_channel+0x276>
c00269bb:	83 ec 08             	sub    $0x8,%esp
c00269be:	6a 00                	push   $0x0
c00269c0:	6a 0a                	push   $0xa
c00269c2:	e8 f8 e0 ff ff       	call   c0024abf <timer_msleep>
c00269c7:	83 c4 10             	add    $0x10,%esp
c00269ca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c00269ce:	81 7d f0 b7 0b 00 00 	cmpl   $0xbb7,-0x10(%ebp)
c00269d5:	7e aa                	jle    c0026981 <reset_channel+0x21e>
c00269d7:	eb 01                	jmp    c00269da <reset_channel+0x277>
c00269d9:	90                   	nop
c00269da:	8b 45 08             	mov    0x8(%ebp),%eax
c00269dd:	83 c0 5c             	add    $0x5c,%eax
c00269e0:	83 ec 0c             	sub    $0xc,%esp
c00269e3:	50                   	push   %eax
c00269e4:	e8 b2 06 00 00       	call   c002709b <wait_while_busy>
c00269e9:	83 c4 10             	add    $0x10,%esp
c00269ec:	90                   	nop
c00269ed:	c9                   	leave  
c00269ee:	c3                   	ret    

c00269ef <check_device_type>:
c00269ef:	55                   	push   %ebp
c00269f0:	89 e5                	mov    %esp,%ebp
c00269f2:	83 ec 18             	sub    $0x18,%esp
c00269f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00269f8:	8b 40 08             	mov    0x8(%eax),%eax
c00269fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00269fe:	83 ec 0c             	sub    $0xc,%esp
c0026a01:	ff 75 08             	pushl  0x8(%ebp)
c0026a04:	e8 5f 07 00 00       	call   c0027168 <select_device>
c0026a09:	83 c4 10             	add    $0x10,%esp
c0026a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026a0f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026a13:	83 c0 01             	add    $0x1,%eax
c0026a16:	0f b7 c0             	movzwl %ax,%eax
c0026a19:	83 ec 0c             	sub    $0xc,%esp
c0026a1c:	50                   	push   %eax
c0026a1d:	e8 c1 fa ff ff       	call   c00264e3 <inb>
c0026a22:	83 c4 10             	add    $0x10,%esp
c0026a25:	88 45 f3             	mov    %al,-0xd(%ebp)
c0026a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026a2b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026a2f:	83 c0 04             	add    $0x4,%eax
c0026a32:	0f b7 c0             	movzwl %ax,%eax
c0026a35:	83 ec 0c             	sub    $0xc,%esp
c0026a38:	50                   	push   %eax
c0026a39:	e8 a5 fa ff ff       	call   c00264e3 <inb>
c0026a3e:	83 c4 10             	add    $0x10,%esp
c0026a41:	88 45 f2             	mov    %al,-0xe(%ebp)
c0026a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026a47:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026a4b:	83 c0 05             	add    $0x5,%eax
c0026a4e:	0f b7 c0             	movzwl %ax,%eax
c0026a51:	83 ec 0c             	sub    $0xc,%esp
c0026a54:	50                   	push   %eax
c0026a55:	e8 89 fa ff ff       	call   c00264e3 <inb>
c0026a5a:	83 c4 10             	add    $0x10,%esp
c0026a5d:	88 45 f1             	mov    %al,-0xf(%ebp)
c0026a60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026a63:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026a67:	83 c0 07             	add    $0x7,%eax
c0026a6a:	0f b7 c0             	movzwl %ax,%eax
c0026a6d:	83 ec 0c             	sub    $0xc,%esp
c0026a70:	50                   	push   %eax
c0026a71:	e8 6d fa ff ff       	call   c00264e3 <inb>
c0026a76:	83 c4 10             	add    $0x10,%esp
c0026a79:	88 45 f0             	mov    %al,-0x10(%ebp)
c0026a7c:	80 7d f3 01          	cmpb   $0x1,-0xd(%ebp)
c0026a80:	74 11                	je     c0026a93 <check_device_type+0xa4>
c0026a82:	80 7d f3 81          	cmpb   $0x81,-0xd(%ebp)
c0026a86:	75 1e                	jne    c0026aa6 <check_device_type+0xb7>
c0026a88:	8b 45 08             	mov    0x8(%ebp),%eax
c0026a8b:	8b 40 0c             	mov    0xc(%eax),%eax
c0026a8e:	83 f8 01             	cmp    $0x1,%eax
c0026a91:	74 13                	je     c0026aa6 <check_device_type+0xb7>
c0026a93:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0026a97:	83 e0 40             	and    $0x40,%eax
c0026a9a:	85 c0                	test   %eax,%eax
c0026a9c:	74 08                	je     c0026aa6 <check_device_type+0xb7>
c0026a9e:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0026aa2:	84 c0                	test   %al,%al
c0026aa4:	79 10                	jns    c0026ab6 <check_device_type+0xc7>
c0026aa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0026aa9:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0026aad:	80 7d f3 81          	cmpb   $0x81,-0xd(%ebp)
c0026ab1:	0f 95 c0             	setne  %al
c0026ab4:	eb 32                	jmp    c0026ae8 <check_device_type+0xf9>
c0026ab6:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c0026aba:	75 06                	jne    c0026ac2 <check_device_type+0xd3>
c0026abc:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c0026ac0:	74 0c                	je     c0026ace <check_device_type+0xdf>
c0026ac2:	80 7d f2 3c          	cmpb   $0x3c,-0xe(%ebp)
c0026ac6:	75 0d                	jne    c0026ad5 <check_device_type+0xe6>
c0026ac8:	80 7d f1 c3          	cmpb   $0xc3,-0xf(%ebp)
c0026acc:	75 07                	jne    c0026ad5 <check_device_type+0xe6>
c0026ace:	b8 01 00 00 00       	mov    $0x1,%eax
c0026ad3:	eb 05                	jmp    c0026ada <check_device_type+0xeb>
c0026ad5:	b8 00 00 00 00       	mov    $0x0,%eax
c0026ada:	83 e0 01             	and    $0x1,%eax
c0026add:	8b 55 08             	mov    0x8(%ebp),%edx
c0026ae0:	88 42 10             	mov    %al,0x10(%edx)
c0026ae3:	b8 01 00 00 00       	mov    $0x1,%eax
c0026ae8:	c9                   	leave  
c0026ae9:	c3                   	ret    

c0026aea <identify_ata_device>:
c0026aea:	55                   	push   %ebp
c0026aeb:	89 e5                	mov    %esp,%ebp
c0026aed:	81 ec a8 02 00 00    	sub    $0x2a8,%esp
c0026af3:	8b 45 08             	mov    0x8(%ebp),%eax
c0026af6:	8b 40 08             	mov    0x8(%eax),%eax
c0026af9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026afc:	8b 45 08             	mov    0x8(%ebp),%eax
c0026aff:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c0026b03:	84 c0                	test   %al,%al
c0026b05:	75 21                	jne    c0026b28 <identify_ata_device+0x3e>
c0026b07:	83 ec 0c             	sub    $0xc,%esp
c0026b0a:	68 33 5d 03 c0       	push   $0xc0035d33
c0026b0f:	68 3d 5d 03 c0       	push   $0xc0035d3d
c0026b14:	68 58 5e 03 c0       	push   $0xc0035e58
c0026b19:	68 0d 01 00 00       	push   $0x10d
c0026b1e:	68 1a 5d 03 c0       	push   $0xc0035d1a
c0026b23:	e8 69 3a 00 00       	call   c002a591 <debug_panic>
c0026b28:	83 ec 0c             	sub    $0xc,%esp
c0026b2b:	ff 75 08             	pushl  0x8(%ebp)
c0026b2e:	e8 9e 06 00 00       	call   c00271d1 <select_device_wait>
c0026b33:	83 c4 10             	add    $0x10,%esp
c0026b36:	83 ec 08             	sub    $0x8,%esp
c0026b39:	68 ec 00 00 00       	push   $0xec
c0026b3e:	ff 75 f4             	pushl  -0xc(%ebp)
c0026b41:	e8 4b 04 00 00       	call   c0026f91 <issue_pio_command>
c0026b46:	83 c4 10             	add    $0x10,%esp
c0026b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026b4c:	83 c0 34             	add    $0x34,%eax
c0026b4f:	83 ec 0c             	sub    $0xc,%esp
c0026b52:	50                   	push   %eax
c0026b53:	e8 e7 c6 ff ff       	call   c002323f <sema_down>
c0026b58:	83 c4 10             	add    $0x10,%esp
c0026b5b:	83 ec 0c             	sub    $0xc,%esp
c0026b5e:	ff 75 08             	pushl  0x8(%ebp)
c0026b61:	e8 35 05 00 00       	call   c002709b <wait_while_busy>
c0026b66:	83 c4 10             	add    $0x10,%esp
c0026b69:	83 f0 01             	xor    $0x1,%eax
c0026b6c:	84 c0                	test   %al,%al
c0026b6e:	74 0c                	je     c0026b7c <identify_ata_device+0x92>
c0026b70:	8b 45 08             	mov    0x8(%ebp),%eax
c0026b73:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0026b77:	e9 fb 00 00 00       	jmp    c0026c77 <identify_ata_device+0x18d>
c0026b7c:	83 ec 08             	sub    $0x8,%esp
c0026b7f:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026b85:	50                   	push   %eax
c0026b86:	ff 75 f4             	pushl  -0xc(%ebp)
c0026b89:	e8 62 04 00 00       	call   c0026ff0 <input_sector>
c0026b8e:	83 c4 10             	add    $0x10,%esp
c0026b91:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026b97:	83 c0 78             	add    $0x78,%eax
c0026b9a:	8b 00                	mov    (%eax),%eax
c0026b9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026b9f:	83 ec 08             	sub    $0x8,%esp
c0026ba2:	6a 14                	push   $0x14
c0026ba4:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026baa:	83 c0 14             	add    $0x14,%eax
c0026bad:	50                   	push   %eax
c0026bae:	e8 c6 00 00 00       	call   c0026c79 <descramble_ata_string>
c0026bb3:	83 c4 10             	add    $0x10,%esp
c0026bb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0026bb9:	83 ec 08             	sub    $0x8,%esp
c0026bbc:	6a 28                	push   $0x28
c0026bbe:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026bc4:	83 c0 36             	add    $0x36,%eax
c0026bc7:	50                   	push   %eax
c0026bc8:	e8 ac 00 00 00       	call   c0026c79 <descramble_ata_string>
c0026bcd:	83 c4 10             	add    $0x10,%esp
c0026bd0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0026bd3:	83 ec 0c             	sub    $0xc,%esp
c0026bd6:	ff 75 e8             	pushl  -0x18(%ebp)
c0026bd9:	ff 75 ec             	pushl  -0x14(%ebp)
c0026bdc:	68 54 5d 03 c0       	push   $0xc0035d54
c0026be1:	68 80 00 00 00       	push   $0x80
c0026be6:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c0026bec:	50                   	push   %eax
c0026bed:	e8 15 14 00 00       	call   c0028007 <snprintf>
c0026bf2:	83 c4 20             	add    $0x20,%esp
c0026bf5:	81 7d f0 ff ff 1f 00 	cmpl   $0x1fffff,-0x10(%ebp)
c0026bfc:	76 45                	jbe    c0026c43 <identify_ata_device+0x159>
c0026bfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c01:	83 ec 08             	sub    $0x8,%esp
c0026c04:	50                   	push   %eax
c0026c05:	68 6c 5d 03 c0       	push   $0xc0035d6c
c0026c0a:	e8 21 14 00 00       	call   c0028030 <printf>
c0026c0f:	83 c4 10             	add    $0x10,%esp
c0026c12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026c15:	c1 e0 09             	shl    $0x9,%eax
c0026c18:	ba 00 00 00 00       	mov    $0x0,%edx
c0026c1d:	83 ec 08             	sub    $0x8,%esp
c0026c20:	52                   	push   %edx
c0026c21:	50                   	push   %eax
c0026c22:	e8 2e 21 00 00       	call   c0028d55 <print_human_readable_size>
c0026c27:	83 c4 10             	add    $0x10,%esp
c0026c2a:	83 ec 0c             	sub    $0xc,%esp
c0026c2d:	68 7a 5d 03 c0       	push   $0xc0035d7a
c0026c32:	e8 21 5c 00 00       	call   c002c858 <puts>
c0026c37:	83 c4 10             	add    $0x10,%esp
c0026c3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c3d:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0026c41:	eb 34                	jmp    c0026c77 <identify_ata_device+0x18d>
c0026c43:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c46:	83 ec 08             	sub    $0x8,%esp
c0026c49:	ff 75 08             	pushl  0x8(%ebp)
c0026c4c:	68 60 e5 03 c0       	push   $0xc003e560
c0026c51:	ff 75 f0             	pushl  -0x10(%ebp)
c0026c54:	8d 95 64 fd ff ff    	lea    -0x29c(%ebp),%edx
c0026c5a:	52                   	push   %edx
c0026c5b:	6a 04                	push   $0x4
c0026c5d:	50                   	push   %eax
c0026c5e:	e8 42 f2 ff ff       	call   c0025ea5 <block_register>
c0026c63:	83 c4 20             	add    $0x20,%esp
c0026c66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0026c69:	83 ec 0c             	sub    $0xc,%esp
c0026c6c:	ff 75 e4             	pushl  -0x1c(%ebp)
c0026c6f:	e8 79 f3 ff ff       	call   c0025fed <partition_scan>
c0026c74:	83 c4 10             	add    $0x10,%esp
c0026c77:	c9                   	leave  
c0026c78:	c3                   	ret    

c0026c79 <descramble_ata_string>:
c0026c79:	55                   	push   %ebp
c0026c7a:	89 e5                	mov    %esp,%ebp
c0026c7c:	83 ec 10             	sub    $0x10,%esp
c0026c7f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0026c86:	eb 3b                	jmp    c0026cc3 <descramble_ata_string+0x4a>
c0026c88:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0026c8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c8e:	01 d0                	add    %edx,%eax
c0026c90:	0f b6 00             	movzbl (%eax),%eax
c0026c93:	88 45 fb             	mov    %al,-0x5(%ebp)
c0026c96:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0026c99:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c9c:	01 c2                	add    %eax,%edx
c0026c9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0026ca1:	8d 48 01             	lea    0x1(%eax),%ecx
c0026ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0026ca7:	01 c8                	add    %ecx,%eax
c0026ca9:	0f b6 00             	movzbl (%eax),%eax
c0026cac:	88 02                	mov    %al,(%edx)
c0026cae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0026cb1:	8d 50 01             	lea    0x1(%eax),%edx
c0026cb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0026cb7:	01 c2                	add    %eax,%edx
c0026cb9:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0026cbd:	88 02                	mov    %al,(%edx)
c0026cbf:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
c0026cc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0026cc6:	83 c0 01             	add    $0x1,%eax
c0026cc9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0026ccc:	7c ba                	jl     c0026c88 <descramble_ata_string+0xf>
c0026cce:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
c0026cd2:	eb 2d                	jmp    c0026d01 <descramble_ata_string+0x88>
c0026cd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026cd7:	8d 50 ff             	lea    -0x1(%eax),%edx
c0026cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0026cdd:	01 d0                	add    %edx,%eax
c0026cdf:	0f b6 00             	movzbl (%eax),%eax
c0026ce2:	0f be c0             	movsbl %al,%eax
c0026ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026ce8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0026cec:	74 0f                	je     c0026cfd <descramble_ata_string+0x84>
c0026cee:	ff 75 f4             	pushl  -0xc(%ebp)
c0026cf1:	e8 b8 f7 ff ff       	call   c00264ae <isspace>
c0026cf6:	83 c4 04             	add    $0x4,%esp
c0026cf9:	85 c0                	test   %eax,%eax
c0026cfb:	74 0c                	je     c0026d09 <descramble_ata_string+0x90>
c0026cfd:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
c0026d01:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0026d05:	7f cd                	jg     c0026cd4 <descramble_ata_string+0x5b>
c0026d07:	eb 01                	jmp    c0026d0a <descramble_ata_string+0x91>
c0026d09:	90                   	nop
c0026d0a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0026d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0026d10:	01 d0                	add    %edx,%eax
c0026d12:	c6 00 00             	movb   $0x0,(%eax)
c0026d15:	8b 45 08             	mov    0x8(%ebp),%eax
c0026d18:	c9                   	leave  
c0026d19:	c3                   	ret    

c0026d1a <ide_read>:
c0026d1a:	55                   	push   %ebp
c0026d1b:	89 e5                	mov    %esp,%ebp
c0026d1d:	83 ec 18             	sub    $0x18,%esp
c0026d20:	8b 45 08             	mov    0x8(%ebp),%eax
c0026d23:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026d26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026d29:	8b 40 08             	mov    0x8(%eax),%eax
c0026d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026d32:	83 c0 0c             	add    $0xc,%eax
c0026d35:	83 ec 0c             	sub    $0xc,%esp
c0026d38:	50                   	push   %eax
c0026d39:	e8 f0 c7 ff ff       	call   c002352e <lock_acquire>
c0026d3e:	83 c4 10             	add    $0x10,%esp
c0026d41:	83 ec 08             	sub    $0x8,%esp
c0026d44:	ff 75 0c             	pushl  0xc(%ebp)
c0026d47:	ff 75 f4             	pushl  -0xc(%ebp)
c0026d4a:	e8 3b 01 00 00       	call   c0026e8a <select_sector>
c0026d4f:	83 c4 10             	add    $0x10,%esp
c0026d52:	83 ec 08             	sub    $0x8,%esp
c0026d55:	6a 20                	push   $0x20
c0026d57:	ff 75 f0             	pushl  -0x10(%ebp)
c0026d5a:	e8 32 02 00 00       	call   c0026f91 <issue_pio_command>
c0026d5f:	83 c4 10             	add    $0x10,%esp
c0026d62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026d65:	83 c0 34             	add    $0x34,%eax
c0026d68:	83 ec 0c             	sub    $0xc,%esp
c0026d6b:	50                   	push   %eax
c0026d6c:	e8 ce c4 ff ff       	call   c002323f <sema_down>
c0026d71:	83 c4 10             	add    $0x10,%esp
c0026d74:	83 ec 0c             	sub    $0xc,%esp
c0026d77:	ff 75 f4             	pushl  -0xc(%ebp)
c0026d7a:	e8 1c 03 00 00       	call   c002709b <wait_while_busy>
c0026d7f:	83 c4 10             	add    $0x10,%esp
c0026d82:	83 f0 01             	xor    $0x1,%eax
c0026d85:	84 c0                	test   %al,%al
c0026d87:	74 23                	je     c0026dac <ide_read+0x92>
c0026d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026d8c:	83 ec 08             	sub    $0x8,%esp
c0026d8f:	ff 75 0c             	pushl  0xc(%ebp)
c0026d92:	50                   	push   %eax
c0026d93:	68 8c 5d 03 c0       	push   $0xc0035d8c
c0026d98:	68 6c 5e 03 c0       	push   $0xc0035e6c
c0026d9d:	68 62 01 00 00       	push   $0x162
c0026da2:	68 1a 5d 03 c0       	push   $0xc0035d1a
c0026da7:	e8 e5 37 00 00       	call   c002a591 <debug_panic>
c0026dac:	83 ec 08             	sub    $0x8,%esp
c0026daf:	ff 75 10             	pushl  0x10(%ebp)
c0026db2:	ff 75 f0             	pushl  -0x10(%ebp)
c0026db5:	e8 36 02 00 00       	call   c0026ff0 <input_sector>
c0026dba:	83 c4 10             	add    $0x10,%esp
c0026dbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026dc0:	83 c0 0c             	add    $0xc,%eax
c0026dc3:	83 ec 0c             	sub    $0xc,%esp
c0026dc6:	50                   	push   %eax
c0026dc7:	e8 a3 c9 ff ff       	call   c002376f <lock_release>
c0026dcc:	83 c4 10             	add    $0x10,%esp
c0026dcf:	90                   	nop
c0026dd0:	c9                   	leave  
c0026dd1:	c3                   	ret    

c0026dd2 <ide_write>:
c0026dd2:	55                   	push   %ebp
c0026dd3:	89 e5                	mov    %esp,%ebp
c0026dd5:	83 ec 18             	sub    $0x18,%esp
c0026dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0026ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026de1:	8b 40 08             	mov    0x8(%eax),%eax
c0026de4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026de7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026dea:	83 c0 0c             	add    $0xc,%eax
c0026ded:	83 ec 0c             	sub    $0xc,%esp
c0026df0:	50                   	push   %eax
c0026df1:	e8 38 c7 ff ff       	call   c002352e <lock_acquire>
c0026df6:	83 c4 10             	add    $0x10,%esp
c0026df9:	83 ec 08             	sub    $0x8,%esp
c0026dfc:	ff 75 0c             	pushl  0xc(%ebp)
c0026dff:	ff 75 f4             	pushl  -0xc(%ebp)
c0026e02:	e8 83 00 00 00       	call   c0026e8a <select_sector>
c0026e07:	83 c4 10             	add    $0x10,%esp
c0026e0a:	83 ec 08             	sub    $0x8,%esp
c0026e0d:	6a 30                	push   $0x30
c0026e0f:	ff 75 f0             	pushl  -0x10(%ebp)
c0026e12:	e8 7a 01 00 00       	call   c0026f91 <issue_pio_command>
c0026e17:	83 c4 10             	add    $0x10,%esp
c0026e1a:	83 ec 0c             	sub    $0xc,%esp
c0026e1d:	ff 75 f4             	pushl  -0xc(%ebp)
c0026e20:	e8 76 02 00 00       	call   c002709b <wait_while_busy>
c0026e25:	83 c4 10             	add    $0x10,%esp
c0026e28:	83 f0 01             	xor    $0x1,%eax
c0026e2b:	84 c0                	test   %al,%al
c0026e2d:	74 23                	je     c0026e52 <ide_write+0x80>
c0026e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026e32:	83 ec 08             	sub    $0x8,%esp
c0026e35:	ff 75 0c             	pushl  0xc(%ebp)
c0026e38:	50                   	push   %eax
c0026e39:	68 ac 5d 03 c0       	push   $0xc0035dac
c0026e3e:	68 78 5e 03 c0       	push   $0xc0035e78
c0026e43:	68 75 01 00 00       	push   $0x175
c0026e48:	68 1a 5d 03 c0       	push   $0xc0035d1a
c0026e4d:	e8 3f 37 00 00       	call   c002a591 <debug_panic>
c0026e52:	83 ec 08             	sub    $0x8,%esp
c0026e55:	ff 75 10             	pushl  0x10(%ebp)
c0026e58:	ff 75 f0             	pushl  -0x10(%ebp)
c0026e5b:	e8 b1 01 00 00       	call   c0027011 <output_sector>
c0026e60:	83 c4 10             	add    $0x10,%esp
c0026e63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026e66:	83 c0 34             	add    $0x34,%eax
c0026e69:	83 ec 0c             	sub    $0xc,%esp
c0026e6c:	50                   	push   %eax
c0026e6d:	e8 cd c3 ff ff       	call   c002323f <sema_down>
c0026e72:	83 c4 10             	add    $0x10,%esp
c0026e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026e78:	83 c0 0c             	add    $0xc,%eax
c0026e7b:	83 ec 0c             	sub    $0xc,%esp
c0026e7e:	50                   	push   %eax
c0026e7f:	e8 eb c8 ff ff       	call   c002376f <lock_release>
c0026e84:	83 c4 10             	add    $0x10,%esp
c0026e87:	90                   	nop
c0026e88:	c9                   	leave  
c0026e89:	c3                   	ret    

c0026e8a <select_sector>:
c0026e8a:	55                   	push   %ebp
c0026e8b:	89 e5                	mov    %esp,%ebp
c0026e8d:	83 ec 18             	sub    $0x18,%esp
c0026e90:	8b 45 08             	mov    0x8(%ebp),%eax
c0026e93:	8b 40 08             	mov    0x8(%eax),%eax
c0026e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026e99:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0026ea0:	76 21                	jbe    c0026ec3 <select_sector+0x39>
c0026ea2:	83 ec 0c             	sub    $0xc,%esp
c0026ea5:	68 cd 5d 03 c0       	push   $0xc0035dcd
c0026eaa:	68 3d 5d 03 c0       	push   $0xc0035d3d
c0026eaf:	68 84 5e 03 c0       	push   $0xc0035e84
c0026eb4:	68 89 01 00 00       	push   $0x189
c0026eb9:	68 1a 5d 03 c0       	push   $0xc0035d1a
c0026ebe:	e8 ce 36 00 00       	call   c002a591 <debug_panic>
c0026ec3:	83 ec 0c             	sub    $0xc,%esp
c0026ec6:	ff 75 08             	pushl  0x8(%ebp)
c0026ec9:	e8 03 03 00 00       	call   c00271d1 <select_device_wait>
c0026ece:	83 c4 10             	add    $0x10,%esp
c0026ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026ed4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026ed8:	83 c0 02             	add    $0x2,%eax
c0026edb:	0f b7 c0             	movzwl %ax,%eax
c0026ede:	83 ec 08             	sub    $0x8,%esp
c0026ee1:	6a 01                	push   $0x1
c0026ee3:	50                   	push   %eax
c0026ee4:	e8 4b f6 ff ff       	call   c0026534 <outb>
c0026ee9:	83 c4 10             	add    $0x10,%esp
c0026eec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026eef:	0f b6 d0             	movzbl %al,%edx
c0026ef2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026ef5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026ef9:	83 c0 03             	add    $0x3,%eax
c0026efc:	0f b7 c0             	movzwl %ax,%eax
c0026eff:	83 ec 08             	sub    $0x8,%esp
c0026f02:	52                   	push   %edx
c0026f03:	50                   	push   %eax
c0026f04:	e8 2b f6 ff ff       	call   c0026534 <outb>
c0026f09:	83 c4 10             	add    $0x10,%esp
c0026f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026f0f:	c1 e8 08             	shr    $0x8,%eax
c0026f12:	0f b6 d0             	movzbl %al,%edx
c0026f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026f18:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026f1c:	83 c0 04             	add    $0x4,%eax
c0026f1f:	0f b7 c0             	movzwl %ax,%eax
c0026f22:	83 ec 08             	sub    $0x8,%esp
c0026f25:	52                   	push   %edx
c0026f26:	50                   	push   %eax
c0026f27:	e8 08 f6 ff ff       	call   c0026534 <outb>
c0026f2c:	83 c4 10             	add    $0x10,%esp
c0026f2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026f32:	c1 e8 10             	shr    $0x10,%eax
c0026f35:	0f b6 d0             	movzbl %al,%edx
c0026f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026f3b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026f3f:	83 c0 05             	add    $0x5,%eax
c0026f42:	0f b7 c0             	movzwl %ax,%eax
c0026f45:	83 ec 08             	sub    $0x8,%esp
c0026f48:	52                   	push   %edx
c0026f49:	50                   	push   %eax
c0026f4a:	e8 e5 f5 ff ff       	call   c0026534 <outb>
c0026f4f:	83 c4 10             	add    $0x10,%esp
c0026f52:	8b 45 08             	mov    0x8(%ebp),%eax
c0026f55:	8b 40 0c             	mov    0xc(%eax),%eax
c0026f58:	83 f8 01             	cmp    $0x1,%eax
c0026f5b:	75 07                	jne    c0026f64 <select_sector+0xda>
c0026f5d:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c0026f62:	eb 05                	jmp    c0026f69 <select_sector+0xdf>
c0026f64:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
c0026f69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026f6c:	c1 e8 18             	shr    $0x18,%eax
c0026f6f:	09 d0                	or     %edx,%eax
c0026f71:	0f b6 d0             	movzbl %al,%edx
c0026f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026f77:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026f7b:	83 c0 06             	add    $0x6,%eax
c0026f7e:	0f b7 c0             	movzwl %ax,%eax
c0026f81:	83 ec 08             	sub    $0x8,%esp
c0026f84:	52                   	push   %edx
c0026f85:	50                   	push   %eax
c0026f86:	e8 a9 f5 ff ff       	call   c0026534 <outb>
c0026f8b:	83 c4 10             	add    $0x10,%esp
c0026f8e:	90                   	nop
c0026f8f:	c9                   	leave  
c0026f90:	c3                   	ret    

c0026f91 <issue_pio_command>:
c0026f91:	55                   	push   %ebp
c0026f92:	89 e5                	mov    %esp,%ebp
c0026f94:	83 ec 18             	sub    $0x18,%esp
c0026f97:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026f9a:	88 45 f4             	mov    %al,-0xc(%ebp)
c0026f9d:	e8 d5 ad ff ff       	call   c0021d77 <intr_get_level>
c0026fa2:	83 f8 01             	cmp    $0x1,%eax
c0026fa5:	74 21                	je     c0026fc8 <issue_pio_command+0x37>
c0026fa7:	83 ec 0c             	sub    $0xc,%esp
c0026faa:	68 e2 5d 03 c0       	push   $0xc0035de2
c0026faf:	68 3d 5d 03 c0       	push   $0xc0035d3d
c0026fb4:	68 94 5e 03 c0       	push   $0xc0035e94
c0026fb9:	68 9b 01 00 00       	push   $0x19b
c0026fbe:	68 1a 5d 03 c0       	push   $0xc0035d1a
c0026fc3:	e8 c9 35 00 00       	call   c002a591 <debug_panic>
c0026fc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0026fcb:	c6 40 30 01          	movb   $0x1,0x30(%eax)
c0026fcf:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c0026fd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0026fd6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026fda:	83 c0 07             	add    $0x7,%eax
c0026fdd:	0f b7 c0             	movzwl %ax,%eax
c0026fe0:	83 ec 08             	sub    $0x8,%esp
c0026fe3:	52                   	push   %edx
c0026fe4:	50                   	push   %eax
c0026fe5:	e8 4a f5 ff ff       	call   c0026534 <outb>
c0026fea:	83 c4 10             	add    $0x10,%esp
c0026fed:	90                   	nop
c0026fee:	c9                   	leave  
c0026fef:	c3                   	ret    

c0026ff0 <input_sector>:
c0026ff0:	55                   	push   %ebp
c0026ff1:	89 e5                	mov    %esp,%ebp
c0026ff3:	8b 45 08             	mov    0x8(%ebp),%eax
c0026ff6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026ffa:	0f b7 c0             	movzwl %ax,%eax
c0026ffd:	68 00 01 00 00       	push   $0x100
c0027002:	ff 75 0c             	pushl  0xc(%ebp)
c0027005:	50                   	push   %eax
c0027006:	e8 f5 f4 ff ff       	call   c0026500 <insw>
c002700b:	83 c4 0c             	add    $0xc,%esp
c002700e:	90                   	nop
c002700f:	c9                   	leave  
c0027010:	c3                   	ret    

c0027011 <output_sector>:
c0027011:	55                   	push   %ebp
c0027012:	89 e5                	mov    %esp,%ebp
c0027014:	8b 45 08             	mov    0x8(%ebp),%eax
c0027017:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c002701b:	0f b7 c0             	movzwl %ax,%eax
c002701e:	68 00 01 00 00       	push   $0x100
c0027023:	ff 75 0c             	pushl  0xc(%ebp)
c0027026:	50                   	push   %eax
c0027027:	e8 27 f5 ff ff       	call   c0026553 <outsw>
c002702c:	83 c4 0c             	add    $0xc,%esp
c002702f:	90                   	nop
c0027030:	c9                   	leave  
c0027031:	c3                   	ret    

c0027032 <wait_until_idle>:
c0027032:	55                   	push   %ebp
c0027033:	89 e5                	mov    %esp,%ebp
c0027035:	83 ec 18             	sub    $0x18,%esp
c0027038:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002703f:	eb 38                	jmp    c0027079 <wait_until_idle+0x47>
c0027041:	8b 45 08             	mov    0x8(%ebp),%eax
c0027044:	8b 40 08             	mov    0x8(%eax),%eax
c0027047:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c002704b:	83 c0 07             	add    $0x7,%eax
c002704e:	0f b7 c0             	movzwl %ax,%eax
c0027051:	50                   	push   %eax
c0027052:	e8 8c f4 ff ff       	call   c00264e3 <inb>
c0027057:	83 c4 04             	add    $0x4,%esp
c002705a:	0f b6 c0             	movzbl %al,%eax
c002705d:	25 88 00 00 00       	and    $0x88,%eax
c0027062:	85 c0                	test   %eax,%eax
c0027064:	74 32                	je     c0027098 <wait_until_idle+0x66>
c0027066:	83 ec 08             	sub    $0x8,%esp
c0027069:	6a 00                	push   $0x0
c002706b:	6a 0a                	push   $0xa
c002706d:	e8 78 da ff ff       	call   c0024aea <timer_usleep>
c0027072:	83 c4 10             	add    $0x10,%esp
c0027075:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0027079:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
c0027080:	7e bf                	jle    c0027041 <wait_until_idle+0xf>
c0027082:	8b 45 08             	mov    0x8(%ebp),%eax
c0027085:	83 ec 08             	sub    $0x8,%esp
c0027088:	50                   	push   %eax
c0027089:	68 ff 5d 03 c0       	push   $0xc0035dff
c002708e:	e8 9d 0f 00 00       	call   c0028030 <printf>
c0027093:	83 c4 10             	add    $0x10,%esp
c0027096:	eb 01                	jmp    c0027099 <wait_until_idle+0x67>
c0027098:	90                   	nop
c0027099:	c9                   	leave  
c002709a:	c3                   	ret    

c002709b <wait_while_busy>:
c002709b:	55                   	push   %ebp
c002709c:	89 e5                	mov    %esp,%ebp
c002709e:	83 ec 18             	sub    $0x18,%esp
c00270a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00270a4:	8b 40 08             	mov    0x8(%eax),%eax
c00270a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00270aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00270b1:	e9 8e 00 00 00       	jmp    c0027144 <wait_while_busy+0xa9>
c00270b6:	81 7d f4 bc 02 00 00 	cmpl   $0x2bc,-0xc(%ebp)
c00270bd:	75 14                	jne    c00270d3 <wait_while_busy+0x38>
c00270bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00270c2:	83 ec 08             	sub    $0x8,%esp
c00270c5:	50                   	push   %eax
c00270c6:	68 11 5e 03 c0       	push   $0xc0035e11
c00270cb:	e8 60 0f 00 00       	call   c0028030 <printf>
c00270d0:	83 c4 10             	add    $0x10,%esp
c00270d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00270d6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00270da:	66 05 06 02          	add    $0x206,%ax
c00270de:	0f b7 c0             	movzwl %ax,%eax
c00270e1:	83 ec 0c             	sub    $0xc,%esp
c00270e4:	50                   	push   %eax
c00270e5:	e8 f9 f3 ff ff       	call   c00264e3 <inb>
c00270ea:	83 c4 10             	add    $0x10,%esp
c00270ed:	84 c0                	test   %al,%al
c00270ef:	78 40                	js     c0027131 <wait_while_busy+0x96>
c00270f1:	81 7d f4 bb 02 00 00 	cmpl   $0x2bb,-0xc(%ebp)
c00270f8:	7e 10                	jle    c002710a <wait_while_busy+0x6f>
c00270fa:	83 ec 0c             	sub    $0xc,%esp
c00270fd:	68 26 5e 03 c0       	push   $0xc0035e26
c0027102:	e8 51 57 00 00       	call   c002c858 <puts>
c0027107:	83 c4 10             	add    $0x10,%esp
c002710a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002710d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0027111:	66 05 06 02          	add    $0x206,%ax
c0027115:	0f b7 c0             	movzwl %ax,%eax
c0027118:	83 ec 0c             	sub    $0xc,%esp
c002711b:	50                   	push   %eax
c002711c:	e8 c2 f3 ff ff       	call   c00264e3 <inb>
c0027121:	83 c4 10             	add    $0x10,%esp
c0027124:	0f b6 c0             	movzbl %al,%eax
c0027127:	83 e0 08             	and    $0x8,%eax
c002712a:	85 c0                	test   %eax,%eax
c002712c:	0f 95 c0             	setne  %al
c002712f:	eb 35                	jmp    c0027166 <wait_while_busy+0xcb>
c0027131:	83 ec 08             	sub    $0x8,%esp
c0027134:	6a 00                	push   $0x0
c0027136:	6a 0a                	push   $0xa
c0027138:	e8 82 d9 ff ff       	call   c0024abf <timer_msleep>
c002713d:	83 c4 10             	add    $0x10,%esp
c0027140:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0027144:	81 7d f4 b7 0b 00 00 	cmpl   $0xbb7,-0xc(%ebp)
c002714b:	0f 8e 65 ff ff ff    	jle    c00270b6 <wait_while_busy+0x1b>
c0027151:	83 ec 0c             	sub    $0xc,%esp
c0027154:	68 29 5e 03 c0       	push   $0xc0035e29
c0027159:	e8 fa 56 00 00       	call   c002c858 <puts>
c002715e:	83 c4 10             	add    $0x10,%esp
c0027161:	b8 00 00 00 00       	mov    $0x0,%eax
c0027166:	c9                   	leave  
c0027167:	c3                   	ret    

c0027168 <select_device>:
c0027168:	55                   	push   %ebp
c0027169:	89 e5                	mov    %esp,%ebp
c002716b:	83 ec 18             	sub    $0x18,%esp
c002716e:	8b 45 08             	mov    0x8(%ebp),%eax
c0027171:	8b 40 08             	mov    0x8(%eax),%eax
c0027174:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0027177:	c6 45 f7 a0          	movb   $0xa0,-0x9(%ebp)
c002717b:	8b 45 08             	mov    0x8(%ebp),%eax
c002717e:	8b 40 0c             	mov    0xc(%eax),%eax
c0027181:	83 f8 01             	cmp    $0x1,%eax
c0027184:	75 04                	jne    c002718a <select_device+0x22>
c0027186:	80 4d f7 10          	orb    $0x10,-0x9(%ebp)
c002718a:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c002718e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0027191:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0027195:	83 c0 06             	add    $0x6,%eax
c0027198:	0f b7 c0             	movzwl %ax,%eax
c002719b:	52                   	push   %edx
c002719c:	50                   	push   %eax
c002719d:	e8 92 f3 ff ff       	call   c0026534 <outb>
c00271a2:	83 c4 08             	add    $0x8,%esp
c00271a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00271a8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00271ac:	66 05 06 02          	add    $0x206,%ax
c00271b0:	0f b7 c0             	movzwl %ax,%eax
c00271b3:	50                   	push   %eax
c00271b4:	e8 2a f3 ff ff       	call   c00264e3 <inb>
c00271b9:	83 c4 04             	add    $0x4,%esp
c00271bc:	83 ec 08             	sub    $0x8,%esp
c00271bf:	6a 00                	push   $0x0
c00271c1:	68 90 01 00 00       	push   $0x190
c00271c6:	e8 4a d9 ff ff       	call   c0024b15 <timer_nsleep>
c00271cb:	83 c4 10             	add    $0x10,%esp
c00271ce:	90                   	nop
c00271cf:	c9                   	leave  
c00271d0:	c3                   	ret    

c00271d1 <select_device_wait>:
c00271d1:	55                   	push   %ebp
c00271d2:	89 e5                	mov    %esp,%ebp
c00271d4:	83 ec 08             	sub    $0x8,%esp
c00271d7:	83 ec 0c             	sub    $0xc,%esp
c00271da:	ff 75 08             	pushl  0x8(%ebp)
c00271dd:	e8 50 fe ff ff       	call   c0027032 <wait_until_idle>
c00271e2:	83 c4 10             	add    $0x10,%esp
c00271e5:	83 ec 0c             	sub    $0xc,%esp
c00271e8:	ff 75 08             	pushl  0x8(%ebp)
c00271eb:	e8 78 ff ff ff       	call   c0027168 <select_device>
c00271f0:	83 c4 10             	add    $0x10,%esp
c00271f3:	83 ec 0c             	sub    $0xc,%esp
c00271f6:	ff 75 08             	pushl  0x8(%ebp)
c00271f9:	e8 34 fe ff ff       	call   c0027032 <wait_until_idle>
c00271fe:	83 c4 10             	add    $0x10,%esp
c0027201:	90                   	nop
c0027202:	c9                   	leave  
c0027203:	c3                   	ret    

c0027204 <interrupt_handler>:
c0027204:	55                   	push   %ebp
c0027205:	89 e5                	mov    %esp,%ebp
c0027207:	83 ec 18             	sub    $0x18,%esp
c002720a:	c7 45 f4 80 ff 03 c0 	movl   $0xc003ff80,-0xc(%ebp)
c0027211:	eb 63                	jmp    c0027276 <interrupt_handler+0x72>
c0027213:	8b 45 08             	mov    0x8(%ebp),%eax
c0027216:	8b 50 30             	mov    0x30(%eax),%edx
c0027219:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002721c:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0027220:	0f b6 c0             	movzbl %al,%eax
c0027223:	39 c2                	cmp    %eax,%edx
c0027225:	75 4b                	jne    c0027272 <interrupt_handler+0x6e>
c0027227:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002722a:	0f b6 40 30          	movzbl 0x30(%eax),%eax
c002722e:	84 c0                	test   %al,%al
c0027230:	74 2a                	je     c002725c <interrupt_handler+0x58>
c0027232:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027235:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0027239:	83 c0 07             	add    $0x7,%eax
c002723c:	0f b7 c0             	movzwl %ax,%eax
c002723f:	50                   	push   %eax
c0027240:	e8 9e f2 ff ff       	call   c00264e3 <inb>
c0027245:	83 c4 04             	add    $0x4,%esp
c0027248:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002724b:	83 c0 34             	add    $0x34,%eax
c002724e:	83 ec 0c             	sub    $0xc,%esp
c0027251:	50                   	push   %eax
c0027252:	e8 f7 c0 ff ff       	call   c002334e <sema_up>
c0027257:	83 c4 10             	add    $0x10,%esp
c002725a:	eb 3d                	jmp    c0027299 <interrupt_handler+0x95>
c002725c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002725f:	83 ec 08             	sub    $0x8,%esp
c0027262:	50                   	push   %eax
c0027263:	68 30 5e 03 c0       	push   $0xc0035e30
c0027268:	e8 c3 0d 00 00       	call   c0028030 <printf>
c002726d:	83 c4 10             	add    $0x10,%esp
c0027270:	eb 27                	jmp    c0027299 <interrupt_handler+0x95>
c0027272:	83 45 f4 70          	addl   $0x70,-0xc(%ebp)
c0027276:	b8 60 00 04 c0       	mov    $0xc0040060,%eax
c002727b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c002727e:	72 93                	jb     c0027213 <interrupt_handler+0xf>
c0027280:	68 f8 5c 03 c0       	push   $0xc0035cf8
c0027285:	68 a8 5e 03 c0       	push   $0xc0035ea8
c002728a:	68 0c 02 00 00       	push   $0x20c
c002728f:	68 1a 5d 03 c0       	push   $0xc0035d1a
c0027294:	e8 f8 32 00 00       	call   c002a591 <debug_panic>
c0027299:	c9                   	leave  
c002729a:	c3                   	ret    

c002729b <input_init>:
c002729b:	55                   	push   %ebp
c002729c:	89 e5                	mov    %esp,%ebp
c002729e:	83 ec 08             	sub    $0x8,%esp
c00272a1:	83 ec 0c             	sub    $0xc,%esp
c00272a4:	68 60 00 04 c0       	push   $0xc0040060
c00272a9:	e8 04 01 00 00       	call   c00273b2 <intq_init>
c00272ae:	83 c4 10             	add    $0x10,%esp
c00272b1:	90                   	nop
c00272b2:	c9                   	leave  
c00272b3:	c3                   	ret    

c00272b4 <input_putc>:
c00272b4:	55                   	push   %ebp
c00272b5:	89 e5                	mov    %esp,%ebp
c00272b7:	83 ec 18             	sub    $0x18,%esp
c00272ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00272bd:	88 45 f4             	mov    %al,-0xc(%ebp)
c00272c0:	e8 b2 aa ff ff       	call   c0021d77 <intr_get_level>
c00272c5:	85 c0                	test   %eax,%eax
c00272c7:	74 1e                	je     c00272e7 <input_putc+0x33>
c00272c9:	83 ec 0c             	sub    $0xc,%esp
c00272cc:	68 bc 5e 03 c0       	push   $0xc0035ebc
c00272d1:	68 da 5e 03 c0       	push   $0xc0035eda
c00272d6:	68 1c 5f 03 c0       	push   $0xc0035f1c
c00272db:	6a 15                	push   $0x15
c00272dd:	68 f1 5e 03 c0       	push   $0xc0035ef1
c00272e2:	e8 aa 32 00 00       	call   c002a591 <debug_panic>
c00272e7:	83 ec 0c             	sub    $0xc,%esp
c00272ea:	68 60 00 04 c0       	push   $0xc0040060
c00272ef:	e8 42 01 00 00       	call   c0027436 <intq_full>
c00272f4:	83 c4 10             	add    $0x10,%esp
c00272f7:	83 f0 01             	xor    $0x1,%eax
c00272fa:	84 c0                	test   %al,%al
c00272fc:	75 1e                	jne    c002731c <input_putc+0x68>
c00272fe:	83 ec 0c             	sub    $0xc,%esp
c0027301:	68 07 5f 03 c0       	push   $0xc0035f07
c0027306:	68 da 5e 03 c0       	push   $0xc0035eda
c002730b:	68 1c 5f 03 c0       	push   $0xc0035f1c
c0027310:	6a 16                	push   $0x16
c0027312:	68 f1 5e 03 c0       	push   $0xc0035ef1
c0027317:	e8 75 32 00 00       	call   c002a591 <debug_panic>
c002731c:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0027320:	83 ec 08             	sub    $0x8,%esp
c0027323:	50                   	push   %eax
c0027324:	68 60 00 04 c0       	push   $0xc0040060
c0027329:	e8 38 02 00 00       	call   c0027566 <intq_putc>
c002732e:	83 c4 10             	add    $0x10,%esp
c0027331:	e8 d7 e5 ff ff       	call   c002590d <serial_notify>
c0027336:	90                   	nop
c0027337:	c9                   	leave  
c0027338:	c3                   	ret    

c0027339 <input_getc>:
c0027339:	55                   	push   %ebp
c002733a:	89 e5                	mov    %esp,%ebp
c002733c:	83 ec 18             	sub    $0x18,%esp
c002733f:	e8 a8 aa ff ff       	call   c0021dec <intr_disable>
c0027344:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027347:	83 ec 0c             	sub    $0xc,%esp
c002734a:	68 60 00 04 c0       	push   $0xc0040060
c002734f:	e8 30 01 00 00       	call   c0027484 <intq_getc>
c0027354:	83 c4 10             	add    $0x10,%esp
c0027357:	88 45 f3             	mov    %al,-0xd(%ebp)
c002735a:	e8 ae e5 ff ff       	call   c002590d <serial_notify>
c002735f:	83 ec 0c             	sub    $0xc,%esp
c0027362:	ff 75 f4             	pushl  -0xc(%ebp)
c0027365:	e8 2a aa ff ff       	call   c0021d94 <intr_set_level>
c002736a:	83 c4 10             	add    $0x10,%esp
c002736d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0027371:	c9                   	leave  
c0027372:	c3                   	ret    

c0027373 <input_full>:
c0027373:	55                   	push   %ebp
c0027374:	89 e5                	mov    %esp,%ebp
c0027376:	83 ec 08             	sub    $0x8,%esp
c0027379:	e8 f9 a9 ff ff       	call   c0021d77 <intr_get_level>
c002737e:	85 c0                	test   %eax,%eax
c0027380:	74 1e                	je     c00273a0 <input_full+0x2d>
c0027382:	83 ec 0c             	sub    $0xc,%esp
c0027385:	68 bc 5e 03 c0       	push   $0xc0035ebc
c002738a:	68 da 5e 03 c0       	push   $0xc0035eda
c002738f:	68 28 5f 03 c0       	push   $0xc0035f28
c0027394:	6a 32                	push   $0x32
c0027396:	68 f1 5e 03 c0       	push   $0xc0035ef1
c002739b:	e8 f1 31 00 00       	call   c002a591 <debug_panic>
c00273a0:	83 ec 0c             	sub    $0xc,%esp
c00273a3:	68 60 00 04 c0       	push   $0xc0040060
c00273a8:	e8 89 00 00 00       	call   c0027436 <intq_full>
c00273ad:	83 c4 10             	add    $0x10,%esp
c00273b0:	c9                   	leave  
c00273b1:	c3                   	ret    

c00273b2 <intq_init>:
c00273b2:	55                   	push   %ebp
c00273b3:	89 e5                	mov    %esp,%ebp
c00273b5:	83 ec 08             	sub    $0x8,%esp
c00273b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00273bb:	83 ec 0c             	sub    $0xc,%esp
c00273be:	50                   	push   %eax
c00273bf:	e8 1d c1 ff ff       	call   c00234e1 <lock_init>
c00273c4:	83 c4 10             	add    $0x10,%esp
c00273c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00273ca:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c00273d1:	8b 45 08             	mov    0x8(%ebp),%eax
c00273d4:	8b 50 28             	mov    0x28(%eax),%edx
c00273d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00273da:	89 50 24             	mov    %edx,0x24(%eax)
c00273dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00273e0:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
c00273e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00273ea:	8b 50 70             	mov    0x70(%eax),%edx
c00273ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00273f0:	89 50 6c             	mov    %edx,0x6c(%eax)
c00273f3:	90                   	nop
c00273f4:	c9                   	leave  
c00273f5:	c3                   	ret    

c00273f6 <intq_empty>:
c00273f6:	55                   	push   %ebp
c00273f7:	89 e5                	mov    %esp,%ebp
c00273f9:	83 ec 08             	sub    $0x8,%esp
c00273fc:	e8 76 a9 ff ff       	call   c0021d77 <intr_get_level>
c0027401:	85 c0                	test   %eax,%eax
c0027403:	74 1e                	je     c0027423 <intq_empty+0x2d>
c0027405:	83 ec 0c             	sub    $0xc,%esp
c0027408:	68 34 5f 03 c0       	push   $0xc0035f34
c002740d:	68 52 5f 03 c0       	push   $0xc0035f52
c0027412:	68 48 60 03 c0       	push   $0xc0036048
c0027417:	6a 16                	push   $0x16
c0027419:	68 69 5f 03 c0       	push   $0xc0035f69
c002741e:	e8 6e 31 00 00       	call   c002a591 <debug_panic>
c0027423:	8b 45 08             	mov    0x8(%ebp),%eax
c0027426:	8b 50 6c             	mov    0x6c(%eax),%edx
c0027429:	8b 45 08             	mov    0x8(%ebp),%eax
c002742c:	8b 40 70             	mov    0x70(%eax),%eax
c002742f:	39 c2                	cmp    %eax,%edx
c0027431:	0f 94 c0             	sete   %al
c0027434:	c9                   	leave  
c0027435:	c3                   	ret    

c0027436 <intq_full>:
c0027436:	55                   	push   %ebp
c0027437:	89 e5                	mov    %esp,%ebp
c0027439:	83 ec 08             	sub    $0x8,%esp
c002743c:	e8 36 a9 ff ff       	call   c0021d77 <intr_get_level>
c0027441:	85 c0                	test   %eax,%eax
c0027443:	74 1e                	je     c0027463 <intq_full+0x2d>
c0027445:	83 ec 0c             	sub    $0xc,%esp
c0027448:	68 34 5f 03 c0       	push   $0xc0035f34
c002744d:	68 52 5f 03 c0       	push   $0xc0035f52
c0027452:	68 54 60 03 c0       	push   $0xc0036054
c0027457:	6a 1e                	push   $0x1e
c0027459:	68 69 5f 03 c0       	push   $0xc0035f69
c002745e:	e8 2e 31 00 00       	call   c002a591 <debug_panic>
c0027463:	8b 45 08             	mov    0x8(%ebp),%eax
c0027466:	8b 40 6c             	mov    0x6c(%eax),%eax
c0027469:	83 ec 0c             	sub    $0xc,%esp
c002746c:	50                   	push   %eax
c002746d:	e8 d9 01 00 00       	call   c002764b <next>
c0027472:	83 c4 10             	add    $0x10,%esp
c0027475:	89 c2                	mov    %eax,%edx
c0027477:	8b 45 08             	mov    0x8(%ebp),%eax
c002747a:	8b 40 70             	mov    0x70(%eax),%eax
c002747d:	39 c2                	cmp    %eax,%edx
c002747f:	0f 94 c0             	sete   %al
c0027482:	c9                   	leave  
c0027483:	c3                   	ret    

c0027484 <intq_getc>:
c0027484:	55                   	push   %ebp
c0027485:	89 e5                	mov    %esp,%ebp
c0027487:	83 ec 18             	sub    $0x18,%esp
c002748a:	e8 e8 a8 ff ff       	call   c0021d77 <intr_get_level>
c002748f:	85 c0                	test   %eax,%eax
c0027491:	74 7b                	je     c002750e <intq_getc+0x8a>
c0027493:	83 ec 0c             	sub    $0xc,%esp
c0027496:	68 34 5f 03 c0       	push   $0xc0035f34
c002749b:	68 52 5f 03 c0       	push   $0xc0035f52
c00274a0:	68 60 60 03 c0       	push   $0xc0036060
c00274a5:	6a 2a                	push   $0x2a
c00274a7:	68 69 5f 03 c0       	push   $0xc0035f69
c00274ac:	e8 e0 30 00 00       	call   c002a591 <debug_panic>
c00274b1:	e8 05 ac ff ff       	call   c00220bb <intr_context>
c00274b6:	83 f0 01             	xor    $0x1,%eax
c00274b9:	84 c0                	test   %al,%al
c00274bb:	75 1e                	jne    c00274db <intq_getc+0x57>
c00274bd:	83 ec 0c             	sub    $0xc,%esp
c00274c0:	68 7e 5f 03 c0       	push   $0xc0035f7e
c00274c5:	68 52 5f 03 c0       	push   $0xc0035f52
c00274ca:	68 60 60 03 c0       	push   $0xc0036060
c00274cf:	6a 2d                	push   $0x2d
c00274d1:	68 69 5f 03 c0       	push   $0xc0035f69
c00274d6:	e8 b6 30 00 00       	call   c002a591 <debug_panic>
c00274db:	8b 45 08             	mov    0x8(%ebp),%eax
c00274de:	83 ec 0c             	sub    $0xc,%esp
c00274e1:	50                   	push   %eax
c00274e2:	e8 47 c0 ff ff       	call   c002352e <lock_acquire>
c00274e7:	83 c4 10             	add    $0x10,%esp
c00274ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00274ed:	83 c0 28             	add    $0x28,%eax
c00274f0:	83 ec 08             	sub    $0x8,%esp
c00274f3:	50                   	push   %eax
c00274f4:	ff 75 08             	pushl  0x8(%ebp)
c00274f7:	e8 6b 01 00 00       	call   c0027667 <wait>
c00274fc:	83 c4 10             	add    $0x10,%esp
c00274ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0027502:	83 ec 0c             	sub    $0xc,%esp
c0027505:	50                   	push   %eax
c0027506:	e8 64 c2 ff ff       	call   c002376f <lock_release>
c002750b:	83 c4 10             	add    $0x10,%esp
c002750e:	83 ec 0c             	sub    $0xc,%esp
c0027511:	ff 75 08             	pushl  0x8(%ebp)
c0027514:	e8 dd fe ff ff       	call   c00273f6 <intq_empty>
c0027519:	83 c4 10             	add    $0x10,%esp
c002751c:	84 c0                	test   %al,%al
c002751e:	75 91                	jne    c00274b1 <intq_getc+0x2d>
c0027520:	8b 45 08             	mov    0x8(%ebp),%eax
c0027523:	8b 40 70             	mov    0x70(%eax),%eax
c0027526:	8b 55 08             	mov    0x8(%ebp),%edx
c0027529:	0f b6 44 02 2c       	movzbl 0x2c(%edx,%eax,1),%eax
c002752e:	88 45 f7             	mov    %al,-0x9(%ebp)
c0027531:	8b 45 08             	mov    0x8(%ebp),%eax
c0027534:	8b 40 70             	mov    0x70(%eax),%eax
c0027537:	83 ec 0c             	sub    $0xc,%esp
c002753a:	50                   	push   %eax
c002753b:	e8 0b 01 00 00       	call   c002764b <next>
c0027540:	83 c4 10             	add    $0x10,%esp
c0027543:	89 c2                	mov    %eax,%edx
c0027545:	8b 45 08             	mov    0x8(%ebp),%eax
c0027548:	89 50 70             	mov    %edx,0x70(%eax)
c002754b:	8b 45 08             	mov    0x8(%ebp),%eax
c002754e:	83 c0 24             	add    $0x24,%eax
c0027551:	83 ec 08             	sub    $0x8,%esp
c0027554:	50                   	push   %eax
c0027555:	ff 75 08             	pushl  0x8(%ebp)
c0027558:	e8 cd 01 00 00       	call   c002772a <signal>
c002755d:	83 c4 10             	add    $0x10,%esp
c0027560:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0027564:	c9                   	leave  
c0027565:	c3                   	ret    

c0027566 <intq_putc>:
c0027566:	55                   	push   %ebp
c0027567:	89 e5                	mov    %esp,%ebp
c0027569:	83 ec 18             	sub    $0x18,%esp
c002756c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002756f:	88 45 f4             	mov    %al,-0xc(%ebp)
c0027572:	e8 00 a8 ff ff       	call   c0021d77 <intr_get_level>
c0027577:	85 c0                	test   %eax,%eax
c0027579:	74 7b                	je     c00275f6 <intq_putc+0x90>
c002757b:	83 ec 0c             	sub    $0xc,%esp
c002757e:	68 34 5f 03 c0       	push   $0xc0035f34
c0027583:	68 52 5f 03 c0       	push   $0xc0035f52
c0027588:	68 6c 60 03 c0       	push   $0xc003606c
c002758d:	6a 3f                	push   $0x3f
c002758f:	68 69 5f 03 c0       	push   $0xc0035f69
c0027594:	e8 f8 2f 00 00       	call   c002a591 <debug_panic>
c0027599:	e8 1d ab ff ff       	call   c00220bb <intr_context>
c002759e:	83 f0 01             	xor    $0x1,%eax
c00275a1:	84 c0                	test   %al,%al
c00275a3:	75 1e                	jne    c00275c3 <intq_putc+0x5d>
c00275a5:	83 ec 0c             	sub    $0xc,%esp
c00275a8:	68 7e 5f 03 c0       	push   $0xc0035f7e
c00275ad:	68 52 5f 03 c0       	push   $0xc0035f52
c00275b2:	68 6c 60 03 c0       	push   $0xc003606c
c00275b7:	6a 42                	push   $0x42
c00275b9:	68 69 5f 03 c0       	push   $0xc0035f69
c00275be:	e8 ce 2f 00 00       	call   c002a591 <debug_panic>
c00275c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00275c6:	83 ec 0c             	sub    $0xc,%esp
c00275c9:	50                   	push   %eax
c00275ca:	e8 5f bf ff ff       	call   c002352e <lock_acquire>
c00275cf:	83 c4 10             	add    $0x10,%esp
c00275d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00275d5:	83 c0 24             	add    $0x24,%eax
c00275d8:	83 ec 08             	sub    $0x8,%esp
c00275db:	50                   	push   %eax
c00275dc:	ff 75 08             	pushl  0x8(%ebp)
c00275df:	e8 83 00 00 00       	call   c0027667 <wait>
c00275e4:	83 c4 10             	add    $0x10,%esp
c00275e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00275ea:	83 ec 0c             	sub    $0xc,%esp
c00275ed:	50                   	push   %eax
c00275ee:	e8 7c c1 ff ff       	call   c002376f <lock_release>
c00275f3:	83 c4 10             	add    $0x10,%esp
c00275f6:	83 ec 0c             	sub    $0xc,%esp
c00275f9:	ff 75 08             	pushl  0x8(%ebp)
c00275fc:	e8 35 fe ff ff       	call   c0027436 <intq_full>
c0027601:	83 c4 10             	add    $0x10,%esp
c0027604:	84 c0                	test   %al,%al
c0027606:	75 91                	jne    c0027599 <intq_putc+0x33>
c0027608:	8b 45 08             	mov    0x8(%ebp),%eax
c002760b:	8b 40 6c             	mov    0x6c(%eax),%eax
c002760e:	8b 55 08             	mov    0x8(%ebp),%edx
c0027611:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c0027615:	88 4c 02 2c          	mov    %cl,0x2c(%edx,%eax,1)
c0027619:	8b 45 08             	mov    0x8(%ebp),%eax
c002761c:	8b 40 6c             	mov    0x6c(%eax),%eax
c002761f:	83 ec 0c             	sub    $0xc,%esp
c0027622:	50                   	push   %eax
c0027623:	e8 23 00 00 00       	call   c002764b <next>
c0027628:	83 c4 10             	add    $0x10,%esp
c002762b:	89 c2                	mov    %eax,%edx
c002762d:	8b 45 08             	mov    0x8(%ebp),%eax
c0027630:	89 50 6c             	mov    %edx,0x6c(%eax)
c0027633:	8b 45 08             	mov    0x8(%ebp),%eax
c0027636:	83 c0 28             	add    $0x28,%eax
c0027639:	83 ec 08             	sub    $0x8,%esp
c002763c:	50                   	push   %eax
c002763d:	ff 75 08             	pushl  0x8(%ebp)
c0027640:	e8 e5 00 00 00       	call   c002772a <signal>
c0027645:	83 c4 10             	add    $0x10,%esp
c0027648:	90                   	nop
c0027649:	c9                   	leave  
c002764a:	c3                   	ret    

c002764b <next>:
c002764b:	55                   	push   %ebp
c002764c:	89 e5                	mov    %esp,%ebp
c002764e:	8b 45 08             	mov    0x8(%ebp),%eax
c0027651:	8d 50 01             	lea    0x1(%eax),%edx
c0027654:	89 d0                	mov    %edx,%eax
c0027656:	c1 f8 1f             	sar    $0x1f,%eax
c0027659:	c1 e8 1a             	shr    $0x1a,%eax
c002765c:	01 c2                	add    %eax,%edx
c002765e:	83 e2 3f             	and    $0x3f,%edx
c0027661:	29 c2                	sub    %eax,%edx
c0027663:	89 d0                	mov    %edx,%eax
c0027665:	5d                   	pop    %ebp
c0027666:	c3                   	ret    

c0027667 <wait>:
c0027667:	55                   	push   %ebp
c0027668:	89 e5                	mov    %esp,%ebp
c002766a:	83 ec 08             	sub    $0x8,%esp
c002766d:	e8 49 aa ff ff       	call   c00220bb <intr_context>
c0027672:	83 f0 01             	xor    $0x1,%eax
c0027675:	84 c0                	test   %al,%al
c0027677:	75 1e                	jne    c0027697 <wait+0x30>
c0027679:	83 ec 0c             	sub    $0xc,%esp
c002767c:	68 7e 5f 03 c0       	push   $0xc0035f7e
c0027681:	68 52 5f 03 c0       	push   $0xc0035f52
c0027686:	68 78 60 03 c0       	push   $0xc0036078
c002768b:	6a 59                	push   $0x59
c002768d:	68 69 5f 03 c0       	push   $0xc0035f69
c0027692:	e8 fa 2e 00 00       	call   c002a591 <debug_panic>
c0027697:	e8 db a6 ff ff       	call   c0021d77 <intr_get_level>
c002769c:	85 c0                	test   %eax,%eax
c002769e:	74 1e                	je     c00276be <wait+0x57>
c00276a0:	83 ec 0c             	sub    $0xc,%esp
c00276a3:	68 34 5f 03 c0       	push   $0xc0035f34
c00276a8:	68 52 5f 03 c0       	push   $0xc0035f52
c00276ad:	68 78 60 03 c0       	push   $0xc0036078
c00276b2:	6a 5a                	push   $0x5a
c00276b4:	68 69 5f 03 c0       	push   $0xc0035f69
c00276b9:	e8 d3 2e 00 00       	call   c002a591 <debug_panic>
c00276be:	8b 45 08             	mov    0x8(%ebp),%eax
c00276c1:	83 c0 28             	add    $0x28,%eax
c00276c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00276c7:	75 12                	jne    c00276db <wait+0x74>
c00276c9:	83 ec 0c             	sub    $0xc,%esp
c00276cc:	ff 75 08             	pushl  0x8(%ebp)
c00276cf:	e8 22 fd ff ff       	call   c00273f6 <intq_empty>
c00276d4:	83 c4 10             	add    $0x10,%esp
c00276d7:	84 c0                	test   %al,%al
c00276d9:	75 3b                	jne    c0027716 <wait+0xaf>
c00276db:	8b 45 08             	mov    0x8(%ebp),%eax
c00276de:	83 c0 24             	add    $0x24,%eax
c00276e1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00276e4:	75 12                	jne    c00276f8 <wait+0x91>
c00276e6:	83 ec 0c             	sub    $0xc,%esp
c00276e9:	ff 75 08             	pushl  0x8(%ebp)
c00276ec:	e8 45 fd ff ff       	call   c0027436 <intq_full>
c00276f1:	83 c4 10             	add    $0x10,%esp
c00276f4:	84 c0                	test   %al,%al
c00276f6:	75 1e                	jne    c0027716 <wait+0xaf>
c00276f8:	83 ec 0c             	sub    $0xc,%esp
c00276fb:	68 90 5f 03 c0       	push   $0xc0035f90
c0027700:	68 52 5f 03 c0       	push   $0xc0035f52
c0027705:	68 78 60 03 c0       	push   $0xc0036078
c002770a:	6a 5c                	push   $0x5c
c002770c:	68 69 5f 03 c0       	push   $0xc0035f69
c0027711:	e8 7b 2e 00 00       	call   c002a591 <debug_panic>
c0027716:	e8 ce 97 ff ff       	call   c0020ee9 <thread_current>
c002771b:	89 c2                	mov    %eax,%edx
c002771d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027720:	89 10                	mov    %edx,(%eax)
c0027722:	e8 9e 96 ff ff       	call   c0020dc5 <thread_block>
c0027727:	90                   	nop
c0027728:	c9                   	leave  
c0027729:	c3                   	ret    

c002772a <signal>:
c002772a:	55                   	push   %ebp
c002772b:	89 e5                	mov    %esp,%ebp
c002772d:	83 ec 08             	sub    $0x8,%esp
c0027730:	e8 42 a6 ff ff       	call   c0021d77 <intr_get_level>
c0027735:	85 c0                	test   %eax,%eax
c0027737:	74 1e                	je     c0027757 <signal+0x2d>
c0027739:	83 ec 0c             	sub    $0xc,%esp
c002773c:	68 34 5f 03 c0       	push   $0xc0035f34
c0027741:	68 52 5f 03 c0       	push   $0xc0035f52
c0027746:	68 80 60 03 c0       	push   $0xc0036080
c002774b:	6a 69                	push   $0x69
c002774d:	68 69 5f 03 c0       	push   $0xc0035f69
c0027752:	e8 3a 2e 00 00       	call   c002a591 <debug_panic>
c0027757:	8b 45 08             	mov    0x8(%ebp),%eax
c002775a:	83 c0 28             	add    $0x28,%eax
c002775d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0027760:	75 15                	jne    c0027777 <signal+0x4d>
c0027762:	83 ec 0c             	sub    $0xc,%esp
c0027765:	ff 75 08             	pushl  0x8(%ebp)
c0027768:	e8 89 fc ff ff       	call   c00273f6 <intq_empty>
c002776d:	83 c4 10             	add    $0x10,%esp
c0027770:	83 f0 01             	xor    $0x1,%eax
c0027773:	84 c0                	test   %al,%al
c0027775:	75 3e                	jne    c00277b5 <signal+0x8b>
c0027777:	8b 45 08             	mov    0x8(%ebp),%eax
c002777a:	83 c0 24             	add    $0x24,%eax
c002777d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0027780:	75 15                	jne    c0027797 <signal+0x6d>
c0027782:	83 ec 0c             	sub    $0xc,%esp
c0027785:	ff 75 08             	pushl  0x8(%ebp)
c0027788:	e8 a9 fc ff ff       	call   c0027436 <intq_full>
c002778d:	83 c4 10             	add    $0x10,%esp
c0027790:	83 f0 01             	xor    $0x1,%eax
c0027793:	84 c0                	test   %al,%al
c0027795:	75 1e                	jne    c00277b5 <signal+0x8b>
c0027797:	83 ec 0c             	sub    $0xc,%esp
c002779a:	68 ec 5f 03 c0       	push   $0xc0035fec
c002779f:	68 52 5f 03 c0       	push   $0xc0035f52
c00277a4:	68 80 60 03 c0       	push   $0xc0036080
c00277a9:	6a 6b                	push   $0x6b
c00277ab:	68 69 5f 03 c0       	push   $0xc0035f69
c00277b0:	e8 dc 2d 00 00       	call   c002a591 <debug_panic>
c00277b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00277b8:	8b 00                	mov    (%eax),%eax
c00277ba:	85 c0                	test   %eax,%eax
c00277bc:	74 1a                	je     c00277d8 <signal+0xae>
c00277be:	8b 45 0c             	mov    0xc(%ebp),%eax
c00277c1:	8b 00                	mov    (%eax),%eax
c00277c3:	83 ec 0c             	sub    $0xc,%esp
c00277c6:	50                   	push   %eax
c00277c7:	e8 6a 96 ff ff       	call   c0020e36 <thread_unblock>
c00277cc:	83 c4 10             	add    $0x10,%esp
c00277cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c00277d2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c00277d8:	90                   	nop
c00277d9:	c9                   	leave  
c00277da:	c3                   	ret    

c00277db <inb>:
c00277db:	55                   	push   %ebp
c00277dc:	89 e5                	mov    %esp,%ebp
c00277de:	83 ec 14             	sub    $0x14,%esp
c00277e1:	8b 45 08             	mov    0x8(%ebp),%eax
c00277e4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c00277e8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00277ec:	89 c2                	mov    %eax,%edx
c00277ee:	ec                   	in     (%dx),%al
c00277ef:	88 45 ff             	mov    %al,-0x1(%ebp)
c00277f2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00277f6:	c9                   	leave  
c00277f7:	c3                   	ret    

c00277f8 <outb>:
c00277f8:	55                   	push   %ebp
c00277f9:	89 e5                	mov    %esp,%ebp
c00277fb:	83 ec 08             	sub    $0x8,%esp
c00277fe:	8b 55 08             	mov    0x8(%ebp),%edx
c0027801:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027804:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0027808:	88 45 f8             	mov    %al,-0x8(%ebp)
c002780b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c002780f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0027813:	ee                   	out    %al,(%dx)
c0027814:	90                   	nop
c0027815:	c9                   	leave  
c0027816:	c3                   	ret    

c0027817 <rtc_get_time>:
c0027817:	55                   	push   %ebp
c0027818:	89 e5                	mov    %esp,%ebp
c002781a:	83 ec 28             	sub    $0x28,%esp
c002781d:	83 ec 0c             	sub    $0xc,%esp
c0027820:	6a 00                	push   $0x0
c0027822:	e8 ae 01 00 00       	call   c00279d5 <cmos_read>
c0027827:	83 c4 10             	add    $0x10,%esp
c002782a:	0f b6 c0             	movzbl %al,%eax
c002782d:	83 ec 0c             	sub    $0xc,%esp
c0027830:	50                   	push   %eax
c0027831:	e8 73 01 00 00       	call   c00279a9 <bcd_to_bin>
c0027836:	83 c4 10             	add    $0x10,%esp
c0027839:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002783c:	83 ec 0c             	sub    $0xc,%esp
c002783f:	6a 02                	push   $0x2
c0027841:	e8 8f 01 00 00       	call   c00279d5 <cmos_read>
c0027846:	83 c4 10             	add    $0x10,%esp
c0027849:	0f b6 c0             	movzbl %al,%eax
c002784c:	83 ec 0c             	sub    $0xc,%esp
c002784f:	50                   	push   %eax
c0027850:	e8 54 01 00 00       	call   c00279a9 <bcd_to_bin>
c0027855:	83 c4 10             	add    $0x10,%esp
c0027858:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002785b:	83 ec 0c             	sub    $0xc,%esp
c002785e:	6a 04                	push   $0x4
c0027860:	e8 70 01 00 00       	call   c00279d5 <cmos_read>
c0027865:	83 c4 10             	add    $0x10,%esp
c0027868:	0f b6 c0             	movzbl %al,%eax
c002786b:	83 ec 0c             	sub    $0xc,%esp
c002786e:	50                   	push   %eax
c002786f:	e8 35 01 00 00       	call   c00279a9 <bcd_to_bin>
c0027874:	83 c4 10             	add    $0x10,%esp
c0027877:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002787a:	83 ec 0c             	sub    $0xc,%esp
c002787d:	6a 07                	push   $0x7
c002787f:	e8 51 01 00 00       	call   c00279d5 <cmos_read>
c0027884:	83 c4 10             	add    $0x10,%esp
c0027887:	0f b6 c0             	movzbl %al,%eax
c002788a:	83 ec 0c             	sub    $0xc,%esp
c002788d:	50                   	push   %eax
c002788e:	e8 16 01 00 00       	call   c00279a9 <bcd_to_bin>
c0027893:	83 c4 10             	add    $0x10,%esp
c0027896:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0027899:	83 ec 0c             	sub    $0xc,%esp
c002789c:	6a 08                	push   $0x8
c002789e:	e8 32 01 00 00       	call   c00279d5 <cmos_read>
c00278a3:	83 c4 10             	add    $0x10,%esp
c00278a6:	0f b6 c0             	movzbl %al,%eax
c00278a9:	83 ec 0c             	sub    $0xc,%esp
c00278ac:	50                   	push   %eax
c00278ad:	e8 f7 00 00 00       	call   c00279a9 <bcd_to_bin>
c00278b2:	83 c4 10             	add    $0x10,%esp
c00278b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00278b8:	83 ec 0c             	sub    $0xc,%esp
c00278bb:	6a 09                	push   $0x9
c00278bd:	e8 13 01 00 00       	call   c00279d5 <cmos_read>
c00278c2:	83 c4 10             	add    $0x10,%esp
c00278c5:	0f b6 c0             	movzbl %al,%eax
c00278c8:	83 ec 0c             	sub    $0xc,%esp
c00278cb:	50                   	push   %eax
c00278cc:	e8 d8 00 00 00       	call   c00279a9 <bcd_to_bin>
c00278d1:	83 c4 10             	add    $0x10,%esp
c00278d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00278d7:	83 ec 0c             	sub    $0xc,%esp
c00278da:	6a 00                	push   $0x0
c00278dc:	e8 f4 00 00 00       	call   c00279d5 <cmos_read>
c00278e1:	83 c4 10             	add    $0x10,%esp
c00278e4:	0f b6 c0             	movzbl %al,%eax
c00278e7:	83 ec 0c             	sub    $0xc,%esp
c00278ea:	50                   	push   %eax
c00278eb:	e8 b9 00 00 00       	call   c00279a9 <bcd_to_bin>
c00278f0:	83 c4 10             	add    $0x10,%esp
c00278f3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c00278f6:	0f 85 21 ff ff ff    	jne    c002781d <rtc_get_time+0x6>
c00278fc:	83 7d f4 45          	cmpl   $0x45,-0xc(%ebp)
c0027900:	7f 04                	jg     c0027906 <rtc_get_time+0xef>
c0027902:	83 45 f4 64          	addl   $0x64,-0xc(%ebp)
c0027906:	83 6d f4 46          	subl   $0x46,-0xc(%ebp)
c002790a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002790d:	69 d0 6d 01 00 00    	imul   $0x16d,%eax,%edx
c0027913:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027916:	83 e8 01             	sub    $0x1,%eax
c0027919:	8d 48 03             	lea    0x3(%eax),%ecx
c002791c:	85 c0                	test   %eax,%eax
c002791e:	0f 48 c1             	cmovs  %ecx,%eax
c0027921:	c1 f8 02             	sar    $0x2,%eax
c0027924:	01 d0                	add    %edx,%eax
c0027926:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c002792c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002792f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0027936:	eb 1a                	jmp    c0027952 <rtc_get_time+0x13b>
c0027938:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002793b:	83 e8 01             	sub    $0x1,%eax
c002793e:	8b 04 85 a0 60 03 c0 	mov    -0x3ffc9f60(,%eax,4),%eax
c0027945:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c002794b:	01 45 f0             	add    %eax,-0x10(%ebp)
c002794e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0027952:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0027955:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c0027958:	7e de                	jle    c0027938 <rtc_get_time+0x121>
c002795a:	83 7d d8 02          	cmpl   $0x2,-0x28(%ebp)
c002795e:	7e 11                	jle    c0027971 <rtc_get_time+0x15a>
c0027960:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027963:	83 e0 03             	and    $0x3,%eax
c0027966:	85 c0                	test   %eax,%eax
c0027968:	75 07                	jne    c0027971 <rtc_get_time+0x15a>
c002796a:	81 45 f0 80 51 01 00 	addl   $0x15180,-0x10(%ebp)
c0027971:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0027974:	83 e8 01             	sub    $0x1,%eax
c0027977:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c002797d:	01 45 f0             	add    %eax,-0x10(%ebp)
c0027980:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0027983:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
c0027989:	01 45 f0             	add    %eax,-0x10(%ebp)
c002798c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002798f:	c1 e0 02             	shl    $0x2,%eax
c0027992:	89 c2                	mov    %eax,%edx
c0027994:	c1 e2 04             	shl    $0x4,%edx
c0027997:	29 c2                	sub    %eax,%edx
c0027999:	89 d0                	mov    %edx,%eax
c002799b:	01 45 f0             	add    %eax,-0x10(%ebp)
c002799e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00279a1:	01 45 f0             	add    %eax,-0x10(%ebp)
c00279a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00279a7:	c9                   	leave  
c00279a8:	c3                   	ret    

c00279a9 <bcd_to_bin>:
c00279a9:	55                   	push   %ebp
c00279aa:	89 e5                	mov    %esp,%ebp
c00279ac:	83 ec 04             	sub    $0x4,%esp
c00279af:	8b 45 08             	mov    0x8(%ebp),%eax
c00279b2:	88 45 fc             	mov    %al,-0x4(%ebp)
c00279b5:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00279b9:	83 e0 0f             	and    $0xf,%eax
c00279bc:	89 c1                	mov    %eax,%ecx
c00279be:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00279c2:	c0 e8 04             	shr    $0x4,%al
c00279c5:	0f b6 d0             	movzbl %al,%edx
c00279c8:	89 d0                	mov    %edx,%eax
c00279ca:	c1 e0 02             	shl    $0x2,%eax
c00279cd:	01 d0                	add    %edx,%eax
c00279cf:	01 c0                	add    %eax,%eax
c00279d1:	01 c8                	add    %ecx,%eax
c00279d3:	c9                   	leave  
c00279d4:	c3                   	ret    

c00279d5 <cmos_read>:
c00279d5:	55                   	push   %ebp
c00279d6:	89 e5                	mov    %esp,%ebp
c00279d8:	83 ec 04             	sub    $0x4,%esp
c00279db:	8b 45 08             	mov    0x8(%ebp),%eax
c00279de:	88 45 fc             	mov    %al,-0x4(%ebp)
c00279e1:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00279e5:	50                   	push   %eax
c00279e6:	6a 70                	push   $0x70
c00279e8:	e8 0b fe ff ff       	call   c00277f8 <outb>
c00279ed:	83 c4 08             	add    $0x8,%esp
c00279f0:	6a 71                	push   $0x71
c00279f2:	e8 e4 fd ff ff       	call   c00277db <inb>
c00279f7:	83 c4 04             	add    $0x4,%esp
c00279fa:	c9                   	leave  
c00279fb:	c3                   	ret    

c00279fc <inb>:
c00279fc:	55                   	push   %ebp
c00279fd:	89 e5                	mov    %esp,%ebp
c00279ff:	83 ec 14             	sub    $0x14,%esp
c0027a02:	8b 45 08             	mov    0x8(%ebp),%eax
c0027a05:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0027a09:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0027a0d:	89 c2                	mov    %eax,%edx
c0027a0f:	ec                   	in     (%dx),%al
c0027a10:	88 45 ff             	mov    %al,-0x1(%ebp)
c0027a13:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0027a17:	c9                   	leave  
c0027a18:	c3                   	ret    

c0027a19 <outb>:
c0027a19:	55                   	push   %ebp
c0027a1a:	89 e5                	mov    %esp,%ebp
c0027a1c:	83 ec 08             	sub    $0x8,%esp
c0027a1f:	8b 55 08             	mov    0x8(%ebp),%edx
c0027a22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027a25:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0027a29:	88 45 f8             	mov    %al,-0x8(%ebp)
c0027a2c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0027a30:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0027a34:	ee                   	out    %al,(%dx)
c0027a35:	90                   	nop
c0027a36:	c9                   	leave  
c0027a37:	c3                   	ret    

c0027a38 <outw>:
c0027a38:	55                   	push   %ebp
c0027a39:	89 e5                	mov    %esp,%ebp
c0027a3b:	83 ec 08             	sub    $0x8,%esp
c0027a3e:	8b 55 08             	mov    0x8(%ebp),%edx
c0027a41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027a44:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0027a48:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c0027a4c:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0027a50:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0027a54:	66 ef                	out    %ax,(%dx)
c0027a56:	90                   	nop
c0027a57:	c9                   	leave  
c0027a58:	c3                   	ret    

c0027a59 <shutdown>:
c0027a59:	55                   	push   %ebp
c0027a5a:	89 e5                	mov    %esp,%ebp
c0027a5c:	83 ec 08             	sub    $0x8,%esp
c0027a5f:	a1 d4 00 04 c0       	mov    0xc00400d4,%eax
c0027a64:	83 f8 01             	cmp    $0x1,%eax
c0027a67:	74 07                	je     c0027a70 <shutdown+0x17>
c0027a69:	83 f8 02             	cmp    $0x2,%eax
c0027a6c:	74 07                	je     c0027a75 <shutdown+0x1c>
c0027a6e:	eb 0a                	jmp    c0027a7a <shutdown+0x21>
c0027a70:	e8 9d 00 00 00       	call   c0027b12 <shutdown_power_off>
c0027a75:	e8 11 00 00 00       	call   c0027a8b <shutdown_reboot>
c0027a7a:	90                   	nop
c0027a7b:	c9                   	leave  
c0027a7c:	c3                   	ret    

c0027a7d <shutdown_configure>:
c0027a7d:	55                   	push   %ebp
c0027a7e:	89 e5                	mov    %esp,%ebp
c0027a80:	8b 45 08             	mov    0x8(%ebp),%eax
c0027a83:	a3 d4 00 04 c0       	mov    %eax,0xc00400d4
c0027a88:	90                   	nop
c0027a89:	5d                   	pop    %ebp
c0027a8a:	c3                   	ret    

c0027a8b <shutdown_reboot>:
c0027a8b:	55                   	push   %ebp
c0027a8c:	89 e5                	mov    %esp,%ebp
c0027a8e:	83 ec 18             	sub    $0x18,%esp
c0027a91:	83 ec 0c             	sub    $0xc,%esp
c0027a94:	68 d0 60 03 c0       	push   $0xc00360d0
c0027a99:	e8 ba 4d 00 00       	call   c002c858 <puts>
c0027a9e:	83 c4 10             	add    $0x10,%esp
c0027aa1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0027aa8:	eb 2a                	jmp    c0027ad4 <shutdown_reboot+0x49>
c0027aaa:	83 ec 0c             	sub    $0xc,%esp
c0027aad:	6a 64                	push   $0x64
c0027aaf:	e8 48 ff ff ff       	call   c00279fc <inb>
c0027ab4:	83 c4 10             	add    $0x10,%esp
c0027ab7:	0f b6 c0             	movzbl %al,%eax
c0027aba:	83 e0 02             	and    $0x2,%eax
c0027abd:	85 c0                	test   %eax,%eax
c0027abf:	74 1e                	je     c0027adf <shutdown_reboot+0x54>
c0027ac1:	83 ec 08             	sub    $0x8,%esp
c0027ac4:	6a 00                	push   $0x0
c0027ac6:	6a 02                	push   $0x2
c0027ac8:	e8 9e d0 ff ff       	call   c0024b6b <timer_udelay>
c0027acd:	83 c4 10             	add    $0x10,%esp
c0027ad0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0027ad4:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c0027adb:	7e cd                	jle    c0027aaa <shutdown_reboot+0x1f>
c0027add:	eb 01                	jmp    c0027ae0 <shutdown_reboot+0x55>
c0027adf:	90                   	nop
c0027ae0:	83 ec 08             	sub    $0x8,%esp
c0027ae3:	6a 00                	push   $0x0
c0027ae5:	6a 32                	push   $0x32
c0027ae7:	e8 7f d0 ff ff       	call   c0024b6b <timer_udelay>
c0027aec:	83 c4 10             	add    $0x10,%esp
c0027aef:	83 ec 08             	sub    $0x8,%esp
c0027af2:	68 fe 00 00 00       	push   $0xfe
c0027af7:	6a 64                	push   $0x64
c0027af9:	e8 1b ff ff ff       	call   c0027a19 <outb>
c0027afe:	83 c4 10             	add    $0x10,%esp
c0027b01:	83 ec 08             	sub    $0x8,%esp
c0027b04:	6a 00                	push   $0x0
c0027b06:	6a 32                	push   $0x32
c0027b08:	e8 5e d0 ff ff       	call   c0024b6b <timer_udelay>
c0027b0d:	83 c4 10             	add    $0x10,%esp
c0027b10:	eb 8f                	jmp    c0027aa1 <shutdown_reboot+0x16>

c0027b12 <shutdown_power_off>:
c0027b12:	55                   	push   %ebp
c0027b13:	89 e5                	mov    %esp,%ebp
c0027b15:	83 ec 18             	sub    $0x18,%esp
c0027b18:	c7 45 eb 53 68 75 74 	movl   $0x74756853,-0x15(%ebp)
c0027b1f:	c7 45 ef 64 6f 77 6e 	movl   $0x6e776f64,-0x11(%ebp)
c0027b26:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
c0027b2a:	e8 10 85 00 00       	call   c003003f <filesys_done>
c0027b2f:	e8 80 00 00 00       	call   c0027bb4 <print_stats>
c0027b34:	83 ec 0c             	sub    $0xc,%esp
c0027b37:	68 dd 60 03 c0       	push   $0xc00360dd
c0027b3c:	e8 17 4d 00 00       	call   c002c858 <puts>
c0027b41:	83 c4 10             	add    $0x10,%esp
c0027b44:	e8 6d dd ff ff       	call   c00258b6 <serial_flush>
c0027b49:	83 ec 08             	sub    $0x8,%esp
c0027b4c:	68 00 20 00 00       	push   $0x2000
c0027b51:	68 04 b0 00 00       	push   $0xb004
c0027b56:	e8 dd fe ff ff       	call   c0027a38 <outw>
c0027b5b:	83 c4 10             	add    $0x10,%esp
c0027b5e:	8d 45 eb             	lea    -0x15(%ebp),%eax
c0027b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027b64:	eb 1e                	jmp    c0027b84 <shutdown_power_off+0x72>
c0027b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027b69:	0f b6 00             	movzbl (%eax),%eax
c0027b6c:	0f b6 c0             	movzbl %al,%eax
c0027b6f:	83 ec 08             	sub    $0x8,%esp
c0027b72:	50                   	push   %eax
c0027b73:	68 00 89 00 00       	push   $0x8900
c0027b78:	e8 9c fe ff ff       	call   c0027a19 <outb>
c0027b7d:	83 c4 10             	add    $0x10,%esp
c0027b80:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0027b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027b87:	0f b6 00             	movzbl (%eax),%eax
c0027b8a:	84 c0                	test   %al,%al
c0027b8c:	75 d8                	jne    c0027b66 <shutdown_power_off+0x54>
c0027b8e:	83 ec 08             	sub    $0x8,%esp
c0027b91:	6a 31                	push   $0x31
c0027b93:	68 01 05 00 00       	push   $0x501
c0027b98:	e8 7c fe ff ff       	call   c0027a19 <outb>
c0027b9d:	83 c4 10             	add    $0x10,%esp
c0027ba0:	fa                   	cli    
c0027ba1:	f4                   	hlt    
c0027ba2:	83 ec 0c             	sub    $0xc,%esp
c0027ba5:	68 ed 60 03 c0       	push   $0xc00360ed
c0027baa:	e8 a9 4c 00 00       	call   c002c858 <puts>
c0027baf:	83 c4 10             	add    $0x10,%esp
c0027bb2:	eb fe                	jmp    c0027bb2 <shutdown_power_off+0xa0>

c0027bb4 <print_stats>:
c0027bb4:	55                   	push   %ebp
c0027bb5:	89 e5                	mov    %esp,%ebp
c0027bb7:	83 ec 08             	sub    $0x8,%esp
c0027bba:	e8 02 d0 ff ff       	call   c0024bc1 <timer_print_stats>
c0027bbf:	e8 ab 90 ff ff       	call   c0020c6f <thread_print_stats>
c0027bc4:	e8 5a e2 ff ff       	call   c0025e23 <block_print_stats>
c0027bc9:	e8 54 4b 00 00       	call   c002c722 <console_print_stats>
c0027bce:	e8 eb d3 ff ff       	call   c0024fbe <kbd_print_stats>
c0027bd3:	e8 26 66 00 00       	call   c002e1fe <exception_print_stats>
c0027bd8:	90                   	nop
c0027bd9:	c9                   	leave  
c0027bda:	c3                   	ret    

c0027bdb <inb>:
c0027bdb:	55                   	push   %ebp
c0027bdc:	89 e5                	mov    %esp,%ebp
c0027bde:	83 ec 14             	sub    $0x14,%esp
c0027be1:	8b 45 08             	mov    0x8(%ebp),%eax
c0027be4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0027be8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0027bec:	89 c2                	mov    %eax,%edx
c0027bee:	ec                   	in     (%dx),%al
c0027bef:	88 45 ff             	mov    %al,-0x1(%ebp)
c0027bf2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0027bf6:	c9                   	leave  
c0027bf7:	c3                   	ret    

c0027bf8 <outb>:
c0027bf8:	55                   	push   %ebp
c0027bf9:	89 e5                	mov    %esp,%ebp
c0027bfb:	83 ec 08             	sub    $0x8,%esp
c0027bfe:	8b 55 08             	mov    0x8(%ebp),%edx
c0027c01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027c04:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0027c08:	88 45 f8             	mov    %al,-0x8(%ebp)
c0027c0b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0027c0f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0027c13:	ee                   	out    %al,(%dx)
c0027c14:	90                   	nop
c0027c15:	c9                   	leave  
c0027c16:	c3                   	ret    

c0027c17 <speaker_on>:
c0027c17:	55                   	push   %ebp
c0027c18:	89 e5                	mov    %esp,%ebp
c0027c1a:	83 ec 18             	sub    $0x18,%esp
c0027c1d:	83 7d 08 13          	cmpl   $0x13,0x8(%ebp)
c0027c21:	7e 54                	jle    c0027c77 <speaker_on+0x60>
c0027c23:	81 7d 08 20 4e 00 00 	cmpl   $0x4e20,0x8(%ebp)
c0027c2a:	7f 4b                	jg     c0027c77 <speaker_on+0x60>
c0027c2c:	e8 bb a1 ff ff       	call   c0021dec <intr_disable>
c0027c31:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027c34:	83 ec 04             	sub    $0x4,%esp
c0027c37:	ff 75 08             	pushl  0x8(%ebp)
c0027c3a:	6a 03                	push   $0x3
c0027c3c:	6a 02                	push   $0x2
c0027c3e:	e8 09 cb ff ff       	call   c002474c <pit_configure_channel>
c0027c43:	83 c4 10             	add    $0x10,%esp
c0027c46:	83 ec 0c             	sub    $0xc,%esp
c0027c49:	6a 61                	push   $0x61
c0027c4b:	e8 8b ff ff ff       	call   c0027bdb <inb>
c0027c50:	83 c4 10             	add    $0x10,%esp
c0027c53:	83 c8 03             	or     $0x3,%eax
c0027c56:	0f b6 c0             	movzbl %al,%eax
c0027c59:	83 ec 08             	sub    $0x8,%esp
c0027c5c:	50                   	push   %eax
c0027c5d:	6a 61                	push   $0x61
c0027c5f:	e8 94 ff ff ff       	call   c0027bf8 <outb>
c0027c64:	83 c4 10             	add    $0x10,%esp
c0027c67:	83 ec 0c             	sub    $0xc,%esp
c0027c6a:	ff 75 f4             	pushl  -0xc(%ebp)
c0027c6d:	e8 22 a1 ff ff       	call   c0021d94 <intr_set_level>
c0027c72:	83 c4 10             	add    $0x10,%esp
c0027c75:	eb 05                	jmp    c0027c7c <speaker_on+0x65>
c0027c77:	e8 03 00 00 00       	call   c0027c7f <speaker_off>
c0027c7c:	90                   	nop
c0027c7d:	c9                   	leave  
c0027c7e:	c3                   	ret    

c0027c7f <speaker_off>:
c0027c7f:	55                   	push   %ebp
c0027c80:	89 e5                	mov    %esp,%ebp
c0027c82:	83 ec 18             	sub    $0x18,%esp
c0027c85:	e8 62 a1 ff ff       	call   c0021dec <intr_disable>
c0027c8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027c8d:	83 ec 0c             	sub    $0xc,%esp
c0027c90:	6a 61                	push   $0x61
c0027c92:	e8 44 ff ff ff       	call   c0027bdb <inb>
c0027c97:	83 c4 10             	add    $0x10,%esp
c0027c9a:	0f b6 c0             	movzbl %al,%eax
c0027c9d:	25 fc 00 00 00       	and    $0xfc,%eax
c0027ca2:	83 ec 08             	sub    $0x8,%esp
c0027ca5:	50                   	push   %eax
c0027ca6:	6a 61                	push   $0x61
c0027ca8:	e8 4b ff ff ff       	call   c0027bf8 <outb>
c0027cad:	83 c4 10             	add    $0x10,%esp
c0027cb0:	83 ec 0c             	sub    $0xc,%esp
c0027cb3:	ff 75 f4             	pushl  -0xc(%ebp)
c0027cb6:	e8 d9 a0 ff ff       	call   c0021d94 <intr_set_level>
c0027cbb:	83 c4 10             	add    $0x10,%esp
c0027cbe:	90                   	nop
c0027cbf:	c9                   	leave  
c0027cc0:	c3                   	ret    

c0027cc1 <speaker_beep>:
c0027cc1:	55                   	push   %ebp
c0027cc2:	89 e5                	mov    %esp,%ebp
c0027cc4:	83 ec 08             	sub    $0x8,%esp
c0027cc7:	e8 ab a0 ff ff       	call   c0021d77 <intr_get_level>
c0027ccc:	83 f8 01             	cmp    $0x1,%eax
c0027ccf:	75 27                	jne    c0027cf8 <speaker_beep+0x37>
c0027cd1:	83 ec 0c             	sub    $0xc,%esp
c0027cd4:	68 b8 01 00 00       	push   $0x1b8
c0027cd9:	e8 39 ff ff ff       	call   c0027c17 <speaker_on>
c0027cde:	83 c4 10             	add    $0x10,%esp
c0027ce1:	83 ec 08             	sub    $0x8,%esp
c0027ce4:	6a 00                	push   $0x0
c0027ce6:	68 fa 00 00 00       	push   $0xfa
c0027ceb:	e8 cf cd ff ff       	call   c0024abf <timer_msleep>
c0027cf0:	83 c4 10             	add    $0x10,%esp
c0027cf3:	e8 87 ff ff ff       	call   c0027c7f <speaker_off>
c0027cf8:	90                   	nop
c0027cf9:	c9                   	leave  
c0027cfa:	c3                   	ret    

c0027cfb <debug_backtrace>:
c0027cfb:	55                   	push   %ebp
c0027cfc:	89 e5                	mov    %esp,%ebp
c0027cfe:	83 ec 18             	sub    $0x18,%esp
c0027d01:	8b 45 04             	mov    0x4(%ebp),%eax
c0027d04:	83 ec 08             	sub    $0x8,%esp
c0027d07:	50                   	push   %eax
c0027d08:	68 00 61 03 c0       	push   $0xc0036100
c0027d0d:	e8 1e 03 00 00       	call   c0028030 <printf>
c0027d12:	83 c4 10             	add    $0x10,%esp
c0027d15:	8b 45 00             	mov    0x0(%ebp),%eax
c0027d18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027d1b:	eb 21                	jmp    c0027d3e <debug_backtrace+0x43>
c0027d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027d20:	83 c0 04             	add    $0x4,%eax
c0027d23:	8b 00                	mov    (%eax),%eax
c0027d25:	83 ec 08             	sub    $0x8,%esp
c0027d28:	50                   	push   %eax
c0027d29:	68 0f 61 03 c0       	push   $0xc003610f
c0027d2e:	e8 fd 02 00 00       	call   c0028030 <printf>
c0027d33:	83 c4 10             	add    $0x10,%esp
c0027d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027d39:	8b 00                	mov    (%eax),%eax
c0027d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027d41:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0027d46:	76 09                	jbe    c0027d51 <debug_backtrace+0x56>
c0027d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027d4b:	8b 00                	mov    (%eax),%eax
c0027d4d:	85 c0                	test   %eax,%eax
c0027d4f:	75 cc                	jne    c0027d1d <debug_backtrace+0x22>
c0027d51:	83 ec 0c             	sub    $0xc,%esp
c0027d54:	68 13 61 03 c0       	push   $0xc0036113
c0027d59:	e8 fa 4a 00 00       	call   c002c858 <puts>
c0027d5e:	83 c4 10             	add    $0x10,%esp
c0027d61:	0f b6 05 d8 00 04 c0 	movzbl 0xc00400d8,%eax
c0027d68:	83 f0 01             	xor    $0x1,%eax
c0027d6b:	84 c0                	test   %al,%al
c0027d6d:	74 17                	je     c0027d86 <debug_backtrace+0x8b>
c0027d6f:	c6 05 d8 00 04 c0 01 	movb   $0x1,0xc00400d8
c0027d76:	83 ec 0c             	sub    $0xc,%esp
c0027d79:	68 18 61 03 c0       	push   $0xc0036118
c0027d7e:	e8 d5 4a 00 00       	call   c002c858 <puts>
c0027d83:	83 c4 10             	add    $0x10,%esp
c0027d86:	90                   	nop
c0027d87:	c9                   	leave  
c0027d88:	c3                   	ret    

c0027d89 <swap_byte>:
c0027d89:	55                   	push   %ebp
c0027d8a:	89 e5                	mov    %esp,%ebp
c0027d8c:	83 ec 10             	sub    $0x10,%esp
c0027d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0027d92:	0f b6 00             	movzbl (%eax),%eax
c0027d95:	88 45 ff             	mov    %al,-0x1(%ebp)
c0027d98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027d9b:	0f b6 10             	movzbl (%eax),%edx
c0027d9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0027da1:	88 10                	mov    %dl,(%eax)
c0027da3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027da6:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0027daa:	88 10                	mov    %dl,(%eax)
c0027dac:	90                   	nop
c0027dad:	c9                   	leave  
c0027dae:	c3                   	ret    

c0027daf <random_init>:
c0027daf:	55                   	push   %ebp
c0027db0:	89 e5                	mov    %esp,%ebp
c0027db2:	83 ec 10             	sub    $0x10,%esp
c0027db5:	8d 45 08             	lea    0x8(%ebp),%eax
c0027db8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027dbb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0027dc2:	eb 13                	jmp    c0027dd7 <random_init+0x28>
c0027dc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027dc7:	89 c2                	mov    %eax,%edx
c0027dc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027dcc:	05 e0 00 04 c0       	add    $0xc00400e0,%eax
c0027dd1:	88 10                	mov    %dl,(%eax)
c0027dd3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0027dd7:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c0027dde:	7e e4                	jle    c0027dc4 <random_init+0x15>
c0027de0:	c6 45 fb 00          	movb   $0x0,-0x5(%ebp)
c0027de4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0027deb:	eb 40                	jmp    c0027e2d <random_init+0x7e>
c0027ded:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027df0:	05 e0 00 04 c0       	add    $0xc00400e0,%eax
c0027df5:	0f b6 10             	movzbl (%eax),%edx
c0027df8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027dfb:	83 e0 03             	and    $0x3,%eax
c0027dfe:	89 c1                	mov    %eax,%ecx
c0027e00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027e03:	01 c8                	add    %ecx,%eax
c0027e05:	0f b6 00             	movzbl (%eax),%eax
c0027e08:	01 d0                	add    %edx,%eax
c0027e0a:	00 45 fb             	add    %al,-0x5(%ebp)
c0027e0d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0027e11:	8d 90 e0 00 04 c0    	lea    -0x3ffbff20(%eax),%edx
c0027e17:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027e1a:	05 e0 00 04 c0       	add    $0xc00400e0,%eax
c0027e1f:	52                   	push   %edx
c0027e20:	50                   	push   %eax
c0027e21:	e8 63 ff ff ff       	call   c0027d89 <swap_byte>
c0027e26:	83 c4 08             	add    $0x8,%esp
c0027e29:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0027e2d:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c0027e34:	7e b7                	jle    c0027ded <random_init+0x3e>
c0027e36:	c6 05 e1 01 04 c0 00 	movb   $0x0,0xc00401e1
c0027e3d:	0f b6 05 e1 01 04 c0 	movzbl 0xc00401e1,%eax
c0027e44:	a2 e0 01 04 c0       	mov    %al,0xc00401e0
c0027e49:	c6 05 e2 01 04 c0 01 	movb   $0x1,0xc00401e2
c0027e50:	90                   	nop
c0027e51:	c9                   	leave  
c0027e52:	c3                   	ret    

c0027e53 <random_bytes>:
c0027e53:	55                   	push   %ebp
c0027e54:	89 e5                	mov    %esp,%ebp
c0027e56:	83 ec 10             	sub    $0x10,%esp
c0027e59:	0f b6 05 e2 01 04 c0 	movzbl 0xc00401e2,%eax
c0027e60:	83 f0 01             	xor    $0x1,%eax
c0027e63:	84 c0                	test   %al,%al
c0027e65:	74 0a                	je     c0027e71 <random_bytes+0x1e>
c0027e67:	6a 00                	push   $0x0
c0027e69:	e8 41 ff ff ff       	call   c0027daf <random_init>
c0027e6e:	83 c4 04             	add    $0x4,%esp
c0027e71:	8b 45 08             	mov    0x8(%ebp),%eax
c0027e74:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0027e77:	e9 92 00 00 00       	jmp    c0027f0e <random_bytes+0xbb>
c0027e7c:	0f b6 05 e0 01 04 c0 	movzbl 0xc00401e0,%eax
c0027e83:	83 c0 01             	add    $0x1,%eax
c0027e86:	a2 e0 01 04 c0       	mov    %al,0xc00401e0
c0027e8b:	0f b6 05 e0 01 04 c0 	movzbl 0xc00401e0,%eax
c0027e92:	0f b6 c0             	movzbl %al,%eax
c0027e95:	0f b6 90 e0 00 04 c0 	movzbl -0x3ffbff20(%eax),%edx
c0027e9c:	0f b6 05 e1 01 04 c0 	movzbl 0xc00401e1,%eax
c0027ea3:	01 d0                	add    %edx,%eax
c0027ea5:	a2 e1 01 04 c0       	mov    %al,0xc00401e1
c0027eaa:	0f b6 05 e1 01 04 c0 	movzbl 0xc00401e1,%eax
c0027eb1:	0f b6 c0             	movzbl %al,%eax
c0027eb4:	8d 90 e0 00 04 c0    	lea    -0x3ffbff20(%eax),%edx
c0027eba:	0f b6 05 e0 01 04 c0 	movzbl 0xc00401e0,%eax
c0027ec1:	0f b6 c0             	movzbl %al,%eax
c0027ec4:	05 e0 00 04 c0       	add    $0xc00400e0,%eax
c0027ec9:	52                   	push   %edx
c0027eca:	50                   	push   %eax
c0027ecb:	e8 b9 fe ff ff       	call   c0027d89 <swap_byte>
c0027ed0:	83 c4 08             	add    $0x8,%esp
c0027ed3:	0f b6 05 e0 01 04 c0 	movzbl 0xc00401e0,%eax
c0027eda:	0f b6 c0             	movzbl %al,%eax
c0027edd:	0f b6 90 e0 00 04 c0 	movzbl -0x3ffbff20(%eax),%edx
c0027ee4:	0f b6 05 e1 01 04 c0 	movzbl 0xc00401e1,%eax
c0027eeb:	0f b6 c0             	movzbl %al,%eax
c0027eee:	0f b6 80 e0 00 04 c0 	movzbl -0x3ffbff20(%eax),%eax
c0027ef5:	01 d0                	add    %edx,%eax
c0027ef7:	88 45 fb             	mov    %al,-0x5(%ebp)
c0027efa:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0027efe:	0f b6 90 e0 00 04 c0 	movzbl -0x3ffbff20(%eax),%edx
c0027f05:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027f08:	88 10                	mov    %dl,(%eax)
c0027f0a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0027f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027f11:	8d 50 ff             	lea    -0x1(%eax),%edx
c0027f14:	89 55 0c             	mov    %edx,0xc(%ebp)
c0027f17:	85 c0                	test   %eax,%eax
c0027f19:	0f 85 5d ff ff ff    	jne    c0027e7c <random_bytes+0x29>
c0027f1f:	90                   	nop
c0027f20:	c9                   	leave  
c0027f21:	c3                   	ret    

c0027f22 <random_ulong>:
c0027f22:	55                   	push   %ebp
c0027f23:	89 e5                	mov    %esp,%ebp
c0027f25:	83 ec 10             	sub    $0x10,%esp
c0027f28:	6a 04                	push   $0x4
c0027f2a:	8d 45 fc             	lea    -0x4(%ebp),%eax
c0027f2d:	50                   	push   %eax
c0027f2e:	e8 20 ff ff ff       	call   c0027e53 <random_bytes>
c0027f33:	83 c4 08             	add    $0x8,%esp
c0027f36:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027f39:	c9                   	leave  
c0027f3a:	c3                   	ret    

c0027f3b <isdigit>:
c0027f3b:	55                   	push   %ebp
c0027f3c:	89 e5                	mov    %esp,%ebp
c0027f3e:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0027f42:	7e 0d                	jle    c0027f51 <isdigit+0x16>
c0027f44:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0027f48:	7f 07                	jg     c0027f51 <isdigit+0x16>
c0027f4a:	b8 01 00 00 00       	mov    $0x1,%eax
c0027f4f:	eb 05                	jmp    c0027f56 <isdigit+0x1b>
c0027f51:	b8 00 00 00 00       	mov    $0x0,%eax
c0027f56:	5d                   	pop    %ebp
c0027f57:	c3                   	ret    

c0027f58 <isprint>:
c0027f58:	55                   	push   %ebp
c0027f59:	89 e5                	mov    %esp,%ebp
c0027f5b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0027f5f:	7e 0d                	jle    c0027f6e <isprint+0x16>
c0027f61:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c0027f65:	7f 07                	jg     c0027f6e <isprint+0x16>
c0027f67:	b8 01 00 00 00       	mov    $0x1,%eax
c0027f6c:	eb 05                	jmp    c0027f73 <isprint+0x1b>
c0027f6e:	b8 00 00 00 00       	mov    $0x0,%eax
c0027f73:	5d                   	pop    %ebp
c0027f74:	c3                   	ret    

c0027f75 <vsnprintf>:
c0027f75:	55                   	push   %ebp
c0027f76:	89 e5                	mov    %esp,%ebp
c0027f78:	83 ec 18             	sub    $0x18,%esp
c0027f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0027f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0027f81:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0027f88:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0027f8c:	74 08                	je     c0027f96 <vsnprintf+0x21>
c0027f8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027f91:	83 e8 01             	sub    $0x1,%eax
c0027f94:	eb 05                	jmp    c0027f9b <vsnprintf+0x26>
c0027f96:	b8 00 00 00 00       	mov    $0x0,%eax
c0027f9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027f9e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0027fa1:	50                   	push   %eax
c0027fa2:	68 c6 7f 02 c0       	push   $0xc0027fc6
c0027fa7:	ff 75 14             	pushl  0x14(%ebp)
c0027faa:	ff 75 10             	pushl  0x10(%ebp)
c0027fad:	e8 a4 00 00 00       	call   c0028056 <__vprintf>
c0027fb2:	83 c4 10             	add    $0x10,%esp
c0027fb5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0027fb9:	74 06                	je     c0027fc1 <vsnprintf+0x4c>
c0027fbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0027fbe:	c6 00 00             	movb   $0x0,(%eax)
c0027fc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0027fc4:	c9                   	leave  
c0027fc5:	c3                   	ret    

c0027fc6 <vsnprintf_helper>:
c0027fc6:	55                   	push   %ebp
c0027fc7:	89 e5                	mov    %esp,%ebp
c0027fc9:	83 ec 14             	sub    $0x14,%esp
c0027fcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0027fcf:	88 45 ec             	mov    %al,-0x14(%ebp)
c0027fd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027fd5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0027fd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027fdb:	8b 40 04             	mov    0x4(%eax),%eax
c0027fde:	8d 48 01             	lea    0x1(%eax),%ecx
c0027fe1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0027fe4:	89 4a 04             	mov    %ecx,0x4(%edx)
c0027fe7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0027fea:	8b 52 08             	mov    0x8(%edx),%edx
c0027fed:	39 d0                	cmp    %edx,%eax
c0027fef:	7d 13                	jge    c0028004 <vsnprintf_helper+0x3e>
c0027ff1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027ff4:	8b 00                	mov    (%eax),%eax
c0027ff6:	8d 48 01             	lea    0x1(%eax),%ecx
c0027ff9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0027ffc:	89 0a                	mov    %ecx,(%edx)
c0027ffe:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
c0028002:	88 10                	mov    %dl,(%eax)
c0028004:	90                   	nop
c0028005:	c9                   	leave  
c0028006:	c3                   	ret    

c0028007 <snprintf>:
c0028007:	55                   	push   %ebp
c0028008:	89 e5                	mov    %esp,%ebp
c002800a:	83 ec 18             	sub    $0x18,%esp
c002800d:	8d 45 14             	lea    0x14(%ebp),%eax
c0028010:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028013:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028016:	50                   	push   %eax
c0028017:	ff 75 10             	pushl  0x10(%ebp)
c002801a:	ff 75 0c             	pushl  0xc(%ebp)
c002801d:	ff 75 08             	pushl  0x8(%ebp)
c0028020:	e8 50 ff ff ff       	call   c0027f75 <vsnprintf>
c0028025:	83 c4 10             	add    $0x10,%esp
c0028028:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002802b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002802e:	c9                   	leave  
c002802f:	c3                   	ret    

c0028030 <printf>:
c0028030:	55                   	push   %ebp
c0028031:	89 e5                	mov    %esp,%ebp
c0028033:	83 ec 18             	sub    $0x18,%esp
c0028036:	8d 45 0c             	lea    0xc(%ebp),%eax
c0028039:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002803c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002803f:	83 ec 08             	sub    $0x8,%esp
c0028042:	50                   	push   %eax
c0028043:	ff 75 08             	pushl  0x8(%ebp)
c0028046:	e8 da 47 00 00       	call   c002c825 <vprintf>
c002804b:	83 c4 10             	add    $0x10,%esp
c002804e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028051:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028054:	c9                   	leave  
c0028055:	c3                   	ret    

c0028056 <__vprintf>:
c0028056:	55                   	push   %ebp
c0028057:	89 e5                	mov    %esp,%ebp
c0028059:	57                   	push   %edi
c002805a:	56                   	push   %esi
c002805b:	53                   	push   %ebx
c002805c:	83 ec 3c             	sub    $0x3c,%esp
c002805f:	e9 45 04 00 00       	jmp    c00284a9 <__vprintf+0x453>
c0028064:	8b 45 08             	mov    0x8(%ebp),%eax
c0028067:	0f b6 00             	movzbl (%eax),%eax
c002806a:	3c 25                	cmp    $0x25,%al
c002806c:	74 1d                	je     c002808b <__vprintf+0x35>
c002806e:	8b 45 08             	mov    0x8(%ebp),%eax
c0028071:	0f b6 00             	movzbl (%eax),%eax
c0028074:	0f be c0             	movsbl %al,%eax
c0028077:	83 ec 08             	sub    $0x8,%esp
c002807a:	ff 75 14             	pushl  0x14(%ebp)
c002807d:	50                   	push   %eax
c002807e:	8b 45 10             	mov    0x10(%ebp),%eax
c0028081:	ff d0                	call   *%eax
c0028083:	83 c4 10             	add    $0x10,%esp
c0028086:	e9 1a 04 00 00       	jmp    c00284a5 <__vprintf+0x44f>
c002808b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c002808f:	8b 45 08             	mov    0x8(%ebp),%eax
c0028092:	0f b6 00             	movzbl (%eax),%eax
c0028095:	3c 25                	cmp    $0x25,%al
c0028097:	75 15                	jne    c00280ae <__vprintf+0x58>
c0028099:	83 ec 08             	sub    $0x8,%esp
c002809c:	ff 75 14             	pushl  0x14(%ebp)
c002809f:	6a 25                	push   $0x25
c00280a1:	8b 45 10             	mov    0x10(%ebp),%eax
c00280a4:	ff d0                	call   *%eax
c00280a6:	83 c4 10             	add    $0x10,%esp
c00280a9:	e9 f7 03 00 00       	jmp    c00284a5 <__vprintf+0x44f>
c00280ae:	83 ec 04             	sub    $0x4,%esp
c00280b1:	8d 45 0c             	lea    0xc(%ebp),%eax
c00280b4:	50                   	push   %eax
c00280b5:	8d 45 bc             	lea    -0x44(%ebp),%eax
c00280b8:	50                   	push   %eax
c00280b9:	ff 75 08             	pushl  0x8(%ebp)
c00280bc:	e8 ff 03 00 00       	call   c00284c0 <parse_conversion>
c00280c1:	83 c4 10             	add    $0x10,%esp
c00280c4:	89 45 08             	mov    %eax,0x8(%ebp)
c00280c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00280ca:	0f b6 00             	movzbl (%eax),%eax
c00280cd:	0f be c0             	movsbl %al,%eax
c00280d0:	83 e8 45             	sub    $0x45,%eax
c00280d3:	83 f8 33             	cmp    $0x33,%eax
c00280d6:	0f 87 ab 03 00 00    	ja     c0028487 <__vprintf+0x431>
c00280dc:	8b 04 85 9c 62 03 c0 	mov    -0x3ffc9d64(,%eax,4),%eax
c00280e3:	ff e0                	jmp    *%eax
c00280e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00280e8:	83 f8 08             	cmp    $0x8,%eax
c00280eb:	0f 87 dd 00 00 00    	ja     c00281ce <__vprintf+0x178>
c00280f1:	8b 04 85 6c 63 03 c0 	mov    -0x3ffc9c94(,%eax,4),%eax
c00280f8:	ff e0                	jmp    *%eax
c00280fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c00280fd:	8d 50 04             	lea    0x4(%eax),%edx
c0028100:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028103:	8b 00                	mov    (%eax),%eax
c0028105:	0f be c0             	movsbl %al,%eax
c0028108:	99                   	cltd   
c0028109:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002810c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002810f:	e9 d4 00 00 00       	jmp    c00281e8 <__vprintf+0x192>
c0028114:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028117:	8d 50 04             	lea    0x4(%eax),%edx
c002811a:	89 55 0c             	mov    %edx,0xc(%ebp)
c002811d:	8b 00                	mov    (%eax),%eax
c002811f:	98                   	cwtl   
c0028120:	99                   	cltd   
c0028121:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028124:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028127:	e9 bc 00 00 00       	jmp    c00281e8 <__vprintf+0x192>
c002812c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002812f:	8d 50 04             	lea    0x4(%eax),%edx
c0028132:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028135:	8b 00                	mov    (%eax),%eax
c0028137:	99                   	cltd   
c0028138:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002813b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002813e:	e9 a5 00 00 00       	jmp    c00281e8 <__vprintf+0x192>
c0028143:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028146:	8d 50 08             	lea    0x8(%eax),%edx
c0028149:	89 55 0c             	mov    %edx,0xc(%ebp)
c002814c:	8b 50 04             	mov    0x4(%eax),%edx
c002814f:	8b 00                	mov    (%eax),%eax
c0028151:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028154:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028157:	e9 8c 00 00 00       	jmp    c00281e8 <__vprintf+0x192>
c002815c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002815f:	8d 50 04             	lea    0x4(%eax),%edx
c0028162:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028165:	8b 00                	mov    (%eax),%eax
c0028167:	99                   	cltd   
c0028168:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002816b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002816e:	eb 78                	jmp    c00281e8 <__vprintf+0x192>
c0028170:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028173:	8d 50 08             	lea    0x8(%eax),%edx
c0028176:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028179:	8b 50 04             	mov    0x4(%eax),%edx
c002817c:	8b 00                	mov    (%eax),%eax
c002817e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028181:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028184:	eb 62                	jmp    c00281e8 <__vprintf+0x192>
c0028186:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028189:	8d 50 04             	lea    0x4(%eax),%edx
c002818c:	89 55 0c             	mov    %edx,0xc(%ebp)
c002818f:	8b 00                	mov    (%eax),%eax
c0028191:	99                   	cltd   
c0028192:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028195:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028198:	eb 4e                	jmp    c00281e8 <__vprintf+0x192>
c002819a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002819d:	8d 50 04             	lea    0x4(%eax),%edx
c00281a0:	89 55 0c             	mov    %edx,0xc(%ebp)
c00281a3:	8b 00                	mov    (%eax),%eax
c00281a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00281a8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c00281af:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00281b3:	78 32                	js     c00281e7 <__vprintf+0x191>
c00281b5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00281b9:	7f 09                	jg     c00281c4 <__vprintf+0x16e>
c00281bb:	81 7d e0 ff ff ff 7f 	cmpl   $0x7fffffff,-0x20(%ebp)
c00281c2:	76 23                	jbe    c00281e7 <__vprintf+0x191>
c00281c4:	83 45 e0 00          	addl   $0x0,-0x20(%ebp)
c00281c8:	83 55 e4 ff          	adcl   $0xffffffff,-0x1c(%ebp)
c00281cc:	eb 19                	jmp    c00281e7 <__vprintf+0x191>
c00281ce:	68 34 62 03 c0       	push   $0xc0036234
c00281d3:	68 68 64 03 c0       	push   $0xc0036468
c00281d8:	68 dc 00 00 00       	push   $0xdc
c00281dd:	68 56 62 03 c0       	push   $0xc0036256
c00281e2:	e8 aa 23 00 00       	call   c002a591 <debug_panic>
c00281e7:	90                   	nop
c00281e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00281eb:	c1 e8 1f             	shr    $0x1f,%eax
c00281ee:	0f b6 c8             	movzbl %al,%ecx
c00281f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00281f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00281f7:	89 d2                	mov    %edx,%edx
c00281f9:	c1 fa 1f             	sar    $0x1f,%edx
c00281fc:	89 d0                	mov    %edx,%eax
c00281fe:	89 c7                	mov    %eax,%edi
c0028200:	33 7d e0             	xor    -0x20(%ebp),%edi
c0028203:	89 fb                	mov    %edi,%ebx
c0028205:	89 d7                	mov    %edx,%edi
c0028207:	33 7d e4             	xor    -0x1c(%ebp),%edi
c002820a:	89 fe                	mov    %edi,%esi
c002820c:	29 c3                	sub    %eax,%ebx
c002820e:	19 d6                	sbb    %edx,%esi
c0028210:	89 d8                	mov    %ebx,%eax
c0028212:	89 f2                	mov    %esi,%edx
c0028214:	ff 75 14             	pushl  0x14(%ebp)
c0028217:	ff 75 10             	pushl  0x10(%ebp)
c002821a:	8d 7d bc             	lea    -0x44(%ebp),%edi
c002821d:	57                   	push   %edi
c002821e:	68 c0 61 03 c0       	push   $0xc00361c0
c0028223:	51                   	push   %ecx
c0028224:	6a 01                	push   $0x1
c0028226:	52                   	push   %edx
c0028227:	50                   	push   %eax
c0028228:	e8 5b 05 00 00       	call   c0028788 <format_integer>
c002822d:	83 c4 20             	add    $0x20,%esp
c0028230:	e9 70 02 00 00       	jmp    c00284a5 <__vprintf+0x44f>
c0028235:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0028238:	83 f8 08             	cmp    $0x8,%eax
c002823b:	0f 87 d3 00 00 00    	ja     c0028314 <__vprintf+0x2be>
c0028241:	8b 04 85 90 63 03 c0 	mov    -0x3ffc9c70(,%eax,4),%eax
c0028248:	ff e0                	jmp    *%eax
c002824a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002824d:	8d 50 04             	lea    0x4(%eax),%edx
c0028250:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028253:	8b 00                	mov    (%eax),%eax
c0028255:	0f b6 c0             	movzbl %al,%eax
c0028258:	89 45 d8             	mov    %eax,-0x28(%ebp)
c002825b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0028262:	e9 c6 00 00 00       	jmp    c002832d <__vprintf+0x2d7>
c0028267:	8b 45 0c             	mov    0xc(%ebp),%eax
c002826a:	8d 50 04             	lea    0x4(%eax),%edx
c002826d:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028270:	8b 00                	mov    (%eax),%eax
c0028272:	0f b7 c0             	movzwl %ax,%eax
c0028275:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0028278:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c002827f:	e9 a9 00 00 00       	jmp    c002832d <__vprintf+0x2d7>
c0028284:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028287:	8d 50 04             	lea    0x4(%eax),%edx
c002828a:	89 55 0c             	mov    %edx,0xc(%ebp)
c002828d:	8b 00                	mov    (%eax),%eax
c002828f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0028292:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0028299:	e9 8f 00 00 00       	jmp    c002832d <__vprintf+0x2d7>
c002829e:	8b 45 0c             	mov    0xc(%ebp),%eax
c00282a1:	8d 50 08             	lea    0x8(%eax),%edx
c00282a4:	89 55 0c             	mov    %edx,0xc(%ebp)
c00282a7:	8b 50 04             	mov    0x4(%eax),%edx
c00282aa:	8b 00                	mov    (%eax),%eax
c00282ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00282af:	89 55 dc             	mov    %edx,-0x24(%ebp)
c00282b2:	eb 79                	jmp    c002832d <__vprintf+0x2d7>
c00282b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00282b7:	8d 50 04             	lea    0x4(%eax),%edx
c00282ba:	89 55 0c             	mov    %edx,0xc(%ebp)
c00282bd:	8b 00                	mov    (%eax),%eax
c00282bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00282c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c00282c9:	eb 62                	jmp    c002832d <__vprintf+0x2d7>
c00282cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00282ce:	8d 50 08             	lea    0x8(%eax),%edx
c00282d1:	89 55 0c             	mov    %edx,0xc(%ebp)
c00282d4:	8b 50 04             	mov    0x4(%eax),%edx
c00282d7:	8b 00                	mov    (%eax),%eax
c00282d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00282dc:	89 55 dc             	mov    %edx,-0x24(%ebp)
c00282df:	eb 4c                	jmp    c002832d <__vprintf+0x2d7>
c00282e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00282e4:	8d 50 04             	lea    0x4(%eax),%edx
c00282e7:	89 55 0c             	mov    %edx,0xc(%ebp)
c00282ea:	8b 00                	mov    (%eax),%eax
c00282ec:	99                   	cltd   
c00282ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00282f0:	89 55 dc             	mov    %edx,-0x24(%ebp)
c00282f3:	83 65 d8 ff          	andl   $0xffffffff,-0x28(%ebp)
c00282f7:	83 65 dc 00          	andl   $0x0,-0x24(%ebp)
c00282fb:	eb 30                	jmp    c002832d <__vprintf+0x2d7>
c00282fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028300:	8d 50 04             	lea    0x4(%eax),%edx
c0028303:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028306:	8b 00                	mov    (%eax),%eax
c0028308:	89 45 d8             	mov    %eax,-0x28(%ebp)
c002830b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0028312:	eb 19                	jmp    c002832d <__vprintf+0x2d7>
c0028314:	68 34 62 03 c0       	push   $0xc0036234
c0028319:	68 68 64 03 c0       	push   $0xc0036468
c002831e:	68 0b 01 00 00       	push   $0x10b
c0028323:	68 56 62 03 c0       	push   $0xc0036256
c0028328:	e8 64 22 00 00       	call   c002a591 <debug_panic>
c002832d:	8b 45 08             	mov    0x8(%ebp),%eax
c0028330:	0f b6 00             	movzbl (%eax),%eax
c0028333:	0f be c0             	movsbl %al,%eax
c0028336:	83 f8 6f             	cmp    $0x6f,%eax
c0028339:	74 18                	je     c0028353 <__vprintf+0x2fd>
c002833b:	83 f8 6f             	cmp    $0x6f,%eax
c002833e:	7f 07                	jg     c0028347 <__vprintf+0x2f1>
c0028340:	83 f8 58             	cmp    $0x58,%eax
c0028343:	74 29                	je     c002836e <__vprintf+0x318>
c0028345:	eb 30                	jmp    c0028377 <__vprintf+0x321>
c0028347:	83 f8 75             	cmp    $0x75,%eax
c002834a:	74 10                	je     c002835c <__vprintf+0x306>
c002834c:	83 f8 78             	cmp    $0x78,%eax
c002834f:	74 14                	je     c0028365 <__vprintf+0x30f>
c0028351:	eb 24                	jmp    c0028377 <__vprintf+0x321>
c0028353:	c7 45 d4 dc 61 03 c0 	movl   $0xc00361dc,-0x2c(%ebp)
c002835a:	eb 34                	jmp    c0028390 <__vprintf+0x33a>
c002835c:	c7 45 d4 c0 61 03 c0 	movl   $0xc00361c0,-0x2c(%ebp)
c0028363:	eb 2b                	jmp    c0028390 <__vprintf+0x33a>
c0028365:	c7 45 d4 00 62 03 c0 	movl   $0xc0036200,-0x2c(%ebp)
c002836c:	eb 22                	jmp    c0028390 <__vprintf+0x33a>
c002836e:	c7 45 d4 24 62 03 c0 	movl   $0xc0036224,-0x2c(%ebp)
c0028375:	eb 19                	jmp    c0028390 <__vprintf+0x33a>
c0028377:	68 34 62 03 c0       	push   $0xc0036234
c002837c:	68 68 64 03 c0       	push   $0xc0036468
c0028381:	68 14 01 00 00       	push   $0x114
c0028386:	68 56 62 03 c0       	push   $0xc0036256
c002838b:	e8 01 22 00 00       	call   c002a591 <debug_panic>
c0028390:	ff 75 14             	pushl  0x14(%ebp)
c0028393:	ff 75 10             	pushl  0x10(%ebp)
c0028396:	8d 45 bc             	lea    -0x44(%ebp),%eax
c0028399:	50                   	push   %eax
c002839a:	ff 75 d4             	pushl  -0x2c(%ebp)
c002839d:	6a 00                	push   $0x0
c002839f:	6a 00                	push   $0x0
c00283a1:	ff 75 dc             	pushl  -0x24(%ebp)
c00283a4:	ff 75 d8             	pushl  -0x28(%ebp)
c00283a7:	e8 dc 03 00 00       	call   c0028788 <format_integer>
c00283ac:	83 c4 20             	add    $0x20,%esp
c00283af:	e9 f1 00 00 00       	jmp    c00284a5 <__vprintf+0x44f>
c00283b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00283b7:	8d 50 04             	lea    0x4(%eax),%edx
c00283ba:	89 55 0c             	mov    %edx,0xc(%ebp)
c00283bd:	8b 00                	mov    (%eax),%eax
c00283bf:	88 45 bb             	mov    %al,-0x45(%ebp)
c00283c2:	83 ec 0c             	sub    $0xc,%esp
c00283c5:	ff 75 14             	pushl  0x14(%ebp)
c00283c8:	ff 75 10             	pushl  0x10(%ebp)
c00283cb:	8d 45 bc             	lea    -0x44(%ebp),%eax
c00283ce:	50                   	push   %eax
c00283cf:	6a 01                	push   $0x1
c00283d1:	8d 45 bb             	lea    -0x45(%ebp),%eax
c00283d4:	50                   	push   %eax
c00283d5:	e8 d0 06 00 00       	call   c0028aaa <format_string>
c00283da:	83 c4 20             	add    $0x20,%esp
c00283dd:	e9 c3 00 00 00       	jmp    c00284a5 <__vprintf+0x44f>
c00283e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00283e5:	8d 50 04             	lea    0x4(%eax),%edx
c00283e8:	89 55 0c             	mov    %edx,0xc(%ebp)
c00283eb:	8b 00                	mov    (%eax),%eax
c00283ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
c00283f0:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c00283f4:	75 07                	jne    c00283fd <__vprintf+0x3a7>
c00283f6:	c7 45 d0 68 62 03 c0 	movl   $0xc0036268,-0x30(%ebp)
c00283fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0028400:	83 ec 08             	sub    $0x8,%esp
c0028403:	50                   	push   %eax
c0028404:	ff 75 d0             	pushl  -0x30(%ebp)
c0028407:	e8 f3 14 00 00       	call   c00298ff <strnlen>
c002840c:	83 c4 10             	add    $0x10,%esp
c002840f:	89 c2                	mov    %eax,%edx
c0028411:	83 ec 0c             	sub    $0xc,%esp
c0028414:	ff 75 14             	pushl  0x14(%ebp)
c0028417:	ff 75 10             	pushl  0x10(%ebp)
c002841a:	8d 45 bc             	lea    -0x44(%ebp),%eax
c002841d:	50                   	push   %eax
c002841e:	52                   	push   %edx
c002841f:	ff 75 d0             	pushl  -0x30(%ebp)
c0028422:	e8 83 06 00 00       	call   c0028aaa <format_string>
c0028427:	83 c4 20             	add    $0x20,%esp
c002842a:	eb 79                	jmp    c00284a5 <__vprintf+0x44f>
c002842c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002842f:	8d 50 04             	lea    0x4(%eax),%edx
c0028432:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028435:	8b 00                	mov    (%eax),%eax
c0028437:	89 45 cc             	mov    %eax,-0x34(%ebp)
c002843a:	c7 45 bc 08 00 00 00 	movl   $0x8,-0x44(%ebp)
c0028441:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0028444:	ba 00 00 00 00       	mov    $0x0,%edx
c0028449:	ff 75 14             	pushl  0x14(%ebp)
c002844c:	ff 75 10             	pushl  0x10(%ebp)
c002844f:	8d 4d bc             	lea    -0x44(%ebp),%ecx
c0028452:	51                   	push   %ecx
c0028453:	68 00 62 03 c0       	push   $0xc0036200
c0028458:	6a 00                	push   $0x0
c002845a:	6a 00                	push   $0x0
c002845c:	52                   	push   %edx
c002845d:	50                   	push   %eax
c002845e:	e8 25 03 00 00       	call   c0028788 <format_integer>
c0028463:	83 c4 20             	add    $0x20,%esp
c0028466:	eb 3d                	jmp    c00284a5 <__vprintf+0x44f>
c0028468:	8b 45 08             	mov    0x8(%ebp),%eax
c002846b:	0f b6 00             	movzbl (%eax),%eax
c002846e:	0f be c0             	movsbl %al,%eax
c0028471:	50                   	push   %eax
c0028472:	ff 75 14             	pushl  0x14(%ebp)
c0028475:	ff 75 10             	pushl  0x10(%ebp)
c0028478:	68 6f 62 03 c0       	push   $0xc003626f
c002847d:	e8 c5 06 00 00       	call   c0028b47 <__printf>
c0028482:	83 c4 10             	add    $0x10,%esp
c0028485:	eb 1e                	jmp    c00284a5 <__vprintf+0x44f>
c0028487:	8b 45 08             	mov    0x8(%ebp),%eax
c002848a:	0f b6 00             	movzbl (%eax),%eax
c002848d:	0f be c0             	movsbl %al,%eax
c0028490:	50                   	push   %eax
c0028491:	ff 75 14             	pushl  0x14(%ebp)
c0028494:	ff 75 10             	pushl  0x10(%ebp)
c0028497:	68 85 62 03 c0       	push   $0xc0036285
c002849c:	e8 a6 06 00 00       	call   c0028b47 <__printf>
c00284a1:	83 c4 10             	add    $0x10,%esp
c00284a4:	90                   	nop
c00284a5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00284a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00284ac:	0f b6 00             	movzbl (%eax),%eax
c00284af:	84 c0                	test   %al,%al
c00284b1:	0f 85 ad fb ff ff    	jne    c0028064 <__vprintf+0xe>
c00284b7:	90                   	nop
c00284b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
c00284bb:	5b                   	pop    %ebx
c00284bc:	5e                   	pop    %esi
c00284bd:	5f                   	pop    %edi
c00284be:	5d                   	pop    %ebp
c00284bf:	c3                   	ret    

c00284c0 <parse_conversion>:
c00284c0:	55                   	push   %ebp
c00284c1:	89 e5                	mov    %esp,%ebp
c00284c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c00284cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00284cf:	8d 50 01             	lea    0x1(%eax),%edx
c00284d2:	89 55 08             	mov    %edx,0x8(%ebp)
c00284d5:	0f b6 00             	movzbl (%eax),%eax
c00284d8:	0f be c0             	movsbl %al,%eax
c00284db:	83 e8 20             	sub    $0x20,%eax
c00284de:	83 f8 10             	cmp    $0x10,%eax
c00284e1:	77 6f                	ja     c0028552 <parse_conversion+0x92>
c00284e3:	8b 04 85 b4 63 03 c0 	mov    -0x3ffc9c4c(,%eax,4),%eax
c00284ea:	ff e0                	jmp    *%eax
c00284ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284ef:	8b 00                	mov    (%eax),%eax
c00284f1:	83 c8 01             	or     $0x1,%eax
c00284f4:	89 c2                	mov    %eax,%edx
c00284f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284f9:	89 10                	mov    %edx,(%eax)
c00284fb:	eb 68                	jmp    c0028565 <parse_conversion+0xa5>
c00284fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028500:	8b 00                	mov    (%eax),%eax
c0028502:	83 c8 02             	or     $0x2,%eax
c0028505:	89 c2                	mov    %eax,%edx
c0028507:	8b 45 0c             	mov    0xc(%ebp),%eax
c002850a:	89 10                	mov    %edx,(%eax)
c002850c:	eb 57                	jmp    c0028565 <parse_conversion+0xa5>
c002850e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028511:	8b 00                	mov    (%eax),%eax
c0028513:	83 c8 04             	or     $0x4,%eax
c0028516:	89 c2                	mov    %eax,%edx
c0028518:	8b 45 0c             	mov    0xc(%ebp),%eax
c002851b:	89 10                	mov    %edx,(%eax)
c002851d:	eb 46                	jmp    c0028565 <parse_conversion+0xa5>
c002851f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028522:	8b 00                	mov    (%eax),%eax
c0028524:	83 c8 08             	or     $0x8,%eax
c0028527:	89 c2                	mov    %eax,%edx
c0028529:	8b 45 0c             	mov    0xc(%ebp),%eax
c002852c:	89 10                	mov    %edx,(%eax)
c002852e:	eb 35                	jmp    c0028565 <parse_conversion+0xa5>
c0028530:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028533:	8b 00                	mov    (%eax),%eax
c0028535:	83 c8 10             	or     $0x10,%eax
c0028538:	89 c2                	mov    %eax,%edx
c002853a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002853d:	89 10                	mov    %edx,(%eax)
c002853f:	eb 24                	jmp    c0028565 <parse_conversion+0xa5>
c0028541:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028544:	8b 00                	mov    (%eax),%eax
c0028546:	83 c8 20             	or     $0x20,%eax
c0028549:	89 c2                	mov    %eax,%edx
c002854b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002854e:	89 10                	mov    %edx,(%eax)
c0028550:	eb 13                	jmp    c0028565 <parse_conversion+0xa5>
c0028552:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c0028556:	90                   	nop
c0028557:	8b 45 0c             	mov    0xc(%ebp),%eax
c002855a:	8b 00                	mov    (%eax),%eax
c002855c:	83 e0 01             	and    $0x1,%eax
c002855f:	85 c0                	test   %eax,%eax
c0028561:	74 16                	je     c0028579 <parse_conversion+0xb9>
c0028563:	eb 05                	jmp    c002856a <parse_conversion+0xaa>
c0028565:	e9 62 ff ff ff       	jmp    c00284cc <parse_conversion+0xc>
c002856a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002856d:	8b 00                	mov    (%eax),%eax
c002856f:	83 e0 ef             	and    $0xffffffef,%eax
c0028572:	89 c2                	mov    %eax,%edx
c0028574:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028577:	89 10                	mov    %edx,(%eax)
c0028579:	8b 45 0c             	mov    0xc(%ebp),%eax
c002857c:	8b 00                	mov    (%eax),%eax
c002857e:	83 e0 02             	and    $0x2,%eax
c0028581:	85 c0                	test   %eax,%eax
c0028583:	74 0f                	je     c0028594 <parse_conversion+0xd4>
c0028585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028588:	8b 00                	mov    (%eax),%eax
c002858a:	83 e0 fb             	and    $0xfffffffb,%eax
c002858d:	89 c2                	mov    %eax,%edx
c002858f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028592:	89 10                	mov    %edx,(%eax)
c0028594:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028597:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c002859e:	8b 45 08             	mov    0x8(%ebp),%eax
c00285a1:	0f b6 00             	movzbl (%eax),%eax
c00285a4:	3c 2a                	cmp    $0x2a,%al
c00285a6:	75 44                	jne    c00285ec <parse_conversion+0x12c>
c00285a8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00285ac:	8b 45 10             	mov    0x10(%ebp),%eax
c00285af:	8b 00                	mov    (%eax),%eax
c00285b1:	8d 48 04             	lea    0x4(%eax),%ecx
c00285b4:	8b 55 10             	mov    0x10(%ebp),%edx
c00285b7:	89 0a                	mov    %ecx,(%edx)
c00285b9:	8b 10                	mov    (%eax),%edx
c00285bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285be:	89 50 04             	mov    %edx,0x4(%eax)
c00285c1:	eb 3f                	jmp    c0028602 <parse_conversion+0x142>
c00285c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285c6:	8b 50 04             	mov    0x4(%eax),%edx
c00285c9:	89 d0                	mov    %edx,%eax
c00285cb:	c1 e0 02             	shl    $0x2,%eax
c00285ce:	01 d0                	add    %edx,%eax
c00285d0:	01 c0                	add    %eax,%eax
c00285d2:	89 c2                	mov    %eax,%edx
c00285d4:	8b 45 08             	mov    0x8(%ebp),%eax
c00285d7:	0f b6 00             	movzbl (%eax),%eax
c00285da:	0f be c0             	movsbl %al,%eax
c00285dd:	01 d0                	add    %edx,%eax
c00285df:	8d 50 d0             	lea    -0x30(%eax),%edx
c00285e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285e5:	89 50 04             	mov    %edx,0x4(%eax)
c00285e8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00285ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00285ef:	0f b6 00             	movzbl (%eax),%eax
c00285f2:	0f be c0             	movsbl %al,%eax
c00285f5:	50                   	push   %eax
c00285f6:	e8 40 f9 ff ff       	call   c0027f3b <isdigit>
c00285fb:	83 c4 04             	add    $0x4,%esp
c00285fe:	85 c0                	test   %eax,%eax
c0028600:	75 c1                	jne    c00285c3 <parse_conversion+0x103>
c0028602:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028605:	8b 40 04             	mov    0x4(%eax),%eax
c0028608:	85 c0                	test   %eax,%eax
c002860a:	79 1f                	jns    c002862b <parse_conversion+0x16b>
c002860c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002860f:	8b 40 04             	mov    0x4(%eax),%eax
c0028612:	f7 d8                	neg    %eax
c0028614:	89 c2                	mov    %eax,%edx
c0028616:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028619:	89 50 04             	mov    %edx,0x4(%eax)
c002861c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002861f:	8b 00                	mov    (%eax),%eax
c0028621:	83 c8 01             	or     $0x1,%eax
c0028624:	89 c2                	mov    %eax,%edx
c0028626:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028629:	89 10                	mov    %edx,(%eax)
c002862b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002862e:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%eax)
c0028635:	8b 45 08             	mov    0x8(%ebp),%eax
c0028638:	0f b6 00             	movzbl (%eax),%eax
c002863b:	3c 2e                	cmp    $0x2e,%al
c002863d:	0f 85 88 00 00 00    	jne    c00286cb <parse_conversion+0x20b>
c0028643:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028647:	8b 45 08             	mov    0x8(%ebp),%eax
c002864a:	0f b6 00             	movzbl (%eax),%eax
c002864d:	3c 2a                	cmp    $0x2a,%al
c002864f:	75 1b                	jne    c002866c <parse_conversion+0x1ac>
c0028651:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028655:	8b 45 10             	mov    0x10(%ebp),%eax
c0028658:	8b 00                	mov    (%eax),%eax
c002865a:	8d 48 04             	lea    0x4(%eax),%ecx
c002865d:	8b 55 10             	mov    0x10(%ebp),%edx
c0028660:	89 0a                	mov    %ecx,(%edx)
c0028662:	8b 10                	mov    (%eax),%edx
c0028664:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028667:	89 50 08             	mov    %edx,0x8(%eax)
c002866a:	eb 4b                	jmp    c00286b7 <parse_conversion+0x1f7>
c002866c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002866f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0028676:	eb 29                	jmp    c00286a1 <parse_conversion+0x1e1>
c0028678:	8b 45 0c             	mov    0xc(%ebp),%eax
c002867b:	8b 50 08             	mov    0x8(%eax),%edx
c002867e:	89 d0                	mov    %edx,%eax
c0028680:	c1 e0 02             	shl    $0x2,%eax
c0028683:	01 d0                	add    %edx,%eax
c0028685:	01 c0                	add    %eax,%eax
c0028687:	89 c2                	mov    %eax,%edx
c0028689:	8b 45 08             	mov    0x8(%ebp),%eax
c002868c:	0f b6 00             	movzbl (%eax),%eax
c002868f:	0f be c0             	movsbl %al,%eax
c0028692:	01 d0                	add    %edx,%eax
c0028694:	8d 50 d0             	lea    -0x30(%eax),%edx
c0028697:	8b 45 0c             	mov    0xc(%ebp),%eax
c002869a:	89 50 08             	mov    %edx,0x8(%eax)
c002869d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00286a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00286a4:	0f b6 00             	movzbl (%eax),%eax
c00286a7:	0f be c0             	movsbl %al,%eax
c00286aa:	50                   	push   %eax
c00286ab:	e8 8b f8 ff ff       	call   c0027f3b <isdigit>
c00286b0:	83 c4 04             	add    $0x4,%esp
c00286b3:	85 c0                	test   %eax,%eax
c00286b5:	75 c1                	jne    c0028678 <parse_conversion+0x1b8>
c00286b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286ba:	8b 40 08             	mov    0x8(%eax),%eax
c00286bd:	85 c0                	test   %eax,%eax
c00286bf:	79 0a                	jns    c00286cb <parse_conversion+0x20b>
c00286c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286c4:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%eax)
c00286cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286ce:	8b 40 08             	mov    0x8(%eax),%eax
c00286d1:	85 c0                	test   %eax,%eax
c00286d3:	78 0f                	js     c00286e4 <parse_conversion+0x224>
c00286d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286d8:	8b 00                	mov    (%eax),%eax
c00286da:	83 e0 ef             	and    $0xffffffef,%eax
c00286dd:	89 c2                	mov    %eax,%edx
c00286df:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286e2:	89 10                	mov    %edx,(%eax)
c00286e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286e7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
c00286ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00286f1:	8d 50 01             	lea    0x1(%eax),%edx
c00286f4:	89 55 08             	mov    %edx,0x8(%ebp)
c00286f7:	0f b6 00             	movzbl (%eax),%eax
c00286fa:	0f be c0             	movsbl %al,%eax
c00286fd:	83 e8 68             	sub    $0x68,%eax
c0028700:	83 f8 12             	cmp    $0x12,%eax
c0028703:	77 79                	ja     c002877e <parse_conversion+0x2be>
c0028705:	8b 04 85 f8 63 03 c0 	mov    -0x3ffc9c08(,%eax,4),%eax
c002870c:	ff e0                	jmp    *%eax
c002870e:	8b 45 08             	mov    0x8(%ebp),%eax
c0028711:	0f b6 00             	movzbl (%eax),%eax
c0028714:	3c 68                	cmp    $0x68,%al
c0028716:	75 10                	jne    c0028728 <parse_conversion+0x268>
c0028718:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c002871c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002871f:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
c0028726:	eb 5b                	jmp    c0028783 <parse_conversion+0x2c3>
c0028728:	8b 45 0c             	mov    0xc(%ebp),%eax
c002872b:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
c0028732:	eb 4f                	jmp    c0028783 <parse_conversion+0x2c3>
c0028734:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028737:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
c002873e:	eb 43                	jmp    c0028783 <parse_conversion+0x2c3>
c0028740:	8b 45 08             	mov    0x8(%ebp),%eax
c0028743:	0f b6 00             	movzbl (%eax),%eax
c0028746:	3c 6c                	cmp    $0x6c,%al
c0028748:	75 10                	jne    c002875a <parse_conversion+0x29a>
c002874a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c002874e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028751:	c7 40 0c 06 00 00 00 	movl   $0x6,0xc(%eax)
c0028758:	eb 29                	jmp    c0028783 <parse_conversion+0x2c3>
c002875a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002875d:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
c0028764:	eb 1d                	jmp    c0028783 <parse_conversion+0x2c3>
c0028766:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028769:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
c0028770:	eb 11                	jmp    c0028783 <parse_conversion+0x2c3>
c0028772:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028775:	c7 40 0c 08 00 00 00 	movl   $0x8,0xc(%eax)
c002877c:	eb 05                	jmp    c0028783 <parse_conversion+0x2c3>
c002877e:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c0028782:	90                   	nop
c0028783:	8b 45 08             	mov    0x8(%ebp),%eax
c0028786:	c9                   	leave  
c0028787:	c3                   	ret    

c0028788 <format_integer>:
c0028788:	55                   	push   %ebp
c0028789:	89 e5                	mov    %esp,%ebp
c002878b:	57                   	push   %edi
c002878c:	56                   	push   %esi
c002878d:	53                   	push   %ebx
c002878e:	83 ec 7c             	sub    $0x7c,%esp
c0028791:	8b 55 10             	mov    0x10(%ebp),%edx
c0028794:	8b 45 14             	mov    0x14(%ebp),%eax
c0028797:	8b 4d 08             	mov    0x8(%ebp),%ecx
c002879a:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c002879d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00287a0:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c00287a3:	88 95 7c ff ff ff    	mov    %dl,-0x84(%ebp)
c00287a9:	88 85 78 ff ff ff    	mov    %al,-0x88(%ebp)
c00287af:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c00287b6:	80 bd 7c ff ff ff 00 	cmpb   $0x0,-0x84(%ebp)
c00287bd:	74 5c                	je     c002881b <format_integer+0x93>
c00287bf:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00287c2:	8b 00                	mov    (%eax),%eax
c00287c4:	83 e0 02             	and    $0x2,%eax
c00287c7:	85 c0                	test   %eax,%eax
c00287c9:	74 1a                	je     c00287e5 <format_integer+0x5d>
c00287cb:	80 bd 78 ff ff ff 00 	cmpb   $0x0,-0x88(%ebp)
c00287d2:	74 07                	je     c00287db <format_integer+0x53>
c00287d4:	b8 2d 00 00 00       	mov    $0x2d,%eax
c00287d9:	eb 05                	jmp    c00287e0 <format_integer+0x58>
c00287db:	b8 2b 00 00 00       	mov    $0x2b,%eax
c00287e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00287e3:	eb 36                	jmp    c002881b <format_integer+0x93>
c00287e5:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00287e8:	8b 00                	mov    (%eax),%eax
c00287ea:	83 e0 04             	and    $0x4,%eax
c00287ed:	85 c0                	test   %eax,%eax
c00287ef:	74 1a                	je     c002880b <format_integer+0x83>
c00287f1:	80 bd 78 ff ff ff 00 	cmpb   $0x0,-0x88(%ebp)
c00287f8:	74 07                	je     c0028801 <format_integer+0x79>
c00287fa:	b8 2d 00 00 00       	mov    $0x2d,%eax
c00287ff:	eb 05                	jmp    c0028806 <format_integer+0x7e>
c0028801:	b8 20 00 00 00       	mov    $0x20,%eax
c0028806:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028809:	eb 10                	jmp    c002881b <format_integer+0x93>
c002880b:	80 bd 78 ff ff ff 00 	cmpb   $0x0,-0x88(%ebp)
c0028812:	74 07                	je     c002881b <format_integer+0x93>
c0028814:	c7 45 e0 2d 00 00 00 	movl   $0x2d,-0x20(%ebp)
c002881b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002881e:	8b 00                	mov    (%eax),%eax
c0028820:	83 e0 08             	and    $0x8,%eax
c0028823:	85 c0                	test   %eax,%eax
c0028825:	74 12                	je     c0028839 <format_integer+0xb1>
c0028827:	8b 45 84             	mov    -0x7c(%ebp),%eax
c002882a:	0b 45 80             	or     -0x80(%ebp),%eax
c002882d:	85 c0                	test   %eax,%eax
c002882f:	74 08                	je     c0028839 <format_integer+0xb1>
c0028831:	8b 45 18             	mov    0x18(%ebp),%eax
c0028834:	8b 40 08             	mov    0x8(%eax),%eax
c0028837:	eb 05                	jmp    c002883e <format_integer+0xb6>
c0028839:	b8 00 00 00 00       	mov    $0x0,%eax
c002883e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0028841:	8d 45 90             	lea    -0x70(%ebp),%eax
c0028844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0028847:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c002884e:	e9 84 00 00 00       	jmp    c00288d7 <format_integer+0x14f>
c0028853:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0028856:	8b 00                	mov    (%eax),%eax
c0028858:	83 e0 20             	and    $0x20,%eax
c002885b:	85 c0                	test   %eax,%eax
c002885d:	74 24                	je     c0028883 <format_integer+0xfb>
c002885f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0028863:	7e 1e                	jle    c0028883 <format_integer+0xfb>
c0028865:	8b 45 18             	mov    0x18(%ebp),%eax
c0028868:	8b 48 0c             	mov    0xc(%eax),%ecx
c002886b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c002886e:	99                   	cltd   
c002886f:	f7 f9                	idiv   %ecx
c0028871:	89 d0                	mov    %edx,%eax
c0028873:	85 c0                	test   %eax,%eax
c0028875:	75 0c                	jne    c0028883 <format_integer+0xfb>
c0028877:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002887a:	8d 50 01             	lea    0x1(%eax),%edx
c002887d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028880:	c6 00 2c             	movb   $0x2c,(%eax)
c0028883:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0028886:	8d 46 01             	lea    0x1(%esi),%eax
c0028889:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002888c:	8b 45 18             	mov    0x18(%ebp),%eax
c002888f:	8b 78 04             	mov    0x4(%eax),%edi
c0028892:	8b 45 18             	mov    0x18(%ebp),%eax
c0028895:	8b 00                	mov    (%eax),%eax
c0028897:	89 c1                	mov    %eax,%ecx
c0028899:	89 c3                	mov    %eax,%ebx
c002889b:	c1 fb 1f             	sar    $0x1f,%ebx
c002889e:	8b 45 80             	mov    -0x80(%ebp),%eax
c00288a1:	8b 55 84             	mov    -0x7c(%ebp),%edx
c00288a4:	53                   	push   %ebx
c00288a5:	51                   	push   %ecx
c00288a6:	52                   	push   %edx
c00288a7:	50                   	push   %eax
c00288a8:	e8 2d 16 00 00       	call   c0029eda <__umoddi3>
c00288ad:	83 c4 10             	add    $0x10,%esp
c00288b0:	01 f8                	add    %edi,%eax
c00288b2:	0f b6 00             	movzbl (%eax),%eax
c00288b5:	88 06                	mov    %al,(%esi)
c00288b7:	8b 45 18             	mov    0x18(%ebp),%eax
c00288ba:	8b 00                	mov    (%eax),%eax
c00288bc:	99                   	cltd   
c00288bd:	52                   	push   %edx
c00288be:	50                   	push   %eax
c00288bf:	ff 75 84             	pushl  -0x7c(%ebp)
c00288c2:	ff 75 80             	pushl  -0x80(%ebp)
c00288c5:	e8 dc 15 00 00       	call   c0029ea6 <__udivdi3>
c00288ca:	83 c4 10             	add    $0x10,%esp
c00288cd:	89 45 80             	mov    %eax,-0x80(%ebp)
c00288d0:	89 55 84             	mov    %edx,-0x7c(%ebp)
c00288d3:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
c00288d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
c00288da:	0b 45 80             	or     -0x80(%ebp),%eax
c00288dd:	85 c0                	test   %eax,%eax
c00288df:	0f 85 6e ff ff ff    	jne    c0028853 <format_integer+0xcb>
c00288e5:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00288e8:	8b 40 08             	mov    0x8(%eax),%eax
c00288eb:	85 c0                	test   %eax,%eax
c00288ed:	78 08                	js     c00288f7 <format_integer+0x16f>
c00288ef:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00288f2:	8b 40 08             	mov    0x8(%eax),%eax
c00288f5:	eb 05                	jmp    c00288fc <format_integer+0x174>
c00288f7:	b8 01 00 00 00       	mov    $0x1,%eax
c00288fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
c00288ff:	eb 0c                	jmp    c002890d <format_integer+0x185>
c0028901:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0028904:	8d 50 01             	lea    0x1(%eax),%edx
c0028907:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002890a:	c6 00 30             	movb   $0x30,(%eax)
c002890d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0028910:	8d 45 90             	lea    -0x70(%ebp),%eax
c0028913:	29 c2                	sub    %eax,%edx
c0028915:	89 d0                	mov    %edx,%eax
c0028917:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c002891a:	7d 0b                	jge    c0028927 <format_integer+0x19f>
c002891c:	8d 45 90             	lea    -0x70(%ebp),%eax
c002891f:	83 c0 3f             	add    $0x3f,%eax
c0028922:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0028925:	77 da                	ja     c0028901 <format_integer+0x179>
c0028927:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002892a:	8b 00                	mov    (%eax),%eax
c002892c:	83 e0 08             	and    $0x8,%eax
c002892f:	85 c0                	test   %eax,%eax
c0028931:	74 2b                	je     c002895e <format_integer+0x1d6>
c0028933:	8b 45 18             	mov    0x18(%ebp),%eax
c0028936:	8b 00                	mov    (%eax),%eax
c0028938:	83 f8 08             	cmp    $0x8,%eax
c002893b:	75 21                	jne    c002895e <format_integer+0x1d6>
c002893d:	8d 45 90             	lea    -0x70(%ebp),%eax
c0028940:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0028943:	74 0d                	je     c0028952 <format_integer+0x1ca>
c0028945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0028948:	83 e8 01             	sub    $0x1,%eax
c002894b:	0f b6 00             	movzbl (%eax),%eax
c002894e:	3c 30                	cmp    $0x30,%al
c0028950:	74 0c                	je     c002895e <format_integer+0x1d6>
c0028952:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0028955:	8d 50 01             	lea    0x1(%eax),%edx
c0028958:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002895b:	c6 00 30             	movb   $0x30,(%eax)
c002895e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0028961:	8b 40 04             	mov    0x4(%eax),%eax
c0028964:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0028967:	8d 55 90             	lea    -0x70(%ebp),%edx
c002896a:	29 d1                	sub    %edx,%ecx
c002896c:	89 ca                	mov    %ecx,%edx
c002896e:	29 d0                	sub    %edx,%eax
c0028970:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0028974:	74 07                	je     c002897d <format_integer+0x1f5>
c0028976:	ba 02 00 00 00       	mov    $0x2,%edx
c002897b:	eb 05                	jmp    c0028982 <format_integer+0x1fa>
c002897d:	ba 00 00 00 00       	mov    $0x0,%edx
c0028982:	29 d0                	sub    %edx,%eax
c0028984:	89 c2                	mov    %eax,%edx
c0028986:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002898a:	0f 95 c0             	setne  %al
c002898d:	0f b6 c0             	movzbl %al,%eax
c0028990:	29 c2                	sub    %eax,%edx
c0028992:	89 d0                	mov    %edx,%eax
c0028994:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0028997:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c002899b:	79 07                	jns    c00289a4 <format_integer+0x21c>
c002899d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c00289a4:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00289a7:	8b 00                	mov    (%eax),%eax
c00289a9:	83 e0 11             	and    $0x11,%eax
c00289ac:	85 c0                	test   %eax,%eax
c00289ae:	75 14                	jne    c00289c4 <format_integer+0x23c>
c00289b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00289b3:	ff 75 24             	pushl  0x24(%ebp)
c00289b6:	ff 75 20             	pushl  0x20(%ebp)
c00289b9:	50                   	push   %eax
c00289ba:	6a 20                	push   $0x20
c00289bc:	e8 b8 00 00 00       	call   c0028a79 <output_dup>
c00289c1:	83 c4 10             	add    $0x10,%esp
c00289c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c00289c8:	74 15                	je     c00289df <format_integer+0x257>
c00289ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00289cd:	0f be c0             	movsbl %al,%eax
c00289d0:	83 ec 08             	sub    $0x8,%esp
c00289d3:	ff 75 24             	pushl  0x24(%ebp)
c00289d6:	50                   	push   %eax
c00289d7:	8b 45 20             	mov    0x20(%ebp),%eax
c00289da:	ff d0                	call   *%eax
c00289dc:	83 c4 10             	add    $0x10,%esp
c00289df:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c00289e3:	74 25                	je     c0028a0a <format_integer+0x282>
c00289e5:	83 ec 08             	sub    $0x8,%esp
c00289e8:	ff 75 24             	pushl  0x24(%ebp)
c00289eb:	6a 30                	push   $0x30
c00289ed:	8b 45 20             	mov    0x20(%ebp),%eax
c00289f0:	ff d0                	call   *%eax
c00289f2:	83 c4 10             	add    $0x10,%esp
c00289f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00289f8:	0f be c0             	movsbl %al,%eax
c00289fb:	83 ec 08             	sub    $0x8,%esp
c00289fe:	ff 75 24             	pushl  0x24(%ebp)
c0028a01:	50                   	push   %eax
c0028a02:	8b 45 20             	mov    0x20(%ebp),%eax
c0028a05:	ff d0                	call   *%eax
c0028a07:	83 c4 10             	add    $0x10,%esp
c0028a0a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0028a0d:	8b 00                	mov    (%eax),%eax
c0028a0f:	83 e0 10             	and    $0x10,%eax
c0028a12:	85 c0                	test   %eax,%eax
c0028a14:	74 32                	je     c0028a48 <format_integer+0x2c0>
c0028a16:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0028a19:	ff 75 24             	pushl  0x24(%ebp)
c0028a1c:	ff 75 20             	pushl  0x20(%ebp)
c0028a1f:	50                   	push   %eax
c0028a20:	6a 30                	push   $0x30
c0028a22:	e8 52 00 00 00       	call   c0028a79 <output_dup>
c0028a27:	83 c4 10             	add    $0x10,%esp
c0028a2a:	eb 1c                	jmp    c0028a48 <format_integer+0x2c0>
c0028a2c:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0028a30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0028a33:	0f b6 00             	movzbl (%eax),%eax
c0028a36:	0f be c0             	movsbl %al,%eax
c0028a39:	83 ec 08             	sub    $0x8,%esp
c0028a3c:	ff 75 24             	pushl  0x24(%ebp)
c0028a3f:	50                   	push   %eax
c0028a40:	8b 45 20             	mov    0x20(%ebp),%eax
c0028a43:	ff d0                	call   *%eax
c0028a45:	83 c4 10             	add    $0x10,%esp
c0028a48:	8d 45 90             	lea    -0x70(%ebp),%eax
c0028a4b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0028a4e:	77 dc                	ja     c0028a2c <format_integer+0x2a4>
c0028a50:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0028a53:	8b 00                	mov    (%eax),%eax
c0028a55:	83 e0 01             	and    $0x1,%eax
c0028a58:	85 c0                	test   %eax,%eax
c0028a5a:	74 14                	je     c0028a70 <format_integer+0x2e8>
c0028a5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0028a5f:	ff 75 24             	pushl  0x24(%ebp)
c0028a62:	ff 75 20             	pushl  0x20(%ebp)
c0028a65:	50                   	push   %eax
c0028a66:	6a 20                	push   $0x20
c0028a68:	e8 0c 00 00 00       	call   c0028a79 <output_dup>
c0028a6d:	83 c4 10             	add    $0x10,%esp
c0028a70:	90                   	nop
c0028a71:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0028a74:	5b                   	pop    %ebx
c0028a75:	5e                   	pop    %esi
c0028a76:	5f                   	pop    %edi
c0028a77:	5d                   	pop    %ebp
c0028a78:	c3                   	ret    

c0028a79 <output_dup>:
c0028a79:	55                   	push   %ebp
c0028a7a:	89 e5                	mov    %esp,%ebp
c0028a7c:	83 ec 18             	sub    $0x18,%esp
c0028a7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0028a82:	88 45 f4             	mov    %al,-0xc(%ebp)
c0028a85:	eb 13                	jmp    c0028a9a <output_dup+0x21>
c0028a87:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
c0028a8b:	83 ec 08             	sub    $0x8,%esp
c0028a8e:	ff 75 14             	pushl  0x14(%ebp)
c0028a91:	50                   	push   %eax
c0028a92:	8b 45 10             	mov    0x10(%ebp),%eax
c0028a95:	ff d0                	call   *%eax
c0028a97:	83 c4 10             	add    $0x10,%esp
c0028a9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028a9d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0028aa0:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028aa3:	85 c0                	test   %eax,%eax
c0028aa5:	75 e0                	jne    c0028a87 <output_dup+0xe>
c0028aa7:	90                   	nop
c0028aa8:	c9                   	leave  
c0028aa9:	c3                   	ret    

c0028aaa <format_string>:
c0028aaa:	55                   	push   %ebp
c0028aab:	89 e5                	mov    %esp,%ebp
c0028aad:	83 ec 18             	sub    $0x18,%esp
c0028ab0:	8b 45 10             	mov    0x10(%ebp),%eax
c0028ab3:	8b 40 04             	mov    0x4(%eax),%eax
c0028ab6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0028ab9:	7e 26                	jle    c0028ae1 <format_string+0x37>
c0028abb:	8b 45 10             	mov    0x10(%ebp),%eax
c0028abe:	8b 00                	mov    (%eax),%eax
c0028ac0:	83 e0 01             	and    $0x1,%eax
c0028ac3:	85 c0                	test   %eax,%eax
c0028ac5:	75 1a                	jne    c0028ae1 <format_string+0x37>
c0028ac7:	8b 45 10             	mov    0x10(%ebp),%eax
c0028aca:	8b 40 04             	mov    0x4(%eax),%eax
c0028acd:	2b 45 0c             	sub    0xc(%ebp),%eax
c0028ad0:	ff 75 18             	pushl  0x18(%ebp)
c0028ad3:	ff 75 14             	pushl  0x14(%ebp)
c0028ad6:	50                   	push   %eax
c0028ad7:	6a 20                	push   $0x20
c0028ad9:	e8 9b ff ff ff       	call   c0028a79 <output_dup>
c0028ade:	83 c4 10             	add    $0x10,%esp
c0028ae1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0028ae8:	eb 21                	jmp    c0028b0b <format_string+0x61>
c0028aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0028aed:	8b 45 08             	mov    0x8(%ebp),%eax
c0028af0:	01 d0                	add    %edx,%eax
c0028af2:	0f b6 00             	movzbl (%eax),%eax
c0028af5:	0f be c0             	movsbl %al,%eax
c0028af8:	83 ec 08             	sub    $0x8,%esp
c0028afb:	ff 75 18             	pushl  0x18(%ebp)
c0028afe:	50                   	push   %eax
c0028aff:	8b 45 14             	mov    0x14(%ebp),%eax
c0028b02:	ff d0                	call   *%eax
c0028b04:	83 c4 10             	add    $0x10,%esp
c0028b07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0028b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028b0e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0028b11:	7c d7                	jl     c0028aea <format_string+0x40>
c0028b13:	8b 45 10             	mov    0x10(%ebp),%eax
c0028b16:	8b 40 04             	mov    0x4(%eax),%eax
c0028b19:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0028b1c:	7e 26                	jle    c0028b44 <format_string+0x9a>
c0028b1e:	8b 45 10             	mov    0x10(%ebp),%eax
c0028b21:	8b 00                	mov    (%eax),%eax
c0028b23:	83 e0 01             	and    $0x1,%eax
c0028b26:	85 c0                	test   %eax,%eax
c0028b28:	74 1a                	je     c0028b44 <format_string+0x9a>
c0028b2a:	8b 45 10             	mov    0x10(%ebp),%eax
c0028b2d:	8b 40 04             	mov    0x4(%eax),%eax
c0028b30:	2b 45 0c             	sub    0xc(%ebp),%eax
c0028b33:	ff 75 18             	pushl  0x18(%ebp)
c0028b36:	ff 75 14             	pushl  0x14(%ebp)
c0028b39:	50                   	push   %eax
c0028b3a:	6a 20                	push   $0x20
c0028b3c:	e8 38 ff ff ff       	call   c0028a79 <output_dup>
c0028b41:	83 c4 10             	add    $0x10,%esp
c0028b44:	90                   	nop
c0028b45:	c9                   	leave  
c0028b46:	c3                   	ret    

c0028b47 <__printf>:
c0028b47:	55                   	push   %ebp
c0028b48:	89 e5                	mov    %esp,%ebp
c0028b4a:	83 ec 18             	sub    $0x18,%esp
c0028b4d:	8d 45 14             	lea    0x14(%ebp),%eax
c0028b50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028b56:	ff 75 10             	pushl  0x10(%ebp)
c0028b59:	ff 75 0c             	pushl  0xc(%ebp)
c0028b5c:	50                   	push   %eax
c0028b5d:	ff 75 08             	pushl  0x8(%ebp)
c0028b60:	e8 f1 f4 ff ff       	call   c0028056 <__vprintf>
c0028b65:	83 c4 10             	add    $0x10,%esp
c0028b68:	90                   	nop
c0028b69:	c9                   	leave  
c0028b6a:	c3                   	ret    

c0028b6b <hex_dump>:
c0028b6b:	55                   	push   %ebp
c0028b6c:	89 e5                	mov    %esp,%ebp
c0028b6e:	83 ec 38             	sub    $0x38,%esp
c0028b71:	8b 45 14             	mov    0x14(%ebp),%eax
c0028b74:	88 45 d4             	mov    %al,-0x2c(%ebp)
c0028b77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028b7d:	c7 45 e8 10 00 00 00 	movl   $0x10,-0x18(%ebp)
c0028b84:	e9 bf 01 00 00       	jmp    c0028d48 <hex_dump+0x1dd>
c0028b89:	8b 45 08             	mov    0x8(%ebp),%eax
c0028b8c:	ba 00 00 00 00       	mov    $0x0,%edx
c0028b91:	f7 75 e8             	divl   -0x18(%ebp)
c0028b94:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028b97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0028b9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028ba0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028ba3:	3b 45 10             	cmp    0x10(%ebp),%eax
c0028ba6:	76 0b                	jbe    c0028bb3 <hex_dump+0x48>
c0028ba8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0028bab:	8b 45 10             	mov    0x10(%ebp),%eax
c0028bae:	01 d0                	add    %edx,%eax
c0028bb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028bb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028bb6:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028bb9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028bbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0028bbf:	ba 00 00 00 00       	mov    $0x0,%edx
c0028bc4:	f7 75 e8             	divl   -0x18(%ebp)
c0028bc7:	0f af 45 e8          	imul   -0x18(%ebp),%eax
c0028bcb:	ba 00 00 00 00       	mov    $0x0,%edx
c0028bd0:	83 ec 04             	sub    $0x4,%esp
c0028bd3:	52                   	push   %edx
c0028bd4:	50                   	push   %eax
c0028bd5:	68 44 64 03 c0       	push   $0xc0036444
c0028bda:	e8 51 f4 ff ff       	call   c0028030 <printf>
c0028bdf:	83 c4 10             	add    $0x10,%esp
c0028be2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0028be9:	eb 14                	jmp    c0028bff <hex_dump+0x94>
c0028beb:	83 ec 0c             	sub    $0xc,%esp
c0028bee:	68 4c 64 03 c0       	push   $0xc003644c
c0028bf3:	e8 38 f4 ff ff       	call   c0028030 <printf>
c0028bf8:	83 c4 10             	add    $0x10,%esp
c0028bfb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028bff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c02:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0028c05:	72 e4                	jb     c0028beb <hex_dump+0x80>
c0028c07:	eb 42                	jmp    c0028c4b <hex_dump+0xe0>
c0028c09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0028c0c:	d1 e8                	shr    %eax
c0028c0e:	83 e8 01             	sub    $0x1,%eax
c0028c11:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0028c14:	75 07                	jne    c0028c1d <hex_dump+0xb2>
c0028c16:	b9 2d 00 00 00       	mov    $0x2d,%ecx
c0028c1b:	eb 05                	jmp    c0028c22 <hex_dump+0xb7>
c0028c1d:	b9 20 00 00 00       	mov    $0x20,%ecx
c0028c22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c25:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028c28:	89 c2                	mov    %eax,%edx
c0028c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028c2d:	01 d0                	add    %edx,%eax
c0028c2f:	0f b6 00             	movzbl (%eax),%eax
c0028c32:	0f b6 c0             	movzbl %al,%eax
c0028c35:	83 ec 04             	sub    $0x4,%esp
c0028c38:	51                   	push   %ecx
c0028c39:	50                   	push   %eax
c0028c3a:	68 50 64 03 c0       	push   $0xc0036450
c0028c3f:	e8 ec f3 ff ff       	call   c0028030 <printf>
c0028c44:	83 c4 10             	add    $0x10,%esp
c0028c47:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028c4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c4e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0028c51:	72 b6                	jb     c0028c09 <hex_dump+0x9e>
c0028c53:	80 7d d4 00          	cmpb   $0x0,-0x2c(%ebp)
c0028c57:	0f 84 cc 00 00 00    	je     c0028d29 <hex_dump+0x1be>
c0028c5d:	eb 14                	jmp    c0028c73 <hex_dump+0x108>
c0028c5f:	83 ec 0c             	sub    $0xc,%esp
c0028c62:	68 4c 64 03 c0       	push   $0xc003644c
c0028c67:	e8 c4 f3 ff ff       	call   c0028030 <printf>
c0028c6c:	83 c4 10             	add    $0x10,%esp
c0028c6f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028c73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c76:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0028c79:	72 e4                	jb     c0028c5f <hex_dump+0xf4>
c0028c7b:	83 ec 0c             	sub    $0xc,%esp
c0028c7e:	6a 7c                	push   $0x7c
c0028c80:	e8 5b 3c 00 00       	call   c002c8e0 <putchar>
c0028c85:	83 c4 10             	add    $0x10,%esp
c0028c88:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0028c8f:	eb 11                	jmp    c0028ca2 <hex_dump+0x137>
c0028c91:	83 ec 0c             	sub    $0xc,%esp
c0028c94:	6a 20                	push   $0x20
c0028c96:	e8 45 3c 00 00       	call   c002c8e0 <putchar>
c0028c9b:	83 c4 10             	add    $0x10,%esp
c0028c9e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028ca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028ca5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0028ca8:	72 e7                	jb     c0028c91 <hex_dump+0x126>
c0028caa:	eb 4d                	jmp    c0028cf9 <hex_dump+0x18e>
c0028cac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028caf:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028cb2:	89 c2                	mov    %eax,%edx
c0028cb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028cb7:	01 d0                	add    %edx,%eax
c0028cb9:	0f b6 00             	movzbl (%eax),%eax
c0028cbc:	0f b6 c0             	movzbl %al,%eax
c0028cbf:	83 ec 0c             	sub    $0xc,%esp
c0028cc2:	50                   	push   %eax
c0028cc3:	e8 90 f2 ff ff       	call   c0027f58 <isprint>
c0028cc8:	83 c4 10             	add    $0x10,%esp
c0028ccb:	85 c0                	test   %eax,%eax
c0028ccd:	74 15                	je     c0028ce4 <hex_dump+0x179>
c0028ccf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028cd2:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028cd5:	89 c2                	mov    %eax,%edx
c0028cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028cda:	01 d0                	add    %edx,%eax
c0028cdc:	0f b6 00             	movzbl (%eax),%eax
c0028cdf:	0f b6 c0             	movzbl %al,%eax
c0028ce2:	eb 05                	jmp    c0028ce9 <hex_dump+0x17e>
c0028ce4:	b8 2e 00 00 00       	mov    $0x2e,%eax
c0028ce9:	83 ec 0c             	sub    $0xc,%esp
c0028cec:	50                   	push   %eax
c0028ced:	e8 ee 3b 00 00       	call   c002c8e0 <putchar>
c0028cf2:	83 c4 10             	add    $0x10,%esp
c0028cf5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028cf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028cfc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0028cff:	72 ab                	jb     c0028cac <hex_dump+0x141>
c0028d01:	eb 11                	jmp    c0028d14 <hex_dump+0x1a9>
c0028d03:	83 ec 0c             	sub    $0xc,%esp
c0028d06:	6a 20                	push   $0x20
c0028d08:	e8 d3 3b 00 00       	call   c002c8e0 <putchar>
c0028d0d:	83 c4 10             	add    $0x10,%esp
c0028d10:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028d14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028d17:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0028d1a:	72 e7                	jb     c0028d03 <hex_dump+0x198>
c0028d1c:	83 ec 0c             	sub    $0xc,%esp
c0028d1f:	6a 7c                	push   $0x7c
c0028d21:	e8 ba 3b 00 00       	call   c002c8e0 <putchar>
c0028d26:	83 c4 10             	add    $0x10,%esp
c0028d29:	83 ec 0c             	sub    $0xc,%esp
c0028d2c:	6a 0a                	push   $0xa
c0028d2e:	e8 ad 3b 00 00       	call   c002c8e0 <putchar>
c0028d33:	83 c4 10             	add    $0x10,%esp
c0028d36:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028d39:	01 45 08             	add    %eax,0x8(%ebp)
c0028d3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028d3f:	01 45 f4             	add    %eax,-0xc(%ebp)
c0028d42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028d45:	29 45 10             	sub    %eax,0x10(%ebp)
c0028d48:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0028d4c:	0f 85 37 fe ff ff    	jne    c0028b89 <hex_dump+0x1e>
c0028d52:	90                   	nop
c0028d53:	c9                   	leave  
c0028d54:	c3                   	ret    

c0028d55 <print_human_readable_size>:
c0028d55:	55                   	push   %ebp
c0028d56:	89 e5                	mov    %esp,%ebp
c0028d58:	83 ec 28             	sub    $0x28,%esp
c0028d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0028d5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028d61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028d64:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0028d67:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028d6a:	83 f0 01             	xor    $0x1,%eax
c0028d6d:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0028d70:	85 c0                	test   %eax,%eax
c0028d72:	75 12                	jne    c0028d86 <print_human_readable_size+0x31>
c0028d74:	83 ec 0c             	sub    $0xc,%esp
c0028d77:	68 59 64 03 c0       	push   $0xc0036459
c0028d7c:	e8 af f2 ff ff       	call   c0028030 <printf>
c0028d81:	83 c4 10             	add    $0x10,%esp
c0028d84:	eb 5a                	jmp    c0028de0 <print_human_readable_size+0x8b>
c0028d86:	c7 45 f4 68 e5 03 c0 	movl   $0xc003e568,-0xc(%ebp)
c0028d8d:	eb 17                	jmp    c0028da6 <print_human_readable_size+0x51>
c0028d8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028d92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0028d95:	0f ac d0 0a          	shrd   $0xa,%edx,%eax
c0028d99:	c1 ea 0a             	shr    $0xa,%edx
c0028d9c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028d9f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028da2:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
c0028da6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0028daa:	72 1b                	jb     c0028dc7 <print_human_readable_size+0x72>
c0028dac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0028db0:	77 09                	ja     c0028dbb <print_human_readable_size+0x66>
c0028db2:	81 7d e0 ff 03 00 00 	cmpl   $0x3ff,-0x20(%ebp)
c0028db9:	76 0c                	jbe    c0028dc7 <print_human_readable_size+0x72>
c0028dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028dbe:	83 c0 04             	add    $0x4,%eax
c0028dc1:	8b 00                	mov    (%eax),%eax
c0028dc3:	85 c0                	test   %eax,%eax
c0028dc5:	75 c8                	jne    c0028d8f <print_human_readable_size+0x3a>
c0028dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028dca:	8b 00                	mov    (%eax),%eax
c0028dcc:	50                   	push   %eax
c0028dcd:	ff 75 e4             	pushl  -0x1c(%ebp)
c0028dd0:	ff 75 e0             	pushl  -0x20(%ebp)
c0028dd3:	68 60 64 03 c0       	push   $0xc0036460
c0028dd8:	e8 53 f2 ff ff       	call   c0028030 <printf>
c0028ddd:	83 c4 10             	add    $0x10,%esp
c0028de0:	90                   	nop
c0028de1:	c9                   	leave  
c0028de2:	c3                   	ret    

c0028de3 <isdigit>:
c0028de3:	55                   	push   %ebp
c0028de4:	89 e5                	mov    %esp,%ebp
c0028de6:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0028dea:	7e 0d                	jle    c0028df9 <isdigit+0x16>
c0028dec:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0028df0:	7f 07                	jg     c0028df9 <isdigit+0x16>
c0028df2:	b8 01 00 00 00       	mov    $0x1,%eax
c0028df7:	eb 05                	jmp    c0028dfe <isdigit+0x1b>
c0028df9:	b8 00 00 00 00       	mov    $0x0,%eax
c0028dfe:	5d                   	pop    %ebp
c0028dff:	c3                   	ret    

c0028e00 <isspace>:
c0028e00:	55                   	push   %ebp
c0028e01:	89 e5                	mov    %esp,%ebp
c0028e03:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c0028e07:	74 1e                	je     c0028e27 <isspace+0x27>
c0028e09:	83 7d 08 0c          	cmpl   $0xc,0x8(%ebp)
c0028e0d:	74 18                	je     c0028e27 <isspace+0x27>
c0028e0f:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c0028e13:	74 12                	je     c0028e27 <isspace+0x27>
c0028e15:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
c0028e19:	74 0c                	je     c0028e27 <isspace+0x27>
c0028e1b:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c0028e1f:	74 06                	je     c0028e27 <isspace+0x27>
c0028e21:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
c0028e25:	75 07                	jne    c0028e2e <isspace+0x2e>
c0028e27:	b8 01 00 00 00       	mov    $0x1,%eax
c0028e2c:	eb 05                	jmp    c0028e33 <isspace+0x33>
c0028e2e:	b8 00 00 00 00       	mov    $0x0,%eax
c0028e33:	5d                   	pop    %ebp
c0028e34:	c3                   	ret    

c0028e35 <atoi>:
c0028e35:	55                   	push   %ebp
c0028e36:	89 e5                	mov    %esp,%ebp
c0028e38:	83 ec 18             	sub    $0x18,%esp
c0028e3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0028e3f:	75 22                	jne    c0028e63 <atoi+0x2e>
c0028e41:	83 ec 0c             	sub    $0xc,%esp
c0028e44:	68 84 64 03 c0       	push   $0xc0036484
c0028e49:	68 8e 64 03 c0       	push   $0xc003648e
c0028e4e:	68 ec 64 03 c0       	push   $0xc00364ec
c0028e53:	6a 0f                	push   $0xf
c0028e55:	68 a5 64 03 c0       	push   $0xc00364a5
c0028e5a:	e8 32 17 00 00       	call   c002a591 <debug_panic>
c0028e5f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028e63:	8b 45 08             	mov    0x8(%ebp),%eax
c0028e66:	0f b6 00             	movzbl (%eax),%eax
c0028e69:	0f b6 c0             	movzbl %al,%eax
c0028e6c:	83 ec 0c             	sub    $0xc,%esp
c0028e6f:	50                   	push   %eax
c0028e70:	e8 8b ff ff ff       	call   c0028e00 <isspace>
c0028e75:	83 c4 10             	add    $0x10,%esp
c0028e78:	85 c0                	test   %eax,%eax
c0028e7a:	75 e3                	jne    c0028e5f <atoi+0x2a>
c0028e7c:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0028e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0028e83:	0f b6 00             	movzbl (%eax),%eax
c0028e86:	3c 2b                	cmp    $0x2b,%al
c0028e88:	75 06                	jne    c0028e90 <atoi+0x5b>
c0028e8a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028e8e:	eb 12                	jmp    c0028ea2 <atoi+0x6d>
c0028e90:	8b 45 08             	mov    0x8(%ebp),%eax
c0028e93:	0f b6 00             	movzbl (%eax),%eax
c0028e96:	3c 2d                	cmp    $0x2d,%al
c0028e98:	75 08                	jne    c0028ea2 <atoi+0x6d>
c0028e9a:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c0028e9e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028ea2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0028ea9:	eb 25                	jmp    c0028ed0 <atoi+0x9b>
c0028eab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0028eae:	89 d0                	mov    %edx,%eax
c0028eb0:	c1 e0 02             	shl    $0x2,%eax
c0028eb3:	01 d0                	add    %edx,%eax
c0028eb5:	01 c0                	add    %eax,%eax
c0028eb7:	89 c2                	mov    %eax,%edx
c0028eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0028ebc:	0f b6 00             	movzbl (%eax),%eax
c0028ebf:	0f be c0             	movsbl %al,%eax
c0028ec2:	83 e8 30             	sub    $0x30,%eax
c0028ec5:	29 c2                	sub    %eax,%edx
c0028ec7:	89 d0                	mov    %edx,%eax
c0028ec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028ecc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028ed0:	8b 45 08             	mov    0x8(%ebp),%eax
c0028ed3:	0f b6 00             	movzbl (%eax),%eax
c0028ed6:	0f be c0             	movsbl %al,%eax
c0028ed9:	83 ec 0c             	sub    $0xc,%esp
c0028edc:	50                   	push   %eax
c0028edd:	e8 01 ff ff ff       	call   c0028de3 <isdigit>
c0028ee2:	83 c4 10             	add    $0x10,%esp
c0028ee5:	85 c0                	test   %eax,%eax
c0028ee7:	75 c2                	jne    c0028eab <atoi+0x76>
c0028ee9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0028eed:	83 f0 01             	xor    $0x1,%eax
c0028ef0:	84 c0                	test   %al,%al
c0028ef2:	74 03                	je     c0028ef7 <atoi+0xc2>
c0028ef4:	f7 5d f0             	negl   -0x10(%ebp)
c0028ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028efa:	c9                   	leave  
c0028efb:	c3                   	ret    

c0028efc <compare_thunk>:
c0028efc:	55                   	push   %ebp
c0028efd:	89 e5                	mov    %esp,%ebp
c0028eff:	83 ec 18             	sub    $0x18,%esp
c0028f02:	8b 45 10             	mov    0x10(%ebp),%eax
c0028f05:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028f08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028f0b:	8b 00                	mov    (%eax),%eax
c0028f0d:	83 ec 08             	sub    $0x8,%esp
c0028f10:	ff 75 0c             	pushl  0xc(%ebp)
c0028f13:	ff 75 08             	pushl  0x8(%ebp)
c0028f16:	ff d0                	call   *%eax
c0028f18:	83 c4 10             	add    $0x10,%esp
c0028f1b:	c9                   	leave  
c0028f1c:	c3                   	ret    

c0028f1d <qsort>:
c0028f1d:	55                   	push   %ebp
c0028f1e:	89 e5                	mov    %esp,%ebp
c0028f20:	83 ec 08             	sub    $0x8,%esp
c0028f23:	83 ec 0c             	sub    $0xc,%esp
c0028f26:	8d 45 14             	lea    0x14(%ebp),%eax
c0028f29:	50                   	push   %eax
c0028f2a:	68 fc 8e 02 c0       	push   $0xc0028efc
c0028f2f:	ff 75 10             	pushl  0x10(%ebp)
c0028f32:	ff 75 0c             	pushl  0xc(%ebp)
c0028f35:	ff 75 08             	pushl  0x8(%ebp)
c0028f38:	e8 5f 01 00 00       	call   c002909c <sort>
c0028f3d:	83 c4 20             	add    $0x20,%esp
c0028f40:	90                   	nop
c0028f41:	c9                   	leave  
c0028f42:	c3                   	ret    

c0028f43 <do_swap>:
c0028f43:	55                   	push   %ebp
c0028f44:	89 e5                	mov    %esp,%ebp
c0028f46:	83 ec 10             	sub    $0x10,%esp
c0028f49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028f4c:	83 e8 01             	sub    $0x1,%eax
c0028f4f:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028f53:	89 c2                	mov    %eax,%edx
c0028f55:	8b 45 08             	mov    0x8(%ebp),%eax
c0028f58:	01 d0                	add    %edx,%eax
c0028f5a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0028f5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0028f60:	83 e8 01             	sub    $0x1,%eax
c0028f63:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028f67:	89 c2                	mov    %eax,%edx
c0028f69:	8b 45 08             	mov    0x8(%ebp),%eax
c0028f6c:	01 d0                	add    %edx,%eax
c0028f6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028f71:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0028f78:	eb 35                	jmp    c0028faf <do_swap+0x6c>
c0028f7a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0028f7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f80:	01 d0                	add    %edx,%eax
c0028f82:	0f b6 00             	movzbl (%eax),%eax
c0028f85:	88 45 f3             	mov    %al,-0xd(%ebp)
c0028f88:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0028f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f8e:	01 c2                	add    %eax,%edx
c0028f90:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0028f93:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f96:	01 c8                	add    %ecx,%eax
c0028f98:	0f b6 00             	movzbl (%eax),%eax
c0028f9b:	88 02                	mov    %al,(%edx)
c0028f9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0028fa0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028fa3:	01 c2                	add    %eax,%edx
c0028fa5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0028fa9:	88 02                	mov    %al,(%edx)
c0028fab:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0028faf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028fb2:	3b 45 14             	cmp    0x14(%ebp),%eax
c0028fb5:	72 c3                	jb     c0028f7a <do_swap+0x37>
c0028fb7:	90                   	nop
c0028fb8:	c9                   	leave  
c0028fb9:	c3                   	ret    

c0028fba <do_compare>:
c0028fba:	55                   	push   %ebp
c0028fbb:	89 e5                	mov    %esp,%ebp
c0028fbd:	83 ec 08             	sub    $0x8,%esp
c0028fc0:	8b 45 10             	mov    0x10(%ebp),%eax
c0028fc3:	83 e8 01             	sub    $0x1,%eax
c0028fc6:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028fca:	89 c2                	mov    %eax,%edx
c0028fcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0028fcf:	01 c2                	add    %eax,%edx
c0028fd1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028fd4:	83 e8 01             	sub    $0x1,%eax
c0028fd7:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028fdb:	89 c1                	mov    %eax,%ecx
c0028fdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0028fe0:	01 c8                	add    %ecx,%eax
c0028fe2:	83 ec 04             	sub    $0x4,%esp
c0028fe5:	ff 75 1c             	pushl  0x1c(%ebp)
c0028fe8:	52                   	push   %edx
c0028fe9:	50                   	push   %eax
c0028fea:	8b 45 18             	mov    0x18(%ebp),%eax
c0028fed:	ff d0                	call   *%eax
c0028fef:	83 c4 10             	add    $0x10,%esp
c0028ff2:	c9                   	leave  
c0028ff3:	c3                   	ret    

c0028ff4 <heapify>:
c0028ff4:	55                   	push   %ebp
c0028ff5:	89 e5                	mov    %esp,%ebp
c0028ff7:	83 ec 18             	sub    $0x18,%esp
c0028ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028ffd:	01 c0                	add    %eax,%eax
c0028fff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029002:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029005:	01 c0                	add    %eax,%eax
c0029007:	83 c0 01             	add    $0x1,%eax
c002900a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002900d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029010:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029013:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029016:	3b 45 10             	cmp    0x10(%ebp),%eax
c0029019:	77 27                	ja     c0029042 <heapify+0x4e>
c002901b:	83 ec 08             	sub    $0x8,%esp
c002901e:	ff 75 1c             	pushl  0x1c(%ebp)
c0029021:	ff 75 18             	pushl  0x18(%ebp)
c0029024:	ff 75 14             	pushl  0x14(%ebp)
c0029027:	ff 75 f4             	pushl  -0xc(%ebp)
c002902a:	ff 75 f0             	pushl  -0x10(%ebp)
c002902d:	ff 75 08             	pushl  0x8(%ebp)
c0029030:	e8 85 ff ff ff       	call   c0028fba <do_compare>
c0029035:	83 c4 20             	add    $0x20,%esp
c0029038:	85 c0                	test   %eax,%eax
c002903a:	7e 06                	jle    c0029042 <heapify+0x4e>
c002903c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002903f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029042:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0029045:	3b 45 10             	cmp    0x10(%ebp),%eax
c0029048:	77 27                	ja     c0029071 <heapify+0x7d>
c002904a:	83 ec 08             	sub    $0x8,%esp
c002904d:	ff 75 1c             	pushl  0x1c(%ebp)
c0029050:	ff 75 18             	pushl  0x18(%ebp)
c0029053:	ff 75 14             	pushl  0x14(%ebp)
c0029056:	ff 75 f4             	pushl  -0xc(%ebp)
c0029059:	ff 75 ec             	pushl  -0x14(%ebp)
c002905c:	ff 75 08             	pushl  0x8(%ebp)
c002905f:	e8 56 ff ff ff       	call   c0028fba <do_compare>
c0029064:	83 c4 20             	add    $0x20,%esp
c0029067:	85 c0                	test   %eax,%eax
c0029069:	7e 06                	jle    c0029071 <heapify+0x7d>
c002906b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002906e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029071:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029074:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0029077:	74 1f                	je     c0029098 <heapify+0xa4>
c0029079:	ff 75 14             	pushl  0x14(%ebp)
c002907c:	ff 75 f4             	pushl  -0xc(%ebp)
c002907f:	ff 75 0c             	pushl  0xc(%ebp)
c0029082:	ff 75 08             	pushl  0x8(%ebp)
c0029085:	e8 b9 fe ff ff       	call   c0028f43 <do_swap>
c002908a:	83 c4 10             	add    $0x10,%esp
c002908d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029090:	89 45 0c             	mov    %eax,0xc(%ebp)
c0029093:	e9 62 ff ff ff       	jmp    c0028ffa <heapify+0x6>
c0029098:	90                   	nop
c0029099:	90                   	nop
c002909a:	c9                   	leave  
c002909b:	c3                   	ret    

c002909c <sort>:
c002909c:	55                   	push   %ebp
c002909d:	89 e5                	mov    %esp,%ebp
c002909f:	83 ec 18             	sub    $0x18,%esp
c00290a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00290a6:	75 27                	jne    c00290cf <sort+0x33>
c00290a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00290ac:	74 21                	je     c00290cf <sort+0x33>
c00290ae:	83 ec 0c             	sub    $0xc,%esp
c00290b1:	68 b8 64 03 c0       	push   $0xc00364b8
c00290b6:	68 8e 64 03 c0       	push   $0xc003648e
c00290bb:	68 f4 64 03 c0       	push   $0xc00364f4
c00290c0:	68 8a 00 00 00       	push   $0x8a
c00290c5:	68 a5 64 03 c0       	push   $0xc00364a5
c00290ca:	e8 c2 14 00 00       	call   c002a591 <debug_panic>
c00290cf:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c00290d3:	75 21                	jne    c00290f6 <sort+0x5a>
c00290d5:	83 ec 0c             	sub    $0xc,%esp
c00290d8:	68 d2 64 03 c0       	push   $0xc00364d2
c00290dd:	68 8e 64 03 c0       	push   $0xc003648e
c00290e2:	68 f4 64 03 c0       	push   $0xc00364f4
c00290e7:	68 8b 00 00 00       	push   $0x8b
c00290ec:	68 a5 64 03 c0       	push   $0xc00364a5
c00290f1:	e8 9b 14 00 00       	call   c002a591 <debug_panic>
c00290f6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00290fa:	75 21                	jne    c002911d <sort+0x81>
c00290fc:	83 ec 0c             	sub    $0xc,%esp
c00290ff:	68 e2 64 03 c0       	push   $0xc00364e2
c0029104:	68 8e 64 03 c0       	push   $0xc003648e
c0029109:	68 f4 64 03 c0       	push   $0xc00364f4
c002910e:	68 8c 00 00 00       	push   $0x8c
c0029113:	68 a5 64 03 c0       	push   $0xc00364a5
c0029118:	e8 74 14 00 00       	call   c002a591 <debug_panic>
c002911d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029120:	d1 e8                	shr    %eax
c0029122:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029125:	eb 21                	jmp    c0029148 <sort+0xac>
c0029127:	83 ec 08             	sub    $0x8,%esp
c002912a:	ff 75 18             	pushl  0x18(%ebp)
c002912d:	ff 75 14             	pushl  0x14(%ebp)
c0029130:	ff 75 10             	pushl  0x10(%ebp)
c0029133:	ff 75 0c             	pushl  0xc(%ebp)
c0029136:	ff 75 f4             	pushl  -0xc(%ebp)
c0029139:	ff 75 08             	pushl  0x8(%ebp)
c002913c:	e8 b3 fe ff ff       	call   c0028ff4 <heapify>
c0029141:	83 c4 20             	add    $0x20,%esp
c0029144:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0029148:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002914c:	75 d9                	jne    c0029127 <sort+0x8b>
c002914e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029151:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029154:	eb 37                	jmp    c002918d <sort+0xf1>
c0029156:	ff 75 10             	pushl  0x10(%ebp)
c0029159:	ff 75 f4             	pushl  -0xc(%ebp)
c002915c:	6a 01                	push   $0x1
c002915e:	ff 75 08             	pushl  0x8(%ebp)
c0029161:	e8 dd fd ff ff       	call   c0028f43 <do_swap>
c0029166:	83 c4 10             	add    $0x10,%esp
c0029169:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002916c:	83 e8 01             	sub    $0x1,%eax
c002916f:	83 ec 08             	sub    $0x8,%esp
c0029172:	ff 75 18             	pushl  0x18(%ebp)
c0029175:	ff 75 14             	pushl  0x14(%ebp)
c0029178:	ff 75 10             	pushl  0x10(%ebp)
c002917b:	50                   	push   %eax
c002917c:	6a 01                	push   $0x1
c002917e:	ff 75 08             	pushl  0x8(%ebp)
c0029181:	e8 6e fe ff ff       	call   c0028ff4 <heapify>
c0029186:	83 c4 20             	add    $0x20,%esp
c0029189:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c002918d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c0029191:	77 c3                	ja     c0029156 <sort+0xba>
c0029193:	90                   	nop
c0029194:	c9                   	leave  
c0029195:	c3                   	ret    

c0029196 <bsearch>:
c0029196:	55                   	push   %ebp
c0029197:	89 e5                	mov    %esp,%ebp
c0029199:	83 ec 08             	sub    $0x8,%esp
c002919c:	83 ec 08             	sub    $0x8,%esp
c002919f:	8d 45 18             	lea    0x18(%ebp),%eax
c00291a2:	50                   	push   %eax
c00291a3:	68 fc 8e 02 c0       	push   $0xc0028efc
c00291a8:	ff 75 14             	pushl  0x14(%ebp)
c00291ab:	ff 75 10             	pushl  0x10(%ebp)
c00291ae:	ff 75 0c             	pushl  0xc(%ebp)
c00291b1:	ff 75 08             	pushl  0x8(%ebp)
c00291b4:	e8 05 00 00 00       	call   c00291be <binary_search>
c00291b9:	83 c4 20             	add    $0x20,%esp
c00291bc:	c9                   	leave  
c00291bd:	c3                   	ret    

c00291be <binary_search>:
c00291be:	55                   	push   %ebp
c00291bf:	89 e5                	mov    %esp,%ebp
c00291c1:	83 ec 28             	sub    $0x28,%esp
c00291c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00291c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00291ca:	8b 45 14             	mov    0x14(%ebp),%eax
c00291cd:	0f af 45 10          	imul   0x10(%ebp),%eax
c00291d1:	89 c2                	mov    %eax,%edx
c00291d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00291d6:	01 d0                	add    %edx,%eax
c00291d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00291db:	eb 65                	jmp    c0029242 <binary_search+0x84>
c00291dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00291e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00291e3:	29 c2                	sub    %eax,%edx
c00291e5:	89 d0                	mov    %edx,%eax
c00291e7:	ba 00 00 00 00       	mov    $0x0,%edx
c00291ec:	f7 75 14             	divl   0x14(%ebp)
c00291ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00291f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00291f5:	d1 e8                	shr    %eax
c00291f7:	0f af 45 14          	imul   0x14(%ebp),%eax
c00291fb:	89 c2                	mov    %eax,%edx
c00291fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029200:	01 d0                	add    %edx,%eax
c0029202:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029205:	83 ec 04             	sub    $0x4,%esp
c0029208:	ff 75 1c             	pushl  0x1c(%ebp)
c002920b:	ff 75 e8             	pushl  -0x18(%ebp)
c002920e:	ff 75 08             	pushl  0x8(%ebp)
c0029211:	8b 45 18             	mov    0x18(%ebp),%eax
c0029214:	ff d0                	call   *%eax
c0029216:	83 c4 10             	add    $0x10,%esp
c0029219:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002921c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0029220:	79 08                	jns    c002922a <binary_search+0x6c>
c0029222:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029225:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029228:	eb 18                	jmp    c0029242 <binary_search+0x84>
c002922a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c002922e:	7e 0d                	jle    c002923d <binary_search+0x7f>
c0029230:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0029233:	8b 45 14             	mov    0x14(%ebp),%eax
c0029236:	01 d0                	add    %edx,%eax
c0029238:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002923b:	eb 05                	jmp    c0029242 <binary_search+0x84>
c002923d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029240:	eb 0d                	jmp    c002924f <binary_search+0x91>
c0029242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029245:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0029248:	72 93                	jb     c00291dd <binary_search+0x1f>
c002924a:	b8 00 00 00 00       	mov    $0x0,%eax
c002924f:	c9                   	leave  
c0029250:	c3                   	ret    

c0029251 <memcpy>:
c0029251:	55                   	push   %ebp
c0029252:	89 e5                	mov    %esp,%ebp
c0029254:	83 ec 18             	sub    $0x18,%esp
c0029257:	8b 45 08             	mov    0x8(%ebp),%eax
c002925a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002925d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029260:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029263:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0029267:	75 24                	jne    c002928d <memcpy+0x3c>
c0029269:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002926d:	74 1e                	je     c002928d <memcpy+0x3c>
c002926f:	83 ec 0c             	sub    $0xc,%esp
c0029272:	68 fc 64 03 c0       	push   $0xc00364fc
c0029277:	68 15 65 03 c0       	push   $0xc0036515
c002927c:	68 0c 66 03 c0       	push   $0xc003660c
c0029281:	6a 0c                	push   $0xc
c0029283:	68 2c 65 03 c0       	push   $0xc003652c
c0029288:	e8 04 13 00 00       	call   c002a591 <debug_panic>
c002928d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0029291:	75 3b                	jne    c00292ce <memcpy+0x7d>
c0029293:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029297:	74 35                	je     c00292ce <memcpy+0x7d>
c0029299:	83 ec 0c             	sub    $0xc,%esp
c002929c:	68 3f 65 03 c0       	push   $0xc003653f
c00292a1:	68 15 65 03 c0       	push   $0xc0036515
c00292a6:	68 0c 66 03 c0       	push   $0xc003660c
c00292ab:	6a 0d                	push   $0xd
c00292ad:	68 2c 65 03 c0       	push   $0xc003652c
c00292b2:	e8 da 12 00 00       	call   c002a591 <debug_panic>
c00292b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00292ba:	8d 50 01             	lea    0x1(%eax),%edx
c00292bd:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00292c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00292c3:	8d 4a 01             	lea    0x1(%edx),%ecx
c00292c6:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c00292c9:	0f b6 12             	movzbl (%edx),%edx
c00292cc:	88 10                	mov    %dl,(%eax)
c00292ce:	8b 45 10             	mov    0x10(%ebp),%eax
c00292d1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00292d4:	89 55 10             	mov    %edx,0x10(%ebp)
c00292d7:	85 c0                	test   %eax,%eax
c00292d9:	75 dc                	jne    c00292b7 <memcpy+0x66>
c00292db:	8b 45 08             	mov    0x8(%ebp),%eax
c00292de:	c9                   	leave  
c00292df:	c3                   	ret    

c00292e0 <memmove>:
c00292e0:	55                   	push   %ebp
c00292e1:	89 e5                	mov    %esp,%ebp
c00292e3:	83 ec 18             	sub    $0x18,%esp
c00292e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00292e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00292ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c00292ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00292f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00292f6:	75 24                	jne    c002931c <memmove+0x3c>
c00292f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00292fc:	74 1e                	je     c002931c <memmove+0x3c>
c00292fe:	83 ec 0c             	sub    $0xc,%esp
c0029301:	68 fc 64 03 c0       	push   $0xc00364fc
c0029306:	68 15 65 03 c0       	push   $0xc0036515
c002930b:	68 14 66 03 c0       	push   $0xc0036614
c0029310:	6a 1d                	push   $0x1d
c0029312:	68 2c 65 03 c0       	push   $0xc003652c
c0029317:	e8 75 12 00 00       	call   c002a591 <debug_panic>
c002931c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0029320:	75 24                	jne    c0029346 <memmove+0x66>
c0029322:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029326:	74 1e                	je     c0029346 <memmove+0x66>
c0029328:	83 ec 0c             	sub    $0xc,%esp
c002932b:	68 3f 65 03 c0       	push   $0xc003653f
c0029330:	68 15 65 03 c0       	push   $0xc0036515
c0029335:	68 14 66 03 c0       	push   $0xc0036614
c002933a:	6a 1e                	push   $0x1e
c002933c:	68 2c 65 03 c0       	push   $0xc003652c
c0029341:	e8 4b 12 00 00       	call   c002a591 <debug_panic>
c0029346:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029349:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002934c:	73 28                	jae    c0029376 <memmove+0x96>
c002934e:	eb 17                	jmp    c0029367 <memmove+0x87>
c0029350:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029353:	8d 50 01             	lea    0x1(%eax),%edx
c0029356:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029359:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002935c:	8d 4a 01             	lea    0x1(%edx),%ecx
c002935f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0029362:	0f b6 12             	movzbl (%edx),%edx
c0029365:	88 10                	mov    %dl,(%eax)
c0029367:	8b 45 10             	mov    0x10(%ebp),%eax
c002936a:	8d 50 ff             	lea    -0x1(%eax),%edx
c002936d:	89 55 10             	mov    %edx,0x10(%ebp)
c0029370:	85 c0                	test   %eax,%eax
c0029372:	75 dc                	jne    c0029350 <memmove+0x70>
c0029374:	eb 2e                	jmp    c00293a4 <memmove+0xc4>
c0029376:	8b 45 10             	mov    0x10(%ebp),%eax
c0029379:	01 45 f4             	add    %eax,-0xc(%ebp)
c002937c:	8b 45 10             	mov    0x10(%ebp),%eax
c002937f:	01 45 f0             	add    %eax,-0x10(%ebp)
c0029382:	eb 13                	jmp    c0029397 <memmove+0xb7>
c0029384:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0029388:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
c002938c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002938f:	0f b6 10             	movzbl (%eax),%edx
c0029392:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029395:	88 10                	mov    %dl,(%eax)
c0029397:	8b 45 10             	mov    0x10(%ebp),%eax
c002939a:	8d 50 ff             	lea    -0x1(%eax),%edx
c002939d:	89 55 10             	mov    %edx,0x10(%ebp)
c00293a0:	85 c0                	test   %eax,%eax
c00293a2:	75 e0                	jne    c0029384 <memmove+0xa4>
c00293a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00293a7:	c9                   	leave  
c00293a8:	c3                   	ret    

c00293a9 <memcmp>:
c00293a9:	55                   	push   %ebp
c00293aa:	89 e5                	mov    %esp,%ebp
c00293ac:	83 ec 18             	sub    $0x18,%esp
c00293af:	8b 45 08             	mov    0x8(%ebp),%eax
c00293b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00293b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00293b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00293bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00293bf:	75 24                	jne    c00293e5 <memcmp+0x3c>
c00293c1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00293c5:	74 1e                	je     c00293e5 <memcmp+0x3c>
c00293c7:	83 ec 0c             	sub    $0xc,%esp
c00293ca:	68 58 65 03 c0       	push   $0xc0036558
c00293cf:	68 15 65 03 c0       	push   $0xc0036515
c00293d4:	68 1c 66 03 c0       	push   $0xc003661c
c00293d9:	6a 3a                	push   $0x3a
c00293db:	68 2c 65 03 c0       	push   $0xc003652c
c00293e0:	e8 ac 11 00 00       	call   c002a591 <debug_panic>
c00293e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00293e9:	75 5a                	jne    c0029445 <memcmp+0x9c>
c00293eb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00293ef:	74 54                	je     c0029445 <memcmp+0x9c>
c00293f1:	83 ec 0c             	sub    $0xc,%esp
c00293f4:	68 6f 65 03 c0       	push   $0xc003656f
c00293f9:	68 15 65 03 c0       	push   $0xc0036515
c00293fe:	68 1c 66 03 c0       	push   $0xc003661c
c0029403:	6a 3b                	push   $0x3b
c0029405:	68 2c 65 03 c0       	push   $0xc003652c
c002940a:	e8 82 11 00 00       	call   c002a591 <debug_panic>
c002940f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029412:	0f b6 10             	movzbl (%eax),%edx
c0029415:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029418:	0f b6 00             	movzbl (%eax),%eax
c002941b:	38 c2                	cmp    %al,%dl
c002941d:	74 1e                	je     c002943d <memcmp+0x94>
c002941f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029422:	0f b6 10             	movzbl (%eax),%edx
c0029425:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029428:	0f b6 00             	movzbl (%eax),%eax
c002942b:	38 c2                	cmp    %al,%dl
c002942d:	76 07                	jbe    c0029436 <memcmp+0x8d>
c002942f:	b8 01 00 00 00       	mov    $0x1,%eax
c0029434:	eb 21                	jmp    c0029457 <memcmp+0xae>
c0029436:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002943b:	eb 1a                	jmp    c0029457 <memcmp+0xae>
c002943d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0029441:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0029445:	8b 45 10             	mov    0x10(%ebp),%eax
c0029448:	8d 50 ff             	lea    -0x1(%eax),%edx
c002944b:	89 55 10             	mov    %edx,0x10(%ebp)
c002944e:	85 c0                	test   %eax,%eax
c0029450:	75 bd                	jne    c002940f <memcmp+0x66>
c0029452:	b8 00 00 00 00       	mov    $0x0,%eax
c0029457:	c9                   	leave  
c0029458:	c3                   	ret    

c0029459 <strcmp>:
c0029459:	55                   	push   %ebp
c002945a:	89 e5                	mov    %esp,%ebp
c002945c:	83 ec 18             	sub    $0x18,%esp
c002945f:	8b 45 08             	mov    0x8(%ebp),%eax
c0029462:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029465:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029468:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002946b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002946f:	75 1e                	jne    c002948f <strcmp+0x36>
c0029471:	83 ec 0c             	sub    $0xc,%esp
c0029474:	68 86 65 03 c0       	push   $0xc0036586
c0029479:	68 15 65 03 c0       	push   $0xc0036515
c002947e:	68 24 66 03 c0       	push   $0xc0036624
c0029483:	6a 4e                	push   $0x4e
c0029485:	68 2c 65 03 c0       	push   $0xc003652c
c002948a:	e8 02 11 00 00       	call   c002a591 <debug_panic>
c002948f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0029493:	75 26                	jne    c00294bb <strcmp+0x62>
c0029495:	83 ec 0c             	sub    $0xc,%esp
c0029498:	68 90 65 03 c0       	push   $0xc0036590
c002949d:	68 15 65 03 c0       	push   $0xc0036515
c00294a2:	68 24 66 03 c0       	push   $0xc0036624
c00294a7:	6a 4f                	push   $0x4f
c00294a9:	68 2c 65 03 c0       	push   $0xc003652c
c00294ae:	e8 de 10 00 00       	call   c002a591 <debug_panic>
c00294b3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00294b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c00294bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00294be:	0f b6 00             	movzbl (%eax),%eax
c00294c1:	84 c0                	test   %al,%al
c00294c3:	74 10                	je     c00294d5 <strcmp+0x7c>
c00294c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00294c8:	0f b6 10             	movzbl (%eax),%edx
c00294cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00294ce:	0f b6 00             	movzbl (%eax),%eax
c00294d1:	38 c2                	cmp    %al,%dl
c00294d3:	74 de                	je     c00294b3 <strcmp+0x5a>
c00294d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00294d8:	0f b6 10             	movzbl (%eax),%edx
c00294db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00294de:	0f b6 00             	movzbl (%eax),%eax
c00294e1:	38 c2                	cmp    %al,%dl
c00294e3:	72 16                	jb     c00294fb <strcmp+0xa2>
c00294e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00294e8:	0f b6 10             	movzbl (%eax),%edx
c00294eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00294ee:	0f b6 00             	movzbl (%eax),%eax
c00294f1:	38 c2                	cmp    %al,%dl
c00294f3:	0f 97 c0             	seta   %al
c00294f6:	0f b6 c0             	movzbl %al,%eax
c00294f9:	eb 05                	jmp    c0029500 <strcmp+0xa7>
c00294fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0029500:	c9                   	leave  
c0029501:	c3                   	ret    

c0029502 <memchr>:
c0029502:	55                   	push   %ebp
c0029503:	89 e5                	mov    %esp,%ebp
c0029505:	83 ec 18             	sub    $0x18,%esp
c0029508:	8b 45 08             	mov    0x8(%ebp),%eax
c002950b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002950e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029511:	88 45 f3             	mov    %al,-0xd(%ebp)
c0029514:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0029518:	75 38                	jne    c0029552 <memchr+0x50>
c002951a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002951e:	74 32                	je     c0029552 <memchr+0x50>
c0029520:	83 ec 0c             	sub    $0xc,%esp
c0029523:	68 9a 65 03 c0       	push   $0xc003659a
c0029528:	68 15 65 03 c0       	push   $0xc0036515
c002952d:	68 2c 66 03 c0       	push   $0xc003662c
c0029532:	6a 63                	push   $0x63
c0029534:	68 2c 65 03 c0       	push   $0xc003652c
c0029539:	e8 53 10 00 00       	call   c002a591 <debug_panic>
c002953e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029541:	0f b6 00             	movzbl (%eax),%eax
c0029544:	3a 45 f3             	cmp    -0xd(%ebp),%al
c0029547:	75 05                	jne    c002954e <memchr+0x4c>
c0029549:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002954c:	eb 16                	jmp    c0029564 <memchr+0x62>
c002954e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0029552:	8b 45 10             	mov    0x10(%ebp),%eax
c0029555:	8d 50 ff             	lea    -0x1(%eax),%edx
c0029558:	89 55 10             	mov    %edx,0x10(%ebp)
c002955b:	85 c0                	test   %eax,%eax
c002955d:	75 df                	jne    c002953e <memchr+0x3c>
c002955f:	b8 00 00 00 00       	mov    $0x0,%eax
c0029564:	c9                   	leave  
c0029565:	c3                   	ret    

c0029566 <strchr>:
c0029566:	55                   	push   %ebp
c0029567:	89 e5                	mov    %esp,%ebp
c0029569:	83 ec 18             	sub    $0x18,%esp
c002956c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002956f:	88 45 f7             	mov    %al,-0x9(%ebp)
c0029572:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0029576:	75 1e                	jne    c0029596 <strchr+0x30>
c0029578:	83 ec 0c             	sub    $0xc,%esp
c002957b:	68 b5 65 03 c0       	push   $0xc00365b5
c0029580:	68 15 65 03 c0       	push   $0xc0036515
c0029585:	68 34 66 03 c0       	push   $0xc0036634
c002958a:	6a 75                	push   $0x75
c002958c:	68 2c 65 03 c0       	push   $0xc003652c
c0029591:	e8 fb 0f 00 00       	call   c002a591 <debug_panic>
c0029596:	8b 45 08             	mov    0x8(%ebp),%eax
c0029599:	0f b6 00             	movzbl (%eax),%eax
c002959c:	3a 45 f7             	cmp    -0x9(%ebp),%al
c002959f:	75 05                	jne    c00295a6 <strchr+0x40>
c00295a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00295a4:	eb 17                	jmp    c00295bd <strchr+0x57>
c00295a6:	8b 45 08             	mov    0x8(%ebp),%eax
c00295a9:	0f b6 00             	movzbl (%eax),%eax
c00295ac:	84 c0                	test   %al,%al
c00295ae:	75 07                	jne    c00295b7 <strchr+0x51>
c00295b0:	b8 00 00 00 00       	mov    $0x0,%eax
c00295b5:	eb 06                	jmp    c00295bd <strchr+0x57>
c00295b7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00295bb:	eb d9                	jmp    c0029596 <strchr+0x30>
c00295bd:	c9                   	leave  
c00295be:	c3                   	ret    

c00295bf <strcspn>:
c00295bf:	55                   	push   %ebp
c00295c0:	89 e5                	mov    %esp,%ebp
c00295c2:	83 ec 18             	sub    $0x18,%esp
c00295c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00295cc:	eb 25                	jmp    c00295f3 <strcspn+0x34>
c00295ce:	8b 55 08             	mov    0x8(%ebp),%edx
c00295d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00295d4:	01 d0                	add    %edx,%eax
c00295d6:	0f b6 00             	movzbl (%eax),%eax
c00295d9:	0f be c0             	movsbl %al,%eax
c00295dc:	83 ec 08             	sub    $0x8,%esp
c00295df:	50                   	push   %eax
c00295e0:	ff 75 0c             	pushl  0xc(%ebp)
c00295e3:	e8 7e ff ff ff       	call   c0029566 <strchr>
c00295e8:	83 c4 10             	add    $0x10,%esp
c00295eb:	85 c0                	test   %eax,%eax
c00295ed:	75 15                	jne    c0029604 <strcspn+0x45>
c00295ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00295f3:	8b 55 08             	mov    0x8(%ebp),%edx
c00295f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00295f9:	01 d0                	add    %edx,%eax
c00295fb:	0f b6 00             	movzbl (%eax),%eax
c00295fe:	84 c0                	test   %al,%al
c0029600:	75 cc                	jne    c00295ce <strcspn+0xf>
c0029602:	eb 01                	jmp    c0029605 <strcspn+0x46>
c0029604:	90                   	nop
c0029605:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029608:	c9                   	leave  
c0029609:	c3                   	ret    

c002960a <strpbrk>:
c002960a:	55                   	push   %ebp
c002960b:	89 e5                	mov    %esp,%ebp
c002960d:	83 ec 08             	sub    $0x8,%esp
c0029610:	eb 25                	jmp    c0029637 <strpbrk+0x2d>
c0029612:	8b 45 08             	mov    0x8(%ebp),%eax
c0029615:	0f b6 00             	movzbl (%eax),%eax
c0029618:	0f be c0             	movsbl %al,%eax
c002961b:	83 ec 08             	sub    $0x8,%esp
c002961e:	50                   	push   %eax
c002961f:	ff 75 0c             	pushl  0xc(%ebp)
c0029622:	e8 3f ff ff ff       	call   c0029566 <strchr>
c0029627:	83 c4 10             	add    $0x10,%esp
c002962a:	85 c0                	test   %eax,%eax
c002962c:	74 05                	je     c0029633 <strpbrk+0x29>
c002962e:	8b 45 08             	mov    0x8(%ebp),%eax
c0029631:	eb 13                	jmp    c0029646 <strpbrk+0x3c>
c0029633:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0029637:	8b 45 08             	mov    0x8(%ebp),%eax
c002963a:	0f b6 00             	movzbl (%eax),%eax
c002963d:	84 c0                	test   %al,%al
c002963f:	75 d1                	jne    c0029612 <strpbrk+0x8>
c0029641:	b8 00 00 00 00       	mov    $0x0,%eax
c0029646:	c9                   	leave  
c0029647:	c3                   	ret    

c0029648 <strrchr>:
c0029648:	55                   	push   %ebp
c0029649:	89 e5                	mov    %esp,%ebp
c002964b:	83 ec 10             	sub    $0x10,%esp
c002964e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029651:	88 45 fb             	mov    %al,-0x5(%ebp)
c0029654:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c002965b:	eb 15                	jmp    c0029672 <strrchr+0x2a>
c002965d:	8b 45 08             	mov    0x8(%ebp),%eax
c0029660:	0f b6 00             	movzbl (%eax),%eax
c0029663:	3a 45 fb             	cmp    -0x5(%ebp),%al
c0029666:	75 06                	jne    c002966e <strrchr+0x26>
c0029668:	8b 45 08             	mov    0x8(%ebp),%eax
c002966b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002966e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0029672:	8b 45 08             	mov    0x8(%ebp),%eax
c0029675:	0f b6 00             	movzbl (%eax),%eax
c0029678:	84 c0                	test   %al,%al
c002967a:	75 e1                	jne    c002965d <strrchr+0x15>
c002967c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002967f:	c9                   	leave  
c0029680:	c3                   	ret    

c0029681 <strspn>:
c0029681:	55                   	push   %ebp
c0029682:	89 e5                	mov    %esp,%ebp
c0029684:	83 ec 18             	sub    $0x18,%esp
c0029687:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002968e:	eb 25                	jmp    c00296b5 <strspn+0x34>
c0029690:	8b 55 08             	mov    0x8(%ebp),%edx
c0029693:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029696:	01 d0                	add    %edx,%eax
c0029698:	0f b6 00             	movzbl (%eax),%eax
c002969b:	0f be c0             	movsbl %al,%eax
c002969e:	83 ec 08             	sub    $0x8,%esp
c00296a1:	50                   	push   %eax
c00296a2:	ff 75 0c             	pushl  0xc(%ebp)
c00296a5:	e8 bc fe ff ff       	call   c0029566 <strchr>
c00296aa:	83 c4 10             	add    $0x10,%esp
c00296ad:	85 c0                	test   %eax,%eax
c00296af:	74 15                	je     c00296c6 <strspn+0x45>
c00296b1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00296b5:	8b 55 08             	mov    0x8(%ebp),%edx
c00296b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00296bb:	01 d0                	add    %edx,%eax
c00296bd:	0f b6 00             	movzbl (%eax),%eax
c00296c0:	84 c0                	test   %al,%al
c00296c2:	75 cc                	jne    c0029690 <strspn+0xf>
c00296c4:	eb 01                	jmp    c00296c7 <strspn+0x46>
c00296c6:	90                   	nop
c00296c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00296ca:	c9                   	leave  
c00296cb:	c3                   	ret    

c00296cc <strstr>:
c00296cc:	55                   	push   %ebp
c00296cd:	89 e5                	mov    %esp,%ebp
c00296cf:	83 ec 18             	sub    $0x18,%esp
c00296d2:	83 ec 0c             	sub    $0xc,%esp
c00296d5:	ff 75 08             	pushl  0x8(%ebp)
c00296d8:	e8 d3 01 00 00       	call   c00298b0 <strlen>
c00296dd:	83 c4 10             	add    $0x10,%esp
c00296e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00296e3:	83 ec 0c             	sub    $0xc,%esp
c00296e6:	ff 75 0c             	pushl  0xc(%ebp)
c00296e9:	e8 c2 01 00 00       	call   c00298b0 <strlen>
c00296ee:	83 c4 10             	add    $0x10,%esp
c00296f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00296f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00296f7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00296fa:	72 40                	jb     c002973c <strstr+0x70>
c00296fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0029703:	eb 2c                	jmp    c0029731 <strstr+0x65>
c0029705:	8b 55 08             	mov    0x8(%ebp),%edx
c0029708:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002970b:	01 d0                	add    %edx,%eax
c002970d:	83 ec 04             	sub    $0x4,%esp
c0029710:	ff 75 ec             	pushl  -0x14(%ebp)
c0029713:	ff 75 0c             	pushl  0xc(%ebp)
c0029716:	50                   	push   %eax
c0029717:	e8 8d fc ff ff       	call   c00293a9 <memcmp>
c002971c:	83 c4 10             	add    $0x10,%esp
c002971f:	85 c0                	test   %eax,%eax
c0029721:	75 0a                	jne    c002972d <strstr+0x61>
c0029723:	8b 55 08             	mov    0x8(%ebp),%edx
c0029726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029729:	01 d0                	add    %edx,%eax
c002972b:	eb 14                	jmp    c0029741 <strstr+0x75>
c002972d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0029731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029734:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0029737:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002973a:	73 c9                	jae    c0029705 <strstr+0x39>
c002973c:	b8 00 00 00 00       	mov    $0x0,%eax
c0029741:	c9                   	leave  
c0029742:	c3                   	ret    

c0029743 <strtok_r>:
c0029743:	55                   	push   %ebp
c0029744:	89 e5                	mov    %esp,%ebp
c0029746:	83 ec 18             	sub    $0x18,%esp
c0029749:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002974d:	75 21                	jne    c0029770 <strtok_r+0x2d>
c002974f:	83 ec 0c             	sub    $0xc,%esp
c0029752:	68 c4 65 03 c0       	push   $0xc00365c4
c0029757:	68 15 65 03 c0       	push   $0xc0036515
c002975c:	68 3c 66 03 c0       	push   $0xc003663c
c0029761:	68 ef 00 00 00       	push   $0xef
c0029766:	68 2c 65 03 c0       	push   $0xc003652c
c002976b:	e8 21 0e 00 00       	call   c002a591 <debug_panic>
c0029770:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029774:	75 21                	jne    c0029797 <strtok_r+0x54>
c0029776:	83 ec 0c             	sub    $0xc,%esp
c0029779:	68 d7 65 03 c0       	push   $0xc00365d7
c002977e:	68 15 65 03 c0       	push   $0xc0036515
c0029783:	68 3c 66 03 c0       	push   $0xc003663c
c0029788:	68 f0 00 00 00       	push   $0xf0
c002978d:	68 2c 65 03 c0       	push   $0xc003652c
c0029792:	e8 fa 0d 00 00       	call   c002a591 <debug_panic>
c0029797:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002979b:	75 08                	jne    c00297a5 <strtok_r+0x62>
c002979d:	8b 45 10             	mov    0x10(%ebp),%eax
c00297a0:	8b 00                	mov    (%eax),%eax
c00297a2:	89 45 08             	mov    %eax,0x8(%ebp)
c00297a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00297a9:	75 3e                	jne    c00297e9 <strtok_r+0xa6>
c00297ab:	83 ec 0c             	sub    $0xc,%esp
c00297ae:	68 e8 65 03 c0       	push   $0xc00365e8
c00297b3:	68 15 65 03 c0       	push   $0xc0036515
c00297b8:	68 3c 66 03 c0       	push   $0xc003663c
c00297bd:	68 f6 00 00 00       	push   $0xf6
c00297c2:	68 2c 65 03 c0       	push   $0xc003652c
c00297c7:	e8 c5 0d 00 00       	call   c002a591 <debug_panic>
c00297cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00297cf:	0f b6 00             	movzbl (%eax),%eax
c00297d2:	84 c0                	test   %al,%al
c00297d4:	75 0f                	jne    c00297e5 <strtok_r+0xa2>
c00297d6:	8b 45 10             	mov    0x10(%ebp),%eax
c00297d9:	8b 55 08             	mov    0x8(%ebp),%edx
c00297dc:	89 10                	mov    %edx,(%eax)
c00297de:	b8 00 00 00 00       	mov    $0x0,%eax
c00297e3:	eb 70                	jmp    c0029855 <strtok_r+0x112>
c00297e5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00297e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00297ec:	0f b6 00             	movzbl (%eax),%eax
c00297ef:	0f be c0             	movsbl %al,%eax
c00297f2:	83 ec 08             	sub    $0x8,%esp
c00297f5:	50                   	push   %eax
c00297f6:	ff 75 0c             	pushl  0xc(%ebp)
c00297f9:	e8 68 fd ff ff       	call   c0029566 <strchr>
c00297fe:	83 c4 10             	add    $0x10,%esp
c0029801:	85 c0                	test   %eax,%eax
c0029803:	75 c7                	jne    c00297cc <strtok_r+0x89>
c0029805:	8b 45 08             	mov    0x8(%ebp),%eax
c0029808:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002980b:	eb 04                	jmp    c0029811 <strtok_r+0xce>
c002980d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0029811:	8b 45 08             	mov    0x8(%ebp),%eax
c0029814:	0f b6 00             	movzbl (%eax),%eax
c0029817:	0f be c0             	movsbl %al,%eax
c002981a:	83 ec 08             	sub    $0x8,%esp
c002981d:	50                   	push   %eax
c002981e:	ff 75 0c             	pushl  0xc(%ebp)
c0029821:	e8 40 fd ff ff       	call   c0029566 <strchr>
c0029826:	83 c4 10             	add    $0x10,%esp
c0029829:	85 c0                	test   %eax,%eax
c002982b:	74 e0                	je     c002980d <strtok_r+0xca>
c002982d:	8b 45 08             	mov    0x8(%ebp),%eax
c0029830:	0f b6 00             	movzbl (%eax),%eax
c0029833:	84 c0                	test   %al,%al
c0029835:	74 13                	je     c002984a <strtok_r+0x107>
c0029837:	8b 45 08             	mov    0x8(%ebp),%eax
c002983a:	c6 00 00             	movb   $0x0,(%eax)
c002983d:	8b 45 08             	mov    0x8(%ebp),%eax
c0029840:	8d 50 01             	lea    0x1(%eax),%edx
c0029843:	8b 45 10             	mov    0x10(%ebp),%eax
c0029846:	89 10                	mov    %edx,(%eax)
c0029848:	eb 08                	jmp    c0029852 <strtok_r+0x10f>
c002984a:	8b 45 10             	mov    0x10(%ebp),%eax
c002984d:	8b 55 08             	mov    0x8(%ebp),%edx
c0029850:	89 10                	mov    %edx,(%eax)
c0029852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029855:	c9                   	leave  
c0029856:	c3                   	ret    

c0029857 <memset>:
c0029857:	55                   	push   %ebp
c0029858:	89 e5                	mov    %esp,%ebp
c002985a:	83 ec 18             	sub    $0x18,%esp
c002985d:	8b 45 08             	mov    0x8(%ebp),%eax
c0029860:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029863:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0029867:	75 35                	jne    c002989e <memset+0x47>
c0029869:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002986d:	74 2f                	je     c002989e <memset+0x47>
c002986f:	83 ec 0c             	sub    $0xc,%esp
c0029872:	68 fc 64 03 c0       	push   $0xc00364fc
c0029877:	68 15 65 03 c0       	push   $0xc0036515
c002987c:	68 48 66 03 c0       	push   $0xc0036648
c0029881:	68 1b 01 00 00       	push   $0x11b
c0029886:	68 2c 65 03 c0       	push   $0xc003652c
c002988b:	e8 01 0d 00 00       	call   c002a591 <debug_panic>
c0029890:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029893:	8d 50 01             	lea    0x1(%eax),%edx
c0029896:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029899:	8b 55 0c             	mov    0xc(%ebp),%edx
c002989c:	88 10                	mov    %dl,(%eax)
c002989e:	8b 45 10             	mov    0x10(%ebp),%eax
c00298a1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00298a4:	89 55 10             	mov    %edx,0x10(%ebp)
c00298a7:	85 c0                	test   %eax,%eax
c00298a9:	75 e5                	jne    c0029890 <memset+0x39>
c00298ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00298ae:	c9                   	leave  
c00298af:	c3                   	ret    

c00298b0 <strlen>:
c00298b0:	55                   	push   %ebp
c00298b1:	89 e5                	mov    %esp,%ebp
c00298b3:	83 ec 18             	sub    $0x18,%esp
c00298b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00298ba:	75 21                	jne    c00298dd <strlen+0x2d>
c00298bc:	83 ec 0c             	sub    $0xc,%esp
c00298bf:	68 b5 65 03 c0       	push   $0xc00365b5
c00298c4:	68 15 65 03 c0       	push   $0xc0036515
c00298c9:	68 50 66 03 c0       	push   $0xc0036650
c00298ce:	68 29 01 00 00       	push   $0x129
c00298d3:	68 2c 65 03 c0       	push   $0xc003652c
c00298d8:	e8 b4 0c 00 00       	call   c002a591 <debug_panic>
c00298dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00298e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00298e3:	eb 04                	jmp    c00298e9 <strlen+0x39>
c00298e5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00298e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00298ec:	0f b6 00             	movzbl (%eax),%eax
c00298ef:	84 c0                	test   %al,%al
c00298f1:	75 f2                	jne    c00298e5 <strlen+0x35>
c00298f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00298f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00298f9:	29 c2                	sub    %eax,%edx
c00298fb:	89 d0                	mov    %edx,%eax
c00298fd:	c9                   	leave  
c00298fe:	c3                   	ret    

c00298ff <strnlen>:
c00298ff:	55                   	push   %ebp
c0029900:	89 e5                	mov    %esp,%ebp
c0029902:	83 ec 10             	sub    $0x10,%esp
c0029905:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c002990c:	eb 04                	jmp    c0029912 <strnlen+0x13>
c002990e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0029912:	8b 55 08             	mov    0x8(%ebp),%edx
c0029915:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0029918:	01 d0                	add    %edx,%eax
c002991a:	0f b6 00             	movzbl (%eax),%eax
c002991d:	84 c0                	test   %al,%al
c002991f:	74 08                	je     c0029929 <strnlen+0x2a>
c0029921:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0029924:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0029927:	72 e5                	jb     c002990e <strnlen+0xf>
c0029929:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002992c:	c9                   	leave  
c002992d:	c3                   	ret    

c002992e <strlcpy>:
c002992e:	55                   	push   %ebp
c002992f:	89 e5                	mov    %esp,%ebp
c0029931:	83 ec 18             	sub    $0x18,%esp
c0029934:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0029938:	75 21                	jne    c002995b <strlcpy+0x2d>
c002993a:	83 ec 0c             	sub    $0xc,%esp
c002993d:	68 f2 65 03 c0       	push   $0xc00365f2
c0029942:	68 15 65 03 c0       	push   $0xc0036515
c0029947:	68 58 66 03 c0       	push   $0xc0036658
c002994c:	68 4a 01 00 00       	push   $0x14a
c0029951:	68 2c 65 03 c0       	push   $0xc003652c
c0029956:	e8 36 0c 00 00       	call   c002a591 <debug_panic>
c002995b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002995f:	75 21                	jne    c0029982 <strlcpy+0x54>
c0029961:	83 ec 0c             	sub    $0xc,%esp
c0029964:	68 fe 65 03 c0       	push   $0xc00365fe
c0029969:	68 15 65 03 c0       	push   $0xc0036515
c002996e:	68 58 66 03 c0       	push   $0xc0036658
c0029973:	68 4b 01 00 00       	push   $0x14b
c0029978:	68 2c 65 03 c0       	push   $0xc003652c
c002997d:	e8 0f 0c 00 00       	call   c002a591 <debug_panic>
c0029982:	83 ec 0c             	sub    $0xc,%esp
c0029985:	ff 75 0c             	pushl  0xc(%ebp)
c0029988:	e8 23 ff ff ff       	call   c00298b0 <strlen>
c002998d:	83 c4 10             	add    $0x10,%esp
c0029990:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029993:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029997:	74 36                	je     c00299cf <strlcpy+0xa1>
c0029999:	8b 45 10             	mov    0x10(%ebp),%eax
c002999c:	83 e8 01             	sub    $0x1,%eax
c002999f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00299a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00299a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00299a8:	73 06                	jae    c00299b0 <strlcpy+0x82>
c00299aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00299ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00299b0:	83 ec 04             	sub    $0x4,%esp
c00299b3:	ff 75 f4             	pushl  -0xc(%ebp)
c00299b6:	ff 75 0c             	pushl  0xc(%ebp)
c00299b9:	ff 75 08             	pushl  0x8(%ebp)
c00299bc:	e8 90 f8 ff ff       	call   c0029251 <memcpy>
c00299c1:	83 c4 10             	add    $0x10,%esp
c00299c4:	8b 55 08             	mov    0x8(%ebp),%edx
c00299c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00299ca:	01 d0                	add    %edx,%eax
c00299cc:	c6 00 00             	movb   $0x0,(%eax)
c00299cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00299d2:	c9                   	leave  
c00299d3:	c3                   	ret    

c00299d4 <strlcat>:
c00299d4:	55                   	push   %ebp
c00299d5:	89 e5                	mov    %esp,%ebp
c00299d7:	83 ec 18             	sub    $0x18,%esp
c00299da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00299de:	75 21                	jne    c0029a01 <strlcat+0x2d>
c00299e0:	83 ec 0c             	sub    $0xc,%esp
c00299e3:	68 f2 65 03 c0       	push   $0xc00365f2
c00299e8:	68 15 65 03 c0       	push   $0xc0036515
c00299ed:	68 60 66 03 c0       	push   $0xc0036660
c00299f2:	68 68 01 00 00       	push   $0x168
c00299f7:	68 2c 65 03 c0       	push   $0xc003652c
c00299fc:	e8 90 0b 00 00       	call   c002a591 <debug_panic>
c0029a01:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0029a05:	75 21                	jne    c0029a28 <strlcat+0x54>
c0029a07:	83 ec 0c             	sub    $0xc,%esp
c0029a0a:	68 fe 65 03 c0       	push   $0xc00365fe
c0029a0f:	68 15 65 03 c0       	push   $0xc0036515
c0029a14:	68 60 66 03 c0       	push   $0xc0036660
c0029a19:	68 69 01 00 00       	push   $0x169
c0029a1e:	68 2c 65 03 c0       	push   $0xc003652c
c0029a23:	e8 69 0b 00 00       	call   c002a591 <debug_panic>
c0029a28:	83 ec 0c             	sub    $0xc,%esp
c0029a2b:	ff 75 0c             	pushl  0xc(%ebp)
c0029a2e:	e8 7d fe ff ff       	call   c00298b0 <strlen>
c0029a33:	83 c4 10             	add    $0x10,%esp
c0029a36:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029a39:	83 ec 0c             	sub    $0xc,%esp
c0029a3c:	ff 75 08             	pushl  0x8(%ebp)
c0029a3f:	e8 6c fe ff ff       	call   c00298b0 <strlen>
c0029a44:	83 c4 10             	add    $0x10,%esp
c0029a47:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029a4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029a4e:	74 4c                	je     c0029a9c <strlcat+0xc8>
c0029a50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0029a53:	3b 45 10             	cmp    0x10(%ebp),%eax
c0029a56:	73 44                	jae    c0029a9c <strlcat+0xc8>
c0029a58:	8b 45 10             	mov    0x10(%ebp),%eax
c0029a5b:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0029a5e:	83 e8 01             	sub    $0x1,%eax
c0029a61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029a64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029a67:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0029a6a:	73 06                	jae    c0029a72 <strlcat+0x9e>
c0029a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029a6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029a72:	8b 55 08             	mov    0x8(%ebp),%edx
c0029a75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0029a78:	01 d0                	add    %edx,%eax
c0029a7a:	83 ec 04             	sub    $0x4,%esp
c0029a7d:	ff 75 f4             	pushl  -0xc(%ebp)
c0029a80:	ff 75 0c             	pushl  0xc(%ebp)
c0029a83:	50                   	push   %eax
c0029a84:	e8 c8 f7 ff ff       	call   c0029251 <memcpy>
c0029a89:	83 c4 10             	add    $0x10,%esp
c0029a8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029a92:	01 c2                	add    %eax,%edx
c0029a94:	8b 45 08             	mov    0x8(%ebp),%eax
c0029a97:	01 d0                	add    %edx,%eax
c0029a99:	c6 00 00             	movb   $0x0,(%eax)
c0029a9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0029a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0029aa2:	01 d0                	add    %edx,%eax
c0029aa4:	c9                   	leave  
c0029aa5:	c3                   	ret    

c0029aa6 <divl>:
c0029aa6:	55                   	push   %ebp
c0029aa7:	89 e5                	mov    %esp,%ebp
c0029aa9:	83 ec 18             	sub    $0x18,%esp
c0029aac:	8b 45 08             	mov    0x8(%ebp),%eax
c0029aaf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029ab2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029ab5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029ab8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029abb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029abe:	89 d0                	mov    %edx,%eax
c0029ac0:	31 d2                	xor    %edx,%edx
c0029ac2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029ac5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029ac8:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029acb:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0029ace:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029ad1:	f7 75 10             	divl   0x10(%ebp)
c0029ad4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029ada:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029add:	c9                   	leave  
c0029ade:	c3                   	ret    

c0029adf <nlz>:
c0029adf:	55                   	push   %ebp
c0029ae0:	89 e5                	mov    %esp,%ebp
c0029ae2:	83 ec 10             	sub    $0x10,%esp
c0029ae5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0029aec:	81 7d 08 ff ff 00 00 	cmpl   $0xffff,0x8(%ebp)
c0029af3:	77 08                	ja     c0029afd <nlz+0x1e>
c0029af5:	83 45 fc 10          	addl   $0x10,-0x4(%ebp)
c0029af9:	c1 65 08 10          	shll   $0x10,0x8(%ebp)
c0029afd:	81 7d 08 ff ff ff 00 	cmpl   $0xffffff,0x8(%ebp)
c0029b04:	77 08                	ja     c0029b0e <nlz+0x2f>
c0029b06:	83 45 fc 08          	addl   $0x8,-0x4(%ebp)
c0029b0a:	c1 65 08 08          	shll   $0x8,0x8(%ebp)
c0029b0e:	81 7d 08 ff ff ff 0f 	cmpl   $0xfffffff,0x8(%ebp)
c0029b15:	77 08                	ja     c0029b1f <nlz+0x40>
c0029b17:	83 45 fc 04          	addl   $0x4,-0x4(%ebp)
c0029b1b:	c1 65 08 04          	shll   $0x4,0x8(%ebp)
c0029b1f:	81 7d 08 ff ff ff 3f 	cmpl   $0x3fffffff,0x8(%ebp)
c0029b26:	77 08                	ja     c0029b30 <nlz+0x51>
c0029b28:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
c0029b2c:	c1 65 08 02          	shll   $0x2,0x8(%ebp)
c0029b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0029b33:	85 c0                	test   %eax,%eax
c0029b35:	78 04                	js     c0029b3b <nlz+0x5c>
c0029b37:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0029b3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0029b3e:	c9                   	leave  
c0029b3f:	c3                   	ret    

c0029b40 <udiv64>:
c0029b40:	55                   	push   %ebp
c0029b41:	89 e5                	mov    %esp,%ebp
c0029b43:	57                   	push   %edi
c0029b44:	56                   	push   %esi
c0029b45:	53                   	push   %ebx
c0029b46:	83 ec 44             	sub    $0x44,%esp
c0029b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0029b4c:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0029b4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029b52:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0029b55:	8b 45 10             	mov    0x10(%ebp),%eax
c0029b58:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0029b5b:	8b 45 14             	mov    0x14(%ebp),%eax
c0029b5e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0029b61:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029b64:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0029b67:	89 d0                	mov    %edx,%eax
c0029b69:	31 d2                	xor    %edx,%edx
c0029b6b:	09 d0                	or     %edx,%eax
c0029b6d:	85 c0                	test   %eax,%eax
c0029b6f:	0f 85 a3 00 00 00    	jne    c0029c18 <udiv64+0xd8>
c0029b75:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0029b7c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0029b83:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029b86:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0029b89:	89 d0                	mov    %edx,%eax
c0029b8b:	31 d2                	xor    %edx,%edx
c0029b8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0029b90:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029b93:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0029b96:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029b99:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0029b9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0029b9f:	ba 00 00 00 00       	mov    $0x0,%edx
c0029ba4:	f7 75 dc             	divl   -0x24(%ebp)
c0029ba7:	89 d0                	mov    %edx,%eax
c0029ba9:	ba 00 00 00 00       	mov    $0x0,%edx
c0029bae:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0029bb1:	89 cb                	mov    %ecx,%ebx
c0029bb3:	0f af da             	imul   %edx,%ebx
c0029bb6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0029bb9:	0f af c8             	imul   %eax,%ecx
c0029bbc:	01 d9                	add    %ebx,%ecx
c0029bbe:	f7 65 e8             	mull   -0x18(%ebp)
c0029bc1:	01 d1                	add    %edx,%ecx
c0029bc3:	89 ca                	mov    %ecx,%edx
c0029bc5:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0029bc8:	bb 00 00 00 00       	mov    $0x0,%ebx
c0029bcd:	01 c8                	add    %ecx,%eax
c0029bcf:	11 da                	adc    %ebx,%edx
c0029bd1:	83 ec 04             	sub    $0x4,%esp
c0029bd4:	ff 75 dc             	pushl  -0x24(%ebp)
c0029bd7:	52                   	push   %edx
c0029bd8:	50                   	push   %eax
c0029bd9:	e8 c8 fe ff ff       	call   c0029aa6 <divl>
c0029bde:	83 c4 10             	add    $0x10,%esp
c0029be1:	89 c6                	mov    %eax,%esi
c0029be3:	bf 00 00 00 00       	mov    $0x0,%edi
c0029be8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0029beb:	ba 00 00 00 00       	mov    $0x0,%edx
c0029bf0:	f7 75 dc             	divl   -0x24(%ebp)
c0029bf3:	ba 00 00 00 00       	mov    $0x0,%edx
c0029bf8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0029bfb:	89 cb                	mov    %ecx,%ebx
c0029bfd:	0f af da             	imul   %edx,%ebx
c0029c00:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0029c03:	0f af c8             	imul   %eax,%ecx
c0029c06:	01 d9                	add    %ebx,%ecx
c0029c08:	f7 65 e8             	mull   -0x18(%ebp)
c0029c0b:	01 d1                	add    %edx,%ecx
c0029c0d:	89 ca                	mov    %ecx,%edx
c0029c0f:	01 f0                	add    %esi,%eax
c0029c11:	11 fa                	adc    %edi,%edx
c0029c13:	e9 e8 00 00 00       	jmp    c0029d00 <udiv64+0x1c0>
c0029c18:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029c1b:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0029c1e:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029c21:	77 19                	ja     c0029c3c <udiv64+0xfc>
c0029c23:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029c26:	72 05                	jb     c0029c2d <udiv64+0xed>
c0029c28:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0029c2b:	73 0f                	jae    c0029c3c <udiv64+0xfc>
c0029c2d:	b8 00 00 00 00       	mov    $0x0,%eax
c0029c32:	ba 00 00 00 00       	mov    $0x0,%edx
c0029c37:	e9 c4 00 00 00       	jmp    c0029d00 <udiv64+0x1c0>
c0029c3c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029c3f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0029c42:	89 d0                	mov    %edx,%eax
c0029c44:	31 d2                	xor    %edx,%edx
c0029c46:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0029c49:	83 ec 04             	sub    $0x4,%esp
c0029c4c:	ff 75 d8             	pushl  -0x28(%ebp)
c0029c4f:	e8 8b fe ff ff       	call   c0029adf <nlz>
c0029c54:	83 c4 08             	add    $0x8,%esp
c0029c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0029c5a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0029c5d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029c60:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0029c63:	0f a5 c2             	shld   %cl,%eax,%edx
c0029c66:	d3 e0                	shl    %cl,%eax
c0029c68:	f6 c1 20             	test   $0x20,%cl
c0029c6b:	74 04                	je     c0029c71 <udiv64+0x131>
c0029c6d:	89 c2                	mov    %eax,%edx
c0029c6f:	31 c0                	xor    %eax,%eax
c0029c71:	89 d0                	mov    %edx,%eax
c0029c73:	31 d2                	xor    %edx,%edx
c0029c75:	89 c1                	mov    %eax,%ecx
c0029c77:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029c7a:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0029c7d:	0f ac d0 01          	shrd   $0x1,%edx,%eax
c0029c81:	d1 ea                	shr    %edx
c0029c83:	83 ec 04             	sub    $0x4,%esp
c0029c86:	51                   	push   %ecx
c0029c87:	52                   	push   %edx
c0029c88:	50                   	push   %eax
c0029c89:	e8 18 fe ff ff       	call   c0029aa6 <divl>
c0029c8e:	83 c4 10             	add    $0x10,%esp
c0029c91:	89 c2                	mov    %eax,%edx
c0029c93:	b8 1f 00 00 00       	mov    $0x1f,%eax
c0029c98:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0029c9b:	89 c1                	mov    %eax,%ecx
c0029c9d:	d3 ea                	shr    %cl,%edx
c0029c9f:	89 d0                	mov    %edx,%eax
c0029ca1:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0029ca4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c0029cab:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0029cae:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0029cb1:	83 c0 ff             	add    $0xffffffff,%eax
c0029cb4:	83 d2 ff             	adc    $0xffffffff,%edx
c0029cb7:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0029cba:	89 cb                	mov    %ecx,%ebx
c0029cbc:	0f af da             	imul   %edx,%ebx
c0029cbf:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c0029cc2:	0f af c8             	imul   %eax,%ecx
c0029cc5:	01 d9                	add    %ebx,%ecx
c0029cc7:	f7 65 b0             	mull   -0x50(%ebp)
c0029cca:	01 d1                	add    %edx,%ecx
c0029ccc:	89 ca                	mov    %ecx,%edx
c0029cce:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0029cd1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
c0029cd4:	29 c1                	sub    %eax,%ecx
c0029cd6:	19 d3                	sbb    %edx,%ebx
c0029cd8:	89 c8                	mov    %ecx,%eax
c0029cda:	89 da                	mov    %ebx,%edx
c0029cdc:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029cdf:	77 18                	ja     c0029cf9 <udiv64+0x1b9>
c0029ce1:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029ce4:	72 05                	jb     c0029ceb <udiv64+0x1ab>
c0029ce6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0029ce9:	73 0e                	jae    c0029cf9 <udiv64+0x1b9>
c0029ceb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0029cee:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0029cf1:	83 c0 ff             	add    $0xffffffff,%eax
c0029cf4:	83 d2 ff             	adc    $0xffffffff,%edx
c0029cf7:	eb 06                	jmp    c0029cff <udiv64+0x1bf>
c0029cf9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0029cfc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0029cff:	90                   	nop
c0029d00:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0029d03:	5b                   	pop    %ebx
c0029d04:	5e                   	pop    %esi
c0029d05:	5f                   	pop    %edi
c0029d06:	5d                   	pop    %ebp
c0029d07:	c3                   	ret    

c0029d08 <umod64>:
c0029d08:	55                   	push   %ebp
c0029d09:	89 e5                	mov    %esp,%ebp
c0029d0b:	53                   	push   %ebx
c0029d0c:	83 ec 14             	sub    $0x14,%esp
c0029d0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0029d12:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029d15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029d18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029d1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0029d1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029d21:	8b 45 14             	mov    0x14(%ebp),%eax
c0029d24:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029d27:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0029d2a:	ff 75 ec             	pushl  -0x14(%ebp)
c0029d2d:	ff 75 e8             	pushl  -0x18(%ebp)
c0029d30:	ff 75 f4             	pushl  -0xc(%ebp)
c0029d33:	ff 75 f0             	pushl  -0x10(%ebp)
c0029d36:	e8 05 fe ff ff       	call   c0029b40 <udiv64>
c0029d3b:	83 c4 10             	add    $0x10,%esp
c0029d3e:	89 c2                	mov    %eax,%edx
c0029d40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029d43:	0f af c2             	imul   %edx,%eax
c0029d46:	29 c3                	sub    %eax,%ebx
c0029d48:	89 d8                	mov    %ebx,%eax
c0029d4a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0029d4d:	c9                   	leave  
c0029d4e:	c3                   	ret    

c0029d4f <sdiv64>:
c0029d4f:	55                   	push   %ebp
c0029d50:	89 e5                	mov    %esp,%ebp
c0029d52:	83 ec 30             	sub    $0x30,%esp
c0029d55:	8b 45 08             	mov    0x8(%ebp),%eax
c0029d58:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0029d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029d5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0029d61:	8b 45 10             	mov    0x10(%ebp),%eax
c0029d64:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0029d67:	8b 45 14             	mov    0x14(%ebp),%eax
c0029d6a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0029d6d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0029d71:	79 0f                	jns    c0029d82 <sdiv64+0x33>
c0029d73:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0029d76:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0029d79:	f7 d8                	neg    %eax
c0029d7b:	83 d2 00             	adc    $0x0,%edx
c0029d7e:	f7 da                	neg    %edx
c0029d80:	eb 06                	jmp    c0029d88 <sdiv64+0x39>
c0029d82:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0029d85:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0029d88:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029d8b:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0029d8e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0029d92:	79 0f                	jns    c0029da3 <sdiv64+0x54>
c0029d94:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0029d97:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0029d9a:	f7 d8                	neg    %eax
c0029d9c:	83 d2 00             	adc    $0x0,%edx
c0029d9f:	f7 da                	neg    %edx
c0029da1:	eb 06                	jmp    c0029da9 <sdiv64+0x5a>
c0029da3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0029da6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0029da9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029dac:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029daf:	ff 75 f4             	pushl  -0xc(%ebp)
c0029db2:	ff 75 f0             	pushl  -0x10(%ebp)
c0029db5:	ff 75 fc             	pushl  -0x4(%ebp)
c0029db8:	ff 75 f8             	pushl  -0x8(%ebp)
c0029dbb:	e8 80 fd ff ff       	call   c0029b40 <udiv64>
c0029dc0:	83 c4 10             	add    $0x10,%esp
c0029dc3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029dc6:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0029dc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0029dcc:	f7 d0                	not    %eax
c0029dce:	c1 e8 1f             	shr    $0x1f,%eax
c0029dd1:	89 c2                	mov    %eax,%edx
c0029dd3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0029dd6:	c1 e8 1f             	shr    $0x1f,%eax
c0029dd9:	31 d0                	xor    %edx,%eax
c0029ddb:	84 c0                	test   %al,%al
c0029ddd:	74 08                	je     c0029de7 <sdiv64+0x98>
c0029ddf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029de2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029de5:	eb 0d                	jmp    c0029df4 <sdiv64+0xa5>
c0029de7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029dea:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029ded:	f7 d8                	neg    %eax
c0029def:	83 d2 00             	adc    $0x0,%edx
c0029df2:	f7 da                	neg    %edx
c0029df4:	c9                   	leave  
c0029df5:	c3                   	ret    

c0029df6 <smod64>:
c0029df6:	55                   	push   %ebp
c0029df7:	89 e5                	mov    %esp,%ebp
c0029df9:	53                   	push   %ebx
c0029dfa:	83 ec 14             	sub    $0x14,%esp
c0029dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0029e00:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029e03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029e06:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029e09:	8b 45 10             	mov    0x10(%ebp),%eax
c0029e0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029e0f:	8b 45 14             	mov    0x14(%ebp),%eax
c0029e12:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029e15:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0029e18:	ff 75 ec             	pushl  -0x14(%ebp)
c0029e1b:	ff 75 e8             	pushl  -0x18(%ebp)
c0029e1e:	ff 75 f4             	pushl  -0xc(%ebp)
c0029e21:	ff 75 f0             	pushl  -0x10(%ebp)
c0029e24:	e8 26 ff ff ff       	call   c0029d4f <sdiv64>
c0029e29:	83 c4 10             	add    $0x10,%esp
c0029e2c:	89 c2                	mov    %eax,%edx
c0029e2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029e31:	0f af c2             	imul   %edx,%eax
c0029e34:	29 c3                	sub    %eax,%ebx
c0029e36:	89 d8                	mov    %ebx,%eax
c0029e38:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0029e3b:	c9                   	leave  
c0029e3c:	c3                   	ret    

c0029e3d <__divdi3>:
c0029e3d:	55                   	push   %ebp
c0029e3e:	89 e5                	mov    %esp,%ebp
c0029e40:	83 ec 10             	sub    $0x10,%esp
c0029e43:	8b 45 08             	mov    0x8(%ebp),%eax
c0029e46:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029e49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029e4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029e4f:	8b 45 10             	mov    0x10(%ebp),%eax
c0029e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029e55:	8b 45 14             	mov    0x14(%ebp),%eax
c0029e58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029e5b:	ff 75 f4             	pushl  -0xc(%ebp)
c0029e5e:	ff 75 f0             	pushl  -0x10(%ebp)
c0029e61:	ff 75 fc             	pushl  -0x4(%ebp)
c0029e64:	ff 75 f8             	pushl  -0x8(%ebp)
c0029e67:	e8 e3 fe ff ff       	call   c0029d4f <sdiv64>
c0029e6c:	83 c4 10             	add    $0x10,%esp
c0029e6f:	c9                   	leave  
c0029e70:	c3                   	ret    

c0029e71 <__moddi3>:
c0029e71:	55                   	push   %ebp
c0029e72:	89 e5                	mov    %esp,%ebp
c0029e74:	83 ec 10             	sub    $0x10,%esp
c0029e77:	8b 45 08             	mov    0x8(%ebp),%eax
c0029e7a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029e7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029e80:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029e83:	8b 45 10             	mov    0x10(%ebp),%eax
c0029e86:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029e89:	8b 45 14             	mov    0x14(%ebp),%eax
c0029e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029e8f:	ff 75 f4             	pushl  -0xc(%ebp)
c0029e92:	ff 75 f0             	pushl  -0x10(%ebp)
c0029e95:	ff 75 fc             	pushl  -0x4(%ebp)
c0029e98:	ff 75 f8             	pushl  -0x8(%ebp)
c0029e9b:	e8 56 ff ff ff       	call   c0029df6 <smod64>
c0029ea0:	83 c4 10             	add    $0x10,%esp
c0029ea3:	99                   	cltd   
c0029ea4:	c9                   	leave  
c0029ea5:	c3                   	ret    

c0029ea6 <__udivdi3>:
c0029ea6:	55                   	push   %ebp
c0029ea7:	89 e5                	mov    %esp,%ebp
c0029ea9:	83 ec 10             	sub    $0x10,%esp
c0029eac:	8b 45 08             	mov    0x8(%ebp),%eax
c0029eaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029eb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029eb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029eb8:	8b 45 10             	mov    0x10(%ebp),%eax
c0029ebb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029ebe:	8b 45 14             	mov    0x14(%ebp),%eax
c0029ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029ec4:	ff 75 f4             	pushl  -0xc(%ebp)
c0029ec7:	ff 75 f0             	pushl  -0x10(%ebp)
c0029eca:	ff 75 fc             	pushl  -0x4(%ebp)
c0029ecd:	ff 75 f8             	pushl  -0x8(%ebp)
c0029ed0:	e8 6b fc ff ff       	call   c0029b40 <udiv64>
c0029ed5:	83 c4 10             	add    $0x10,%esp
c0029ed8:	c9                   	leave  
c0029ed9:	c3                   	ret    

c0029eda <__umoddi3>:
c0029eda:	55                   	push   %ebp
c0029edb:	89 e5                	mov    %esp,%ebp
c0029edd:	83 ec 10             	sub    $0x10,%esp
c0029ee0:	8b 45 08             	mov    0x8(%ebp),%eax
c0029ee3:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029ee9:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029eec:	8b 45 10             	mov    0x10(%ebp),%eax
c0029eef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029ef2:	8b 45 14             	mov    0x14(%ebp),%eax
c0029ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029ef8:	ff 75 f4             	pushl  -0xc(%ebp)
c0029efb:	ff 75 f0             	pushl  -0x10(%ebp)
c0029efe:	ff 75 fc             	pushl  -0x4(%ebp)
c0029f01:	ff 75 f8             	pushl  -0x8(%ebp)
c0029f04:	e8 ff fd ff ff       	call   c0029d08 <umod64>
c0029f09:	83 c4 10             	add    $0x10,%esp
c0029f0c:	ba 00 00 00 00       	mov    $0x0,%edx
c0029f11:	c9                   	leave  
c0029f12:	c3                   	ret    

c0029f13 <calculate_chksum>:
c0029f13:	55                   	push   %ebp
c0029f14:	89 e5                	mov    %esp,%ebp
c0029f16:	83 ec 20             	sub    $0x20,%esp
c0029f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0029f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029f1f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0029f26:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0029f2d:	eb 5a                	jmp    c0029f89 <calculate_chksum+0x76>
c0029f2f:	c7 45 f0 94 00 00 00 	movl   $0x94,-0x10(%ebp)
c0029f36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029f39:	83 c0 08             	add    $0x8,%eax
c0029f3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029f3f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029f42:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0029f45:	72 0f                	jb     c0029f56 <calculate_chksum+0x43>
c0029f47:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029f4a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0029f4d:	73 07                	jae    c0029f56 <calculate_chksum+0x43>
c0029f4f:	b8 01 00 00 00       	mov    $0x1,%eax
c0029f54:	eb 05                	jmp    c0029f5b <calculate_chksum+0x48>
c0029f56:	b8 00 00 00 00       	mov    $0x0,%eax
c0029f5b:	88 45 eb             	mov    %al,-0x15(%ebp)
c0029f5e:	80 65 eb 01          	andb   $0x1,-0x15(%ebp)
c0029f62:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0029f66:	83 f0 01             	xor    $0x1,%eax
c0029f69:	84 c0                	test   %al,%al
c0029f6b:	74 10                	je     c0029f7d <calculate_chksum+0x6a>
c0029f6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0029f70:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029f73:	01 d0                	add    %edx,%eax
c0029f75:	0f b6 00             	movzbl (%eax),%eax
c0029f78:	0f b6 c0             	movzbl %al,%eax
c0029f7b:	eb 05                	jmp    c0029f82 <calculate_chksum+0x6f>
c0029f7d:	b8 20 00 00 00       	mov    $0x20,%eax
c0029f82:	01 45 fc             	add    %eax,-0x4(%ebp)
c0029f85:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0029f89:	81 7d f8 ff 01 00 00 	cmpl   $0x1ff,-0x8(%ebp)
c0029f90:	76 9d                	jbe    c0029f2f <calculate_chksum+0x1c>
c0029f92:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0029f95:	c9                   	leave  
c0029f96:	c3                   	ret    

c0029f97 <strip_antisocial_prefixes>:
c0029f97:	55                   	push   %ebp
c0029f98:	89 e5                	mov    %esp,%ebp
c0029f9a:	83 ec 08             	sub    $0x8,%esp
c0029f9d:	eb 16                	jmp    c0029fb5 <strip_antisocial_prefixes+0x1e>
c0029f9f:	83 ec 08             	sub    $0x8,%esp
c0029fa2:	6a 2f                	push   $0x2f
c0029fa4:	ff 75 08             	pushl  0x8(%ebp)
c0029fa7:	e8 ba f5 ff ff       	call   c0029566 <strchr>
c0029fac:	83 c4 10             	add    $0x10,%esp
c0029faf:	83 c0 01             	add    $0x1,%eax
c0029fb2:	89 45 08             	mov    %eax,0x8(%ebp)
c0029fb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0029fb8:	0f b6 00             	movzbl (%eax),%eax
c0029fbb:	3c 2f                	cmp    $0x2f,%al
c0029fbd:	74 e0                	je     c0029f9f <strip_antisocial_prefixes+0x8>
c0029fbf:	83 ec 04             	sub    $0x4,%esp
c0029fc2:	6a 02                	push   $0x2
c0029fc4:	68 68 66 03 c0       	push   $0xc0036668
c0029fc9:	ff 75 08             	pushl  0x8(%ebp)
c0029fcc:	e8 d8 f3 ff ff       	call   c00293a9 <memcmp>
c0029fd1:	83 c4 10             	add    $0x10,%esp
c0029fd4:	85 c0                	test   %eax,%eax
c0029fd6:	74 c7                	je     c0029f9f <strip_antisocial_prefixes+0x8>
c0029fd8:	83 ec 04             	sub    $0x4,%esp
c0029fdb:	6a 03                	push   $0x3
c0029fdd:	68 6b 66 03 c0       	push   $0xc003666b
c0029fe2:	ff 75 08             	pushl  0x8(%ebp)
c0029fe5:	e8 bf f3 ff ff       	call   c00293a9 <memcmp>
c0029fea:	83 c4 10             	add    $0x10,%esp
c0029fed:	85 c0                	test   %eax,%eax
c0029fef:	74 ae                	je     c0029f9f <strip_antisocial_prefixes+0x8>
c0029ff1:	8b 45 08             	mov    0x8(%ebp),%eax
c0029ff4:	0f b6 00             	movzbl (%eax),%eax
c0029ff7:	84 c0                	test   %al,%al
c0029ff9:	74 1c                	je     c002a017 <strip_antisocial_prefixes+0x80>
c0029ffb:	83 ec 08             	sub    $0x8,%esp
c0029ffe:	68 6f 66 03 c0       	push   $0xc003666f
c002a003:	ff 75 08             	pushl  0x8(%ebp)
c002a006:	e8 4e f4 ff ff       	call   c0029459 <strcmp>
c002a00b:	83 c4 10             	add    $0x10,%esp
c002a00e:	85 c0                	test   %eax,%eax
c002a010:	74 05                	je     c002a017 <strip_antisocial_prefixes+0x80>
c002a012:	8b 45 08             	mov    0x8(%ebp),%eax
c002a015:	eb 05                	jmp    c002a01c <strip_antisocial_prefixes+0x85>
c002a017:	b8 72 66 03 c0       	mov    $0xc0036672,%eax
c002a01c:	c9                   	leave  
c002a01d:	c3                   	ret    

c002a01e <ustar_make_header>:
c002a01e:	55                   	push   %ebp
c002a01f:	89 e5                	mov    %esp,%ebp
c002a021:	83 ec 18             	sub    $0x18,%esp
c002a024:	8b 45 14             	mov    0x14(%ebp),%eax
c002a027:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a02a:	83 7d 0c 30          	cmpl   $0x30,0xc(%ebp)
c002a02e:	74 24                	je     c002a054 <ustar_make_header+0x36>
c002a030:	83 7d 0c 35          	cmpl   $0x35,0xc(%ebp)
c002a034:	74 1e                	je     c002a054 <ustar_make_header+0x36>
c002a036:	83 ec 0c             	sub    $0xc,%esp
c002a039:	68 74 66 03 c0       	push   $0xc0036674
c002a03e:	68 a5 66 03 c0       	push   $0xc00366a5
c002a043:	68 a8 67 03 c0       	push   $0xc00367a8
c002a048:	6a 59                	push   $0x59
c002a04a:	68 bc 66 03 c0       	push   $0xc00366bc
c002a04f:	e8 3d 05 00 00       	call   c002a591 <debug_panic>
c002a054:	83 ec 0c             	sub    $0xc,%esp
c002a057:	ff 75 08             	pushl  0x8(%ebp)
c002a05a:	e8 38 ff ff ff       	call   c0029f97 <strip_antisocial_prefixes>
c002a05f:	83 c4 10             	add    $0x10,%esp
c002a062:	89 45 08             	mov    %eax,0x8(%ebp)
c002a065:	83 ec 0c             	sub    $0xc,%esp
c002a068:	ff 75 08             	pushl  0x8(%ebp)
c002a06b:	e8 40 f8 ff ff       	call   c00298b0 <strlen>
c002a070:	83 c4 10             	add    $0x10,%esp
c002a073:	83 f8 63             	cmp    $0x63,%eax
c002a076:	76 1d                	jbe    c002a095 <ustar_make_header+0x77>
c002a078:	83 ec 08             	sub    $0x8,%esp
c002a07b:	ff 75 08             	pushl  0x8(%ebp)
c002a07e:	68 ce 66 03 c0       	push   $0xc00366ce
c002a083:	e8 a8 df ff ff       	call   c0028030 <printf>
c002a088:	83 c4 10             	add    $0x10,%esp
c002a08b:	b8 00 00 00 00       	mov    $0x0,%eax
c002a090:	e9 64 01 00 00       	jmp    c002a1f9 <ustar_make_header+0x1db>
c002a095:	83 ec 04             	sub    $0x4,%esp
c002a098:	68 00 02 00 00       	push   $0x200
c002a09d:	6a 00                	push   $0x0
c002a09f:	ff 75 f4             	pushl  -0xc(%ebp)
c002a0a2:	e8 b0 f7 ff ff       	call   c0029857 <memset>
c002a0a7:	83 c4 10             	add    $0x10,%esp
c002a0aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a0ad:	83 ec 04             	sub    $0x4,%esp
c002a0b0:	6a 64                	push   $0x64
c002a0b2:	ff 75 08             	pushl  0x8(%ebp)
c002a0b5:	50                   	push   %eax
c002a0b6:	e8 73 f8 ff ff       	call   c002992e <strlcpy>
c002a0bb:	83 c4 10             	add    $0x10,%esp
c002a0be:	83 7d 0c 30          	cmpl   $0x30,0xc(%ebp)
c002a0c2:	75 07                	jne    c002a0cb <ustar_make_header+0xad>
c002a0c4:	ba a4 01 00 00       	mov    $0x1a4,%edx
c002a0c9:	eb 05                	jmp    c002a0d0 <ustar_make_header+0xb2>
c002a0cb:	ba ed 01 00 00       	mov    $0x1ed,%edx
c002a0d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a0d3:	83 c0 64             	add    $0x64,%eax
c002a0d6:	52                   	push   %edx
c002a0d7:	68 e6 66 03 c0       	push   $0xc00366e6
c002a0dc:	6a 08                	push   $0x8
c002a0de:	50                   	push   %eax
c002a0df:	e8 23 df ff ff       	call   c0028007 <snprintf>
c002a0e4:	83 c4 10             	add    $0x10,%esp
c002a0e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a0ea:	83 c0 6c             	add    $0x6c,%eax
c002a0ed:	83 ec 04             	sub    $0x4,%esp
c002a0f0:	6a 08                	push   $0x8
c002a0f2:	68 eb 66 03 c0       	push   $0xc00366eb
c002a0f7:	50                   	push   %eax
c002a0f8:	e8 31 f8 ff ff       	call   c002992e <strlcpy>
c002a0fd:	83 c4 10             	add    $0x10,%esp
c002a100:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a103:	83 c0 74             	add    $0x74,%eax
c002a106:	83 ec 04             	sub    $0x4,%esp
c002a109:	6a 08                	push   $0x8
c002a10b:	68 eb 66 03 c0       	push   $0xc00366eb
c002a110:	50                   	push   %eax
c002a111:	e8 18 f8 ff ff       	call   c002992e <strlcpy>
c002a116:	83 c4 10             	add    $0x10,%esp
c002a119:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a11c:	83 c0 7c             	add    $0x7c,%eax
c002a11f:	ff 75 10             	pushl  0x10(%ebp)
c002a122:	68 f3 66 03 c0       	push   $0xc00366f3
c002a127:	6a 0c                	push   $0xc
c002a129:	50                   	push   %eax
c002a12a:	e8 d8 de ff ff       	call   c0028007 <snprintf>
c002a12f:	83 c4 10             	add    $0x10,%esp
c002a132:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a135:	05 88 00 00 00       	add    $0x88,%eax
c002a13a:	68 00 8c b7 43       	push   $0x43b78c00
c002a13f:	68 f3 66 03 c0       	push   $0xc00366f3
c002a144:	6a 0c                	push   $0xc
c002a146:	50                   	push   %eax
c002a147:	e8 bb de ff ff       	call   c0028007 <snprintf>
c002a14c:	83 c4 10             	add    $0x10,%esp
c002a14f:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a152:	89 c2                	mov    %eax,%edx
c002a154:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a157:	88 90 9c 00 00 00    	mov    %dl,0x9c(%eax)
c002a15d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a160:	05 01 01 00 00       	add    $0x101,%eax
c002a165:	83 ec 04             	sub    $0x4,%esp
c002a168:	6a 06                	push   $0x6
c002a16a:	68 f9 66 03 c0       	push   $0xc00366f9
c002a16f:	50                   	push   %eax
c002a170:	e8 b9 f7 ff ff       	call   c002992e <strlcpy>
c002a175:	83 c4 10             	add    $0x10,%esp
c002a178:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a17b:	c6 80 08 01 00 00 30 	movb   $0x30,0x108(%eax)
c002a182:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a185:	0f b6 90 08 01 00 00 	movzbl 0x108(%eax),%edx
c002a18c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a18f:	88 90 07 01 00 00    	mov    %dl,0x107(%eax)
c002a195:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a198:	05 29 01 00 00       	add    $0x129,%eax
c002a19d:	83 ec 04             	sub    $0x4,%esp
c002a1a0:	6a 20                	push   $0x20
c002a1a2:	68 ff 66 03 c0       	push   $0xc00366ff
c002a1a7:	50                   	push   %eax
c002a1a8:	e8 81 f7 ff ff       	call   c002992e <strlcpy>
c002a1ad:	83 c4 10             	add    $0x10,%esp
c002a1b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a1b3:	05 09 01 00 00       	add    $0x109,%eax
c002a1b8:	83 ec 04             	sub    $0x4,%esp
c002a1bb:	6a 20                	push   $0x20
c002a1bd:	68 ff 66 03 c0       	push   $0xc00366ff
c002a1c2:	50                   	push   %eax
c002a1c3:	e8 66 f7 ff ff       	call   c002992e <strlcpy>
c002a1c8:	83 c4 10             	add    $0x10,%esp
c002a1cb:	83 ec 0c             	sub    $0xc,%esp
c002a1ce:	ff 75 f4             	pushl  -0xc(%ebp)
c002a1d1:	e8 3d fd ff ff       	call   c0029f13 <calculate_chksum>
c002a1d6:	83 c4 10             	add    $0x10,%esp
c002a1d9:	89 c2                	mov    %eax,%edx
c002a1db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a1de:	05 94 00 00 00       	add    $0x94,%eax
c002a1e3:	52                   	push   %edx
c002a1e4:	68 e6 66 03 c0       	push   $0xc00366e6
c002a1e9:	6a 08                	push   $0x8
c002a1eb:	50                   	push   %eax
c002a1ec:	e8 16 de ff ff       	call   c0028007 <snprintf>
c002a1f1:	83 c4 10             	add    $0x10,%esp
c002a1f4:	b8 01 00 00 00       	mov    $0x1,%eax
c002a1f9:	c9                   	leave  
c002a1fa:	c3                   	ret    

c002a1fb <parse_octal_field>:
c002a1fb:	55                   	push   %ebp
c002a1fc:	89 e5                	mov    %esp,%ebp
c002a1fe:	83 ec 10             	sub    $0x10,%esp
c002a201:	8b 45 10             	mov    0x10(%ebp),%eax
c002a204:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a20a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c002a211:	eb 65                	jmp    c002a278 <parse_octal_field+0x7d>
c002a213:	8b 55 08             	mov    0x8(%ebp),%edx
c002a216:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002a219:	01 d0                	add    %edx,%eax
c002a21b:	0f b6 00             	movzbl (%eax),%eax
c002a21e:	88 45 fb             	mov    %al,-0x5(%ebp)
c002a221:	80 7d fb 2f          	cmpb   $0x2f,-0x5(%ebp)
c002a225:	7e 35                	jle    c002a25c <parse_octal_field+0x61>
c002a227:	80 7d fb 37          	cmpb   $0x37,-0x5(%ebp)
c002a22b:	7f 2f                	jg     c002a25c <parse_octal_field+0x61>
c002a22d:	8b 45 10             	mov    0x10(%ebp),%eax
c002a230:	8b 00                	mov    (%eax),%eax
c002a232:	3d ff ff ff 1f       	cmp    $0x1fffffff,%eax
c002a237:	76 07                	jbe    c002a240 <parse_octal_field+0x45>
c002a239:	b8 00 00 00 00       	mov    $0x0,%eax
c002a23e:	eb 45                	jmp    c002a285 <parse_octal_field+0x8a>
c002a240:	0f be 55 fb          	movsbl -0x5(%ebp),%edx
c002a244:	8b 45 10             	mov    0x10(%ebp),%eax
c002a247:	8b 00                	mov    (%eax),%eax
c002a249:	c1 e0 03             	shl    $0x3,%eax
c002a24c:	01 d0                	add    %edx,%eax
c002a24e:	8d 50 d0             	lea    -0x30(%eax),%edx
c002a251:	8b 45 10             	mov    0x10(%ebp),%eax
c002a254:	89 10                	mov    %edx,(%eax)
c002a256:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c002a25a:	eb 1c                	jmp    c002a278 <parse_octal_field+0x7d>
c002a25c:	80 7d fb 20          	cmpb   $0x20,-0x5(%ebp)
c002a260:	74 06                	je     c002a268 <parse_octal_field+0x6d>
c002a262:	80 7d fb 00          	cmpb   $0x0,-0x5(%ebp)
c002a266:	75 09                	jne    c002a271 <parse_octal_field+0x76>
c002a268:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c002a26c:	0f 95 c0             	setne  %al
c002a26f:	eb 14                	jmp    c002a285 <parse_octal_field+0x8a>
c002a271:	b8 00 00 00 00       	mov    $0x0,%eax
c002a276:	eb 0d                	jmp    c002a285 <parse_octal_field+0x8a>
c002a278:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002a27b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002a27e:	72 93                	jb     c002a213 <parse_octal_field+0x18>
c002a280:	b8 00 00 00 00       	mov    $0x0,%eax
c002a285:	c9                   	leave  
c002a286:	c3                   	ret    

c002a287 <is_all_zeros>:
c002a287:	55                   	push   %ebp
c002a288:	89 e5                	mov    %esp,%ebp
c002a28a:	eb 17                	jmp    c002a2a3 <is_all_zeros+0x1c>
c002a28c:	8b 45 08             	mov    0x8(%ebp),%eax
c002a28f:	8d 50 01             	lea    0x1(%eax),%edx
c002a292:	89 55 08             	mov    %edx,0x8(%ebp)
c002a295:	0f b6 00             	movzbl (%eax),%eax
c002a298:	84 c0                	test   %al,%al
c002a29a:	74 07                	je     c002a2a3 <is_all_zeros+0x1c>
c002a29c:	b8 00 00 00 00       	mov    $0x0,%eax
c002a2a1:	eb 12                	jmp    c002a2b5 <is_all_zeros+0x2e>
c002a2a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a2a6:	8d 50 ff             	lea    -0x1(%eax),%edx
c002a2a9:	89 55 0c             	mov    %edx,0xc(%ebp)
c002a2ac:	85 c0                	test   %eax,%eax
c002a2ae:	75 dc                	jne    c002a28c <is_all_zeros+0x5>
c002a2b0:	b8 01 00 00 00       	mov    $0x1,%eax
c002a2b5:	5d                   	pop    %ebp
c002a2b6:	c3                   	ret    

c002a2b7 <ustar_parse_header>:
c002a2b7:	55                   	push   %ebp
c002a2b8:	89 e5                	mov    %esp,%ebp
c002a2ba:	83 ec 18             	sub    $0x18,%esp
c002a2bd:	8b 45 08             	mov    0x8(%ebp),%eax
c002a2c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a2c3:	68 00 02 00 00       	push   $0x200
c002a2c8:	ff 75 08             	pushl  0x8(%ebp)
c002a2cb:	e8 b7 ff ff ff       	call   c002a287 <is_all_zeros>
c002a2d0:	83 c4 08             	add    $0x8,%esp
c002a2d3:	84 c0                	test   %al,%al
c002a2d5:	74 25                	je     c002a2fc <ustar_parse_header+0x45>
c002a2d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a2da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a2e0:	8b 45 10             	mov    0x10(%ebp),%eax
c002a2e3:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
c002a2e9:	8b 45 14             	mov    0x14(%ebp),%eax
c002a2ec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a2f2:	b8 00 00 00 00       	mov    $0x0,%eax
c002a2f7:	e9 65 01 00 00       	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a2fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a2ff:	05 01 01 00 00       	add    $0x101,%eax
c002a304:	83 ec 04             	sub    $0x4,%esp
c002a307:	6a 06                	push   $0x6
c002a309:	68 f9 66 03 c0       	push   $0xc00366f9
c002a30e:	50                   	push   %eax
c002a30f:	e8 95 f0 ff ff       	call   c00293a9 <memcmp>
c002a314:	83 c4 10             	add    $0x10,%esp
c002a317:	85 c0                	test   %eax,%eax
c002a319:	74 0a                	je     c002a325 <ustar_parse_header+0x6e>
c002a31b:	b8 04 67 03 c0       	mov    $0xc0036704,%eax
c002a320:	e9 3c 01 00 00       	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a328:	0f b6 80 07 01 00 00 	movzbl 0x107(%eax),%eax
c002a32f:	3c 30                	cmp    $0x30,%al
c002a331:	75 0e                	jne    c002a341 <ustar_parse_header+0x8a>
c002a333:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a336:	0f b6 80 08 01 00 00 	movzbl 0x108(%eax),%eax
c002a33d:	3c 30                	cmp    $0x30,%al
c002a33f:	74 0a                	je     c002a34b <ustar_parse_header+0x94>
c002a341:	b8 18 67 03 c0       	mov    $0xc0036718,%eax
c002a346:	e9 16 01 00 00       	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a34b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a34e:	8d 90 94 00 00 00    	lea    0x94(%eax),%edx
c002a354:	83 ec 04             	sub    $0x4,%esp
c002a357:	8d 45 f0             	lea    -0x10(%ebp),%eax
c002a35a:	50                   	push   %eax
c002a35b:	6a 08                	push   $0x8
c002a35d:	52                   	push   %edx
c002a35e:	e8 98 fe ff ff       	call   c002a1fb <parse_octal_field>
c002a363:	83 c4 10             	add    $0x10,%esp
c002a366:	83 f0 01             	xor    $0x1,%eax
c002a369:	84 c0                	test   %al,%al
c002a36b:	74 0a                	je     c002a377 <ustar_parse_header+0xc0>
c002a36d:	b8 2e 67 03 c0       	mov    $0xc003672e,%eax
c002a372:	e9 ea 00 00 00       	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a377:	83 ec 0c             	sub    $0xc,%esp
c002a37a:	ff 75 f4             	pushl  -0xc(%ebp)
c002a37d:	e8 91 fb ff ff       	call   c0029f13 <calculate_chksum>
c002a382:	83 c4 10             	add    $0x10,%esp
c002a385:	89 c2                	mov    %eax,%edx
c002a387:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a38a:	39 c2                	cmp    %eax,%edx
c002a38c:	74 0a                	je     c002a398 <ustar_parse_header+0xe1>
c002a38e:	b8 43 67 03 c0       	mov    $0xc0036743,%eax
c002a393:	e9 c9 00 00 00       	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a39b:	0f b6 40 63          	movzbl 0x63(%eax),%eax
c002a39f:	84 c0                	test   %al,%al
c002a3a1:	75 0e                	jne    c002a3b1 <ustar_parse_header+0xfa>
c002a3a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a3a6:	0f b6 80 59 01 00 00 	movzbl 0x159(%eax),%eax
c002a3ad:	84 c0                	test   %al,%al
c002a3af:	74 0a                	je     c002a3bb <ustar_parse_header+0x104>
c002a3b1:	b8 55 67 03 c0       	mov    $0xc0036755,%eax
c002a3b6:	e9 a6 00 00 00       	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a3bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a3be:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a3c5:	3c 30                	cmp    $0x30,%al
c002a3c7:	74 18                	je     c002a3e1 <ustar_parse_header+0x12a>
c002a3c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a3cc:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a3d3:	3c 35                	cmp    $0x35,%al
c002a3d5:	74 0a                	je     c002a3e1 <ustar_parse_header+0x12a>
c002a3d7:	b8 68 67 03 c0       	mov    $0xc0036768,%eax
c002a3dc:	e9 80 00 00 00       	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a3e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a3e4:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a3eb:	3c 30                	cmp    $0x30,%al
c002a3ed:	75 34                	jne    c002a423 <ustar_parse_header+0x16c>
c002a3ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a3f2:	8d 50 7c             	lea    0x7c(%eax),%edx
c002a3f5:	83 ec 04             	sub    $0x4,%esp
c002a3f8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c002a3fb:	50                   	push   %eax
c002a3fc:	6a 0c                	push   $0xc
c002a3fe:	52                   	push   %edx
c002a3ff:	e8 f7 fd ff ff       	call   c002a1fb <parse_octal_field>
c002a404:	83 c4 10             	add    $0x10,%esp
c002a407:	83 f0 01             	xor    $0x1,%eax
c002a40a:	84 c0                	test   %al,%al
c002a40c:	74 07                	je     c002a415 <ustar_parse_header+0x15e>
c002a40e:	b8 80 67 03 c0       	mov    $0xc0036780,%eax
c002a413:	eb 4c                	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a415:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002a418:	85 c0                	test   %eax,%eax
c002a41a:	79 0e                	jns    c002a42a <ustar_parse_header+0x173>
c002a41c:	b8 98 67 03 c0       	mov    $0xc0036798,%eax
c002a421:	eb 3e                	jmp    c002a461 <ustar_parse_header+0x1aa>
c002a423:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c002a42a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a42d:	83 ec 0c             	sub    $0xc,%esp
c002a430:	50                   	push   %eax
c002a431:	e8 61 fb ff ff       	call   c0029f97 <strip_antisocial_prefixes>
c002a436:	83 c4 10             	add    $0x10,%esp
c002a439:	89 c2                	mov    %eax,%edx
c002a43b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a43e:	89 10                	mov    %edx,(%eax)
c002a440:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a443:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a44a:	0f be d0             	movsbl %al,%edx
c002a44d:	8b 45 10             	mov    0x10(%ebp),%eax
c002a450:	89 10                	mov    %edx,(%eax)
c002a452:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002a455:	89 c2                	mov    %eax,%edx
c002a457:	8b 45 14             	mov    0x14(%ebp),%eax
c002a45a:	89 10                	mov    %edx,(%eax)
c002a45c:	b8 00 00 00 00       	mov    $0x0,%eax
c002a461:	c9                   	leave  
c002a462:	c3                   	ret    

c002a463 <convert_to_fixed_point>:
c002a463:	55                   	push   %ebp
c002a464:	89 e5                	mov    %esp,%ebp
c002a466:	8b 45 08             	mov    0x8(%ebp),%eax
c002a469:	c1 e0 10             	shl    $0x10,%eax
c002a46c:	5d                   	pop    %ebp
c002a46d:	c3                   	ret    

c002a46e <convert_to_int_tozero>:
c002a46e:	55                   	push   %ebp
c002a46f:	89 e5                	mov    %esp,%ebp
c002a471:	8b 45 08             	mov    0x8(%ebp),%eax
c002a474:	8d 90 ff ff 00 00    	lea    0xffff(%eax),%edx
c002a47a:	85 c0                	test   %eax,%eax
c002a47c:	0f 48 c2             	cmovs  %edx,%eax
c002a47f:	c1 f8 10             	sar    $0x10,%eax
c002a482:	5d                   	pop    %ebp
c002a483:	c3                   	ret    

c002a484 <convert_to_int_round>:
c002a484:	55                   	push   %ebp
c002a485:	89 e5                	mov    %esp,%ebp
c002a487:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a48b:	78 18                	js     c002a4a5 <convert_to_int_round+0x21>
c002a48d:	8b 45 08             	mov    0x8(%ebp),%eax
c002a490:	05 00 80 00 00       	add    $0x8000,%eax
c002a495:	8d 90 ff ff 00 00    	lea    0xffff(%eax),%edx
c002a49b:	85 c0                	test   %eax,%eax
c002a49d:	0f 48 c2             	cmovs  %edx,%eax
c002a4a0:	c1 f8 10             	sar    $0x10,%eax
c002a4a3:	eb 16                	jmp    c002a4bb <convert_to_int_round+0x37>
c002a4a5:	8b 45 08             	mov    0x8(%ebp),%eax
c002a4a8:	2d 00 80 00 00       	sub    $0x8000,%eax
c002a4ad:	8d 90 ff ff 00 00    	lea    0xffff(%eax),%edx
c002a4b3:	85 c0                	test   %eax,%eax
c002a4b5:	0f 48 c2             	cmovs  %edx,%eax
c002a4b8:	c1 f8 10             	sar    $0x10,%eax
c002a4bb:	5d                   	pop    %ebp
c002a4bc:	c3                   	ret    

c002a4bd <ff_add>:
c002a4bd:	55                   	push   %ebp
c002a4be:	89 e5                	mov    %esp,%ebp
c002a4c0:	8b 55 08             	mov    0x8(%ebp),%edx
c002a4c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a4c6:	01 d0                	add    %edx,%eax
c002a4c8:	5d                   	pop    %ebp
c002a4c9:	c3                   	ret    

c002a4ca <ff_sub>:
c002a4ca:	55                   	push   %ebp
c002a4cb:	89 e5                	mov    %esp,%ebp
c002a4cd:	8b 45 08             	mov    0x8(%ebp),%eax
c002a4d0:	2b 45 0c             	sub    0xc(%ebp),%eax
c002a4d3:	5d                   	pop    %ebp
c002a4d4:	c3                   	ret    

c002a4d5 <ff_add_with_int>:
c002a4d5:	55                   	push   %ebp
c002a4d6:	89 e5                	mov    %esp,%ebp
c002a4d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a4db:	c1 e0 10             	shl    $0x10,%eax
c002a4de:	89 c2                	mov    %eax,%edx
c002a4e0:	8b 45 08             	mov    0x8(%ebp),%eax
c002a4e3:	01 d0                	add    %edx,%eax
c002a4e5:	5d                   	pop    %ebp
c002a4e6:	c3                   	ret    

c002a4e7 <ff_sub_with_int>:
c002a4e7:	55                   	push   %ebp
c002a4e8:	89 e5                	mov    %esp,%ebp
c002a4ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a4ed:	c1 e0 10             	shl    $0x10,%eax
c002a4f0:	89 c2                	mov    %eax,%edx
c002a4f2:	8b 45 08             	mov    0x8(%ebp),%eax
c002a4f5:	29 d0                	sub    %edx,%eax
c002a4f7:	5d                   	pop    %ebp
c002a4f8:	c3                   	ret    

c002a4f9 <ff_mul>:
c002a4f9:	55                   	push   %ebp
c002a4fa:	89 e5                	mov    %esp,%ebp
c002a4fc:	57                   	push   %edi
c002a4fd:	56                   	push   %esi
c002a4fe:	53                   	push   %ebx
c002a4ff:	83 ec 0c             	sub    $0xc,%esp
c002a502:	8b 45 08             	mov    0x8(%ebp),%eax
c002a505:	89 c1                	mov    %eax,%ecx
c002a507:	89 c3                	mov    %eax,%ebx
c002a509:	c1 fb 1f             	sar    $0x1f,%ebx
c002a50c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a50f:	99                   	cltd   
c002a510:	89 df                	mov    %ebx,%edi
c002a512:	0f af f8             	imul   %eax,%edi
c002a515:	89 d6                	mov    %edx,%esi
c002a517:	0f af f1             	imul   %ecx,%esi
c002a51a:	01 f7                	add    %esi,%edi
c002a51c:	f7 e1                	mul    %ecx
c002a51e:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
c002a521:	89 ca                	mov    %ecx,%edx
c002a523:	89 d1                	mov    %edx,%ecx
c002a525:	c1 f9 1f             	sar    $0x1f,%ecx
c002a528:	89 cb                	mov    %ecx,%ebx
c002a52a:	c1 fb 1f             	sar    $0x1f,%ebx
c002a52d:	0f b7 f1             	movzwl %cx,%esi
c002a530:	89 75 e8             	mov    %esi,-0x18(%ebp)
c002a533:	83 e3 00             	and    $0x0,%ebx
c002a536:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c002a539:	03 45 e8             	add    -0x18(%ebp),%eax
c002a53c:	13 55 ec             	adc    -0x14(%ebp),%edx
c002a53f:	0f ac d0 10          	shrd   $0x10,%edx,%eax
c002a543:	c1 fa 10             	sar    $0x10,%edx
c002a546:	83 c4 0c             	add    $0xc,%esp
c002a549:	5b                   	pop    %ebx
c002a54a:	5e                   	pop    %esi
c002a54b:	5f                   	pop    %edi
c002a54c:	5d                   	pop    %ebp
c002a54d:	c3                   	ret    

c002a54e <ff_mul_with_int>:
c002a54e:	55                   	push   %ebp
c002a54f:	89 e5                	mov    %esp,%ebp
c002a551:	8b 45 08             	mov    0x8(%ebp),%eax
c002a554:	0f af 45 0c          	imul   0xc(%ebp),%eax
c002a558:	5d                   	pop    %ebp
c002a559:	c3                   	ret    

c002a55a <ff_div>:
c002a55a:	55                   	push   %ebp
c002a55b:	89 e5                	mov    %esp,%ebp
c002a55d:	53                   	push   %ebx
c002a55e:	83 ec 04             	sub    $0x4,%esp
c002a561:	8b 45 08             	mov    0x8(%ebp),%eax
c002a564:	99                   	cltd   
c002a565:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c002a569:	c1 e0 10             	shl    $0x10,%eax
c002a56c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c002a56f:	89 cb                	mov    %ecx,%ebx
c002a571:	c1 fb 1f             	sar    $0x1f,%ebx
c002a574:	53                   	push   %ebx
c002a575:	51                   	push   %ecx
c002a576:	52                   	push   %edx
c002a577:	50                   	push   %eax
c002a578:	e8 c0 f8 ff ff       	call   c0029e3d <__divdi3>
c002a57d:	83 c4 10             	add    $0x10,%esp
c002a580:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002a583:	c9                   	leave  
c002a584:	c3                   	ret    

c002a585 <ff_div_with_int>:
c002a585:	55                   	push   %ebp
c002a586:	89 e5                	mov    %esp,%ebp
c002a588:	8b 45 08             	mov    0x8(%ebp),%eax
c002a58b:	99                   	cltd   
c002a58c:	f7 7d 0c             	idivl  0xc(%ebp)
c002a58f:	5d                   	pop    %ebp
c002a590:	c3                   	ret    

c002a591 <debug_panic>:
c002a591:	55                   	push   %ebp
c002a592:	89 e5                	mov    %esp,%ebp
c002a594:	83 ec 18             	sub    $0x18,%esp
c002a597:	e8 50 78 ff ff       	call   c0021dec <intr_disable>
c002a59c:	e8 74 21 00 00       	call   c002c715 <console_panic>
c002a5a1:	a1 e4 01 04 c0       	mov    0xc00401e4,%eax
c002a5a6:	83 c0 01             	add    $0x1,%eax
c002a5a9:	a3 e4 01 04 c0       	mov    %eax,0xc00401e4
c002a5ae:	a1 e4 01 04 c0       	mov    0xc00401e4,%eax
c002a5b3:	83 f8 01             	cmp    $0x1,%eax
c002a5b6:	75 42                	jne    c002a5fa <debug_panic+0x69>
c002a5b8:	ff 75 10             	pushl  0x10(%ebp)
c002a5bb:	ff 75 0c             	pushl  0xc(%ebp)
c002a5be:	ff 75 08             	pushl  0x8(%ebp)
c002a5c1:	68 bc 67 03 c0       	push   $0xc00367bc
c002a5c6:	e8 65 da ff ff       	call   c0028030 <printf>
c002a5cb:	83 c4 10             	add    $0x10,%esp
c002a5ce:	8d 45 18             	lea    0x18(%ebp),%eax
c002a5d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a5d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a5d7:	83 ec 08             	sub    $0x8,%esp
c002a5da:	50                   	push   %eax
c002a5db:	ff 75 14             	pushl  0x14(%ebp)
c002a5de:	e8 42 22 00 00       	call   c002c825 <vprintf>
c002a5e3:	83 c4 10             	add    $0x10,%esp
c002a5e6:	83 ec 0c             	sub    $0xc,%esp
c002a5e9:	6a 0a                	push   $0xa
c002a5eb:	e8 f0 22 00 00       	call   c002c8e0 <putchar>
c002a5f0:	83 c4 10             	add    $0x10,%esp
c002a5f3:	e8 03 d7 ff ff       	call   c0027cfb <debug_backtrace>
c002a5f8:	eb 20                	jmp    c002a61a <debug_panic+0x89>
c002a5fa:	a1 e4 01 04 c0       	mov    0xc00401e4,%eax
c002a5ff:	83 f8 02             	cmp    $0x2,%eax
c002a602:	75 16                	jne    c002a61a <debug_panic+0x89>
c002a604:	ff 75 10             	pushl  0x10(%ebp)
c002a607:	ff 75 0c             	pushl  0xc(%ebp)
c002a60a:	ff 75 08             	pushl  0x8(%ebp)
c002a60d:	68 dc 67 03 c0       	push   $0xc00367dc
c002a612:	e8 19 da ff ff       	call   c0028030 <printf>
c002a617:	83 c4 10             	add    $0x10,%esp
c002a61a:	e8 97 b2 ff ff       	call   c00258b6 <serial_flush>
c002a61f:	e8 35 d4 ff ff       	call   c0027a59 <shutdown>
c002a624:	eb fe                	jmp    c002a624 <debug_panic+0x93>

c002a626 <print_stacktrace>:
c002a626:	55                   	push   %ebp
c002a627:	89 e5                	mov    %esp,%ebp
c002a629:	83 ec 18             	sub    $0x18,%esp
c002a62c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002a633:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002a63a:	c7 45 ec 06 68 03 c0 	movl   $0xc0036806,-0x14(%ebp)
c002a641:	8b 45 08             	mov    0x8(%ebp),%eax
c002a644:	8b 40 04             	mov    0x4(%eax),%eax
c002a647:	83 f8 01             	cmp    $0x1,%eax
c002a64a:	74 15                	je     c002a661 <print_stacktrace+0x3b>
c002a64c:	83 f8 01             	cmp    $0x1,%eax
c002a64f:	72 07                	jb     c002a658 <print_stacktrace+0x32>
c002a651:	83 f8 02             	cmp    $0x2,%eax
c002a654:	74 14                	je     c002a66a <print_stacktrace+0x44>
c002a656:	eb 1a                	jmp    c002a672 <print_stacktrace+0x4c>
c002a658:	c7 45 ec 0e 68 03 c0 	movl   $0xc003680e,-0x14(%ebp)
c002a65f:	eb 11                	jmp    c002a672 <print_stacktrace+0x4c>
c002a661:	c7 45 ec 16 68 03 c0 	movl   $0xc0036816,-0x14(%ebp)
c002a668:	eb 08                	jmp    c002a672 <print_stacktrace+0x4c>
c002a66a:	c7 45 ec 1c 68 03 c0 	movl   $0xc003681c,-0x14(%ebp)
c002a671:	90                   	nop
c002a672:	8b 45 08             	mov    0x8(%ebp),%eax
c002a675:	83 c0 08             	add    $0x8,%eax
c002a678:	83 ec 04             	sub    $0x4,%esp
c002a67b:	ff 75 ec             	pushl  -0x14(%ebp)
c002a67e:	50                   	push   %eax
c002a67f:	68 24 68 03 c0       	push   $0xc0036824
c002a684:	e8 a7 d9 ff ff       	call   c0028030 <printf>
c002a689:	83 c4 10             	add    $0x10,%esp
c002a68c:	e8 58 68 ff ff       	call   c0020ee9 <thread_current>
c002a691:	3b 45 08             	cmp    0x8(%ebp),%eax
c002a694:	75 0e                	jne    c002a6a4 <print_stacktrace+0x7e>
c002a696:	8b 45 00             	mov    0x0(%ebp),%eax
c002a699:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002a69c:	8b 45 04             	mov    0x4(%ebp),%eax
c002a69f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a6a2:	eb 4d                	jmp    c002a6f1 <print_stacktrace+0xcb>
c002a6a4:	8b 45 08             	mov    0x8(%ebp),%eax
c002a6a7:	8b 40 18             	mov    0x18(%eax),%eax
c002a6aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002a6ad:	8b 45 08             	mov    0x8(%ebp),%eax
c002a6b0:	8b 40 18             	mov    0x18(%eax),%eax
c002a6b3:	8b 55 08             	mov    0x8(%ebp),%edx
c002a6b6:	81 c2 00 10 00 00    	add    $0x1000,%edx
c002a6bc:	39 d0                	cmp    %edx,%eax
c002a6be:	74 0d                	je     c002a6cd <print_stacktrace+0xa7>
c002a6c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002a6c3:	8b 40 10             	mov    0x10(%eax),%eax
c002a6c6:	3d 4b 1d 02 c0       	cmp    $0xc0021d4b,%eax
c002a6cb:	75 12                	jne    c002a6df <print_stacktrace+0xb9>
c002a6cd:	83 ec 0c             	sub    $0xc,%esp
c002a6d0:	68 4b 68 03 c0       	push   $0xc003684b
c002a6d5:	e8 7e 21 00 00       	call   c002c858 <puts>
c002a6da:	83 c4 10             	add    $0x10,%esp
c002a6dd:	eb 6b                	jmp    c002a74a <print_stacktrace+0x124>
c002a6df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002a6e2:	8b 40 08             	mov    0x8(%eax),%eax
c002a6e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002a6e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002a6eb:	8b 40 10             	mov    0x10(%eax),%eax
c002a6ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a6f1:	83 ec 08             	sub    $0x8,%esp
c002a6f4:	ff 75 f4             	pushl  -0xc(%ebp)
c002a6f7:	68 68 68 03 c0       	push   $0xc0036868
c002a6fc:	e8 2f d9 ff ff       	call   c0028030 <printf>
c002a701:	83 c4 10             	add    $0x10,%esp
c002a704:	eb 21                	jmp    c002a727 <print_stacktrace+0x101>
c002a706:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a709:	83 c0 04             	add    $0x4,%eax
c002a70c:	8b 00                	mov    (%eax),%eax
c002a70e:	83 ec 08             	sub    $0x8,%esp
c002a711:	50                   	push   %eax
c002a712:	68 68 68 03 c0       	push   $0xc0036868
c002a717:	e8 14 d9 ff ff       	call   c0028030 <printf>
c002a71c:	83 c4 10             	add    $0x10,%esp
c002a71f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a722:	8b 00                	mov    (%eax),%eax
c002a724:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002a727:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a72a:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c002a72f:	76 09                	jbe    c002a73a <print_stacktrace+0x114>
c002a731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a734:	8b 00                	mov    (%eax),%eax
c002a736:	85 c0                	test   %eax,%eax
c002a738:	75 cc                	jne    c002a706 <print_stacktrace+0xe0>
c002a73a:	83 ec 0c             	sub    $0xc,%esp
c002a73d:	68 6c 68 03 c0       	push   $0xc003686c
c002a742:	e8 11 21 00 00       	call   c002c858 <puts>
c002a747:	83 c4 10             	add    $0x10,%esp
c002a74a:	c9                   	leave  
c002a74b:	c3                   	ret    

c002a74c <debug_backtrace_all>:
c002a74c:	55                   	push   %ebp
c002a74d:	89 e5                	mov    %esp,%ebp
c002a74f:	83 ec 18             	sub    $0x18,%esp
c002a752:	e8 95 76 ff ff       	call   c0021dec <intr_disable>
c002a757:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a75a:	83 ec 08             	sub    $0x8,%esp
c002a75d:	6a 00                	push   $0x0
c002a75f:	68 26 a6 02 c0       	push   $0xc002a626
c002a764:	e8 03 69 ff ff       	call   c002106c <thread_foreach>
c002a769:	83 c4 10             	add    $0x10,%esp
c002a76c:	83 ec 0c             	sub    $0xc,%esp
c002a76f:	ff 75 f4             	pushl  -0xc(%ebp)
c002a772:	e8 1d 76 ff ff       	call   c0021d94 <intr_set_level>
c002a777:	83 c4 10             	add    $0x10,%esp
c002a77a:	90                   	nop
c002a77b:	c9                   	leave  
c002a77c:	c3                   	ret    

c002a77d <is_head>:
c002a77d:	55                   	push   %ebp
c002a77e:	89 e5                	mov    %esp,%ebp
c002a780:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a784:	74 1a                	je     c002a7a0 <is_head+0x23>
c002a786:	8b 45 08             	mov    0x8(%ebp),%eax
c002a789:	8b 00                	mov    (%eax),%eax
c002a78b:	85 c0                	test   %eax,%eax
c002a78d:	75 11                	jne    c002a7a0 <is_head+0x23>
c002a78f:	8b 45 08             	mov    0x8(%ebp),%eax
c002a792:	8b 40 04             	mov    0x4(%eax),%eax
c002a795:	85 c0                	test   %eax,%eax
c002a797:	74 07                	je     c002a7a0 <is_head+0x23>
c002a799:	b8 01 00 00 00       	mov    $0x1,%eax
c002a79e:	eb 05                	jmp    c002a7a5 <is_head+0x28>
c002a7a0:	b8 00 00 00 00       	mov    $0x0,%eax
c002a7a5:	83 e0 01             	and    $0x1,%eax
c002a7a8:	5d                   	pop    %ebp
c002a7a9:	c3                   	ret    

c002a7aa <is_interior>:
c002a7aa:	55                   	push   %ebp
c002a7ab:	89 e5                	mov    %esp,%ebp
c002a7ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a7b1:	74 1a                	je     c002a7cd <is_interior+0x23>
c002a7b3:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7b6:	8b 00                	mov    (%eax),%eax
c002a7b8:	85 c0                	test   %eax,%eax
c002a7ba:	74 11                	je     c002a7cd <is_interior+0x23>
c002a7bc:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7bf:	8b 40 04             	mov    0x4(%eax),%eax
c002a7c2:	85 c0                	test   %eax,%eax
c002a7c4:	74 07                	je     c002a7cd <is_interior+0x23>
c002a7c6:	b8 01 00 00 00       	mov    $0x1,%eax
c002a7cb:	eb 05                	jmp    c002a7d2 <is_interior+0x28>
c002a7cd:	b8 00 00 00 00       	mov    $0x0,%eax
c002a7d2:	83 e0 01             	and    $0x1,%eax
c002a7d5:	5d                   	pop    %ebp
c002a7d6:	c3                   	ret    

c002a7d7 <is_tail>:
c002a7d7:	55                   	push   %ebp
c002a7d8:	89 e5                	mov    %esp,%ebp
c002a7da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a7de:	74 1a                	je     c002a7fa <is_tail+0x23>
c002a7e0:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7e3:	8b 00                	mov    (%eax),%eax
c002a7e5:	85 c0                	test   %eax,%eax
c002a7e7:	74 11                	je     c002a7fa <is_tail+0x23>
c002a7e9:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7ec:	8b 40 04             	mov    0x4(%eax),%eax
c002a7ef:	85 c0                	test   %eax,%eax
c002a7f1:	75 07                	jne    c002a7fa <is_tail+0x23>
c002a7f3:	b8 01 00 00 00       	mov    $0x1,%eax
c002a7f8:	eb 05                	jmp    c002a7ff <is_tail+0x28>
c002a7fa:	b8 00 00 00 00       	mov    $0x0,%eax
c002a7ff:	83 e0 01             	and    $0x1,%eax
c002a802:	5d                   	pop    %ebp
c002a803:	c3                   	ret    

c002a804 <list_init>:
c002a804:	55                   	push   %ebp
c002a805:	89 e5                	mov    %esp,%ebp
c002a807:	83 ec 08             	sub    $0x8,%esp
c002a80a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a80e:	75 1e                	jne    c002a82e <list_init+0x2a>
c002a810:	83 ec 0c             	sub    $0xc,%esp
c002a813:	68 70 68 03 c0       	push   $0xc0036870
c002a818:	68 7d 68 03 c0       	push   $0xc003687d
c002a81d:	68 48 6a 03 c0       	push   $0xc0036a48
c002a822:	6a 3f                	push   $0x3f
c002a824:	68 94 68 03 c0       	push   $0xc0036894
c002a829:	e8 63 fd ff ff       	call   c002a591 <debug_panic>
c002a82e:	8b 45 08             	mov    0x8(%ebp),%eax
c002a831:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a837:	8b 45 08             	mov    0x8(%ebp),%eax
c002a83a:	8d 50 08             	lea    0x8(%eax),%edx
c002a83d:	8b 45 08             	mov    0x8(%ebp),%eax
c002a840:	89 50 04             	mov    %edx,0x4(%eax)
c002a843:	8b 55 08             	mov    0x8(%ebp),%edx
c002a846:	8b 45 08             	mov    0x8(%ebp),%eax
c002a849:	89 50 08             	mov    %edx,0x8(%eax)
c002a84c:	8b 45 08             	mov    0x8(%ebp),%eax
c002a84f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
c002a856:	90                   	nop
c002a857:	c9                   	leave  
c002a858:	c3                   	ret    

c002a859 <list_begin>:
c002a859:	55                   	push   %ebp
c002a85a:	89 e5                	mov    %esp,%ebp
c002a85c:	83 ec 08             	sub    $0x8,%esp
c002a85f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a863:	75 1e                	jne    c002a883 <list_begin+0x2a>
c002a865:	83 ec 0c             	sub    $0xc,%esp
c002a868:	68 70 68 03 c0       	push   $0xc0036870
c002a86d:	68 7d 68 03 c0       	push   $0xc003687d
c002a872:	68 54 6a 03 c0       	push   $0xc0036a54
c002a877:	6a 4a                	push   $0x4a
c002a879:	68 94 68 03 c0       	push   $0xc0036894
c002a87e:	e8 0e fd ff ff       	call   c002a591 <debug_panic>
c002a883:	8b 45 08             	mov    0x8(%ebp),%eax
c002a886:	8b 40 04             	mov    0x4(%eax),%eax
c002a889:	c9                   	leave  
c002a88a:	c3                   	ret    

c002a88b <list_next>:
c002a88b:	55                   	push   %ebp
c002a88c:	89 e5                	mov    %esp,%ebp
c002a88e:	83 ec 08             	sub    $0x8,%esp
c002a891:	ff 75 08             	pushl  0x8(%ebp)
c002a894:	e8 e4 fe ff ff       	call   c002a77d <is_head>
c002a899:	83 c4 04             	add    $0x4,%esp
c002a89c:	84 c0                	test   %al,%al
c002a89e:	75 2d                	jne    c002a8cd <list_next+0x42>
c002a8a0:	ff 75 08             	pushl  0x8(%ebp)
c002a8a3:	e8 02 ff ff ff       	call   c002a7aa <is_interior>
c002a8a8:	83 c4 04             	add    $0x4,%esp
c002a8ab:	84 c0                	test   %al,%al
c002a8ad:	75 1e                	jne    c002a8cd <list_next+0x42>
c002a8af:	83 ec 0c             	sub    $0xc,%esp
c002a8b2:	68 ac 68 03 c0       	push   $0xc00368ac
c002a8b7:	68 7d 68 03 c0       	push   $0xc003687d
c002a8bc:	68 60 6a 03 c0       	push   $0xc0036a60
c002a8c1:	6a 54                	push   $0x54
c002a8c3:	68 94 68 03 c0       	push   $0xc0036894
c002a8c8:	e8 c4 fc ff ff       	call   c002a591 <debug_panic>
c002a8cd:	8b 45 08             	mov    0x8(%ebp),%eax
c002a8d0:	8b 40 04             	mov    0x4(%eax),%eax
c002a8d3:	c9                   	leave  
c002a8d4:	c3                   	ret    

c002a8d5 <list_end>:
c002a8d5:	55                   	push   %ebp
c002a8d6:	89 e5                	mov    %esp,%ebp
c002a8d8:	83 ec 08             	sub    $0x8,%esp
c002a8db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a8df:	75 1e                	jne    c002a8ff <list_end+0x2a>
c002a8e1:	83 ec 0c             	sub    $0xc,%esp
c002a8e4:	68 70 68 03 c0       	push   $0xc0036870
c002a8e9:	68 7d 68 03 c0       	push   $0xc003687d
c002a8ee:	68 6c 6a 03 c0       	push   $0xc0036a6c
c002a8f3:	6a 60                	push   $0x60
c002a8f5:	68 94 68 03 c0       	push   $0xc0036894
c002a8fa:	e8 92 fc ff ff       	call   c002a591 <debug_panic>
c002a8ff:	8b 45 08             	mov    0x8(%ebp),%eax
c002a902:	83 c0 08             	add    $0x8,%eax
c002a905:	c9                   	leave  
c002a906:	c3                   	ret    

c002a907 <list_rbegin>:
c002a907:	55                   	push   %ebp
c002a908:	89 e5                	mov    %esp,%ebp
c002a90a:	83 ec 08             	sub    $0x8,%esp
c002a90d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a911:	75 1e                	jne    c002a931 <list_rbegin+0x2a>
c002a913:	83 ec 0c             	sub    $0xc,%esp
c002a916:	68 70 68 03 c0       	push   $0xc0036870
c002a91b:	68 7d 68 03 c0       	push   $0xc003687d
c002a920:	68 78 6a 03 c0       	push   $0xc0036a78
c002a925:	6a 69                	push   $0x69
c002a927:	68 94 68 03 c0       	push   $0xc0036894
c002a92c:	e8 60 fc ff ff       	call   c002a591 <debug_panic>
c002a931:	8b 45 08             	mov    0x8(%ebp),%eax
c002a934:	8b 40 08             	mov    0x8(%eax),%eax
c002a937:	c9                   	leave  
c002a938:	c3                   	ret    

c002a939 <list_prev>:
c002a939:	55                   	push   %ebp
c002a93a:	89 e5                	mov    %esp,%ebp
c002a93c:	83 ec 08             	sub    $0x8,%esp
c002a93f:	ff 75 08             	pushl  0x8(%ebp)
c002a942:	e8 63 fe ff ff       	call   c002a7aa <is_interior>
c002a947:	83 c4 04             	add    $0x4,%esp
c002a94a:	84 c0                	test   %al,%al
c002a94c:	75 2d                	jne    c002a97b <list_prev+0x42>
c002a94e:	ff 75 08             	pushl  0x8(%ebp)
c002a951:	e8 81 fe ff ff       	call   c002a7d7 <is_tail>
c002a956:	83 c4 04             	add    $0x4,%esp
c002a959:	84 c0                	test   %al,%al
c002a95b:	75 1e                	jne    c002a97b <list_prev+0x42>
c002a95d:	83 ec 0c             	sub    $0xc,%esp
c002a960:	68 d4 68 03 c0       	push   $0xc00368d4
c002a965:	68 7d 68 03 c0       	push   $0xc003687d
c002a96a:	68 84 6a 03 c0       	push   $0xc0036a84
c002a96f:	6a 73                	push   $0x73
c002a971:	68 94 68 03 c0       	push   $0xc0036894
c002a976:	e8 16 fc ff ff       	call   c002a591 <debug_panic>
c002a97b:	8b 45 08             	mov    0x8(%ebp),%eax
c002a97e:	8b 00                	mov    (%eax),%eax
c002a980:	c9                   	leave  
c002a981:	c3                   	ret    

c002a982 <list_rend>:
c002a982:	55                   	push   %ebp
c002a983:	89 e5                	mov    %esp,%ebp
c002a985:	83 ec 08             	sub    $0x8,%esp
c002a988:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a98c:	75 21                	jne    c002a9af <list_rend+0x2d>
c002a98e:	83 ec 0c             	sub    $0xc,%esp
c002a991:	68 70 68 03 c0       	push   $0xc0036870
c002a996:	68 7d 68 03 c0       	push   $0xc003687d
c002a99b:	68 90 6a 03 c0       	push   $0xc0036a90
c002a9a0:	68 87 00 00 00       	push   $0x87
c002a9a5:	68 94 68 03 c0       	push   $0xc0036894
c002a9aa:	e8 e2 fb ff ff       	call   c002a591 <debug_panic>
c002a9af:	8b 45 08             	mov    0x8(%ebp),%eax
c002a9b2:	c9                   	leave  
c002a9b3:	c3                   	ret    

c002a9b4 <list_head>:
c002a9b4:	55                   	push   %ebp
c002a9b5:	89 e5                	mov    %esp,%ebp
c002a9b7:	83 ec 08             	sub    $0x8,%esp
c002a9ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a9be:	75 21                	jne    c002a9e1 <list_head+0x2d>
c002a9c0:	83 ec 0c             	sub    $0xc,%esp
c002a9c3:	68 70 68 03 c0       	push   $0xc0036870
c002a9c8:	68 7d 68 03 c0       	push   $0xc003687d
c002a9cd:	68 9c 6a 03 c0       	push   $0xc0036a9c
c002a9d2:	68 99 00 00 00       	push   $0x99
c002a9d7:	68 94 68 03 c0       	push   $0xc0036894
c002a9dc:	e8 b0 fb ff ff       	call   c002a591 <debug_panic>
c002a9e1:	8b 45 08             	mov    0x8(%ebp),%eax
c002a9e4:	c9                   	leave  
c002a9e5:	c3                   	ret    

c002a9e6 <list_tail>:
c002a9e6:	55                   	push   %ebp
c002a9e7:	89 e5                	mov    %esp,%ebp
c002a9e9:	83 ec 08             	sub    $0x8,%esp
c002a9ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a9f0:	75 21                	jne    c002aa13 <list_tail+0x2d>
c002a9f2:	83 ec 0c             	sub    $0xc,%esp
c002a9f5:	68 70 68 03 c0       	push   $0xc0036870
c002a9fa:	68 7d 68 03 c0       	push   $0xc003687d
c002a9ff:	68 a8 6a 03 c0       	push   $0xc0036aa8
c002aa04:	68 a1 00 00 00       	push   $0xa1
c002aa09:	68 94 68 03 c0       	push   $0xc0036894
c002aa0e:	e8 7e fb ff ff       	call   c002a591 <debug_panic>
c002aa13:	8b 45 08             	mov    0x8(%ebp),%eax
c002aa16:	83 c0 08             	add    $0x8,%eax
c002aa19:	c9                   	leave  
c002aa1a:	c3                   	ret    

c002aa1b <list_insert>:
c002aa1b:	55                   	push   %ebp
c002aa1c:	89 e5                	mov    %esp,%ebp
c002aa1e:	83 ec 08             	sub    $0x8,%esp
c002aa21:	ff 75 08             	pushl  0x8(%ebp)
c002aa24:	e8 81 fd ff ff       	call   c002a7aa <is_interior>
c002aa29:	83 c4 04             	add    $0x4,%esp
c002aa2c:	84 c0                	test   %al,%al
c002aa2e:	75 30                	jne    c002aa60 <list_insert+0x45>
c002aa30:	ff 75 08             	pushl  0x8(%ebp)
c002aa33:	e8 9f fd ff ff       	call   c002a7d7 <is_tail>
c002aa38:	83 c4 04             	add    $0x4,%esp
c002aa3b:	84 c0                	test   %al,%al
c002aa3d:	75 21                	jne    c002aa60 <list_insert+0x45>
c002aa3f:	83 ec 0c             	sub    $0xc,%esp
c002aa42:	68 fc 68 03 c0       	push   $0xc00368fc
c002aa47:	68 7d 68 03 c0       	push   $0xc003687d
c002aa4c:	68 b4 6a 03 c0       	push   $0xc0036ab4
c002aa51:	68 ab 00 00 00       	push   $0xab
c002aa56:	68 94 68 03 c0       	push   $0xc0036894
c002aa5b:	e8 31 fb ff ff       	call   c002a591 <debug_panic>
c002aa60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002aa64:	75 21                	jne    c002aa87 <list_insert+0x6c>
c002aa66:	83 ec 0c             	sub    $0xc,%esp
c002aa69:	68 25 69 03 c0       	push   $0xc0036925
c002aa6e:	68 7d 68 03 c0       	push   $0xc003687d
c002aa73:	68 b4 6a 03 c0       	push   $0xc0036ab4
c002aa78:	68 ac 00 00 00       	push   $0xac
c002aa7d:	68 94 68 03 c0       	push   $0xc0036894
c002aa82:	e8 0a fb ff ff       	call   c002a591 <debug_panic>
c002aa87:	8b 45 08             	mov    0x8(%ebp),%eax
c002aa8a:	8b 10                	mov    (%eax),%edx
c002aa8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002aa8f:	89 10                	mov    %edx,(%eax)
c002aa91:	8b 45 0c             	mov    0xc(%ebp),%eax
c002aa94:	8b 55 08             	mov    0x8(%ebp),%edx
c002aa97:	89 50 04             	mov    %edx,0x4(%eax)
c002aa9a:	8b 45 08             	mov    0x8(%ebp),%eax
c002aa9d:	8b 00                	mov    (%eax),%eax
c002aa9f:	8b 55 0c             	mov    0xc(%ebp),%edx
c002aaa2:	89 50 04             	mov    %edx,0x4(%eax)
c002aaa5:	8b 45 08             	mov    0x8(%ebp),%eax
c002aaa8:	8b 55 0c             	mov    0xc(%ebp),%edx
c002aaab:	89 10                	mov    %edx,(%eax)
c002aaad:	90                   	nop
c002aaae:	c9                   	leave  
c002aaaf:	c3                   	ret    

c002aab0 <list_splice>:
c002aab0:	55                   	push   %ebp
c002aab1:	89 e5                	mov    %esp,%ebp
c002aab3:	83 ec 08             	sub    $0x8,%esp
c002aab6:	ff 75 08             	pushl  0x8(%ebp)
c002aab9:	e8 ec fc ff ff       	call   c002a7aa <is_interior>
c002aabe:	83 c4 04             	add    $0x4,%esp
c002aac1:	84 c0                	test   %al,%al
c002aac3:	75 30                	jne    c002aaf5 <list_splice+0x45>
c002aac5:	ff 75 08             	pushl  0x8(%ebp)
c002aac8:	e8 0a fd ff ff       	call   c002a7d7 <is_tail>
c002aacd:	83 c4 04             	add    $0x4,%esp
c002aad0:	84 c0                	test   %al,%al
c002aad2:	75 21                	jne    c002aaf5 <list_splice+0x45>
c002aad4:	83 ec 0c             	sub    $0xc,%esp
c002aad7:	68 fc 68 03 c0       	push   $0xc00368fc
c002aadc:	68 7d 68 03 c0       	push   $0xc003687d
c002aae1:	68 c0 6a 03 c0       	push   $0xc0036ac0
c002aae6:	68 bb 00 00 00       	push   $0xbb
c002aaeb:	68 94 68 03 c0       	push   $0xc0036894
c002aaf0:	e8 9c fa ff ff       	call   c002a591 <debug_panic>
c002aaf5:	8b 45 0c             	mov    0xc(%ebp),%eax
c002aaf8:	3b 45 10             	cmp    0x10(%ebp),%eax
c002aafb:	0f 84 ba 00 00 00    	je     c002abbb <list_splice+0x10b>
c002ab01:	83 ec 0c             	sub    $0xc,%esp
c002ab04:	ff 75 10             	pushl  0x10(%ebp)
c002ab07:	e8 2d fe ff ff       	call   c002a939 <list_prev>
c002ab0c:	83 c4 10             	add    $0x10,%esp
c002ab0f:	89 45 10             	mov    %eax,0x10(%ebp)
c002ab12:	83 ec 0c             	sub    $0xc,%esp
c002ab15:	ff 75 0c             	pushl  0xc(%ebp)
c002ab18:	e8 8d fc ff ff       	call   c002a7aa <is_interior>
c002ab1d:	83 c4 10             	add    $0x10,%esp
c002ab20:	84 c0                	test   %al,%al
c002ab22:	75 21                	jne    c002ab45 <list_splice+0x95>
c002ab24:	83 ec 0c             	sub    $0xc,%esp
c002ab27:	68 32 69 03 c0       	push   $0xc0036932
c002ab2c:	68 7d 68 03 c0       	push   $0xc003687d
c002ab31:	68 c0 6a 03 c0       	push   $0xc0036ac0
c002ab36:	68 c0 00 00 00       	push   $0xc0
c002ab3b:	68 94 68 03 c0       	push   $0xc0036894
c002ab40:	e8 4c fa ff ff       	call   c002a591 <debug_panic>
c002ab45:	83 ec 0c             	sub    $0xc,%esp
c002ab48:	ff 75 10             	pushl  0x10(%ebp)
c002ab4b:	e8 5a fc ff ff       	call   c002a7aa <is_interior>
c002ab50:	83 c4 10             	add    $0x10,%esp
c002ab53:	84 c0                	test   %al,%al
c002ab55:	75 21                	jne    c002ab78 <list_splice+0xc8>
c002ab57:	83 ec 0c             	sub    $0xc,%esp
c002ab5a:	68 46 69 03 c0       	push   $0xc0036946
c002ab5f:	68 7d 68 03 c0       	push   $0xc003687d
c002ab64:	68 c0 6a 03 c0       	push   $0xc0036ac0
c002ab69:	68 c1 00 00 00       	push   $0xc1
c002ab6e:	68 94 68 03 c0       	push   $0xc0036894
c002ab73:	e8 19 fa ff ff       	call   c002a591 <debug_panic>
c002ab78:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ab7b:	8b 00                	mov    (%eax),%eax
c002ab7d:	8b 55 10             	mov    0x10(%ebp),%edx
c002ab80:	8b 52 04             	mov    0x4(%edx),%edx
c002ab83:	89 50 04             	mov    %edx,0x4(%eax)
c002ab86:	8b 45 10             	mov    0x10(%ebp),%eax
c002ab89:	8b 40 04             	mov    0x4(%eax),%eax
c002ab8c:	8b 55 0c             	mov    0xc(%ebp),%edx
c002ab8f:	8b 12                	mov    (%edx),%edx
c002ab91:	89 10                	mov    %edx,(%eax)
c002ab93:	8b 45 08             	mov    0x8(%ebp),%eax
c002ab96:	8b 10                	mov    (%eax),%edx
c002ab98:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ab9b:	89 10                	mov    %edx,(%eax)
c002ab9d:	8b 45 10             	mov    0x10(%ebp),%eax
c002aba0:	8b 55 08             	mov    0x8(%ebp),%edx
c002aba3:	89 50 04             	mov    %edx,0x4(%eax)
c002aba6:	8b 45 08             	mov    0x8(%ebp),%eax
c002aba9:	8b 00                	mov    (%eax),%eax
c002abab:	8b 55 0c             	mov    0xc(%ebp),%edx
c002abae:	89 50 04             	mov    %edx,0x4(%eax)
c002abb1:	8b 45 08             	mov    0x8(%ebp),%eax
c002abb4:	8b 55 10             	mov    0x10(%ebp),%edx
c002abb7:	89 10                	mov    %edx,(%eax)
c002abb9:	eb 01                	jmp    c002abbc <list_splice+0x10c>
c002abbb:	90                   	nop
c002abbc:	c9                   	leave  
c002abbd:	c3                   	ret    

c002abbe <list_push_front>:
c002abbe:	55                   	push   %ebp
c002abbf:	89 e5                	mov    %esp,%ebp
c002abc1:	83 ec 08             	sub    $0x8,%esp
c002abc4:	83 ec 0c             	sub    $0xc,%esp
c002abc7:	ff 75 08             	pushl  0x8(%ebp)
c002abca:	e8 8a fc ff ff       	call   c002a859 <list_begin>
c002abcf:	83 c4 10             	add    $0x10,%esp
c002abd2:	83 ec 08             	sub    $0x8,%esp
c002abd5:	ff 75 0c             	pushl  0xc(%ebp)
c002abd8:	50                   	push   %eax
c002abd9:	e8 3d fe ff ff       	call   c002aa1b <list_insert>
c002abde:	83 c4 10             	add    $0x10,%esp
c002abe1:	90                   	nop
c002abe2:	c9                   	leave  
c002abe3:	c3                   	ret    

c002abe4 <list_push_back>:
c002abe4:	55                   	push   %ebp
c002abe5:	89 e5                	mov    %esp,%ebp
c002abe7:	83 ec 08             	sub    $0x8,%esp
c002abea:	83 ec 0c             	sub    $0xc,%esp
c002abed:	ff 75 08             	pushl  0x8(%ebp)
c002abf0:	e8 e0 fc ff ff       	call   c002a8d5 <list_end>
c002abf5:	83 c4 10             	add    $0x10,%esp
c002abf8:	83 ec 08             	sub    $0x8,%esp
c002abfb:	ff 75 0c             	pushl  0xc(%ebp)
c002abfe:	50                   	push   %eax
c002abff:	e8 17 fe ff ff       	call   c002aa1b <list_insert>
c002ac04:	83 c4 10             	add    $0x10,%esp
c002ac07:	90                   	nop
c002ac08:	c9                   	leave  
c002ac09:	c3                   	ret    

c002ac0a <list_remove>:
c002ac0a:	55                   	push   %ebp
c002ac0b:	89 e5                	mov    %esp,%ebp
c002ac0d:	83 ec 08             	sub    $0x8,%esp
c002ac10:	ff 75 08             	pushl  0x8(%ebp)
c002ac13:	e8 92 fb ff ff       	call   c002a7aa <is_interior>
c002ac18:	83 c4 04             	add    $0x4,%esp
c002ac1b:	84 c0                	test   %al,%al
c002ac1d:	75 21                	jne    c002ac40 <list_remove+0x36>
c002ac1f:	83 ec 0c             	sub    $0xc,%esp
c002ac22:	68 59 69 03 c0       	push   $0xc0036959
c002ac27:	68 7d 68 03 c0       	push   $0xc003687d
c002ac2c:	68 cc 6a 03 c0       	push   $0xc0036acc
c002ac31:	68 fb 00 00 00       	push   $0xfb
c002ac36:	68 94 68 03 c0       	push   $0xc0036894
c002ac3b:	e8 51 f9 ff ff       	call   c002a591 <debug_panic>
c002ac40:	8b 45 08             	mov    0x8(%ebp),%eax
c002ac43:	8b 00                	mov    (%eax),%eax
c002ac45:	8b 55 08             	mov    0x8(%ebp),%edx
c002ac48:	8b 52 04             	mov    0x4(%edx),%edx
c002ac4b:	89 50 04             	mov    %edx,0x4(%eax)
c002ac4e:	8b 45 08             	mov    0x8(%ebp),%eax
c002ac51:	8b 40 04             	mov    0x4(%eax),%eax
c002ac54:	8b 55 08             	mov    0x8(%ebp),%edx
c002ac57:	8b 12                	mov    (%edx),%edx
c002ac59:	89 10                	mov    %edx,(%eax)
c002ac5b:	8b 45 08             	mov    0x8(%ebp),%eax
c002ac5e:	8b 40 04             	mov    0x4(%eax),%eax
c002ac61:	c9                   	leave  
c002ac62:	c3                   	ret    

c002ac63 <list_pop_front>:
c002ac63:	55                   	push   %ebp
c002ac64:	89 e5                	mov    %esp,%ebp
c002ac66:	83 ec 18             	sub    $0x18,%esp
c002ac69:	83 ec 0c             	sub    $0xc,%esp
c002ac6c:	ff 75 08             	pushl  0x8(%ebp)
c002ac6f:	e8 43 00 00 00       	call   c002acb7 <list_front>
c002ac74:	83 c4 10             	add    $0x10,%esp
c002ac77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ac7a:	83 ec 0c             	sub    $0xc,%esp
c002ac7d:	ff 75 f4             	pushl  -0xc(%ebp)
c002ac80:	e8 85 ff ff ff       	call   c002ac0a <list_remove>
c002ac85:	83 c4 10             	add    $0x10,%esp
c002ac88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ac8b:	c9                   	leave  
c002ac8c:	c3                   	ret    

c002ac8d <list_pop_back>:
c002ac8d:	55                   	push   %ebp
c002ac8e:	89 e5                	mov    %esp,%ebp
c002ac90:	83 ec 18             	sub    $0x18,%esp
c002ac93:	83 ec 0c             	sub    $0xc,%esp
c002ac96:	ff 75 08             	pushl  0x8(%ebp)
c002ac99:	e8 5d 00 00 00       	call   c002acfb <list_back>
c002ac9e:	83 c4 10             	add    $0x10,%esp
c002aca1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002aca4:	83 ec 0c             	sub    $0xc,%esp
c002aca7:	ff 75 f4             	pushl  -0xc(%ebp)
c002acaa:	e8 5b ff ff ff       	call   c002ac0a <list_remove>
c002acaf:	83 c4 10             	add    $0x10,%esp
c002acb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002acb5:	c9                   	leave  
c002acb6:	c3                   	ret    

c002acb7 <list_front>:
c002acb7:	55                   	push   %ebp
c002acb8:	89 e5                	mov    %esp,%ebp
c002acba:	83 ec 08             	sub    $0x8,%esp
c002acbd:	83 ec 0c             	sub    $0xc,%esp
c002acc0:	ff 75 08             	pushl  0x8(%ebp)
c002acc3:	e8 c4 00 00 00       	call   c002ad8c <list_empty>
c002acc8:	83 c4 10             	add    $0x10,%esp
c002accb:	83 f0 01             	xor    $0x1,%eax
c002acce:	84 c0                	test   %al,%al
c002acd0:	75 21                	jne    c002acf3 <list_front+0x3c>
c002acd2:	83 ec 0c             	sub    $0xc,%esp
c002acd5:	68 6c 69 03 c0       	push   $0xc003696c
c002acda:	68 7d 68 03 c0       	push   $0xc003687d
c002acdf:	68 d8 6a 03 c0       	push   $0xc0036ad8
c002ace4:	68 1a 01 00 00       	push   $0x11a
c002ace9:	68 94 68 03 c0       	push   $0xc0036894
c002acee:	e8 9e f8 ff ff       	call   c002a591 <debug_panic>
c002acf3:	8b 45 08             	mov    0x8(%ebp),%eax
c002acf6:	8b 40 04             	mov    0x4(%eax),%eax
c002acf9:	c9                   	leave  
c002acfa:	c3                   	ret    

c002acfb <list_back>:
c002acfb:	55                   	push   %ebp
c002acfc:	89 e5                	mov    %esp,%ebp
c002acfe:	83 ec 08             	sub    $0x8,%esp
c002ad01:	83 ec 0c             	sub    $0xc,%esp
c002ad04:	ff 75 08             	pushl  0x8(%ebp)
c002ad07:	e8 80 00 00 00       	call   c002ad8c <list_empty>
c002ad0c:	83 c4 10             	add    $0x10,%esp
c002ad0f:	83 f0 01             	xor    $0x1,%eax
c002ad12:	84 c0                	test   %al,%al
c002ad14:	75 21                	jne    c002ad37 <list_back+0x3c>
c002ad16:	83 ec 0c             	sub    $0xc,%esp
c002ad19:	68 6c 69 03 c0       	push   $0xc003696c
c002ad1e:	68 7d 68 03 c0       	push   $0xc003687d
c002ad23:	68 e4 6a 03 c0       	push   $0xc0036ae4
c002ad28:	68 23 01 00 00       	push   $0x123
c002ad2d:	68 94 68 03 c0       	push   $0xc0036894
c002ad32:	e8 5a f8 ff ff       	call   c002a591 <debug_panic>
c002ad37:	8b 45 08             	mov    0x8(%ebp),%eax
c002ad3a:	8b 40 08             	mov    0x8(%eax),%eax
c002ad3d:	c9                   	leave  
c002ad3e:	c3                   	ret    

c002ad3f <list_size>:
c002ad3f:	55                   	push   %ebp
c002ad40:	89 e5                	mov    %esp,%ebp
c002ad42:	83 ec 18             	sub    $0x18,%esp
c002ad45:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002ad4c:	83 ec 0c             	sub    $0xc,%esp
c002ad4f:	ff 75 08             	pushl  0x8(%ebp)
c002ad52:	e8 02 fb ff ff       	call   c002a859 <list_begin>
c002ad57:	83 c4 10             	add    $0x10,%esp
c002ad5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ad5d:	eb 15                	jmp    c002ad74 <list_size+0x35>
c002ad5f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002ad63:	83 ec 0c             	sub    $0xc,%esp
c002ad66:	ff 75 f4             	pushl  -0xc(%ebp)
c002ad69:	e8 1d fb ff ff       	call   c002a88b <list_next>
c002ad6e:	83 c4 10             	add    $0x10,%esp
c002ad71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ad74:	83 ec 0c             	sub    $0xc,%esp
c002ad77:	ff 75 08             	pushl  0x8(%ebp)
c002ad7a:	e8 56 fb ff ff       	call   c002a8d5 <list_end>
c002ad7f:	83 c4 10             	add    $0x10,%esp
c002ad82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002ad85:	75 d8                	jne    c002ad5f <list_size+0x20>
c002ad87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ad8a:	c9                   	leave  
c002ad8b:	c3                   	ret    

c002ad8c <list_empty>:
c002ad8c:	55                   	push   %ebp
c002ad8d:	89 e5                	mov    %esp,%ebp
c002ad8f:	53                   	push   %ebx
c002ad90:	83 ec 04             	sub    $0x4,%esp
c002ad93:	83 ec 0c             	sub    $0xc,%esp
c002ad96:	ff 75 08             	pushl  0x8(%ebp)
c002ad99:	e8 bb fa ff ff       	call   c002a859 <list_begin>
c002ad9e:	83 c4 10             	add    $0x10,%esp
c002ada1:	89 c3                	mov    %eax,%ebx
c002ada3:	83 ec 0c             	sub    $0xc,%esp
c002ada6:	ff 75 08             	pushl  0x8(%ebp)
c002ada9:	e8 27 fb ff ff       	call   c002a8d5 <list_end>
c002adae:	83 c4 10             	add    $0x10,%esp
c002adb1:	39 c3                	cmp    %eax,%ebx
c002adb3:	0f 94 c0             	sete   %al
c002adb6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002adb9:	c9                   	leave  
c002adba:	c3                   	ret    

c002adbb <swap>:
c002adbb:	55                   	push   %ebp
c002adbc:	89 e5                	mov    %esp,%ebp
c002adbe:	83 ec 10             	sub    $0x10,%esp
c002adc1:	8b 45 08             	mov    0x8(%ebp),%eax
c002adc4:	8b 00                	mov    (%eax),%eax
c002adc6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002adc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c002adcc:	8b 10                	mov    (%eax),%edx
c002adce:	8b 45 08             	mov    0x8(%ebp),%eax
c002add1:	89 10                	mov    %edx,(%eax)
c002add3:	8b 45 0c             	mov    0xc(%ebp),%eax
c002add6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002add9:	89 10                	mov    %edx,(%eax)
c002addb:	90                   	nop
c002addc:	c9                   	leave  
c002addd:	c3                   	ret    

c002adde <list_reverse>:
c002adde:	55                   	push   %ebp
c002addf:	89 e5                	mov    %esp,%ebp
c002ade1:	83 ec 18             	sub    $0x18,%esp
c002ade4:	83 ec 0c             	sub    $0xc,%esp
c002ade7:	ff 75 08             	pushl  0x8(%ebp)
c002adea:	e8 9d ff ff ff       	call   c002ad8c <list_empty>
c002adef:	83 c4 10             	add    $0x10,%esp
c002adf2:	83 f0 01             	xor    $0x1,%eax
c002adf5:	84 c0                	test   %al,%al
c002adf7:	74 79                	je     c002ae72 <list_reverse+0x94>
c002adf9:	83 ec 0c             	sub    $0xc,%esp
c002adfc:	ff 75 08             	pushl  0x8(%ebp)
c002adff:	e8 55 fa ff ff       	call   c002a859 <list_begin>
c002ae04:	83 c4 10             	add    $0x10,%esp
c002ae07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ae0a:	eb 1e                	jmp    c002ae2a <list_reverse+0x4c>
c002ae0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ae0f:	8d 50 04             	lea    0x4(%eax),%edx
c002ae12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ae15:	83 ec 08             	sub    $0x8,%esp
c002ae18:	52                   	push   %edx
c002ae19:	50                   	push   %eax
c002ae1a:	e8 9c ff ff ff       	call   c002adbb <swap>
c002ae1f:	83 c4 10             	add    $0x10,%esp
c002ae22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ae25:	8b 00                	mov    (%eax),%eax
c002ae27:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ae2a:	83 ec 0c             	sub    $0xc,%esp
c002ae2d:	ff 75 08             	pushl  0x8(%ebp)
c002ae30:	e8 a0 fa ff ff       	call   c002a8d5 <list_end>
c002ae35:	83 c4 10             	add    $0x10,%esp
c002ae38:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002ae3b:	75 cf                	jne    c002ae0c <list_reverse+0x2e>
c002ae3d:	8b 45 08             	mov    0x8(%ebp),%eax
c002ae40:	8d 50 08             	lea    0x8(%eax),%edx
c002ae43:	8b 45 08             	mov    0x8(%ebp),%eax
c002ae46:	83 c0 04             	add    $0x4,%eax
c002ae49:	83 ec 08             	sub    $0x8,%esp
c002ae4c:	52                   	push   %edx
c002ae4d:	50                   	push   %eax
c002ae4e:	e8 68 ff ff ff       	call   c002adbb <swap>
c002ae53:	83 c4 10             	add    $0x10,%esp
c002ae56:	8b 45 08             	mov    0x8(%ebp),%eax
c002ae59:	8b 40 08             	mov    0x8(%eax),%eax
c002ae5c:	8d 50 04             	lea    0x4(%eax),%edx
c002ae5f:	8b 45 08             	mov    0x8(%ebp),%eax
c002ae62:	8b 40 04             	mov    0x4(%eax),%eax
c002ae65:	83 ec 08             	sub    $0x8,%esp
c002ae68:	52                   	push   %edx
c002ae69:	50                   	push   %eax
c002ae6a:	e8 4c ff ff ff       	call   c002adbb <swap>
c002ae6f:	83 c4 10             	add    $0x10,%esp
c002ae72:	90                   	nop
c002ae73:	c9                   	leave  
c002ae74:	c3                   	ret    

c002ae75 <is_sorted>:
c002ae75:	55                   	push   %ebp
c002ae76:	89 e5                	mov    %esp,%ebp
c002ae78:	83 ec 08             	sub    $0x8,%esp
c002ae7b:	8b 45 08             	mov    0x8(%ebp),%eax
c002ae7e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002ae81:	74 46                	je     c002aec9 <is_sorted+0x54>
c002ae83:	eb 2b                	jmp    c002aeb0 <is_sorted+0x3b>
c002ae85:	83 ec 0c             	sub    $0xc,%esp
c002ae88:	ff 75 08             	pushl  0x8(%ebp)
c002ae8b:	e8 a9 fa ff ff       	call   c002a939 <list_prev>
c002ae90:	83 c4 10             	add    $0x10,%esp
c002ae93:	83 ec 04             	sub    $0x4,%esp
c002ae96:	ff 75 14             	pushl  0x14(%ebp)
c002ae99:	50                   	push   %eax
c002ae9a:	ff 75 08             	pushl  0x8(%ebp)
c002ae9d:	8b 45 10             	mov    0x10(%ebp),%eax
c002aea0:	ff d0                	call   *%eax
c002aea2:	83 c4 10             	add    $0x10,%esp
c002aea5:	84 c0                	test   %al,%al
c002aea7:	74 07                	je     c002aeb0 <is_sorted+0x3b>
c002aea9:	b8 00 00 00 00       	mov    $0x0,%eax
c002aeae:	eb 1e                	jmp    c002aece <is_sorted+0x59>
c002aeb0:	83 ec 0c             	sub    $0xc,%esp
c002aeb3:	ff 75 08             	pushl  0x8(%ebp)
c002aeb6:	e8 d0 f9 ff ff       	call   c002a88b <list_next>
c002aebb:	83 c4 10             	add    $0x10,%esp
c002aebe:	89 45 08             	mov    %eax,0x8(%ebp)
c002aec1:	8b 45 08             	mov    0x8(%ebp),%eax
c002aec4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002aec7:	75 bc                	jne    c002ae85 <is_sorted+0x10>
c002aec9:	b8 01 00 00 00       	mov    $0x1,%eax
c002aece:	c9                   	leave  
c002aecf:	c3                   	ret    

c002aed0 <find_end_of_run>:
c002aed0:	55                   	push   %ebp
c002aed1:	89 e5                	mov    %esp,%ebp
c002aed3:	83 ec 08             	sub    $0x8,%esp
c002aed6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002aeda:	75 21                	jne    c002aefd <find_end_of_run+0x2d>
c002aedc:	83 ec 0c             	sub    $0xc,%esp
c002aedf:	68 7f 69 03 c0       	push   $0xc003697f
c002aee4:	68 7d 68 03 c0       	push   $0xc003687d
c002aee9:	68 f0 6a 03 c0       	push   $0xc0036af0
c002aeee:	68 69 01 00 00       	push   $0x169
c002aef3:	68 94 68 03 c0       	push   $0xc0036894
c002aef8:	e8 94 f6 ff ff       	call   c002a591 <debug_panic>
c002aefd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002af01:	75 21                	jne    c002af24 <find_end_of_run+0x54>
c002af03:	83 ec 0c             	sub    $0xc,%esp
c002af06:	68 89 69 03 c0       	push   $0xc0036989
c002af0b:	68 7d 68 03 c0       	push   $0xc003687d
c002af10:	68 f0 6a 03 c0       	push   $0xc0036af0
c002af15:	68 6a 01 00 00       	push   $0x16a
c002af1a:	68 94 68 03 c0       	push   $0xc0036894
c002af1f:	e8 6d f6 ff ff       	call   c002a591 <debug_panic>
c002af24:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002af28:	75 21                	jne    c002af4b <find_end_of_run+0x7b>
c002af2a:	83 ec 0c             	sub    $0xc,%esp
c002af2d:	68 93 69 03 c0       	push   $0xc0036993
c002af32:	68 7d 68 03 c0       	push   $0xc003687d
c002af37:	68 f0 6a 03 c0       	push   $0xc0036af0
c002af3c:	68 6b 01 00 00       	push   $0x16b
c002af41:	68 94 68 03 c0       	push   $0xc0036894
c002af46:	e8 46 f6 ff ff       	call   c002a591 <debug_panic>
c002af4b:	8b 45 08             	mov    0x8(%ebp),%eax
c002af4e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002af51:	75 21                	jne    c002af74 <find_end_of_run+0xa4>
c002af53:	83 ec 0c             	sub    $0xc,%esp
c002af56:	68 a0 69 03 c0       	push   $0xc00369a0
c002af5b:	68 7d 68 03 c0       	push   $0xc003687d
c002af60:	68 f0 6a 03 c0       	push   $0xc0036af0
c002af65:	68 6c 01 00 00       	push   $0x16c
c002af6a:	68 94 68 03 c0       	push   $0xc0036894
c002af6f:	e8 1d f6 ff ff       	call   c002a591 <debug_panic>
c002af74:	83 ec 0c             	sub    $0xc,%esp
c002af77:	ff 75 08             	pushl  0x8(%ebp)
c002af7a:	e8 0c f9 ff ff       	call   c002a88b <list_next>
c002af7f:	83 c4 10             	add    $0x10,%esp
c002af82:	89 45 08             	mov    %eax,0x8(%ebp)
c002af85:	8b 45 08             	mov    0x8(%ebp),%eax
c002af88:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002af8b:	74 27                	je     c002afb4 <find_end_of_run+0xe4>
c002af8d:	83 ec 0c             	sub    $0xc,%esp
c002af90:	ff 75 08             	pushl  0x8(%ebp)
c002af93:	e8 a1 f9 ff ff       	call   c002a939 <list_prev>
c002af98:	83 c4 10             	add    $0x10,%esp
c002af9b:	83 ec 04             	sub    $0x4,%esp
c002af9e:	ff 75 14             	pushl  0x14(%ebp)
c002afa1:	50                   	push   %eax
c002afa2:	ff 75 08             	pushl  0x8(%ebp)
c002afa5:	8b 45 10             	mov    0x10(%ebp),%eax
c002afa8:	ff d0                	call   *%eax
c002afaa:	83 c4 10             	add    $0x10,%esp
c002afad:	83 f0 01             	xor    $0x1,%eax
c002afb0:	84 c0                	test   %al,%al
c002afb2:	75 c0                	jne    c002af74 <find_end_of_run+0xa4>
c002afb4:	8b 45 08             	mov    0x8(%ebp),%eax
c002afb7:	c9                   	leave  
c002afb8:	c3                   	ret    

c002afb9 <inplace_merge>:
c002afb9:	55                   	push   %ebp
c002afba:	89 e5                	mov    %esp,%ebp
c002afbc:	83 ec 08             	sub    $0x8,%esp
c002afbf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002afc3:	75 21                	jne    c002afe6 <inplace_merge+0x2d>
c002afc5:	83 ec 0c             	sub    $0xc,%esp
c002afc8:	68 a7 69 03 c0       	push   $0xc00369a7
c002afcd:	68 7d 68 03 c0       	push   $0xc003687d
c002afd2:	68 00 6b 03 c0       	push   $0xc0036b00
c002afd7:	68 80 01 00 00       	push   $0x180
c002afdc:	68 94 68 03 c0       	push   $0xc0036894
c002afe1:	e8 ab f5 ff ff       	call   c002a591 <debug_panic>
c002afe6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002afea:	75 21                	jne    c002b00d <inplace_merge+0x54>
c002afec:	83 ec 0c             	sub    $0xc,%esp
c002afef:	68 b2 69 03 c0       	push   $0xc00369b2
c002aff4:	68 7d 68 03 c0       	push   $0xc003687d
c002aff9:	68 00 6b 03 c0       	push   $0xc0036b00
c002affe:	68 81 01 00 00       	push   $0x181
c002b003:	68 94 68 03 c0       	push   $0xc0036894
c002b008:	e8 84 f5 ff ff       	call   c002a591 <debug_panic>
c002b00d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002b011:	75 21                	jne    c002b034 <inplace_merge+0x7b>
c002b013:	83 ec 0c             	sub    $0xc,%esp
c002b016:	68 bf 69 03 c0       	push   $0xc00369bf
c002b01b:	68 7d 68 03 c0       	push   $0xc003687d
c002b020:	68 00 6b 03 c0       	push   $0xc0036b00
c002b025:	68 82 01 00 00       	push   $0x182
c002b02a:	68 94 68 03 c0       	push   $0xc0036894
c002b02f:	e8 5d f5 ff ff       	call   c002a591 <debug_panic>
c002b034:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c002b038:	75 21                	jne    c002b05b <inplace_merge+0xa2>
c002b03a:	83 ec 0c             	sub    $0xc,%esp
c002b03d:	68 93 69 03 c0       	push   $0xc0036993
c002b042:	68 7d 68 03 c0       	push   $0xc003687d
c002b047:	68 00 6b 03 c0       	push   $0xc0036b00
c002b04c:	68 83 01 00 00       	push   $0x183
c002b051:	68 94 68 03 c0       	push   $0xc0036894
c002b056:	e8 36 f5 ff ff       	call   c002a591 <debug_panic>
c002b05b:	ff 75 18             	pushl  0x18(%ebp)
c002b05e:	ff 75 14             	pushl  0x14(%ebp)
c002b061:	ff 75 0c             	pushl  0xc(%ebp)
c002b064:	ff 75 08             	pushl  0x8(%ebp)
c002b067:	e8 09 fe ff ff       	call   c002ae75 <is_sorted>
c002b06c:	83 c4 10             	add    $0x10,%esp
c002b06f:	84 c0                	test   %al,%al
c002b071:	75 21                	jne    c002b094 <inplace_merge+0xdb>
c002b073:	83 ec 0c             	sub    $0xc,%esp
c002b076:	68 cc 69 03 c0       	push   $0xc00369cc
c002b07b:	68 7d 68 03 c0       	push   $0xc003687d
c002b080:	68 00 6b 03 c0       	push   $0xc0036b00
c002b085:	68 84 01 00 00       	push   $0x184
c002b08a:	68 94 68 03 c0       	push   $0xc0036894
c002b08f:	e8 fd f4 ff ff       	call   c002a591 <debug_panic>
c002b094:	ff 75 18             	pushl  0x18(%ebp)
c002b097:	ff 75 14             	pushl  0x14(%ebp)
c002b09a:	ff 75 10             	pushl  0x10(%ebp)
c002b09d:	ff 75 0c             	pushl  0xc(%ebp)
c002b0a0:	e8 d0 fd ff ff       	call   c002ae75 <is_sorted>
c002b0a5:	83 c4 10             	add    $0x10,%esp
c002b0a8:	84 c0                	test   %al,%al
c002b0aa:	0f 85 80 00 00 00    	jne    c002b130 <inplace_merge+0x177>
c002b0b0:	83 ec 0c             	sub    $0xc,%esp
c002b0b3:	68 ec 69 03 c0       	push   $0xc00369ec
c002b0b8:	68 7d 68 03 c0       	push   $0xc003687d
c002b0bd:	68 00 6b 03 c0       	push   $0xc0036b00
c002b0c2:	68 85 01 00 00       	push   $0x185
c002b0c7:	68 94 68 03 c0       	push   $0xc0036894
c002b0cc:	e8 c0 f4 ff ff       	call   c002a591 <debug_panic>
c002b0d1:	83 ec 04             	sub    $0x4,%esp
c002b0d4:	ff 75 18             	pushl  0x18(%ebp)
c002b0d7:	ff 75 08             	pushl  0x8(%ebp)
c002b0da:	ff 75 0c             	pushl  0xc(%ebp)
c002b0dd:	8b 45 14             	mov    0x14(%ebp),%eax
c002b0e0:	ff d0                	call   *%eax
c002b0e2:	83 c4 10             	add    $0x10,%esp
c002b0e5:	83 f0 01             	xor    $0x1,%eax
c002b0e8:	84 c0                	test   %al,%al
c002b0ea:	74 13                	je     c002b0ff <inplace_merge+0x146>
c002b0ec:	83 ec 0c             	sub    $0xc,%esp
c002b0ef:	ff 75 08             	pushl  0x8(%ebp)
c002b0f2:	e8 94 f7 ff ff       	call   c002a88b <list_next>
c002b0f7:	83 c4 10             	add    $0x10,%esp
c002b0fa:	89 45 08             	mov    %eax,0x8(%ebp)
c002b0fd:	eb 31                	jmp    c002b130 <inplace_merge+0x177>
c002b0ff:	83 ec 0c             	sub    $0xc,%esp
c002b102:	ff 75 0c             	pushl  0xc(%ebp)
c002b105:	e8 81 f7 ff ff       	call   c002a88b <list_next>
c002b10a:	83 c4 10             	add    $0x10,%esp
c002b10d:	89 45 0c             	mov    %eax,0xc(%ebp)
c002b110:	83 ec 0c             	sub    $0xc,%esp
c002b113:	ff 75 0c             	pushl  0xc(%ebp)
c002b116:	e8 1e f8 ff ff       	call   c002a939 <list_prev>
c002b11b:	83 c4 10             	add    $0x10,%esp
c002b11e:	83 ec 04             	sub    $0x4,%esp
c002b121:	ff 75 0c             	pushl  0xc(%ebp)
c002b124:	50                   	push   %eax
c002b125:	ff 75 08             	pushl  0x8(%ebp)
c002b128:	e8 83 f9 ff ff       	call   c002aab0 <list_splice>
c002b12d:	83 c4 10             	add    $0x10,%esp
c002b130:	8b 45 08             	mov    0x8(%ebp),%eax
c002b133:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b136:	74 08                	je     c002b140 <inplace_merge+0x187>
c002b138:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b13b:	3b 45 10             	cmp    0x10(%ebp),%eax
c002b13e:	75 91                	jne    c002b0d1 <inplace_merge+0x118>
c002b140:	90                   	nop
c002b141:	c9                   	leave  
c002b142:	c3                   	ret    

c002b143 <list_sort>:
c002b143:	55                   	push   %ebp
c002b144:	89 e5                	mov    %esp,%ebp
c002b146:	53                   	push   %ebx
c002b147:	83 ec 14             	sub    $0x14,%esp
c002b14a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b14e:	75 21                	jne    c002b171 <list_sort+0x2e>
c002b150:	83 ec 0c             	sub    $0xc,%esp
c002b153:	68 70 68 03 c0       	push   $0xc0036870
c002b158:	68 7d 68 03 c0       	push   $0xc003687d
c002b15d:	68 10 6b 03 c0       	push   $0xc0036b10
c002b162:	68 99 01 00 00       	push   $0x199
c002b167:	68 94 68 03 c0       	push   $0xc0036894
c002b16c:	e8 20 f4 ff ff       	call   c002a591 <debug_panic>
c002b171:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002b175:	75 21                	jne    c002b198 <list_sort+0x55>
c002b177:	83 ec 0c             	sub    $0xc,%esp
c002b17a:	68 93 69 03 c0       	push   $0xc0036993
c002b17f:	68 7d 68 03 c0       	push   $0xc003687d
c002b184:	68 10 6b 03 c0       	push   $0xc0036b10
c002b189:	68 9a 01 00 00       	push   $0x19a
c002b18e:	68 94 68 03 c0       	push   $0xc0036894
c002b193:	e8 f9 f3 ff ff       	call   c002a591 <debug_panic>
c002b198:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002b19f:	83 ec 0c             	sub    $0xc,%esp
c002b1a2:	ff 75 08             	pushl  0x8(%ebp)
c002b1a5:	e8 af f6 ff ff       	call   c002a859 <list_begin>
c002b1aa:	83 c4 10             	add    $0x10,%esp
c002b1ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b1b0:	eb 7d                	jmp    c002b22f <list_sort+0xec>
c002b1b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002b1b6:	83 ec 0c             	sub    $0xc,%esp
c002b1b9:	ff 75 08             	pushl  0x8(%ebp)
c002b1bc:	e8 14 f7 ff ff       	call   c002a8d5 <list_end>
c002b1c1:	83 c4 10             	add    $0x10,%esp
c002b1c4:	ff 75 10             	pushl  0x10(%ebp)
c002b1c7:	ff 75 0c             	pushl  0xc(%ebp)
c002b1ca:	50                   	push   %eax
c002b1cb:	ff 75 f0             	pushl  -0x10(%ebp)
c002b1ce:	e8 fd fc ff ff       	call   c002aed0 <find_end_of_run>
c002b1d3:	83 c4 10             	add    $0x10,%esp
c002b1d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002b1d9:	83 ec 0c             	sub    $0xc,%esp
c002b1dc:	ff 75 08             	pushl  0x8(%ebp)
c002b1df:	e8 f1 f6 ff ff       	call   c002a8d5 <list_end>
c002b1e4:	83 c4 10             	add    $0x10,%esp
c002b1e7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002b1ea:	74 5c                	je     c002b248 <list_sort+0x105>
c002b1ec:	83 ec 0c             	sub    $0xc,%esp
c002b1ef:	ff 75 08             	pushl  0x8(%ebp)
c002b1f2:	e8 de f6 ff ff       	call   c002a8d5 <list_end>
c002b1f7:	83 c4 10             	add    $0x10,%esp
c002b1fa:	ff 75 10             	pushl  0x10(%ebp)
c002b1fd:	ff 75 0c             	pushl  0xc(%ebp)
c002b200:	50                   	push   %eax
c002b201:	ff 75 ec             	pushl  -0x14(%ebp)
c002b204:	e8 c7 fc ff ff       	call   c002aed0 <find_end_of_run>
c002b209:	83 c4 10             	add    $0x10,%esp
c002b20c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002b20f:	83 ec 0c             	sub    $0xc,%esp
c002b212:	ff 75 10             	pushl  0x10(%ebp)
c002b215:	ff 75 0c             	pushl  0xc(%ebp)
c002b218:	ff 75 e8             	pushl  -0x18(%ebp)
c002b21b:	ff 75 ec             	pushl  -0x14(%ebp)
c002b21e:	ff 75 f0             	pushl  -0x10(%ebp)
c002b221:	e8 93 fd ff ff       	call   c002afb9 <inplace_merge>
c002b226:	83 c4 20             	add    $0x20,%esp
c002b229:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002b22c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b22f:	83 ec 0c             	sub    $0xc,%esp
c002b232:	ff 75 08             	pushl  0x8(%ebp)
c002b235:	e8 9b f6 ff ff       	call   c002a8d5 <list_end>
c002b23a:	83 c4 10             	add    $0x10,%esp
c002b23d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002b240:	0f 85 6c ff ff ff    	jne    c002b1b2 <list_sort+0x6f>
c002b246:	eb 01                	jmp    c002b249 <list_sort+0x106>
c002b248:	90                   	nop
c002b249:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c002b24d:	0f 87 45 ff ff ff    	ja     c002b198 <list_sort+0x55>
c002b253:	83 ec 0c             	sub    $0xc,%esp
c002b256:	ff 75 08             	pushl  0x8(%ebp)
c002b259:	e8 77 f6 ff ff       	call   c002a8d5 <list_end>
c002b25e:	83 c4 10             	add    $0x10,%esp
c002b261:	89 c3                	mov    %eax,%ebx
c002b263:	83 ec 0c             	sub    $0xc,%esp
c002b266:	ff 75 08             	pushl  0x8(%ebp)
c002b269:	e8 eb f5 ff ff       	call   c002a859 <list_begin>
c002b26e:	83 c4 10             	add    $0x10,%esp
c002b271:	ff 75 10             	pushl  0x10(%ebp)
c002b274:	ff 75 0c             	pushl  0xc(%ebp)
c002b277:	53                   	push   %ebx
c002b278:	50                   	push   %eax
c002b279:	e8 f7 fb ff ff       	call   c002ae75 <is_sorted>
c002b27e:	83 c4 10             	add    $0x10,%esp
c002b281:	84 c0                	test   %al,%al
c002b283:	75 21                	jne    c002b2a6 <list_sort+0x163>
c002b285:	83 ec 0c             	sub    $0xc,%esp
c002b288:	68 0c 6a 03 c0       	push   $0xc0036a0c
c002b28d:	68 7d 68 03 c0       	push   $0xc003687d
c002b292:	68 10 6b 03 c0       	push   $0xc0036b10
c002b297:	68 b7 01 00 00       	push   $0x1b7
c002b29c:	68 94 68 03 c0       	push   $0xc0036894
c002b2a1:	e8 eb f2 ff ff       	call   c002a591 <debug_panic>
c002b2a6:	90                   	nop
c002b2a7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002b2aa:	c9                   	leave  
c002b2ab:	c3                   	ret    

c002b2ac <list_insert_ordered>:
c002b2ac:	55                   	push   %ebp
c002b2ad:	89 e5                	mov    %esp,%ebp
c002b2af:	83 ec 18             	sub    $0x18,%esp
c002b2b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b2b6:	75 21                	jne    c002b2d9 <list_insert_ordered+0x2d>
c002b2b8:	83 ec 0c             	sub    $0xc,%esp
c002b2bb:	68 70 68 03 c0       	push   $0xc0036870
c002b2c0:	68 7d 68 03 c0       	push   $0xc003687d
c002b2c5:	68 1c 6b 03 c0       	push   $0xc0036b1c
c002b2ca:	68 c3 01 00 00       	push   $0x1c3
c002b2cf:	68 94 68 03 c0       	push   $0xc0036894
c002b2d4:	e8 b8 f2 ff ff       	call   c002a591 <debug_panic>
c002b2d9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002b2dd:	75 21                	jne    c002b300 <list_insert_ordered+0x54>
c002b2df:	83 ec 0c             	sub    $0xc,%esp
c002b2e2:	68 25 69 03 c0       	push   $0xc0036925
c002b2e7:	68 7d 68 03 c0       	push   $0xc003687d
c002b2ec:	68 1c 6b 03 c0       	push   $0xc0036b1c
c002b2f1:	68 c4 01 00 00       	push   $0x1c4
c002b2f6:	68 94 68 03 c0       	push   $0xc0036894
c002b2fb:	e8 91 f2 ff ff       	call   c002a591 <debug_panic>
c002b300:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002b304:	75 21                	jne    c002b327 <list_insert_ordered+0x7b>
c002b306:	83 ec 0c             	sub    $0xc,%esp
c002b309:	68 93 69 03 c0       	push   $0xc0036993
c002b30e:	68 7d 68 03 c0       	push   $0xc003687d
c002b313:	68 1c 6b 03 c0       	push   $0xc0036b1c
c002b318:	68 c5 01 00 00       	push   $0x1c5
c002b31d:	68 94 68 03 c0       	push   $0xc0036894
c002b322:	e8 6a f2 ff ff       	call   c002a591 <debug_panic>
c002b327:	83 ec 0c             	sub    $0xc,%esp
c002b32a:	ff 75 08             	pushl  0x8(%ebp)
c002b32d:	e8 27 f5 ff ff       	call   c002a859 <list_begin>
c002b332:	83 c4 10             	add    $0x10,%esp
c002b335:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b338:	eb 29                	jmp    c002b363 <list_insert_ordered+0xb7>
c002b33a:	83 ec 04             	sub    $0x4,%esp
c002b33d:	ff 75 14             	pushl  0x14(%ebp)
c002b340:	ff 75 f4             	pushl  -0xc(%ebp)
c002b343:	ff 75 0c             	pushl  0xc(%ebp)
c002b346:	8b 45 10             	mov    0x10(%ebp),%eax
c002b349:	ff d0                	call   *%eax
c002b34b:	83 c4 10             	add    $0x10,%esp
c002b34e:	84 c0                	test   %al,%al
c002b350:	75 26                	jne    c002b378 <list_insert_ordered+0xcc>
c002b352:	83 ec 0c             	sub    $0xc,%esp
c002b355:	ff 75 f4             	pushl  -0xc(%ebp)
c002b358:	e8 2e f5 ff ff       	call   c002a88b <list_next>
c002b35d:	83 c4 10             	add    $0x10,%esp
c002b360:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b363:	83 ec 0c             	sub    $0xc,%esp
c002b366:	ff 75 08             	pushl  0x8(%ebp)
c002b369:	e8 67 f5 ff ff       	call   c002a8d5 <list_end>
c002b36e:	83 c4 10             	add    $0x10,%esp
c002b371:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002b374:	75 c4                	jne    c002b33a <list_insert_ordered+0x8e>
c002b376:	eb 01                	jmp    c002b379 <list_insert_ordered+0xcd>
c002b378:	90                   	nop
c002b379:	83 ec 08             	sub    $0x8,%esp
c002b37c:	ff 75 0c             	pushl  0xc(%ebp)
c002b37f:	ff 75 f4             	pushl  -0xc(%ebp)
c002b382:	e8 94 f6 ff ff       	call   c002aa1b <list_insert>
c002b387:	83 c4 10             	add    $0x10,%esp
c002b38a:	c9                   	leave  
c002b38b:	c3                   	ret    

c002b38c <list_unique>:
c002b38c:	55                   	push   %ebp
c002b38d:	89 e5                	mov    %esp,%ebp
c002b38f:	83 ec 18             	sub    $0x18,%esp
c002b392:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b396:	75 21                	jne    c002b3b9 <list_unique+0x2d>
c002b398:	83 ec 0c             	sub    $0xc,%esp
c002b39b:	68 70 68 03 c0       	push   $0xc0036870
c002b3a0:	68 7d 68 03 c0       	push   $0xc003687d
c002b3a5:	68 30 6b 03 c0       	push   $0xc0036b30
c002b3aa:	68 d7 01 00 00       	push   $0x1d7
c002b3af:	68 94 68 03 c0       	push   $0xc0036894
c002b3b4:	e8 d8 f1 ff ff       	call   c002a591 <debug_panic>
c002b3b9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002b3bd:	75 21                	jne    c002b3e0 <list_unique+0x54>
c002b3bf:	83 ec 0c             	sub    $0xc,%esp
c002b3c2:	68 93 69 03 c0       	push   $0xc0036993
c002b3c7:	68 7d 68 03 c0       	push   $0xc003687d
c002b3cc:	68 30 6b 03 c0       	push   $0xc0036b30
c002b3d1:	68 d8 01 00 00       	push   $0x1d8
c002b3d6:	68 94 68 03 c0       	push   $0xc0036894
c002b3db:	e8 b1 f1 ff ff       	call   c002a591 <debug_panic>
c002b3e0:	83 ec 0c             	sub    $0xc,%esp
c002b3e3:	ff 75 08             	pushl  0x8(%ebp)
c002b3e6:	e8 a1 f9 ff ff       	call   c002ad8c <list_empty>
c002b3eb:	83 c4 10             	add    $0x10,%esp
c002b3ee:	84 c0                	test   %al,%al
c002b3f0:	0f 85 a0 00 00 00    	jne    c002b496 <list_unique+0x10a>
c002b3f6:	83 ec 0c             	sub    $0xc,%esp
c002b3f9:	ff 75 08             	pushl  0x8(%ebp)
c002b3fc:	e8 58 f4 ff ff       	call   c002a859 <list_begin>
c002b401:	83 c4 10             	add    $0x10,%esp
c002b404:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b407:	eb 63                	jmp    c002b46c <list_unique+0xe0>
c002b409:	83 ec 04             	sub    $0x4,%esp
c002b40c:	ff 75 14             	pushl  0x14(%ebp)
c002b40f:	ff 75 f0             	pushl  -0x10(%ebp)
c002b412:	ff 75 f4             	pushl  -0xc(%ebp)
c002b415:	8b 45 10             	mov    0x10(%ebp),%eax
c002b418:	ff d0                	call   *%eax
c002b41a:	83 c4 10             	add    $0x10,%esp
c002b41d:	83 f0 01             	xor    $0x1,%eax
c002b420:	84 c0                	test   %al,%al
c002b422:	74 42                	je     c002b466 <list_unique+0xda>
c002b424:	83 ec 04             	sub    $0x4,%esp
c002b427:	ff 75 14             	pushl  0x14(%ebp)
c002b42a:	ff 75 f4             	pushl  -0xc(%ebp)
c002b42d:	ff 75 f0             	pushl  -0x10(%ebp)
c002b430:	8b 45 10             	mov    0x10(%ebp),%eax
c002b433:	ff d0                	call   *%eax
c002b435:	83 c4 10             	add    $0x10,%esp
c002b438:	83 f0 01             	xor    $0x1,%eax
c002b43b:	84 c0                	test   %al,%al
c002b43d:	74 27                	je     c002b466 <list_unique+0xda>
c002b43f:	83 ec 0c             	sub    $0xc,%esp
c002b442:	ff 75 f0             	pushl  -0x10(%ebp)
c002b445:	e8 c0 f7 ff ff       	call   c002ac0a <list_remove>
c002b44a:	83 c4 10             	add    $0x10,%esp
c002b44d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002b451:	74 19                	je     c002b46c <list_unique+0xe0>
c002b453:	83 ec 08             	sub    $0x8,%esp
c002b456:	ff 75 f0             	pushl  -0x10(%ebp)
c002b459:	ff 75 0c             	pushl  0xc(%ebp)
c002b45c:	e8 83 f7 ff ff       	call   c002abe4 <list_push_back>
c002b461:	83 c4 10             	add    $0x10,%esp
c002b464:	eb 06                	jmp    c002b46c <list_unique+0xe0>
c002b466:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002b469:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b46c:	83 ec 0c             	sub    $0xc,%esp
c002b46f:	ff 75 f4             	pushl  -0xc(%ebp)
c002b472:	e8 14 f4 ff ff       	call   c002a88b <list_next>
c002b477:	83 c4 10             	add    $0x10,%esp
c002b47a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b47d:	83 ec 0c             	sub    $0xc,%esp
c002b480:	ff 75 08             	pushl  0x8(%ebp)
c002b483:	e8 4d f4 ff ff       	call   c002a8d5 <list_end>
c002b488:	83 c4 10             	add    $0x10,%esp
c002b48b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c002b48e:	0f 85 75 ff ff ff    	jne    c002b409 <list_unique+0x7d>
c002b494:	eb 01                	jmp    c002b497 <list_unique+0x10b>
c002b496:	90                   	nop
c002b497:	c9                   	leave  
c002b498:	c3                   	ret    

c002b499 <list_max>:
c002b499:	55                   	push   %ebp
c002b49a:	89 e5                	mov    %esp,%ebp
c002b49c:	83 ec 18             	sub    $0x18,%esp
c002b49f:	83 ec 0c             	sub    $0xc,%esp
c002b4a2:	ff 75 08             	pushl  0x8(%ebp)
c002b4a5:	e8 af f3 ff ff       	call   c002a859 <list_begin>
c002b4aa:	83 c4 10             	add    $0x10,%esp
c002b4ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b4b0:	83 ec 0c             	sub    $0xc,%esp
c002b4b3:	ff 75 08             	pushl  0x8(%ebp)
c002b4b6:	e8 1a f4 ff ff       	call   c002a8d5 <list_end>
c002b4bb:	83 c4 10             	add    $0x10,%esp
c002b4be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002b4c1:	74 55                	je     c002b518 <list_max+0x7f>
c002b4c3:	83 ec 0c             	sub    $0xc,%esp
c002b4c6:	ff 75 f4             	pushl  -0xc(%ebp)
c002b4c9:	e8 bd f3 ff ff       	call   c002a88b <list_next>
c002b4ce:	83 c4 10             	add    $0x10,%esp
c002b4d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b4d4:	eb 2f                	jmp    c002b505 <list_max+0x6c>
c002b4d6:	83 ec 04             	sub    $0x4,%esp
c002b4d9:	ff 75 10             	pushl  0x10(%ebp)
c002b4dc:	ff 75 f0             	pushl  -0x10(%ebp)
c002b4df:	ff 75 f4             	pushl  -0xc(%ebp)
c002b4e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b4e5:	ff d0                	call   *%eax
c002b4e7:	83 c4 10             	add    $0x10,%esp
c002b4ea:	84 c0                	test   %al,%al
c002b4ec:	74 06                	je     c002b4f4 <list_max+0x5b>
c002b4ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002b4f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b4f4:	83 ec 0c             	sub    $0xc,%esp
c002b4f7:	ff 75 f0             	pushl  -0x10(%ebp)
c002b4fa:	e8 8c f3 ff ff       	call   c002a88b <list_next>
c002b4ff:	83 c4 10             	add    $0x10,%esp
c002b502:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b505:	83 ec 0c             	sub    $0xc,%esp
c002b508:	ff 75 08             	pushl  0x8(%ebp)
c002b50b:	e8 c5 f3 ff ff       	call   c002a8d5 <list_end>
c002b510:	83 c4 10             	add    $0x10,%esp
c002b513:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002b516:	75 be                	jne    c002b4d6 <list_max+0x3d>
c002b518:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b51b:	c9                   	leave  
c002b51c:	c3                   	ret    

c002b51d <list_min>:
c002b51d:	55                   	push   %ebp
c002b51e:	89 e5                	mov    %esp,%ebp
c002b520:	83 ec 18             	sub    $0x18,%esp
c002b523:	83 ec 0c             	sub    $0xc,%esp
c002b526:	ff 75 08             	pushl  0x8(%ebp)
c002b529:	e8 2b f3 ff ff       	call   c002a859 <list_begin>
c002b52e:	83 c4 10             	add    $0x10,%esp
c002b531:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b534:	83 ec 0c             	sub    $0xc,%esp
c002b537:	ff 75 08             	pushl  0x8(%ebp)
c002b53a:	e8 96 f3 ff ff       	call   c002a8d5 <list_end>
c002b53f:	83 c4 10             	add    $0x10,%esp
c002b542:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002b545:	74 55                	je     c002b59c <list_min+0x7f>
c002b547:	83 ec 0c             	sub    $0xc,%esp
c002b54a:	ff 75 f4             	pushl  -0xc(%ebp)
c002b54d:	e8 39 f3 ff ff       	call   c002a88b <list_next>
c002b552:	83 c4 10             	add    $0x10,%esp
c002b555:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b558:	eb 2f                	jmp    c002b589 <list_min+0x6c>
c002b55a:	83 ec 04             	sub    $0x4,%esp
c002b55d:	ff 75 10             	pushl  0x10(%ebp)
c002b560:	ff 75 f4             	pushl  -0xc(%ebp)
c002b563:	ff 75 f0             	pushl  -0x10(%ebp)
c002b566:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b569:	ff d0                	call   *%eax
c002b56b:	83 c4 10             	add    $0x10,%esp
c002b56e:	84 c0                	test   %al,%al
c002b570:	74 06                	je     c002b578 <list_min+0x5b>
c002b572:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002b575:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b578:	83 ec 0c             	sub    $0xc,%esp
c002b57b:	ff 75 f0             	pushl  -0x10(%ebp)
c002b57e:	e8 08 f3 ff ff       	call   c002a88b <list_next>
c002b583:	83 c4 10             	add    $0x10,%esp
c002b586:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b589:	83 ec 0c             	sub    $0xc,%esp
c002b58c:	ff 75 08             	pushl  0x8(%ebp)
c002b58f:	e8 41 f3 ff ff       	call   c002a8d5 <list_end>
c002b594:	83 c4 10             	add    $0x10,%esp
c002b597:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002b59a:	75 be                	jne    c002b55a <list_min+0x3d>
c002b59c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b59f:	c9                   	leave  
c002b5a0:	c3                   	ret    

c002b5a1 <elem_idx>:
c002b5a1:	55                   	push   %ebp
c002b5a2:	89 e5                	mov    %esp,%ebp
c002b5a4:	8b 45 08             	mov    0x8(%ebp),%eax
c002b5a7:	c1 e8 05             	shr    $0x5,%eax
c002b5aa:	5d                   	pop    %ebp
c002b5ab:	c3                   	ret    

c002b5ac <bit_mask>:
c002b5ac:	55                   	push   %ebp
c002b5ad:	89 e5                	mov    %esp,%ebp
c002b5af:	8b 45 08             	mov    0x8(%ebp),%eax
c002b5b2:	83 e0 1f             	and    $0x1f,%eax
c002b5b5:	ba 01 00 00 00       	mov    $0x1,%edx
c002b5ba:	89 c1                	mov    %eax,%ecx
c002b5bc:	d3 e2                	shl    %cl,%edx
c002b5be:	89 d0                	mov    %edx,%eax
c002b5c0:	5d                   	pop    %ebp
c002b5c1:	c3                   	ret    

c002b5c2 <elem_cnt>:
c002b5c2:	55                   	push   %ebp
c002b5c3:	89 e5                	mov    %esp,%ebp
c002b5c5:	8b 45 08             	mov    0x8(%ebp),%eax
c002b5c8:	83 c0 1f             	add    $0x1f,%eax
c002b5cb:	c1 e8 05             	shr    $0x5,%eax
c002b5ce:	5d                   	pop    %ebp
c002b5cf:	c3                   	ret    

c002b5d0 <byte_cnt>:
c002b5d0:	55                   	push   %ebp
c002b5d1:	89 e5                	mov    %esp,%ebp
c002b5d3:	ff 75 08             	pushl  0x8(%ebp)
c002b5d6:	e8 e7 ff ff ff       	call   c002b5c2 <elem_cnt>
c002b5db:	83 c4 04             	add    $0x4,%esp
c002b5de:	c1 e0 02             	shl    $0x2,%eax
c002b5e1:	c9                   	leave  
c002b5e2:	c3                   	ret    

c002b5e3 <last_mask>:
c002b5e3:	55                   	push   %ebp
c002b5e4:	89 e5                	mov    %esp,%ebp
c002b5e6:	83 ec 10             	sub    $0x10,%esp
c002b5e9:	8b 45 08             	mov    0x8(%ebp),%eax
c002b5ec:	8b 00                	mov    (%eax),%eax
c002b5ee:	83 e0 1f             	and    $0x1f,%eax
c002b5f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b5f4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c002b5f8:	74 13                	je     c002b60d <last_mask+0x2a>
c002b5fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002b5fd:	ba 01 00 00 00       	mov    $0x1,%edx
c002b602:	89 c1                	mov    %eax,%ecx
c002b604:	d3 e2                	shl    %cl,%edx
c002b606:	89 d0                	mov    %edx,%eax
c002b608:	83 e8 01             	sub    $0x1,%eax
c002b60b:	eb 05                	jmp    c002b612 <last_mask+0x2f>
c002b60d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002b612:	c9                   	leave  
c002b613:	c3                   	ret    

c002b614 <bitmap_create>:
c002b614:	55                   	push   %ebp
c002b615:	89 e5                	mov    %esp,%ebp
c002b617:	83 ec 18             	sub    $0x18,%esp
c002b61a:	83 ec 0c             	sub    $0xc,%esp
c002b61d:	6a 08                	push   $0x8
c002b61f:	e8 2f 8b ff ff       	call   c0024153 <malloc>
c002b624:	83 c4 10             	add    $0x10,%esp
c002b627:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b62a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002b62e:	74 5d                	je     c002b68d <bitmap_create+0x79>
c002b630:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b633:	8b 55 08             	mov    0x8(%ebp),%edx
c002b636:	89 10                	mov    %edx,(%eax)
c002b638:	83 ec 0c             	sub    $0xc,%esp
c002b63b:	ff 75 08             	pushl  0x8(%ebp)
c002b63e:	e8 8d ff ff ff       	call   c002b5d0 <byte_cnt>
c002b643:	83 c4 10             	add    $0x10,%esp
c002b646:	83 ec 0c             	sub    $0xc,%esp
c002b649:	50                   	push   %eax
c002b64a:	e8 04 8b ff ff       	call   c0024153 <malloc>
c002b64f:	83 c4 10             	add    $0x10,%esp
c002b652:	89 c2                	mov    %eax,%edx
c002b654:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b657:	89 50 04             	mov    %edx,0x4(%eax)
c002b65a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b65d:	8b 40 04             	mov    0x4(%eax),%eax
c002b660:	85 c0                	test   %eax,%eax
c002b662:	75 06                	jne    c002b66a <bitmap_create+0x56>
c002b664:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b668:	75 15                	jne    c002b67f <bitmap_create+0x6b>
c002b66a:	83 ec 08             	sub    $0x8,%esp
c002b66d:	6a 00                	push   $0x0
c002b66f:	ff 75 f4             	pushl  -0xc(%ebp)
c002b672:	e8 92 02 00 00       	call   c002b909 <bitmap_set_all>
c002b677:	83 c4 10             	add    $0x10,%esp
c002b67a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b67d:	eb 13                	jmp    c002b692 <bitmap_create+0x7e>
c002b67f:	83 ec 0c             	sub    $0xc,%esp
c002b682:	ff 75 f4             	pushl  -0xc(%ebp)
c002b685:	e8 c6 8d ff ff       	call   c0024450 <free>
c002b68a:	83 c4 10             	add    $0x10,%esp
c002b68d:	b8 00 00 00 00       	mov    $0x0,%eax
c002b692:	c9                   	leave  
c002b693:	c3                   	ret    

c002b694 <bitmap_create_in_buf>:
c002b694:	55                   	push   %ebp
c002b695:	89 e5                	mov    %esp,%ebp
c002b697:	83 ec 18             	sub    $0x18,%esp
c002b69a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b69d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b6a0:	83 ec 0c             	sub    $0xc,%esp
c002b6a3:	ff 75 08             	pushl  0x8(%ebp)
c002b6a6:	e8 4f 00 00 00       	call   c002b6fa <bitmap_buf_size>
c002b6ab:	83 c4 10             	add    $0x10,%esp
c002b6ae:	3b 45 10             	cmp    0x10(%ebp),%eax
c002b6b1:	76 1e                	jbe    c002b6d1 <bitmap_create_in_buf+0x3d>
c002b6b3:	83 ec 0c             	sub    $0xc,%esp
c002b6b6:	68 3c 6b 03 c0       	push   $0xc0036b3c
c002b6bb:	68 64 6b 03 c0       	push   $0xc0036b64
c002b6c0:	68 e0 6b 03 c0       	push   $0xc0036be0
c002b6c5:	6a 68                	push   $0x68
c002b6c7:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b6cc:	e8 c0 ee ff ff       	call   c002a591 <debug_panic>
c002b6d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b6d4:	8b 55 08             	mov    0x8(%ebp),%edx
c002b6d7:	89 10                	mov    %edx,(%eax)
c002b6d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b6dc:	8d 50 08             	lea    0x8(%eax),%edx
c002b6df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b6e2:	89 50 04             	mov    %edx,0x4(%eax)
c002b6e5:	83 ec 08             	sub    $0x8,%esp
c002b6e8:	6a 00                	push   $0x0
c002b6ea:	ff 75 f4             	pushl  -0xc(%ebp)
c002b6ed:	e8 17 02 00 00       	call   c002b909 <bitmap_set_all>
c002b6f2:	83 c4 10             	add    $0x10,%esp
c002b6f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b6f8:	c9                   	leave  
c002b6f9:	c3                   	ret    

c002b6fa <bitmap_buf_size>:
c002b6fa:	55                   	push   %ebp
c002b6fb:	89 e5                	mov    %esp,%ebp
c002b6fd:	ff 75 08             	pushl  0x8(%ebp)
c002b700:	e8 cb fe ff ff       	call   c002b5d0 <byte_cnt>
c002b705:	83 c4 04             	add    $0x4,%esp
c002b708:	83 c0 08             	add    $0x8,%eax
c002b70b:	c9                   	leave  
c002b70c:	c3                   	ret    

c002b70d <bitmap_destroy>:
c002b70d:	55                   	push   %ebp
c002b70e:	89 e5                	mov    %esp,%ebp
c002b710:	83 ec 08             	sub    $0x8,%esp
c002b713:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b717:	74 20                	je     c002b739 <bitmap_destroy+0x2c>
c002b719:	8b 45 08             	mov    0x8(%ebp),%eax
c002b71c:	8b 40 04             	mov    0x4(%eax),%eax
c002b71f:	83 ec 0c             	sub    $0xc,%esp
c002b722:	50                   	push   %eax
c002b723:	e8 28 8d ff ff       	call   c0024450 <free>
c002b728:	83 c4 10             	add    $0x10,%esp
c002b72b:	83 ec 0c             	sub    $0xc,%esp
c002b72e:	ff 75 08             	pushl  0x8(%ebp)
c002b731:	e8 1a 8d ff ff       	call   c0024450 <free>
c002b736:	83 c4 10             	add    $0x10,%esp
c002b739:	90                   	nop
c002b73a:	c9                   	leave  
c002b73b:	c3                   	ret    

c002b73c <bitmap_size>:
c002b73c:	55                   	push   %ebp
c002b73d:	89 e5                	mov    %esp,%ebp
c002b73f:	8b 45 08             	mov    0x8(%ebp),%eax
c002b742:	8b 00                	mov    (%eax),%eax
c002b744:	5d                   	pop    %ebp
c002b745:	c3                   	ret    

c002b746 <bitmap_set>:
c002b746:	55                   	push   %ebp
c002b747:	89 e5                	mov    %esp,%ebp
c002b749:	83 ec 18             	sub    $0x18,%esp
c002b74c:	8b 45 10             	mov    0x10(%ebp),%eax
c002b74f:	88 45 f4             	mov    %al,-0xc(%ebp)
c002b752:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b756:	75 21                	jne    c002b779 <bitmap_set+0x33>
c002b758:	83 ec 0c             	sub    $0xc,%esp
c002b75b:	68 95 6b 03 c0       	push   $0xc0036b95
c002b760:	68 64 6b 03 c0       	push   $0xc0036b64
c002b765:	68 f8 6b 03 c0       	push   $0xc0036bf8
c002b76a:	68 93 00 00 00       	push   $0x93
c002b76f:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b774:	e8 18 ee ff ff       	call   c002a591 <debug_panic>
c002b779:	8b 45 08             	mov    0x8(%ebp),%eax
c002b77c:	8b 00                	mov    (%eax),%eax
c002b77e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b781:	77 21                	ja     c002b7a4 <bitmap_set+0x5e>
c002b783:	83 ec 0c             	sub    $0xc,%esp
c002b786:	68 9f 6b 03 c0       	push   $0xc0036b9f
c002b78b:	68 64 6b 03 c0       	push   $0xc0036b64
c002b790:	68 f8 6b 03 c0       	push   $0xc0036bf8
c002b795:	68 94 00 00 00       	push   $0x94
c002b79a:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b79f:	e8 ed ed ff ff       	call   c002a591 <debug_panic>
c002b7a4:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c002b7a8:	74 13                	je     c002b7bd <bitmap_set+0x77>
c002b7aa:	83 ec 08             	sub    $0x8,%esp
c002b7ad:	ff 75 0c             	pushl  0xc(%ebp)
c002b7b0:	ff 75 08             	pushl  0x8(%ebp)
c002b7b3:	e8 19 00 00 00       	call   c002b7d1 <bitmap_mark>
c002b7b8:	83 c4 10             	add    $0x10,%esp
c002b7bb:	eb 11                	jmp    c002b7ce <bitmap_set+0x88>
c002b7bd:	83 ec 08             	sub    $0x8,%esp
c002b7c0:	ff 75 0c             	pushl  0xc(%ebp)
c002b7c3:	ff 75 08             	pushl  0x8(%ebp)
c002b7c6:	e8 3e 00 00 00       	call   c002b809 <bitmap_reset>
c002b7cb:	83 c4 10             	add    $0x10,%esp
c002b7ce:	90                   	nop
c002b7cf:	c9                   	leave  
c002b7d0:	c3                   	ret    

c002b7d1 <bitmap_mark>:
c002b7d1:	55                   	push   %ebp
c002b7d2:	89 e5                	mov    %esp,%ebp
c002b7d4:	83 ec 10             	sub    $0x10,%esp
c002b7d7:	ff 75 0c             	pushl  0xc(%ebp)
c002b7da:	e8 c2 fd ff ff       	call   c002b5a1 <elem_idx>
c002b7df:	83 c4 04             	add    $0x4,%esp
c002b7e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b7e5:	ff 75 0c             	pushl  0xc(%ebp)
c002b7e8:	e8 bf fd ff ff       	call   c002b5ac <bit_mask>
c002b7ed:	83 c4 04             	add    $0x4,%esp
c002b7f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c002b7f3:	8b 45 08             	mov    0x8(%ebp),%eax
c002b7f6:	8b 40 04             	mov    0x4(%eax),%eax
c002b7f9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002b7fc:	c1 e2 02             	shl    $0x2,%edx
c002b7ff:	01 c2                	add    %eax,%edx
c002b801:	8b 45 f8             	mov    -0x8(%ebp),%eax
c002b804:	09 02                	or     %eax,(%edx)
c002b806:	90                   	nop
c002b807:	c9                   	leave  
c002b808:	c3                   	ret    

c002b809 <bitmap_reset>:
c002b809:	55                   	push   %ebp
c002b80a:	89 e5                	mov    %esp,%ebp
c002b80c:	83 ec 10             	sub    $0x10,%esp
c002b80f:	ff 75 0c             	pushl  0xc(%ebp)
c002b812:	e8 8a fd ff ff       	call   c002b5a1 <elem_idx>
c002b817:	83 c4 04             	add    $0x4,%esp
c002b81a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b81d:	ff 75 0c             	pushl  0xc(%ebp)
c002b820:	e8 87 fd ff ff       	call   c002b5ac <bit_mask>
c002b825:	83 c4 04             	add    $0x4,%esp
c002b828:	89 45 f8             	mov    %eax,-0x8(%ebp)
c002b82b:	8b 45 08             	mov    0x8(%ebp),%eax
c002b82e:	8b 40 04             	mov    0x4(%eax),%eax
c002b831:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002b834:	c1 e2 02             	shl    $0x2,%edx
c002b837:	01 d0                	add    %edx,%eax
c002b839:	8b 55 f8             	mov    -0x8(%ebp),%edx
c002b83c:	f7 d2                	not    %edx
c002b83e:	21 10                	and    %edx,(%eax)
c002b840:	90                   	nop
c002b841:	c9                   	leave  
c002b842:	c3                   	ret    

c002b843 <bitmap_flip>:
c002b843:	55                   	push   %ebp
c002b844:	89 e5                	mov    %esp,%ebp
c002b846:	83 ec 10             	sub    $0x10,%esp
c002b849:	ff 75 0c             	pushl  0xc(%ebp)
c002b84c:	e8 50 fd ff ff       	call   c002b5a1 <elem_idx>
c002b851:	83 c4 04             	add    $0x4,%esp
c002b854:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b857:	ff 75 0c             	pushl  0xc(%ebp)
c002b85a:	e8 4d fd ff ff       	call   c002b5ac <bit_mask>
c002b85f:	83 c4 04             	add    $0x4,%esp
c002b862:	89 45 f8             	mov    %eax,-0x8(%ebp)
c002b865:	8b 45 08             	mov    0x8(%ebp),%eax
c002b868:	8b 40 04             	mov    0x4(%eax),%eax
c002b86b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002b86e:	c1 e2 02             	shl    $0x2,%edx
c002b871:	01 c2                	add    %eax,%edx
c002b873:	8b 45 f8             	mov    -0x8(%ebp),%eax
c002b876:	31 02                	xor    %eax,(%edx)
c002b878:	90                   	nop
c002b879:	c9                   	leave  
c002b87a:	c3                   	ret    

c002b87b <bitmap_test>:
c002b87b:	55                   	push   %ebp
c002b87c:	89 e5                	mov    %esp,%ebp
c002b87e:	53                   	push   %ebx
c002b87f:	83 ec 04             	sub    $0x4,%esp
c002b882:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b886:	75 21                	jne    c002b8a9 <bitmap_test+0x2e>
c002b888:	83 ec 0c             	sub    $0xc,%esp
c002b88b:	68 95 6b 03 c0       	push   $0xc0036b95
c002b890:	68 64 6b 03 c0       	push   $0xc0036b64
c002b895:	68 04 6c 03 c0       	push   $0xc0036c04
c002b89a:	68 c8 00 00 00       	push   $0xc8
c002b89f:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b8a4:	e8 e8 ec ff ff       	call   c002a591 <debug_panic>
c002b8a9:	8b 45 08             	mov    0x8(%ebp),%eax
c002b8ac:	8b 00                	mov    (%eax),%eax
c002b8ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b8b1:	77 21                	ja     c002b8d4 <bitmap_test+0x59>
c002b8b3:	83 ec 0c             	sub    $0xc,%esp
c002b8b6:	68 9f 6b 03 c0       	push   $0xc0036b9f
c002b8bb:	68 64 6b 03 c0       	push   $0xc0036b64
c002b8c0:	68 04 6c 03 c0       	push   $0xc0036c04
c002b8c5:	68 c9 00 00 00       	push   $0xc9
c002b8ca:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b8cf:	e8 bd ec ff ff       	call   c002a591 <debug_panic>
c002b8d4:	8b 45 08             	mov    0x8(%ebp),%eax
c002b8d7:	8b 58 04             	mov    0x4(%eax),%ebx
c002b8da:	83 ec 0c             	sub    $0xc,%esp
c002b8dd:	ff 75 0c             	pushl  0xc(%ebp)
c002b8e0:	e8 bc fc ff ff       	call   c002b5a1 <elem_idx>
c002b8e5:	83 c4 10             	add    $0x10,%esp
c002b8e8:	c1 e0 02             	shl    $0x2,%eax
c002b8eb:	01 d8                	add    %ebx,%eax
c002b8ed:	8b 18                	mov    (%eax),%ebx
c002b8ef:	83 ec 0c             	sub    $0xc,%esp
c002b8f2:	ff 75 0c             	pushl  0xc(%ebp)
c002b8f5:	e8 b2 fc ff ff       	call   c002b5ac <bit_mask>
c002b8fa:	83 c4 10             	add    $0x10,%esp
c002b8fd:	21 d8                	and    %ebx,%eax
c002b8ff:	85 c0                	test   %eax,%eax
c002b901:	0f 95 c0             	setne  %al
c002b904:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002b907:	c9                   	leave  
c002b908:	c3                   	ret    

c002b909 <bitmap_set_all>:
c002b909:	55                   	push   %ebp
c002b90a:	89 e5                	mov    %esp,%ebp
c002b90c:	53                   	push   %ebx
c002b90d:	83 ec 14             	sub    $0x14,%esp
c002b910:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b913:	88 45 f4             	mov    %al,-0xc(%ebp)
c002b916:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b91a:	75 21                	jne    c002b93d <bitmap_set_all+0x34>
c002b91c:	83 ec 0c             	sub    $0xc,%esp
c002b91f:	68 95 6b 03 c0       	push   $0xc0036b95
c002b924:	68 64 6b 03 c0       	push   $0xc0036b64
c002b929:	68 10 6c 03 c0       	push   $0xc0036c10
c002b92e:	68 d3 00 00 00       	push   $0xd3
c002b933:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b938:	e8 54 ec ff ff       	call   c002a591 <debug_panic>
c002b93d:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
c002b941:	83 ec 0c             	sub    $0xc,%esp
c002b944:	ff 75 08             	pushl  0x8(%ebp)
c002b947:	e8 f0 fd ff ff       	call   c002b73c <bitmap_size>
c002b94c:	83 c4 10             	add    $0x10,%esp
c002b94f:	53                   	push   %ebx
c002b950:	50                   	push   %eax
c002b951:	6a 00                	push   $0x0
c002b953:	ff 75 08             	pushl  0x8(%ebp)
c002b956:	e8 09 00 00 00       	call   c002b964 <bitmap_set_multiple>
c002b95b:	83 c4 10             	add    $0x10,%esp
c002b95e:	90                   	nop
c002b95f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002b962:	c9                   	leave  
c002b963:	c3                   	ret    

c002b964 <bitmap_set_multiple>:
c002b964:	55                   	push   %ebp
c002b965:	89 e5                	mov    %esp,%ebp
c002b967:	83 ec 28             	sub    $0x28,%esp
c002b96a:	8b 45 14             	mov    0x14(%ebp),%eax
c002b96d:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002b970:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b974:	75 21                	jne    c002b997 <bitmap_set_multiple+0x33>
c002b976:	83 ec 0c             	sub    $0xc,%esp
c002b979:	68 95 6b 03 c0       	push   $0xc0036b95
c002b97e:	68 64 6b 03 c0       	push   $0xc0036b64
c002b983:	68 20 6c 03 c0       	push   $0xc0036c20
c002b988:	68 de 00 00 00       	push   $0xde
c002b98d:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b992:	e8 fa eb ff ff       	call   c002a591 <debug_panic>
c002b997:	8b 45 08             	mov    0x8(%ebp),%eax
c002b99a:	8b 00                	mov    (%eax),%eax
c002b99c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b99f:	73 21                	jae    c002b9c2 <bitmap_set_multiple+0x5e>
c002b9a1:	83 ec 0c             	sub    $0xc,%esp
c002b9a4:	68 b0 6b 03 c0       	push   $0xc0036bb0
c002b9a9:	68 64 6b 03 c0       	push   $0xc0036b64
c002b9ae:	68 20 6c 03 c0       	push   $0xc0036c20
c002b9b3:	68 df 00 00 00       	push   $0xdf
c002b9b8:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b9bd:	e8 cf eb ff ff       	call   c002a591 <debug_panic>
c002b9c2:	8b 55 0c             	mov    0xc(%ebp),%edx
c002b9c5:	8b 45 10             	mov    0x10(%ebp),%eax
c002b9c8:	01 c2                	add    %eax,%edx
c002b9ca:	8b 45 08             	mov    0x8(%ebp),%eax
c002b9cd:	8b 00                	mov    (%eax),%eax
c002b9cf:	39 c2                	cmp    %eax,%edx
c002b9d1:	76 21                	jbe    c002b9f4 <bitmap_set_multiple+0x90>
c002b9d3:	83 ec 0c             	sub    $0xc,%esp
c002b9d6:	68 c4 6b 03 c0       	push   $0xc0036bc4
c002b9db:	68 64 6b 03 c0       	push   $0xc0036b64
c002b9e0:	68 20 6c 03 c0       	push   $0xc0036c20
c002b9e5:	68 e0 00 00 00       	push   $0xe0
c002b9ea:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002b9ef:	e8 9d eb ff ff       	call   c002a591 <debug_panic>
c002b9f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002b9fb:	eb 20                	jmp    c002ba1d <bitmap_set_multiple+0xb9>
c002b9fd:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002ba01:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c002ba04:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002ba07:	01 ca                	add    %ecx,%edx
c002ba09:	83 ec 04             	sub    $0x4,%esp
c002ba0c:	50                   	push   %eax
c002ba0d:	52                   	push   %edx
c002ba0e:	ff 75 08             	pushl  0x8(%ebp)
c002ba11:	e8 30 fd ff ff       	call   c002b746 <bitmap_set>
c002ba16:	83 c4 10             	add    $0x10,%esp
c002ba19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002ba1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ba20:	3b 45 10             	cmp    0x10(%ebp),%eax
c002ba23:	72 d8                	jb     c002b9fd <bitmap_set_multiple+0x99>
c002ba25:	90                   	nop
c002ba26:	c9                   	leave  
c002ba27:	c3                   	ret    

c002ba28 <bitmap_count>:
c002ba28:	55                   	push   %ebp
c002ba29:	89 e5                	mov    %esp,%ebp
c002ba2b:	83 ec 28             	sub    $0x28,%esp
c002ba2e:	8b 45 14             	mov    0x14(%ebp),%eax
c002ba31:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002ba34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002ba38:	75 21                	jne    c002ba5b <bitmap_count+0x33>
c002ba3a:	83 ec 0c             	sub    $0xc,%esp
c002ba3d:	68 95 6b 03 c0       	push   $0xc0036b95
c002ba42:	68 64 6b 03 c0       	push   $0xc0036b64
c002ba47:	68 34 6c 03 c0       	push   $0xc0036c34
c002ba4c:	68 ed 00 00 00       	push   $0xed
c002ba51:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002ba56:	e8 36 eb ff ff       	call   c002a591 <debug_panic>
c002ba5b:	8b 45 08             	mov    0x8(%ebp),%eax
c002ba5e:	8b 00                	mov    (%eax),%eax
c002ba60:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002ba63:	73 21                	jae    c002ba86 <bitmap_count+0x5e>
c002ba65:	83 ec 0c             	sub    $0xc,%esp
c002ba68:	68 b0 6b 03 c0       	push   $0xc0036bb0
c002ba6d:	68 64 6b 03 c0       	push   $0xc0036b64
c002ba72:	68 34 6c 03 c0       	push   $0xc0036c34
c002ba77:	68 ee 00 00 00       	push   $0xee
c002ba7c:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002ba81:	e8 0b eb ff ff       	call   c002a591 <debug_panic>
c002ba86:	8b 55 0c             	mov    0xc(%ebp),%edx
c002ba89:	8b 45 10             	mov    0x10(%ebp),%eax
c002ba8c:	01 c2                	add    %eax,%edx
c002ba8e:	8b 45 08             	mov    0x8(%ebp),%eax
c002ba91:	8b 00                	mov    (%eax),%eax
c002ba93:	39 c2                	cmp    %eax,%edx
c002ba95:	76 21                	jbe    c002bab8 <bitmap_count+0x90>
c002ba97:	83 ec 0c             	sub    $0xc,%esp
c002ba9a:	68 c4 6b 03 c0       	push   $0xc0036bc4
c002ba9f:	68 64 6b 03 c0       	push   $0xc0036b64
c002baa4:	68 34 6c 03 c0       	push   $0xc0036c34
c002baa9:	68 ef 00 00 00       	push   $0xef
c002baae:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002bab3:	e8 d9 ea ff ff       	call   c002a591 <debug_panic>
c002bab8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002babf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002bac6:	eb 24                	jmp    c002baec <bitmap_count+0xc4>
c002bac8:	8b 55 0c             	mov    0xc(%ebp),%edx
c002bacb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bace:	01 d0                	add    %edx,%eax
c002bad0:	83 ec 08             	sub    $0x8,%esp
c002bad3:	50                   	push   %eax
c002bad4:	ff 75 08             	pushl  0x8(%ebp)
c002bad7:	e8 9f fd ff ff       	call   c002b87b <bitmap_test>
c002badc:	83 c4 10             	add    $0x10,%esp
c002badf:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c002bae2:	75 04                	jne    c002bae8 <bitmap_count+0xc0>
c002bae4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002bae8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002baec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002baef:	3b 45 10             	cmp    0x10(%ebp),%eax
c002baf2:	72 d4                	jb     c002bac8 <bitmap_count+0xa0>
c002baf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002baf7:	c9                   	leave  
c002baf8:	c3                   	ret    

c002baf9 <bitmap_contains>:
c002baf9:	55                   	push   %ebp
c002bafa:	89 e5                	mov    %esp,%ebp
c002bafc:	83 ec 28             	sub    $0x28,%esp
c002baff:	8b 45 14             	mov    0x14(%ebp),%eax
c002bb02:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002bb05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002bb09:	75 21                	jne    c002bb2c <bitmap_contains+0x33>
c002bb0b:	83 ec 0c             	sub    $0xc,%esp
c002bb0e:	68 95 6b 03 c0       	push   $0xc0036b95
c002bb13:	68 64 6b 03 c0       	push   $0xc0036b64
c002bb18:	68 44 6c 03 c0       	push   $0xc0036c44
c002bb1d:	68 ff 00 00 00       	push   $0xff
c002bb22:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002bb27:	e8 65 ea ff ff       	call   c002a591 <debug_panic>
c002bb2c:	8b 45 08             	mov    0x8(%ebp),%eax
c002bb2f:	8b 00                	mov    (%eax),%eax
c002bb31:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002bb34:	73 21                	jae    c002bb57 <bitmap_contains+0x5e>
c002bb36:	83 ec 0c             	sub    $0xc,%esp
c002bb39:	68 b0 6b 03 c0       	push   $0xc0036bb0
c002bb3e:	68 64 6b 03 c0       	push   $0xc0036b64
c002bb43:	68 44 6c 03 c0       	push   $0xc0036c44
c002bb48:	68 00 01 00 00       	push   $0x100
c002bb4d:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002bb52:	e8 3a ea ff ff       	call   c002a591 <debug_panic>
c002bb57:	8b 55 0c             	mov    0xc(%ebp),%edx
c002bb5a:	8b 45 10             	mov    0x10(%ebp),%eax
c002bb5d:	01 c2                	add    %eax,%edx
c002bb5f:	8b 45 08             	mov    0x8(%ebp),%eax
c002bb62:	8b 00                	mov    (%eax),%eax
c002bb64:	39 c2                	cmp    %eax,%edx
c002bb66:	76 21                	jbe    c002bb89 <bitmap_contains+0x90>
c002bb68:	83 ec 0c             	sub    $0xc,%esp
c002bb6b:	68 c4 6b 03 c0       	push   $0xc0036bc4
c002bb70:	68 64 6b 03 c0       	push   $0xc0036b64
c002bb75:	68 44 6c 03 c0       	push   $0xc0036c44
c002bb7a:	68 01 01 00 00       	push   $0x101
c002bb7f:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002bb84:	e8 08 ea ff ff       	call   c002a591 <debug_panic>
c002bb89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002bb90:	eb 27                	jmp    c002bbb9 <bitmap_contains+0xc0>
c002bb92:	8b 55 0c             	mov    0xc(%ebp),%edx
c002bb95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bb98:	01 d0                	add    %edx,%eax
c002bb9a:	83 ec 08             	sub    $0x8,%esp
c002bb9d:	50                   	push   %eax
c002bb9e:	ff 75 08             	pushl  0x8(%ebp)
c002bba1:	e8 d5 fc ff ff       	call   c002b87b <bitmap_test>
c002bba6:	83 c4 10             	add    $0x10,%esp
c002bba9:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c002bbac:	75 07                	jne    c002bbb5 <bitmap_contains+0xbc>
c002bbae:	b8 01 00 00 00       	mov    $0x1,%eax
c002bbb3:	eb 11                	jmp    c002bbc6 <bitmap_contains+0xcd>
c002bbb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002bbb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bbbc:	3b 45 10             	cmp    0x10(%ebp),%eax
c002bbbf:	72 d1                	jb     c002bb92 <bitmap_contains+0x99>
c002bbc1:	b8 00 00 00 00       	mov    $0x0,%eax
c002bbc6:	c9                   	leave  
c002bbc7:	c3                   	ret    

c002bbc8 <bitmap_any>:
c002bbc8:	55                   	push   %ebp
c002bbc9:	89 e5                	mov    %esp,%ebp
c002bbcb:	83 ec 08             	sub    $0x8,%esp
c002bbce:	6a 01                	push   $0x1
c002bbd0:	ff 75 10             	pushl  0x10(%ebp)
c002bbd3:	ff 75 0c             	pushl  0xc(%ebp)
c002bbd6:	ff 75 08             	pushl  0x8(%ebp)
c002bbd9:	e8 1b ff ff ff       	call   c002baf9 <bitmap_contains>
c002bbde:	83 c4 10             	add    $0x10,%esp
c002bbe1:	c9                   	leave  
c002bbe2:	c3                   	ret    

c002bbe3 <bitmap_none>:
c002bbe3:	55                   	push   %ebp
c002bbe4:	89 e5                	mov    %esp,%ebp
c002bbe6:	83 ec 08             	sub    $0x8,%esp
c002bbe9:	6a 01                	push   $0x1
c002bbeb:	ff 75 10             	pushl  0x10(%ebp)
c002bbee:	ff 75 0c             	pushl  0xc(%ebp)
c002bbf1:	ff 75 08             	pushl  0x8(%ebp)
c002bbf4:	e8 00 ff ff ff       	call   c002baf9 <bitmap_contains>
c002bbf9:	83 c4 10             	add    $0x10,%esp
c002bbfc:	0f b6 c0             	movzbl %al,%eax
c002bbff:	85 c0                	test   %eax,%eax
c002bc01:	0f 95 c0             	setne  %al
c002bc04:	83 f0 01             	xor    $0x1,%eax
c002bc07:	0f b6 c0             	movzbl %al,%eax
c002bc0a:	83 e0 01             	and    $0x1,%eax
c002bc0d:	c9                   	leave  
c002bc0e:	c3                   	ret    

c002bc0f <bitmap_all>:
c002bc0f:	55                   	push   %ebp
c002bc10:	89 e5                	mov    %esp,%ebp
c002bc12:	83 ec 08             	sub    $0x8,%esp
c002bc15:	6a 00                	push   $0x0
c002bc17:	ff 75 10             	pushl  0x10(%ebp)
c002bc1a:	ff 75 0c             	pushl  0xc(%ebp)
c002bc1d:	ff 75 08             	pushl  0x8(%ebp)
c002bc20:	e8 d4 fe ff ff       	call   c002baf9 <bitmap_contains>
c002bc25:	83 c4 10             	add    $0x10,%esp
c002bc28:	0f b6 c0             	movzbl %al,%eax
c002bc2b:	85 c0                	test   %eax,%eax
c002bc2d:	0f 95 c0             	setne  %al
c002bc30:	83 f0 01             	xor    $0x1,%eax
c002bc33:	0f b6 c0             	movzbl %al,%eax
c002bc36:	83 e0 01             	and    $0x1,%eax
c002bc39:	c9                   	leave  
c002bc3a:	c3                   	ret    

c002bc3b <bitmap_scan>:
c002bc3b:	55                   	push   %ebp
c002bc3c:	89 e5                	mov    %esp,%ebp
c002bc3e:	83 ec 28             	sub    $0x28,%esp
c002bc41:	8b 45 14             	mov    0x14(%ebp),%eax
c002bc44:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002bc47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002bc4b:	75 21                	jne    c002bc6e <bitmap_scan+0x33>
c002bc4d:	83 ec 0c             	sub    $0xc,%esp
c002bc50:	68 95 6b 03 c0       	push   $0xc0036b95
c002bc55:	68 64 6b 03 c0       	push   $0xc0036b64
c002bc5a:	68 54 6c 03 c0       	push   $0xc0036c54
c002bc5f:	68 2a 01 00 00       	push   $0x12a
c002bc64:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002bc69:	e8 23 e9 ff ff       	call   c002a591 <debug_panic>
c002bc6e:	8b 45 08             	mov    0x8(%ebp),%eax
c002bc71:	8b 00                	mov    (%eax),%eax
c002bc73:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002bc76:	73 21                	jae    c002bc99 <bitmap_scan+0x5e>
c002bc78:	83 ec 0c             	sub    $0xc,%esp
c002bc7b:	68 b0 6b 03 c0       	push   $0xc0036bb0
c002bc80:	68 64 6b 03 c0       	push   $0xc0036b64
c002bc85:	68 54 6c 03 c0       	push   $0xc0036c54
c002bc8a:	68 2b 01 00 00       	push   $0x12b
c002bc8f:	68 7b 6b 03 c0       	push   $0xc0036b7b
c002bc94:	e8 f8 e8 ff ff       	call   c002a591 <debug_panic>
c002bc99:	8b 45 08             	mov    0x8(%ebp),%eax
c002bc9c:	8b 00                	mov    (%eax),%eax
c002bc9e:	3b 45 10             	cmp    0x10(%ebp),%eax
c002bca1:	72 47                	jb     c002bcea <bitmap_scan+0xaf>
c002bca3:	8b 45 08             	mov    0x8(%ebp),%eax
c002bca6:	8b 00                	mov    (%eax),%eax
c002bca8:	2b 45 10             	sub    0x10(%ebp),%eax
c002bcab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bcae:	8b 45 0c             	mov    0xc(%ebp),%eax
c002bcb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bcb4:	eb 2c                	jmp    c002bce2 <bitmap_scan+0xa7>
c002bcb6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002bcba:	83 f0 01             	xor    $0x1,%eax
c002bcbd:	0f b6 c0             	movzbl %al,%eax
c002bcc0:	50                   	push   %eax
c002bcc1:	ff 75 10             	pushl  0x10(%ebp)
c002bcc4:	ff 75 f4             	pushl  -0xc(%ebp)
c002bcc7:	ff 75 08             	pushl  0x8(%ebp)
c002bcca:	e8 2a fe ff ff       	call   c002baf9 <bitmap_contains>
c002bccf:	83 c4 10             	add    $0x10,%esp
c002bcd2:	83 f0 01             	xor    $0x1,%eax
c002bcd5:	84 c0                	test   %al,%al
c002bcd7:	74 05                	je     c002bcde <bitmap_scan+0xa3>
c002bcd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bcdc:	eb 11                	jmp    c002bcef <bitmap_scan+0xb4>
c002bcde:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002bce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bce5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002bce8:	76 cc                	jbe    c002bcb6 <bitmap_scan+0x7b>
c002bcea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002bcef:	c9                   	leave  
c002bcf0:	c3                   	ret    

c002bcf1 <bitmap_scan_and_flip>:
c002bcf1:	55                   	push   %ebp
c002bcf2:	89 e5                	mov    %esp,%ebp
c002bcf4:	83 ec 28             	sub    $0x28,%esp
c002bcf7:	8b 45 14             	mov    0x14(%ebp),%eax
c002bcfa:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002bcfd:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002bd01:	50                   	push   %eax
c002bd02:	ff 75 10             	pushl  0x10(%ebp)
c002bd05:	ff 75 0c             	pushl  0xc(%ebp)
c002bd08:	ff 75 08             	pushl  0x8(%ebp)
c002bd0b:	e8 2b ff ff ff       	call   c002bc3b <bitmap_scan>
c002bd10:	83 c4 10             	add    $0x10,%esp
c002bd13:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bd16:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c002bd1a:	74 1c                	je     c002bd38 <bitmap_scan_and_flip+0x47>
c002bd1c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002bd20:	83 f0 01             	xor    $0x1,%eax
c002bd23:	0f b6 c0             	movzbl %al,%eax
c002bd26:	50                   	push   %eax
c002bd27:	ff 75 10             	pushl  0x10(%ebp)
c002bd2a:	ff 75 f4             	pushl  -0xc(%ebp)
c002bd2d:	ff 75 08             	pushl  0x8(%ebp)
c002bd30:	e8 2f fc ff ff       	call   c002b964 <bitmap_set_multiple>
c002bd35:	83 c4 10             	add    $0x10,%esp
c002bd38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bd3b:	c9                   	leave  
c002bd3c:	c3                   	ret    

c002bd3d <bitmap_file_size>:
c002bd3d:	55                   	push   %ebp
c002bd3e:	89 e5                	mov    %esp,%ebp
c002bd40:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd43:	8b 00                	mov    (%eax),%eax
c002bd45:	50                   	push   %eax
c002bd46:	e8 85 f8 ff ff       	call   c002b5d0 <byte_cnt>
c002bd4b:	83 c4 04             	add    $0x4,%esp
c002bd4e:	c9                   	leave  
c002bd4f:	c3                   	ret    

c002bd50 <bitmap_read>:
c002bd50:	55                   	push   %ebp
c002bd51:	89 e5                	mov    %esp,%ebp
c002bd53:	56                   	push   %esi
c002bd54:	53                   	push   %ebx
c002bd55:	83 ec 10             	sub    $0x10,%esp
c002bd58:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c002bd5c:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd5f:	8b 00                	mov    (%eax),%eax
c002bd61:	85 c0                	test   %eax,%eax
c002bd63:	74 7a                	je     c002bddf <bitmap_read+0x8f>
c002bd65:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd68:	8b 00                	mov    (%eax),%eax
c002bd6a:	50                   	push   %eax
c002bd6b:	e8 60 f8 ff ff       	call   c002b5d0 <byte_cnt>
c002bd70:	83 c4 04             	add    $0x4,%esp
c002bd73:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bd76:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd79:	8b 40 04             	mov    0x4(%eax),%eax
c002bd7c:	6a 00                	push   $0x0
c002bd7e:	ff 75 f0             	pushl  -0x10(%ebp)
c002bd81:	50                   	push   %eax
c002bd82:	ff 75 0c             	pushl  0xc(%ebp)
c002bd85:	e8 53 4a 00 00       	call   c00307dd <file_read_at>
c002bd8a:	83 c4 10             	add    $0x10,%esp
c002bd8d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002bd90:	0f 94 c0             	sete   %al
c002bd93:	88 45 f7             	mov    %al,-0x9(%ebp)
c002bd96:	83 ec 0c             	sub    $0xc,%esp
c002bd99:	ff 75 08             	pushl  0x8(%ebp)
c002bd9c:	e8 42 f8 ff ff       	call   c002b5e3 <last_mask>
c002bda1:	83 c4 10             	add    $0x10,%esp
c002bda4:	89 c6                	mov    %eax,%esi
c002bda6:	8b 45 08             	mov    0x8(%ebp),%eax
c002bda9:	8b 58 04             	mov    0x4(%eax),%ebx
c002bdac:	8b 45 08             	mov    0x8(%ebp),%eax
c002bdaf:	8b 00                	mov    (%eax),%eax
c002bdb1:	83 ec 0c             	sub    $0xc,%esp
c002bdb4:	50                   	push   %eax
c002bdb5:	e8 08 f8 ff ff       	call   c002b5c2 <elem_cnt>
c002bdba:	83 c4 10             	add    $0x10,%esp
c002bdbd:	8d 90 ff ff ff 3f    	lea    0x3fffffff(%eax),%edx
c002bdc3:	c1 e2 02             	shl    $0x2,%edx
c002bdc6:	8d 0c 13             	lea    (%ebx,%edx,1),%ecx
c002bdc9:	8b 55 08             	mov    0x8(%ebp),%edx
c002bdcc:	8b 52 04             	mov    0x4(%edx),%edx
c002bdcf:	05 ff ff ff 3f       	add    $0x3fffffff,%eax
c002bdd4:	c1 e0 02             	shl    $0x2,%eax
c002bdd7:	01 d0                	add    %edx,%eax
c002bdd9:	8b 00                	mov    (%eax),%eax
c002bddb:	21 f0                	and    %esi,%eax
c002bddd:	89 01                	mov    %eax,(%ecx)
c002bddf:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c002bde3:	8d 65 f8             	lea    -0x8(%ebp),%esp
c002bde6:	5b                   	pop    %ebx
c002bde7:	5e                   	pop    %esi
c002bde8:	5d                   	pop    %ebp
c002bde9:	c3                   	ret    

c002bdea <bitmap_write>:
c002bdea:	55                   	push   %ebp
c002bdeb:	89 e5                	mov    %esp,%ebp
c002bded:	83 ec 18             	sub    $0x18,%esp
c002bdf0:	8b 45 08             	mov    0x8(%ebp),%eax
c002bdf3:	8b 00                	mov    (%eax),%eax
c002bdf5:	50                   	push   %eax
c002bdf6:	e8 d5 f7 ff ff       	call   c002b5d0 <byte_cnt>
c002bdfb:	83 c4 04             	add    $0x4,%esp
c002bdfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002be01:	8b 45 08             	mov    0x8(%ebp),%eax
c002be04:	8b 40 04             	mov    0x4(%eax),%eax
c002be07:	6a 00                	push   $0x0
c002be09:	ff 75 f4             	pushl  -0xc(%ebp)
c002be0c:	50                   	push   %eax
c002be0d:	ff 75 0c             	pushl  0xc(%ebp)
c002be10:	e8 21 4a 00 00       	call   c0030836 <file_write_at>
c002be15:	83 c4 10             	add    $0x10,%esp
c002be18:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002be1b:	0f 94 c0             	sete   %al
c002be1e:	c9                   	leave  
c002be1f:	c3                   	ret    

c002be20 <bitmap_dump>:
c002be20:	55                   	push   %ebp
c002be21:	89 e5                	mov    %esp,%ebp
c002be23:	83 ec 08             	sub    $0x8,%esp
c002be26:	8b 45 08             	mov    0x8(%ebp),%eax
c002be29:	8b 00                	mov    (%eax),%eax
c002be2b:	50                   	push   %eax
c002be2c:	e8 9f f7 ff ff       	call   c002b5d0 <byte_cnt>
c002be31:	83 c4 04             	add    $0x4,%esp
c002be34:	89 c2                	mov    %eax,%edx
c002be36:	8b 45 08             	mov    0x8(%ebp),%eax
c002be39:	8b 40 04             	mov    0x4(%eax),%eax
c002be3c:	6a 00                	push   $0x0
c002be3e:	52                   	push   %edx
c002be3f:	50                   	push   %eax
c002be40:	6a 00                	push   $0x0
c002be42:	e8 24 cd ff ff       	call   c0028b6b <hex_dump>
c002be47:	83 c4 10             	add    $0x10,%esp
c002be4a:	90                   	nop
c002be4b:	c9                   	leave  
c002be4c:	c3                   	ret    

c002be4d <hash_init>:
c002be4d:	55                   	push   %ebp
c002be4e:	89 e5                	mov    %esp,%ebp
c002be50:	83 ec 08             	sub    $0x8,%esp
c002be53:	8b 45 08             	mov    0x8(%ebp),%eax
c002be56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002be5c:	8b 45 08             	mov    0x8(%ebp),%eax
c002be5f:	c7 40 04 04 00 00 00 	movl   $0x4,0x4(%eax)
c002be66:	8b 45 08             	mov    0x8(%ebp),%eax
c002be69:	8b 40 04             	mov    0x4(%eax),%eax
c002be6c:	c1 e0 04             	shl    $0x4,%eax
c002be6f:	83 ec 0c             	sub    $0xc,%esp
c002be72:	50                   	push   %eax
c002be73:	e8 db 82 ff ff       	call   c0024153 <malloc>
c002be78:	83 c4 10             	add    $0x10,%esp
c002be7b:	89 c2                	mov    %eax,%edx
c002be7d:	8b 45 08             	mov    0x8(%ebp),%eax
c002be80:	89 50 08             	mov    %edx,0x8(%eax)
c002be83:	8b 45 08             	mov    0x8(%ebp),%eax
c002be86:	8b 55 0c             	mov    0xc(%ebp),%edx
c002be89:	89 50 0c             	mov    %edx,0xc(%eax)
c002be8c:	8b 45 08             	mov    0x8(%ebp),%eax
c002be8f:	8b 55 10             	mov    0x10(%ebp),%edx
c002be92:	89 50 10             	mov    %edx,0x10(%eax)
c002be95:	8b 45 08             	mov    0x8(%ebp),%eax
c002be98:	8b 55 14             	mov    0x14(%ebp),%edx
c002be9b:	89 50 14             	mov    %edx,0x14(%eax)
c002be9e:	8b 45 08             	mov    0x8(%ebp),%eax
c002bea1:	8b 40 08             	mov    0x8(%eax),%eax
c002bea4:	85 c0                	test   %eax,%eax
c002bea6:	74 17                	je     c002bebf <hash_init+0x72>
c002bea8:	83 ec 08             	sub    $0x8,%esp
c002beab:	6a 00                	push   $0x0
c002bead:	ff 75 08             	pushl  0x8(%ebp)
c002beb0:	e8 11 00 00 00       	call   c002bec6 <hash_clear>
c002beb5:	83 c4 10             	add    $0x10,%esp
c002beb8:	b8 01 00 00 00       	mov    $0x1,%eax
c002bebd:	eb 05                	jmp    c002bec4 <hash_init+0x77>
c002bebf:	b8 00 00 00 00       	mov    $0x0,%eax
c002bec4:	c9                   	leave  
c002bec5:	c3                   	ret    

c002bec6 <hash_clear>:
c002bec6:	55                   	push   %ebp
c002bec7:	89 e5                	mov    %esp,%ebp
c002bec9:	83 ec 18             	sub    $0x18,%esp
c002becc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002bed3:	eb 72                	jmp    c002bf47 <hash_clear+0x81>
c002bed5:	8b 45 08             	mov    0x8(%ebp),%eax
c002bed8:	8b 40 08             	mov    0x8(%eax),%eax
c002bedb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002bede:	c1 e2 04             	shl    $0x4,%edx
c002bee1:	01 d0                	add    %edx,%eax
c002bee3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bee6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002beea:	74 49                	je     c002bf35 <hash_clear+0x6f>
c002beec:	eb 32                	jmp    c002bf20 <hash_clear+0x5a>
c002beee:	83 ec 0c             	sub    $0xc,%esp
c002bef1:	ff 75 f0             	pushl  -0x10(%ebp)
c002bef4:	e8 6a ed ff ff       	call   c002ac63 <list_pop_front>
c002bef9:	83 c4 10             	add    $0x10,%esp
c002befc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002beff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002bf02:	83 c0 04             	add    $0x4,%eax
c002bf05:	83 e8 04             	sub    $0x4,%eax
c002bf08:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002bf0b:	8b 45 08             	mov    0x8(%ebp),%eax
c002bf0e:	8b 40 14             	mov    0x14(%eax),%eax
c002bf11:	83 ec 08             	sub    $0x8,%esp
c002bf14:	50                   	push   %eax
c002bf15:	ff 75 e8             	pushl  -0x18(%ebp)
c002bf18:	8b 45 0c             	mov    0xc(%ebp),%eax
c002bf1b:	ff d0                	call   *%eax
c002bf1d:	83 c4 10             	add    $0x10,%esp
c002bf20:	83 ec 0c             	sub    $0xc,%esp
c002bf23:	ff 75 f0             	pushl  -0x10(%ebp)
c002bf26:	e8 61 ee ff ff       	call   c002ad8c <list_empty>
c002bf2b:	83 c4 10             	add    $0x10,%esp
c002bf2e:	83 f0 01             	xor    $0x1,%eax
c002bf31:	84 c0                	test   %al,%al
c002bf33:	75 b9                	jne    c002beee <hash_clear+0x28>
c002bf35:	83 ec 0c             	sub    $0xc,%esp
c002bf38:	ff 75 f0             	pushl  -0x10(%ebp)
c002bf3b:	e8 c4 e8 ff ff       	call   c002a804 <list_init>
c002bf40:	83 c4 10             	add    $0x10,%esp
c002bf43:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002bf47:	8b 45 08             	mov    0x8(%ebp),%eax
c002bf4a:	8b 40 04             	mov    0x4(%eax),%eax
c002bf4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002bf50:	77 83                	ja     c002bed5 <hash_clear+0xf>
c002bf52:	8b 45 08             	mov    0x8(%ebp),%eax
c002bf55:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002bf5b:	90                   	nop
c002bf5c:	c9                   	leave  
c002bf5d:	c3                   	ret    

c002bf5e <hash_destroy>:
c002bf5e:	55                   	push   %ebp
c002bf5f:	89 e5                	mov    %esp,%ebp
c002bf61:	83 ec 08             	sub    $0x8,%esp
c002bf64:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002bf68:	74 11                	je     c002bf7b <hash_destroy+0x1d>
c002bf6a:	83 ec 08             	sub    $0x8,%esp
c002bf6d:	ff 75 0c             	pushl  0xc(%ebp)
c002bf70:	ff 75 08             	pushl  0x8(%ebp)
c002bf73:	e8 4e ff ff ff       	call   c002bec6 <hash_clear>
c002bf78:	83 c4 10             	add    $0x10,%esp
c002bf7b:	8b 45 08             	mov    0x8(%ebp),%eax
c002bf7e:	8b 40 08             	mov    0x8(%eax),%eax
c002bf81:	83 ec 0c             	sub    $0xc,%esp
c002bf84:	50                   	push   %eax
c002bf85:	e8 c6 84 ff ff       	call   c0024450 <free>
c002bf8a:	83 c4 10             	add    $0x10,%esp
c002bf8d:	90                   	nop
c002bf8e:	c9                   	leave  
c002bf8f:	c3                   	ret    

c002bf90 <hash_insert>:
c002bf90:	55                   	push   %ebp
c002bf91:	89 e5                	mov    %esp,%ebp
c002bf93:	83 ec 18             	sub    $0x18,%esp
c002bf96:	83 ec 08             	sub    $0x8,%esp
c002bf99:	ff 75 0c             	pushl  0xc(%ebp)
c002bf9c:	ff 75 08             	pushl  0x8(%ebp)
c002bf9f:	e8 5a 04 00 00       	call   c002c3fe <find_bucket>
c002bfa4:	83 c4 10             	add    $0x10,%esp
c002bfa7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bfaa:	83 ec 04             	sub    $0x4,%esp
c002bfad:	ff 75 0c             	pushl  0xc(%ebp)
c002bfb0:	ff 75 f4             	pushl  -0xc(%ebp)
c002bfb3:	ff 75 08             	pushl  0x8(%ebp)
c002bfb6:	e8 81 04 00 00       	call   c002c43c <find_elem>
c002bfbb:	83 c4 10             	add    $0x10,%esp
c002bfbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bfc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002bfc5:	75 14                	jne    c002bfdb <hash_insert+0x4b>
c002bfc7:	83 ec 04             	sub    $0x4,%esp
c002bfca:	ff 75 0c             	pushl  0xc(%ebp)
c002bfcd:	ff 75 f4             	pushl  -0xc(%ebp)
c002bfd0:	ff 75 08             	pushl  0x8(%ebp)
c002bfd3:	e8 d0 06 00 00       	call   c002c6a8 <insert_elem>
c002bfd8:	83 c4 10             	add    $0x10,%esp
c002bfdb:	83 ec 0c             	sub    $0xc,%esp
c002bfde:	ff 75 08             	pushl  0x8(%ebp)
c002bfe1:	e8 23 05 00 00       	call   c002c509 <rehash>
c002bfe6:	83 c4 10             	add    $0x10,%esp
c002bfe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002bfec:	c9                   	leave  
c002bfed:	c3                   	ret    

c002bfee <hash_replace>:
c002bfee:	55                   	push   %ebp
c002bfef:	89 e5                	mov    %esp,%ebp
c002bff1:	83 ec 18             	sub    $0x18,%esp
c002bff4:	83 ec 08             	sub    $0x8,%esp
c002bff7:	ff 75 0c             	pushl  0xc(%ebp)
c002bffa:	ff 75 08             	pushl  0x8(%ebp)
c002bffd:	e8 fc 03 00 00       	call   c002c3fe <find_bucket>
c002c002:	83 c4 10             	add    $0x10,%esp
c002c005:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c008:	83 ec 04             	sub    $0x4,%esp
c002c00b:	ff 75 0c             	pushl  0xc(%ebp)
c002c00e:	ff 75 f4             	pushl  -0xc(%ebp)
c002c011:	ff 75 08             	pushl  0x8(%ebp)
c002c014:	e8 23 04 00 00       	call   c002c43c <find_elem>
c002c019:	83 c4 10             	add    $0x10,%esp
c002c01c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c01f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002c023:	74 11                	je     c002c036 <hash_replace+0x48>
c002c025:	83 ec 08             	sub    $0x8,%esp
c002c028:	ff 75 f0             	pushl  -0x10(%ebp)
c002c02b:	ff 75 08             	pushl  0x8(%ebp)
c002c02e:	e8 9d 06 00 00       	call   c002c6d0 <remove_elem>
c002c033:	83 c4 10             	add    $0x10,%esp
c002c036:	83 ec 04             	sub    $0x4,%esp
c002c039:	ff 75 0c             	pushl  0xc(%ebp)
c002c03c:	ff 75 f4             	pushl  -0xc(%ebp)
c002c03f:	ff 75 08             	pushl  0x8(%ebp)
c002c042:	e8 61 06 00 00       	call   c002c6a8 <insert_elem>
c002c047:	83 c4 10             	add    $0x10,%esp
c002c04a:	83 ec 0c             	sub    $0xc,%esp
c002c04d:	ff 75 08             	pushl  0x8(%ebp)
c002c050:	e8 b4 04 00 00       	call   c002c509 <rehash>
c002c055:	83 c4 10             	add    $0x10,%esp
c002c058:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c05b:	c9                   	leave  
c002c05c:	c3                   	ret    

c002c05d <hash_find>:
c002c05d:	55                   	push   %ebp
c002c05e:	89 e5                	mov    %esp,%ebp
c002c060:	83 ec 08             	sub    $0x8,%esp
c002c063:	83 ec 08             	sub    $0x8,%esp
c002c066:	ff 75 0c             	pushl  0xc(%ebp)
c002c069:	ff 75 08             	pushl  0x8(%ebp)
c002c06c:	e8 8d 03 00 00       	call   c002c3fe <find_bucket>
c002c071:	83 c4 10             	add    $0x10,%esp
c002c074:	83 ec 04             	sub    $0x4,%esp
c002c077:	ff 75 0c             	pushl  0xc(%ebp)
c002c07a:	50                   	push   %eax
c002c07b:	ff 75 08             	pushl  0x8(%ebp)
c002c07e:	e8 b9 03 00 00       	call   c002c43c <find_elem>
c002c083:	83 c4 10             	add    $0x10,%esp
c002c086:	c9                   	leave  
c002c087:	c3                   	ret    

c002c088 <hash_delete>:
c002c088:	55                   	push   %ebp
c002c089:	89 e5                	mov    %esp,%ebp
c002c08b:	83 ec 18             	sub    $0x18,%esp
c002c08e:	83 ec 08             	sub    $0x8,%esp
c002c091:	ff 75 0c             	pushl  0xc(%ebp)
c002c094:	ff 75 08             	pushl  0x8(%ebp)
c002c097:	e8 62 03 00 00       	call   c002c3fe <find_bucket>
c002c09c:	83 c4 10             	add    $0x10,%esp
c002c09f:	83 ec 04             	sub    $0x4,%esp
c002c0a2:	ff 75 0c             	pushl  0xc(%ebp)
c002c0a5:	50                   	push   %eax
c002c0a6:	ff 75 08             	pushl  0x8(%ebp)
c002c0a9:	e8 8e 03 00 00       	call   c002c43c <find_elem>
c002c0ae:	83 c4 10             	add    $0x10,%esp
c002c0b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c0b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c0b8:	74 1f                	je     c002c0d9 <hash_delete+0x51>
c002c0ba:	83 ec 08             	sub    $0x8,%esp
c002c0bd:	ff 75 f4             	pushl  -0xc(%ebp)
c002c0c0:	ff 75 08             	pushl  0x8(%ebp)
c002c0c3:	e8 08 06 00 00       	call   c002c6d0 <remove_elem>
c002c0c8:	83 c4 10             	add    $0x10,%esp
c002c0cb:	83 ec 0c             	sub    $0xc,%esp
c002c0ce:	ff 75 08             	pushl  0x8(%ebp)
c002c0d1:	e8 33 04 00 00       	call   c002c509 <rehash>
c002c0d6:	83 c4 10             	add    $0x10,%esp
c002c0d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c0dc:	c9                   	leave  
c002c0dd:	c3                   	ret    

c002c0de <hash_apply>:
c002c0de:	55                   	push   %ebp
c002c0df:	89 e5                	mov    %esp,%ebp
c002c0e1:	83 ec 18             	sub    $0x18,%esp
c002c0e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002c0e8:	75 21                	jne    c002c10b <hash_apply+0x2d>
c002c0ea:	83 ec 0c             	sub    $0xc,%esp
c002c0ed:	68 60 6c 03 c0       	push   $0xc0036c60
c002c0f2:	68 6f 6c 03 c0       	push   $0xc0036c6f
c002c0f7:	68 c8 6c 03 c0       	push   $0xc0036cc8
c002c0fc:	68 a7 00 00 00       	push   $0xa7
c002c101:	68 86 6c 03 c0       	push   $0xc0036c86
c002c106:	e8 86 e4 ff ff       	call   c002a591 <debug_panic>
c002c10b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002c112:	eb 6e                	jmp    c002c182 <hash_apply+0xa4>
c002c114:	8b 45 08             	mov    0x8(%ebp),%eax
c002c117:	8b 40 08             	mov    0x8(%eax),%eax
c002c11a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002c11d:	c1 e2 04             	shl    $0x4,%edx
c002c120:	01 d0                	add    %edx,%eax
c002c122:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002c125:	83 ec 0c             	sub    $0xc,%esp
c002c128:	ff 75 ec             	pushl  -0x14(%ebp)
c002c12b:	e8 29 e7 ff ff       	call   c002a859 <list_begin>
c002c130:	83 c4 10             	add    $0x10,%esp
c002c133:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c136:	eb 33                	jmp    c002c16b <hash_apply+0x8d>
c002c138:	83 ec 0c             	sub    $0xc,%esp
c002c13b:	ff 75 f0             	pushl  -0x10(%ebp)
c002c13e:	e8 48 e7 ff ff       	call   c002a88b <list_next>
c002c143:	83 c4 10             	add    $0x10,%esp
c002c146:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002c149:	8b 45 08             	mov    0x8(%ebp),%eax
c002c14c:	8b 40 14             	mov    0x14(%eax),%eax
c002c14f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002c152:	83 c2 04             	add    $0x4,%edx
c002c155:	83 ea 04             	sub    $0x4,%edx
c002c158:	83 ec 08             	sub    $0x8,%esp
c002c15b:	50                   	push   %eax
c002c15c:	52                   	push   %edx
c002c15d:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c160:	ff d0                	call   *%eax
c002c162:	83 c4 10             	add    $0x10,%esp
c002c165:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002c168:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c16b:	83 ec 0c             	sub    $0xc,%esp
c002c16e:	ff 75 ec             	pushl  -0x14(%ebp)
c002c171:	e8 5f e7 ff ff       	call   c002a8d5 <list_end>
c002c176:	83 c4 10             	add    $0x10,%esp
c002c179:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002c17c:	75 ba                	jne    c002c138 <hash_apply+0x5a>
c002c17e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002c182:	8b 45 08             	mov    0x8(%ebp),%eax
c002c185:	8b 40 04             	mov    0x4(%eax),%eax
c002c188:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002c18b:	77 87                	ja     c002c114 <hash_apply+0x36>
c002c18d:	90                   	nop
c002c18e:	c9                   	leave  
c002c18f:	c3                   	ret    

c002c190 <hash_first>:
c002c190:	55                   	push   %ebp
c002c191:	89 e5                	mov    %esp,%ebp
c002c193:	83 ec 08             	sub    $0x8,%esp
c002c196:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c19a:	75 21                	jne    c002c1bd <hash_first+0x2d>
c002c19c:	83 ec 0c             	sub    $0xc,%esp
c002c19f:	68 9e 6c 03 c0       	push   $0xc0036c9e
c002c1a4:	68 6f 6c 03 c0       	push   $0xc0036c6f
c002c1a9:	68 d4 6c 03 c0       	push   $0xc0036cd4
c002c1ae:	68 ca 00 00 00       	push   $0xca
c002c1b3:	68 86 6c 03 c0       	push   $0xc0036c86
c002c1b8:	e8 d4 e3 ff ff       	call   c002a591 <debug_panic>
c002c1bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002c1c1:	75 21                	jne    c002c1e4 <hash_first+0x54>
c002c1c3:	83 ec 0c             	sub    $0xc,%esp
c002c1c6:	68 a8 6c 03 c0       	push   $0xc0036ca8
c002c1cb:	68 6f 6c 03 c0       	push   $0xc0036c6f
c002c1d0:	68 d4 6c 03 c0       	push   $0xc0036cd4
c002c1d5:	68 cb 00 00 00       	push   $0xcb
c002c1da:	68 86 6c 03 c0       	push   $0xc0036c86
c002c1df:	e8 ad e3 ff ff       	call   c002a591 <debug_panic>
c002c1e4:	8b 45 08             	mov    0x8(%ebp),%eax
c002c1e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c002c1ea:	89 10                	mov    %edx,(%eax)
c002c1ec:	8b 45 08             	mov    0x8(%ebp),%eax
c002c1ef:	8b 00                	mov    (%eax),%eax
c002c1f1:	8b 50 08             	mov    0x8(%eax),%edx
c002c1f4:	8b 45 08             	mov    0x8(%ebp),%eax
c002c1f7:	89 50 04             	mov    %edx,0x4(%eax)
c002c1fa:	8b 45 08             	mov    0x8(%ebp),%eax
c002c1fd:	8b 40 04             	mov    0x4(%eax),%eax
c002c200:	83 ec 0c             	sub    $0xc,%esp
c002c203:	50                   	push   %eax
c002c204:	e8 ab e7 ff ff       	call   c002a9b4 <list_head>
c002c209:	83 c4 10             	add    $0x10,%esp
c002c20c:	83 c0 04             	add    $0x4,%eax
c002c20f:	8d 50 fc             	lea    -0x4(%eax),%edx
c002c212:	8b 45 08             	mov    0x8(%ebp),%eax
c002c215:	89 50 08             	mov    %edx,0x8(%eax)
c002c218:	90                   	nop
c002c219:	c9                   	leave  
c002c21a:	c3                   	ret    

c002c21b <hash_next>:
c002c21b:	55                   	push   %ebp
c002c21c:	89 e5                	mov    %esp,%ebp
c002c21e:	53                   	push   %ebx
c002c21f:	83 ec 04             	sub    $0x4,%esp
c002c222:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c226:	75 21                	jne    c002c249 <hash_next+0x2e>
c002c228:	83 ec 0c             	sub    $0xc,%esp
c002c22b:	68 9e 6c 03 c0       	push   $0xc0036c9e
c002c230:	68 6f 6c 03 c0       	push   $0xc0036c6f
c002c235:	68 e0 6c 03 c0       	push   $0xc0036ce0
c002c23a:	68 dd 00 00 00       	push   $0xdd
c002c23f:	68 86 6c 03 c0       	push   $0xc0036c86
c002c244:	e8 48 e3 ff ff       	call   c002a591 <debug_panic>
c002c249:	8b 45 08             	mov    0x8(%ebp),%eax
c002c24c:	8b 40 08             	mov    0x8(%eax),%eax
c002c24f:	83 ec 0c             	sub    $0xc,%esp
c002c252:	50                   	push   %eax
c002c253:	e8 33 e6 ff ff       	call   c002a88b <list_next>
c002c258:	83 c4 10             	add    $0x10,%esp
c002c25b:	83 c0 04             	add    $0x4,%eax
c002c25e:	8d 50 fc             	lea    -0x4(%eax),%edx
c002c261:	8b 45 08             	mov    0x8(%ebp),%eax
c002c264:	89 50 08             	mov    %edx,0x8(%eax)
c002c267:	eb 58                	jmp    c002c2c1 <hash_next+0xa6>
c002c269:	8b 45 08             	mov    0x8(%ebp),%eax
c002c26c:	8b 40 04             	mov    0x4(%eax),%eax
c002c26f:	8d 50 10             	lea    0x10(%eax),%edx
c002c272:	8b 45 08             	mov    0x8(%ebp),%eax
c002c275:	89 50 04             	mov    %edx,0x4(%eax)
c002c278:	8b 45 08             	mov    0x8(%ebp),%eax
c002c27b:	8b 50 04             	mov    0x4(%eax),%edx
c002c27e:	8b 45 08             	mov    0x8(%ebp),%eax
c002c281:	8b 00                	mov    (%eax),%eax
c002c283:	8b 48 08             	mov    0x8(%eax),%ecx
c002c286:	8b 45 08             	mov    0x8(%ebp),%eax
c002c289:	8b 00                	mov    (%eax),%eax
c002c28b:	8b 40 04             	mov    0x4(%eax),%eax
c002c28e:	c1 e0 04             	shl    $0x4,%eax
c002c291:	01 c8                	add    %ecx,%eax
c002c293:	39 c2                	cmp    %eax,%edx
c002c295:	72 0c                	jb     c002c2a3 <hash_next+0x88>
c002c297:	8b 45 08             	mov    0x8(%ebp),%eax
c002c29a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c002c2a1:	eb 40                	jmp    c002c2e3 <hash_next+0xc8>
c002c2a3:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2a6:	8b 40 04             	mov    0x4(%eax),%eax
c002c2a9:	83 ec 0c             	sub    $0xc,%esp
c002c2ac:	50                   	push   %eax
c002c2ad:	e8 a7 e5 ff ff       	call   c002a859 <list_begin>
c002c2b2:	83 c4 10             	add    $0x10,%esp
c002c2b5:	83 c0 04             	add    $0x4,%eax
c002c2b8:	8d 50 fc             	lea    -0x4(%eax),%edx
c002c2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2be:	89 50 08             	mov    %edx,0x8(%eax)
c002c2c1:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2c4:	8b 58 08             	mov    0x8(%eax),%ebx
c002c2c7:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2ca:	8b 40 04             	mov    0x4(%eax),%eax
c002c2cd:	83 ec 0c             	sub    $0xc,%esp
c002c2d0:	50                   	push   %eax
c002c2d1:	e8 ff e5 ff ff       	call   c002a8d5 <list_end>
c002c2d6:	83 c4 10             	add    $0x10,%esp
c002c2d9:	83 c0 04             	add    $0x4,%eax
c002c2dc:	83 e8 04             	sub    $0x4,%eax
c002c2df:	39 c3                	cmp    %eax,%ebx
c002c2e1:	74 86                	je     c002c269 <hash_next+0x4e>
c002c2e3:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2e6:	8b 40 08             	mov    0x8(%eax),%eax
c002c2e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002c2ec:	c9                   	leave  
c002c2ed:	c3                   	ret    

c002c2ee <hash_cur>:
c002c2ee:	55                   	push   %ebp
c002c2ef:	89 e5                	mov    %esp,%ebp
c002c2f1:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2f4:	8b 40 08             	mov    0x8(%eax),%eax
c002c2f7:	5d                   	pop    %ebp
c002c2f8:	c3                   	ret    

c002c2f9 <hash_size>:
c002c2f9:	55                   	push   %ebp
c002c2fa:	89 e5                	mov    %esp,%ebp
c002c2fc:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2ff:	8b 00                	mov    (%eax),%eax
c002c301:	5d                   	pop    %ebp
c002c302:	c3                   	ret    

c002c303 <hash_empty>:
c002c303:	55                   	push   %ebp
c002c304:	89 e5                	mov    %esp,%ebp
c002c306:	8b 45 08             	mov    0x8(%ebp),%eax
c002c309:	8b 00                	mov    (%eax),%eax
c002c30b:	85 c0                	test   %eax,%eax
c002c30d:	0f 94 c0             	sete   %al
c002c310:	5d                   	pop    %ebp
c002c311:	c3                   	ret    

c002c312 <hash_bytes>:
c002c312:	55                   	push   %ebp
c002c313:	89 e5                	mov    %esp,%ebp
c002c315:	83 ec 18             	sub    $0x18,%esp
c002c318:	8b 45 08             	mov    0x8(%ebp),%eax
c002c31b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c31e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c322:	75 21                	jne    c002c345 <hash_bytes+0x33>
c002c324:	83 ec 0c             	sub    $0xc,%esp
c002c327:	68 b2 6c 03 c0       	push   $0xc0036cb2
c002c32c:	68 6f 6c 03 c0       	push   $0xc0036c6f
c002c331:	68 ec 6c 03 c0       	push   $0xc0036cec
c002c336:	68 10 01 00 00       	push   $0x110
c002c33b:	68 86 6c 03 c0       	push   $0xc0036c86
c002c340:	e8 4c e2 ff ff       	call   c002a591 <debug_panic>
c002c345:	c7 45 f0 c5 9d 1c 81 	movl   $0x811c9dc5,-0x10(%ebp)
c002c34c:	eb 1d                	jmp    c002c36b <hash_bytes+0x59>
c002c34e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c351:	69 c8 93 01 00 01    	imul   $0x1000193,%eax,%ecx
c002c357:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c35a:	8d 50 01             	lea    0x1(%eax),%edx
c002c35d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002c360:	0f b6 00             	movzbl (%eax),%eax
c002c363:	0f b6 c0             	movzbl %al,%eax
c002c366:	31 c8                	xor    %ecx,%eax
c002c368:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c36b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c36e:	8d 50 ff             	lea    -0x1(%eax),%edx
c002c371:	89 55 0c             	mov    %edx,0xc(%ebp)
c002c374:	85 c0                	test   %eax,%eax
c002c376:	75 d6                	jne    c002c34e <hash_bytes+0x3c>
c002c378:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c37b:	c9                   	leave  
c002c37c:	c3                   	ret    

c002c37d <hash_string>:
c002c37d:	55                   	push   %ebp
c002c37e:	89 e5                	mov    %esp,%ebp
c002c380:	83 ec 18             	sub    $0x18,%esp
c002c383:	8b 45 08             	mov    0x8(%ebp),%eax
c002c386:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c389:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c38d:	75 21                	jne    c002c3b0 <hash_string+0x33>
c002c38f:	83 ec 0c             	sub    $0xc,%esp
c002c392:	68 be 6c 03 c0       	push   $0xc0036cbe
c002c397:	68 6f 6c 03 c0       	push   $0xc0036c6f
c002c39c:	68 f8 6c 03 c0       	push   $0xc0036cf8
c002c3a1:	68 20 01 00 00       	push   $0x120
c002c3a6:	68 86 6c 03 c0       	push   $0xc0036c86
c002c3ab:	e8 e1 e1 ff ff       	call   c002a591 <debug_panic>
c002c3b0:	c7 45 f0 c5 9d 1c 81 	movl   $0x811c9dc5,-0x10(%ebp)
c002c3b7:	eb 1d                	jmp    c002c3d6 <hash_string+0x59>
c002c3b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c3bc:	69 c8 93 01 00 01    	imul   $0x1000193,%eax,%ecx
c002c3c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c3c5:	8d 50 01             	lea    0x1(%eax),%edx
c002c3c8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002c3cb:	0f b6 00             	movzbl (%eax),%eax
c002c3ce:	0f b6 c0             	movzbl %al,%eax
c002c3d1:	31 c8                	xor    %ecx,%eax
c002c3d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c3d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c3d9:	0f b6 00             	movzbl (%eax),%eax
c002c3dc:	84 c0                	test   %al,%al
c002c3de:	75 d9                	jne    c002c3b9 <hash_string+0x3c>
c002c3e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c3e3:	c9                   	leave  
c002c3e4:	c3                   	ret    

c002c3e5 <hash_int>:
c002c3e5:	55                   	push   %ebp
c002c3e6:	89 e5                	mov    %esp,%ebp
c002c3e8:	83 ec 08             	sub    $0x8,%esp
c002c3eb:	83 ec 08             	sub    $0x8,%esp
c002c3ee:	6a 04                	push   $0x4
c002c3f0:	8d 45 08             	lea    0x8(%ebp),%eax
c002c3f3:	50                   	push   %eax
c002c3f4:	e8 19 ff ff ff       	call   c002c312 <hash_bytes>
c002c3f9:	83 c4 10             	add    $0x10,%esp
c002c3fc:	c9                   	leave  
c002c3fd:	c3                   	ret    

c002c3fe <find_bucket>:
c002c3fe:	55                   	push   %ebp
c002c3ff:	89 e5                	mov    %esp,%ebp
c002c401:	83 ec 18             	sub    $0x18,%esp
c002c404:	8b 45 08             	mov    0x8(%ebp),%eax
c002c407:	8b 40 0c             	mov    0xc(%eax),%eax
c002c40a:	8b 55 08             	mov    0x8(%ebp),%edx
c002c40d:	8b 52 14             	mov    0x14(%edx),%edx
c002c410:	83 ec 08             	sub    $0x8,%esp
c002c413:	52                   	push   %edx
c002c414:	ff 75 0c             	pushl  0xc(%ebp)
c002c417:	ff d0                	call   *%eax
c002c419:	83 c4 10             	add    $0x10,%esp
c002c41c:	89 c2                	mov    %eax,%edx
c002c41e:	8b 45 08             	mov    0x8(%ebp),%eax
c002c421:	8b 40 04             	mov    0x4(%eax),%eax
c002c424:	83 e8 01             	sub    $0x1,%eax
c002c427:	21 d0                	and    %edx,%eax
c002c429:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c42c:	8b 45 08             	mov    0x8(%ebp),%eax
c002c42f:	8b 40 08             	mov    0x8(%eax),%eax
c002c432:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002c435:	c1 e2 04             	shl    $0x4,%edx
c002c438:	01 d0                	add    %edx,%eax
c002c43a:	c9                   	leave  
c002c43b:	c3                   	ret    

c002c43c <find_elem>:
c002c43c:	55                   	push   %ebp
c002c43d:	89 e5                	mov    %esp,%ebp
c002c43f:	83 ec 18             	sub    $0x18,%esp
c002c442:	83 ec 0c             	sub    $0xc,%esp
c002c445:	ff 75 0c             	pushl  0xc(%ebp)
c002c448:	e8 0c e4 ff ff       	call   c002a859 <list_begin>
c002c44d:	83 c4 10             	add    $0x10,%esp
c002c450:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c453:	eb 66                	jmp    c002c4bb <find_elem+0x7f>
c002c455:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c458:	83 c0 04             	add    $0x4,%eax
c002c45b:	83 e8 04             	sub    $0x4,%eax
c002c45e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c461:	8b 45 08             	mov    0x8(%ebp),%eax
c002c464:	8b 40 10             	mov    0x10(%eax),%eax
c002c467:	8b 55 08             	mov    0x8(%ebp),%edx
c002c46a:	8b 52 14             	mov    0x14(%edx),%edx
c002c46d:	83 ec 04             	sub    $0x4,%esp
c002c470:	52                   	push   %edx
c002c471:	ff 75 10             	pushl  0x10(%ebp)
c002c474:	ff 75 f0             	pushl  -0x10(%ebp)
c002c477:	ff d0                	call   *%eax
c002c479:	83 c4 10             	add    $0x10,%esp
c002c47c:	83 f0 01             	xor    $0x1,%eax
c002c47f:	84 c0                	test   %al,%al
c002c481:	74 27                	je     c002c4aa <find_elem+0x6e>
c002c483:	8b 45 08             	mov    0x8(%ebp),%eax
c002c486:	8b 40 10             	mov    0x10(%eax),%eax
c002c489:	8b 55 08             	mov    0x8(%ebp),%edx
c002c48c:	8b 52 14             	mov    0x14(%edx),%edx
c002c48f:	83 ec 04             	sub    $0x4,%esp
c002c492:	52                   	push   %edx
c002c493:	ff 75 f0             	pushl  -0x10(%ebp)
c002c496:	ff 75 10             	pushl  0x10(%ebp)
c002c499:	ff d0                	call   *%eax
c002c49b:	83 c4 10             	add    $0x10,%esp
c002c49e:	83 f0 01             	xor    $0x1,%eax
c002c4a1:	84 c0                	test   %al,%al
c002c4a3:	74 05                	je     c002c4aa <find_elem+0x6e>
c002c4a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c4a8:	eb 29                	jmp    c002c4d3 <find_elem+0x97>
c002c4aa:	83 ec 0c             	sub    $0xc,%esp
c002c4ad:	ff 75 f4             	pushl  -0xc(%ebp)
c002c4b0:	e8 d6 e3 ff ff       	call   c002a88b <list_next>
c002c4b5:	83 c4 10             	add    $0x10,%esp
c002c4b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c4bb:	83 ec 0c             	sub    $0xc,%esp
c002c4be:	ff 75 0c             	pushl  0xc(%ebp)
c002c4c1:	e8 0f e4 ff ff       	call   c002a8d5 <list_end>
c002c4c6:	83 c4 10             	add    $0x10,%esp
c002c4c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002c4cc:	75 87                	jne    c002c455 <find_elem+0x19>
c002c4ce:	b8 00 00 00 00       	mov    $0x0,%eax
c002c4d3:	c9                   	leave  
c002c4d4:	c3                   	ret    

c002c4d5 <turn_off_least_1bit>:
c002c4d5:	55                   	push   %ebp
c002c4d6:	89 e5                	mov    %esp,%ebp
c002c4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c002c4db:	83 e8 01             	sub    $0x1,%eax
c002c4de:	23 45 08             	and    0x8(%ebp),%eax
c002c4e1:	5d                   	pop    %ebp
c002c4e2:	c3                   	ret    

c002c4e3 <is_power_of_2>:
c002c4e3:	55                   	push   %ebp
c002c4e4:	89 e5                	mov    %esp,%ebp
c002c4e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c4ea:	74 16                	je     c002c502 <is_power_of_2+0x1f>
c002c4ec:	ff 75 08             	pushl  0x8(%ebp)
c002c4ef:	e8 e1 ff ff ff       	call   c002c4d5 <turn_off_least_1bit>
c002c4f4:	83 c4 04             	add    $0x4,%esp
c002c4f7:	85 c0                	test   %eax,%eax
c002c4f9:	75 07                	jne    c002c502 <is_power_of_2+0x1f>
c002c4fb:	b8 01 00 00 00       	mov    $0x1,%eax
c002c500:	eb 05                	jmp    c002c507 <is_power_of_2+0x24>
c002c502:	b8 00 00 00 00       	mov    $0x0,%eax
c002c507:	c9                   	leave  
c002c508:	c3                   	ret    

c002c509 <rehash>:
c002c509:	55                   	push   %ebp
c002c50a:	89 e5                	mov    %esp,%ebp
c002c50c:	83 ec 38             	sub    $0x38,%esp
c002c50f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c513:	75 21                	jne    c002c536 <rehash+0x2d>
c002c515:	83 ec 0c             	sub    $0xc,%esp
c002c518:	68 a8 6c 03 c0       	push   $0xc0036ca8
c002c51d:	68 6f 6c 03 c0       	push   $0xc0036c6f
c002c522:	68 04 6d 03 c0       	push   $0xc0036d04
c002c527:	68 66 01 00 00       	push   $0x166
c002c52c:	68 86 6c 03 c0       	push   $0xc0036c86
c002c531:	e8 5b e0 ff ff       	call   c002a591 <debug_panic>
c002c536:	8b 45 08             	mov    0x8(%ebp),%eax
c002c539:	8b 40 08             	mov    0x8(%eax),%eax
c002c53c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002c53f:	8b 45 08             	mov    0x8(%ebp),%eax
c002c542:	8b 40 04             	mov    0x4(%eax),%eax
c002c545:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002c548:	8b 45 08             	mov    0x8(%ebp),%eax
c002c54b:	8b 00                	mov    (%eax),%eax
c002c54d:	d1 e8                	shr    %eax
c002c54f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c552:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c002c556:	77 1a                	ja     c002c572 <rehash+0x69>
c002c558:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c002c55f:	eb 11                	jmp    c002c572 <rehash+0x69>
c002c561:	83 ec 0c             	sub    $0xc,%esp
c002c564:	ff 75 f4             	pushl  -0xc(%ebp)
c002c567:	e8 69 ff ff ff       	call   c002c4d5 <turn_off_least_1bit>
c002c56c:	83 c4 10             	add    $0x10,%esp
c002c56f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c572:	83 ec 0c             	sub    $0xc,%esp
c002c575:	ff 75 f4             	pushl  -0xc(%ebp)
c002c578:	e8 66 ff ff ff       	call   c002c4e3 <is_power_of_2>
c002c57d:	83 c4 10             	add    $0x10,%esp
c002c580:	85 c0                	test   %eax,%eax
c002c582:	74 dd                	je     c002c561 <rehash+0x58>
c002c584:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c587:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c002c58a:	0f 84 12 01 00 00    	je     c002c6a2 <rehash+0x199>
c002c590:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c593:	c1 e0 04             	shl    $0x4,%eax
c002c596:	83 ec 0c             	sub    $0xc,%esp
c002c599:	50                   	push   %eax
c002c59a:	e8 b4 7b ff ff       	call   c0024153 <malloc>
c002c59f:	83 c4 10             	add    $0x10,%esp
c002c5a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002c5a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002c5a9:	0f 84 f6 00 00 00    	je     c002c6a5 <rehash+0x19c>
c002c5af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002c5b6:	eb 1d                	jmp    c002c5d5 <rehash+0xcc>
c002c5b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c5bb:	c1 e0 04             	shl    $0x4,%eax
c002c5be:	89 c2                	mov    %eax,%edx
c002c5c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002c5c3:	01 d0                	add    %edx,%eax
c002c5c5:	83 ec 0c             	sub    $0xc,%esp
c002c5c8:	50                   	push   %eax
c002c5c9:	e8 36 e2 ff ff       	call   c002a804 <list_init>
c002c5ce:	83 c4 10             	add    $0x10,%esp
c002c5d1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002c5d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c5d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002c5db:	72 db                	jb     c002c5b8 <rehash+0xaf>
c002c5dd:	8b 45 08             	mov    0x8(%ebp),%eax
c002c5e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c002c5e3:	89 50 08             	mov    %edx,0x8(%eax)
c002c5e6:	8b 45 08             	mov    0x8(%ebp),%eax
c002c5e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002c5ec:	89 50 04             	mov    %edx,0x4(%eax)
c002c5ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002c5f6:	e9 8b 00 00 00       	jmp    c002c686 <rehash+0x17d>
c002c5fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c5fe:	c1 e0 04             	shl    $0x4,%eax
c002c601:	89 c2                	mov    %eax,%edx
c002c603:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002c606:	01 d0                	add    %edx,%eax
c002c608:	89 45 dc             	mov    %eax,-0x24(%ebp)
c002c60b:	83 ec 0c             	sub    $0xc,%esp
c002c60e:	ff 75 dc             	pushl  -0x24(%ebp)
c002c611:	e8 43 e2 ff ff       	call   c002a859 <list_begin>
c002c616:	83 c4 10             	add    $0x10,%esp
c002c619:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002c61c:	eb 51                	jmp    c002c66f <rehash+0x166>
c002c61e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002c621:	83 c0 04             	add    $0x4,%eax
c002c624:	83 e8 04             	sub    $0x4,%eax
c002c627:	83 ec 08             	sub    $0x8,%esp
c002c62a:	50                   	push   %eax
c002c62b:	ff 75 08             	pushl  0x8(%ebp)
c002c62e:	e8 cb fd ff ff       	call   c002c3fe <find_bucket>
c002c633:	83 c4 10             	add    $0x10,%esp
c002c636:	89 45 d8             	mov    %eax,-0x28(%ebp)
c002c639:	83 ec 0c             	sub    $0xc,%esp
c002c63c:	ff 75 ec             	pushl  -0x14(%ebp)
c002c63f:	e8 47 e2 ff ff       	call   c002a88b <list_next>
c002c644:	83 c4 10             	add    $0x10,%esp
c002c647:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c002c64a:	83 ec 0c             	sub    $0xc,%esp
c002c64d:	ff 75 ec             	pushl  -0x14(%ebp)
c002c650:	e8 b5 e5 ff ff       	call   c002ac0a <list_remove>
c002c655:	83 c4 10             	add    $0x10,%esp
c002c658:	83 ec 08             	sub    $0x8,%esp
c002c65b:	ff 75 ec             	pushl  -0x14(%ebp)
c002c65e:	ff 75 d8             	pushl  -0x28(%ebp)
c002c661:	e8 58 e5 ff ff       	call   c002abbe <list_push_front>
c002c666:	83 c4 10             	add    $0x10,%esp
c002c669:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002c66c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002c66f:	83 ec 0c             	sub    $0xc,%esp
c002c672:	ff 75 dc             	pushl  -0x24(%ebp)
c002c675:	e8 5b e2 ff ff       	call   c002a8d5 <list_end>
c002c67a:	83 c4 10             	add    $0x10,%esp
c002c67d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002c680:	75 9c                	jne    c002c61e <rehash+0x115>
c002c682:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002c686:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c689:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c002c68c:	0f 82 69 ff ff ff    	jb     c002c5fb <rehash+0xf2>
c002c692:	83 ec 0c             	sub    $0xc,%esp
c002c695:	ff 75 e8             	pushl  -0x18(%ebp)
c002c698:	e8 b3 7d ff ff       	call   c0024450 <free>
c002c69d:	83 c4 10             	add    $0x10,%esp
c002c6a0:	eb 04                	jmp    c002c6a6 <rehash+0x19d>
c002c6a2:	90                   	nop
c002c6a3:	eb 01                	jmp    c002c6a6 <rehash+0x19d>
c002c6a5:	90                   	nop
c002c6a6:	c9                   	leave  
c002c6a7:	c3                   	ret    

c002c6a8 <insert_elem>:
c002c6a8:	55                   	push   %ebp
c002c6a9:	89 e5                	mov    %esp,%ebp
c002c6ab:	83 ec 08             	sub    $0x8,%esp
c002c6ae:	8b 45 08             	mov    0x8(%ebp),%eax
c002c6b1:	8b 00                	mov    (%eax),%eax
c002c6b3:	8d 50 01             	lea    0x1(%eax),%edx
c002c6b6:	8b 45 08             	mov    0x8(%ebp),%eax
c002c6b9:	89 10                	mov    %edx,(%eax)
c002c6bb:	8b 45 10             	mov    0x10(%ebp),%eax
c002c6be:	83 ec 08             	sub    $0x8,%esp
c002c6c1:	50                   	push   %eax
c002c6c2:	ff 75 0c             	pushl  0xc(%ebp)
c002c6c5:	e8 f4 e4 ff ff       	call   c002abbe <list_push_front>
c002c6ca:	83 c4 10             	add    $0x10,%esp
c002c6cd:	90                   	nop
c002c6ce:	c9                   	leave  
c002c6cf:	c3                   	ret    

c002c6d0 <remove_elem>:
c002c6d0:	55                   	push   %ebp
c002c6d1:	89 e5                	mov    %esp,%ebp
c002c6d3:	83 ec 08             	sub    $0x8,%esp
c002c6d6:	8b 45 08             	mov    0x8(%ebp),%eax
c002c6d9:	8b 00                	mov    (%eax),%eax
c002c6db:	8d 50 ff             	lea    -0x1(%eax),%edx
c002c6de:	8b 45 08             	mov    0x8(%ebp),%eax
c002c6e1:	89 10                	mov    %edx,(%eax)
c002c6e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c6e6:	83 ec 0c             	sub    $0xc,%esp
c002c6e9:	50                   	push   %eax
c002c6ea:	e8 1b e5 ff ff       	call   c002ac0a <list_remove>
c002c6ef:	83 c4 10             	add    $0x10,%esp
c002c6f2:	90                   	nop
c002c6f3:	c9                   	leave  
c002c6f4:	c3                   	ret    

c002c6f5 <console_init>:
c002c6f5:	55                   	push   %ebp
c002c6f6:	89 e5                	mov    %esp,%ebp
c002c6f8:	83 ec 08             	sub    $0x8,%esp
c002c6fb:	83 ec 0c             	sub    $0xc,%esp
c002c6fe:	68 00 02 04 c0       	push   $0xc0040200
c002c703:	e8 d9 6d ff ff       	call   c00234e1 <lock_init>
c002c708:	83 c4 10             	add    $0x10,%esp
c002c70b:	c6 05 24 02 04 c0 01 	movb   $0x1,0xc0040224
c002c712:	90                   	nop
c002c713:	c9                   	leave  
c002c714:	c3                   	ret    

c002c715 <console_panic>:
c002c715:	55                   	push   %ebp
c002c716:	89 e5                	mov    %esp,%ebp
c002c718:	c6 05 24 02 04 c0 00 	movb   $0x0,0xc0040224
c002c71f:	90                   	nop
c002c720:	5d                   	pop    %ebp
c002c721:	c3                   	ret    

c002c722 <console_print_stats>:
c002c722:	55                   	push   %ebp
c002c723:	89 e5                	mov    %esp,%ebp
c002c725:	83 ec 08             	sub    $0x8,%esp
c002c728:	a1 30 02 04 c0       	mov    0xc0040230,%eax
c002c72d:	8b 15 34 02 04 c0    	mov    0xc0040234,%edx
c002c733:	83 ec 04             	sub    $0x4,%esp
c002c736:	52                   	push   %edx
c002c737:	50                   	push   %eax
c002c738:	68 0c 6d 03 c0       	push   $0xc0036d0c
c002c73d:	e8 ee b8 ff ff       	call   c0028030 <printf>
c002c742:	83 c4 10             	add    $0x10,%esp
c002c745:	90                   	nop
c002c746:	c9                   	leave  
c002c747:	c3                   	ret    

c002c748 <acquire_console>:
c002c748:	55                   	push   %ebp
c002c749:	89 e5                	mov    %esp,%ebp
c002c74b:	83 ec 08             	sub    $0x8,%esp
c002c74e:	e8 68 59 ff ff       	call   c00220bb <intr_context>
c002c753:	83 f0 01             	xor    $0x1,%eax
c002c756:	84 c0                	test   %al,%al
c002c758:	74 3e                	je     c002c798 <acquire_console+0x50>
c002c75a:	0f b6 05 24 02 04 c0 	movzbl 0xc0040224,%eax
c002c761:	84 c0                	test   %al,%al
c002c763:	74 33                	je     c002c798 <acquire_console+0x50>
c002c765:	83 ec 0c             	sub    $0xc,%esp
c002c768:	68 00 02 04 c0       	push   $0xc0040200
c002c76d:	e8 be 70 ff ff       	call   c0023830 <lock_held_by_current_thread>
c002c772:	83 c4 10             	add    $0x10,%esp
c002c775:	84 c0                	test   %al,%al
c002c777:	74 0f                	je     c002c788 <acquire_console+0x40>
c002c779:	a1 28 02 04 c0       	mov    0xc0040228,%eax
c002c77e:	83 c0 01             	add    $0x1,%eax
c002c781:	a3 28 02 04 c0       	mov    %eax,0xc0040228
c002c786:	eb 10                	jmp    c002c798 <acquire_console+0x50>
c002c788:	83 ec 0c             	sub    $0xc,%esp
c002c78b:	68 00 02 04 c0       	push   $0xc0040200
c002c790:	e8 99 6d ff ff       	call   c002352e <lock_acquire>
c002c795:	83 c4 10             	add    $0x10,%esp
c002c798:	90                   	nop
c002c799:	c9                   	leave  
c002c79a:	c3                   	ret    

c002c79b <release_console>:
c002c79b:	55                   	push   %ebp
c002c79c:	89 e5                	mov    %esp,%ebp
c002c79e:	83 ec 08             	sub    $0x8,%esp
c002c7a1:	e8 15 59 ff ff       	call   c00220bb <intr_context>
c002c7a6:	83 f0 01             	xor    $0x1,%eax
c002c7a9:	84 c0                	test   %al,%al
c002c7ab:	74 33                	je     c002c7e0 <release_console+0x45>
c002c7ad:	0f b6 05 24 02 04 c0 	movzbl 0xc0040224,%eax
c002c7b4:	84 c0                	test   %al,%al
c002c7b6:	74 28                	je     c002c7e0 <release_console+0x45>
c002c7b8:	a1 28 02 04 c0       	mov    0xc0040228,%eax
c002c7bd:	85 c0                	test   %eax,%eax
c002c7bf:	7e 0f                	jle    c002c7d0 <release_console+0x35>
c002c7c1:	a1 28 02 04 c0       	mov    0xc0040228,%eax
c002c7c6:	83 e8 01             	sub    $0x1,%eax
c002c7c9:	a3 28 02 04 c0       	mov    %eax,0xc0040228
c002c7ce:	eb 10                	jmp    c002c7e0 <release_console+0x45>
c002c7d0:	83 ec 0c             	sub    $0xc,%esp
c002c7d3:	68 00 02 04 c0       	push   $0xc0040200
c002c7d8:	e8 92 6f ff ff       	call   c002376f <lock_release>
c002c7dd:	83 c4 10             	add    $0x10,%esp
c002c7e0:	90                   	nop
c002c7e1:	c9                   	leave  
c002c7e2:	c3                   	ret    

c002c7e3 <console_locked_by_current_thread>:
c002c7e3:	55                   	push   %ebp
c002c7e4:	89 e5                	mov    %esp,%ebp
c002c7e6:	83 ec 08             	sub    $0x8,%esp
c002c7e9:	e8 cd 58 ff ff       	call   c00220bb <intr_context>
c002c7ee:	84 c0                	test   %al,%al
c002c7f0:	75 22                	jne    c002c814 <console_locked_by_current_thread+0x31>
c002c7f2:	0f b6 05 24 02 04 c0 	movzbl 0xc0040224,%eax
c002c7f9:	83 f0 01             	xor    $0x1,%eax
c002c7fc:	84 c0                	test   %al,%al
c002c7fe:	75 14                	jne    c002c814 <console_locked_by_current_thread+0x31>
c002c800:	83 ec 0c             	sub    $0xc,%esp
c002c803:	68 00 02 04 c0       	push   $0xc0040200
c002c808:	e8 23 70 ff ff       	call   c0023830 <lock_held_by_current_thread>
c002c80d:	83 c4 10             	add    $0x10,%esp
c002c810:	84 c0                	test   %al,%al
c002c812:	74 07                	je     c002c81b <console_locked_by_current_thread+0x38>
c002c814:	b8 01 00 00 00       	mov    $0x1,%eax
c002c819:	eb 05                	jmp    c002c820 <console_locked_by_current_thread+0x3d>
c002c81b:	b8 00 00 00 00       	mov    $0x0,%eax
c002c820:	83 e0 01             	and    $0x1,%eax
c002c823:	c9                   	leave  
c002c824:	c3                   	ret    

c002c825 <vprintf>:
c002c825:	55                   	push   %ebp
c002c826:	89 e5                	mov    %esp,%ebp
c002c828:	83 ec 18             	sub    $0x18,%esp
c002c82b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002c832:	e8 11 ff ff ff       	call   c002c748 <acquire_console>
c002c837:	8d 45 f4             	lea    -0xc(%ebp),%eax
c002c83a:	50                   	push   %eax
c002c83b:	68 07 c9 02 c0       	push   $0xc002c907
c002c840:	ff 75 0c             	pushl  0xc(%ebp)
c002c843:	ff 75 08             	pushl  0x8(%ebp)
c002c846:	e8 0b b8 ff ff       	call   c0028056 <__vprintf>
c002c84b:	83 c4 10             	add    $0x10,%esp
c002c84e:	e8 48 ff ff ff       	call   c002c79b <release_console>
c002c853:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c856:	c9                   	leave  
c002c857:	c3                   	ret    

c002c858 <puts>:
c002c858:	55                   	push   %ebp
c002c859:	89 e5                	mov    %esp,%ebp
c002c85b:	83 ec 08             	sub    $0x8,%esp
c002c85e:	e8 e5 fe ff ff       	call   c002c748 <acquire_console>
c002c863:	eb 1b                	jmp    c002c880 <puts+0x28>
c002c865:	8b 45 08             	mov    0x8(%ebp),%eax
c002c868:	8d 50 01             	lea    0x1(%eax),%edx
c002c86b:	89 55 08             	mov    %edx,0x8(%ebp)
c002c86e:	0f b6 00             	movzbl (%eax),%eax
c002c871:	0f b6 c0             	movzbl %al,%eax
c002c874:	83 ec 0c             	sub    $0xc,%esp
c002c877:	50                   	push   %eax
c002c878:	e8 bf 00 00 00       	call   c002c93c <putchar_have_lock>
c002c87d:	83 c4 10             	add    $0x10,%esp
c002c880:	8b 45 08             	mov    0x8(%ebp),%eax
c002c883:	0f b6 00             	movzbl (%eax),%eax
c002c886:	84 c0                	test   %al,%al
c002c888:	75 db                	jne    c002c865 <puts+0xd>
c002c88a:	83 ec 0c             	sub    $0xc,%esp
c002c88d:	6a 0a                	push   $0xa
c002c88f:	e8 a8 00 00 00       	call   c002c93c <putchar_have_lock>
c002c894:	83 c4 10             	add    $0x10,%esp
c002c897:	e8 ff fe ff ff       	call   c002c79b <release_console>
c002c89c:	b8 00 00 00 00       	mov    $0x0,%eax
c002c8a1:	c9                   	leave  
c002c8a2:	c3                   	ret    

c002c8a3 <putbuf>:
c002c8a3:	55                   	push   %ebp
c002c8a4:	89 e5                	mov    %esp,%ebp
c002c8a6:	83 ec 08             	sub    $0x8,%esp
c002c8a9:	e8 9a fe ff ff       	call   c002c748 <acquire_console>
c002c8ae:	eb 1b                	jmp    c002c8cb <putbuf+0x28>
c002c8b0:	8b 45 08             	mov    0x8(%ebp),%eax
c002c8b3:	8d 50 01             	lea    0x1(%eax),%edx
c002c8b6:	89 55 08             	mov    %edx,0x8(%ebp)
c002c8b9:	0f b6 00             	movzbl (%eax),%eax
c002c8bc:	0f b6 c0             	movzbl %al,%eax
c002c8bf:	83 ec 0c             	sub    $0xc,%esp
c002c8c2:	50                   	push   %eax
c002c8c3:	e8 74 00 00 00       	call   c002c93c <putchar_have_lock>
c002c8c8:	83 c4 10             	add    $0x10,%esp
c002c8cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c8ce:	8d 50 ff             	lea    -0x1(%eax),%edx
c002c8d1:	89 55 0c             	mov    %edx,0xc(%ebp)
c002c8d4:	85 c0                	test   %eax,%eax
c002c8d6:	75 d8                	jne    c002c8b0 <putbuf+0xd>
c002c8d8:	e8 be fe ff ff       	call   c002c79b <release_console>
c002c8dd:	90                   	nop
c002c8de:	c9                   	leave  
c002c8df:	c3                   	ret    

c002c8e0 <putchar>:
c002c8e0:	55                   	push   %ebp
c002c8e1:	89 e5                	mov    %esp,%ebp
c002c8e3:	83 ec 08             	sub    $0x8,%esp
c002c8e6:	e8 5d fe ff ff       	call   c002c748 <acquire_console>
c002c8eb:	8b 45 08             	mov    0x8(%ebp),%eax
c002c8ee:	0f b6 c0             	movzbl %al,%eax
c002c8f1:	83 ec 0c             	sub    $0xc,%esp
c002c8f4:	50                   	push   %eax
c002c8f5:	e8 42 00 00 00       	call   c002c93c <putchar_have_lock>
c002c8fa:	83 c4 10             	add    $0x10,%esp
c002c8fd:	e8 99 fe ff ff       	call   c002c79b <release_console>
c002c902:	8b 45 08             	mov    0x8(%ebp),%eax
c002c905:	c9                   	leave  
c002c906:	c3                   	ret    

c002c907 <vprintf_helper>:
c002c907:	55                   	push   %ebp
c002c908:	89 e5                	mov    %esp,%ebp
c002c90a:	83 ec 28             	sub    $0x28,%esp
c002c90d:	8b 45 08             	mov    0x8(%ebp),%eax
c002c910:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002c913:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c916:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c919:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c91c:	8b 00                	mov    (%eax),%eax
c002c91e:	8d 50 01             	lea    0x1(%eax),%edx
c002c921:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c924:	89 10                	mov    %edx,(%eax)
c002c926:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002c92a:	0f b6 c0             	movzbl %al,%eax
c002c92d:	83 ec 0c             	sub    $0xc,%esp
c002c930:	50                   	push   %eax
c002c931:	e8 06 00 00 00       	call   c002c93c <putchar_have_lock>
c002c936:	83 c4 10             	add    $0x10,%esp
c002c939:	90                   	nop
c002c93a:	c9                   	leave  
c002c93b:	c3                   	ret    

c002c93c <putchar_have_lock>:
c002c93c:	55                   	push   %ebp
c002c93d:	89 e5                	mov    %esp,%ebp
c002c93f:	83 ec 18             	sub    $0x18,%esp
c002c942:	8b 45 08             	mov    0x8(%ebp),%eax
c002c945:	88 45 f4             	mov    %al,-0xc(%ebp)
c002c948:	e8 96 fe ff ff       	call   c002c7e3 <console_locked_by_current_thread>
c002c94d:	84 c0                	test   %al,%al
c002c94f:	75 21                	jne    c002c972 <putchar_have_lock+0x36>
c002c951:	83 ec 0c             	sub    $0xc,%esp
c002c954:	68 30 6d 03 c0       	push   $0xc0036d30
c002c959:	68 54 6d 03 c0       	push   $0xc0036d54
c002c95e:	68 88 6d 03 c0       	push   $0xc0036d88
c002c963:	68 bb 00 00 00       	push   $0xbb
c002c968:	68 6b 6d 03 c0       	push   $0xc0036d6b
c002c96d:	e8 1f dc ff ff       	call   c002a591 <debug_panic>
c002c972:	a1 30 02 04 c0       	mov    0xc0040230,%eax
c002c977:	8b 15 34 02 04 c0    	mov    0xc0040234,%edx
c002c97d:	83 c0 01             	add    $0x1,%eax
c002c980:	83 d2 00             	adc    $0x0,%edx
c002c983:	a3 30 02 04 c0       	mov    %eax,0xc0040230
c002c988:	89 15 34 02 04 c0    	mov    %edx,0xc0040234
c002c98e:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002c992:	83 ec 0c             	sub    $0xc,%esp
c002c995:	50                   	push   %eax
c002c996:	e8 79 8e ff ff       	call   c0025814 <serial_putc>
c002c99b:	83 c4 10             	add    $0x10,%esp
c002c99e:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002c9a2:	83 ec 0c             	sub    $0xc,%esp
c002c9a5:	50                   	push   %eax
c002c9a6:	e8 fb 89 ff ff       	call   c00253a6 <vga_putc>
c002c9ab:	83 c4 10             	add    $0x10,%esp
c002c9ae:	90                   	nop
c002c9af:	c9                   	leave  
c002c9b0:	c3                   	ret    

c002c9b1 <pg_ofs>:
static inline unsigned pg_ofs (const void *va) {
c002c9b1:	55                   	push   %ebp
c002c9b2:	89 e5                	mov    %esp,%ebp
  return (uintptr_t) va & PGMASK;
c002c9b4:	8b 45 08             	mov    0x8(%ebp),%eax
c002c9b7:	25 ff 0f 00 00       	and    $0xfff,%eax
}
c002c9bc:	5d                   	pop    %ebp
c002c9bd:	c3                   	ret    

c002c9be <is_user_vaddr>:
{
c002c9be:	55                   	push   %ebp
c002c9bf:	89 e5                	mov    %esp,%ebp
  return vaddr < PHYS_BASE;
c002c9c1:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002c9c8:	0f 96 c0             	setbe  %al
}
c002c9cb:	5d                   	pop    %ebp
c002c9cc:	c3                   	ret    

c002c9cd <process_execute>:
   before process_execute() returns.  Returns the new process's
   thread id, or TID_ERROR if the thread cannot be created. */
tid_t
// int
process_execute (const char *file_name)
{
c002c9cd:	55                   	push   %ebp
c002c9ce:	89 e5                	mov    %esp,%ebp
c002c9d0:	53                   	push   %ebx
c002c9d1:	83 ec 24             	sub    $0x24,%esp
  char *fn_copy=NULL, *executing_name = NULL;
c002c9d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002c9db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  tid_t tid;

  struct process_control_block *pcb = NULL;
c002c9e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  /* Make a copy of FILE_NAME.
     Otherwise there's a race between the caller and load(). */
  fn_copy = palloc_get_page (0);
c002c9e9:	83 ec 0c             	sub    $0xc,%esp
c002c9ec:	6a 00                	push   $0x0
c002c9ee:	e8 15 74 ff ff       	call   c0023e08 <palloc_get_page>
c002c9f3:	83 c4 10             	add    $0x10,%esp
c002c9f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fn_copy == NULL)
c002c9f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c9fd:	75 0a                	jne    c002ca09 <process_execute+0x3c>
    return TID_ERROR;
c002c9ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002ca04:	e9 f1 01 00 00       	jmp    c002cbfa <process_execute+0x22d>
  strlcpy (fn_copy, file_name, PGSIZE);
c002ca09:	83 ec 04             	sub    $0x4,%esp
c002ca0c:	68 00 10 00 00       	push   $0x1000
c002ca11:	ff 75 08             	pushl  0x8(%ebp)
c002ca14:	ff 75 f4             	pushl  -0xc(%ebp)
c002ca17:	e8 12 cf ff ff       	call   c002992e <strlcpy>
c002ca1c:	83 c4 10             	add    $0x10,%esp
  executing_name = palloc_get_page(0);
c002ca1f:	83 ec 0c             	sub    $0xc,%esp
c002ca22:	6a 00                	push   $0x0
c002ca24:	e8 df 73 ff ff       	call   c0023e08 <palloc_get_page>
c002ca29:	83 c4 10             	add    $0x10,%esp
c002ca2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(executing_name == NULL){
c002ca2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002ca33:	75 1e                	jne    c002ca53 <process_execute+0x86>
      if(fn_copy)
c002ca35:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002ca39:	74 0e                	je     c002ca49 <process_execute+0x7c>
          palloc_free_page(fn_copy);
c002ca3b:	83 ec 0c             	sub    $0xc,%esp
c002ca3e:	ff 75 f4             	pushl  -0xc(%ebp)
c002ca41:	e8 1a 75 ff ff       	call   c0023f60 <palloc_free_page>
c002ca46:	83 c4 10             	add    $0x10,%esp
      return TID_ERROR;
c002ca49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002ca4e:	e9 a7 01 00 00       	jmp    c002cbfa <process_execute+0x22d>
  }
  strlcpy(executing_name, file_name, PGSIZE);
c002ca53:	83 ec 04             	sub    $0x4,%esp
c002ca56:	68 00 10 00 00       	push   $0x1000
c002ca5b:	ff 75 08             	pushl  0x8(%ebp)
c002ca5e:	ff 75 f0             	pushl  -0x10(%ebp)
c002ca61:	e8 c8 ce ff ff       	call   c002992e <strlcpy>
c002ca66:	83 c4 10             	add    $0x10,%esp
  char *args;
  executing_name = strtok_r(executing_name, " ", &args);
c002ca69:	83 ec 04             	sub    $0x4,%esp
c002ca6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c002ca6f:	50                   	push   %eax
c002ca70:	68 9c 6d 03 c0       	push   $0xc0036d9c
c002ca75:	ff 75 f0             	pushl  -0x10(%ebp)
c002ca78:	e8 c6 cc ff ff       	call   c0029743 <strtok_r>
c002ca7d:	83 c4 10             	add    $0x10,%esp
c002ca80:	89 45 f0             	mov    %eax,-0x10(%ebp)
  pcb = palloc_get_page(0);
c002ca83:	83 ec 0c             	sub    $0xc,%esp
c002ca86:	6a 00                	push   $0x0
c002ca88:	e8 7b 73 ff ff       	call   c0023e08 <palloc_get_page>
c002ca8d:	83 c4 10             	add    $0x10,%esp
c002ca90:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (pcb == NULL) {
c002ca93:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002ca97:	75 32                	jne    c002cacb <process_execute+0xfe>
      if (fn_copy)
c002ca99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002ca9d:	74 0e                	je     c002caad <process_execute+0xe0>
          palloc_free_page(fn_copy);
c002ca9f:	83 ec 0c             	sub    $0xc,%esp
c002caa2:	ff 75 f4             	pushl  -0xc(%ebp)
c002caa5:	e8 b6 74 ff ff       	call   c0023f60 <palloc_free_page>
c002caaa:	83 c4 10             	add    $0x10,%esp
      if (executing_name)
c002caad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002cab1:	74 0e                	je     c002cac1 <process_execute+0xf4>
          palloc_free_page(executing_name);
c002cab3:	83 ec 0c             	sub    $0xc,%esp
c002cab6:	ff 75 f0             	pushl  -0x10(%ebp)
c002cab9:	e8 a2 74 ff ff       	call   c0023f60 <palloc_free_page>
c002cabe:	83 c4 10             	add    $0x10,%esp
      return TID_ERROR;
c002cac1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002cac6:	e9 2f 01 00 00       	jmp    c002cbfa <process_execute+0x22d>
  }
  pcb->args = args;
c002cacb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002cace:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cad1:	89 50 04             	mov    %edx,0x4(%eax)
  pcb->tid = TID_ERROR;
c002cad4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cad7:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
  pcb->related_thread = thread_current();
c002cadd:	e8 07 44 ff ff       	call   c0020ee9 <thread_current>
c002cae2:	89 c2                	mov    %eax,%edx
c002cae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cae7:	89 50 10             	mov    %edx,0x10(%eax)
  pcb->waitingBy = false;
c002caea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002caed:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
  pcb->exited = false;
c002caf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002caf4:	c6 40 0e 00          	movb   $0x0,0xe(%eax)
  pcb->orphan = false;
c002caf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cafb:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
  pcb->child_fail_load = false;
c002caff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb02:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
  pcb->retVal = -1;
c002cb06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb09:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%eax)
  sema_init(&pcb->sema_waiting, 0);
c002cb10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb13:	83 c0 14             	add    $0x14,%eax
c002cb16:	83 ec 08             	sub    $0x8,%esp
c002cb19:	6a 00                	push   $0x0
c002cb1b:	50                   	push   %eax
c002cb1c:	e8 d7 66 ff ff       	call   c00231f8 <sema_init>
c002cb21:	83 c4 10             	add    $0x10,%esp
  sema_init(&pcb->sema_syncPaSon, 0);
c002cb24:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb27:	83 c0 28             	add    $0x28,%eax
c002cb2a:	83 ec 08             	sub    $0x8,%esp
c002cb2d:	6a 00                	push   $0x0
c002cb2f:	50                   	push   %eax
c002cb30:	e8 c3 66 ff ff       	call   c00231f8 <sema_init>
c002cb35:	83 c4 10             	add    $0x10,%esp
  // highlight: advised by pintos manual to call strtok_r,
  //            split 'echo x' into 'echo' ' x'
  //                  'echo x y' into 'echo' ' x y'
  /* Create a new thread to execute FILE_NAME. */
  // tid = thread_create (file_name, PRI_DEFAULT, start_process, fn_copy);
  tid = thread_create (executing_name, PRI_DEFAULT, start_process, pcb);
c002cb38:	ff 75 ec             	pushl  -0x14(%ebp)
c002cb3b:	68 ff cb 02 c0       	push   $0xc002cbff
c002cb40:	6a 1f                	push   $0x1f
c002cb42:	ff 75 f0             	pushl  -0x10(%ebp)
c002cb45:	e8 70 41 ff ff       	call   c0020cba <thread_create>
c002cb4a:	83 c4 10             	add    $0x10,%esp
c002cb4d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (tid == TID_ERROR){
c002cb50:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c002cb54:	75 43                	jne    c002cb99 <process_execute+0x1cc>
    if (fn_copy)
c002cb56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002cb5a:	74 0e                	je     c002cb6a <process_execute+0x19d>
      palloc_free_page(fn_copy);
c002cb5c:	83 ec 0c             	sub    $0xc,%esp
c002cb5f:	ff 75 f4             	pushl  -0xc(%ebp)
c002cb62:	e8 f9 73 ff ff       	call   c0023f60 <palloc_free_page>
c002cb67:	83 c4 10             	add    $0x10,%esp
    if(executing_name)
c002cb6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002cb6e:	74 0e                	je     c002cb7e <process_execute+0x1b1>
      palloc_free_page(executing_name);
c002cb70:	83 ec 0c             	sub    $0xc,%esp
c002cb73:	ff 75 f0             	pushl  -0x10(%ebp)
c002cb76:	e8 e5 73 ff ff       	call   c0023f60 <palloc_free_page>
c002cb7b:	83 c4 10             	add    $0x10,%esp
    if (pcb)
c002cb7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002cb82:	74 0e                	je     c002cb92 <process_execute+0x1c5>
      palloc_free_page(pcb);
c002cb84:	83 ec 0c             	sub    $0xc,%esp
c002cb87:	ff 75 ec             	pushl  -0x14(%ebp)
c002cb8a:	e8 d1 73 ff ff       	call   c0023f60 <palloc_free_page>
c002cb8f:	83 c4 10             	add    $0x10,%esp
    return TID_ERROR;
c002cb92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002cb97:	eb 61                	jmp    c002cbfa <process_execute+0x22d>
  }
  sema_down(&pcb->sema_syncPaSon);
c002cb99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb9c:	83 c0 28             	add    $0x28,%eax
c002cb9f:	83 ec 0c             	sub    $0xc,%esp
c002cba2:	50                   	push   %eax
c002cba3:	e8 97 66 ff ff       	call   c002323f <sema_down>
c002cba8:	83 c4 10             	add    $0x10,%esp
  if(fn_copy)
c002cbab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002cbaf:	74 0e                	je     c002cbbf <process_execute+0x1f2>
    palloc_free_page(fn_copy);
c002cbb1:	83 ec 0c             	sub    $0xc,%esp
c002cbb4:	ff 75 f4             	pushl  -0xc(%ebp)
c002cbb7:	e8 a4 73 ff ff       	call   c0023f60 <palloc_free_page>
c002cbbc:	83 c4 10             	add    $0x10,%esp
  if (!pcb->child_fail_load) // child thread success
c002cbbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cbc2:	8a 40 0c             	mov    0xc(%eax),%al
c002cbc5:	83 f0 01             	xor    $0x1,%eax
c002cbc8:	84 c0                	test   %al,%al
c002cbca:	74 1b                	je     c002cbe7 <process_execute+0x21a>
    list_push_back(&thread_current()->child_threads, &pcb->child_elem);
c002cbcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cbcf:	8d 58 3c             	lea    0x3c(%eax),%ebx
c002cbd2:	e8 12 43 ff ff       	call   c0020ee9 <thread_current>
c002cbd7:	83 c0 34             	add    $0x34,%eax
c002cbda:	83 ec 08             	sub    $0x8,%esp
c002cbdd:	53                   	push   %ebx
c002cbde:	50                   	push   %eax
c002cbdf:	e8 00 e0 ff ff       	call   c002abe4 <list_push_back>
c002cbe4:	83 c4 10             	add    $0x10,%esp
  palloc_free_page(executing_name);
c002cbe7:	83 ec 0c             	sub    $0xc,%esp
c002cbea:	ff 75 f0             	pushl  -0x10(%ebp)
c002cbed:	e8 6e 73 ff ff       	call   c0023f60 <palloc_free_page>
c002cbf2:	83 c4 10             	add    $0x10,%esp
  _DEBUG_PRINTF("want to execute: %s at %d\n", file_name, tid);
  return pcb->tid;
c002cbf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cbf8:	8b 00                	mov    (%eax),%eax
}
c002cbfa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002cbfd:	c9                   	leave  
c002cbfe:	c3                   	ret    

c002cbff <start_process>:

/* A thread function that loads a user process and starts it
   running. */
static void
start_process (void *_pcb)
{
c002cbff:	55                   	push   %ebp
c002cc00:	89 e5                	mov    %esp,%ebp
c002cc02:	53                   	push   %ebx
c002cc03:	81 ec 74 01 00 00    	sub    $0x174,%esp
  struct process_control_block* pcb = _pcb;
c002cc09:	8b 45 08             	mov    0x8(%ebp),%eax
c002cc0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  char *file_name = (char*)pcb->args;
c002cc0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cc12:	8b 40 04             	mov    0x4(%eax),%eax
c002cc15:	89 45 e8             	mov    %eax,-0x18(%ebp)
  /* If load failed, quit. */
  // split args, still don't know why it fails to assign tokens in setup_stac,k
  char *args = file_name;
c002cc18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002cc1b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  char * tokens[64];
  int argc = 0;
c002cc1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  tokens[argc++] = thread_current()->name;
c002cc25:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c002cc28:	8d 43 01             	lea    0x1(%ebx),%eax
c002cc2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002cc2e:	e8 b6 42 ff ff       	call   c0020ee9 <thread_current>
c002cc33:	83 c0 08             	add    $0x8,%eax
c002cc36:	89 84 9d e0 fe ff ff 	mov    %eax,-0x120(%ebp,%ebx,4)
  char *token, *save_ptr;
  // arg tokens
  for ( token = strtok_r(args, " ", &save_ptr);
c002cc3d:	83 ec 04             	sub    $0x4,%esp
c002cc40:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c002cc46:	50                   	push   %eax
c002cc47:	68 9c 6d 03 c0       	push   $0xc0036d9c
c002cc4c:	ff 75 e4             	pushl  -0x1c(%ebp)
c002cc4f:	e8 ef ca ff ff       	call   c0029743 <strtok_r>
c002cc54:	83 c4 10             	add    $0x10,%esp
c002cc57:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002cc5a:	eb 2f                	jmp    c002cc8b <start_process+0x8c>
        token != NULL;
        token = strtok_r(NULL, " ", &save_ptr))
  {
    tokens[argc++] = token;
c002cc5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cc5f:	8d 50 01             	lea    0x1(%eax),%edx
c002cc62:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002cc65:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002cc68:	89 94 85 e0 fe ff ff 	mov    %edx,-0x120(%ebp,%eax,4)
        token = strtok_r(NULL, " ", &save_ptr))
c002cc6f:	83 ec 04             	sub    $0x4,%esp
c002cc72:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c002cc78:	50                   	push   %eax
c002cc79:	68 9c 6d 03 c0       	push   $0xc0036d9c
c002cc7e:	6a 00                	push   $0x0
c002cc80:	e8 be ca ff ff       	call   c0029743 <strtok_r>
c002cc85:	83 c4 10             	add    $0x10,%esp
c002cc88:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for ( token = strtok_r(args, " ", &save_ptr);
c002cc8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002cc8f:	75 cb                	jne    c002cc5c <start_process+0x5d>
  }
    struct intr_frame if_;
    bool success=false;
c002cc91:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)

    /* Initialize interrupt frame and load executable. */
    memset (&if_, 0, sizeof if_);
c002cc95:	83 ec 04             	sub    $0x4,%esp
c002cc98:	6a 50                	push   $0x50
c002cc9a:	6a 00                	push   $0x0
c002cc9c:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cca2:	50                   	push   %eax
c002cca3:	e8 af cb ff ff       	call   c0029857 <memset>
c002cca8:	83 c4 10             	add    $0x10,%esp
    if_.gs = if_.fs = if_.es = if_.ds = if_.ss = SEL_UDSEG;
c002ccab:	66 c7 85 d8 fe ff ff 	movw   $0x23,-0x128(%ebp)
c002ccb2:	23 00 
c002ccb4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
c002ccba:	66 89 85 b8 fe ff ff 	mov    %ax,-0x148(%ebp)
c002ccc1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
c002ccc7:	66 89 85 b4 fe ff ff 	mov    %ax,-0x14c(%ebp)
c002ccce:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
c002ccd4:	66 89 85 b0 fe ff ff 	mov    %ax,-0x150(%ebp)
c002ccdb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
c002cce1:	66 89 85 ac fe ff ff 	mov    %ax,-0x154(%ebp)
    if_.cs = SEL_UCSEG;
c002cce8:	66 c7 85 cc fe ff ff 	movw   $0x1b,-0x134(%ebp)
c002ccef:	1b 00 
    if_.eflags = FLAG_IF | FLAG_MBS;
c002ccf1:	c7 85 d0 fe ff ff 02 	movl   $0x202,-0x130(%ebp)
c002ccf8:	02 00 00 
    success = load (file_name, &if_.eip, &if_.esp);
c002ccfb:	83 ec 04             	sub    $0x4,%esp
c002ccfe:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cd04:	83 c0 48             	add    $0x48,%eax
c002cd07:	50                   	push   %eax
c002cd08:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cd0e:	83 c0 3c             	add    $0x3c,%eax
c002cd11:	50                   	push   %eax
c002cd12:	ff 75 e8             	pushl  -0x18(%ebp)
c002cd15:	e8 b7 03 00 00       	call   c002d0d1 <load>
c002cd1a:	83 c4 10             	add    $0x10,%esp
c002cd1d:	88 45 e3             	mov    %al,-0x1d(%ebp)
//  if (argc > 32)
//    success = false;
  if (success)
c002cd20:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
c002cd24:	74 1f                	je     c002cd45 <start_process+0x146>
    push_args(&if_.esp, argc, tokens);
c002cd26:	83 ec 04             	sub    $0x4,%esp
c002cd29:	8d 85 e0 fe ff ff    	lea    -0x120(%ebp),%eax
c002cd2f:	50                   	push   %eax
c002cd30:	ff 75 f4             	pushl  -0xc(%ebp)
c002cd33:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cd39:	83 c0 48             	add    $0x48,%eax
c002cd3c:	50                   	push   %eax
c002cd3d:	e8 a0 08 00 00       	call   c002d5e2 <push_args>
c002cd42:	83 c4 10             	add    $0x10,%esp
  thread_current()->pcb = pcb;
c002cd45:	e8 9f 41 ff ff       	call   c0020ee9 <thread_current>
c002cd4a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002cd4d:	89 50 58             	mov    %edx,0x58(%eax)
  pcb->tid = (success) ? thread_current()->tid : TID_ERROR;
c002cd50:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
c002cd54:	74 09                	je     c002cd5f <start_process+0x160>
c002cd56:	e8 8e 41 ff ff       	call   c0020ee9 <thread_current>
c002cd5b:	8b 00                	mov    (%eax),%eax
c002cd5d:	eb 05                	jmp    c002cd64 <start_process+0x165>
c002cd5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002cd64:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002cd67:	89 02                	mov    %eax,(%edx)
  pcb->child_fail_load = (success) ? false : true;
c002cd69:	8a 45 e3             	mov    -0x1d(%ebp),%al
c002cd6c:	83 f0 01             	xor    $0x1,%eax
c002cd6f:	88 c2                	mov    %al,%dl
c002cd71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cd74:	88 50 0c             	mov    %dl,0xc(%eax)
  pcb->related_thread = thread_current();
c002cd77:	e8 6d 41 ff ff       	call   c0020ee9 <thread_current>
c002cd7c:	89 c2                	mov    %eax,%edx
c002cd7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cd81:	89 50 10             	mov    %edx,0x10(%eax)

  sema_up(&(pcb->sema_syncPaSon));
c002cd84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cd87:	83 c0 28             	add    $0x28,%eax
c002cd8a:	83 ec 0c             	sub    $0xc,%esp
c002cd8d:	50                   	push   %eax
c002cd8e:	e8 bb 65 ff ff       	call   c002334e <sema_up>
c002cd93:	83 c4 10             	add    $0x10,%esp
  // palloc_free_page(tokens);
  if (!success)  {
c002cd96:	8a 45 e3             	mov    -0x1d(%ebp),%al
c002cd99:	83 f0 01             	xor    $0x1,%eax
c002cd9c:	84 c0                	test   %al,%al
c002cd9e:	74 0d                	je     c002cdad <start_process+0x1ae>
    _DEBUG_PRINTF("%d call exit\n", pcb->tid);
    sys_exit(-1);
c002cda0:	83 ec 0c             	sub    $0xc,%esp
c002cda3:	6a ff                	push   $0xffffffff
c002cda5:	e8 1b 1e 00 00       	call   c002ebc5 <sys_exit>
c002cdaa:	83 c4 10             	add    $0x10,%esp
     interrupt, implemented by intr_exit (in
     threads/intr-stubs.S).  Because intr_exit takes all of its
     arguments on the stack in the form of a `struct intr_frame',
     we just point the stack pointer (%esp) to our stack frame
     and jump to it. */
  asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (&if_) : "memory");
c002cdad:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cdb3:	89 c4                	mov    %eax,%esp
c002cdb5:	e9 a8 58 ff ff       	jmp    c0022662 <intr_exit>
  NOT_REACHED ();
c002cdba:	68 a0 6d 03 c0       	push   $0xc0036da0
c002cdbf:	68 f0 6e 03 c0       	push   $0xc0036ef0
c002cdc4:	68 ae 00 00 00       	push   $0xae
c002cdc9:	68 c2 6d 03 c0       	push   $0xc0036dc2
c002cdce:	e8 be d7 ff ff       	call   c002a591 <debug_panic>

c002cdd3 <process_wait>:
   immediately, without waiting.
   This function will be implemented in problem 2-2.  For now, it
   does nothing. */
int
process_wait (tid_t child_tid /*UNUSED*/) 
{
c002cdd3:	55                   	push   %ebp
c002cdd4:	89 e5                	mov    %esp,%ebp
c002cdd6:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur_thread = thread_current ();
c002cdd9:	e8 0b 41 ff ff       	call   c0020ee9 <thread_current>
c002cdde:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct list *child_threads = &(cur_thread->child_threads);
c002cde1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cde4:	83 c0 34             	add    $0x34,%eax
c002cde7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct process_control_block *child_thread = get_child_thread(cur_thread, child_tid);
c002cdea:	83 ec 08             	sub    $0x8,%esp
c002cded:	ff 75 08             	pushl  0x8(%ebp)
c002cdf0:	ff 75 f4             	pushl  -0xc(%ebp)
c002cdf3:	e8 d0 4d ff ff       	call   c0021bc8 <get_child_thread>
c002cdf8:	83 c4 10             	add    $0x10,%esp
c002cdfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (child_thread == NULL || child_thread->waitingBy) {  // already waiting, wait twice
c002cdfe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002ce02:	74 0a                	je     c002ce0e <process_wait+0x3b>
c002ce04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce07:	8a 40 0d             	mov    0xd(%eax),%al
c002ce0a:	84 c0                	test   %al,%al
c002ce0c:	74 07                	je     c002ce15 <process_wait+0x42>
    return -1;
c002ce0e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002ce13:	eb 7d                	jmp    c002ce92 <process_wait+0xbf>
  }
  else
    child_thread->waitingBy = true;
c002ce15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce18:	c6 40 0d 01          	movb   $0x1,0xd(%eax)

  // wait(block) until child terminates
  if (! child_thread->exited){
c002ce1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce1f:	8a 40 0e             	mov    0xe(%eax),%al
c002ce22:	83 f0 01             	xor    $0x1,%eax
c002ce25:	84 c0                	test   %al,%al
c002ce27:	74 12                	je     c002ce3b <process_wait+0x68>
    _DEBUG_PRINTF("[DEBUG] %s %d waiting, %d\n", cur_thread->name, cur_thread->tid, child_thread->tid);
    sema_down(& (child_thread->sema_waiting));
c002ce29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce2c:	83 c0 14             	add    $0x14,%eax
c002ce2f:	83 ec 0c             	sub    $0xc,%esp
c002ce32:	50                   	push   %eax
c002ce33:	e8 07 64 ff ff       	call   c002323f <sema_down>
c002ce38:	83 c4 10             	add    $0x10,%esp
  }
  ASSERT (child_thread->exited);
c002ce3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce3e:	8a 40 0e             	mov    0xe(%eax),%al
c002ce41:	84 c0                	test   %al,%al
c002ce43:	75 21                	jne    c002ce66 <process_wait+0x93>
c002ce45:	83 ec 0c             	sub    $0xc,%esp
c002ce48:	68 db 6d 03 c0       	push   $0xc0036ddb
c002ce4d:	68 f0 6d 03 c0       	push   $0xc0036df0
c002ce52:	68 00 6f 03 c0       	push   $0xc0036f00
c002ce57:	68 ca 00 00 00       	push   $0xca
c002ce5c:	68 c2 6d 03 c0       	push   $0xc0036dc2
c002ce61:	e8 2b d7 ff ff       	call   c002a591 <debug_panic>
  // return the exit code of the child process
  int retcode = child_thread->retVal;
c002ce66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce69:	8b 40 08             	mov    0x8(%eax),%eax
c002ce6c:	89 45 e8             	mov    %eax,-0x18(%ebp)

  list_remove(&child_thread->child_elem); // delte child
c002ce6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce72:	83 c0 3c             	add    $0x3c,%eax
c002ce75:	83 ec 0c             	sub    $0xc,%esp
c002ce78:	50                   	push   %eax
c002ce79:	e8 8c dd ff ff       	call   c002ac0a <list_remove>
c002ce7e:	83 c4 10             	add    $0x10,%esp
  palloc_free_page(child_thread);
c002ce81:	83 ec 0c             	sub    $0xc,%esp
c002ce84:	ff 75 ec             	pushl  -0x14(%ebp)
c002ce87:	e8 d4 70 ff ff       	call   c0023f60 <palloc_free_page>
c002ce8c:	83 c4 10             	add    $0x10,%esp
  // printf("[DEBUG] %s wait end\n", cur_thread->name);
  return retcode;
c002ce8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c002ce92:	c9                   	leave  
c002ce93:	c3                   	ret    

c002ce94 <process_exit>:

/* Free the current process's resources. */
void
process_exit (void)
{
c002ce94:	55                   	push   %ebp
c002ce95:	89 e5                	mov    %esp,%ebp
c002ce97:	83 ec 38             	sub    $0x38,%esp
  struct thread *cur = thread_current ();
c002ce9a:	e8 4a 40 ff ff       	call   c0020ee9 <thread_current>
c002ce9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t *pd;

  // free resources, file structrue
  struct list *opend_files = &cur->opened_files;
c002cea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cea5:	83 c0 44             	add    $0x44,%eax
c002cea8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (!list_empty(opend_files)) {
c002ceab:	eb 3d                	jmp    c002ceea <process_exit+0x56>
    struct list_elem *elem = list_pop_front(opend_files);
c002cead:	83 ec 0c             	sub    $0xc,%esp
c002ceb0:	ff 75 f0             	pushl  -0x10(%ebp)
c002ceb3:	e8 ab dd ff ff       	call   c002ac63 <list_pop_front>
c002ceb8:	83 c4 10             	add    $0x10,%esp
c002cebb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct file_descriptor *fileD = list_entry(elem, struct file_descriptor, elem);
c002cebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cec1:	83 c0 04             	add    $0x4,%eax
c002cec4:	83 e8 0c             	sub    $0xc,%eax
c002cec7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    file_close(fileD->file);
c002ceca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002cecd:	8b 40 04             	mov    0x4(%eax),%eax
c002ced0:	83 ec 0c             	sub    $0xc,%esp
c002ced3:	50                   	push   %eax
c002ced4:	e8 84 38 00 00       	call   c003075d <file_close>
c002ced9:	83 c4 10             	add    $0x10,%esp
    palloc_free_page(fileD);
c002cedc:	83 ec 0c             	sub    $0xc,%esp
c002cedf:	ff 75 e8             	pushl  -0x18(%ebp)
c002cee2:	e8 79 70 ff ff       	call   c0023f60 <palloc_free_page>
c002cee7:	83 c4 10             	add    $0x10,%esp
  while (!list_empty(opend_files)) {
c002ceea:	83 ec 0c             	sub    $0xc,%esp
c002ceed:	ff 75 f0             	pushl  -0x10(%ebp)
c002cef0:	e8 97 de ff ff       	call   c002ad8c <list_empty>
c002cef5:	83 c4 10             	add    $0x10,%esp
c002cef8:	83 f0 01             	xor    $0x1,%eax
c002cefb:	84 c0                	test   %al,%al
c002cefd:	75 ae                	jne    c002cead <process_exit+0x19>
  }

 #ifdef VM
  //mmap desc
  struct list *list0 = &cur->mmap_list;
c002ceff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf02:	83 c0 68             	add    $0x68,%eax
c002cf05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  while(!list_empty(list0)){
c002cf08:	eb 54                	jmp    c002cf5e <process_exit+0xca>
      struct list_elem *l_elem = list_begin(list0);
c002cf0a:	83 ec 0c             	sub    $0xc,%esp
c002cf0d:	ff 75 e4             	pushl  -0x1c(%ebp)
c002cf10:	e8 44 d9 ff ff       	call   c002a859 <list_begin>
c002cf15:	83 c4 10             	add    $0x10,%esp
c002cf18:	89 45 e0             	mov    %eax,-0x20(%ebp)
      struct mmap_desc *desc = list_entry(l_elem, struct mmap_desc, elem);
c002cf1b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002cf1e:	83 c0 04             	add    $0x4,%eax
c002cf21:	83 e8 04             	sub    $0x4,%eax
c002cf24:	89 45 dc             	mov    %eax,-0x24(%ebp)

      ASSERT( sys_munmap(desc->id) == true);
c002cf27:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002cf2a:	8b 40 0c             	mov    0xc(%eax),%eax
c002cf2d:	83 ec 0c             	sub    $0xc,%esp
c002cf30:	50                   	push   %eax
c002cf31:	e8 51 24 00 00       	call   c002f387 <sys_munmap>
c002cf36:	83 c4 10             	add    $0x10,%esp
c002cf39:	84 c0                	test   %al,%al
c002cf3b:	75 21                	jne    c002cf5e <process_exit+0xca>
c002cf3d:	83 ec 0c             	sub    $0xc,%esp
c002cf40:	68 07 6e 03 c0       	push   $0xc0036e07
c002cf45:	68 f0 6d 03 c0       	push   $0xc0036df0
c002cf4a:	68 10 6f 03 c0       	push   $0xc0036f10
c002cf4f:	68 eb 00 00 00       	push   $0xeb
c002cf54:	68 c2 6d 03 c0       	push   $0xc0036dc2
c002cf59:	e8 33 d6 ff ff       	call   c002a591 <debug_panic>
  while(!list_empty(list0)){
c002cf5e:	83 ec 0c             	sub    $0xc,%esp
c002cf61:	ff 75 e4             	pushl  -0x1c(%ebp)
c002cf64:	e8 23 de ff ff       	call   c002ad8c <list_empty>
c002cf69:	83 c4 10             	add    $0x10,%esp
c002cf6c:	83 f0 01             	xor    $0x1,%eax
c002cf6f:	84 c0                	test   %al,%al
c002cf71:	75 97                	jne    c002cf0a <process_exit+0x76>
  }
 #endif

  // free child_thread list
  struct list *child_threads = &cur->child_threads;
c002cf73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf76:	83 c0 34             	add    $0x34,%eax
c002cf79:	89 45 d8             	mov    %eax,-0x28(%ebp)
  struct process_control_block *child_thread = NULL;
c002cf7c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  while (!list_empty(child_threads)) {
c002cf83:	eb 4b                	jmp    c002cfd0 <process_exit+0x13c>
    struct list_elem *elem = list_pop_front (child_threads);
c002cf85:	83 ec 0c             	sub    $0xc,%esp
c002cf88:	ff 75 d8             	pushl  -0x28(%ebp)
c002cf8b:	e8 d3 dc ff ff       	call   c002ac63 <list_pop_front>
c002cf90:	83 c4 10             	add    $0x10,%esp
c002cf93:	89 45 d0             	mov    %eax,-0x30(%ebp)
    child_thread = list_entry(elem, struct process_control_block, child_elem);
c002cf96:	8b 45 d0             	mov    -0x30(%ebp),%eax
c002cf99:	83 c0 04             	add    $0x4,%eax
c002cf9c:	83 e8 40             	sub    $0x40,%eax
c002cf9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (child_thread->exited)
c002cfa2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002cfa5:	8a 40 0e             	mov    0xe(%eax),%al
c002cfa8:	84 c0                	test   %al,%al
c002cfaa:	74 10                	je     c002cfbc <process_exit+0x128>
      palloc_free_page(child_thread);
c002cfac:	83 ec 0c             	sub    $0xc,%esp
c002cfaf:	ff 75 d4             	pushl  -0x2c(%ebp)
c002cfb2:	e8 a9 6f ff ff       	call   c0023f60 <palloc_free_page>
c002cfb7:	83 c4 10             	add    $0x10,%esp
c002cfba:	eb 14                	jmp    c002cfd0 <process_exit+0x13c>
    else {
      child_thread->related_thread->parentThread = NULL;
c002cfbc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002cfbf:	8b 40 10             	mov    0x10(%eax),%eax
c002cfc2:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
      child_thread->orphan = true;
c002cfc9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002cfcc:	c6 40 0f 01          	movb   $0x1,0xf(%eax)
  while (!list_empty(child_threads)) {
c002cfd0:	83 ec 0c             	sub    $0xc,%esp
c002cfd3:	ff 75 d8             	pushl  -0x28(%ebp)
c002cfd6:	e8 b1 dd ff ff       	call   c002ad8c <list_empty>
c002cfdb:	83 c4 10             	add    $0x10,%esp
c002cfde:	83 f0 01             	xor    $0x1,%eax
c002cfe1:	84 c0                	test   %al,%al
c002cfe3:	75 a0                	jne    c002cf85 <process_exit+0xf1>
    }
  }

  // free executing_file
  if (cur->executing_file) {
c002cfe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cfe8:	8b 40 54             	mov    0x54(%eax),%eax
c002cfeb:	85 c0                	test   %eax,%eax
c002cfed:	74 24                	je     c002d013 <process_exit+0x17f>
    file_allow_write(cur->executing_file);
c002cfef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cff2:	8b 40 54             	mov    0x54(%eax),%eax
c002cff5:	83 ec 0c             	sub    $0xc,%esp
c002cff8:	50                   	push   %eax
c002cff9:	e8 aa 38 00 00       	call   c00308a8 <file_allow_write>
c002cffe:	83 c4 10             	add    $0x10,%esp
    file_close(cur->executing_file);
c002d001:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d004:	8b 40 54             	mov    0x54(%eax),%eax
c002d007:	83 ec 0c             	sub    $0xc,%esp
c002d00a:	50                   	push   %eax
c002d00b:	e8 4d 37 00 00       	call   c003075d <file_close>
c002d010:	83 c4 10             	add    $0x10,%esp
  }

  cur->pcb->exited = true;
c002d013:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d016:	8b 40 58             	mov    0x58(%eax),%eax
c002d019:	c6 40 0e 01          	movb   $0x1,0xe(%eax)
  _DEBUG_PRINTF("process %d exiting\n", cur->tid);
  _DEBUG_PRINTF("[DEBUG] %s, %d sema_waiting up\n", cur->name, cur->tid);
  bool temp_orphan = cur->pcb->orphan; // father may 
c002d01d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d020:	8b 40 58             	mov    0x58(%eax),%eax
c002d023:	8a 40 0f             	mov    0xf(%eax),%al
c002d026:	88 45 cf             	mov    %al,-0x31(%ebp)
  sema_up (&cur->pcb->sema_waiting);
c002d029:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d02c:	8b 40 58             	mov    0x58(%eax),%eax
c002d02f:	83 c0 14             	add    $0x14,%eax
c002d032:	83 ec 0c             	sub    $0xc,%esp
c002d035:	50                   	push   %eax
c002d036:	e8 13 63 ff ff       	call   c002334e <sema_up>
c002d03b:	83 c4 10             	add    $0x10,%esp

  if (temp_orphan)
c002d03e:	80 7d cf 00          	cmpb   $0x0,-0x31(%ebp)
c002d042:	74 12                	je     c002d056 <process_exit+0x1c2>
    palloc_free_page(&cur->pcb);
c002d044:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d047:	83 c0 58             	add    $0x58,%eax
c002d04a:	83 ec 0c             	sub    $0xc,%esp
c002d04d:	50                   	push   %eax
c002d04e:	e8 0d 6f ff ff       	call   c0023f60 <palloc_free_page>
c002d053:	83 c4 10             	add    $0x10,%esp

  #ifdef VM
    vm_supt_destroy(cur->supt);
c002d056:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d059:	8b 40 64             	mov    0x64(%eax),%eax
c002d05c:	83 ec 0c             	sub    $0xc,%esp
c002d05f:	50                   	push   %eax
c002d060:	e8 62 62 00 00       	call   c00332c7 <vm_supt_destroy>
c002d065:	83 c4 10             	add    $0x10,%esp
    cur->supt = NULL;
c002d068:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d06b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
  #endif

  /* Destroy the current process's page directory and switch back
     to the kernel-only page directory. */
  pd = cur->pagedir;
c002d072:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d075:	8b 40 30             	mov    0x30(%eax),%eax
c002d078:	89 45 c8             	mov    %eax,-0x38(%ebp)
  if (pd != NULL) // Highlight: means user processe
c002d07b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c002d07f:	74 25                	je     c002d0a6 <process_exit+0x212>
         process page directory.  We must activate the base page
         directory before destroying the process's page
         directory, or our active page directory will be one
         that's been freed (and cleared). */
      // printf("%s: exit(%d)\n", cur_thread->name, retVal);
      cur->pagedir = NULL;
c002d081:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d084:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
      pagedir_activate (NULL);
c002d08b:	83 ec 0c             	sub    $0xc,%esp
c002d08e:	6a 00                	push   $0x0
c002d090:	e8 8f 0f 00 00       	call   c002e024 <pagedir_activate>
c002d095:	83 c4 10             	add    $0x10,%esp
      pagedir_destroy (pd);
c002d098:	83 ec 0c             	sub    $0xc,%esp
c002d09b:	ff 75 c8             	pushl  -0x38(%ebp)
c002d09e:	e8 af 09 00 00       	call   c002da52 <pagedir_destroy>
c002d0a3:	83 c4 10             	add    $0x10,%esp
    }
  // printf("[DEBUG] %s exit end\n", cur->name);
}
c002d0a6:	90                   	nop
c002d0a7:	c9                   	leave  
c002d0a8:	c3                   	ret    

c002d0a9 <process_activate>:
/* Sets up the CPU for running user code in the current
   thread.
   This function is called on every context switch. */
void
process_activate (void)
{
c002d0a9:	55                   	push   %ebp
c002d0aa:	89 e5                	mov    %esp,%ebp
c002d0ac:	83 ec 18             	sub    $0x18,%esp
  struct thread *t = thread_current ();
c002d0af:	e8 35 3e ff ff       	call   c0020ee9 <thread_current>
c002d0b4:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Activate thread's page tables. */
  pagedir_activate (t->pagedir);
c002d0b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d0ba:	8b 40 30             	mov    0x30(%eax),%eax
c002d0bd:	83 ec 0c             	sub    $0xc,%esp
c002d0c0:	50                   	push   %eax
c002d0c1:	e8 5e 0f 00 00       	call   c002e024 <pagedir_activate>
c002d0c6:	83 c4 10             	add    $0x10,%esp

  /* Set thread's kernel stack for use in processing
     interrupts. */
  tss_update ();
c002d0c9:	e8 cb 2e 00 00       	call   c002ff99 <tss_update>
}
c002d0ce:	90                   	nop
c002d0cf:	c9                   	leave  
c002d0d0:	c3                   	ret    

c002d0d1 <load>:
   and its initial stack pointer into *ESP.
   Returns true if successful, false otherwise. */
bool
// load (const char *file_name, void (**eip) (void), void **esp) 
load (const char *args, void (**eip) (void), void **esp) 
{
c002d0d1:	55                   	push   %ebp
c002d0d2:	89 e5                	mov    %esp,%ebp
c002d0d4:	81 ec 88 00 00 00    	sub    $0x88,%esp
  struct thread *t = thread_current ();
c002d0da:	e8 0a 3e ff ff       	call   c0020ee9 <thread_current>
c002d0df:	89 45 e0             	mov    %eax,-0x20(%ebp)
  struct Elf32_Ehdr ehdr;
  struct file *file = NULL;
c002d0e2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  off_t file_ofs;
  bool success = false;
c002d0e9:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
  int i;

  /* Allocate and activate page directory. */
  t->pagedir = pagedir_create ();
c002d0ed:	e8 26 09 00 00       	call   c002da18 <pagedir_create>
c002d0f2:	89 c2                	mov    %eax,%edx
c002d0f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d0f7:	89 50 30             	mov    %edx,0x30(%eax)
#ifdef VM
  t->supt = vm_supt_create();
c002d0fa:	e8 95 61 00 00       	call   c0033294 <vm_supt_create>
c002d0ff:	89 c2                	mov    %eax,%edx
c002d101:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d104:	89 50 64             	mov    %edx,0x64(%eax)
#endif
  if (t->pagedir == NULL) 
c002d107:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d10a:	8b 40 30             	mov    0x30(%eax),%eax
c002d10d:	85 c0                	test   %eax,%eax
c002d10f:	0f 84 66 02 00 00    	je     c002d37b <load+0x2aa>
    goto done;
  process_activate ();
c002d115:	e8 8f ff ff ff       	call   c002d0a9 <process_activate>

  /* Open executable file. */
  // file = filesys_open (file_name); 
  _DEBUG_PRINTF("open %s:\n", t->name);
  file = filesys_open (t->name);   // we put the executable name at thread->name
c002d11a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d11d:	83 c0 08             	add    $0x8,%eax
c002d120:	83 ec 0c             	sub    $0xc,%esp
c002d123:	50                   	push   %eax
c002d124:	e8 70 30 00 00       	call   c0030199 <filesys_open>
c002d129:	83 c4 10             	add    $0x10,%esp
c002d12c:	89 45 dc             	mov    %eax,-0x24(%ebp)
  if (file == NULL) 
c002d12f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c002d133:	75 20                	jne    c002d155 <load+0x84>
    {
      // printf("at %s\n",t->name);
      printf ("load: %s: open failed\n", t->name);
c002d135:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d138:	83 c0 08             	add    $0x8,%eax
c002d13b:	83 ec 08             	sub    $0x8,%esp
c002d13e:	50                   	push   %eax
c002d13f:	68 24 6e 03 c0       	push   $0xc0036e24
c002d144:	e8 e7 ae ff ff       	call   c0028030 <printf>
c002d149:	83 c4 10             	add    $0x10,%esp
      success = false;
c002d14c:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
      goto done; 
c002d150:	e9 36 02 00 00       	jmp    c002d38b <load+0x2ba>
    }

  /* Read and verify executable header. */
  if (file_read (file, &ehdr, sizeof ehdr) != sizeof ehdr
c002d155:	83 ec 04             	sub    $0x4,%esp
c002d158:	6a 34                	push   $0x34
c002d15a:	8d 45 98             	lea    -0x68(%ebp),%eax
c002d15d:	50                   	push   %eax
c002d15e:	ff 75 dc             	pushl  -0x24(%ebp)
c002d161:	e8 3d 36 00 00       	call   c00307a3 <file_read>
c002d166:	83 c4 10             	add    $0x10,%esp
c002d169:	83 f8 34             	cmp    $0x34,%eax
c002d16c:	75 48                	jne    c002d1b6 <load+0xe5>
      || memcmp (ehdr.e_ident, "\177ELF\1\1\1", 7)
c002d16e:	83 ec 04             	sub    $0x4,%esp
c002d171:	6a 07                	push   $0x7
c002d173:	68 3b 6e 03 c0       	push   $0xc0036e3b
c002d178:	8d 45 98             	lea    -0x68(%ebp),%eax
c002d17b:	50                   	push   %eax
c002d17c:	e8 28 c2 ff ff       	call   c00293a9 <memcmp>
c002d181:	83 c4 10             	add    $0x10,%esp
c002d184:	85 c0                	test   %eax,%eax
c002d186:	75 2e                	jne    c002d1b6 <load+0xe5>
      || ehdr.e_type != 2
c002d188:	8b 45 a8             	mov    -0x58(%ebp),%eax
c002d18b:	66 83 f8 02          	cmp    $0x2,%ax
c002d18f:	75 25                	jne    c002d1b6 <load+0xe5>
      || ehdr.e_machine != 3
c002d191:	66 8b 45 aa          	mov    -0x56(%ebp),%ax
c002d195:	66 83 f8 03          	cmp    $0x3,%ax
c002d199:	75 1b                	jne    c002d1b6 <load+0xe5>
      || ehdr.e_version != 1
c002d19b:	8b 45 ac             	mov    -0x54(%ebp),%eax
c002d19e:	83 f8 01             	cmp    $0x1,%eax
c002d1a1:	75 13                	jne    c002d1b6 <load+0xe5>
      || ehdr.e_phentsize != sizeof (struct Elf32_Phdr)
c002d1a3:	66 8b 45 c2          	mov    -0x3e(%ebp),%ax
c002d1a7:	66 83 f8 20          	cmp    $0x20,%ax
c002d1ab:	75 09                	jne    c002d1b6 <load+0xe5>
      || ehdr.e_phnum > 1024) 
c002d1ad:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c002d1b0:	66 3d 00 04          	cmp    $0x400,%ax
c002d1b4:	76 1c                	jbe    c002d1d2 <load+0x101>
    {
      printf ("load: %s: error loading executable\n", t->name);
c002d1b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d1b9:	83 c0 08             	add    $0x8,%eax
c002d1bc:	83 ec 08             	sub    $0x8,%esp
c002d1bf:	50                   	push   %eax
c002d1c0:	68 44 6e 03 c0       	push   $0xc0036e44
c002d1c5:	e8 66 ae ff ff       	call   c0028030 <printf>
c002d1ca:	83 c4 10             	add    $0x10,%esp
      goto done; 
c002d1cd:	e9 b9 01 00 00       	jmp    c002d38b <load+0x2ba>
    }

  /* Read program headers. */
  file_ofs = ehdr.e_phoff;
c002d1d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c002d1d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (i = 0; i < ehdr.e_phnum; i++) 
c002d1d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c002d1df:	e9 4a 01 00 00       	jmp    c002d32e <load+0x25d>
    {
      struct Elf32_Phdr phdr;

      if (file_ofs < 0 || file_ofs > file_length (file))
c002d1e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002d1e8:	0f 88 9d 01 00 00    	js     c002d38b <load+0x2ba>
c002d1ee:	83 ec 0c             	sub    $0xc,%esp
c002d1f1:	ff 75 dc             	pushl  -0x24(%ebp)
c002d1f4:	e8 02 37 00 00       	call   c00308fb <file_length>
c002d1f9:	83 c4 10             	add    $0x10,%esp
c002d1fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002d1ff:	0f 8c 86 01 00 00    	jl     c002d38b <load+0x2ba>
        goto done;
      file_seek (file, file_ofs);
c002d205:	83 ec 08             	sub    $0x8,%esp
c002d208:	ff 75 f4             	pushl  -0xc(%ebp)
c002d20b:	ff 75 dc             	pushl  -0x24(%ebp)
c002d20e:	e8 28 37 00 00       	call   c003093b <file_seek>
c002d213:	83 c4 10             	add    $0x10,%esp

      if (file_read (file, &phdr, sizeof phdr) != sizeof phdr)
c002d216:	83 ec 04             	sub    $0x4,%esp
c002d219:	6a 20                	push   $0x20
c002d21b:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
c002d221:	50                   	push   %eax
c002d222:	ff 75 dc             	pushl  -0x24(%ebp)
c002d225:	e8 79 35 00 00       	call   c00307a3 <file_read>
c002d22a:	83 c4 10             	add    $0x10,%esp
c002d22d:	83 f8 20             	cmp    $0x20,%eax
c002d230:	0f 85 48 01 00 00    	jne    c002d37e <load+0x2ad>
        goto done;
      file_ofs += sizeof phdr;
c002d236:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d239:	83 c0 20             	add    $0x20,%eax
c002d23c:	89 45 f4             	mov    %eax,-0xc(%ebp)
      switch (phdr.p_type) 
c002d23f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c002d245:	83 f8 03             	cmp    $0x3,%eax
c002d248:	77 13                	ja     c002d25d <load+0x18c>
c002d24a:	83 f8 02             	cmp    $0x2,%eax
c002d24d:	0f 83 2e 01 00 00    	jae    c002d381 <load+0x2b0>
c002d253:	83 f8 01             	cmp    $0x1,%eax
c002d256:	74 13                	je     c002d26b <load+0x19a>
        case PT_NOTE:
        case PT_PHDR:
        case PT_STACK:
        default:
          /* Ignore this segment. */
          break;
c002d258:	e9 ce 00 00 00       	jmp    c002d32b <load+0x25a>
      switch (phdr.p_type) 
c002d25d:	83 f8 05             	cmp    $0x5,%eax
c002d260:	0f 84 1b 01 00 00    	je     c002d381 <load+0x2b0>
          break;
c002d266:	e9 c0 00 00 00       	jmp    c002d32b <load+0x25a>
        case PT_DYNAMIC:
        case PT_INTERP:
        case PT_SHLIB:
          goto done;
        case PT_LOAD:
          if (validate_segment (&phdr, file)) 
c002d26b:	83 ec 08             	sub    $0x8,%esp
c002d26e:	ff 75 dc             	pushl  -0x24(%ebp)
c002d271:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
c002d277:	50                   	push   %eax
c002d278:	e8 13 01 00 00       	call   c002d390 <validate_segment>
c002d27d:	83 c4 10             	add    $0x10,%esp
c002d280:	84 c0                	test   %al,%al
c002d282:	0f 84 fc 00 00 00    	je     c002d384 <load+0x2b3>
            {
              bool writable = (phdr.p_flags & PF_W) != 0;
c002d288:	8b 45 90             	mov    -0x70(%ebp),%eax
c002d28b:	83 e0 02             	and    $0x2,%eax
c002d28e:	85 c0                	test   %eax,%eax
c002d290:	0f 95 c0             	setne  %al
c002d293:	88 45 db             	mov    %al,-0x25(%ebp)
              uint32_t file_page = phdr.p_offset & ~PGMASK;
c002d296:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c002d29c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d2a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
              uint32_t mem_page = phdr.p_vaddr & ~PGMASK;
c002d2a4:	8b 45 80             	mov    -0x80(%ebp),%eax
c002d2a7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d2ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
              uint32_t page_offset = phdr.p_vaddr & PGMASK;
c002d2af:	8b 45 80             	mov    -0x80(%ebp),%eax
c002d2b2:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d2b7:	89 45 cc             	mov    %eax,-0x34(%ebp)
              uint32_t read_bytes, zero_bytes;
              if (phdr.p_filesz > 0)
c002d2ba:	8b 45 88             	mov    -0x78(%ebp),%eax
c002d2bd:	85 c0                	test   %eax,%eax
c002d2bf:	74 25                	je     c002d2e6 <load+0x215>
                {
                  /* Normal segment.
                     Read initial part from disk and zero the rest. */
                  read_bytes = page_offset + phdr.p_filesz;
c002d2c1:	8b 55 88             	mov    -0x78(%ebp),%edx
c002d2c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002d2c7:	01 d0                	add    %edx,%eax
c002d2c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                  zero_bytes = (ROUND_UP (page_offset + phdr.p_memsz, PGSIZE)
c002d2cc:	8b 55 8c             	mov    -0x74(%ebp),%edx
c002d2cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002d2d2:	01 d0                	add    %edx,%eax
c002d2d4:	05 ff 0f 00 00       	add    $0xfff,%eax
c002d2d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d2de:	2b 45 e8             	sub    -0x18(%ebp),%eax
c002d2e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002d2e4:	eb 1c                	jmp    c002d302 <load+0x231>
                }
              else 
                {
                  /* Entirely zero.
                     Don't read anything from disk. */
                  read_bytes = 0;
c002d2e6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
                  zero_bytes = ROUND_UP (page_offset + phdr.p_memsz, PGSIZE);
c002d2ed:	8b 55 8c             	mov    -0x74(%ebp),%edx
c002d2f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002d2f3:	01 d0                	add    %edx,%eax
c002d2f5:	05 ff 0f 00 00       	add    $0xfff,%eax
c002d2fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d2ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                }
              if (!load_segment (file, file_page, (void *) mem_page,
c002d302:	0f b6 4d db          	movzbl -0x25(%ebp),%ecx
c002d306:	8b 55 d0             	mov    -0x30(%ebp),%edx
c002d309:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002d30c:	83 ec 08             	sub    $0x8,%esp
c002d30f:	51                   	push   %ecx
c002d310:	ff 75 e4             	pushl  -0x1c(%ebp)
c002d313:	ff 75 e8             	pushl  -0x18(%ebp)
c002d316:	52                   	push   %edx
c002d317:	50                   	push   %eax
c002d318:	ff 75 dc             	pushl  -0x24(%ebp)
c002d31b:	e8 4c 01 00 00       	call   c002d46c <load_segment>
c002d320:	83 c4 20             	add    $0x20,%esp
c002d323:	83 f0 01             	xor    $0x1,%eax
c002d326:	84 c0                	test   %al,%al
c002d328:	75 5d                	jne    c002d387 <load+0x2b6>
                                 read_bytes, zero_bytes, writable))
                goto done;
            }
          else
            goto done;
          break;
c002d32a:	90                   	nop
  for (i = 0; i < ehdr.e_phnum; i++) 
c002d32b:	ff 45 ec             	incl   -0x14(%ebp)
c002d32e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c002d331:	0f b7 c0             	movzwl %ax,%eax
c002d334:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002d337:	0f 8f a7 fe ff ff    	jg     c002d1e4 <load+0x113>
        }
    }

  /* Set up stack. */
  if (!setup_stack (esp))
c002d33d:	83 ec 0c             	sub    $0xc,%esp
c002d340:	ff 75 10             	pushl  0x10(%ebp)
c002d343:	e8 d2 03 00 00       	call   c002d71a <setup_stack>
c002d348:	83 c4 10             	add    $0x10,%esp
c002d34b:	83 f0 01             	xor    $0x1,%eax
c002d34e:	84 c0                	test   %al,%al
c002d350:	75 38                	jne    c002d38a <load+0x2b9>
    goto done;

  /* Start address. */
  *eip = (void (*) (void)) ehdr.e_entry;
c002d352:	8b 45 b0             	mov    -0x50(%ebp),%eax
c002d355:	89 c2                	mov    %eax,%edx
c002d357:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d35a:	89 10                	mov    %edx,(%eax)

  // executing file
  file_deny_write(file);
c002d35c:	83 ec 0c             	sub    $0xc,%esp
c002d35f:	ff 75 dc             	pushl  -0x24(%ebp)
c002d362:	e8 ee 34 00 00       	call   c0030855 <file_deny_write>
c002d367:	83 c4 10             	add    $0x10,%esp
  thread_current()->executing_file = file;
c002d36a:	e8 7a 3b ff ff       	call   c0020ee9 <thread_current>
c002d36f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c002d372:	89 50 54             	mov    %edx,0x54(%eax)
  success = true;
c002d375:	c6 45 f3 01          	movb   $0x1,-0xd(%ebp)
c002d379:	eb 10                	jmp    c002d38b <load+0x2ba>
    goto done;
c002d37b:	90                   	nop
c002d37c:	eb 0d                	jmp    c002d38b <load+0x2ba>
        goto done;
c002d37e:	90                   	nop
c002d37f:	eb 0a                	jmp    c002d38b <load+0x2ba>
          goto done;
c002d381:	90                   	nop
c002d382:	eb 07                	jmp    c002d38b <load+0x2ba>
            goto done;
c002d384:	90                   	nop
c002d385:	eb 04                	jmp    c002d38b <load+0x2ba>
                goto done;
c002d387:	90                   	nop
c002d388:	eb 01                	jmp    c002d38b <load+0x2ba>
    goto done;
c002d38a:	90                   	nop

done:
  /* We arrive here whether the load is successful or not. */
  // if (!success)
  //   file_close (file);
  return success;
c002d38b:	8a 45 f3             	mov    -0xd(%ebp),%al
}
c002d38e:	c9                   	leave  
c002d38f:	c3                   	ret    

c002d390 <validate_segment>:

/* Checks whether PHDR describes a valid, loadable segment in
   FILE and returns true if so, false otherwise. */
static bool
validate_segment (const struct Elf32_Phdr *phdr, struct file *file) 
{
c002d390:	55                   	push   %ebp
c002d391:	89 e5                	mov    %esp,%ebp
c002d393:	53                   	push   %ebx
c002d394:	83 ec 04             	sub    $0x4,%esp
  /* p_offset and p_vaddr must have the same page offset. */
  if ((phdr->p_offset & PGMASK) != (phdr->p_vaddr & PGMASK)) 
c002d397:	8b 45 08             	mov    0x8(%ebp),%eax
c002d39a:	8b 50 04             	mov    0x4(%eax),%edx
c002d39d:	8b 45 08             	mov    0x8(%ebp),%eax
c002d3a0:	8b 40 08             	mov    0x8(%eax),%eax
c002d3a3:	31 d0                	xor    %edx,%eax
c002d3a5:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d3aa:	85 c0                	test   %eax,%eax
c002d3ac:	74 07                	je     c002d3b5 <validate_segment+0x25>
    return false; 
c002d3ae:	b0 00                	mov    $0x0,%al
c002d3b0:	e9 b2 00 00 00       	jmp    c002d467 <validate_segment+0xd7>

  /* p_offset must point within FILE. */
  if (phdr->p_offset > (Elf32_Off) file_length (file)) 
c002d3b5:	8b 45 08             	mov    0x8(%ebp),%eax
c002d3b8:	8b 58 04             	mov    0x4(%eax),%ebx
c002d3bb:	83 ec 0c             	sub    $0xc,%esp
c002d3be:	ff 75 0c             	pushl  0xc(%ebp)
c002d3c1:	e8 35 35 00 00       	call   c00308fb <file_length>
c002d3c6:	83 c4 10             	add    $0x10,%esp
c002d3c9:	39 c3                	cmp    %eax,%ebx
c002d3cb:	76 07                	jbe    c002d3d4 <validate_segment+0x44>
    return false;
c002d3cd:	b0 00                	mov    $0x0,%al
c002d3cf:	e9 93 00 00 00       	jmp    c002d467 <validate_segment+0xd7>

  /* p_memsz must be at least as big as p_filesz. */
  if (phdr->p_memsz < phdr->p_filesz) 
c002d3d4:	8b 45 08             	mov    0x8(%ebp),%eax
c002d3d7:	8b 50 14             	mov    0x14(%eax),%edx
c002d3da:	8b 45 08             	mov    0x8(%ebp),%eax
c002d3dd:	8b 40 10             	mov    0x10(%eax),%eax
c002d3e0:	39 c2                	cmp    %eax,%edx
c002d3e2:	73 04                	jae    c002d3e8 <validate_segment+0x58>
    return false; 
c002d3e4:	b0 00                	mov    $0x0,%al
c002d3e6:	eb 7f                	jmp    c002d467 <validate_segment+0xd7>

  /* The segment must not be empty. */
  if (phdr->p_memsz == 0)
c002d3e8:	8b 45 08             	mov    0x8(%ebp),%eax
c002d3eb:	8b 40 14             	mov    0x14(%eax),%eax
c002d3ee:	85 c0                	test   %eax,%eax
c002d3f0:	75 04                	jne    c002d3f6 <validate_segment+0x66>
    return false;
c002d3f2:	b0 00                	mov    $0x0,%al
c002d3f4:	eb 71                	jmp    c002d467 <validate_segment+0xd7>
  
  /* The virtual memory region must both start and end within the
     user address space range. */
  if (!is_user_vaddr ((void *) phdr->p_vaddr))
c002d3f6:	8b 45 08             	mov    0x8(%ebp),%eax
c002d3f9:	8b 40 08             	mov    0x8(%eax),%eax
c002d3fc:	83 ec 0c             	sub    $0xc,%esp
c002d3ff:	50                   	push   %eax
c002d400:	e8 b9 f5 ff ff       	call   c002c9be <is_user_vaddr>
c002d405:	83 c4 10             	add    $0x10,%esp
c002d408:	83 f0 01             	xor    $0x1,%eax
c002d40b:	84 c0                	test   %al,%al
c002d40d:	74 04                	je     c002d413 <validate_segment+0x83>
    return false;
c002d40f:	b0 00                	mov    $0x0,%al
c002d411:	eb 54                	jmp    c002d467 <validate_segment+0xd7>
  if (!is_user_vaddr ((void *) (phdr->p_vaddr + phdr->p_memsz)))
c002d413:	8b 45 08             	mov    0x8(%ebp),%eax
c002d416:	8b 50 08             	mov    0x8(%eax),%edx
c002d419:	8b 45 08             	mov    0x8(%ebp),%eax
c002d41c:	8b 40 14             	mov    0x14(%eax),%eax
c002d41f:	01 d0                	add    %edx,%eax
c002d421:	83 ec 0c             	sub    $0xc,%esp
c002d424:	50                   	push   %eax
c002d425:	e8 94 f5 ff ff       	call   c002c9be <is_user_vaddr>
c002d42a:	83 c4 10             	add    $0x10,%esp
c002d42d:	83 f0 01             	xor    $0x1,%eax
c002d430:	84 c0                	test   %al,%al
c002d432:	74 04                	je     c002d438 <validate_segment+0xa8>
    return false;
c002d434:	b0 00                	mov    $0x0,%al
c002d436:	eb 2f                	jmp    c002d467 <validate_segment+0xd7>

  /* The region cannot "wrap around" across the kernel virtual
     address space. */
  if (phdr->p_vaddr + phdr->p_memsz < phdr->p_vaddr)
c002d438:	8b 45 08             	mov    0x8(%ebp),%eax
c002d43b:	8b 50 08             	mov    0x8(%eax),%edx
c002d43e:	8b 45 08             	mov    0x8(%ebp),%eax
c002d441:	8b 40 14             	mov    0x14(%eax),%eax
c002d444:	01 c2                	add    %eax,%edx
c002d446:	8b 45 08             	mov    0x8(%ebp),%eax
c002d449:	8b 40 08             	mov    0x8(%eax),%eax
c002d44c:	39 c2                	cmp    %eax,%edx
c002d44e:	73 04                	jae    c002d454 <validate_segment+0xc4>
    return false;
c002d450:	b0 00                	mov    $0x0,%al
c002d452:	eb 13                	jmp    c002d467 <validate_segment+0xd7>
  /* Disallow mapping page 0.
     Not only is it a bad idea to map page 0, but if we allowed
     it then user code that passed a null pointer to system calls
     could quite likely panic the kernel by way of null pointer
     assertions in memcpy(), etc. */
  if (phdr->p_vaddr < PGSIZE)
c002d454:	8b 45 08             	mov    0x8(%ebp),%eax
c002d457:	8b 40 08             	mov    0x8(%eax),%eax
c002d45a:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c002d45f:	77 04                	ja     c002d465 <validate_segment+0xd5>
    return false;
c002d461:	b0 00                	mov    $0x0,%al
c002d463:	eb 02                	jmp    c002d467 <validate_segment+0xd7>

  /* It's okay. */
  return true;
c002d465:	b0 01                	mov    $0x1,%al
}
c002d467:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002d46a:	c9                   	leave  
c002d46b:	c3                   	ret    

c002d46c <load_segment>:
   Return true if successful, false if a memory allocation error
   or disk read error occurs. */
static bool
load_segment (struct file *file, off_t ofs, uint8_t *upage,
              uint32_t read_bytes, uint32_t zero_bytes, bool writable) 
{
c002d46c:	55                   	push   %ebp
c002d46d:	89 e5                	mov    %esp,%ebp
c002d46f:	83 ec 28             	sub    $0x28,%esp
c002d472:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002d475:	88 45 e4             	mov    %al,-0x1c(%ebp)
  ASSERT ((read_bytes + zero_bytes) % PGSIZE == 0);
c002d478:	8b 55 14             	mov    0x14(%ebp),%edx
c002d47b:	8b 45 18             	mov    0x18(%ebp),%eax
c002d47e:	01 d0                	add    %edx,%eax
c002d480:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d485:	85 c0                	test   %eax,%eax
c002d487:	74 21                	je     c002d4aa <load_segment+0x3e>
c002d489:	83 ec 0c             	sub    $0xc,%esp
c002d48c:	68 68 6e 03 c0       	push   $0xc0036e68
c002d491:	68 f0 6d 03 c0       	push   $0xc0036df0
c002d496:	68 20 6f 03 c0       	push   $0xc0036f20
c002d49b:	68 38 02 00 00       	push   $0x238
c002d4a0:	68 c2 6d 03 c0       	push   $0xc0036dc2
c002d4a5:	e8 e7 d0 ff ff       	call   c002a591 <debug_panic>
  ASSERT (pg_ofs (upage) == 0);
c002d4aa:	83 ec 0c             	sub    $0xc,%esp
c002d4ad:	ff 75 10             	pushl  0x10(%ebp)
c002d4b0:	e8 fc f4 ff ff       	call   c002c9b1 <pg_ofs>
c002d4b5:	83 c4 10             	add    $0x10,%esp
c002d4b8:	85 c0                	test   %eax,%eax
c002d4ba:	74 21                	je     c002d4dd <load_segment+0x71>
c002d4bc:	83 ec 0c             	sub    $0xc,%esp
c002d4bf:	68 90 6e 03 c0       	push   $0xc0036e90
c002d4c4:	68 f0 6d 03 c0       	push   $0xc0036df0
c002d4c9:	68 20 6f 03 c0       	push   $0xc0036f20
c002d4ce:	68 39 02 00 00       	push   $0x239
c002d4d3:	68 c2 6d 03 c0       	push   $0xc0036dc2
c002d4d8:	e8 b4 d0 ff ff       	call   c002a591 <debug_panic>
  ASSERT (ofs % PGSIZE == 0);
c002d4dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d4e0:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d4e5:	85 c0                	test   %eax,%eax
c002d4e7:	74 21                	je     c002d50a <load_segment+0x9e>
c002d4e9:	83 ec 0c             	sub    $0xc,%esp
c002d4ec:	68 a4 6e 03 c0       	push   $0xc0036ea4
c002d4f1:	68 f0 6d 03 c0       	push   $0xc0036df0
c002d4f6:	68 20 6f 03 c0       	push   $0xc0036f20
c002d4fb:	68 3a 02 00 00       	push   $0x23a
c002d500:	68 c2 6d 03 c0       	push   $0xc0036dc2
c002d505:	e8 87 d0 ff ff       	call   c002a591 <debug_panic>

  file_seek (file, ofs);
c002d50a:	83 ec 08             	sub    $0x8,%esp
c002d50d:	ff 75 0c             	pushl  0xc(%ebp)
c002d510:	ff 75 08             	pushl  0x8(%ebp)
c002d513:	e8 23 34 00 00       	call   c003093b <file_seek>
c002d518:	83 c4 10             	add    $0x10,%esp
  while (read_bytes > 0 || zero_bytes > 0) 
c002d51b:	e9 aa 00 00 00       	jmp    c002d5ca <load_segment+0x15e>
    {
      /* Calculate how to fill this page.
         We will read PAGE_READ_BYTES bytes from FILE
         and zero the final PAGE_ZERO_BYTES bytes. */
      size_t page_read_bytes = read_bytes < PGSIZE ? read_bytes : PGSIZE;
c002d520:	8b 45 14             	mov    0x14(%ebp),%eax
c002d523:	3d 00 10 00 00       	cmp    $0x1000,%eax
c002d528:	76 05                	jbe    c002d52f <load_segment+0xc3>
c002d52a:	b8 00 10 00 00       	mov    $0x1000,%eax
c002d52f:	89 45 f4             	mov    %eax,-0xc(%ebp)
      size_t page_zero_bytes = PGSIZE - page_read_bytes;
c002d532:	b8 00 10 00 00       	mov    $0x1000,%eax
c002d537:	2b 45 f4             	sub    -0xc(%ebp),%eax
c002d53a:	89 45 f0             	mov    %eax,-0x10(%ebp)

#ifdef VM
      struct thread *cur_thread = thread_current();
c002d53d:	e8 a7 39 ff ff       	call   c0020ee9 <thread_current>
c002d542:	89 45 ec             	mov    %eax,-0x14(%ebp)
      ASSERT (pagedir_get_page(cur_thread->pagedir, upage) == NULL);
c002d545:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002d548:	8b 40 30             	mov    0x30(%eax),%eax
c002d54b:	83 ec 08             	sub    $0x8,%esp
c002d54e:	ff 75 10             	pushl  0x10(%ebp)
c002d551:	50                   	push   %eax
c002d552:	e8 52 08 00 00       	call   c002dda9 <pagedir_get_page>
c002d557:	83 c4 10             	add    $0x10,%esp
c002d55a:	85 c0                	test   %eax,%eax
c002d55c:	74 21                	je     c002d57f <load_segment+0x113>
c002d55e:	83 ec 0c             	sub    $0xc,%esp
c002d561:	68 b8 6e 03 c0       	push   $0xc0036eb8
c002d566:	68 f0 6d 03 c0       	push   $0xc0036df0
c002d56b:	68 20 6f 03 c0       	push   $0xc0036f20
c002d570:	68 47 02 00 00       	push   $0x247
c002d575:	68 c2 6d 03 c0       	push   $0xc0036dc2
c002d57a:	e8 12 d0 ff ff       	call   c002a591 <debug_panic>

      if(!vm_supt_install_filesys(cur_thread->supt, upage, file, ofs, page_read_bytes, page_zero_bytes, writable))
c002d57f:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c002d583:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002d586:	8b 40 64             	mov    0x64(%eax),%eax
c002d589:	83 ec 04             	sub    $0x4,%esp
c002d58c:	52                   	push   %edx
c002d58d:	ff 75 f0             	pushl  -0x10(%ebp)
c002d590:	ff 75 f4             	pushl  -0xc(%ebp)
c002d593:	ff 75 0c             	pushl  0xc(%ebp)
c002d596:	ff 75 08             	pushl  0x8(%ebp)
c002d599:	ff 75 10             	pushl  0x10(%ebp)
c002d59c:	50                   	push   %eax
c002d59d:	e8 a2 5e 00 00       	call   c0033444 <vm_supt_install_filesys>
c002d5a2:	83 c4 20             	add    $0x20,%esp
c002d5a5:	83 f0 01             	xor    $0x1,%eax
c002d5a8:	84 c0                	test   %al,%al
c002d5aa:	74 04                	je     c002d5b0 <load_segment+0x144>
          return false;
c002d5ac:	b0 00                	mov    $0x0,%al
c002d5ae:	eb 30                	jmp    c002d5e0 <load_segment+0x174>
          palloc_free_page (kpage);
          return false; 
        }
#endif
      /* Advance. */
      read_bytes -= page_read_bytes;
c002d5b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d5b3:	29 45 14             	sub    %eax,0x14(%ebp)
      zero_bytes -= page_zero_bytes;
c002d5b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002d5b9:	29 45 18             	sub    %eax,0x18(%ebp)
      upage += PGSIZE;
c002d5bc:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
#ifdef VM
      ofs += PGSIZE;
c002d5c3:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
  while (read_bytes > 0 || zero_bytes > 0) 
c002d5ca:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c002d5ce:	0f 85 4c ff ff ff    	jne    c002d520 <load_segment+0xb4>
c002d5d4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c002d5d8:	0f 85 42 ff ff ff    	jne    c002d520 <load_segment+0xb4>
#endif
    }
  return true;
c002d5de:	b0 01                	mov    $0x1,%al
}
c002d5e0:	c9                   	leave  
c002d5e1:	c3                   	ret    

c002d5e2 <push_args>:

static 
void push_args(void** esp, const int argc, const char *argv[]) {
c002d5e2:	55                   	push   %ebp
c002d5e3:	89 e5                	mov    %esp,%ebp
c002d5e5:	81 ec 18 01 00 00    	sub    $0x118,%esp
  // highlight: Do the argument setup described in 4.5.1, 
  //            push arg string, split arg , push arg pointers, fake return address pointer
  //      note: the stack should be pushed from top to bottom because of the layout
  // push tokens from back and get pointers
  uint32_t *argv_ptrs[64];
  int i = 0, strlength = 0;
c002d5eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002d5f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  for (i = 0; i < argc; i++) {
c002d5f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002d600:	eb 6b                	jmp    c002d66d <push_args+0x8b>
    strlength = strlen(argv[i]) + 1;
c002d602:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d605:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002d60c:	8b 45 10             	mov    0x10(%ebp),%eax
c002d60f:	01 d0                	add    %edx,%eax
c002d611:	8b 00                	mov    (%eax),%eax
c002d613:	83 ec 0c             	sub    $0xc,%esp
c002d616:	50                   	push   %eax
c002d617:	e8 94 c2 ff ff       	call   c00298b0 <strlen>
c002d61c:	83 c4 10             	add    $0x10,%esp
c002d61f:	40                   	inc    %eax
c002d620:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *esp -= strlength;
c002d623:	8b 45 08             	mov    0x8(%ebp),%eax
c002d626:	8b 00                	mov    (%eax),%eax
c002d628:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002d62b:	f7 da                	neg    %edx
c002d62d:	01 c2                	add    %eax,%edx
c002d62f:	8b 45 08             	mov    0x8(%ebp),%eax
c002d632:	89 10                	mov    %edx,(%eax)
    memcpy(*esp, argv[i], strlength);
c002d634:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c002d637:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d63a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002d641:	8b 45 10             	mov    0x10(%ebp),%eax
c002d644:	01 d0                	add    %edx,%eax
c002d646:	8b 10                	mov    (%eax),%edx
c002d648:	8b 45 08             	mov    0x8(%ebp),%eax
c002d64b:	8b 00                	mov    (%eax),%eax
c002d64d:	83 ec 04             	sub    $0x4,%esp
c002d650:	51                   	push   %ecx
c002d651:	52                   	push   %edx
c002d652:	50                   	push   %eax
c002d653:	e8 f9 bb ff ff       	call   c0029251 <memcpy>
c002d658:	83 c4 10             	add    $0x10,%esp
    argv_ptrs[i] = *esp;
c002d65b:	8b 45 08             	mov    0x8(%ebp),%eax
c002d65e:	8b 10                	mov    (%eax),%edx
c002d660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d663:	89 94 85 f0 fe ff ff 	mov    %edx,-0x110(%ebp,%eax,4)
  for (i = 0; i < argc; i++) {
c002d66a:	ff 45 f4             	incl   -0xc(%ebp)
c002d66d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d670:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002d673:	7c 8d                	jl     c002d602 <push_args+0x20>
  }
  // align
  //*esp -= 4 - (strlength % 4);
  *esp=(void*)((unsigned int)(*esp)&0xfffffffc);
c002d675:	8b 45 08             	mov    0x8(%ebp),%eax
c002d678:	8b 00                	mov    (%eax),%eax
c002d67a:	83 e0 fc             	and    $0xfffffffc,%eax
c002d67d:	89 c2                	mov    %eax,%edx
c002d67f:	8b 45 08             	mov    0x8(%ebp),%eax
c002d682:	89 10                	mov    %edx,(%eax)
  // push pointers from back
  // push NULL pointer for argv[argc]
  *esp -= 4;
c002d684:	8b 45 08             	mov    0x8(%ebp),%eax
c002d687:	8b 00                	mov    (%eax),%eax
c002d689:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d68c:	8b 45 08             	mov    0x8(%ebp),%eax
c002d68f:	89 10                	mov    %edx,(%eax)
  *(uint32_t *) *esp = (uint32_t) NULL;
c002d691:	8b 45 08             	mov    0x8(%ebp),%eax
c002d694:	8b 00                	mov    (%eax),%eax
c002d696:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  // push argvs
  for (i = argc - 1; i >= 0; i--) {
c002d69c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d69f:	48                   	dec    %eax
c002d6a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002d6a3:	eb 21                	jmp    c002d6c6 <push_args+0xe4>
    *esp -= 4;
c002d6a5:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6a8:	8b 00                	mov    (%eax),%eax
c002d6aa:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d6ad:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6b0:	89 10                	mov    %edx,(%eax)
    *(uint32_t *) *esp = (uint32_t *) argv_ptrs[i];
c002d6b2:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6b5:	8b 00                	mov    (%eax),%eax
c002d6b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002d6ba:	8b 94 95 f0 fe ff ff 	mov    -0x110(%ebp,%edx,4),%edx
c002d6c1:	89 10                	mov    %edx,(%eax)
  for (i = argc - 1; i >= 0; i--) {
c002d6c3:	ff 4d f4             	decl   -0xc(%ebp)
c002d6c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002d6ca:	79 d9                	jns    c002d6a5 <push_args+0xc3>
  }
  // push argv
  // * (uint32_t *) (*esp - 4) = *(uint32_t *) esp;
  // *esp -= 4;
  *esp -= 4;
c002d6cc:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6cf:	8b 00                	mov    (%eax),%eax
c002d6d1:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d6d4:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6d7:	89 10                	mov    %edx,(%eax)
  *((void**) *esp) = (*esp + 4);
c002d6d9:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6dc:	8b 00                	mov    (%eax),%eax
c002d6de:	8b 55 08             	mov    0x8(%ebp),%edx
c002d6e1:	8b 12                	mov    (%edx),%edx
c002d6e3:	83 c2 04             	add    $0x4,%edx
c002d6e6:	89 10                	mov    %edx,(%eax)
  
  // push argc
  *esp -= 4;
c002d6e8:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6eb:	8b 00                	mov    (%eax),%eax
c002d6ed:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d6f0:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6f3:	89 10                	mov    %edx,(%eax)
  * (int *) *esp = argc;
c002d6f5:	8b 45 08             	mov    0x8(%ebp),%eax
c002d6f8:	8b 00                	mov    (%eax),%eax
c002d6fa:	8b 55 0c             	mov    0xc(%ebp),%edx
c002d6fd:	89 10                	mov    %edx,(%eax)
  // push return addr
  *esp -= 4;
c002d6ff:	8b 45 08             	mov    0x8(%ebp),%eax
c002d702:	8b 00                	mov    (%eax),%eax
c002d704:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d707:	8b 45 08             	mov    0x8(%ebp),%eax
c002d70a:	89 10                	mov    %edx,(%eax)
  *((uint32_t*) *esp) = (uint32_t) NULL;
c002d70c:	8b 45 08             	mov    0x8(%ebp),%eax
c002d70f:	8b 00                	mov    (%eax),%eax
c002d711:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c002d717:	90                   	nop
c002d718:	c9                   	leave  
c002d719:	c3                   	ret    

c002d71a <setup_stack>:

/* Create a minimal stack by mapping a zeroed page at the top of
   user virtual memory. */
static bool
setup_stack (void **esp) 
{
c002d71a:	55                   	push   %ebp
c002d71b:	89 e5                	mov    %esp,%ebp
c002d71d:	83 ec 18             	sub    $0x18,%esp
  uint8_t *kpage;
  bool success = false;
c002d720:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

  kpage = vm_frame_allocate (PAL_USER | PAL_ZERO, PHYS_BASE-PGSIZE);  // get the page for stack
c002d724:	83 ec 08             	sub    $0x8,%esp
c002d727:	68 00 f0 ff bf       	push   $0xbffff000
c002d72c:	6a 06                	push   $0x6
c002d72e:	e8 06 55 00 00       	call   c0032c39 <vm_frame_allocate>
c002d733:	83 c4 10             	add    $0x10,%esp
c002d736:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (kpage != NULL) 
c002d739:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002d73d:	74 37                	je     c002d776 <setup_stack+0x5c>
    {
      success = install_page (((uint8_t *) PHYS_BASE) - PGSIZE, kpage, true); // map the page
c002d73f:	83 ec 04             	sub    $0x4,%esp
c002d742:	6a 01                	push   $0x1
c002d744:	ff 75 f0             	pushl  -0x10(%ebp)
c002d747:	68 00 f0 ff bf       	push   $0xbffff000
c002d74c:	e8 2a 00 00 00       	call   c002d77b <install_page>
c002d751:	83 c4 10             	add    $0x10,%esp
c002d754:	88 45 f7             	mov    %al,-0x9(%ebp)
      if (success) {
c002d757:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c002d75b:	74 0b                	je     c002d768 <setup_stack+0x4e>
        *esp = PHYS_BASE;     // stack top
c002d75d:	8b 45 08             	mov    0x8(%ebp),%eax
c002d760:	c7 00 00 00 00 c0    	movl   $0xc0000000,(%eax)
c002d766:	eb 0e                	jmp    c002d776 <setup_stack+0x5c>
      }
      else
        palloc_free_page (kpage);
c002d768:	83 ec 0c             	sub    $0xc,%esp
c002d76b:	ff 75 f0             	pushl  -0x10(%ebp)
c002d76e:	e8 ed 67 ff ff       	call   c0023f60 <palloc_free_page>
c002d773:	83 c4 10             	add    $0x10,%esp
    }
  return success;
c002d776:	8a 45 f7             	mov    -0x9(%ebp),%al
}
c002d779:	c9                   	leave  
c002d77a:	c3                   	ret    

c002d77b <install_page>:
   with palloc_get_page().
   Returns true on success, false if UPAGE is already mapped or
   if memory allocation fails. */
static bool
install_page (void *upage, void *kpage, bool writable)
{
c002d77b:	55                   	push   %ebp
c002d77c:	89 e5                	mov    %esp,%ebp
c002d77e:	83 ec 28             	sub    $0x28,%esp
c002d781:	8b 45 10             	mov    0x10(%ebp),%eax
c002d784:	88 45 e4             	mov    %al,-0x1c(%ebp)
  struct thread *t = thread_current ();
c002d787:	e8 5d 37 ff ff       	call   c0020ee9 <thread_current>
c002d78c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bool success = (pagedir_get_page (t->pagedir, upage) == NULL);
c002d78f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d792:	8b 40 30             	mov    0x30(%eax),%eax
c002d795:	83 ec 08             	sub    $0x8,%esp
c002d798:	ff 75 08             	pushl  0x8(%ebp)
c002d79b:	50                   	push   %eax
c002d79c:	e8 08 06 00 00       	call   c002dda9 <pagedir_get_page>
c002d7a1:	83 c4 10             	add    $0x10,%esp
c002d7a4:	85 c0                	test   %eax,%eax
c002d7a6:	0f 94 c0             	sete   %al
c002d7a9:	88 45 f3             	mov    %al,-0xd(%ebp)
  success = success && (pagedir_set_page (t->pagedir, upage, kpage, writable));
c002d7ac:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c002d7b0:	74 25                	je     c002d7d7 <install_page+0x5c>
c002d7b2:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c002d7b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d7b9:	8b 40 30             	mov    0x30(%eax),%eax
c002d7bc:	52                   	push   %edx
c002d7bd:	ff 75 0c             	pushl  0xc(%ebp)
c002d7c0:	ff 75 08             	pushl  0x8(%ebp)
c002d7c3:	50                   	push   %eax
c002d7c4:	e8 77 04 00 00       	call   c002dc40 <pagedir_set_page>
c002d7c9:	83 c4 10             	add    $0x10,%esp
c002d7cc:	84 c0                	test   %al,%al
c002d7ce:	74 07                	je     c002d7d7 <install_page+0x5c>
c002d7d0:	b8 01 00 00 00       	mov    $0x1,%eax
c002d7d5:	eb 05                	jmp    c002d7dc <install_page+0x61>
c002d7d7:	b8 00 00 00 00       	mov    $0x0,%eax
c002d7dc:	88 45 f3             	mov    %al,-0xd(%ebp)
c002d7df:	80 65 f3 01          	andb   $0x1,-0xd(%ebp)
  /* Verify that there's not already a page at that virtual
     address, then map our page there. */
#ifdef VM
  success = success && vm_supt_install_frame(t->supt, upage, kpage);
c002d7e3:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c002d7e7:	74 23                	je     c002d80c <install_page+0x91>
c002d7e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d7ec:	8b 40 64             	mov    0x64(%eax),%eax
c002d7ef:	83 ec 04             	sub    $0x4,%esp
c002d7f2:	ff 75 0c             	pushl  0xc(%ebp)
c002d7f5:	ff 75 08             	pushl  0x8(%ebp)
c002d7f8:	50                   	push   %eax
c002d7f9:	e8 18 5b 00 00       	call   c0033316 <vm_supt_install_frame>
c002d7fe:	83 c4 10             	add    $0x10,%esp
c002d801:	84 c0                	test   %al,%al
c002d803:	74 07                	je     c002d80c <install_page+0x91>
c002d805:	b8 01 00 00 00       	mov    $0x1,%eax
c002d80a:	eb 05                	jmp    c002d811 <install_page+0x96>
c002d80c:	b8 00 00 00 00       	mov    $0x0,%eax
c002d811:	88 45 f3             	mov    %al,-0xd(%ebp)
c002d814:	80 65 f3 01          	andb   $0x1,-0xd(%ebp)
  if(success) vm_frame_unpin(kpage);
c002d818:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c002d81c:	74 0e                	je     c002d82c <install_page+0xb1>
c002d81e:	83 ec 0c             	sub    $0xc,%esp
c002d821:	ff 75 0c             	pushl  0xc(%ebp)
c002d824:	e8 87 57 00 00       	call   c0032fb0 <vm_frame_unpin>
c002d829:	83 c4 10             	add    $0x10,%esp
#endif
  return success;
c002d82c:	8a 45 f3             	mov    -0xd(%ebp),%al
c002d82f:	c9                   	leave  
c002d830:	c3                   	ret    

c002d831 <pg_ofs>:
c002d831:	55                   	push   %ebp
c002d832:	89 e5                	mov    %esp,%ebp
c002d834:	8b 45 08             	mov    0x8(%ebp),%eax
c002d837:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d83c:	5d                   	pop    %ebp
c002d83d:	c3                   	ret    

c002d83e <is_user_vaddr>:
c002d83e:	55                   	push   %ebp
c002d83f:	89 e5                	mov    %esp,%ebp
c002d841:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002d848:	0f 96 c0             	setbe  %al
c002d84b:	5d                   	pop    %ebp
c002d84c:	c3                   	ret    

c002d84d <is_kernel_vaddr>:
c002d84d:	55                   	push   %ebp
c002d84e:	89 e5                	mov    %esp,%ebp
c002d850:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002d857:	0f 97 c0             	seta   %al
c002d85a:	5d                   	pop    %ebp
c002d85b:	c3                   	ret    

c002d85c <ptov>:
c002d85c:	55                   	push   %ebp
c002d85d:	89 e5                	mov    %esp,%ebp
c002d85f:	83 ec 08             	sub    $0x8,%esp
c002d862:	8b 45 08             	mov    0x8(%ebp),%eax
c002d865:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c002d86a:	76 1e                	jbe    c002d88a <ptov+0x2e>
c002d86c:	83 ec 0c             	sub    $0xc,%esp
c002d86f:	68 30 6f 03 c0       	push   $0xc0036f30
c002d874:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002d879:	68 dc 70 03 c0       	push   $0xc00370dc
c002d87e:	6a 4a                	push   $0x4a
c002d880:	68 62 6f 03 c0       	push   $0xc0036f62
c002d885:	e8 07 cd ff ff       	call   c002a591 <debug_panic>
c002d88a:	8b 45 08             	mov    0x8(%ebp),%eax
c002d88d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c002d892:	c9                   	leave  
c002d893:	c3                   	ret    

c002d894 <vtop>:
c002d894:	55                   	push   %ebp
c002d895:	89 e5                	mov    %esp,%ebp
c002d897:	83 ec 08             	sub    $0x8,%esp
c002d89a:	ff 75 08             	pushl  0x8(%ebp)
c002d89d:	e8 ab ff ff ff       	call   c002d84d <is_kernel_vaddr>
c002d8a2:	83 c4 04             	add    $0x4,%esp
c002d8a5:	84 c0                	test   %al,%al
c002d8a7:	75 1e                	jne    c002d8c7 <vtop+0x33>
c002d8a9:	83 ec 0c             	sub    $0xc,%esp
c002d8ac:	68 78 6f 03 c0       	push   $0xc0036f78
c002d8b1:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002d8b6:	68 fc 70 03 c0       	push   $0xc00370fc
c002d8bb:	6a 54                	push   $0x54
c002d8bd:	68 62 6f 03 c0       	push   $0xc0036f62
c002d8c2:	e8 ca cc ff ff       	call   c002a591 <debug_panic>
c002d8c7:	8b 45 08             	mov    0x8(%ebp),%eax
c002d8ca:	05 00 00 00 40       	add    $0x40000000,%eax
c002d8cf:	c9                   	leave  
c002d8d0:	c3                   	ret    

c002d8d1 <pt_no>:
c002d8d1:	55                   	push   %ebp
c002d8d2:	89 e5                	mov    %esp,%ebp
c002d8d4:	8b 45 08             	mov    0x8(%ebp),%eax
c002d8d7:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c002d8dc:	c1 e8 0c             	shr    $0xc,%eax
c002d8df:	5d                   	pop    %ebp
c002d8e0:	c3                   	ret    

c002d8e1 <pd_no>:
c002d8e1:	55                   	push   %ebp
c002d8e2:	89 e5                	mov    %esp,%ebp
c002d8e4:	8b 45 08             	mov    0x8(%ebp),%eax
c002d8e7:	c1 e8 16             	shr    $0x16,%eax
c002d8ea:	5d                   	pop    %ebp
c002d8eb:	c3                   	ret    

c002d8ec <pde_create>:
c002d8ec:	55                   	push   %ebp
c002d8ed:	89 e5                	mov    %esp,%ebp
c002d8ef:	83 ec 08             	sub    $0x8,%esp
c002d8f2:	ff 75 08             	pushl  0x8(%ebp)
c002d8f5:	e8 37 ff ff ff       	call   c002d831 <pg_ofs>
c002d8fa:	83 c4 04             	add    $0x4,%esp
c002d8fd:	85 c0                	test   %eax,%eax
c002d8ff:	74 1e                	je     c002d91f <pde_create+0x33>
c002d901:	83 ec 0c             	sub    $0xc,%esp
c002d904:	68 90 6f 03 c0       	push   $0xc0036f90
c002d909:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002d90e:	68 f0 70 03 c0       	push   $0xc00370f0
c002d913:	6a 48                	push   $0x48
c002d915:	68 a1 6f 03 c0       	push   $0xc0036fa1
c002d91a:	e8 72 cc ff ff       	call   c002a591 <debug_panic>
c002d91f:	83 ec 0c             	sub    $0xc,%esp
c002d922:	ff 75 08             	pushl  0x8(%ebp)
c002d925:	e8 6a ff ff ff       	call   c002d894 <vtop>
c002d92a:	83 c4 10             	add    $0x10,%esp
c002d92d:	83 c8 07             	or     $0x7,%eax
c002d930:	c9                   	leave  
c002d931:	c3                   	ret    

c002d932 <pde_get_pt>:
c002d932:	55                   	push   %ebp
c002d933:	89 e5                	mov    %esp,%ebp
c002d935:	83 ec 08             	sub    $0x8,%esp
c002d938:	8b 45 08             	mov    0x8(%ebp),%eax
c002d93b:	83 e0 01             	and    $0x1,%eax
c002d93e:	85 c0                	test   %eax,%eax
c002d940:	75 1e                	jne    c002d960 <pde_get_pt+0x2e>
c002d942:	83 ec 0c             	sub    $0xc,%esp
c002d945:	68 b5 6f 03 c0       	push   $0xc0036fb5
c002d94a:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002d94f:	68 d0 70 03 c0       	push   $0xc00370d0
c002d954:	6a 4f                	push   $0x4f
c002d956:	68 a1 6f 03 c0       	push   $0xc0036fa1
c002d95b:	e8 31 cc ff ff       	call   c002a591 <debug_panic>
c002d960:	8b 45 08             	mov    0x8(%ebp),%eax
c002d963:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d968:	83 ec 0c             	sub    $0xc,%esp
c002d96b:	50                   	push   %eax
c002d96c:	e8 eb fe ff ff       	call   c002d85c <ptov>
c002d971:	83 c4 10             	add    $0x10,%esp
c002d974:	c9                   	leave  
c002d975:	c3                   	ret    

c002d976 <pte_create_kernel>:
c002d976:	55                   	push   %ebp
c002d977:	89 e5                	mov    %esp,%ebp
c002d979:	83 ec 18             	sub    $0x18,%esp
c002d97c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d97f:	88 45 f4             	mov    %al,-0xc(%ebp)
c002d982:	ff 75 08             	pushl  0x8(%ebp)
c002d985:	e8 a7 fe ff ff       	call   c002d831 <pg_ofs>
c002d98a:	83 c4 04             	add    $0x4,%esp
c002d98d:	85 c0                	test   %eax,%eax
c002d98f:	74 1e                	je     c002d9af <pte_create_kernel+0x39>
c002d991:	83 ec 0c             	sub    $0xc,%esp
c002d994:	68 c1 6f 03 c0       	push   $0xc0036fc1
c002d999:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002d99e:	68 18 71 03 c0       	push   $0xc0037118
c002d9a3:	6a 58                	push   $0x58
c002d9a5:	68 a1 6f 03 c0       	push   $0xc0036fa1
c002d9aa:	e8 e2 cb ff ff       	call   c002a591 <debug_panic>
c002d9af:	83 ec 0c             	sub    $0xc,%esp
c002d9b2:	ff 75 08             	pushl  0x8(%ebp)
c002d9b5:	e8 da fe ff ff       	call   c002d894 <vtop>
c002d9ba:	83 c4 10             	add    $0x10,%esp
c002d9bd:	89 c2                	mov    %eax,%edx
c002d9bf:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c002d9c3:	74 07                	je     c002d9cc <pte_create_kernel+0x56>
c002d9c5:	b8 02 00 00 00       	mov    $0x2,%eax
c002d9ca:	eb 05                	jmp    c002d9d1 <pte_create_kernel+0x5b>
c002d9cc:	b8 00 00 00 00       	mov    $0x0,%eax
c002d9d1:	09 d0                	or     %edx,%eax
c002d9d3:	83 c8 01             	or     $0x1,%eax
c002d9d6:	c9                   	leave  
c002d9d7:	c3                   	ret    

c002d9d8 <pte_create_user>:
c002d9d8:	55                   	push   %ebp
c002d9d9:	89 e5                	mov    %esp,%ebp
c002d9db:	83 ec 18             	sub    $0x18,%esp
c002d9de:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d9e1:	88 45 f4             	mov    %al,-0xc(%ebp)
c002d9e4:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002d9e8:	83 ec 08             	sub    $0x8,%esp
c002d9eb:	50                   	push   %eax
c002d9ec:	ff 75 08             	pushl  0x8(%ebp)
c002d9ef:	e8 82 ff ff ff       	call   c002d976 <pte_create_kernel>
c002d9f4:	83 c4 10             	add    $0x10,%esp
c002d9f7:	83 c8 04             	or     $0x4,%eax
c002d9fa:	c9                   	leave  
c002d9fb:	c3                   	ret    

c002d9fc <pte_get_page>:
c002d9fc:	55                   	push   %ebp
c002d9fd:	89 e5                	mov    %esp,%ebp
c002d9ff:	83 ec 08             	sub    $0x8,%esp
c002da02:	8b 45 08             	mov    0x8(%ebp),%eax
c002da05:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002da0a:	83 ec 0c             	sub    $0xc,%esp
c002da0d:	50                   	push   %eax
c002da0e:	e8 49 fe ff ff       	call   c002d85c <ptov>
c002da13:	83 c4 10             	add    $0x10,%esp
c002da16:	c9                   	leave  
c002da17:	c3                   	ret    

c002da18 <pagedir_create>:
c002da18:	55                   	push   %ebp
c002da19:	89 e5                	mov    %esp,%ebp
c002da1b:	83 ec 18             	sub    $0x18,%esp
c002da1e:	83 ec 0c             	sub    $0xc,%esp
c002da21:	6a 00                	push   $0x0
c002da23:	e8 e0 63 ff ff       	call   c0023e08 <palloc_get_page>
c002da28:	83 c4 10             	add    $0x10,%esp
c002da2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002da2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002da32:	74 19                	je     c002da4d <pagedir_create+0x35>
c002da34:	a1 3c 87 04 c0       	mov    0xc004873c,%eax
c002da39:	83 ec 04             	sub    $0x4,%esp
c002da3c:	68 00 10 00 00       	push   $0x1000
c002da41:	50                   	push   %eax
c002da42:	ff 75 f4             	pushl  -0xc(%ebp)
c002da45:	e8 07 b8 ff ff       	call   c0029251 <memcpy>
c002da4a:	83 c4 10             	add    $0x10,%esp
c002da4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002da50:	c9                   	leave  
c002da51:	c3                   	ret    

c002da52 <pagedir_destroy>:
c002da52:	55                   	push   %ebp
c002da53:	89 e5                	mov    %esp,%ebp
c002da55:	83 ec 18             	sub    $0x18,%esp
c002da58:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002da5c:	0f 84 d9 00 00 00    	je     c002db3b <pagedir_destroy+0xe9>
c002da62:	a1 3c 87 04 c0       	mov    0xc004873c,%eax
c002da67:	39 45 08             	cmp    %eax,0x8(%ebp)
c002da6a:	75 1e                	jne    c002da8a <pagedir_destroy+0x38>
c002da6c:	83 ec 0c             	sub    $0xc,%esp
c002da6f:	68 d4 6f 03 c0       	push   $0xc0036fd4
c002da74:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002da79:	68 c0 70 03 c0       	push   $0xc00370c0
c002da7e:	6a 23                	push   $0x23
c002da80:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002da85:	e8 07 cb ff ff       	call   c002a591 <debug_panic>
c002da8a:	8b 45 08             	mov    0x8(%ebp),%eax
c002da8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002da90:	eb 74                	jmp    c002db06 <pagedir_destroy+0xb4>
c002da92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002da95:	8b 00                	mov    (%eax),%eax
c002da97:	83 e0 01             	and    $0x1,%eax
c002da9a:	85 c0                	test   %eax,%eax
c002da9c:	74 64                	je     c002db02 <pagedir_destroy+0xb0>
c002da9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002daa1:	8b 00                	mov    (%eax),%eax
c002daa3:	83 ec 0c             	sub    $0xc,%esp
c002daa6:	50                   	push   %eax
c002daa7:	e8 86 fe ff ff       	call   c002d932 <pde_get_pt>
c002daac:	83 c4 10             	add    $0x10,%esp
c002daaf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002dab2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002dab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002dab8:	eb 2d                	jmp    c002dae7 <pagedir_destroy+0x95>
c002daba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002dabd:	8b 00                	mov    (%eax),%eax
c002dabf:	83 e0 01             	and    $0x1,%eax
c002dac2:	85 c0                	test   %eax,%eax
c002dac4:	74 1d                	je     c002dae3 <pagedir_destroy+0x91>
c002dac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002dac9:	8b 00                	mov    (%eax),%eax
c002dacb:	83 ec 0c             	sub    $0xc,%esp
c002dace:	50                   	push   %eax
c002dacf:	e8 28 ff ff ff       	call   c002d9fc <pte_get_page>
c002dad4:	83 c4 10             	add    $0x10,%esp
c002dad7:	83 ec 0c             	sub    $0xc,%esp
c002dada:	50                   	push   %eax
c002dadb:	e8 80 64 ff ff       	call   c0023f60 <palloc_free_page>
c002dae0:	83 c4 10             	add    $0x10,%esp
c002dae3:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
c002dae7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002daea:	05 00 10 00 00       	add    $0x1000,%eax
c002daef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002daf2:	77 c6                	ja     c002daba <pagedir_destroy+0x68>
c002daf4:	83 ec 0c             	sub    $0xc,%esp
c002daf7:	ff 75 ec             	pushl  -0x14(%ebp)
c002dafa:	e8 61 64 ff ff       	call   c0023f60 <palloc_free_page>
c002daff:	83 c4 10             	add    $0x10,%esp
c002db02:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
c002db06:	83 ec 0c             	sub    $0xc,%esp
c002db09:	68 00 00 00 c0       	push   $0xc0000000
c002db0e:	e8 ce fd ff ff       	call   c002d8e1 <pd_no>
c002db13:	83 c4 10             	add    $0x10,%esp
c002db16:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002db1d:	8b 45 08             	mov    0x8(%ebp),%eax
c002db20:	01 d0                	add    %edx,%eax
c002db22:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002db25:	0f 87 67 ff ff ff    	ja     c002da92 <pagedir_destroy+0x40>
c002db2b:	83 ec 0c             	sub    $0xc,%esp
c002db2e:	ff 75 08             	pushl  0x8(%ebp)
c002db31:	e8 2a 64 ff ff       	call   c0023f60 <palloc_free_page>
c002db36:	83 c4 10             	add    $0x10,%esp
c002db39:	eb 01                	jmp    c002db3c <pagedir_destroy+0xea>
c002db3b:	90                   	nop
c002db3c:	c9                   	leave  
c002db3d:	c3                   	ret    

c002db3e <lookup_page>:
c002db3e:	55                   	push   %ebp
c002db3f:	89 e5                	mov    %esp,%ebp
c002db41:	83 ec 28             	sub    $0x28,%esp
c002db44:	8b 45 10             	mov    0x10(%ebp),%eax
c002db47:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002db4a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002db4e:	75 1e                	jne    c002db6e <lookup_page+0x30>
c002db50:	83 ec 0c             	sub    $0xc,%esp
c002db53:	68 01 70 03 c0       	push   $0xc0037001
c002db58:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002db5d:	68 e4 70 03 c0       	push   $0xc00370e4
c002db62:	6a 3d                	push   $0x3d
c002db64:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002db69:	e8 23 ca ff ff       	call   c002a591 <debug_panic>
c002db6e:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002db72:	83 f0 01             	xor    $0x1,%eax
c002db75:	84 c0                	test   %al,%al
c002db77:	75 30                	jne    c002dba9 <lookup_page+0x6b>
c002db79:	83 ec 0c             	sub    $0xc,%esp
c002db7c:	ff 75 0c             	pushl  0xc(%ebp)
c002db7f:	e8 ba fc ff ff       	call   c002d83e <is_user_vaddr>
c002db84:	83 c4 10             	add    $0x10,%esp
c002db87:	84 c0                	test   %al,%al
c002db89:	75 1e                	jne    c002dba9 <lookup_page+0x6b>
c002db8b:	83 ec 0c             	sub    $0xc,%esp
c002db8e:	68 0c 70 03 c0       	push   $0xc003700c
c002db93:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002db98:	68 e4 70 03 c0       	push   $0xc00370e4
c002db9d:	6a 40                	push   $0x40
c002db9f:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dba4:	e8 e8 c9 ff ff       	call   c002a591 <debug_panic>
c002dba9:	83 ec 0c             	sub    $0xc,%esp
c002dbac:	ff 75 0c             	pushl  0xc(%ebp)
c002dbaf:	e8 2d fd ff ff       	call   c002d8e1 <pd_no>
c002dbb4:	83 c4 10             	add    $0x10,%esp
c002dbb7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002dbbe:	8b 45 08             	mov    0x8(%ebp),%eax
c002dbc1:	01 d0                	add    %edx,%eax
c002dbc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002dbc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dbc9:	8b 00                	mov    (%eax),%eax
c002dbcb:	85 c0                	test   %eax,%eax
c002dbcd:	75 41                	jne    c002dc10 <lookup_page+0xd2>
c002dbcf:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c002dbd3:	74 34                	je     c002dc09 <lookup_page+0xcb>
c002dbd5:	83 ec 0c             	sub    $0xc,%esp
c002dbd8:	6a 02                	push   $0x2
c002dbda:	e8 29 62 ff ff       	call   c0023e08 <palloc_get_page>
c002dbdf:	83 c4 10             	add    $0x10,%esp
c002dbe2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002dbe5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002dbe9:	75 07                	jne    c002dbf2 <lookup_page+0xb4>
c002dbeb:	b8 00 00 00 00       	mov    $0x0,%eax
c002dbf0:	eb 4c                	jmp    c002dc3e <lookup_page+0x100>
c002dbf2:	83 ec 0c             	sub    $0xc,%esp
c002dbf5:	ff 75 f0             	pushl  -0x10(%ebp)
c002dbf8:	e8 ef fc ff ff       	call   c002d8ec <pde_create>
c002dbfd:	83 c4 10             	add    $0x10,%esp
c002dc00:	89 c2                	mov    %eax,%edx
c002dc02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dc05:	89 10                	mov    %edx,(%eax)
c002dc07:	eb 07                	jmp    c002dc10 <lookup_page+0xd2>
c002dc09:	b8 00 00 00 00       	mov    $0x0,%eax
c002dc0e:	eb 2e                	jmp    c002dc3e <lookup_page+0x100>
c002dc10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dc13:	8b 00                	mov    (%eax),%eax
c002dc15:	83 ec 0c             	sub    $0xc,%esp
c002dc18:	50                   	push   %eax
c002dc19:	e8 14 fd ff ff       	call   c002d932 <pde_get_pt>
c002dc1e:	83 c4 10             	add    $0x10,%esp
c002dc21:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002dc24:	83 ec 0c             	sub    $0xc,%esp
c002dc27:	ff 75 0c             	pushl  0xc(%ebp)
c002dc2a:	e8 a2 fc ff ff       	call   c002d8d1 <pt_no>
c002dc2f:	83 c4 10             	add    $0x10,%esp
c002dc32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002dc39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002dc3c:	01 d0                	add    %edx,%eax
c002dc3e:	c9                   	leave  
c002dc3f:	c3                   	ret    

c002dc40 <pagedir_set_page>:
c002dc40:	55                   	push   %ebp
c002dc41:	89 e5                	mov    %esp,%ebp
c002dc43:	83 ec 28             	sub    $0x28,%esp
c002dc46:	8b 45 14             	mov    0x14(%ebp),%eax
c002dc49:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002dc4c:	ff 75 0c             	pushl  0xc(%ebp)
c002dc4f:	e8 dd fb ff ff       	call   c002d831 <pg_ofs>
c002dc54:	83 c4 04             	add    $0x4,%esp
c002dc57:	85 c0                	test   %eax,%eax
c002dc59:	74 1e                	je     c002dc79 <pagedir_set_page+0x39>
c002dc5b:	83 ec 0c             	sub    $0xc,%esp
c002dc5e:	68 2d 70 03 c0       	push   $0xc003702d
c002dc63:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002dc68:	68 04 71 03 c0       	push   $0xc0037104
c002dc6d:	6a 67                	push   $0x67
c002dc6f:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dc74:	e8 18 c9 ff ff       	call   c002a591 <debug_panic>
c002dc79:	83 ec 0c             	sub    $0xc,%esp
c002dc7c:	ff 75 10             	pushl  0x10(%ebp)
c002dc7f:	e8 ad fb ff ff       	call   c002d831 <pg_ofs>
c002dc84:	83 c4 10             	add    $0x10,%esp
c002dc87:	85 c0                	test   %eax,%eax
c002dc89:	74 1e                	je     c002dca9 <pagedir_set_page+0x69>
c002dc8b:	83 ec 0c             	sub    $0xc,%esp
c002dc8e:	68 41 70 03 c0       	push   $0xc0037041
c002dc93:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002dc98:	68 04 71 03 c0       	push   $0xc0037104
c002dc9d:	6a 68                	push   $0x68
c002dc9f:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dca4:	e8 e8 c8 ff ff       	call   c002a591 <debug_panic>
c002dca9:	83 ec 0c             	sub    $0xc,%esp
c002dcac:	ff 75 0c             	pushl  0xc(%ebp)
c002dcaf:	e8 8a fb ff ff       	call   c002d83e <is_user_vaddr>
c002dcb4:	83 c4 10             	add    $0x10,%esp
c002dcb7:	84 c0                	test   %al,%al
c002dcb9:	75 1e                	jne    c002dcd9 <pagedir_set_page+0x99>
c002dcbb:	83 ec 0c             	sub    $0xc,%esp
c002dcbe:	68 55 70 03 c0       	push   $0xc0037055
c002dcc3:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002dcc8:	68 04 71 03 c0       	push   $0xc0037104
c002dccd:	6a 69                	push   $0x69
c002dccf:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dcd4:	e8 b8 c8 ff ff       	call   c002a591 <debug_panic>
c002dcd9:	83 ec 0c             	sub    $0xc,%esp
c002dcdc:	ff 75 10             	pushl  0x10(%ebp)
c002dcdf:	e8 b0 fb ff ff       	call   c002d894 <vtop>
c002dce4:	83 c4 10             	add    $0x10,%esp
c002dce7:	c1 e8 0c             	shr    $0xc,%eax
c002dcea:	89 c2                	mov    %eax,%edx
c002dcec:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c002dcf1:	39 c2                	cmp    %eax,%edx
c002dcf3:	72 1e                	jb     c002dd13 <pagedir_set_page+0xd3>
c002dcf5:	83 ec 0c             	sub    $0xc,%esp
c002dcf8:	68 6c 70 03 c0       	push   $0xc003706c
c002dcfd:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002dd02:	68 04 71 03 c0       	push   $0xc0037104
c002dd07:	6a 6a                	push   $0x6a
c002dd09:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dd0e:	e8 7e c8 ff ff       	call   c002a591 <debug_panic>
c002dd13:	a1 3c 87 04 c0       	mov    0xc004873c,%eax
c002dd18:	39 45 08             	cmp    %eax,0x8(%ebp)
c002dd1b:	75 1e                	jne    c002dd3b <pagedir_set_page+0xfb>
c002dd1d:	83 ec 0c             	sub    $0xc,%esp
c002dd20:	68 d4 6f 03 c0       	push   $0xc0036fd4
c002dd25:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002dd2a:	68 04 71 03 c0       	push   $0xc0037104
c002dd2f:	6a 6b                	push   $0x6b
c002dd31:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dd36:	e8 56 c8 ff ff       	call   c002a591 <debug_panic>
c002dd3b:	83 ec 04             	sub    $0x4,%esp
c002dd3e:	6a 01                	push   $0x1
c002dd40:	ff 75 0c             	pushl  0xc(%ebp)
c002dd43:	ff 75 08             	pushl  0x8(%ebp)
c002dd46:	e8 f3 fd ff ff       	call   c002db3e <lookup_page>
c002dd4b:	83 c4 10             	add    $0x10,%esp
c002dd4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002dd51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002dd55:	74 4b                	je     c002dda2 <pagedir_set_page+0x162>
c002dd57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dd5a:	8b 00                	mov    (%eax),%eax
c002dd5c:	83 e0 01             	and    $0x1,%eax
c002dd5f:	85 c0                	test   %eax,%eax
c002dd61:	74 1e                	je     c002dd81 <pagedir_set_page+0x141>
c002dd63:	83 ec 0c             	sub    $0xc,%esp
c002dd66:	68 95 70 03 c0       	push   $0xc0037095
c002dd6b:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002dd70:	68 04 71 03 c0       	push   $0xc0037104
c002dd75:	6a 71                	push   $0x71
c002dd77:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dd7c:	e8 10 c8 ff ff       	call   c002a591 <debug_panic>
c002dd81:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002dd85:	83 ec 08             	sub    $0x8,%esp
c002dd88:	50                   	push   %eax
c002dd89:	ff 75 10             	pushl  0x10(%ebp)
c002dd8c:	e8 47 fc ff ff       	call   c002d9d8 <pte_create_user>
c002dd91:	83 c4 10             	add    $0x10,%esp
c002dd94:	89 c2                	mov    %eax,%edx
c002dd96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dd99:	89 10                	mov    %edx,(%eax)
c002dd9b:	b8 01 00 00 00       	mov    $0x1,%eax
c002dda0:	eb 05                	jmp    c002dda7 <pagedir_set_page+0x167>
c002dda2:	b8 00 00 00 00       	mov    $0x0,%eax
c002dda7:	c9                   	leave  
c002dda8:	c3                   	ret    

c002dda9 <pagedir_get_page>:
c002dda9:	55                   	push   %ebp
c002ddaa:	89 e5                	mov    %esp,%ebp
c002ddac:	53                   	push   %ebx
c002ddad:	83 ec 14             	sub    $0x14,%esp
c002ddb0:	ff 75 0c             	pushl  0xc(%ebp)
c002ddb3:	e8 86 fa ff ff       	call   c002d83e <is_user_vaddr>
c002ddb8:	83 c4 04             	add    $0x4,%esp
c002ddbb:	84 c0                	test   %al,%al
c002ddbd:	75 21                	jne    c002dde0 <pagedir_get_page+0x37>
c002ddbf:	83 ec 0c             	sub    $0xc,%esp
c002ddc2:	68 a9 70 03 c0       	push   $0xc00370a9
c002ddc7:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002ddcc:	68 2c 71 03 c0       	push   $0xc003712c
c002ddd1:	68 82 00 00 00       	push   $0x82
c002ddd6:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002dddb:	e8 b1 c7 ff ff       	call   c002a591 <debug_panic>
c002dde0:	83 ec 04             	sub    $0x4,%esp
c002dde3:	6a 00                	push   $0x0
c002dde5:	ff 75 0c             	pushl  0xc(%ebp)
c002dde8:	ff 75 08             	pushl  0x8(%ebp)
c002ddeb:	e8 4e fd ff ff       	call   c002db3e <lookup_page>
c002ddf0:	83 c4 10             	add    $0x10,%esp
c002ddf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ddf6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002ddfa:	74 31                	je     c002de2d <pagedir_get_page+0x84>
c002ddfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ddff:	8b 00                	mov    (%eax),%eax
c002de01:	83 e0 01             	and    $0x1,%eax
c002de04:	85 c0                	test   %eax,%eax
c002de06:	74 25                	je     c002de2d <pagedir_get_page+0x84>
c002de08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002de0b:	8b 00                	mov    (%eax),%eax
c002de0d:	83 ec 0c             	sub    $0xc,%esp
c002de10:	50                   	push   %eax
c002de11:	e8 e6 fb ff ff       	call   c002d9fc <pte_get_page>
c002de16:	83 c4 10             	add    $0x10,%esp
c002de19:	89 c3                	mov    %eax,%ebx
c002de1b:	83 ec 0c             	sub    $0xc,%esp
c002de1e:	ff 75 0c             	pushl  0xc(%ebp)
c002de21:	e8 0b fa ff ff       	call   c002d831 <pg_ofs>
c002de26:	83 c4 10             	add    $0x10,%esp
c002de29:	01 d8                	add    %ebx,%eax
c002de2b:	eb 05                	jmp    c002de32 <pagedir_get_page+0x89>
c002de2d:	b8 00 00 00 00       	mov    $0x0,%eax
c002de32:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002de35:	c9                   	leave  
c002de36:	c3                   	ret    

c002de37 <pagedir_clear_page>:
c002de37:	55                   	push   %ebp
c002de38:	89 e5                	mov    %esp,%ebp
c002de3a:	83 ec 18             	sub    $0x18,%esp
c002de3d:	ff 75 0c             	pushl  0xc(%ebp)
c002de40:	e8 ec f9 ff ff       	call   c002d831 <pg_ofs>
c002de45:	83 c4 04             	add    $0x4,%esp
c002de48:	85 c0                	test   %eax,%eax
c002de4a:	74 21                	je     c002de6d <pagedir_clear_page+0x36>
c002de4c:	83 ec 0c             	sub    $0xc,%esp
c002de4f:	68 2d 70 03 c0       	push   $0xc003702d
c002de54:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002de59:	68 40 71 03 c0       	push   $0xc0037140
c002de5e:	68 94 00 00 00       	push   $0x94
c002de63:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002de68:	e8 24 c7 ff ff       	call   c002a591 <debug_panic>
c002de6d:	83 ec 0c             	sub    $0xc,%esp
c002de70:	ff 75 0c             	pushl  0xc(%ebp)
c002de73:	e8 c6 f9 ff ff       	call   c002d83e <is_user_vaddr>
c002de78:	83 c4 10             	add    $0x10,%esp
c002de7b:	84 c0                	test   %al,%al
c002de7d:	75 21                	jne    c002dea0 <pagedir_clear_page+0x69>
c002de7f:	83 ec 0c             	sub    $0xc,%esp
c002de82:	68 55 70 03 c0       	push   $0xc0037055
c002de87:	68 4b 6f 03 c0       	push   $0xc0036f4b
c002de8c:	68 40 71 03 c0       	push   $0xc0037140
c002de91:	68 95 00 00 00       	push   $0x95
c002de96:	68 e8 6f 03 c0       	push   $0xc0036fe8
c002de9b:	e8 f1 c6 ff ff       	call   c002a591 <debug_panic>
c002dea0:	83 ec 04             	sub    $0x4,%esp
c002dea3:	6a 00                	push   $0x0
c002dea5:	ff 75 0c             	pushl  0xc(%ebp)
c002dea8:	ff 75 08             	pushl  0x8(%ebp)
c002deab:	e8 8e fc ff ff       	call   c002db3e <lookup_page>
c002deb0:	83 c4 10             	add    $0x10,%esp
c002deb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002deb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002deba:	74 29                	je     c002dee5 <pagedir_clear_page+0xae>
c002debc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002debf:	8b 00                	mov    (%eax),%eax
c002dec1:	83 e0 01             	and    $0x1,%eax
c002dec4:	85 c0                	test   %eax,%eax
c002dec6:	74 1d                	je     c002dee5 <pagedir_clear_page+0xae>
c002dec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002decb:	8b 00                	mov    (%eax),%eax
c002decd:	83 e0 fe             	and    $0xfffffffe,%eax
c002ded0:	89 c2                	mov    %eax,%edx
c002ded2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ded5:	89 10                	mov    %edx,(%eax)
c002ded7:	83 ec 0c             	sub    $0xc,%esp
c002deda:	ff 75 08             	pushl  0x8(%ebp)
c002dedd:	e8 86 01 00 00       	call   c002e068 <invalidate_pagedir>
c002dee2:	83 c4 10             	add    $0x10,%esp
c002dee5:	90                   	nop
c002dee6:	c9                   	leave  
c002dee7:	c3                   	ret    

c002dee8 <pagedir_is_dirty>:
c002dee8:	55                   	push   %ebp
c002dee9:	89 e5                	mov    %esp,%ebp
c002deeb:	83 ec 18             	sub    $0x18,%esp
c002deee:	83 ec 04             	sub    $0x4,%esp
c002def1:	6a 00                	push   $0x0
c002def3:	ff 75 0c             	pushl  0xc(%ebp)
c002def6:	ff 75 08             	pushl  0x8(%ebp)
c002def9:	e8 40 fc ff ff       	call   c002db3e <lookup_page>
c002defe:	83 c4 10             	add    $0x10,%esp
c002df01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002df04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002df08:	74 13                	je     c002df1d <pagedir_is_dirty+0x35>
c002df0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002df0d:	8b 00                	mov    (%eax),%eax
c002df0f:	83 e0 40             	and    $0x40,%eax
c002df12:	85 c0                	test   %eax,%eax
c002df14:	74 07                	je     c002df1d <pagedir_is_dirty+0x35>
c002df16:	b8 01 00 00 00       	mov    $0x1,%eax
c002df1b:	eb 05                	jmp    c002df22 <pagedir_is_dirty+0x3a>
c002df1d:	b8 00 00 00 00       	mov    $0x0,%eax
c002df22:	83 e0 01             	and    $0x1,%eax
c002df25:	c9                   	leave  
c002df26:	c3                   	ret    

c002df27 <pagedir_set_dirty>:
c002df27:	55                   	push   %ebp
c002df28:	89 e5                	mov    %esp,%ebp
c002df2a:	83 ec 28             	sub    $0x28,%esp
c002df2d:	8b 45 10             	mov    0x10(%ebp),%eax
c002df30:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002df33:	83 ec 04             	sub    $0x4,%esp
c002df36:	6a 00                	push   $0x0
c002df38:	ff 75 0c             	pushl  0xc(%ebp)
c002df3b:	ff 75 08             	pushl  0x8(%ebp)
c002df3e:	e8 fb fb ff ff       	call   c002db3e <lookup_page>
c002df43:	83 c4 10             	add    $0x10,%esp
c002df46:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002df49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002df4d:	74 34                	je     c002df83 <pagedir_set_dirty+0x5c>
c002df4f:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c002df53:	74 11                	je     c002df66 <pagedir_set_dirty+0x3f>
c002df55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002df58:	8b 00                	mov    (%eax),%eax
c002df5a:	83 c8 40             	or     $0x40,%eax
c002df5d:	89 c2                	mov    %eax,%edx
c002df5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002df62:	89 10                	mov    %edx,(%eax)
c002df64:	eb 1d                	jmp    c002df83 <pagedir_set_dirty+0x5c>
c002df66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002df69:	8b 00                	mov    (%eax),%eax
c002df6b:	83 e0 bf             	and    $0xffffffbf,%eax
c002df6e:	89 c2                	mov    %eax,%edx
c002df70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002df73:	89 10                	mov    %edx,(%eax)
c002df75:	83 ec 0c             	sub    $0xc,%esp
c002df78:	ff 75 08             	pushl  0x8(%ebp)
c002df7b:	e8 e8 00 00 00       	call   c002e068 <invalidate_pagedir>
c002df80:	83 c4 10             	add    $0x10,%esp
c002df83:	90                   	nop
c002df84:	c9                   	leave  
c002df85:	c3                   	ret    

c002df86 <pagedir_is_accessed>:
c002df86:	55                   	push   %ebp
c002df87:	89 e5                	mov    %esp,%ebp
c002df89:	83 ec 18             	sub    $0x18,%esp
c002df8c:	83 ec 04             	sub    $0x4,%esp
c002df8f:	6a 00                	push   $0x0
c002df91:	ff 75 0c             	pushl  0xc(%ebp)
c002df94:	ff 75 08             	pushl  0x8(%ebp)
c002df97:	e8 a2 fb ff ff       	call   c002db3e <lookup_page>
c002df9c:	83 c4 10             	add    $0x10,%esp
c002df9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002dfa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002dfa6:	74 13                	je     c002dfbb <pagedir_is_accessed+0x35>
c002dfa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dfab:	8b 00                	mov    (%eax),%eax
c002dfad:	83 e0 20             	and    $0x20,%eax
c002dfb0:	85 c0                	test   %eax,%eax
c002dfb2:	74 07                	je     c002dfbb <pagedir_is_accessed+0x35>
c002dfb4:	b8 01 00 00 00       	mov    $0x1,%eax
c002dfb9:	eb 05                	jmp    c002dfc0 <pagedir_is_accessed+0x3a>
c002dfbb:	b8 00 00 00 00       	mov    $0x0,%eax
c002dfc0:	83 e0 01             	and    $0x1,%eax
c002dfc3:	c9                   	leave  
c002dfc4:	c3                   	ret    

c002dfc5 <pagedir_set_accessed>:
c002dfc5:	55                   	push   %ebp
c002dfc6:	89 e5                	mov    %esp,%ebp
c002dfc8:	83 ec 28             	sub    $0x28,%esp
c002dfcb:	8b 45 10             	mov    0x10(%ebp),%eax
c002dfce:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002dfd1:	83 ec 04             	sub    $0x4,%esp
c002dfd4:	6a 00                	push   $0x0
c002dfd6:	ff 75 0c             	pushl  0xc(%ebp)
c002dfd9:	ff 75 08             	pushl  0x8(%ebp)
c002dfdc:	e8 5d fb ff ff       	call   c002db3e <lookup_page>
c002dfe1:	83 c4 10             	add    $0x10,%esp
c002dfe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002dfe7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002dfeb:	74 34                	je     c002e021 <pagedir_set_accessed+0x5c>
c002dfed:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c002dff1:	74 11                	je     c002e004 <pagedir_set_accessed+0x3f>
c002dff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dff6:	8b 00                	mov    (%eax),%eax
c002dff8:	83 c8 20             	or     $0x20,%eax
c002dffb:	89 c2                	mov    %eax,%edx
c002dffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e000:	89 10                	mov    %edx,(%eax)
c002e002:	eb 1d                	jmp    c002e021 <pagedir_set_accessed+0x5c>
c002e004:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e007:	8b 00                	mov    (%eax),%eax
c002e009:	83 e0 df             	and    $0xffffffdf,%eax
c002e00c:	89 c2                	mov    %eax,%edx
c002e00e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e011:	89 10                	mov    %edx,(%eax)
c002e013:	83 ec 0c             	sub    $0xc,%esp
c002e016:	ff 75 08             	pushl  0x8(%ebp)
c002e019:	e8 4a 00 00 00       	call   c002e068 <invalidate_pagedir>
c002e01e:	83 c4 10             	add    $0x10,%esp
c002e021:	90                   	nop
c002e022:	c9                   	leave  
c002e023:	c3                   	ret    

c002e024 <pagedir_activate>:
c002e024:	55                   	push   %ebp
c002e025:	89 e5                	mov    %esp,%ebp
c002e027:	83 ec 08             	sub    $0x8,%esp
c002e02a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002e02e:	75 08                	jne    c002e038 <pagedir_activate+0x14>
c002e030:	a1 3c 87 04 c0       	mov    0xc004873c,%eax
c002e035:	89 45 08             	mov    %eax,0x8(%ebp)
c002e038:	83 ec 0c             	sub    $0xc,%esp
c002e03b:	ff 75 08             	pushl  0x8(%ebp)
c002e03e:	e8 51 f8 ff ff       	call   c002d894 <vtop>
c002e043:	83 c4 10             	add    $0x10,%esp
c002e046:	0f 22 d8             	mov    %eax,%cr3
c002e049:	90                   	nop
c002e04a:	c9                   	leave  
c002e04b:	c3                   	ret    

c002e04c <active_pd>:
c002e04c:	55                   	push   %ebp
c002e04d:	89 e5                	mov    %esp,%ebp
c002e04f:	83 ec 18             	sub    $0x18,%esp
c002e052:	0f 20 d8             	mov    %cr3,%eax
c002e055:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002e058:	83 ec 0c             	sub    $0xc,%esp
c002e05b:	ff 75 f4             	pushl  -0xc(%ebp)
c002e05e:	e8 f9 f7 ff ff       	call   c002d85c <ptov>
c002e063:	83 c4 10             	add    $0x10,%esp
c002e066:	c9                   	leave  
c002e067:	c3                   	ret    

c002e068 <invalidate_pagedir>:
c002e068:	55                   	push   %ebp
c002e069:	89 e5                	mov    %esp,%ebp
c002e06b:	83 ec 08             	sub    $0x8,%esp
c002e06e:	e8 d9 ff ff ff       	call   c002e04c <active_pd>
c002e073:	3b 45 08             	cmp    0x8(%ebp),%eax
c002e076:	75 0e                	jne    c002e086 <invalidate_pagedir+0x1e>
c002e078:	83 ec 0c             	sub    $0xc,%esp
c002e07b:	ff 75 08             	pushl  0x8(%ebp)
c002e07e:	e8 a1 ff ff ff       	call   c002e024 <pagedir_activate>
c002e083:	83 c4 10             	add    $0x10,%esp
c002e086:	90                   	nop
c002e087:	c9                   	leave  
c002e088:	c3                   	ret    

c002e089 <pg_round_down>:
static inline void *pg_round_down (const void *va) {
c002e089:	55                   	push   %ebp
c002e08a:	89 e5                	mov    %esp,%ebp
  return (void *) ((uintptr_t) va & ~PGMASK);
c002e08c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e08f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
c002e094:	5d                   	pop    %ebp
c002e095:	c3                   	ret    

c002e096 <exception_init>:

   Refer to [IA32-v3a] section 5.15 "Exception and Interrupt
   Reference" for a description of each of these exceptions. */
void
exception_init (void) 
{
c002e096:	55                   	push   %ebp
c002e097:	89 e5                	mov    %esp,%ebp
c002e099:	83 ec 08             	sub    $0x8,%esp
  /* These exceptions can be raised explicitly by a user program,
     e.g. via the INT, INT3, INTO, and BOUND instructions.  Thus,
     we set DPL==3, meaning that user programs are allowed to
     invoke them via these instructions. */
  intr_register_int (3, 3, INTR_ON, kill, "#BP Breakpoint Exception");
c002e09c:	83 ec 0c             	sub    $0xc,%esp
c002e09f:	68 54 71 03 c0       	push   $0xc0037154
c002e0a4:	68 24 e2 02 c0       	push   $0xc002e224
c002e0a9:	6a 01                	push   $0x1
c002e0ab:	6a 03                	push   $0x3
c002e0ad:	6a 03                	push   $0x3
c002e0af:	e8 af 3f ff ff       	call   c0022063 <intr_register_int>
c002e0b4:	83 c4 20             	add    $0x20,%esp
  intr_register_int (4, 3, INTR_ON, kill, "#OF Overflow Exception");
c002e0b7:	83 ec 0c             	sub    $0xc,%esp
c002e0ba:	68 6d 71 03 c0       	push   $0xc003716d
c002e0bf:	68 24 e2 02 c0       	push   $0xc002e224
c002e0c4:	6a 01                	push   $0x1
c002e0c6:	6a 03                	push   $0x3
c002e0c8:	6a 04                	push   $0x4
c002e0ca:	e8 94 3f ff ff       	call   c0022063 <intr_register_int>
c002e0cf:	83 c4 20             	add    $0x20,%esp
  intr_register_int (5, 3, INTR_ON, kill,
c002e0d2:	83 ec 0c             	sub    $0xc,%esp
c002e0d5:	68 84 71 03 c0       	push   $0xc0037184
c002e0da:	68 24 e2 02 c0       	push   $0xc002e224
c002e0df:	6a 01                	push   $0x1
c002e0e1:	6a 03                	push   $0x3
c002e0e3:	6a 05                	push   $0x5
c002e0e5:	e8 79 3f ff ff       	call   c0022063 <intr_register_int>
c002e0ea:	83 c4 20             	add    $0x20,%esp

  /* These exceptions have DPL==0, preventing user processes from
     invoking them via the INT instruction.  They can still be
     caused indirectly, e.g. #DE can be caused by dividing by
     0.  */
  intr_register_int (0, 0, INTR_ON, kill, "#DE Divide Error");
c002e0ed:	83 ec 0c             	sub    $0xc,%esp
c002e0f0:	68 a7 71 03 c0       	push   $0xc00371a7
c002e0f5:	68 24 e2 02 c0       	push   $0xc002e224
c002e0fa:	6a 01                	push   $0x1
c002e0fc:	6a 00                	push   $0x0
c002e0fe:	6a 00                	push   $0x0
c002e100:	e8 5e 3f ff ff       	call   c0022063 <intr_register_int>
c002e105:	83 c4 20             	add    $0x20,%esp
  intr_register_int (1, 0, INTR_ON, kill, "#DB Debug Exception");
c002e108:	83 ec 0c             	sub    $0xc,%esp
c002e10b:	68 b8 71 03 c0       	push   $0xc00371b8
c002e110:	68 24 e2 02 c0       	push   $0xc002e224
c002e115:	6a 01                	push   $0x1
c002e117:	6a 00                	push   $0x0
c002e119:	6a 01                	push   $0x1
c002e11b:	e8 43 3f ff ff       	call   c0022063 <intr_register_int>
c002e120:	83 c4 20             	add    $0x20,%esp
  intr_register_int (6, 0, INTR_ON, kill, "#UD Invalid Opcode Exception");
c002e123:	83 ec 0c             	sub    $0xc,%esp
c002e126:	68 cc 71 03 c0       	push   $0xc00371cc
c002e12b:	68 24 e2 02 c0       	push   $0xc002e224
c002e130:	6a 01                	push   $0x1
c002e132:	6a 00                	push   $0x0
c002e134:	6a 06                	push   $0x6
c002e136:	e8 28 3f ff ff       	call   c0022063 <intr_register_int>
c002e13b:	83 c4 20             	add    $0x20,%esp
  intr_register_int (7, 0, INTR_ON, kill,
c002e13e:	83 ec 0c             	sub    $0xc,%esp
c002e141:	68 ec 71 03 c0       	push   $0xc00371ec
c002e146:	68 24 e2 02 c0       	push   $0xc002e224
c002e14b:	6a 01                	push   $0x1
c002e14d:	6a 00                	push   $0x0
c002e14f:	6a 07                	push   $0x7
c002e151:	e8 0d 3f ff ff       	call   c0022063 <intr_register_int>
c002e156:	83 c4 20             	add    $0x20,%esp
                     "#NM Device Not Available Exception");
  intr_register_int (11, 0, INTR_ON, kill, "#NP Segment Not Present");
c002e159:	83 ec 0c             	sub    $0xc,%esp
c002e15c:	68 0f 72 03 c0       	push   $0xc003720f
c002e161:	68 24 e2 02 c0       	push   $0xc002e224
c002e166:	6a 01                	push   $0x1
c002e168:	6a 00                	push   $0x0
c002e16a:	6a 0b                	push   $0xb
c002e16c:	e8 f2 3e ff ff       	call   c0022063 <intr_register_int>
c002e171:	83 c4 20             	add    $0x20,%esp
  intr_register_int (12, 0, INTR_ON, kill, "#SS Stack Fault Exception");
c002e174:	83 ec 0c             	sub    $0xc,%esp
c002e177:	68 27 72 03 c0       	push   $0xc0037227
c002e17c:	68 24 e2 02 c0       	push   $0xc002e224
c002e181:	6a 01                	push   $0x1
c002e183:	6a 00                	push   $0x0
c002e185:	6a 0c                	push   $0xc
c002e187:	e8 d7 3e ff ff       	call   c0022063 <intr_register_int>
c002e18c:	83 c4 20             	add    $0x20,%esp
  intr_register_int (13, 0, INTR_ON, kill, "#GP General Protection Exception");
c002e18f:	83 ec 0c             	sub    $0xc,%esp
c002e192:	68 44 72 03 c0       	push   $0xc0037244
c002e197:	68 24 e2 02 c0       	push   $0xc002e224
c002e19c:	6a 01                	push   $0x1
c002e19e:	6a 00                	push   $0x0
c002e1a0:	6a 0d                	push   $0xd
c002e1a2:	e8 bc 3e ff ff       	call   c0022063 <intr_register_int>
c002e1a7:	83 c4 20             	add    $0x20,%esp
  intr_register_int (16, 0, INTR_ON, kill, "#MF x87 FPU Floating-Point Error");
c002e1aa:	83 ec 0c             	sub    $0xc,%esp
c002e1ad:	68 68 72 03 c0       	push   $0xc0037268
c002e1b2:	68 24 e2 02 c0       	push   $0xc002e224
c002e1b7:	6a 01                	push   $0x1
c002e1b9:	6a 00                	push   $0x0
c002e1bb:	6a 10                	push   $0x10
c002e1bd:	e8 a1 3e ff ff       	call   c0022063 <intr_register_int>
c002e1c2:	83 c4 20             	add    $0x20,%esp
  intr_register_int (19, 0, INTR_ON, kill,
c002e1c5:	83 ec 0c             	sub    $0xc,%esp
c002e1c8:	68 8c 72 03 c0       	push   $0xc003728c
c002e1cd:	68 24 e2 02 c0       	push   $0xc002e224
c002e1d2:	6a 01                	push   $0x1
c002e1d4:	6a 00                	push   $0x0
c002e1d6:	6a 13                	push   $0x13
c002e1d8:	e8 86 3e ff ff       	call   c0022063 <intr_register_int>
c002e1dd:	83 c4 20             	add    $0x20,%esp
                     "#XF SIMD Floating-Point Exception");

  /* Most exceptions can be handled with interrupts turned on.
     We need to disable interrupts for page faults because the
     fault address is stored in CR2 and needs to be preserved. */
  intr_register_int (14, 0, INTR_OFF, page_fault, "#PF Page-Fault Exception");
c002e1e0:	83 ec 0c             	sub    $0xc,%esp
c002e1e3:	68 ae 72 03 c0       	push   $0xc00372ae
c002e1e8:	68 f8 e2 02 c0       	push   $0xc002e2f8
c002e1ed:	6a 00                	push   $0x0
c002e1ef:	6a 00                	push   $0x0
c002e1f1:	6a 0e                	push   $0xe
c002e1f3:	e8 6b 3e ff ff       	call   c0022063 <intr_register_int>
c002e1f8:	83 c4 20             	add    $0x20,%esp
}
c002e1fb:	90                   	nop
c002e1fc:	c9                   	leave  
c002e1fd:	c3                   	ret    

c002e1fe <exception_print_stats>:

/* Prints exception statistics. */
void
exception_print_stats (void) 
{
c002e1fe:	55                   	push   %ebp
c002e1ff:	89 e5                	mov    %esp,%ebp
c002e201:	83 ec 08             	sub    $0x8,%esp
  printf ("Exception: %lld page faults\n", page_fault_cnt);
c002e204:	a1 38 02 04 c0       	mov    0xc0040238,%eax
c002e209:	8b 15 3c 02 04 c0    	mov    0xc004023c,%edx
c002e20f:	83 ec 04             	sub    $0x4,%esp
c002e212:	52                   	push   %edx
c002e213:	50                   	push   %eax
c002e214:	68 c7 72 03 c0       	push   $0xc00372c7
c002e219:	e8 12 9e ff ff       	call   c0028030 <printf>
c002e21e:	83 c4 10             	add    $0x10,%esp
}
c002e221:	90                   	nop
c002e222:	c9                   	leave  
c002e223:	c3                   	ret    

c002e224 <kill>:

/* Handler for an exception (probably) caused by a user process. */
static void
kill (struct intr_frame *f) 
{
c002e224:	55                   	push   %ebp
c002e225:	89 e5                	mov    %esp,%ebp
c002e227:	56                   	push   %esi
c002e228:	53                   	push   %ebx
     exceptions back to the process via signals, but we don't
     implement them. */
     
  /* The interrupt frame's code segment value tells us where the
     exception originated. */
  switch (f->cs)
c002e229:	8b 45 08             	mov    0x8(%ebp),%eax
c002e22c:	8b 40 40             	mov    0x40(%eax),%eax
c002e22f:	0f b7 c0             	movzwl %ax,%eax
c002e232:	83 f8 08             	cmp    $0x8,%eax
c002e235:	74 52                	je     c002e289 <kill+0x65>
c002e237:	83 f8 1b             	cmp    $0x1b,%eax
c002e23a:	75 71                	jne    c002e2ad <kill+0x89>
    {
    case SEL_UCSEG:
      /* User's code segment, so it's a user exception, as we
         expected.  Kill the user process.  */
      printf ("%s: dying due to interrupt %#04x (%s).\n",
              thread_name (), f->vec_no, intr_name (f->vec_no));
c002e23c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e23f:	8b 40 30             	mov    0x30(%eax),%eax
      printf ("%s: dying due to interrupt %#04x (%s).\n",
c002e242:	0f b6 c0             	movzbl %al,%eax
c002e245:	83 ec 0c             	sub    $0xc,%esp
c002e248:	50                   	push   %eax
c002e249:	e8 dd 43 ff ff       	call   c002262b <intr_name>
c002e24e:	83 c4 10             	add    $0x10,%esp
c002e251:	89 c6                	mov    %eax,%esi
c002e253:	8b 45 08             	mov    0x8(%ebp),%eax
c002e256:	8b 58 30             	mov    0x30(%eax),%ebx
c002e259:	e8 7b 2c ff ff       	call   c0020ed9 <thread_name>
c002e25e:	56                   	push   %esi
c002e25f:	53                   	push   %ebx
c002e260:	50                   	push   %eax
c002e261:	68 e4 72 03 c0       	push   $0xc00372e4
c002e266:	e8 c5 9d ff ff       	call   c0028030 <printf>
c002e26b:	83 c4 10             	add    $0x10,%esp
      intr_dump_frame (f);
c002e26e:	83 ec 0c             	sub    $0xc,%esp
c002e271:	ff 75 08             	pushl  0x8(%ebp)
c002e274:	e8 c7 42 ff ff       	call   c0022540 <intr_dump_frame>
c002e279:	83 c4 10             	add    $0x10,%esp
      sys_exit(-1);
c002e27c:	83 ec 0c             	sub    $0xc,%esp
c002e27f:	6a ff                	push   $0xffffffff
c002e281:	e8 3f 09 00 00       	call   c002ebc5 <sys_exit>
c002e286:	83 c4 10             	add    $0x10,%esp
    case SEL_KCSEG:
      /* Kernel's code segment, which indicates a kernel bug.
         Kernel code shouldn't throw exceptions.  (Page faults
         may cause kernel exceptions--but they shouldn't arrive
         here.)  Panic the kernel to make the point.  */
      intr_dump_frame (f);
c002e289:	83 ec 0c             	sub    $0xc,%esp
c002e28c:	ff 75 08             	pushl  0x8(%ebp)
c002e28f:	e8 ac 42 ff ff       	call   c0022540 <intr_dump_frame>
c002e294:	83 c4 10             	add    $0x10,%esp
      PANIC ("Kernel bug - unexpected interrupt in kernel"); 
c002e297:	68 0c 73 03 c0       	push   $0xc003730c
c002e29c:	68 f0 73 03 c0       	push   $0xc00373f0
c002e2a1:	6a 6f                	push   $0x6f
c002e2a3:	68 38 73 03 c0       	push   $0xc0037338
c002e2a8:	e8 e4 c2 ff ff       	call   c002a591 <debug_panic>

    default:
      /* Some other code segment?  Shouldn't happen.  Panic the
         kernel. */
      printf ("Interrupt %#04x (%s) in unknown segment %04x\n",
             f->vec_no, intr_name (f->vec_no), f->cs);
c002e2ad:	8b 45 08             	mov    0x8(%ebp),%eax
c002e2b0:	8b 40 40             	mov    0x40(%eax),%eax
      printf ("Interrupt %#04x (%s) in unknown segment %04x\n",
c002e2b3:	0f b7 d8             	movzwl %ax,%ebx
             f->vec_no, intr_name (f->vec_no), f->cs);
c002e2b6:	8b 45 08             	mov    0x8(%ebp),%eax
c002e2b9:	8b 40 30             	mov    0x30(%eax),%eax
      printf ("Interrupt %#04x (%s) in unknown segment %04x\n",
c002e2bc:	0f b6 c0             	movzbl %al,%eax
c002e2bf:	83 ec 0c             	sub    $0xc,%esp
c002e2c2:	50                   	push   %eax
c002e2c3:	e8 63 43 ff ff       	call   c002262b <intr_name>
c002e2c8:	83 c4 10             	add    $0x10,%esp
c002e2cb:	89 c2                	mov    %eax,%edx
c002e2cd:	8b 45 08             	mov    0x8(%ebp),%eax
c002e2d0:	8b 40 30             	mov    0x30(%eax),%eax
c002e2d3:	53                   	push   %ebx
c002e2d4:	52                   	push   %edx
c002e2d5:	50                   	push   %eax
c002e2d6:	68 54 73 03 c0       	push   $0xc0037354
c002e2db:	e8 50 9d ff ff       	call   c0028030 <printf>
c002e2e0:	83 c4 10             	add    $0x10,%esp
      sys_exit(-1);
c002e2e3:	83 ec 0c             	sub    $0xc,%esp
c002e2e6:	6a ff                	push   $0xffffffff
c002e2e8:	e8 d8 08 00 00       	call   c002ebc5 <sys_exit>
c002e2ed:	83 c4 10             	add    $0x10,%esp
    }
}
c002e2f0:	90                   	nop
c002e2f1:	8d 65 f8             	lea    -0x8(%ebp),%esp
c002e2f4:	5b                   	pop    %ebx
c002e2f5:	5e                   	pop    %esi
c002e2f6:	5d                   	pop    %ebp
c002e2f7:	c3                   	ret    

c002e2f8 <page_fault>:
   can find more information about both of these in the
   description of "Interrupt 14--Page Fault Exception (#PF)" in
   [IA32-v3a] section 5.15 "Exception and Interrupt Reference". */
static void
page_fault (struct intr_frame *f) 
{
c002e2f8:	55                   	push   %ebp
c002e2f9:	89 e5                	mov    %esp,%ebp
c002e2fb:	83 ec 28             	sub    $0x28,%esp
     data.  It is not necessarily the address of the instruction
     that caused the fault (that's f->eip).
     See [IA32-v2a] "MOV--Move to/from Control Registers" and
     [IA32-v3a] 5.15 "Interrupt 14--Page Fault Exception
     (#PF)". */
  asm ("movl %%cr2, %0" : "=r" (fault_addr));
c002e2fe:	0f 20 d0             	mov    %cr2,%eax
c002e301:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Turn interrupts back on (they were only off so that we could
     be assured of reading CR2 before it changed). */
  intr_enable ();
c002e304:	e8 a5 3a ff ff       	call   c0021dae <intr_enable>

  /* Count page faults. */
  page_fault_cnt++;
c002e309:	a1 38 02 04 c0       	mov    0xc0040238,%eax
c002e30e:	8b 15 3c 02 04 c0    	mov    0xc004023c,%edx
c002e314:	83 c0 01             	add    $0x1,%eax
c002e317:	83 d2 00             	adc    $0x0,%edx
c002e31a:	a3 38 02 04 c0       	mov    %eax,0xc0040238
c002e31f:	89 15 3c 02 04 c0    	mov    %edx,0xc004023c

  /* Determine cause. */
  not_present = (f->error_code & PF_P) == 0;
c002e325:	8b 45 08             	mov    0x8(%ebp),%eax
c002e328:	8b 40 34             	mov    0x34(%eax),%eax
c002e32b:	83 e0 01             	and    $0x1,%eax
c002e32e:	85 c0                	test   %eax,%eax
c002e330:	0f 94 c0             	sete   %al
c002e333:	88 45 f3             	mov    %al,-0xd(%ebp)
  write = (f->error_code & PF_W) != 0;
c002e336:	8b 45 08             	mov    0x8(%ebp),%eax
c002e339:	8b 40 34             	mov    0x34(%eax),%eax
c002e33c:	83 e0 02             	and    $0x2,%eax
c002e33f:	85 c0                	test   %eax,%eax
c002e341:	0f 95 c0             	setne  %al
c002e344:	88 45 f2             	mov    %al,-0xe(%ebp)
  user = (f->error_code & PF_U) != 0;
c002e347:	8b 45 08             	mov    0x8(%ebp),%eax
c002e34a:	8b 40 34             	mov    0x34(%eax),%eax
c002e34d:	83 e0 04             	and    $0x4,%eax
c002e350:	85 c0                	test   %eax,%eax
c002e352:	0f 95 c0             	setne  %al
c002e355:	88 45 f1             	mov    %al,-0xf(%ebp)

#if VM
  struct thread * cur_thread = thread_current ();
c002e358:	e8 8c 2b ff ff       	call   c0020ee9 <thread_current>
c002e35d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  void *fault_page = (void*) pg_round_down(fault_addr);
c002e360:	83 ec 0c             	sub    $0xc,%esp
c002e363:	ff 75 f4             	pushl  -0xc(%ebp)
c002e366:	e8 1e fd ff ff       	call   c002e089 <pg_round_down>
c002e36b:	83 c4 10             	add    $0x10,%esp
c002e36e:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if(not_present){
c002e371:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c002e375:	0f 84 d4 00 00 00    	je     c002e44f <page_fault+0x157>
      void *esp = user ? f->esp : cur_thread->cur_esp;
c002e37b:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c002e37f:	74 08                	je     c002e389 <page_fault+0x91>
c002e381:	8b 45 08             	mov    0x8(%ebp),%eax
c002e384:	8b 40 48             	mov    0x48(%eax),%eax
c002e387:	eb 06                	jmp    c002e38f <page_fault+0x97>
c002e389:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002e38c:	8b 40 60             	mov    0x60(%eax),%eax
c002e38f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      bool frame_on_stack = (esp <= fault_addr || fault_addr == f->esp-4 || fault_addr == f->esp-32);
c002e392:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002e395:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002e398:	76 1c                	jbe    c002e3b6 <page_fault+0xbe>
c002e39a:	8b 45 08             	mov    0x8(%ebp),%eax
c002e39d:	8b 40 48             	mov    0x48(%eax),%eax
c002e3a0:	83 e8 04             	sub    $0x4,%eax
c002e3a3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002e3a6:	74 0e                	je     c002e3b6 <page_fault+0xbe>
c002e3a8:	8b 45 08             	mov    0x8(%ebp),%eax
c002e3ab:	8b 40 48             	mov    0x48(%eax),%eax
c002e3ae:	83 e8 20             	sub    $0x20,%eax
c002e3b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002e3b4:	75 07                	jne    c002e3bd <page_fault+0xc5>
c002e3b6:	b8 01 00 00 00       	mov    $0x1,%eax
c002e3bb:	eb 05                	jmp    c002e3c2 <page_fault+0xca>
c002e3bd:	b8 00 00 00 00       	mov    $0x0,%eax
c002e3c2:	88 45 e3             	mov    %al,-0x1d(%ebp)
c002e3c5:	80 65 e3 01          	andb   $0x1,-0x1d(%ebp)
      bool is_stack_addr = (PHYS_BASE-MAX_STACK_SIZE <= fault_addr && fault_addr < PHYS_BASE);
c002e3c9:	81 7d f4 ff ff 7f bf 	cmpl   $0xbf7fffff,-0xc(%ebp)
c002e3d0:	76 10                	jbe    c002e3e2 <page_fault+0xea>
c002e3d2:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c002e3d9:	77 07                	ja     c002e3e2 <page_fault+0xea>
c002e3db:	b8 01 00 00 00       	mov    $0x1,%eax
c002e3e0:	eb 05                	jmp    c002e3e7 <page_fault+0xef>
c002e3e2:	b8 00 00 00 00       	mov    $0x0,%eax
c002e3e7:	88 45 e2             	mov    %al,-0x1e(%ebp)
c002e3ea:	80 65 e2 01          	andb   $0x1,-0x1e(%ebp)
      if(frame_on_stack && is_stack_addr && !vm_supt_has_entry(cur_thread->supt, fault_page))
c002e3ee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
c002e3f2:	74 37                	je     c002e42b <page_fault+0x133>
c002e3f4:	80 7d e2 00          	cmpb   $0x0,-0x1e(%ebp)
c002e3f8:	74 31                	je     c002e42b <page_fault+0x133>
c002e3fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002e3fd:	8b 40 64             	mov    0x64(%eax),%eax
c002e400:	83 ec 08             	sub    $0x8,%esp
c002e403:	ff 75 e8             	pushl  -0x18(%ebp)
c002e406:	50                   	push   %eax
c002e407:	e8 0c 51 00 00       	call   c0033518 <vm_supt_has_entry>
c002e40c:	83 c4 10             	add    $0x10,%esp
c002e40f:	83 f0 01             	xor    $0x1,%eax
c002e412:	84 c0                	test   %al,%al
c002e414:	74 15                	je     c002e42b <page_fault+0x133>
          vm_supt_install_zeropage(cur_thread->supt, fault_page);
c002e416:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002e419:	8b 40 64             	mov    0x64(%eax),%eax
c002e41c:	83 ec 08             	sub    $0x8,%esp
c002e41f:	ff 75 e8             	pushl  -0x18(%ebp)
c002e422:	50                   	push   %eax
c002e423:	e8 6b 4f 00 00       	call   c0033393 <vm_supt_install_zeropage>
c002e428:	83 c4 10             	add    $0x10,%esp
      if(vm_load_page(cur_thread->supt, cur_thread->pagedir, fault_page))
c002e42b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002e42e:	8b 50 30             	mov    0x30(%eax),%edx
c002e431:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002e434:	8b 40 64             	mov    0x64(%eax),%eax
c002e437:	83 ec 04             	sub    $0x4,%esp
c002e43a:	ff 75 e8             	pushl  -0x18(%ebp)
c002e43d:	52                   	push   %edx
c002e43e:	50                   	push   %eax
c002e43f:	e8 f8 51 00 00       	call   c003363c <vm_load_page>
c002e444:	83 c4 10             	add    $0x10,%esp
c002e447:	84 c0                	test   %al,%al
c002e449:	0f 85 80 00 00 00    	jne    c002e4cf <page_fault+0x1d7>
          return;
  }

#endif
   if(!user) { // as described in pintos book
c002e44f:	8a 45 f1             	mov    -0xf(%ebp),%al
c002e452:	83 f0 01             	xor    $0x1,%eax
c002e455:	84 c0                	test   %al,%al
c002e457:	74 1a                	je     c002e473 <page_fault+0x17b>
      f->eip = (void *) f->eax;
c002e459:	8b 45 08             	mov    0x8(%ebp),%eax
c002e45c:	8b 40 1c             	mov    0x1c(%eax),%eax
c002e45f:	89 c2                	mov    %eax,%edx
c002e461:	8b 45 08             	mov    0x8(%ebp),%eax
c002e464:	89 50 3c             	mov    %edx,0x3c(%eax)
      f->eax = 0xffffffff;
c002e467:	8b 45 08             	mov    0x8(%ebp),%eax
c002e46a:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
      return;
c002e471:	eb 5d                	jmp    c002e4d0 <page_fault+0x1d8>
//    set_exit_status(-1);

  /* To implement virtual memory, delete the rest of the function
     body, and replace it with code that brings in the page to
     which fault_addr refers. */
  printf ("Page fault at %p: %s error %s page in %s context.\n",
c002e473:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c002e477:	74 07                	je     c002e480 <page_fault+0x188>
c002e479:	b9 82 73 03 c0       	mov    $0xc0037382,%ecx
c002e47e:	eb 05                	jmp    c002e485 <page_fault+0x18d>
c002e480:	b9 87 73 03 c0       	mov    $0xc0037387,%ecx
c002e485:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c002e489:	74 07                	je     c002e492 <page_fault+0x19a>
c002e48b:	ba 8e 73 03 c0       	mov    $0xc003738e,%edx
c002e490:	eb 05                	jmp    c002e497 <page_fault+0x19f>
c002e492:	ba 96 73 03 c0       	mov    $0xc0037396,%edx
c002e497:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c002e49b:	74 07                	je     c002e4a4 <page_fault+0x1ac>
c002e49d:	b8 9e 73 03 c0       	mov    $0xc003739e,%eax
c002e4a2:	eb 05                	jmp    c002e4a9 <page_fault+0x1b1>
c002e4a4:	b8 aa 73 03 c0       	mov    $0xc00373aa,%eax
c002e4a9:	83 ec 0c             	sub    $0xc,%esp
c002e4ac:	51                   	push   %ecx
c002e4ad:	52                   	push   %edx
c002e4ae:	50                   	push   %eax
c002e4af:	ff 75 f4             	pushl  -0xc(%ebp)
c002e4b2:	68 bc 73 03 c0       	push   $0xc00373bc
c002e4b7:	e8 74 9b ff ff       	call   c0028030 <printf>
c002e4bc:	83 c4 20             	add    $0x20,%esp
          fault_addr,
          not_present ? "not present" : "rights violation",
          write ? "writing" : "reading",
          user ? "user" : "kernel");
  kill (f);
c002e4bf:	83 ec 0c             	sub    $0xc,%esp
c002e4c2:	ff 75 08             	pushl  0x8(%ebp)
c002e4c5:	e8 5a fd ff ff       	call   c002e224 <kill>
c002e4ca:	83 c4 10             	add    $0x10,%esp
c002e4cd:	eb 01                	jmp    c002e4d0 <page_fault+0x1d8>
          return;
c002e4cf:	90                   	nop
}
c002e4d0:	c9                   	leave  
c002e4d1:	c3                   	ret    

c002e4d2 <pg_ofs>:
static inline unsigned pg_ofs (const void *va) {
c002e4d2:	55                   	push   %ebp
c002e4d3:	89 e5                	mov    %esp,%ebp
  return (uintptr_t) va & PGMASK;
c002e4d5:	8b 45 08             	mov    0x8(%ebp),%eax
c002e4d8:	25 ff 0f 00 00       	and    $0xfff,%eax
}
c002e4dd:	5d                   	pop    %ebp
c002e4de:	c3                   	ret    

c002e4df <pg_round_down>:
static inline void *pg_round_down (const void *va) {
c002e4df:	55                   	push   %ebp
c002e4e0:	89 e5                	mov    %esp,%ebp
  return (void *) ((uintptr_t) va & ~PGMASK);
c002e4e2:	8b 45 08             	mov    0x8(%ebp),%eax
c002e4e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
c002e4ea:	5d                   	pop    %ebp
c002e4eb:	c3                   	ret    

c002e4ec <is_user_vaddr>:
{
c002e4ec:	55                   	push   %ebp
c002e4ed:	89 e5                	mov    %esp,%ebp
  return vaddr < PHYS_BASE;
c002e4ef:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002e4f6:	0f 96 c0             	setbe  %al
}
c002e4f9:	5d                   	pop    %ebp
c002e4fa:	c3                   	ret    

c002e4fb <get_file_descriptor>:
static struct file_descriptor* get_file_descriptor(struct thread* cur, int fd, int type);
//type = 0 for all  1 for file 2 for directory

struct lock fileSys_lock;

static struct file_descriptor* get_file_descriptor(struct thread* cur, int fd, int type){
c002e4fb:	55                   	push   %ebp
c002e4fc:	89 e5                	mov    %esp,%ebp
c002e4fe:	83 ec 18             	sub    $0x18,%esp
  if (fd < 3) 
c002e501:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
c002e505:	7f 0a                	jg     c002e511 <get_file_descriptor+0x16>
    return NULL; // should not happen
c002e507:	b8 00 00 00 00       	mov    $0x0,%eax
c002e50c:	e9 af 00 00 00       	jmp    c002e5c0 <get_file_descriptor+0xc5>
  struct list_elem *elem = NULL;
c002e511:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  if (! list_empty(&cur->opened_files)) {
c002e518:	8b 45 08             	mov    0x8(%ebp),%eax
c002e51b:	83 c0 44             	add    $0x44,%eax
c002e51e:	83 ec 0c             	sub    $0xc,%esp
c002e521:	50                   	push   %eax
c002e522:	e8 65 c8 ff ff       	call   c002ad8c <list_empty>
c002e527:	83 c4 10             	add    $0x10,%esp
c002e52a:	83 f0 01             	xor    $0x1,%eax
c002e52d:	84 c0                	test   %al,%al
c002e52f:	0f 84 86 00 00 00    	je     c002e5bb <get_file_descriptor+0xc0>
    for ( elem = list_begin(&cur->opened_files); 
c002e535:	8b 45 08             	mov    0x8(%ebp),%eax
c002e538:	83 c0 44             	add    $0x44,%eax
c002e53b:	83 ec 0c             	sub    $0xc,%esp
c002e53e:	50                   	push   %eax
c002e53f:	e8 15 c3 ff ff       	call   c002a859 <list_begin>
c002e544:	83 c4 10             	add    $0x10,%esp
c002e547:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002e54a:	eb 58                	jmp    c002e5a4 <get_file_descriptor+0xa9>
          elem != list_end(&cur->opened_files); 
          elem = list_next(elem)) 
    {
      struct file_descriptor *fileD = 
      list_entry(elem, struct file_descriptor, elem);
c002e54c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e54f:	83 c0 04             	add    $0x4,%eax
      struct file_descriptor *fileD = 
c002e552:	83 e8 0c             	sub    $0xc,%eax
c002e555:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(fileD->fdID == fd) {
c002e558:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e55b:	8b 00                	mov    (%eax),%eax
c002e55d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002e560:	75 31                	jne    c002e593 <get_file_descriptor+0x98>
        if (fileD->dir != NULL && type != 1) 
c002e562:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e565:	8b 40 10             	mov    0x10(%eax),%eax
c002e568:	85 c0                	test   %eax,%eax
c002e56a:	74 0b                	je     c002e577 <get_file_descriptor+0x7c>
c002e56c:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c002e570:	74 05                	je     c002e577 <get_file_descriptor+0x7c>
          return fileD;
c002e572:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e575:	eb 49                	jmp    c002e5c0 <get_file_descriptor+0xc5>
        else if (fileD->dir == NULL && type != 2)
c002e577:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e57a:	8b 40 10             	mov    0x10(%eax),%eax
c002e57d:	85 c0                	test   %eax,%eax
c002e57f:	75 0b                	jne    c002e58c <get_file_descriptor+0x91>
c002e581:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
c002e585:	74 05                	je     c002e58c <get_file_descriptor+0x91>
          return fileD;
c002e587:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e58a:	eb 34                	jmp    c002e5c0 <get_file_descriptor+0xc5>
        return NULL;
c002e58c:	b8 00 00 00 00       	mov    $0x0,%eax
c002e591:	eb 2d                	jmp    c002e5c0 <get_file_descriptor+0xc5>
          elem = list_next(elem)) 
c002e593:	83 ec 0c             	sub    $0xc,%esp
c002e596:	ff 75 f4             	pushl  -0xc(%ebp)
c002e599:	e8 ed c2 ff ff       	call   c002a88b <list_next>
c002e59e:	83 c4 10             	add    $0x10,%esp
c002e5a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
          elem != list_end(&cur->opened_files); 
c002e5a4:	8b 45 08             	mov    0x8(%ebp),%eax
c002e5a7:	83 c0 44             	add    $0x44,%eax
c002e5aa:	83 ec 0c             	sub    $0xc,%esp
c002e5ad:	50                   	push   %eax
c002e5ae:	e8 22 c3 ff ff       	call   c002a8d5 <list_end>
c002e5b3:	83 c4 10             	add    $0x10,%esp
    for ( elem = list_begin(&cur->opened_files); 
c002e5b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002e5b9:	75 91                	jne    c002e54c <get_file_descriptor+0x51>
      }
    } 
  }
  return NULL;
c002e5bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c002e5c0:	c9                   	leave  
c002e5c1:	c3                   	ret    

c002e5c2 <syscall_init>:

void
syscall_init (void) 
{
c002e5c2:	55                   	push   %ebp
c002e5c3:	89 e5                	mov    %esp,%ebp
c002e5c5:	83 ec 08             	sub    $0x8,%esp
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
c002e5c8:	83 ec 0c             	sub    $0xc,%esp
c002e5cb:	68 f8 73 03 c0       	push   $0xc00373f8
c002e5d0:	68 f6 e5 02 c0       	push   $0xc002e5f6
c002e5d5:	6a 01                	push   $0x1
c002e5d7:	6a 03                	push   $0x3
c002e5d9:	6a 30                	push   $0x30
c002e5db:	e8 83 3a ff ff       	call   c0022063 <intr_register_int>
c002e5e0:	83 c4 20             	add    $0x20,%esp
  lock_init(&fileSys_lock);
c002e5e3:	83 ec 0c             	sub    $0xc,%esp
c002e5e6:	68 60 87 04 c0       	push   $0xc0048760
c002e5eb:	e8 f1 4e ff ff       	call   c00234e1 <lock_init>
c002e5f0:	83 c4 10             	add    $0x10,%esp
}
c002e5f3:	90                   	nop
c002e5f4:	c9                   	leave  
c002e5f5:	c3                   	ret    

c002e5f6 <syscall_handler>:

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
c002e5f6:	55                   	push   %ebp
c002e5f7:	89 e5                	mov    %esp,%ebp
c002e5f9:	81 ec a8 00 00 00    	sub    $0xa8,%esp
  int syscall_num;
  mem_read(f->esp, &syscall_num, sizeof(int));
c002e5ff:	8b 45 08             	mov    0x8(%ebp),%eax
c002e602:	8b 40 48             	mov    0x48(%eax),%eax
c002e605:	83 ec 04             	sub    $0x4,%esp
c002e608:	6a 04                	push   $0x4
c002e60a:	8d 55 d0             	lea    -0x30(%ebp),%edx
c002e60d:	52                   	push   %edx
c002e60e:	50                   	push   %eax
c002e60f:	e8 b0 0c 00 00       	call   c002f2c4 <mem_read>
c002e614:	83 c4 10             	add    $0x10,%esp
  thread_current()->cur_esp = f->esp;
c002e617:	e8 cd 28 ff ff       	call   c0020ee9 <thread_current>
c002e61c:	8b 55 08             	mov    0x8(%ebp),%edx
c002e61f:	8b 52 48             	mov    0x48(%edx),%edx
c002e622:	89 50 60             	mov    %edx,0x60(%eax)
  switch (syscall_num) {
c002e625:	8b 45 d0             	mov    -0x30(%ebp),%eax
c002e628:	83 f8 13             	cmp    $0x13,%eax
c002e62b:	0f 87 65 05 00 00    	ja     c002eb96 <syscall_handler+0x5a0>
c002e631:	8b 04 85 20 74 03 c0 	mov    -0x3ffc8be0(,%eax,4),%eax
c002e638:	ff e0                	jmp    *%eax
    case SYS_HALT:
    {
      sys_halt();
c002e63a:	e8 78 05 00 00       	call   c002ebb7 <sys_halt>
      break;
c002e63f:	e9 70 05 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    }

    case SYS_EXIT:
    {
      int retVal;
      mem_read(f->esp + 4, &retVal, sizeof(int)); // 1 arg
c002e644:	8b 45 08             	mov    0x8(%ebp),%eax
c002e647:	8b 40 48             	mov    0x48(%eax),%eax
c002e64a:	8d 50 04             	lea    0x4(%eax),%edx
c002e64d:	83 ec 04             	sub    $0x4,%esp
c002e650:	6a 04                	push   $0x4
c002e652:	8d 45 cc             	lea    -0x34(%ebp),%eax
c002e655:	50                   	push   %eax
c002e656:	52                   	push   %edx
c002e657:	e8 68 0c 00 00       	call   c002f2c4 <mem_read>
c002e65c:	83 c4 10             	add    $0x10,%esp
      sys_exit(retVal);
c002e65f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002e662:	83 ec 0c             	sub    $0xc,%esp
c002e665:	50                   	push   %eax
c002e666:	e8 5a 05 00 00       	call   c002ebc5 <sys_exit>
c002e66b:	83 c4 10             	add    $0x10,%esp
      break;
c002e66e:	90                   	nop
c002e66f:	e9 40 05 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    }

    case SYS_EXEC:
    {
      char* cmd_line;
      mem_read(f->esp + 4, &cmd_line, sizeof(cmd_line)); // 1 arg
c002e674:	8b 45 08             	mov    0x8(%ebp),%eax
c002e677:	8b 40 48             	mov    0x48(%eax),%eax
c002e67a:	8d 50 04             	lea    0x4(%eax),%edx
c002e67d:	83 ec 04             	sub    $0x4,%esp
c002e680:	6a 04                	push   $0x4
c002e682:	8d 45 c8             	lea    -0x38(%ebp),%eax
c002e685:	50                   	push   %eax
c002e686:	52                   	push   %edx
c002e687:	e8 38 0c 00 00       	call   c002f2c4 <mem_read>
c002e68c:	83 c4 10             	add    $0x10,%esp

      int res = sys_exec((const char*) cmd_line);
c002e68f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c002e692:	83 ec 0c             	sub    $0xc,%esp
c002e695:	50                   	push   %eax
c002e696:	e8 63 05 00 00       	call   c002ebfe <sys_exec>
c002e69b:	83 c4 10             	add    $0x10,%esp
c002e69e:	89 45 f4             	mov    %eax,-0xc(%ebp)
      f->eax = res; // set ret value
c002e6a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002e6a4:	8b 45 08             	mov    0x8(%ebp),%eax
c002e6a7:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e6aa:	90                   	nop
c002e6ab:	e9 04 05 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    
    case SYS_WAIT:
    {
      // pid_t pid;
      int pid;
      mem_read(f->esp + 4, &pid, sizeof(pid));
c002e6b0:	8b 45 08             	mov    0x8(%ebp),%eax
c002e6b3:	8b 40 48             	mov    0x48(%eax),%eax
c002e6b6:	8d 50 04             	lea    0x4(%eax),%edx
c002e6b9:	83 ec 04             	sub    $0x4,%esp
c002e6bc:	6a 04                	push   $0x4
c002e6be:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c002e6c1:	50                   	push   %eax
c002e6c2:	52                   	push   %edx
c002e6c3:	e8 fc 0b 00 00       	call   c002f2c4 <mem_read>
c002e6c8:	83 c4 10             	add    $0x10,%esp

      int res = sys_wait(pid);
c002e6cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c002e6ce:	83 ec 0c             	sub    $0xc,%esp
c002e6d1:	50                   	push   %eax
c002e6d2:	e8 cc 06 00 00       	call   c002eda3 <sys_wait>
c002e6d7:	83 c4 10             	add    $0x10,%esp
c002e6da:	89 45 f0             	mov    %eax,-0x10(%ebp)
      f->eax = res;
c002e6dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002e6e0:	8b 45 08             	mov    0x8(%ebp),%eax
c002e6e3:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e6e6:	90                   	nop
c002e6e7:	e9 c8 04 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    {
      char* file;
      unsigned initial_size;
      bool res;

      mem_read(f->esp + 4, &file, sizeof(file));
c002e6ec:	8b 45 08             	mov    0x8(%ebp),%eax
c002e6ef:	8b 40 48             	mov    0x48(%eax),%eax
c002e6f2:	8d 50 04             	lea    0x4(%eax),%edx
c002e6f5:	83 ec 04             	sub    $0x4,%esp
c002e6f8:	6a 04                	push   $0x4
c002e6fa:	8d 45 c0             	lea    -0x40(%ebp),%eax
c002e6fd:	50                   	push   %eax
c002e6fe:	52                   	push   %edx
c002e6ff:	e8 c0 0b 00 00       	call   c002f2c4 <mem_read>
c002e704:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &initial_size, sizeof(initial_size));
c002e707:	8b 45 08             	mov    0x8(%ebp),%eax
c002e70a:	8b 40 48             	mov    0x48(%eax),%eax
c002e70d:	8d 50 08             	lea    0x8(%eax),%edx
c002e710:	83 ec 04             	sub    $0x4,%esp
c002e713:	6a 04                	push   $0x4
c002e715:	8d 45 bc             	lea    -0x44(%ebp),%eax
c002e718:	50                   	push   %eax
c002e719:	52                   	push   %edx
c002e71a:	e8 a5 0b 00 00       	call   c002f2c4 <mem_read>
c002e71f:	83 c4 10             	add    $0x10,%esp

      res = sys_create(file, initial_size);
c002e722:	8b 55 bc             	mov    -0x44(%ebp),%edx
c002e725:	8b 45 c0             	mov    -0x40(%ebp),%eax
c002e728:	83 ec 08             	sub    $0x8,%esp
c002e72b:	52                   	push   %edx
c002e72c:	50                   	push   %eax
c002e72d:	e8 23 06 00 00       	call   c002ed55 <sys_create>
c002e732:	83 c4 10             	add    $0x10,%esp
c002e735:	88 45 ef             	mov    %al,-0x11(%ebp)
      f->eax = res;
c002e738:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c002e73c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e73f:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e742:	90                   	nop
c002e743:	e9 6c 04 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>

    case SYS_REMOVE:
    {
      char* file;
      bool res;
      mem_read(f->esp+4, &file, sizeof(file));
c002e748:	8b 45 08             	mov    0x8(%ebp),%eax
c002e74b:	8b 40 48             	mov    0x48(%eax),%eax
c002e74e:	8d 50 04             	lea    0x4(%eax),%edx
c002e751:	83 ec 04             	sub    $0x4,%esp
c002e754:	6a 04                	push   $0x4
c002e756:	8d 45 b8             	lea    -0x48(%ebp),%eax
c002e759:	50                   	push   %eax
c002e75a:	52                   	push   %edx
c002e75b:	e8 64 0b 00 00       	call   c002f2c4 <mem_read>
c002e760:	83 c4 10             	add    $0x10,%esp
      res = sys_remove(file);
c002e763:	8b 45 b8             	mov    -0x48(%ebp),%eax
c002e766:	83 ec 0c             	sub    $0xc,%esp
c002e769:	50                   	push   %eax
c002e76a:	e8 4a 06 00 00       	call   c002edb9 <sys_remove>
c002e76f:	83 c4 10             	add    $0x10,%esp
c002e772:	88 45 ee             	mov    %al,-0x12(%ebp)
      f->eax = res;
c002e775:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
c002e779:	8b 45 08             	mov    0x8(%ebp),%eax
c002e77c:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e77f:	90                   	nop
c002e780:	e9 2f 04 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>

    case SYS_OPEN:
    {
      char* file;
      int res;
      mem_read(f->esp+4, &file, sizeof(file));
c002e785:	8b 45 08             	mov    0x8(%ebp),%eax
c002e788:	8b 40 48             	mov    0x48(%eax),%eax
c002e78b:	8d 50 04             	lea    0x4(%eax),%edx
c002e78e:	83 ec 04             	sub    $0x4,%esp
c002e791:	6a 04                	push   $0x4
c002e793:	8d 45 b4             	lea    -0x4c(%ebp),%eax
c002e796:	50                   	push   %eax
c002e797:	52                   	push   %edx
c002e798:	e8 27 0b 00 00       	call   c002f2c4 <mem_read>
c002e79d:	83 c4 10             	add    $0x10,%esp
      res = sys_open(file);
c002e7a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c002e7a3:	83 ec 0c             	sub    $0xc,%esp
c002e7a6:	50                   	push   %eax
c002e7a7:	e8 57 06 00 00       	call   c002ee03 <sys_open>
c002e7ac:	83 c4 10             	add    $0x10,%esp
c002e7af:	89 45 e8             	mov    %eax,-0x18(%ebp)
      f->eax = res;
c002e7b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c002e7b5:	8b 45 08             	mov    0x8(%ebp),%eax
c002e7b8:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e7bb:	90                   	nop
c002e7bc:	e9 f3 03 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>

    case SYS_FILESIZE:
    {
      int fd;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e7c1:	8b 45 08             	mov    0x8(%ebp),%eax
c002e7c4:	8b 40 48             	mov    0x48(%eax),%eax
c002e7c7:	8d 50 04             	lea    0x4(%eax),%edx
c002e7ca:	83 ec 04             	sub    $0x4,%esp
c002e7cd:	6a 04                	push   $0x4
c002e7cf:	8d 45 b0             	lea    -0x50(%ebp),%eax
c002e7d2:	50                   	push   %eax
c002e7d3:	52                   	push   %edx
c002e7d4:	e8 eb 0a 00 00       	call   c002f2c4 <mem_read>
c002e7d9:	83 c4 10             	add    $0x10,%esp
      res = sys_filesize(fd);
c002e7dc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c002e7df:	83 ec 0c             	sub    $0xc,%esp
c002e7e2:	50                   	push   %eax
c002e7e3:	e8 7f 07 00 00       	call   c002ef67 <sys_filesize>
c002e7e8:	83 c4 10             	add    $0x10,%esp
c002e7eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      f->eax = res;
c002e7ee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002e7f1:	8b 45 08             	mov    0x8(%ebp),%eax
c002e7f4:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e7f7:	90                   	nop
c002e7f8:	e9 b7 03 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    {
      int fd;
      void *buffer;
      unsigned size;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e7fd:	8b 45 08             	mov    0x8(%ebp),%eax
c002e800:	8b 40 48             	mov    0x48(%eax),%eax
c002e803:	8d 50 04             	lea    0x4(%eax),%edx
c002e806:	83 ec 04             	sub    $0x4,%esp
c002e809:	6a 04                	push   $0x4
c002e80b:	8d 45 ac             	lea    -0x54(%ebp),%eax
c002e80e:	50                   	push   %eax
c002e80f:	52                   	push   %edx
c002e810:	e8 af 0a 00 00       	call   c002f2c4 <mem_read>
c002e815:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &buffer, sizeof(buffer));
c002e818:	8b 45 08             	mov    0x8(%ebp),%eax
c002e81b:	8b 40 48             	mov    0x48(%eax),%eax
c002e81e:	8d 50 08             	lea    0x8(%eax),%edx
c002e821:	83 ec 04             	sub    $0x4,%esp
c002e824:	6a 04                	push   $0x4
c002e826:	8d 45 a8             	lea    -0x58(%ebp),%eax
c002e829:	50                   	push   %eax
c002e82a:	52                   	push   %edx
c002e82b:	e8 94 0a 00 00       	call   c002f2c4 <mem_read>
c002e830:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 12, &size, sizeof(size));
c002e833:	8b 45 08             	mov    0x8(%ebp),%eax
c002e836:	8b 40 48             	mov    0x48(%eax),%eax
c002e839:	8d 50 0c             	lea    0xc(%eax),%edx
c002e83c:	83 ec 04             	sub    $0x4,%esp
c002e83f:	6a 04                	push   $0x4
c002e841:	8d 45 a4             	lea    -0x5c(%ebp),%eax
c002e844:	50                   	push   %eax
c002e845:	52                   	push   %edx
c002e846:	e8 79 0a 00 00       	call   c002f2c4 <mem_read>
c002e84b:	83 c4 10             	add    $0x10,%esp
      res = sys_read(fd, buffer, size);
c002e84e:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c002e851:	8b 55 a8             	mov    -0x58(%ebp),%edx
c002e854:	8b 45 ac             	mov    -0x54(%ebp),%eax
c002e857:	83 ec 04             	sub    $0x4,%esp
c002e85a:	51                   	push   %ecx
c002e85b:	52                   	push   %edx
c002e85c:	50                   	push   %eax
c002e85d:	e8 6b 07 00 00       	call   c002efcd <sys_read>
c002e862:	83 c4 10             	add    $0x10,%esp
c002e865:	89 45 e0             	mov    %eax,-0x20(%ebp)
      f->eax = res;
c002e868:	8b 55 e0             	mov    -0x20(%ebp),%edx
c002e86b:	8b 45 08             	mov    0x8(%ebp),%eax
c002e86e:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e871:	90                   	nop
c002e872:	e9 3d 03 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    {
      int fd;
      void *buffer;
      unsigned size;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e877:	8b 45 08             	mov    0x8(%ebp),%eax
c002e87a:	8b 40 48             	mov    0x48(%eax),%eax
c002e87d:	8d 50 04             	lea    0x4(%eax),%edx
c002e880:	83 ec 04             	sub    $0x4,%esp
c002e883:	6a 04                	push   $0x4
c002e885:	8d 45 a0             	lea    -0x60(%ebp),%eax
c002e888:	50                   	push   %eax
c002e889:	52                   	push   %edx
c002e88a:	e8 35 0a 00 00       	call   c002f2c4 <mem_read>
c002e88f:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &buffer, sizeof(buffer));
c002e892:	8b 45 08             	mov    0x8(%ebp),%eax
c002e895:	8b 40 48             	mov    0x48(%eax),%eax
c002e898:	8d 50 08             	lea    0x8(%eax),%edx
c002e89b:	83 ec 04             	sub    $0x4,%esp
c002e89e:	6a 04                	push   $0x4
c002e8a0:	8d 45 9c             	lea    -0x64(%ebp),%eax
c002e8a3:	50                   	push   %eax
c002e8a4:	52                   	push   %edx
c002e8a5:	e8 1a 0a 00 00       	call   c002f2c4 <mem_read>
c002e8aa:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 12, &size, sizeof(size));
c002e8ad:	8b 45 08             	mov    0x8(%ebp),%eax
c002e8b0:	8b 40 48             	mov    0x48(%eax),%eax
c002e8b3:	8d 50 0c             	lea    0xc(%eax),%edx
c002e8b6:	83 ec 04             	sub    $0x4,%esp
c002e8b9:	6a 04                	push   $0x4
c002e8bb:	8d 45 98             	lea    -0x68(%ebp),%eax
c002e8be:	50                   	push   %eax
c002e8bf:	52                   	push   %edx
c002e8c0:	e8 ff 09 00 00       	call   c002f2c4 <mem_read>
c002e8c5:	83 c4 10             	add    $0x10,%esp
      res = sys_write(fd, buffer, size);
c002e8c8:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c002e8cb:	8b 55 9c             	mov    -0x64(%ebp),%edx
c002e8ce:	8b 45 a0             	mov    -0x60(%ebp),%eax
c002e8d1:	83 ec 04             	sub    $0x4,%esp
c002e8d4:	51                   	push   %ecx
c002e8d5:	52                   	push   %edx
c002e8d6:	50                   	push   %eax
c002e8d7:	e8 9c 03 00 00       	call   c002ec78 <sys_write>
c002e8dc:	83 c4 10             	add    $0x10,%esp
c002e8df:	89 45 dc             	mov    %eax,-0x24(%ebp)
      f->eax = res;
c002e8e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c002e8e5:	8b 45 08             	mov    0x8(%ebp),%eax
c002e8e8:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e8eb:	90                   	nop
c002e8ec:	e9 c3 02 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>

    case SYS_SEEK:
    {
      int fd;
      unsigned position;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e8f1:	8b 45 08             	mov    0x8(%ebp),%eax
c002e8f4:	8b 40 48             	mov    0x48(%eax),%eax
c002e8f7:	8d 50 04             	lea    0x4(%eax),%edx
c002e8fa:	83 ec 04             	sub    $0x4,%esp
c002e8fd:	6a 04                	push   $0x4
c002e8ff:	8d 45 94             	lea    -0x6c(%ebp),%eax
c002e902:	50                   	push   %eax
c002e903:	52                   	push   %edx
c002e904:	e8 bb 09 00 00       	call   c002f2c4 <mem_read>
c002e909:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &position, sizeof(position));
c002e90c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e90f:	8b 40 48             	mov    0x48(%eax),%eax
c002e912:	8d 50 08             	lea    0x8(%eax),%edx
c002e915:	83 ec 04             	sub    $0x4,%esp
c002e918:	6a 04                	push   $0x4
c002e91a:	8d 45 90             	lea    -0x70(%ebp),%eax
c002e91d:	50                   	push   %eax
c002e91e:	52                   	push   %edx
c002e91f:	e8 a0 09 00 00       	call   c002f2c4 <mem_read>
c002e924:	83 c4 10             	add    $0x10,%esp
      sys_seek(fd, position);
c002e927:	8b 55 90             	mov    -0x70(%ebp),%edx
c002e92a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c002e92d:	83 ec 08             	sub    $0x8,%esp
c002e930:	52                   	push   %edx
c002e931:	50                   	push   %eax
c002e932:	e8 c0 07 00 00       	call   c002f0f7 <sys_seek>
c002e937:	83 c4 10             	add    $0x10,%esp
      break;
c002e93a:	90                   	nop
c002e93b:	e9 74 02 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>

    case SYS_TELL:
    {
      int fd;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e940:	8b 45 08             	mov    0x8(%ebp),%eax
c002e943:	8b 40 48             	mov    0x48(%eax),%eax
c002e946:	8d 50 04             	lea    0x4(%eax),%edx
c002e949:	83 ec 04             	sub    $0x4,%esp
c002e94c:	6a 04                	push   $0x4
c002e94e:	8d 45 8c             	lea    -0x74(%ebp),%eax
c002e951:	50                   	push   %eax
c002e952:	52                   	push   %edx
c002e953:	e8 6c 09 00 00       	call   c002f2c4 <mem_read>
c002e958:	83 c4 10             	add    $0x10,%esp
      res = sys_tell(fd);
c002e95b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c002e95e:	83 ec 0c             	sub    $0xc,%esp
c002e961:	50                   	push   %eax
c002e962:	e8 17 08 00 00       	call   c002f17e <sys_tell>
c002e967:	83 c4 10             	add    $0x10,%esp
c002e96a:	89 45 d8             	mov    %eax,-0x28(%ebp)
      f->eax = res;
c002e96d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c002e970:	8b 45 08             	mov    0x8(%ebp),%eax
c002e973:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e976:	90                   	nop
c002e977:	e9 38 02 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    }

    case SYS_CLOSE:
    {
      int fd;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e97c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e97f:	8b 40 48             	mov    0x48(%eax),%eax
c002e982:	8d 50 04             	lea    0x4(%eax),%edx
c002e985:	83 ec 04             	sub    $0x4,%esp
c002e988:	6a 04                	push   $0x4
c002e98a:	8d 45 88             	lea    -0x78(%ebp),%eax
c002e98d:	50                   	push   %eax
c002e98e:	52                   	push   %edx
c002e98f:	e8 30 09 00 00       	call   c002f2c4 <mem_read>
c002e994:	83 c4 10             	add    $0x10,%esp
      sys_close(fd);
c002e997:	8b 45 88             	mov    -0x78(%ebp),%eax
c002e99a:	83 ec 0c             	sub    $0xc,%esp
c002e99d:	50                   	push   %eax
c002e99e:	e8 4b 08 00 00       	call   c002f1ee <sys_close>
c002e9a3:	83 c4 10             	add    $0x10,%esp
      break;
c002e9a6:	90                   	nop
c002e9a7:	e9 08 02 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
#ifdef VM
    case SYS_MMAP:
    {
      int fd;
      void *addr;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e9ac:	8b 45 08             	mov    0x8(%ebp),%eax
c002e9af:	8b 40 48             	mov    0x48(%eax),%eax
c002e9b2:	8d 50 04             	lea    0x4(%eax),%edx
c002e9b5:	83 ec 04             	sub    $0x4,%esp
c002e9b8:	6a 04                	push   $0x4
c002e9ba:	8d 45 84             	lea    -0x7c(%ebp),%eax
c002e9bd:	50                   	push   %eax
c002e9be:	52                   	push   %edx
c002e9bf:	e8 00 09 00 00       	call   c002f2c4 <mem_read>
c002e9c4:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &addr, sizeof(addr));
c002e9c7:	8b 45 08             	mov    0x8(%ebp),%eax
c002e9ca:	8b 40 48             	mov    0x48(%eax),%eax
c002e9cd:	8d 50 08             	lea    0x8(%eax),%edx
c002e9d0:	83 ec 04             	sub    $0x4,%esp
c002e9d3:	6a 04                	push   $0x4
c002e9d5:	8d 45 80             	lea    -0x80(%ebp),%eax
c002e9d8:	50                   	push   %eax
c002e9d9:	52                   	push   %edx
c002e9da:	e8 e5 08 00 00       	call   c002f2c4 <mem_read>
c002e9df:	83 c4 10             	add    $0x10,%esp
      mmapid_t res = sys_mmap (fd, addr);
c002e9e2:	8b 55 80             	mov    -0x80(%ebp),%edx
c002e9e5:	8b 45 84             	mov    -0x7c(%ebp),%eax
c002e9e8:	83 ec 08             	sub    $0x8,%esp
c002e9eb:	52                   	push   %edx
c002e9ec:	50                   	push   %eax
c002e9ed:	e8 91 0a 00 00       	call   c002f483 <sys_mmap>
c002e9f2:	83 c4 10             	add    $0x10,%esp
c002e9f5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
      f->eax = res;
c002e9f8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c002e9fb:	8b 45 08             	mov    0x8(%ebp),%eax
c002e9fe:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002ea01:	90                   	nop
c002ea02:	e9 ad 01 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    }

      case SYS_MUNMAP:
      {
        mmapid_t mid;
        mem_read(f->esp + 4, &mid, sizeof(mid));
c002ea07:	8b 45 08             	mov    0x8(%ebp),%eax
c002ea0a:	8b 40 48             	mov    0x48(%eax),%eax
c002ea0d:	8d 50 04             	lea    0x4(%eax),%edx
c002ea10:	83 ec 04             	sub    $0x4,%esp
c002ea13:	6a 04                	push   $0x4
c002ea15:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
c002ea1b:	50                   	push   %eax
c002ea1c:	52                   	push   %edx
c002ea1d:	e8 a2 08 00 00       	call   c002f2c4 <mem_read>
c002ea22:	83 c4 10             	add    $0x10,%esp
        sys_munmap(mid);
c002ea25:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c002ea2b:	83 ec 0c             	sub    $0xc,%esp
c002ea2e:	50                   	push   %eax
c002ea2f:	e8 53 09 00 00       	call   c002f387 <sys_munmap>
c002ea34:	83 c4 10             	add    $0x10,%esp
        break;
c002ea37:	90                   	nop
c002ea38:	e9 77 01 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
#endif
#ifdef FILESYS
    case SYS_CHDIR:
    {
      const char *name;
      mem_read(f->esp + 4, &name, sizeof(name));
c002ea3d:	8b 45 08             	mov    0x8(%ebp),%eax
c002ea40:	8b 40 48             	mov    0x48(%eax),%eax
c002ea43:	8d 50 04             	lea    0x4(%eax),%edx
c002ea46:	83 ec 04             	sub    $0x4,%esp
c002ea49:	6a 04                	push   $0x4
c002ea4b:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
c002ea51:	50                   	push   %eax
c002ea52:	52                   	push   %edx
c002ea53:	e8 6c 08 00 00       	call   c002f2c4 <mem_read>
c002ea58:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_chdir(name);
c002ea5b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c002ea61:	83 ec 0c             	sub    $0xc,%esp
c002ea64:	50                   	push   %eax
c002ea65:	e8 c0 0d 00 00       	call   c002f82a <sys_chdir>
c002ea6a:	83 c4 10             	add    $0x10,%esp
c002ea6d:	0f b6 d0             	movzbl %al,%edx
c002ea70:	8b 45 08             	mov    0x8(%ebp),%eax
c002ea73:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002ea76:	90                   	nop
c002ea77:	e9 38 01 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    }
    case SYS_MKDIR:
    {
      const char *name;
      mem_read(f->esp + 4, &name, sizeof(name));
c002ea7c:	8b 45 08             	mov    0x8(%ebp),%eax
c002ea7f:	8b 40 48             	mov    0x48(%eax),%eax
c002ea82:	8d 50 04             	lea    0x4(%eax),%edx
c002ea85:	83 ec 04             	sub    $0x4,%esp
c002ea88:	6a 04                	push   $0x4
c002ea8a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
c002ea90:	50                   	push   %eax
c002ea91:	52                   	push   %edx
c002ea92:	e8 2d 08 00 00       	call   c002f2c4 <mem_read>
c002ea97:	83 c4 10             	add    $0x10,%esp
     // printf("---SYS_MKDIR---%s\n", name);
      f->eax = sys_mkdir(name);
c002ea9a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c002eaa0:	83 ec 0c             	sub    $0xc,%esp
c002eaa3:	50                   	push   %eax
c002eaa4:	e8 ff 0d 00 00       	call   c002f8a8 <sys_mkdir>
c002eaa9:	83 c4 10             	add    $0x10,%esp
c002eaac:	0f b6 d0             	movzbl %al,%edx
c002eaaf:	8b 45 08             	mov    0x8(%ebp),%eax
c002eab2:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002eab5:	90                   	nop
c002eab6:	e9 f9 00 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    }
    case SYS_READDIR:
    {
      int fd;
      char *name;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002eabb:	8b 45 08             	mov    0x8(%ebp),%eax
c002eabe:	8b 40 48             	mov    0x48(%eax),%eax
c002eac1:	8d 50 04             	lea    0x4(%eax),%edx
c002eac4:	83 ec 04             	sub    $0x4,%esp
c002eac7:	6a 04                	push   $0x4
c002eac9:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
c002eacf:	50                   	push   %eax
c002ead0:	52                   	push   %edx
c002ead1:	e8 ee 07 00 00       	call   c002f2c4 <mem_read>
c002ead6:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &name, sizeof(name));
c002ead9:	8b 45 08             	mov    0x8(%ebp),%eax
c002eadc:	8b 40 48             	mov    0x48(%eax),%eax
c002eadf:	8d 50 08             	lea    0x8(%eax),%edx
c002eae2:	83 ec 04             	sub    $0x4,%esp
c002eae5:	6a 04                	push   $0x4
c002eae7:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
c002eaed:	50                   	push   %eax
c002eaee:	52                   	push   %edx
c002eaef:	e8 d0 07 00 00       	call   c002f2c4 <mem_read>
c002eaf4:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_readdir(fd, name);
c002eaf7:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
c002eafd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c002eb03:	83 ec 08             	sub    $0x8,%esp
c002eb06:	52                   	push   %edx
c002eb07:	50                   	push   %eax
c002eb08:	e8 27 0f 00 00       	call   c002fa34 <sys_readdir>
c002eb0d:	83 c4 10             	add    $0x10,%esp
c002eb10:	0f b6 d0             	movzbl %al,%edx
c002eb13:	8b 45 08             	mov    0x8(%ebp),%eax
c002eb16:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002eb19:	90                   	nop
c002eb1a:	e9 95 00 00 00       	jmp    c002ebb4 <syscall_handler+0x5be>
    }
    case SYS_ISDIR:
    {
      int fd;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002eb1f:	8b 45 08             	mov    0x8(%ebp),%eax
c002eb22:	8b 40 48             	mov    0x48(%eax),%eax
c002eb25:	8d 50 04             	lea    0x4(%eax),%edx
c002eb28:	83 ec 04             	sub    $0x4,%esp
c002eb2b:	6a 04                	push   $0x4
c002eb2d:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
c002eb33:	50                   	push   %eax
c002eb34:	52                   	push   %edx
c002eb35:	e8 8a 07 00 00       	call   c002f2c4 <mem_read>
c002eb3a:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_isdir(fd);
c002eb3d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
c002eb43:	83 ec 0c             	sub    $0xc,%esp
c002eb46:	50                   	push   %eax
c002eb47:	e8 e2 0f 00 00       	call   c002fb2e <sys_isdir>
c002eb4c:	83 c4 10             	add    $0x10,%esp
c002eb4f:	0f b6 d0             	movzbl %al,%edx
c002eb52:	8b 45 08             	mov    0x8(%ebp),%eax
c002eb55:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002eb58:	90                   	nop
c002eb59:	eb 59                	jmp    c002ebb4 <syscall_handler+0x5be>
    }
    case SYS_INUMBER:
    {
      int fd;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002eb5b:	8b 45 08             	mov    0x8(%ebp),%eax
c002eb5e:	8b 40 48             	mov    0x48(%eax),%eax
c002eb61:	8d 50 04             	lea    0x4(%eax),%edx
c002eb64:	83 ec 04             	sub    $0x4,%esp
c002eb67:	6a 04                	push   $0x4
c002eb69:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c002eb6f:	50                   	push   %eax
c002eb70:	52                   	push   %edx
c002eb71:	e8 4e 07 00 00       	call   c002f2c4 <mem_read>
c002eb76:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_inumber(fd);
c002eb79:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
c002eb7f:	83 ec 0c             	sub    $0xc,%esp
c002eb82:	50                   	push   %eax
c002eb83:	e8 43 10 00 00       	call   c002fbcb <sys_inumber>
c002eb88:	83 c4 10             	add    $0x10,%esp
c002eb8b:	89 c2                	mov    %eax,%edx
c002eb8d:	8b 45 08             	mov    0x8(%ebp),%eax
c002eb90:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002eb93:	90                   	nop
c002eb94:	eb 1e                	jmp    c002ebb4 <syscall_handler+0x5be>
    }
#endif
    default:
      printf("[ERROR], forget add something!\n");
c002eb96:	83 ec 0c             	sub    $0xc,%esp
c002eb99:	68 00 74 03 c0       	push   $0xc0037400
c002eb9e:	e8 b5 dc ff ff       	call   c002c858 <puts>
c002eba3:	83 c4 10             	add    $0x10,%esp
      sys_exit(-1);
c002eba6:	83 ec 0c             	sub    $0xc,%esp
c002eba9:	6a ff                	push   $0xffffffff
c002ebab:	e8 15 00 00 00       	call   c002ebc5 <sys_exit>
c002ebb0:	83 c4 10             	add    $0x10,%esp
      break;
c002ebb3:	90                   	nop
  }
}
c002ebb4:	90                   	nop
c002ebb5:	c9                   	leave  
c002ebb6:	c3                   	ret    

c002ebb7 <sys_halt>:

static void
sys_halt() {
c002ebb7:	55                   	push   %ebp
c002ebb8:	89 e5                	mov    %esp,%ebp
c002ebba:	83 ec 08             	sub    $0x8,%esp
  shutdown_power_off();
c002ebbd:	e8 50 8f ff ff       	call   c0027b12 <shutdown_power_off>
}
c002ebc2:	90                   	nop
c002ebc3:	c9                   	leave  
c002ebc4:	c3                   	ret    

c002ebc5 <sys_exit>:

void
sys_exit(int retVal) {
c002ebc5:	55                   	push   %ebp
c002ebc6:	89 e5                	mov    %esp,%ebp
c002ebc8:	83 ec 18             	sub    $0x18,%esp
  struct thread * cur_thread = thread_current();
c002ebcb:	e8 19 23 ff ff       	call   c0020ee9 <thread_current>
c002ebd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  printf("%s: exit(%d)\n", cur_thread->name, retVal);
c002ebd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ebd6:	83 c0 08             	add    $0x8,%eax
c002ebd9:	83 ec 04             	sub    $0x4,%esp
c002ebdc:	ff 75 08             	pushl  0x8(%ebp)
c002ebdf:	50                   	push   %eax
c002ebe0:	68 70 74 03 c0       	push   $0xc0037470
c002ebe5:	e8 46 94 ff ff       	call   c0028030 <printf>
c002ebea:	83 c4 10             	add    $0x10,%esp
  cur_thread->pcb->retVal = retVal;
c002ebed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ebf0:	8b 40 58             	mov    0x58(%eax),%eax
c002ebf3:	8b 55 08             	mov    0x8(%ebp),%edx
c002ebf6:	89 50 08             	mov    %edx,0x8(%eax)
  thread_exit ();
c002ebf9:	e8 6b 23 ff ff       	call   c0020f69 <thread_exit>

c002ebfe <sys_exec>:
  return -1;
}

static pid_t
sys_exec(const char *cmd_line){
c002ebfe:	55                   	push   %ebp
c002ebff:	89 e5                	mov    %esp,%ebp
c002ec01:	83 ec 18             	sub    $0x18,%esp
  // tid_t tid;
  check_valid_ptr((const uint8_t*) cmd_line);
c002ec04:	83 ec 0c             	sub    $0xc,%esp
c002ec07:	ff 75 08             	pushl  0x8(%ebp)
c002ec0a:	e8 75 06 00 00       	call   c002f284 <check_valid_ptr>
c002ec0f:	83 c4 10             	add    $0x10,%esp
  char* ptr = cmd_line;
c002ec12:	8b 45 08             	mov    0x8(%ebp),%eax
c002ec15:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (*ptr != '\0') { 
c002ec18:	eb 11                	jmp    c002ec2b <sys_exec+0x2d>
    ptr++;
c002ec1a:	ff 45 f4             	incl   -0xc(%ebp)
    check_valid_ptr(ptr);
c002ec1d:	83 ec 0c             	sub    $0xc,%esp
c002ec20:	ff 75 f4             	pushl  -0xc(%ebp)
c002ec23:	e8 5c 06 00 00       	call   c002f284 <check_valid_ptr>
c002ec28:	83 c4 10             	add    $0x10,%esp
  while (*ptr != '\0') { 
c002ec2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ec2e:	8a 00                	mov    (%eax),%al
c002ec30:	84 c0                	test   %al,%al
c002ec32:	75 e6                	jne    c002ec1a <sys_exec+0x1c>
  }
  check_valid_ptr(ptr);
c002ec34:	83 ec 0c             	sub    $0xc,%esp
c002ec37:	ff 75 f4             	pushl  -0xc(%ebp)
c002ec3a:	e8 45 06 00 00       	call   c002f284 <check_valid_ptr>
c002ec3f:	83 c4 10             	add    $0x10,%esp
  // if (!is_user_vaddr(cmd_line))
  //   sys_exit(-1);
  lock_acquire(&fileSys_lock);
c002ec42:	83 ec 0c             	sub    $0xc,%esp
c002ec45:	68 60 87 04 c0       	push   $0xc0048760
c002ec4a:	e8 df 48 ff ff       	call   c002352e <lock_acquire>
c002ec4f:	83 c4 10             	add    $0x10,%esp
  pid_t pid = process_execute(cmd_line);
c002ec52:	83 ec 0c             	sub    $0xc,%esp
c002ec55:	ff 75 08             	pushl  0x8(%ebp)
c002ec58:	e8 70 dd ff ff       	call   c002c9cd <process_execute>
c002ec5d:	83 c4 10             	add    $0x10,%esp
c002ec60:	89 45 f0             	mov    %eax,-0x10(%ebp)
  lock_release(&fileSys_lock);
c002ec63:	83 ec 0c             	sub    $0xc,%esp
c002ec66:	68 60 87 04 c0       	push   $0xc0048760
c002ec6b:	e8 ff 4a ff ff       	call   c002376f <lock_release>
c002ec70:	83 c4 10             	add    $0x10,%esp
  return pid;
c002ec73:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c002ec76:	c9                   	leave  
c002ec77:	c3                   	ret    

c002ec78 <sys_write>:

static int 
sys_write(int fd, const void *buffer, unsigned size) {
c002ec78:	55                   	push   %ebp
c002ec79:	89 e5                	mov    %esp,%ebp
c002ec7b:	83 ec 18             	sub    $0x18,%esp
  check_valid_ptr((const uint8_t*) buffer);
c002ec7e:	83 ec 0c             	sub    $0xc,%esp
c002ec81:	ff 75 0c             	pushl  0xc(%ebp)
c002ec84:	e8 fb 05 00 00       	call   c002f284 <check_valid_ptr>
c002ec89:	83 c4 10             	add    $0x10,%esp
  check_valid_ptr((const uint8_t*) buffer + size - 1);
c002ec8c:	8b 45 10             	mov    0x10(%ebp),%eax
c002ec8f:	8d 50 ff             	lea    -0x1(%eax),%edx
c002ec92:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ec95:	01 d0                	add    %edx,%eax
c002ec97:	83 ec 0c             	sub    $0xc,%esp
c002ec9a:	50                   	push   %eax
c002ec9b:	e8 e4 05 00 00       	call   c002f284 <check_valid_ptr>
c002eca0:	83 c4 10             	add    $0x10,%esp

  lock_acquire (&fileSys_lock);
c002eca3:	83 ec 0c             	sub    $0xc,%esp
c002eca6:	68 60 87 04 c0       	push   $0xc0048760
c002ecab:	e8 7e 48 ff ff       	call   c002352e <lock_acquire>
c002ecb0:	83 c4 10             	add    $0x10,%esp
  int res = -1;
c002ecb3:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if(fd == 1) { // stdout
c002ecba:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c002ecbe:	75 19                	jne    c002ecd9 <sys_write+0x61>
    putbuf(buffer, size);
c002ecc0:	83 ec 08             	sub    $0x8,%esp
c002ecc3:	ff 75 10             	pushl  0x10(%ebp)
c002ecc6:	ff 75 0c             	pushl  0xc(%ebp)
c002ecc9:	e8 d5 db ff ff       	call   c002c8a3 <putbuf>
c002ecce:	83 c4 10             	add    $0x10,%esp
    res = size;
c002ecd1:	8b 45 10             	mov    0x10(%ebp),%eax
c002ecd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ecd7:	eb 67                	jmp    c002ed40 <sys_write+0xc8>
  }
  else { // file
    struct file_descriptor* file = get_file_descriptor(thread_current(), fd, 1);
c002ecd9:	e8 0b 22 ff ff       	call   c0020ee9 <thread_current>
c002ecde:	83 ec 04             	sub    $0x4,%esp
c002ece1:	6a 01                	push   $0x1
c002ece3:	ff 75 08             	pushl  0x8(%ebp)
c002ece6:	50                   	push   %eax
c002ece7:	e8 0f f8 ff ff       	call   c002e4fb <get_file_descriptor>
c002ecec:	83 c4 10             	add    $0x10,%esp
c002ecef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (file && file->file) //file should be opened by cur thread
c002ecf2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002ecf6:	74 48                	je     c002ed40 <sys_write+0xc8>
c002ecf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ecfb:	8b 40 04             	mov    0x4(%eax),%eax
c002ecfe:	85 c0                	test   %eax,%eax
c002ed00:	74 3e                	je     c002ed40 <sys_write+0xc8>
    {
#ifdef VM
        preload_pin_pages(buffer, size);
c002ed02:	83 ec 08             	sub    $0x8,%esp
c002ed05:	ff 75 10             	pushl  0x10(%ebp)
c002ed08:	ff 75 0c             	pushl  0xc(%ebp)
c002ed0b:	e8 bb 09 00 00       	call   c002f6cb <preload_pin_pages>
c002ed10:	83 c4 10             	add    $0x10,%esp
#endif
        res = file_write(file->file, buffer, size);
c002ed13:	8b 55 10             	mov    0x10(%ebp),%edx
c002ed16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ed19:	8b 40 04             	mov    0x4(%eax),%eax
c002ed1c:	83 ec 04             	sub    $0x4,%esp
c002ed1f:	52                   	push   %edx
c002ed20:	ff 75 0c             	pushl  0xc(%ebp)
c002ed23:	50                   	push   %eax
c002ed24:	e8 d3 1a 00 00       	call   c00307fc <file_write>
c002ed29:	83 c4 10             	add    $0x10,%esp
c002ed2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
#ifdef VM
        preload_unpin_pages(buffer, size);
c002ed2f:	83 ec 08             	sub    $0x8,%esp
c002ed32:	ff 75 10             	pushl  0x10(%ebp)
c002ed35:	ff 75 0c             	pushl  0xc(%ebp)
c002ed38:	e8 f9 09 00 00       	call   c002f736 <preload_unpin_pages>
c002ed3d:	83 c4 10             	add    $0x10,%esp
#endif
    }
  }
  lock_release (&fileSys_lock);
c002ed40:	83 ec 0c             	sub    $0xc,%esp
c002ed43:	68 60 87 04 c0       	push   $0xc0048760
c002ed48:	e8 22 4a ff ff       	call   c002376f <lock_release>
c002ed4d:	83 c4 10             	add    $0x10,%esp
  return res;
c002ed50:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002ed53:	c9                   	leave  
c002ed54:	c3                   	ret    

c002ed55 <sys_create>:

static bool
sys_create (const char *file, unsigned initial_size)
{
c002ed55:	55                   	push   %ebp
c002ed56:	89 e5                	mov    %esp,%ebp
c002ed58:	83 ec 18             	sub    $0x18,%esp
  check_valid_ptr(file);
c002ed5b:	83 ec 0c             	sub    $0xc,%esp
c002ed5e:	ff 75 08             	pushl  0x8(%ebp)
c002ed61:	e8 1e 05 00 00       	call   c002f284 <check_valid_ptr>
c002ed66:	83 c4 10             	add    $0x10,%esp
  lock_acquire(&fileSys_lock);
c002ed69:	83 ec 0c             	sub    $0xc,%esp
c002ed6c:	68 60 87 04 c0       	push   $0xc0048760
c002ed71:	e8 b8 47 ff ff       	call   c002352e <lock_acquire>
c002ed76:	83 c4 10             	add    $0x10,%esp
  bool res = filesys_create(file, initial_size);
c002ed79:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ed7c:	83 ec 08             	sub    $0x8,%esp
c002ed7f:	50                   	push   %eax
c002ed80:	ff 75 08             	pushl  0x8(%ebp)
c002ed83:	e8 ca 12 00 00       	call   c0030052 <filesys_create>
c002ed88:	83 c4 10             	add    $0x10,%esp
c002ed8b:	88 45 f7             	mov    %al,-0x9(%ebp)
  lock_release(&fileSys_lock);
c002ed8e:	83 ec 0c             	sub    $0xc,%esp
c002ed91:	68 60 87 04 c0       	push   $0xc0048760
c002ed96:	e8 d4 49 ff ff       	call   c002376f <lock_release>
c002ed9b:	83 c4 10             	add    $0x10,%esp
  return res;
c002ed9e:	8a 45 f7             	mov    -0x9(%ebp),%al
}
c002eda1:	c9                   	leave  
c002eda2:	c3                   	ret    

c002eda3 <sys_wait>:


static int 
sys_wait (pid_t pid) {
c002eda3:	55                   	push   %ebp
c002eda4:	89 e5                	mov    %esp,%ebp
c002eda6:	83 ec 08             	sub    $0x8,%esp
  return process_wait(pid);
c002eda9:	83 ec 0c             	sub    $0xc,%esp
c002edac:	ff 75 08             	pushl  0x8(%ebp)
c002edaf:	e8 1f e0 ff ff       	call   c002cdd3 <process_wait>
c002edb4:	83 c4 10             	add    $0x10,%esp
}
c002edb7:	c9                   	leave  
c002edb8:	c3                   	ret    

c002edb9 <sys_remove>:

static bool 
sys_remove(const char* file) {
c002edb9:	55                   	push   %ebp
c002edba:	89 e5                	mov    %esp,%ebp
c002edbc:	83 ec 18             	sub    $0x18,%esp
  check_valid_ptr(file);
c002edbf:	83 ec 0c             	sub    $0xc,%esp
c002edc2:	ff 75 08             	pushl  0x8(%ebp)
c002edc5:	e8 ba 04 00 00       	call   c002f284 <check_valid_ptr>
c002edca:	83 c4 10             	add    $0x10,%esp
  lock_acquire(&fileSys_lock);
c002edcd:	83 ec 0c             	sub    $0xc,%esp
c002edd0:	68 60 87 04 c0       	push   $0xc0048760
c002edd5:	e8 54 47 ff ff       	call   c002352e <lock_acquire>
c002edda:	83 c4 10             	add    $0x10,%esp
  bool res = filesys_remove(file);
c002eddd:	83 ec 0c             	sub    $0xc,%esp
c002ede0:	ff 75 08             	pushl  0x8(%ebp)
c002ede3:	e8 f3 14 00 00       	call   c00302db <filesys_remove>
c002ede8:	83 c4 10             	add    $0x10,%esp
c002edeb:	88 45 f7             	mov    %al,-0x9(%ebp)
  lock_release(&fileSys_lock);
c002edee:	83 ec 0c             	sub    $0xc,%esp
c002edf1:	68 60 87 04 c0       	push   $0xc0048760
c002edf6:	e8 74 49 ff ff       	call   c002376f <lock_release>
c002edfb:	83 c4 10             	add    $0x10,%esp
  return res;
c002edfe:	8a 45 f7             	mov    -0x9(%ebp),%al
}
c002ee01:	c9                   	leave  
c002ee02:	c3                   	ret    

c002ee03 <sys_open>:

static int 
sys_open(const char* file) {
c002ee03:	55                   	push   %ebp
c002ee04:	89 e5                	mov    %esp,%ebp
c002ee06:	83 ec 28             	sub    $0x28,%esp
  check_valid_ptr(file);
c002ee09:	83 ec 0c             	sub    $0xc,%esp
c002ee0c:	ff 75 08             	pushl  0x8(%ebp)
c002ee0f:	e8 70 04 00 00       	call   c002f284 <check_valid_ptr>
c002ee14:	83 c4 10             	add    $0x10,%esp
  int res = -1;
c002ee17:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  struct file_descriptor* file_desc = palloc_get_page(0);
c002ee1e:	83 ec 0c             	sub    $0xc,%esp
c002ee21:	6a 00                	push   $0x0
c002ee23:	e8 e0 4f ff ff       	call   c0023e08 <palloc_get_page>
c002ee28:	83 c4 10             	add    $0x10,%esp
c002ee2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  if (file_desc == NULL) // not enough space
c002ee2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002ee32:	75 0a                	jne    c002ee3e <sys_open+0x3b>
    return -1;
c002ee34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002ee39:	e9 27 01 00 00       	jmp    c002ef65 <sys_open+0x162>

  lock_acquire (&fileSys_lock);
c002ee3e:	83 ec 0c             	sub    $0xc,%esp
c002ee41:	68 60 87 04 c0       	push   $0xc0048760
c002ee46:	e8 e3 46 ff ff       	call   c002352e <lock_acquire>
c002ee4b:	83 c4 10             	add    $0x10,%esp
  struct file* File;
  File = filesys_open(file);
c002ee4e:	83 ec 0c             	sub    $0xc,%esp
c002ee51:	ff 75 08             	pushl  0x8(%ebp)
c002ee54:	e8 40 13 00 00       	call   c0030199 <filesys_open>
c002ee59:	83 c4 10             	add    $0x10,%esp
c002ee5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!File) { // open failure
c002ee5f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002ee63:	75 1a                	jne    c002ee7f <sys_open+0x7c>
    palloc_free_page (file_desc);
c002ee65:	83 ec 0c             	sub    $0xc,%esp
c002ee68:	ff 75 f0             	pushl  -0x10(%ebp)
c002ee6b:	e8 f0 50 ff ff       	call   c0023f60 <palloc_free_page>
c002ee70:	83 c4 10             	add    $0x10,%esp
    res = -1;
c002ee73:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
    goto done;
c002ee7a:	e9 d3 00 00 00       	jmp    c002ef52 <sys_open+0x14f>
  }
  // set file_descriptor
  file_desc->file = File;
c002ee7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ee82:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002ee85:	89 50 04             	mov    %edx,0x4(%eax)

  //judge whether a directory
  struct inode *inode = file_get_inode(file_desc->file);
c002ee88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ee8b:	8b 40 04             	mov    0x4(%eax),%eax
c002ee8e:	83 ec 0c             	sub    $0xc,%esp
c002ee91:	50                   	push   %eax
c002ee92:	e8 02 19 00 00       	call   c0030799 <file_get_inode>
c002ee97:	83 c4 10             	add    $0x10,%esp
c002ee9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (inode != NULL && inode_dir(inode)) 
c002ee9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c002eea1:	74 36                	je     c002eed9 <sys_open+0xd6>
c002eea3:	83 ec 0c             	sub    $0xc,%esp
c002eea6:	ff 75 e8             	pushl  -0x18(%ebp)
c002eea9:	e8 4d 36 00 00       	call   c00324fb <inode_dir>
c002eeae:	83 c4 10             	add    $0x10,%esp
c002eeb1:	85 c0                	test   %eax,%eax
c002eeb3:	74 24                	je     c002eed9 <sys_open+0xd6>
    file_desc -> dir = dir_open(inode_reopen(inode));
c002eeb5:	83 ec 0c             	sub    $0xc,%esp
c002eeb8:	ff 75 e8             	pushl  -0x18(%ebp)
c002eebb:	e8 80 2f 00 00       	call   c0031e40 <inode_reopen>
c002eec0:	83 c4 10             	add    $0x10,%esp
c002eec3:	83 ec 0c             	sub    $0xc,%esp
c002eec6:	50                   	push   %eax
c002eec7:	e8 15 21 00 00       	call   c0030fe1 <dir_open>
c002eecc:	83 c4 10             	add    $0x10,%esp
c002eecf:	89 c2                	mov    %eax,%edx
c002eed1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002eed4:	89 50 10             	mov    %edx,0x10(%eax)
c002eed7:	eb 0a                	jmp    c002eee3 <sys_open+0xe0>
  else 
    file_desc -> dir = NULL;
c002eed9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002eedc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

  struct list* opened_files = &thread_current()->opened_files;
c002eee3:	e8 01 20 ff ff       	call   c0020ee9 <thread_current>
c002eee8:	83 c0 44             	add    $0x44,%eax
c002eeeb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (list_empty(opened_files)) // first opened file
c002eeee:	83 ec 0c             	sub    $0xc,%esp
c002eef1:	ff 75 e4             	pushl  -0x1c(%ebp)
c002eef4:	e8 93 be ff ff       	call   c002ad8c <list_empty>
c002eef9:	83 c4 10             	add    $0x10,%esp
c002eefc:	84 c0                	test   %al,%al
c002eefe:	74 0b                	je     c002ef0b <sys_open+0x108>
    file_desc->fdID = 3; // 0, 1, 2 reserved
c002ef00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ef03:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
c002ef09:	eb 2a                	jmp    c002ef35 <sys_open+0x132>
  else {
    struct list_elem* last_opened_elem = list_back(opened_files);
c002ef0b:	83 ec 0c             	sub    $0xc,%esp
c002ef0e:	ff 75 e4             	pushl  -0x1c(%ebp)
c002ef11:	e8 e5 bd ff ff       	call   c002acfb <list_back>
c002ef16:	83 c4 10             	add    $0x10,%esp
c002ef19:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct file_descriptor* last_opend = list_entry(last_opened_elem, struct file_descriptor, elem);
c002ef1c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002ef1f:	83 c0 04             	add    $0x4,%eax
c002ef22:	83 e8 0c             	sub    $0xc,%eax
c002ef25:	89 45 dc             	mov    %eax,-0x24(%ebp)
    file_desc->fdID = last_opend->fdID + 1;
c002ef28:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002ef2b:	8b 00                	mov    (%eax),%eax
c002ef2d:	8d 50 01             	lea    0x1(%eax),%edx
c002ef30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ef33:	89 10                	mov    %edx,(%eax)
  }    
  res = file_desc->fdID;
c002ef35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ef38:	8b 00                	mov    (%eax),%eax
c002ef3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  // push to opend files
  list_push_back(opened_files, &(file_desc->elem));
c002ef3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ef40:	83 c0 08             	add    $0x8,%eax
c002ef43:	83 ec 08             	sub    $0x8,%esp
c002ef46:	50                   	push   %eax
c002ef47:	ff 75 e4             	pushl  -0x1c(%ebp)
c002ef4a:	e8 95 bc ff ff       	call   c002abe4 <list_push_back>
c002ef4f:	83 c4 10             	add    $0x10,%esp
done:
  lock_release (&fileSys_lock);
c002ef52:	83 ec 0c             	sub    $0xc,%esp
c002ef55:	68 60 87 04 c0       	push   $0xc0048760
c002ef5a:	e8 10 48 ff ff       	call   c002376f <lock_release>
c002ef5f:	83 c4 10             	add    $0x10,%esp
  return res;
c002ef62:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002ef65:	c9                   	leave  
c002ef66:	c3                   	ret    

c002ef67 <sys_filesize>:

static int 
sys_filesize(int fd) { // fd should be opend by cur thread
c002ef67:	55                   	push   %ebp
c002ef68:	89 e5                	mov    %esp,%ebp
c002ef6a:	83 ec 18             	sub    $0x18,%esp
  lock_acquire (&fileSys_lock);
c002ef6d:	83 ec 0c             	sub    $0xc,%esp
c002ef70:	68 60 87 04 c0       	push   $0xc0048760
c002ef75:	e8 b4 45 ff ff       	call   c002352e <lock_acquire>
c002ef7a:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* file = get_file_descriptor(thread_current(), fd, 0);
c002ef7d:	e8 67 1f ff ff       	call   c0020ee9 <thread_current>
c002ef82:	83 ec 04             	sub    $0x4,%esp
c002ef85:	6a 00                	push   $0x0
c002ef87:	ff 75 08             	pushl  0x8(%ebp)
c002ef8a:	50                   	push   %eax
c002ef8b:	e8 6b f5 ff ff       	call   c002e4fb <get_file_descriptor>
c002ef90:	83 c4 10             	add    $0x10,%esp
c002ef93:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int res = -1;
c002ef96:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if (file != NULL) 
c002ef9d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002efa1:	74 15                	je     c002efb8 <sys_filesize+0x51>
    res = file_length(file->file);
c002efa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002efa6:	8b 40 04             	mov    0x4(%eax),%eax
c002efa9:	83 ec 0c             	sub    $0xc,%esp
c002efac:	50                   	push   %eax
c002efad:	e8 49 19 00 00       	call   c00308fb <file_length>
c002efb2:	83 c4 10             	add    $0x10,%esp
c002efb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_release (&fileSys_lock);
c002efb8:	83 ec 0c             	sub    $0xc,%esp
c002efbb:	68 60 87 04 c0       	push   $0xc0048760
c002efc0:	e8 aa 47 ff ff       	call   c002376f <lock_release>
c002efc5:	83 c4 10             	add    $0x10,%esp
  return res;
c002efc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002efcb:	c9                   	leave  
c002efcc:	c3                   	ret    

c002efcd <sys_read>:

static int 
sys_read(int fd, void *buffer, unsigned size) {
c002efcd:	55                   	push   %ebp
c002efce:	89 e5                	mov    %esp,%ebp
c002efd0:	83 ec 18             	sub    $0x18,%esp
  // check valid
  check_valid_ptr(buffer);
c002efd3:	83 ec 0c             	sub    $0xc,%esp
c002efd6:	ff 75 0c             	pushl  0xc(%ebp)
c002efd9:	e8 a6 02 00 00       	call   c002f284 <check_valid_ptr>
c002efde:	83 c4 10             	add    $0x10,%esp
  check_valid_ptr(buffer + size - 1);
c002efe1:	8b 45 10             	mov    0x10(%ebp),%eax
c002efe4:	8d 50 ff             	lea    -0x1(%eax),%edx
c002efe7:	8b 45 0c             	mov    0xc(%ebp),%eax
c002efea:	01 d0                	add    %edx,%eax
c002efec:	83 ec 0c             	sub    $0xc,%esp
c002efef:	50                   	push   %eax
c002eff0:	e8 8f 02 00 00       	call   c002f284 <check_valid_ptr>
c002eff5:	83 c4 10             	add    $0x10,%esp
  lock_acquire(&fileSys_lock);
c002eff8:	83 ec 0c             	sub    $0xc,%esp
c002effb:	68 60 87 04 c0       	push   $0xc0048760
c002f000:	e8 29 45 ff ff       	call   c002352e <lock_acquire>
c002f005:	83 c4 10             	add    $0x10,%esp
  
  int res = -1;
c002f008:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if (fd == 0) { // stdin
c002f00f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002f013:	75 5d                	jne    c002f072 <sys_read+0xa5>
    for (int i = 0; i < size; ++i) {
c002f015:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002f01c:	eb 44                	jmp    c002f062 <sys_read+0x95>
      if(! put_user(buffer + i, input_getc())){
c002f01e:	e8 16 83 ff ff       	call   c0027339 <input_getc>
c002f023:	0f b6 c0             	movzbl %al,%eax
c002f026:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c002f029:	8b 55 0c             	mov    0xc(%ebp),%edx
c002f02c:	01 ca                	add    %ecx,%edx
c002f02e:	83 ec 08             	sub    $0x8,%esp
c002f031:	50                   	push   %eax
c002f032:	52                   	push   %edx
c002f033:	e8 14 03 00 00       	call   c002f34c <put_user>
c002f038:	83 c4 10             	add    $0x10,%esp
c002f03b:	83 f0 01             	xor    $0x1,%eax
c002f03e:	84 c0                	test   %al,%al
c002f040:	74 1d                	je     c002f05f <sys_read+0x92>
        lock_release (&fileSys_lock);
c002f042:	83 ec 0c             	sub    $0xc,%esp
c002f045:	68 60 87 04 c0       	push   $0xc0048760
c002f04a:	e8 20 47 ff ff       	call   c002376f <lock_release>
c002f04f:	83 c4 10             	add    $0x10,%esp
        sys_exit(-1); // segfault
c002f052:	83 ec 0c             	sub    $0xc,%esp
c002f055:	6a ff                	push   $0xffffffff
c002f057:	e8 69 fb ff ff       	call   c002ebc5 <sys_exit>
c002f05c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < size; ++i) {
c002f05f:	ff 45 f0             	incl   -0x10(%ebp)
c002f062:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f065:	3b 45 10             	cmp    0x10(%ebp),%eax
c002f068:	72 b4                	jb     c002f01e <sys_read+0x51>
      }
    }
    res = size;
c002f06a:	8b 45 10             	mov    0x10(%ebp),%eax
c002f06d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002f070:	eb 70                	jmp    c002f0e2 <sys_read+0x115>
  } else {
    // fd should be opened
    struct file_descriptor* fileD = get_file_descriptor(thread_current(), fd, 0); 
c002f072:	e8 72 1e ff ff       	call   c0020ee9 <thread_current>
c002f077:	83 ec 04             	sub    $0x4,%esp
c002f07a:	6a 00                	push   $0x0
c002f07c:	ff 75 08             	pushl  0x8(%ebp)
c002f07f:	50                   	push   %eax
c002f080:	e8 76 f4 ff ff       	call   c002e4fb <get_file_descriptor>
c002f085:	83 c4 10             	add    $0x10,%esp
c002f088:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (fileD == NULL || fileD->file == NULL)
c002f08b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002f08f:	74 0a                	je     c002f09b <sys_read+0xce>
c002f091:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f094:	8b 40 04             	mov    0x4(%eax),%eax
c002f097:	85 c0                	test   %eax,%eax
c002f099:	75 09                	jne    c002f0a4 <sys_read+0xd7>
      res = -1;
c002f09b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
c002f0a2:	eb 3e                	jmp    c002f0e2 <sys_read+0x115>
    else {
#ifdef VM
        preload_pin_pages(buffer, size);
c002f0a4:	83 ec 08             	sub    $0x8,%esp
c002f0a7:	ff 75 10             	pushl  0x10(%ebp)
c002f0aa:	ff 75 0c             	pushl  0xc(%ebp)
c002f0ad:	e8 19 06 00 00       	call   c002f6cb <preload_pin_pages>
c002f0b2:	83 c4 10             	add    $0x10,%esp
#endif
      res = file_read(fileD->file, buffer, size);
c002f0b5:	8b 55 10             	mov    0x10(%ebp),%edx
c002f0b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f0bb:	8b 40 04             	mov    0x4(%eax),%eax
c002f0be:	83 ec 04             	sub    $0x4,%esp
c002f0c1:	52                   	push   %edx
c002f0c2:	ff 75 0c             	pushl  0xc(%ebp)
c002f0c5:	50                   	push   %eax
c002f0c6:	e8 d8 16 00 00       	call   c00307a3 <file_read>
c002f0cb:	83 c4 10             	add    $0x10,%esp
c002f0ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
#ifdef VM
      preload_unpin_pages(buffer, size);
c002f0d1:	83 ec 08             	sub    $0x8,%esp
c002f0d4:	ff 75 10             	pushl  0x10(%ebp)
c002f0d7:	ff 75 0c             	pushl  0xc(%ebp)
c002f0da:	e8 57 06 00 00       	call   c002f736 <preload_unpin_pages>
c002f0df:	83 c4 10             	add    $0x10,%esp
#endif
    }
  }
  lock_release(&fileSys_lock);
c002f0e2:	83 ec 0c             	sub    $0xc,%esp
c002f0e5:	68 60 87 04 c0       	push   $0xc0048760
c002f0ea:	e8 80 46 ff ff       	call   c002376f <lock_release>
c002f0ef:	83 c4 10             	add    $0x10,%esp
  return res;
c002f0f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002f0f5:	c9                   	leave  
c002f0f6:	c3                   	ret    

c002f0f7 <sys_seek>:

static void 
sys_seek(int fd, unsigned position) {
c002f0f7:	55                   	push   %ebp
c002f0f8:	89 e5                	mov    %esp,%ebp
c002f0fa:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002f0fd:	83 ec 0c             	sub    $0xc,%esp
c002f100:	68 60 87 04 c0       	push   $0xc0048760
c002f105:	e8 24 44 ff ff       	call   c002352e <lock_acquire>
c002f10a:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fileD = get_file_descriptor(thread_current(), fd, 0); 
c002f10d:	e8 d7 1d ff ff       	call   c0020ee9 <thread_current>
c002f112:	83 ec 04             	sub    $0x4,%esp
c002f115:	6a 00                	push   $0x0
c002f117:	ff 75 08             	pushl  0x8(%ebp)
c002f11a:	50                   	push   %eax
c002f11b:	e8 db f3 ff ff       	call   c002e4fb <get_file_descriptor>
c002f120:	83 c4 10             	add    $0x10,%esp
c002f123:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fileD && fileD->file) {
c002f126:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f12a:	74 22                	je     c002f14e <sys_seek+0x57>
c002f12c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f12f:	8b 40 04             	mov    0x4(%eax),%eax
c002f132:	85 c0                	test   %eax,%eax
c002f134:	74 18                	je     c002f14e <sys_seek+0x57>
    file_seek(fileD->file, position);
c002f136:	8b 55 0c             	mov    0xc(%ebp),%edx
c002f139:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f13c:	8b 40 04             	mov    0x4(%eax),%eax
c002f13f:	83 ec 08             	sub    $0x8,%esp
c002f142:	52                   	push   %edx
c002f143:	50                   	push   %eax
c002f144:	e8 f2 17 00 00       	call   c003093b <file_seek>
c002f149:	83 c4 10             	add    $0x10,%esp
c002f14c:	eb 1d                	jmp    c002f16b <sys_seek+0x74>
  } 
  else  {
    lock_release(&fileSys_lock);
c002f14e:	83 ec 0c             	sub    $0xc,%esp
c002f151:	68 60 87 04 c0       	push   $0xc0048760
c002f156:	e8 14 46 ff ff       	call   c002376f <lock_release>
c002f15b:	83 c4 10             	add    $0x10,%esp
    sys_exit(-1);
c002f15e:	83 ec 0c             	sub    $0xc,%esp
c002f161:	6a ff                	push   $0xffffffff
c002f163:	e8 5d fa ff ff       	call   c002ebc5 <sys_exit>
c002f168:	83 c4 10             	add    $0x10,%esp
  }
  lock_release(&fileSys_lock);
c002f16b:	83 ec 0c             	sub    $0xc,%esp
c002f16e:	68 60 87 04 c0       	push   $0xc0048760
c002f173:	e8 f7 45 ff ff       	call   c002376f <lock_release>
c002f178:	83 c4 10             	add    $0x10,%esp
}
c002f17b:	90                   	nop
c002f17c:	c9                   	leave  
c002f17d:	c3                   	ret    

c002f17e <sys_tell>:

static unsigned 
sys_tell(int fd) {
c002f17e:	55                   	push   %ebp
c002f17f:	89 e5                	mov    %esp,%ebp
c002f181:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002f184:	83 ec 0c             	sub    $0xc,%esp
c002f187:	68 60 87 04 c0       	push   $0xc0048760
c002f18c:	e8 9d 43 ff ff       	call   c002352e <lock_acquire>
c002f191:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fileD = get_file_descriptor(thread_current(), fd, 0); 
c002f194:	e8 50 1d ff ff       	call   c0020ee9 <thread_current>
c002f199:	83 ec 04             	sub    $0x4,%esp
c002f19c:	6a 00                	push   $0x0
c002f19e:	ff 75 08             	pushl  0x8(%ebp)
c002f1a1:	50                   	push   %eax
c002f1a2:	e8 54 f3 ff ff       	call   c002e4fb <get_file_descriptor>
c002f1a7:	83 c4 10             	add    $0x10,%esp
c002f1aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
  unsigned res = -1;
c002f1ad:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if (fileD && fileD->file) 
c002f1b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002f1b8:	74 1f                	je     c002f1d9 <sys_tell+0x5b>
c002f1ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f1bd:	8b 40 04             	mov    0x4(%eax),%eax
c002f1c0:	85 c0                	test   %eax,%eax
c002f1c2:	74 15                	je     c002f1d9 <sys_tell+0x5b>
    res = file_tell(fileD->file);
c002f1c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f1c7:	8b 40 04             	mov    0x4(%eax),%eax
c002f1ca:	83 ec 0c             	sub    $0xc,%esp
c002f1cd:	50                   	push   %eax
c002f1ce:	e8 c8 17 00 00       	call   c003099b <file_tell>
c002f1d3:	83 c4 10             	add    $0x10,%esp
c002f1d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_release(&fileSys_lock);
c002f1d9:	83 ec 0c             	sub    $0xc,%esp
c002f1dc:	68 60 87 04 c0       	push   $0xc0048760
c002f1e1:	e8 89 45 ff ff       	call   c002376f <lock_release>
c002f1e6:	83 c4 10             	add    $0x10,%esp
  return res;
c002f1e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002f1ec:	c9                   	leave  
c002f1ed:	c3                   	ret    

c002f1ee <sys_close>:

static void 
sys_close(int fd) {
c002f1ee:	55                   	push   %ebp
c002f1ef:	89 e5                	mov    %esp,%ebp
c002f1f1:	83 ec 18             	sub    $0x18,%esp
  struct file_descriptor* file = get_file_descriptor(thread_current(), fd, 0);
c002f1f4:	e8 f0 1c ff ff       	call   c0020ee9 <thread_current>
c002f1f9:	83 ec 04             	sub    $0x4,%esp
c002f1fc:	6a 00                	push   $0x0
c002f1fe:	ff 75 08             	pushl  0x8(%ebp)
c002f201:	50                   	push   %eax
c002f202:	e8 f4 f2 ff ff       	call   c002e4fb <get_file_descriptor>
c002f207:	83 c4 10             	add    $0x10,%esp
c002f20a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_acquire (&fileSys_lock);
c002f20d:	83 ec 0c             	sub    $0xc,%esp
c002f210:	68 60 87 04 c0       	push   $0xc0048760
c002f215:	e8 14 43 ff ff       	call   c002352e <lock_acquire>
c002f21a:	83 c4 10             	add    $0x10,%esp
  if (file) {
c002f21d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f221:	74 4e                	je     c002f271 <sys_close+0x83>
    file_close(file->file);
c002f223:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f226:	8b 40 04             	mov    0x4(%eax),%eax
c002f229:	83 ec 0c             	sub    $0xc,%esp
c002f22c:	50                   	push   %eax
c002f22d:	e8 2b 15 00 00       	call   c003075d <file_close>
c002f232:	83 c4 10             	add    $0x10,%esp
    if (file->dir) dir_close(file->dir);
c002f235:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f238:	8b 40 10             	mov    0x10(%eax),%eax
c002f23b:	85 c0                	test   %eax,%eax
c002f23d:	74 12                	je     c002f251 <sys_close+0x63>
c002f23f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f242:	8b 40 10             	mov    0x10(%eax),%eax
c002f245:	83 ec 0c             	sub    $0xc,%esp
c002f248:	50                   	push   %eax
c002f249:	e8 e6 1f 00 00       	call   c0031234 <dir_close>
c002f24e:	83 c4 10             	add    $0x10,%esp
    list_remove(&(file->elem));
c002f251:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f254:	83 c0 08             	add    $0x8,%eax
c002f257:	83 ec 0c             	sub    $0xc,%esp
c002f25a:	50                   	push   %eax
c002f25b:	e8 aa b9 ff ff       	call   c002ac0a <list_remove>
c002f260:	83 c4 10             	add    $0x10,%esp
    palloc_free_page(file);
c002f263:	83 ec 0c             	sub    $0xc,%esp
c002f266:	ff 75 f4             	pushl  -0xc(%ebp)
c002f269:	e8 f2 4c ff ff       	call   c0023f60 <palloc_free_page>
c002f26e:	83 c4 10             	add    $0x10,%esp
  }
  lock_release (&fileSys_lock);
c002f271:	83 ec 0c             	sub    $0xc,%esp
c002f274:	68 60 87 04 c0       	push   $0xc0048760
c002f279:	e8 f1 44 ff ff       	call   c002376f <lock_release>
c002f27e:	83 c4 10             	add    $0x10,%esp
}
c002f281:	90                   	nop
c002f282:	c9                   	leave  
c002f283:	c3                   	ret    

c002f284 <check_valid_ptr>:

/*****************************************************************/
static void
check_valid_ptr(const uint8_t *uaddr) {
c002f284:	55                   	push   %ebp
c002f285:	89 e5                	mov    %esp,%ebp
c002f287:	83 ec 18             	sub    $0x18,%esp
  if (uaddr == NULL)
c002f28a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002f28e:	75 0d                	jne    c002f29d <check_valid_ptr+0x19>
    sys_exit(-1);
c002f290:	83 ec 0c             	sub    $0xc,%esp
c002f293:	6a ff                	push   $0xffffffff
c002f295:	e8 2b f9 ff ff       	call   c002ebc5 <sys_exit>
c002f29a:	83 c4 10             	add    $0x10,%esp
  int res = get_user(uaddr);
c002f29d:	83 ec 0c             	sub    $0xc,%esp
c002f2a0:	ff 75 08             	pushl  0x8(%ebp)
c002f2a3:	e8 72 00 00 00       	call   c002f31a <get_user>
c002f2a8:	83 c4 10             	add    $0x10,%esp
c002f2ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (res == -1) // page fault || seg fault
c002f2ae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c002f2b2:	75 0d                	jne    c002f2c1 <check_valid_ptr+0x3d>
    sys_exit (-1);
c002f2b4:	83 ec 0c             	sub    $0xc,%esp
c002f2b7:	6a ff                	push   $0xffffffff
c002f2b9:	e8 07 f9 ff ff       	call   c002ebc5 <sys_exit>
c002f2be:	83 c4 10             	add    $0x10,%esp
}
c002f2c1:	90                   	nop
c002f2c2:	c9                   	leave  
c002f2c3:	c3                   	ret    

c002f2c4 <mem_read>:

// read "bytes" data from *from* and put it to writeTo
static int
mem_read(void *from, void* writeTo, int bytes) {
c002f2c4:	55                   	push   %ebp
c002f2c5:	89 e5                	mov    %esp,%ebp
c002f2c7:	83 ec 18             	sub    $0x18,%esp
  int32_t res;
  int i;
  for(i = 0; i < bytes; i++) {
c002f2ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002f2d1:	eb 3a                	jmp    c002f30d <mem_read+0x49>
    res = get_user(from + i);
c002f2d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002f2d6:	8b 45 08             	mov    0x8(%ebp),%eax
c002f2d9:	01 d0                	add    %edx,%eax
c002f2db:	83 ec 0c             	sub    $0xc,%esp
c002f2de:	50                   	push   %eax
c002f2df:	e8 36 00 00 00       	call   c002f31a <get_user>
c002f2e4:	83 c4 10             	add    $0x10,%esp
c002f2e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (res == -1) // segfault or invalid memory access
c002f2ea:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c002f2ee:	75 0d                	jne    c002f2fd <mem_read+0x39>
      sys_exit(-1);
c002f2f0:	83 ec 0c             	sub    $0xc,%esp
c002f2f3:	6a ff                	push   $0xffffffff
c002f2f5:	e8 cb f8 ff ff       	call   c002ebc5 <sys_exit>
c002f2fa:	83 c4 10             	add    $0x10,%esp
    *(char*)(writeTo + i) = res & 0xff;
c002f2fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002f300:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f303:	01 d0                	add    %edx,%eax
c002f305:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002f308:	88 10                	mov    %dl,(%eax)
  for(i = 0; i < bytes; i++) {
c002f30a:	ff 45 f4             	incl   -0xc(%ebp)
c002f30d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f310:	3b 45 10             	cmp    0x10(%ebp),%eax
c002f313:	7c be                	jl     c002f2d3 <mem_read+0xf>
  }
  return (int) bytes;
c002f315:	8b 45 10             	mov    0x10(%ebp),%eax
}
c002f318:	c9                   	leave  
c002f319:	c3                   	ret    

c002f31a <get_user>:
 * 'uaddr' must be below PHYS_BASE.
 * Returns the byte value if successful (extract the least significant byte),
 * or -1 in case of error (a segfault occurred or invalid uaddr)
 */
static int32_t
get_user (const uint8_t *uaddr) {
c002f31a:	55                   	push   %ebp
c002f31b:	89 e5                	mov    %esp,%ebp
c002f31d:	83 ec 10             	sub    $0x10,%esp
  // check valid 
  if (!is_user_vaddr(uaddr)) {
c002f320:	ff 75 08             	pushl  0x8(%ebp)
c002f323:	e8 c4 f1 ff ff       	call   c002e4ec <is_user_vaddr>
c002f328:	83 c4 04             	add    $0x4,%esp
c002f32b:	83 f0 01             	xor    $0x1,%eax
c002f32e:	84 c0                	test   %al,%al
c002f330:	74 07                	je     c002f339 <get_user+0x1f>
    return -1;
c002f332:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002f337:	eb 11                	jmp    c002f34a <get_user+0x30>
  }

  int result;
  asm ("movl $1f, %0; movzbl %1, %0; 1:"
c002f339:	8b 55 08             	mov    0x8(%ebp),%edx
c002f33c:	b8 44 f3 02 c0       	mov    $0xc002f344,%eax
c002f341:	0f b6 02             	movzbl (%edx),%eax
c002f344:	89 45 fc             	mov    %eax,-0x4(%ebp)
      : "=&a" (result) : "m" (*uaddr));
  return result;
c002f347:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c002f34a:	c9                   	leave  
c002f34b:	c3                   	ret    

c002f34c <put_user>:
/* Writes a single byte (content is 'byte') to user address 'udst'.
 * 'udst' must be below PHYS_BASE.
 * Returns true if successful, false if a segfault occurred.
 */
static bool
put_user (uint8_t *udst, uint8_t byte) {
c002f34c:	55                   	push   %ebp
c002f34d:	89 e5                	mov    %esp,%ebp
c002f34f:	83 ec 14             	sub    $0x14,%esp
c002f352:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f355:	88 45 ec             	mov    %al,-0x14(%ebp)
  // check valid
  if (!is_user_vaddr(udst)) {
c002f358:	ff 75 08             	pushl  0x8(%ebp)
c002f35b:	e8 8c f1 ff ff       	call   c002e4ec <is_user_vaddr>
c002f360:	83 c4 04             	add    $0x4,%esp
c002f363:	83 f0 01             	xor    $0x1,%eax
c002f366:	84 c0                	test   %al,%al
c002f368:	74 04                	je     c002f36e <put_user+0x22>
    return -1;
c002f36a:	b0 01                	mov    $0x1,%al
c002f36c:	eb 17                	jmp    c002f385 <put_user+0x39>
  }
  int error_code;
  asm ("movl $1f, %0; movb %b2, %1; 1:"
c002f36e:	8b 4d 08             	mov    0x8(%ebp),%ecx
c002f371:	8a 55 ec             	mov    -0x14(%ebp),%dl
c002f374:	b8 7b f3 02 c0       	mov    $0xc002f37b,%eax
c002f379:	88 11                	mov    %dl,(%ecx)
c002f37b:	89 45 fc             	mov    %eax,-0x4(%ebp)
      : "=&a" (error_code), "=m" (*udst) : "q" (byte));
  return error_code != -1;
c002f37e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
c002f382:	0f 95 c0             	setne  %al
}
c002f385:	c9                   	leave  
c002f386:	c3                   	ret    

c002f387 <sys_munmap>:

#ifdef VM
bool sys_munmap(mmapid_t mid){
c002f387:	55                   	push   %ebp
c002f388:	89 e5                	mov    %esp,%ebp
c002f38a:	53                   	push   %ebx
c002f38b:	83 ec 24             	sub    $0x24,%esp
    struct thread * cur_thread = thread_current ();
c002f38e:	e8 56 1b ff ff       	call   c0020ee9 <thread_current>
c002f393:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct mmap_desc *mmap_d = find_mmap_desc(cur_thread, mid);
c002f396:	83 ec 08             	sub    $0x8,%esp
c002f399:	ff 75 08             	pushl  0x8(%ebp)
c002f39c:	ff 75 f0             	pushl  -0x10(%ebp)
c002f39f:	e8 de 03 00 00       	call   c002f782 <find_mmap_desc>
c002f3a4:	83 c4 10             	add    $0x10,%esp
c002f3a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(mmap_d == NULL)
c002f3aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002f3ae:	75 07                	jne    c002f3b7 <sys_munmap+0x30>
        return false;
c002f3b0:	b0 00                	mov    $0x0,%al
c002f3b2:	e9 c7 00 00 00       	jmp    c002f47e <sys_munmap+0xf7>
    lock_acquire(&fileSys_lock);
c002f3b7:	83 ec 0c             	sub    $0xc,%esp
c002f3ba:	68 60 87 04 c0       	push   $0xc0048760
c002f3bf:	e8 6a 41 ff ff       	call   c002352e <lock_acquire>
c002f3c4:	83 c4 10             	add    $0x10,%esp
    {size_t file_size = mmap_d->size;
c002f3c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f3ca:	8b 40 14             	mov    0x14(%eax),%eax
c002f3cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for(size_t offset=0; offset<file_size; offset+=PGSIZE){
c002f3d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002f3d7:	eb 5c                	jmp    c002f435 <sys_munmap+0xae>
        void *addr = mmap_d->addr + offset;
c002f3d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f3dc:	8b 50 10             	mov    0x10(%eax),%edx
c002f3df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f3e2:	01 d0                	add    %edx,%eax
c002f3e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        size_t bytes = (offset + PGSIZE < file_size ? PGSIZE : file_size-offset);
c002f3e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f3ea:	05 00 10 00 00       	add    $0x1000,%eax
c002f3ef:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c002f3f2:	72 08                	jb     c002f3fc <sys_munmap+0x75>
c002f3f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002f3f7:	2b 45 f4             	sub    -0xc(%ebp),%eax
c002f3fa:	eb 05                	jmp    c002f401 <sys_munmap+0x7a>
c002f3fc:	b8 00 10 00 00       	mov    $0x1000,%eax
c002f401:	89 45 e0             	mov    %eax,-0x20(%ebp)
        vm_supt_mm_unmap(cur_thread->supt, cur_thread->pagedir, addr, mmap_d->file, offset, bytes);
c002f404:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c002f407:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f40a:	8b 48 08             	mov    0x8(%eax),%ecx
c002f40d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f410:	8b 50 30             	mov    0x30(%eax),%edx
c002f413:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f416:	8b 40 64             	mov    0x64(%eax),%eax
c002f419:	83 ec 08             	sub    $0x8,%esp
c002f41c:	ff 75 e0             	pushl  -0x20(%ebp)
c002f41f:	53                   	push   %ebx
c002f420:	51                   	push   %ecx
c002f421:	ff 75 e4             	pushl  -0x1c(%ebp)
c002f424:	52                   	push   %edx
c002f425:	50                   	push   %eax
c002f426:	e8 68 43 00 00       	call   c0033793 <vm_supt_mm_unmap>
c002f42b:	83 c4 20             	add    $0x20,%esp
    for(size_t offset=0; offset<file_size; offset+=PGSIZE){
c002f42e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c002f435:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f438:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c002f43b:	72 9c                	jb     c002f3d9 <sys_munmap+0x52>
    }
    list_remove(&mmap_d->elem);
c002f43d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f440:	83 ec 0c             	sub    $0xc,%esp
c002f443:	50                   	push   %eax
c002f444:	e8 c1 b7 ff ff       	call   c002ac0a <list_remove>
c002f449:	83 c4 10             	add    $0x10,%esp
    file_close(mmap_d->file);
c002f44c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f44f:	8b 40 08             	mov    0x8(%eax),%eax
c002f452:	83 ec 0c             	sub    $0xc,%esp
c002f455:	50                   	push   %eax
c002f456:	e8 02 13 00 00       	call   c003075d <file_close>
c002f45b:	83 c4 10             	add    $0x10,%esp
    free(mmap_d);}
c002f45e:	83 ec 0c             	sub    $0xc,%esp
c002f461:	ff 75 ec             	pushl  -0x14(%ebp)
c002f464:	e8 e7 4f ff ff       	call   c0024450 <free>
c002f469:	83 c4 10             	add    $0x10,%esp
    lock_release(&fileSys_lock);
c002f46c:	83 ec 0c             	sub    $0xc,%esp
c002f46f:	68 60 87 04 c0       	push   $0xc0048760
c002f474:	e8 f6 42 ff ff       	call   c002376f <lock_release>
c002f479:	83 c4 10             	add    $0x10,%esp
    return true;
c002f47c:	b0 01                	mov    $0x1,%al
}
c002f47e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002f481:	c9                   	leave  
c002f482:	c3                   	ret    

c002f483 <sys_mmap>:

mmapid_t sys_mmap(int fd, void *usr_page){
c002f483:	55                   	push   %ebp
c002f484:	89 e5                	mov    %esp,%ebp
c002f486:	83 ec 38             	sub    $0x38,%esp
    if(usr_page == NULL || pg_ofs(usr_page) != 0)
c002f489:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002f48d:	74 0f                	je     c002f49e <sys_mmap+0x1b>
c002f48f:	ff 75 0c             	pushl  0xc(%ebp)
c002f492:	e8 3b f0 ff ff       	call   c002e4d2 <pg_ofs>
c002f497:	83 c4 04             	add    $0x4,%esp
c002f49a:	85 c0                	test   %eax,%eax
c002f49c:	74 0a                	je     c002f4a8 <sys_mmap+0x25>
        return -1;
c002f49e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002f4a3:	e9 21 02 00 00       	jmp    c002f6c9 <sys_mmap+0x246>
    if(fd <= 1)
c002f4a8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c002f4ac:	7f 0a                	jg     c002f4b8 <sys_mmap+0x35>
        return -1;
c002f4ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002f4b3:	e9 11 02 00 00       	jmp    c002f6c9 <sys_mmap+0x246>
    struct thread * cur_thread = thread_current ();
c002f4b8:	e8 2c 1a ff ff       	call   c0020ee9 <thread_current>
c002f4bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    lock_acquire(&fileSys_lock);
c002f4c0:	83 ec 0c             	sub    $0xc,%esp
c002f4c3:	68 60 87 04 c0       	push   $0xc0048760
c002f4c8:	e8 61 40 ff ff       	call   c002352e <lock_acquire>
c002f4cd:	83 c4 10             	add    $0x10,%esp

    struct file* file = NULL;
c002f4d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct file_descriptor *fileD = get_file_descriptor(thread_current(), fd, 0);
c002f4d7:	e8 0d 1a ff ff       	call   c0020ee9 <thread_current>
c002f4dc:	83 ec 04             	sub    $0x4,%esp
c002f4df:	6a 00                	push   $0x0
c002f4e1:	ff 75 08             	pushl  0x8(%ebp)
c002f4e4:	50                   	push   %eax
c002f4e5:	e8 11 f0 ff ff       	call   c002e4fb <get_file_descriptor>
c002f4ea:	83 c4 10             	add    $0x10,%esp
c002f4ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if(fileD && fileD->file)
c002f4f0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002f4f4:	74 1f                	je     c002f515 <sys_mmap+0x92>
c002f4f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002f4f9:	8b 40 04             	mov    0x4(%eax),%eax
c002f4fc:	85 c0                	test   %eax,%eax
c002f4fe:	74 15                	je     c002f515 <sys_mmap+0x92>
        file = file_reopen(fileD->file);
c002f500:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002f503:	8b 40 04             	mov    0x4(%eax),%eax
c002f506:	83 ec 0c             	sub    $0xc,%esp
c002f509:	50                   	push   %eax
c002f50a:	e8 29 12 00 00       	call   c0030738 <file_reopen>
c002f50f:	83 c4 10             	add    $0x10,%esp
c002f512:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(file == NULL){
c002f515:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f519:	75 1a                	jne    c002f535 <sys_mmap+0xb2>
        lock_release (&fileSys_lock);
c002f51b:	83 ec 0c             	sub    $0xc,%esp
c002f51e:	68 60 87 04 c0       	push   $0xc0048760
c002f523:	e8 47 42 ff ff       	call   c002376f <lock_release>
c002f528:	83 c4 10             	add    $0x10,%esp
        return -1;
c002f52b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002f530:	e9 94 01 00 00       	jmp    c002f6c9 <sys_mmap+0x246>
    }
    size_t file_size = file_length (file);
c002f535:	83 ec 0c             	sub    $0xc,%esp
c002f538:	ff 75 f4             	pushl  -0xc(%ebp)
c002f53b:	e8 bb 13 00 00       	call   c00308fb <file_length>
c002f540:	83 c4 10             	add    $0x10,%esp
c002f543:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if(file_size == 0){
c002f546:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c002f54a:	75 1a                	jne    c002f566 <sys_mmap+0xe3>
        lock_release (&fileSys_lock);
c002f54c:	83 ec 0c             	sub    $0xc,%esp
c002f54f:	68 60 87 04 c0       	push   $0xc0048760
c002f554:	e8 16 42 ff ff       	call   c002376f <lock_release>
c002f559:	83 c4 10             	add    $0x10,%esp
        return -1;
c002f55c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002f561:	e9 63 01 00 00       	jmp    c002f6c9 <sys_mmap+0x246>
    }
    for(size_t offset=0; offset < file_size; offset+=PGSIZE){
c002f566:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002f56d:	eb 45                	jmp    c002f5b4 <sys_mmap+0x131>
        void *addr = usr_page + offset;
c002f56f:	8b 55 0c             	mov    0xc(%ebp),%edx
c002f572:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f575:	01 d0                	add    %edx,%eax
c002f577:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if(vm_supt_has_entry(cur_thread->supt, addr)){
c002f57a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002f57d:	8b 40 64             	mov    0x64(%eax),%eax
c002f580:	83 ec 08             	sub    $0x8,%esp
c002f583:	ff 75 d8             	pushl  -0x28(%ebp)
c002f586:	50                   	push   %eax
c002f587:	e8 8c 3f 00 00       	call   c0033518 <vm_supt_has_entry>
c002f58c:	83 c4 10             	add    $0x10,%esp
c002f58f:	84 c0                	test   %al,%al
c002f591:	74 1a                	je     c002f5ad <sys_mmap+0x12a>
            lock_release (&fileSys_lock);
c002f593:	83 ec 0c             	sub    $0xc,%esp
c002f596:	68 60 87 04 c0       	push   $0xc0048760
c002f59b:	e8 cf 41 ff ff       	call   c002376f <lock_release>
c002f5a0:	83 c4 10             	add    $0x10,%esp
            return -1;
c002f5a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002f5a8:	e9 1c 01 00 00       	jmp    c002f6c9 <sys_mmap+0x246>
    for(size_t offset=0; offset < file_size; offset+=PGSIZE){
c002f5ad:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
c002f5b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f5b7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c002f5ba:	72 b3                	jb     c002f56f <sys_mmap+0xec>
        }
    }
    for(size_t offset=0; offset < file_size; offset+=PGSIZE){
c002f5bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c002f5c3:	eb 5e                	jmp    c002f623 <sys_mmap+0x1a0>
        void *addr = usr_page + offset;
c002f5c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c002f5c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f5cb:	01 d0                	add    %edx,%eax
c002f5cd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        size_t read_bytes = (offset + PGSIZE < file_size ? PGSIZE : file_size - offset);
c002f5d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f5d3:	05 00 10 00 00       	add    $0x1000,%eax
c002f5d8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c002f5db:	72 08                	jb     c002f5e5 <sys_mmap+0x162>
c002f5dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002f5e0:	2b 45 ec             	sub    -0x14(%ebp),%eax
c002f5e3:	eb 05                	jmp    c002f5ea <sys_mmap+0x167>
c002f5e5:	b8 00 10 00 00       	mov    $0x1000,%eax
c002f5ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
        size_t zero_bytes = PGSIZE - read_bytes;
c002f5ed:	b8 00 10 00 00       	mov    $0x1000,%eax
c002f5f2:	2b 45 d0             	sub    -0x30(%ebp),%eax
c002f5f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
        vm_supt_install_filesys(cur_thread->supt, addr, file, offset, read_bytes, zero_bytes, true);
c002f5f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002f5fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002f5fe:	8b 40 64             	mov    0x64(%eax),%eax
c002f601:	83 ec 04             	sub    $0x4,%esp
c002f604:	6a 01                	push   $0x1
c002f606:	ff 75 cc             	pushl  -0x34(%ebp)
c002f609:	ff 75 d0             	pushl  -0x30(%ebp)
c002f60c:	52                   	push   %edx
c002f60d:	ff 75 f4             	pushl  -0xc(%ebp)
c002f610:	ff 75 d4             	pushl  -0x2c(%ebp)
c002f613:	50                   	push   %eax
c002f614:	e8 2b 3e 00 00       	call   c0033444 <vm_supt_install_filesys>
c002f619:	83 c4 20             	add    $0x20,%esp
    for(size_t offset=0; offset < file_size; offset+=PGSIZE){
c002f61c:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
c002f623:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f626:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c002f629:	72 9a                	jb     c002f5c5 <sys_mmap+0x142>
    }

    mmapid_t mid;
    if(!list_empty(&cur_thread->mmap_list))
c002f62b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002f62e:	83 c0 68             	add    $0x68,%eax
c002f631:	83 ec 0c             	sub    $0xc,%esp
c002f634:	50                   	push   %eax
c002f635:	e8 52 b7 ff ff       	call   c002ad8c <list_empty>
c002f63a:	83 c4 10             	add    $0x10,%esp
c002f63d:	83 f0 01             	xor    $0x1,%eax
c002f640:	84 c0                	test   %al,%al
c002f642:	74 21                	je     c002f665 <sys_mmap+0x1e2>
        mid = list_entry(list_back(&cur_thread->mmap_list), struct mmap_desc, elem)->id + 1;
c002f644:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002f647:	83 c0 68             	add    $0x68,%eax
c002f64a:	83 ec 0c             	sub    $0xc,%esp
c002f64d:	50                   	push   %eax
c002f64e:	e8 a8 b6 ff ff       	call   c002acfb <list_back>
c002f653:	83 c4 10             	add    $0x10,%esp
c002f656:	83 c0 04             	add    $0x4,%eax
c002f659:	83 e8 04             	sub    $0x4,%eax
c002f65c:	8b 40 0c             	mov    0xc(%eax),%eax
c002f65f:	40                   	inc    %eax
c002f660:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002f663:	eb 07                	jmp    c002f66c <sys_mmap+0x1e9>
    else mid = 1;
c002f665:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
    struct mmap_desc *mmap_d = (struct mmap_desc*)malloc(sizeof(struct mmap_desc));
c002f66c:	83 ec 0c             	sub    $0xc,%esp
c002f66f:	6a 18                	push   $0x18
c002f671:	e8 dd 4a ff ff       	call   c0024153 <malloc>
c002f676:	83 c4 10             	add    $0x10,%esp
c002f679:	89 45 c8             	mov    %eax,-0x38(%ebp)
    mmap_d->id = mid;
c002f67c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c002f67f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c002f682:	89 50 0c             	mov    %edx,0xc(%eax)
    mmap_d->addr = usr_page;
c002f685:	8b 45 c8             	mov    -0x38(%ebp),%eax
c002f688:	8b 55 0c             	mov    0xc(%ebp),%edx
c002f68b:	89 50 10             	mov    %edx,0x10(%eax)
    mmap_d->file = file;
c002f68e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c002f691:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002f694:	89 50 08             	mov    %edx,0x8(%eax)
    mmap_d->size = file_size;
c002f697:	8b 45 c8             	mov    -0x38(%ebp),%eax
c002f69a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c002f69d:	89 50 14             	mov    %edx,0x14(%eax)
    list_push_back(&cur_thread->mmap_list, &mmap_d->elem);
c002f6a0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c002f6a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002f6a6:	83 c2 68             	add    $0x68,%edx
c002f6a9:	83 ec 08             	sub    $0x8,%esp
c002f6ac:	50                   	push   %eax
c002f6ad:	52                   	push   %edx
c002f6ae:	e8 31 b5 ff ff       	call   c002abe4 <list_push_back>
c002f6b3:	83 c4 10             	add    $0x10,%esp
    lock_release (&fileSys_lock);
c002f6b6:	83 ec 0c             	sub    $0xc,%esp
c002f6b9:	68 60 87 04 c0       	push   $0xc0048760
c002f6be:	e8 ac 40 ff ff       	call   c002376f <lock_release>
c002f6c3:	83 c4 10             	add    $0x10,%esp
    return mid;
c002f6c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c002f6c9:	c9                   	leave  
c002f6ca:	c3                   	ret    

c002f6cb <preload_pin_pages>:

void preload_pin_pages(const void *buffer, size_t size){
c002f6cb:	55                   	push   %ebp
c002f6cc:	89 e5                	mov    %esp,%ebp
c002f6ce:	83 ec 18             	sub    $0x18,%esp
    struct supplemental_page_table *supt = thread_current()->supt;
c002f6d1:	e8 13 18 ff ff       	call   c0020ee9 <thread_current>
c002f6d6:	8b 40 64             	mov    0x64(%eax),%eax
c002f6d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t *pagedir = thread_current ()->pagedir;
c002f6dc:	e8 08 18 ff ff       	call   c0020ee9 <thread_current>
c002f6e1:	8b 40 30             	mov    0x30(%eax),%eax
c002f6e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(void *usr_page = pg_round_down(buffer); usr_page < buffer + size; usr_page+=PGSIZE){
c002f6e7:	83 ec 0c             	sub    $0xc,%esp
c002f6ea:	ff 75 08             	pushl  0x8(%ebp)
c002f6ed:	e8 ed ed ff ff       	call   c002e4df <pg_round_down>
c002f6f2:	83 c4 10             	add    $0x10,%esp
c002f6f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002f6f8:	eb 2c                	jmp    c002f726 <preload_pin_pages+0x5b>
        vm_load_page(supt, pagedir, usr_page);
c002f6fa:	83 ec 04             	sub    $0x4,%esp
c002f6fd:	ff 75 f4             	pushl  -0xc(%ebp)
c002f700:	ff 75 ec             	pushl  -0x14(%ebp)
c002f703:	ff 75 f0             	pushl  -0x10(%ebp)
c002f706:	e8 31 3f 00 00       	call   c003363c <vm_load_page>
c002f70b:	83 c4 10             	add    $0x10,%esp
        vm_pin_page(supt, usr_page);
c002f70e:	83 ec 08             	sub    $0x8,%esp
c002f711:	ff 75 f4             	pushl  -0xc(%ebp)
c002f714:	ff 75 f0             	pushl  -0x10(%ebp)
c002f717:	e8 72 42 00 00       	call   c003398e <vm_pin_page>
c002f71c:	83 c4 10             	add    $0x10,%esp
    for(void *usr_page = pg_round_down(buffer); usr_page < buffer + size; usr_page+=PGSIZE){
c002f71f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c002f726:	8b 55 08             	mov    0x8(%ebp),%edx
c002f729:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f72c:	01 d0                	add    %edx,%eax
c002f72e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002f731:	77 c7                	ja     c002f6fa <preload_pin_pages+0x2f>
    }
}
c002f733:	90                   	nop
c002f734:	c9                   	leave  
c002f735:	c3                   	ret    

c002f736 <preload_unpin_pages>:

void preload_unpin_pages(const void *buffer, size_t size){
c002f736:	55                   	push   %ebp
c002f737:	89 e5                	mov    %esp,%ebp
c002f739:	83 ec 18             	sub    $0x18,%esp
    struct supplemental_page_table *supt = thread_current()->supt;
c002f73c:	e8 a8 17 ff ff       	call   c0020ee9 <thread_current>
c002f741:	8b 40 64             	mov    0x64(%eax),%eax
c002f744:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(void *usr_page = pg_round_down(buffer); usr_page < buffer + size; usr_page+=PGSIZE){
c002f747:	83 ec 0c             	sub    $0xc,%esp
c002f74a:	ff 75 08             	pushl  0x8(%ebp)
c002f74d:	e8 8d ed ff ff       	call   c002e4df <pg_round_down>
c002f752:	83 c4 10             	add    $0x10,%esp
c002f755:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002f758:	eb 18                	jmp    c002f772 <preload_unpin_pages+0x3c>
        vm_unpin_page(supt, usr_page);
c002f75a:	83 ec 08             	sub    $0x8,%esp
c002f75d:	ff 75 f4             	pushl  -0xc(%ebp)
c002f760:	ff 75 f0             	pushl  -0x10(%ebp)
c002f763:	e8 5d 42 00 00       	call   c00339c5 <vm_unpin_page>
c002f768:	83 c4 10             	add    $0x10,%esp
    for(void *usr_page = pg_round_down(buffer); usr_page < buffer + size; usr_page+=PGSIZE){
c002f76b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c002f772:	8b 55 08             	mov    0x8(%ebp),%edx
c002f775:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f778:	01 d0                	add    %edx,%eax
c002f77a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002f77d:	77 db                	ja     c002f75a <preload_unpin_pages+0x24>
    }
}
c002f77f:	90                   	nop
c002f780:	c9                   	leave  
c002f781:	c3                   	ret    

c002f782 <find_mmap_desc>:

static struct mmap_desc* find_mmap_desc(struct thread* t, mmapid_t fd){
c002f782:	55                   	push   %ebp
c002f783:	89 e5                	mov    %esp,%ebp
c002f785:	83 ec 18             	sub    $0x18,%esp
    ASSERT (t!= NULL);
c002f788:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002f78c:	75 21                	jne    c002f7af <find_mmap_desc+0x2d>
c002f78e:	83 ec 0c             	sub    $0xc,%esp
c002f791:	68 7e 74 03 c0       	push   $0xc003747e
c002f796:	68 87 74 03 c0       	push   $0xc0037487
c002f79b:	68 d4 74 03 c0       	push   $0xc00374d4
c002f7a0:	68 97 02 00 00       	push   $0x297
c002f7a5:	68 9e 74 03 c0       	push   $0xc003749e
c002f7aa:	e8 e2 ad ff ff       	call   c002a591 <debug_panic>
    if(! list_empty(&t->mmap_list)){
c002f7af:	8b 45 08             	mov    0x8(%ebp),%eax
c002f7b2:	83 c0 68             	add    $0x68,%eax
c002f7b5:	83 ec 0c             	sub    $0xc,%esp
c002f7b8:	50                   	push   %eax
c002f7b9:	e8 ce b5 ff ff       	call   c002ad8c <list_empty>
c002f7be:	83 c4 10             	add    $0x10,%esp
c002f7c1:	83 f0 01             	xor    $0x1,%eax
c002f7c4:	84 c0                	test   %al,%al
c002f7c6:	74 5b                	je     c002f823 <find_mmap_desc+0xa1>
        for(struct list_elem *l_elem = list_begin(&t->mmap_list); l_elem != list_end(&t->mmap_list); l_elem = list_next(l_elem)){
c002f7c8:	8b 45 08             	mov    0x8(%ebp),%eax
c002f7cb:	83 c0 68             	add    $0x68,%eax
c002f7ce:	83 ec 0c             	sub    $0xc,%esp
c002f7d1:	50                   	push   %eax
c002f7d2:	e8 82 b0 ff ff       	call   c002a859 <list_begin>
c002f7d7:	83 c4 10             	add    $0x10,%esp
c002f7da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002f7dd:	eb 2d                	jmp    c002f80c <find_mmap_desc+0x8a>
            struct mmap_desc *mmap_d = list_entry(l_elem, struct mmap_desc, elem);
c002f7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f7e2:	83 c0 04             	add    $0x4,%eax
c002f7e5:	83 e8 04             	sub    $0x4,%eax
c002f7e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(mmap_d->id == fd)
c002f7eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f7ee:	8b 40 0c             	mov    0xc(%eax),%eax
c002f7f1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002f7f4:	75 05                	jne    c002f7fb <find_mmap_desc+0x79>
                return mmap_d;
c002f7f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f7f9:	eb 2d                	jmp    c002f828 <find_mmap_desc+0xa6>
        for(struct list_elem *l_elem = list_begin(&t->mmap_list); l_elem != list_end(&t->mmap_list); l_elem = list_next(l_elem)){
c002f7fb:	83 ec 0c             	sub    $0xc,%esp
c002f7fe:	ff 75 f4             	pushl  -0xc(%ebp)
c002f801:	e8 85 b0 ff ff       	call   c002a88b <list_next>
c002f806:	83 c4 10             	add    $0x10,%esp
c002f809:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002f80c:	8b 45 08             	mov    0x8(%ebp),%eax
c002f80f:	83 c0 68             	add    $0x68,%eax
c002f812:	83 ec 0c             	sub    $0xc,%esp
c002f815:	50                   	push   %eax
c002f816:	e8 ba b0 ff ff       	call   c002a8d5 <list_end>
c002f81b:	83 c4 10             	add    $0x10,%esp
c002f81e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002f821:	75 bc                	jne    c002f7df <find_mmap_desc+0x5d>
        }
    }
    return NULL;
c002f823:	b8 00 00 00 00       	mov    $0x0,%eax
}
c002f828:	c9                   	leave  
c002f829:	c3                   	ret    

c002f82a <sys_chdir>:
#endif

#ifdef FILESYS
bool sys_chdir(const char *name) 
{
c002f82a:	55                   	push   %ebp
c002f82b:	89 e5                	mov    %esp,%ebp
c002f82d:	83 ec 18             	sub    $0x18,%esp
   // printf("---change directory to %s---\n",name);
    lock_acquire(&fileSys_lock);
c002f830:	83 ec 0c             	sub    $0xc,%esp
c002f833:	68 60 87 04 c0       	push   $0xc0048760
c002f838:	e8 f1 3c ff ff       	call   c002352e <lock_acquire>
c002f83d:	83 c4 10             	add    $0x10,%esp
    struct dir *dir = dir_open_path(name);
c002f840:	83 ec 0c             	sub    $0xc,%esp
c002f843:	ff 75 08             	pushl  0x8(%ebp)
c002f846:	e8 15 18 00 00       	call   c0031060 <dir_open_path>
c002f84b:	83 c4 10             	add    $0x10,%esp
c002f84e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dir == NULL) 
c002f851:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f855:	75 14                	jne    c002f86b <sys_chdir+0x41>
    {
      lock_release(&fileSys_lock);
c002f857:	83 ec 0c             	sub    $0xc,%esp
c002f85a:	68 60 87 04 c0       	push   $0xc0048760
c002f85f:	e8 0b 3f ff ff       	call   c002376f <lock_release>
c002f864:	83 c4 10             	add    $0x10,%esp
      return false;
c002f867:	b0 00                	mov    $0x0,%al
c002f869:	eb 3b                	jmp    c002f8a6 <sys_chdir+0x7c>
    }
    struct thread *t = thread_current();
c002f86b:	e8 79 16 ff ff       	call   c0020ee9 <thread_current>
c002f870:	89 45 f0             	mov    %eax,-0x10(%ebp)
    dir_close(t->cwd);
c002f873:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f876:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
c002f87c:	83 ec 0c             	sub    $0xc,%esp
c002f87f:	50                   	push   %eax
c002f880:	e8 af 19 00 00       	call   c0031234 <dir_close>
c002f885:	83 c4 10             	add    $0x10,%esp
    t->cwd = dir;
c002f888:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f88b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002f88e:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    lock_release(&fileSys_lock);
c002f894:	83 ec 0c             	sub    $0xc,%esp
c002f897:	68 60 87 04 c0       	push   $0xc0048760
c002f89c:	e8 ce 3e ff ff       	call   c002376f <lock_release>
c002f8a1:	83 c4 10             	add    $0x10,%esp
    return true;
c002f8a4:	b0 01                	mov    $0x1,%al
}
c002f8a6:	c9                   	leave  
c002f8a7:	c3                   	ret    

c002f8a8 <sys_mkdir>:

bool sys_mkdir(const char *name) 
{
c002f8a8:	55                   	push   %ebp
c002f8a9:	89 e5                	mov    %esp,%ebp
c002f8ab:	53                   	push   %ebx
c002f8ac:	83 ec 24             	sub    $0x24,%esp
c002f8af:	89 e0                	mov    %esp,%eax
c002f8b1:	89 c3                	mov    %eax,%ebx
  //printf("makedir!\n");
  lock_acquire(&fileSys_lock);
c002f8b3:	83 ec 0c             	sub    $0xc,%esp
c002f8b6:	68 60 87 04 c0       	push   $0xc0048760
c002f8bb:	e8 6e 3c ff ff       	call   c002352e <lock_acquire>
c002f8c0:	83 c4 10             	add    $0x10,%esp
  int len = strlen(name);
c002f8c3:	83 ec 0c             	sub    $0xc,%esp
c002f8c6:	ff 75 08             	pushl  0x8(%ebp)
c002f8c9:	e8 e2 9f ff ff       	call   c00298b0 <strlen>
c002f8ce:	83 c4 10             	add    $0x10,%esp
c002f8d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (len == 0) 
c002f8d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f8d8:	75 17                	jne    c002f8f1 <sys_mkdir+0x49>
  {
    lock_release(&fileSys_lock);
c002f8da:	83 ec 0c             	sub    $0xc,%esp
c002f8dd:	68 60 87 04 c0       	push   $0xc0048760
c002f8e2:	e8 88 3e ff ff       	call   c002376f <lock_release>
c002f8e7:	83 c4 10             	add    $0x10,%esp
    return false;
c002f8ea:	b0 00                	mov    $0x0,%al
c002f8ec:	e9 3c 01 00 00       	jmp    c002fa2d <sys_mkdir+0x185>
  }
  char directory[len], filename[len];
c002f8f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f8f4:	8d 50 ff             	lea    -0x1(%eax),%edx
c002f8f7:	89 55 f0             	mov    %edx,-0x10(%ebp)
c002f8fa:	89 c2                	mov    %eax,%edx
c002f8fc:	b8 10 00 00 00       	mov    $0x10,%eax
c002f901:	48                   	dec    %eax
c002f902:	01 d0                	add    %edx,%eax
c002f904:	b9 10 00 00 00       	mov    $0x10,%ecx
c002f909:	ba 00 00 00 00       	mov    $0x0,%edx
c002f90e:	f7 f1                	div    %ecx
c002f910:	6b c0 10             	imul   $0x10,%eax,%eax
c002f913:	29 c4                	sub    %eax,%esp
c002f915:	89 e0                	mov    %esp,%eax
c002f917:	83 c0 00             	add    $0x0,%eax
c002f91a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002f91d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f920:	8d 50 ff             	lea    -0x1(%eax),%edx
c002f923:	89 55 e8             	mov    %edx,-0x18(%ebp)
c002f926:	89 c2                	mov    %eax,%edx
c002f928:	b8 10 00 00 00       	mov    $0x10,%eax
c002f92d:	48                   	dec    %eax
c002f92e:	01 d0                	add    %edx,%eax
c002f930:	b9 10 00 00 00       	mov    $0x10,%ecx
c002f935:	ba 00 00 00 00       	mov    $0x0,%edx
c002f93a:	f7 f1                	div    %ecx
c002f93c:	6b c0 10             	imul   $0x10,%eax,%eax
c002f93f:	29 c4                	sub    %eax,%esp
c002f941:	89 e0                	mov    %esp,%eax
c002f943:	83 c0 00             	add    $0x0,%eax
c002f946:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  parse_path_name(name, directory, filename);
c002f949:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002f94c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f94f:	83 ec 04             	sub    $0x4,%esp
c002f952:	52                   	push   %edx
c002f953:	50                   	push   %eax
c002f954:	ff 75 08             	pushl  0x8(%ebp)
c002f957:	e8 98 14 00 00       	call   c0030df4 <parse_path_name>
c002f95c:	83 c4 10             	add    $0x10,%esp
  struct dir *dir = dir_open_path(directory);
c002f95f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f962:	83 ec 0c             	sub    $0xc,%esp
c002f965:	50                   	push   %eax
c002f966:	e8 f5 16 00 00       	call   c0031060 <dir_open_path>
c002f96b:	83 c4 10             	add    $0x10,%esp
c002f96e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  block_sector_t inode_sector = 0;
c002f971:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  bool t2 = free_map_allocate (1, &inode_sector);
c002f978:	83 ec 08             	sub    $0x8,%esp
c002f97b:	8d 45 d8             	lea    -0x28(%ebp),%eax
c002f97e:	50                   	push   %eax
c002f97f:	6a 01                	push   $0x1
c002f981:	e8 0f 0b 00 00       	call   c0030495 <free_map_allocate>
c002f986:	83 c4 10             	add    $0x10,%esp
c002f989:	85 c0                	test   %eax,%eax
c002f98b:	0f 95 c0             	setne  %al
c002f98e:	88 45 df             	mov    %al,-0x21(%ebp)
  bool t3 = inode_create (inode_sector, 0, 1);
c002f991:	8b 45 d8             	mov    -0x28(%ebp),%eax
c002f994:	83 ec 04             	sub    $0x4,%esp
c002f997:	6a 01                	push   $0x1
c002f999:	6a 00                	push   $0x0
c002f99b:	50                   	push   %eax
c002f99c:	e8 e6 22 00 00       	call   c0031c87 <inode_create>
c002f9a1:	83 c4 10             	add    $0x10,%esp
c002f9a4:	88 45 de             	mov    %al,-0x22(%ebp)
  bool t4 = dir_add (dir, filename, inode_sector, 1);
c002f9a7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c002f9aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002f9ad:	6a 01                	push   $0x1
c002f9af:	52                   	push   %edx
c002f9b0:	50                   	push   %eax
c002f9b1:	ff 75 e0             	pushl  -0x20(%ebp)
c002f9b4:	e8 a3 1a 00 00       	call   c003145c <dir_add>
c002f9b9:	83 c4 10             	add    $0x10,%esp
c002f9bc:	88 45 dd             	mov    %al,-0x23(%ebp)
 // printf("---filename:   %s\n", filename);
  //printf("-----%d %d %d-----\n", t2 ,t3, t4);
  bool success = (dir != NULL
                  && t2
                  && t3
                  && t4);
c002f9bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002f9c3:	74 19                	je     c002f9de <sys_mkdir+0x136>
                  && t2
c002f9c5:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
c002f9c9:	74 13                	je     c002f9de <sys_mkdir+0x136>
                  && t3
c002f9cb:	80 7d de 00          	cmpb   $0x0,-0x22(%ebp)
c002f9cf:	74 0d                	je     c002f9de <sys_mkdir+0x136>
                  && t4);
c002f9d1:	80 7d dd 00          	cmpb   $0x0,-0x23(%ebp)
c002f9d5:	74 07                	je     c002f9de <sys_mkdir+0x136>
c002f9d7:	b8 01 00 00 00       	mov    $0x1,%eax
c002f9dc:	eb 05                	jmp    c002f9e3 <sys_mkdir+0x13b>
c002f9de:	b8 00 00 00 00       	mov    $0x0,%eax
  bool success = (dir != NULL
c002f9e3:	88 45 dc             	mov    %al,-0x24(%ebp)
c002f9e6:	80 65 dc 01          	andb   $0x1,-0x24(%ebp)
  if (!success && inode_sector != 0)
c002f9ea:	8a 45 dc             	mov    -0x24(%ebp),%al
c002f9ed:	83 f0 01             	xor    $0x1,%eax
c002f9f0:	84 c0                	test   %al,%al
c002f9f2:	74 18                	je     c002fa0c <sys_mkdir+0x164>
c002f9f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c002f9f7:	85 c0                	test   %eax,%eax
c002f9f9:	74 11                	je     c002fa0c <sys_mkdir+0x164>
    free_map_release(inode_sector, 1);
c002f9fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c002f9fe:	83 ec 08             	sub    $0x8,%esp
c002fa01:	6a 01                	push   $0x1
c002fa03:	50                   	push   %eax
c002fa04:	e8 0c 0b 00 00       	call   c0030515 <free_map_release>
c002fa09:	83 c4 10             	add    $0x10,%esp
  dir_close(dir);
c002fa0c:	83 ec 0c             	sub    $0xc,%esp
c002fa0f:	ff 75 e0             	pushl  -0x20(%ebp)
c002fa12:	e8 1d 18 00 00       	call   c0031234 <dir_close>
c002fa17:	83 c4 10             	add    $0x10,%esp
  lock_release(&fileSys_lock);
c002fa1a:	83 ec 0c             	sub    $0xc,%esp
c002fa1d:	68 60 87 04 c0       	push   $0xc0048760
c002fa22:	e8 48 3d ff ff       	call   c002376f <lock_release>
c002fa27:	83 c4 10             	add    $0x10,%esp
  return success;
c002fa2a:	8a 45 dc             	mov    -0x24(%ebp),%al
c002fa2d:	89 dc                	mov    %ebx,%esp
}
c002fa2f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002fa32:	c9                   	leave  
c002fa33:	c3                   	ret    

c002fa34 <sys_readdir>:

bool sys_readdir(int fd, char *name)
{
c002fa34:	55                   	push   %ebp
c002fa35:	89 e5                	mov    %esp,%ebp
c002fa37:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002fa3a:	83 ec 0c             	sub    $0xc,%esp
c002fa3d:	68 60 87 04 c0       	push   $0xc0048760
c002fa42:	e8 e7 3a ff ff       	call   c002352e <lock_acquire>
c002fa47:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fdr = get_file_descriptor(thread_current(), fd, 2);
c002fa4a:	e8 9a 14 ff ff       	call   c0020ee9 <thread_current>
c002fa4f:	83 ec 04             	sub    $0x4,%esp
c002fa52:	6a 02                	push   $0x2
c002fa54:	ff 75 08             	pushl  0x8(%ebp)
c002fa57:	50                   	push   %eax
c002fa58:	e8 9e ea ff ff       	call   c002e4fb <get_file_descriptor>
c002fa5d:	83 c4 10             	add    $0x10,%esp
c002fa60:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fdr == NULL) 
c002fa63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002fa67:	75 17                	jne    c002fa80 <sys_readdir+0x4c>
  {
    lock_release(&fileSys_lock);
c002fa69:	83 ec 0c             	sub    $0xc,%esp
c002fa6c:	68 60 87 04 c0       	push   $0xc0048760
c002fa71:	e8 f9 3c ff ff       	call   c002376f <lock_release>
c002fa76:	83 c4 10             	add    $0x10,%esp
    return false;
c002fa79:	b0 00                	mov    $0x0,%al
c002fa7b:	e9 ac 00 00 00       	jmp    c002fb2c <sys_readdir+0xf8>
  }
  struct inode *inode = file_get_inode(fdr->file);
c002fa80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fa83:	8b 40 04             	mov    0x4(%eax),%eax
c002fa86:	83 ec 0c             	sub    $0xc,%esp
c002fa89:	50                   	push   %eax
c002fa8a:	e8 0a 0d 00 00       	call   c0030799 <file_get_inode>
c002fa8f:	83 c4 10             	add    $0x10,%esp
c002fa92:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (inode == NULL) 
c002fa95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002fa99:	75 14                	jne    c002faaf <sys_readdir+0x7b>
  {
    lock_release(&fileSys_lock);
c002fa9b:	83 ec 0c             	sub    $0xc,%esp
c002fa9e:	68 60 87 04 c0       	push   $0xc0048760
c002faa3:	e8 c7 3c ff ff       	call   c002376f <lock_release>
c002faa8:	83 c4 10             	add    $0x10,%esp
    return false;
c002faab:	b0 00                	mov    $0x0,%al
c002faad:	eb 7d                	jmp    c002fb2c <sys_readdir+0xf8>
  }
  if (!inode_dir(inode)) 
c002faaf:	83 ec 0c             	sub    $0xc,%esp
c002fab2:	ff 75 f0             	pushl  -0x10(%ebp)
c002fab5:	e8 41 2a 00 00       	call   c00324fb <inode_dir>
c002faba:	83 c4 10             	add    $0x10,%esp
c002fabd:	85 c0                	test   %eax,%eax
c002fabf:	75 14                	jne    c002fad5 <sys_readdir+0xa1>
  {
    lock_release(&fileSys_lock);
c002fac1:	83 ec 0c             	sub    $0xc,%esp
c002fac4:	68 60 87 04 c0       	push   $0xc0048760
c002fac9:	e8 a1 3c ff ff       	call   c002376f <lock_release>
c002face:	83 c4 10             	add    $0x10,%esp
    return false;
c002fad1:	b0 00                	mov    $0x0,%al
c002fad3:	eb 57                	jmp    c002fb2c <sys_readdir+0xf8>
  }
  struct dir *dir = fdr -> dir;
c002fad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fad8:	8b 40 10             	mov    0x10(%eax),%eax
c002fadb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  ASSERT(dir != NULL);
c002fade:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002fae2:	75 21                	jne    c002fb05 <sys_readdir+0xd1>
c002fae4:	83 ec 0c             	sub    $0xc,%esp
c002fae7:	68 b7 74 03 c0       	push   $0xc00374b7
c002faec:	68 87 74 03 c0       	push   $0xc0037487
c002faf1:	68 e4 74 03 c0       	push   $0xc00374e4
c002faf6:	68 ea 02 00 00       	push   $0x2ea
c002fafb:	68 9e 74 03 c0       	push   $0xc003749e
c002fb00:	e8 8c aa ff ff       	call   c002a591 <debug_panic>
  bool tmp = dir_readdir(dir, name);
c002fb05:	83 ec 08             	sub    $0x8,%esp
c002fb08:	ff 75 0c             	pushl  0xc(%ebp)
c002fb0b:	ff 75 ec             	pushl  -0x14(%ebp)
c002fb0e:	e8 fb 1a 00 00       	call   c003160e <dir_readdir>
c002fb13:	83 c4 10             	add    $0x10,%esp
c002fb16:	88 45 eb             	mov    %al,-0x15(%ebp)
  lock_release(&fileSys_lock);
c002fb19:	83 ec 0c             	sub    $0xc,%esp
c002fb1c:	68 60 87 04 c0       	push   $0xc0048760
c002fb21:	e8 49 3c ff ff       	call   c002376f <lock_release>
c002fb26:	83 c4 10             	add    $0x10,%esp
  return tmp;
c002fb29:	8a 45 eb             	mov    -0x15(%ebp),%al
}
c002fb2c:	c9                   	leave  
c002fb2d:	c3                   	ret    

c002fb2e <sys_isdir>:

bool sys_isdir(int fd) 
{
c002fb2e:	55                   	push   %ebp
c002fb2f:	89 e5                	mov    %esp,%ebp
c002fb31:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002fb34:	83 ec 0c             	sub    $0xc,%esp
c002fb37:	68 60 87 04 c0       	push   $0xc0048760
c002fb3c:	e8 ed 39 ff ff       	call   c002352e <lock_acquire>
c002fb41:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fdr = get_file_descriptor(thread_current(), fd , 0);
c002fb44:	e8 a0 13 ff ff       	call   c0020ee9 <thread_current>
c002fb49:	83 ec 04             	sub    $0x4,%esp
c002fb4c:	6a 00                	push   $0x0
c002fb4e:	ff 75 08             	pushl  0x8(%ebp)
c002fb51:	50                   	push   %eax
c002fb52:	e8 a4 e9 ff ff       	call   c002e4fb <get_file_descriptor>
c002fb57:	83 c4 10             	add    $0x10,%esp
c002fb5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fdr == NULL) 
c002fb5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002fb61:	75 14                	jne    c002fb77 <sys_isdir+0x49>
  {
    lock_release(&fileSys_lock);
c002fb63:	83 ec 0c             	sub    $0xc,%esp
c002fb66:	68 60 87 04 c0       	push   $0xc0048760
c002fb6b:	e8 ff 3b ff ff       	call   c002376f <lock_release>
c002fb70:	83 c4 10             	add    $0x10,%esp
    return false;
c002fb73:	b0 00                	mov    $0x0,%al
c002fb75:	eb 52                	jmp    c002fbc9 <sys_isdir+0x9b>
  }
  struct inode *inode = file_get_inode(fdr->file);
c002fb77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fb7a:	8b 40 04             	mov    0x4(%eax),%eax
c002fb7d:	83 ec 0c             	sub    $0xc,%esp
c002fb80:	50                   	push   %eax
c002fb81:	e8 13 0c 00 00       	call   c0030799 <file_get_inode>
c002fb86:	83 c4 10             	add    $0x10,%esp
c002fb89:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (inode == NULL) 
c002fb8c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002fb90:	75 14                	jne    c002fba6 <sys_isdir+0x78>
  {
    lock_release(&fileSys_lock);
c002fb92:	83 ec 0c             	sub    $0xc,%esp
c002fb95:	68 60 87 04 c0       	push   $0xc0048760
c002fb9a:	e8 d0 3b ff ff       	call   c002376f <lock_release>
c002fb9f:	83 c4 10             	add    $0x10,%esp
    return false;
c002fba2:	b0 00                	mov    $0x0,%al
c002fba4:	eb 23                	jmp    c002fbc9 <sys_isdir+0x9b>
  }
  lock_release(&fileSys_lock);
c002fba6:	83 ec 0c             	sub    $0xc,%esp
c002fba9:	68 60 87 04 c0       	push   $0xc0048760
c002fbae:	e8 bc 3b ff ff       	call   c002376f <lock_release>
c002fbb3:	83 c4 10             	add    $0x10,%esp
  return inode_dir(inode);
c002fbb6:	83 ec 0c             	sub    $0xc,%esp
c002fbb9:	ff 75 f0             	pushl  -0x10(%ebp)
c002fbbc:	e8 3a 29 00 00       	call   c00324fb <inode_dir>
c002fbc1:	83 c4 10             	add    $0x10,%esp
c002fbc4:	85 c0                	test   %eax,%eax
c002fbc6:	0f 95 c0             	setne  %al
}
c002fbc9:	c9                   	leave  
c002fbca:	c3                   	ret    

c002fbcb <sys_inumber>:

int sys_inumber(int fd) 
{
c002fbcb:	55                   	push   %ebp
c002fbcc:	89 e5                	mov    %esp,%ebp
c002fbce:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002fbd1:	83 ec 0c             	sub    $0xc,%esp
c002fbd4:	68 60 87 04 c0       	push   $0xc0048760
c002fbd9:	e8 50 39 ff ff       	call   c002352e <lock_acquire>
c002fbde:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fdr = get_file_descriptor(thread_current(), fd, 0);
c002fbe1:	e8 03 13 ff ff       	call   c0020ee9 <thread_current>
c002fbe6:	83 ec 04             	sub    $0x4,%esp
c002fbe9:	6a 00                	push   $0x0
c002fbeb:	ff 75 08             	pushl  0x8(%ebp)
c002fbee:	50                   	push   %eax
c002fbef:	e8 07 e9 ff ff       	call   c002e4fb <get_file_descriptor>
c002fbf4:	83 c4 10             	add    $0x10,%esp
c002fbf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct inode * inode = file_get_inode(fdr->file);
c002fbfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fbfd:	8b 40 04             	mov    0x4(%eax),%eax
c002fc00:	83 ec 0c             	sub    $0xc,%esp
c002fc03:	50                   	push   %eax
c002fc04:	e8 90 0b 00 00       	call   c0030799 <file_get_inode>
c002fc09:	83 c4 10             	add    $0x10,%esp
c002fc0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  ASSERT(inode != NULL);
c002fc0f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002fc13:	75 21                	jne    c002fc36 <sys_inumber+0x6b>
c002fc15:	83 ec 0c             	sub    $0xc,%esp
c002fc18:	68 c3 74 03 c0       	push   $0xc00374c3
c002fc1d:	68 87 74 03 c0       	push   $0xc0037487
c002fc22:	68 f0 74 03 c0       	push   $0xc00374f0
c002fc27:	68 08 03 00 00       	push   $0x308
c002fc2c:	68 9e 74 03 c0       	push   $0xc003749e
c002fc31:	e8 5b a9 ff ff       	call   c002a591 <debug_panic>
  int ret = inode_num(inode);
c002fc36:	83 ec 0c             	sub    $0xc,%esp
c002fc39:	ff 75 f0             	pushl  -0x10(%ebp)
c002fc3c:	e8 c9 28 00 00       	call   c003250a <inode_num>
c002fc41:	83 c4 10             	add    $0x10,%esp
c002fc44:	89 45 ec             	mov    %eax,-0x14(%ebp)
  lock_release(&fileSys_lock);
c002fc47:	83 ec 0c             	sub    $0xc,%esp
c002fc4a:	68 60 87 04 c0       	push   $0xc0048760
c002fc4f:	e8 1b 3b ff ff       	call   c002376f <lock_release>
c002fc54:	83 c4 10             	add    $0x10,%esp
  return ret;
c002fc57:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c002fc5a:	c9                   	leave  
c002fc5b:	c3                   	ret    

c002fc5c <gdt_init>:
c002fc5c:	55                   	push   %ebp
c002fc5d:	89 e5                	mov    %esp,%ebp
c002fc5f:	83 ec 18             	sub    $0x18,%esp
c002fc62:	c7 05 40 02 04 c0 00 	movl   $0x0,0xc0040240
c002fc69:	00 00 00 
c002fc6c:	c7 05 44 02 04 c0 00 	movl   $0x0,0xc0040244
c002fc73:	00 00 00 
c002fc76:	83 ec 0c             	sub    $0xc,%esp
c002fc79:	6a 00                	push   $0x0
c002fc7b:	e8 fe 01 00 00       	call   c002fe7e <make_code_desc>
c002fc80:	83 c4 10             	add    $0x10,%esp
c002fc83:	a3 48 02 04 c0       	mov    %eax,0xc0040248
c002fc88:	89 15 4c 02 04 c0    	mov    %edx,0xc004024c
c002fc8e:	83 ec 0c             	sub    $0xc,%esp
c002fc91:	6a 00                	push   $0x0
c002fc93:	e8 09 02 00 00       	call   c002fea1 <make_data_desc>
c002fc98:	83 c4 10             	add    $0x10,%esp
c002fc9b:	a3 50 02 04 c0       	mov    %eax,0xc0040250
c002fca0:	89 15 54 02 04 c0    	mov    %edx,0xc0040254
c002fca6:	83 ec 0c             	sub    $0xc,%esp
c002fca9:	6a 03                	push   $0x3
c002fcab:	e8 ce 01 00 00       	call   c002fe7e <make_code_desc>
c002fcb0:	83 c4 10             	add    $0x10,%esp
c002fcb3:	a3 58 02 04 c0       	mov    %eax,0xc0040258
c002fcb8:	89 15 5c 02 04 c0    	mov    %edx,0xc004025c
c002fcbe:	83 ec 0c             	sub    $0xc,%esp
c002fcc1:	6a 03                	push   $0x3
c002fcc3:	e8 d9 01 00 00       	call   c002fea1 <make_data_desc>
c002fcc8:	83 c4 10             	add    $0x10,%esp
c002fccb:	a3 60 02 04 c0       	mov    %eax,0xc0040260
c002fcd0:	89 15 64 02 04 c0    	mov    %edx,0xc0040264
c002fcd6:	e8 8a 02 00 00       	call   c002ff65 <tss_get>
c002fcdb:	83 ec 0c             	sub    $0xc,%esp
c002fcde:	50                   	push   %eax
c002fcdf:	e8 e0 01 00 00       	call   c002fec4 <make_tss_desc>
c002fce4:	83 c4 10             	add    $0x10,%esp
c002fce7:	a3 68 02 04 c0       	mov    %eax,0xc0040268
c002fcec:	89 15 6c 02 04 c0    	mov    %edx,0xc004026c
c002fcf2:	83 ec 08             	sub    $0x8,%esp
c002fcf5:	68 40 02 04 c0       	push   $0xc0040240
c002fcfa:	6a 2f                	push   $0x2f
c002fcfc:	e8 e4 01 00 00       	call   c002fee5 <make_gdtr_operand>
c002fd01:	83 c4 10             	add    $0x10,%esp
c002fd04:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002fd07:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002fd0a:	0f 01 55 f0          	lgdtl  -0x10(%ebp)
c002fd0e:	b8 28 00 00 00       	mov    $0x28,%eax
c002fd13:	0f 00 d8             	ltr    %ax
c002fd16:	90                   	nop
c002fd17:	c9                   	leave  
c002fd18:	c3                   	ret    

c002fd19 <make_seg_desc>:
c002fd19:	55                   	push   %ebp
c002fd1a:	89 e5                	mov    %esp,%ebp
c002fd1c:	57                   	push   %edi
c002fd1d:	56                   	push   %esi
c002fd1e:	53                   	push   %ebx
c002fd1f:	83 ec 2c             	sub    $0x2c,%esp
c002fd22:	81 7d 0c ff ff 0f 00 	cmpl   $0xfffff,0xc(%ebp)
c002fd29:	76 1e                	jbe    c002fd49 <make_seg_desc+0x30>
c002fd2b:	83 ec 0c             	sub    $0xc,%esp
c002fd2e:	68 fc 74 03 c0       	push   $0xc00374fc
c002fd33:	68 0d 75 03 c0       	push   $0xc003750d
c002fd38:	68 d0 75 03 c0       	push   $0xc00375d0
c002fd3d:	6a 5b                	push   $0x5b
c002fd3f:	68 24 75 03 c0       	push   $0xc0037524
c002fd44:	e8 48 a8 ff ff       	call   c002a591 <debug_panic>
c002fd49:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002fd4d:	74 24                	je     c002fd73 <make_seg_desc+0x5a>
c002fd4f:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c002fd53:	74 1e                	je     c002fd73 <make_seg_desc+0x5a>
c002fd55:	83 ec 0c             	sub    $0xc,%esp
c002fd58:	68 3c 75 03 c0       	push   $0xc003753c
c002fd5d:	68 0d 75 03 c0       	push   $0xc003750d
c002fd62:	68 d0 75 03 c0       	push   $0xc00375d0
c002fd67:	6a 5c                	push   $0x5c
c002fd69:	68 24 75 03 c0       	push   $0xc0037524
c002fd6e:	e8 1e a8 ff ff       	call   c002a591 <debug_panic>
c002fd73:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c002fd77:	78 06                	js     c002fd7f <make_seg_desc+0x66>
c002fd79:	83 7d 14 0f          	cmpl   $0xf,0x14(%ebp)
c002fd7d:	7e 1e                	jle    c002fd9d <make_seg_desc+0x84>
c002fd7f:	83 ec 0c             	sub    $0xc,%esp
c002fd82:	68 6a 75 03 c0       	push   $0xc003756a
c002fd87:	68 0d 75 03 c0       	push   $0xc003750d
c002fd8c:	68 d0 75 03 c0       	push   $0xc00375d0
c002fd91:	6a 5d                	push   $0x5d
c002fd93:	68 24 75 03 c0       	push   $0xc0037524
c002fd98:	e8 f4 a7 ff ff       	call   c002a591 <debug_panic>
c002fd9d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c002fda1:	78 06                	js     c002fda9 <make_seg_desc+0x90>
c002fda3:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
c002fda7:	7e 1e                	jle    c002fdc7 <make_seg_desc+0xae>
c002fda9:	83 ec 0c             	sub    $0xc,%esp
c002fdac:	68 82 75 03 c0       	push   $0xc0037582
c002fdb1:	68 0d 75 03 c0       	push   $0xc003750d
c002fdb6:	68 d0 75 03 c0       	push   $0xc00375d0
c002fdbb:	6a 5e                	push   $0x5e
c002fdbd:	68 24 75 03 c0       	push   $0xc0037524
c002fdc2:	e8 ca a7 ff ff       	call   c002a591 <debug_panic>
c002fdc7:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c002fdcb:	74 24                	je     c002fdf1 <make_seg_desc+0xd8>
c002fdcd:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
c002fdd1:	74 1e                	je     c002fdf1 <make_seg_desc+0xd8>
c002fdd3:	83 ec 0c             	sub    $0xc,%esp
c002fdd6:	68 98 75 03 c0       	push   $0xc0037598
c002fddb:	68 0d 75 03 c0       	push   $0xc003750d
c002fde0:	68 d0 75 03 c0       	push   $0xc00375d0
c002fde5:	6a 5f                	push   $0x5f
c002fde7:	68 24 75 03 c0       	push   $0xc0037524
c002fdec:	e8 a0 a7 ff ff       	call   c002a591 <debug_panic>
c002fdf1:	8b 45 0c             	mov    0xc(%ebp),%eax
c002fdf4:	0f b7 c0             	movzwl %ax,%eax
c002fdf7:	8b 55 08             	mov    0x8(%ebp),%edx
c002fdfa:	c1 e2 10             	shl    $0x10,%edx
c002fdfd:	09 d0                	or     %edx,%eax
c002fdff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002fe02:	8b 45 08             	mov    0x8(%ebp),%eax
c002fe05:	c1 e8 10             	shr    $0x10,%eax
c002fe08:	0f b6 c0             	movzbl %al,%eax
c002fe0b:	8b 55 14             	mov    0x14(%ebp),%edx
c002fe0e:	c1 e2 08             	shl    $0x8,%edx
c002fe11:	09 c2                	or     %eax,%edx
c002fe13:	8b 45 10             	mov    0x10(%ebp),%eax
c002fe16:	c1 e0 0c             	shl    $0xc,%eax
c002fe19:	09 c2                	or     %eax,%edx
c002fe1b:	8b 45 18             	mov    0x18(%ebp),%eax
c002fe1e:	c1 e0 0d             	shl    $0xd,%eax
c002fe21:	09 c2                	or     %eax,%edx
c002fe23:	8b 45 0c             	mov    0xc(%ebp),%eax
c002fe26:	25 00 00 0f 00       	and    $0xf0000,%eax
c002fe2b:	09 c2                	or     %eax,%edx
c002fe2d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002fe30:	c1 e0 17             	shl    $0x17,%eax
c002fe33:	09 c2                	or     %eax,%edx
c002fe35:	8b 45 08             	mov    0x8(%ebp),%eax
c002fe38:	25 00 00 00 ff       	and    $0xff000000,%eax
c002fe3d:	09 d0                	or     %edx,%eax
c002fe3f:	0d 00 80 40 00       	or     $0x408000,%eax
c002fe44:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002fe47:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c002fe4a:	bf 00 00 00 00       	mov    $0x0,%edi
c002fe4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002fe52:	ba 00 00 00 00       	mov    $0x0,%edx
c002fe57:	89 c2                	mov    %eax,%edx
c002fe59:	b8 00 00 00 00       	mov    $0x0,%eax
c002fe5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c002fe61:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c002fe64:	89 f0                	mov    %esi,%eax
c002fe66:	0b 45 d0             	or     -0x30(%ebp),%eax
c002fe69:	89 c1                	mov    %eax,%ecx
c002fe6b:	89 f8                	mov    %edi,%eax
c002fe6d:	0b 45 d4             	or     -0x2c(%ebp),%eax
c002fe70:	89 c3                	mov    %eax,%ebx
c002fe72:	89 c8                	mov    %ecx,%eax
c002fe74:	89 da                	mov    %ebx,%edx
c002fe76:	8d 65 f4             	lea    -0xc(%ebp),%esp
c002fe79:	5b                   	pop    %ebx
c002fe7a:	5e                   	pop    %esi
c002fe7b:	5f                   	pop    %edi
c002fe7c:	5d                   	pop    %ebp
c002fe7d:	c3                   	ret    

c002fe7e <make_code_desc>:
c002fe7e:	55                   	push   %ebp
c002fe7f:	89 e5                	mov    %esp,%ebp
c002fe81:	83 ec 08             	sub    $0x8,%esp
c002fe84:	83 ec 08             	sub    $0x8,%esp
c002fe87:	6a 01                	push   $0x1
c002fe89:	ff 75 08             	pushl  0x8(%ebp)
c002fe8c:	6a 0a                	push   $0xa
c002fe8e:	6a 01                	push   $0x1
c002fe90:	68 ff ff 0f 00       	push   $0xfffff
c002fe95:	6a 00                	push   $0x0
c002fe97:	e8 7d fe ff ff       	call   c002fd19 <make_seg_desc>
c002fe9c:	83 c4 20             	add    $0x20,%esp
c002fe9f:	c9                   	leave  
c002fea0:	c3                   	ret    

c002fea1 <make_data_desc>:
c002fea1:	55                   	push   %ebp
c002fea2:	89 e5                	mov    %esp,%ebp
c002fea4:	83 ec 08             	sub    $0x8,%esp
c002fea7:	83 ec 08             	sub    $0x8,%esp
c002feaa:	6a 01                	push   $0x1
c002feac:	ff 75 08             	pushl  0x8(%ebp)
c002feaf:	6a 02                	push   $0x2
c002feb1:	6a 01                	push   $0x1
c002feb3:	68 ff ff 0f 00       	push   $0xfffff
c002feb8:	6a 00                	push   $0x0
c002feba:	e8 5a fe ff ff       	call   c002fd19 <make_seg_desc>
c002febf:	83 c4 20             	add    $0x20,%esp
c002fec2:	c9                   	leave  
c002fec3:	c3                   	ret    

c002fec4 <make_tss_desc>:
c002fec4:	55                   	push   %ebp
c002fec5:	89 e5                	mov    %esp,%ebp
c002fec7:	83 ec 08             	sub    $0x8,%esp
c002feca:	8b 45 08             	mov    0x8(%ebp),%eax
c002fecd:	83 ec 08             	sub    $0x8,%esp
c002fed0:	6a 00                	push   $0x0
c002fed2:	6a 00                	push   $0x0
c002fed4:	6a 09                	push   $0x9
c002fed6:	6a 00                	push   $0x0
c002fed8:	6a 67                	push   $0x67
c002feda:	50                   	push   %eax
c002fedb:	e8 39 fe ff ff       	call   c002fd19 <make_seg_desc>
c002fee0:	83 c4 20             	add    $0x20,%esp
c002fee3:	c9                   	leave  
c002fee4:	c3                   	ret    

c002fee5 <make_gdtr_operand>:
c002fee5:	55                   	push   %ebp
c002fee6:	89 e5                	mov    %esp,%ebp
c002fee8:	57                   	push   %edi
c002fee9:	56                   	push   %esi
c002feea:	53                   	push   %ebx
c002feeb:	83 ec 14             	sub    $0x14,%esp
c002feee:	8b 45 08             	mov    0x8(%ebp),%eax
c002fef1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c002fef5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c002fef9:	89 c6                	mov    %eax,%esi
c002fefb:	bf 00 00 00 00       	mov    $0x0,%edi
c002ff00:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ff03:	ba 00 00 00 00       	mov    $0x0,%edx
c002ff08:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c002ff0c:	c1 e0 10             	shl    $0x10,%eax
c002ff0f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002ff12:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002ff15:	89 f0                	mov    %esi,%eax
c002ff17:	0b 45 e0             	or     -0x20(%ebp),%eax
c002ff1a:	89 c1                	mov    %eax,%ecx
c002ff1c:	89 f8                	mov    %edi,%eax
c002ff1e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c002ff21:	89 c3                	mov    %eax,%ebx
c002ff23:	89 c8                	mov    %ecx,%eax
c002ff25:	89 da                	mov    %ebx,%edx
c002ff27:	83 c4 14             	add    $0x14,%esp
c002ff2a:	5b                   	pop    %ebx
c002ff2b:	5e                   	pop    %esi
c002ff2c:	5f                   	pop    %edi
c002ff2d:	5d                   	pop    %ebp
c002ff2e:	c3                   	ret    

c002ff2f <tss_init>:
c002ff2f:	55                   	push   %ebp
c002ff30:	89 e5                	mov    %esp,%ebp
c002ff32:	83 ec 08             	sub    $0x8,%esp
c002ff35:	83 ec 0c             	sub    $0xc,%esp
c002ff38:	6a 03                	push   $0x3
c002ff3a:	e8 c9 3e ff ff       	call   c0023e08 <palloc_get_page>
c002ff3f:	83 c4 10             	add    $0x10,%esp
c002ff42:	a3 70 02 04 c0       	mov    %eax,0xc0040270
c002ff47:	a1 70 02 04 c0       	mov    0xc0040270,%eax
c002ff4c:	66 c7 40 08 10 00    	movw   $0x10,0x8(%eax)
c002ff52:	a1 70 02 04 c0       	mov    0xc0040270,%eax
c002ff57:	66 c7 40 66 ff df    	movw   $0xdfff,0x66(%eax)
c002ff5d:	e8 37 00 00 00       	call   c002ff99 <tss_update>
c002ff62:	90                   	nop
c002ff63:	c9                   	leave  
c002ff64:	c3                   	ret    

c002ff65 <tss_get>:
c002ff65:	55                   	push   %ebp
c002ff66:	89 e5                	mov    %esp,%ebp
c002ff68:	83 ec 08             	sub    $0x8,%esp
c002ff6b:	a1 70 02 04 c0       	mov    0xc0040270,%eax
c002ff70:	85 c0                	test   %eax,%eax
c002ff72:	75 1e                	jne    c002ff92 <tss_get+0x2d>
c002ff74:	83 ec 0c             	sub    $0xc,%esp
c002ff77:	68 e0 75 03 c0       	push   $0xc00375e0
c002ff7c:	68 ec 75 03 c0       	push   $0xc00375ec
c002ff81:	68 18 76 03 c0       	push   $0xc0037618
c002ff86:	6a 5f                	push   $0x5f
c002ff88:	68 03 76 03 c0       	push   $0xc0037603
c002ff8d:	e8 ff a5 ff ff       	call   c002a591 <debug_panic>
c002ff92:	a1 70 02 04 c0       	mov    0xc0040270,%eax
c002ff97:	c9                   	leave  
c002ff98:	c3                   	ret    

c002ff99 <tss_update>:
c002ff99:	55                   	push   %ebp
c002ff9a:	89 e5                	mov    %esp,%ebp
c002ff9c:	53                   	push   %ebx
c002ff9d:	83 ec 04             	sub    $0x4,%esp
c002ffa0:	a1 70 02 04 c0       	mov    0xc0040270,%eax
c002ffa5:	85 c0                	test   %eax,%eax
c002ffa7:	75 1e                	jne    c002ffc7 <tss_update+0x2e>
c002ffa9:	83 ec 0c             	sub    $0xc,%esp
c002ffac:	68 e0 75 03 c0       	push   $0xc00375e0
c002ffb1:	68 ec 75 03 c0       	push   $0xc00375ec
c002ffb6:	68 20 76 03 c0       	push   $0xc0037620
c002ffbb:	6a 68                	push   $0x68
c002ffbd:	68 03 76 03 c0       	push   $0xc0037603
c002ffc2:	e8 ca a5 ff ff       	call   c002a591 <debug_panic>
c002ffc7:	8b 1d 70 02 04 c0    	mov    0xc0040270,%ebx
c002ffcd:	e8 17 0f ff ff       	call   c0020ee9 <thread_current>
c002ffd2:	05 00 10 00 00       	add    $0x1000,%eax
c002ffd7:	89 43 04             	mov    %eax,0x4(%ebx)
c002ffda:	90                   	nop
c002ffdb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002ffde:	c9                   	leave  
c002ffdf:	c3                   	ret    

c002ffe0 <filesys_init>:
c002ffe0:	55                   	push   %ebp
c002ffe1:	89 e5                	mov    %esp,%ebp
c002ffe3:	83 ec 18             	sub    $0x18,%esp
c002ffe6:	8b 45 08             	mov    0x8(%ebp),%eax
c002ffe9:	88 45 f4             	mov    %al,-0xc(%ebp)
c002ffec:	83 ec 0c             	sub    $0xc,%esp
c002ffef:	6a 01                	push   $0x1
c002fff1:	e8 ce 5b ff ff       	call   c0025bc4 <block_get_role>
c002fff6:	83 c4 10             	add    $0x10,%esp
c002fff9:	a3 40 87 04 c0       	mov    %eax,0xc0048740
c002fffe:	a1 40 87 04 c0       	mov    0xc0048740,%eax
c0030003:	85 c0                	test   %eax,%eax
c0030005:	75 16                	jne    c003001d <filesys_init+0x3d>
c0030007:	68 2c 76 03 c0       	push   $0xc003762c
c003000c:	68 c4 76 03 c0       	push   $0xc00376c4
c0030011:	6a 16                	push   $0x16
c0030013:	68 67 76 03 c0       	push   $0xc0037667
c0030018:	e8 74 a5 ff ff       	call   c002a591 <debug_panic>
c003001d:	e8 4c 1c 00 00       	call   c0031c6e <inode_init>
c0030022:	e8 fe 03 00 00       	call   c0030425 <free_map_init>
c0030027:	e8 a4 09 00 00       	call   c00309d0 <buffer_cache_init>
c003002c:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c0030030:	74 05                	je     c0030037 <filesys_init+0x57>
c0030032:	e8 8c 03 00 00       	call   c00303c3 <do_format>
c0030037:	e8 49 05 00 00       	call   c0030585 <free_map_open>
c003003c:	90                   	nop
c003003d:	c9                   	leave  
c003003e:	c3                   	ret    

c003003f <filesys_done>:
c003003f:	55                   	push   %ebp
c0030040:	89 e5                	mov    %esp,%ebp
c0030042:	83 ec 08             	sub    $0x8,%esp
c0030045:	e8 b6 05 00 00       	call   c0030600 <free_map_close>
c003004a:	e8 ec 09 00 00       	call   c0030a3b <buffer_cache_close>
c003004f:	90                   	nop
c0030050:	c9                   	leave  
c0030051:	c3                   	ret    

c0030052 <filesys_create>:
c0030052:	55                   	push   %ebp
c0030053:	89 e5                	mov    %esp,%ebp
c0030055:	53                   	push   %ebx
c0030056:	83 ec 24             	sub    $0x24,%esp
c0030059:	89 e0                	mov    %esp,%eax
c003005b:	89 c3                	mov    %eax,%ebx
c003005d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0030064:	83 ec 0c             	sub    $0xc,%esp
c0030067:	ff 75 08             	pushl  0x8(%ebp)
c003006a:	e8 41 98 ff ff       	call   c00298b0 <strlen>
c003006f:	83 c4 10             	add    $0x10,%esp
c0030072:	89 c2                	mov    %eax,%edx
c0030074:	83 ea 01             	sub    $0x1,%edx
c0030077:	89 55 f4             	mov    %edx,-0xc(%ebp)
c003007a:	ba 10 00 00 00       	mov    $0x10,%edx
c003007f:	83 ea 01             	sub    $0x1,%edx
c0030082:	01 d0                	add    %edx,%eax
c0030084:	b9 10 00 00 00       	mov    $0x10,%ecx
c0030089:	ba 00 00 00 00       	mov    $0x0,%edx
c003008e:	f7 f1                	div    %ecx
c0030090:	6b c0 10             	imul   $0x10,%eax,%eax
c0030093:	29 c4                	sub    %eax,%esp
c0030095:	89 e0                	mov    %esp,%eax
c0030097:	83 c0 00             	add    $0x0,%eax
c003009a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c003009d:	83 ec 0c             	sub    $0xc,%esp
c00300a0:	ff 75 08             	pushl  0x8(%ebp)
c00300a3:	e8 08 98 ff ff       	call   c00298b0 <strlen>
c00300a8:	83 c4 10             	add    $0x10,%esp
c00300ab:	89 c2                	mov    %eax,%edx
c00300ad:	83 ea 01             	sub    $0x1,%edx
c00300b0:	89 55 ec             	mov    %edx,-0x14(%ebp)
c00300b3:	ba 10 00 00 00       	mov    $0x10,%edx
c00300b8:	83 ea 01             	sub    $0x1,%edx
c00300bb:	01 d0                	add    %edx,%eax
c00300bd:	b9 10 00 00 00       	mov    $0x10,%ecx
c00300c2:	ba 00 00 00 00       	mov    $0x0,%edx
c00300c7:	f7 f1                	div    %ecx
c00300c9:	6b c0 10             	imul   $0x10,%eax,%eax
c00300cc:	29 c4                	sub    %eax,%esp
c00300ce:	89 e0                	mov    %esp,%eax
c00300d0:	83 c0 00             	add    $0x0,%eax
c00300d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00300d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00300d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00300dc:	83 ec 04             	sub    $0x4,%esp
c00300df:	52                   	push   %edx
c00300e0:	50                   	push   %eax
c00300e1:	ff 75 08             	pushl  0x8(%ebp)
c00300e4:	e8 0b 0d 00 00       	call   c0030df4 <parse_path_name>
c00300e9:	83 c4 10             	add    $0x10,%esp
c00300ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00300ef:	83 ec 0c             	sub    $0xc,%esp
c00300f2:	50                   	push   %eax
c00300f3:	e8 68 0f 00 00       	call   c0031060 <dir_open_path>
c00300f8:	83 c4 10             	add    $0x10,%esp
c00300fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00300fe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0030102:	74 4d                	je     c0030151 <filesys_create+0xff>
c0030104:	83 ec 08             	sub    $0x8,%esp
c0030107:	8d 45 dc             	lea    -0x24(%ebp),%eax
c003010a:	50                   	push   %eax
c003010b:	6a 01                	push   $0x1
c003010d:	e8 83 03 00 00       	call   c0030495 <free_map_allocate>
c0030112:	83 c4 10             	add    $0x10,%esp
c0030115:	84 c0                	test   %al,%al
c0030117:	74 38                	je     c0030151 <filesys_create+0xff>
c0030119:	8b 45 dc             	mov    -0x24(%ebp),%eax
c003011c:	83 ec 04             	sub    $0x4,%esp
c003011f:	6a 00                	push   $0x0
c0030121:	ff 75 0c             	pushl  0xc(%ebp)
c0030124:	50                   	push   %eax
c0030125:	e8 5d 1b 00 00       	call   c0031c87 <inode_create>
c003012a:	83 c4 10             	add    $0x10,%esp
c003012d:	84 c0                	test   %al,%al
c003012f:	74 20                	je     c0030151 <filesys_create+0xff>
c0030131:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0030134:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0030137:	6a 00                	push   $0x0
c0030139:	52                   	push   %edx
c003013a:	50                   	push   %eax
c003013b:	ff 75 e4             	pushl  -0x1c(%ebp)
c003013e:	e8 19 13 00 00       	call   c003145c <dir_add>
c0030143:	83 c4 10             	add    $0x10,%esp
c0030146:	84 c0                	test   %al,%al
c0030148:	74 07                	je     c0030151 <filesys_create+0xff>
c003014a:	b8 01 00 00 00       	mov    $0x1,%eax
c003014f:	eb 05                	jmp    c0030156 <filesys_create+0x104>
c0030151:	b8 00 00 00 00       	mov    $0x0,%eax
c0030156:	88 45 e3             	mov    %al,-0x1d(%ebp)
c0030159:	80 65 e3 01          	andb   $0x1,-0x1d(%ebp)
c003015d:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c0030161:	83 f0 01             	xor    $0x1,%eax
c0030164:	84 c0                	test   %al,%al
c0030166:	74 18                	je     c0030180 <filesys_create+0x12e>
c0030168:	8b 45 dc             	mov    -0x24(%ebp),%eax
c003016b:	85 c0                	test   %eax,%eax
c003016d:	74 11                	je     c0030180 <filesys_create+0x12e>
c003016f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0030172:	83 ec 08             	sub    $0x8,%esp
c0030175:	6a 01                	push   $0x1
c0030177:	50                   	push   %eax
c0030178:	e8 98 03 00 00       	call   c0030515 <free_map_release>
c003017d:	83 c4 10             	add    $0x10,%esp
c0030180:	83 ec 0c             	sub    $0xc,%esp
c0030183:	ff 75 e4             	pushl  -0x1c(%ebp)
c0030186:	e8 a9 10 00 00       	call   c0031234 <dir_close>
c003018b:	83 c4 10             	add    $0x10,%esp
c003018e:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c0030192:	89 dc                	mov    %ebx,%esp
c0030194:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0030197:	c9                   	leave  
c0030198:	c3                   	ret    

c0030199 <filesys_open>:
c0030199:	55                   	push   %ebp
c003019a:	89 e5                	mov    %esp,%ebp
c003019c:	53                   	push   %ebx
c003019d:	83 ec 24             	sub    $0x24,%esp
c00301a0:	89 e0                	mov    %esp,%eax
c00301a2:	89 c3                	mov    %eax,%ebx
c00301a4:	83 ec 0c             	sub    $0xc,%esp
c00301a7:	ff 75 08             	pushl  0x8(%ebp)
c00301aa:	e8 01 97 ff ff       	call   c00298b0 <strlen>
c00301af:	83 c4 10             	add    $0x10,%esp
c00301b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00301b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00301b9:	75 0a                	jne    c00301c5 <filesys_open+0x2c>
c00301bb:	b8 00 00 00 00       	mov    $0x0,%eax
c00301c0:	e9 0f 01 00 00       	jmp    c00302d4 <filesys_open+0x13b>
c00301c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00301c8:	83 c0 01             	add    $0x1,%eax
c00301cb:	8d 50 ff             	lea    -0x1(%eax),%edx
c00301ce:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00301d1:	89 c2                	mov    %eax,%edx
c00301d3:	b8 10 00 00 00       	mov    $0x10,%eax
c00301d8:	83 e8 01             	sub    $0x1,%eax
c00301db:	01 d0                	add    %edx,%eax
c00301dd:	b9 10 00 00 00       	mov    $0x10,%ecx
c00301e2:	ba 00 00 00 00       	mov    $0x0,%edx
c00301e7:	f7 f1                	div    %ecx
c00301e9:	6b c0 10             	imul   $0x10,%eax,%eax
c00301ec:	29 c4                	sub    %eax,%esp
c00301ee:	89 e0                	mov    %esp,%eax
c00301f0:	83 c0 00             	add    $0x0,%eax
c00301f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00301f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00301f9:	83 c0 01             	add    $0x1,%eax
c00301fc:	8d 50 ff             	lea    -0x1(%eax),%edx
c00301ff:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0030202:	89 c2                	mov    %eax,%edx
c0030204:	b8 10 00 00 00       	mov    $0x10,%eax
c0030209:	83 e8 01             	sub    $0x1,%eax
c003020c:	01 d0                	add    %edx,%eax
c003020e:	b9 10 00 00 00       	mov    $0x10,%ecx
c0030213:	ba 00 00 00 00       	mov    $0x0,%edx
c0030218:	f7 f1                	div    %ecx
c003021a:	6b c0 10             	imul   $0x10,%eax,%eax
c003021d:	29 c4                	sub    %eax,%esp
c003021f:	89 e0                	mov    %esp,%eax
c0030221:	83 c0 00             	add    $0x0,%eax
c0030224:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0030227:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c003022a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c003022d:	83 ec 04             	sub    $0x4,%esp
c0030230:	52                   	push   %edx
c0030231:	50                   	push   %eax
c0030232:	ff 75 08             	pushl  0x8(%ebp)
c0030235:	e8 ba 0b 00 00       	call   c0030df4 <parse_path_name>
c003023a:	83 c4 10             	add    $0x10,%esp
c003023d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0030240:	83 ec 0c             	sub    $0xc,%esp
c0030243:	50                   	push   %eax
c0030244:	e8 17 0e 00 00       	call   c0031060 <dir_open_path>
c0030249:	83 c4 10             	add    $0x10,%esp
c003024c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c003024f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0030256:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c003025a:	75 07                	jne    c0030263 <filesys_open+0xca>
c003025c:	b8 00 00 00 00       	mov    $0x0,%eax
c0030261:	eb 71                	jmp    c00302d4 <filesys_open+0x13b>
c0030263:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0030266:	0f b6 00             	movzbl (%eax),%eax
c0030269:	84 c0                	test   %al,%al
c003026b:	74 26                	je     c0030293 <filesys_open+0xfa>
c003026d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0030270:	83 ec 04             	sub    $0x4,%esp
c0030273:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0030276:	52                   	push   %edx
c0030277:	50                   	push   %eax
c0030278:	ff 75 e0             	pushl  -0x20(%ebp)
c003027b:	e8 cd 10 00 00       	call   c003134d <dir_lookup>
c0030280:	83 c4 10             	add    $0x10,%esp
c0030283:	83 ec 0c             	sub    $0xc,%esp
c0030286:	ff 75 e0             	pushl  -0x20(%ebp)
c0030289:	e8 a6 0f 00 00       	call   c0031234 <dir_close>
c003028e:	83 c4 10             	add    $0x10,%esp
c0030291:	eb 11                	jmp    c00302a4 <filesys_open+0x10b>
c0030293:	83 ec 0c             	sub    $0xc,%esp
c0030296:	ff 75 e0             	pushl  -0x20(%ebp)
c0030299:	e8 c4 0f 00 00       	call   c0031262 <dir_get_inode>
c003029e:	83 c4 10             	add    $0x10,%esp
c00302a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c00302a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00302a7:	85 c0                	test   %eax,%eax
c00302a9:	74 13                	je     c00302be <filesys_open+0x125>
c00302ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00302ae:	83 ec 0c             	sub    $0xc,%esp
c00302b1:	50                   	push   %eax
c00302b2:	e8 5e 22 00 00       	call   c0032515 <inode_is_removed>
c00302b7:	83 c4 10             	add    $0x10,%esp
c00302ba:	84 c0                	test   %al,%al
c00302bc:	74 07                	je     c00302c5 <filesys_open+0x12c>
c00302be:	b8 00 00 00 00       	mov    $0x0,%eax
c00302c3:	eb 0f                	jmp    c00302d4 <filesys_open+0x13b>
c00302c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00302c8:	83 ec 0c             	sub    $0xc,%esp
c00302cb:	50                   	push   %eax
c00302cc:	e8 02 04 00 00       	call   c00306d3 <file_open>
c00302d1:	83 c4 10             	add    $0x10,%esp
c00302d4:	89 dc                	mov    %ebx,%esp
c00302d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00302d9:	c9                   	leave  
c00302da:	c3                   	ret    

c00302db <filesys_remove>:
c00302db:	55                   	push   %ebp
c00302dc:	89 e5                	mov    %esp,%ebp
c00302de:	53                   	push   %ebx
c00302df:	83 ec 24             	sub    $0x24,%esp
c00302e2:	89 e0                	mov    %esp,%eax
c00302e4:	89 c3                	mov    %eax,%ebx
c00302e6:	83 ec 0c             	sub    $0xc,%esp
c00302e9:	ff 75 08             	pushl  0x8(%ebp)
c00302ec:	e8 bf 95 ff ff       	call   c00298b0 <strlen>
c00302f1:	83 c4 10             	add    $0x10,%esp
c00302f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00302f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00302fa:	8d 50 ff             	lea    -0x1(%eax),%edx
c00302fd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0030300:	89 c2                	mov    %eax,%edx
c0030302:	b8 10 00 00 00       	mov    $0x10,%eax
c0030307:	83 e8 01             	sub    $0x1,%eax
c003030a:	01 d0                	add    %edx,%eax
c003030c:	b9 10 00 00 00       	mov    $0x10,%ecx
c0030311:	ba 00 00 00 00       	mov    $0x0,%edx
c0030316:	f7 f1                	div    %ecx
c0030318:	6b c0 10             	imul   $0x10,%eax,%eax
c003031b:	29 c4                	sub    %eax,%esp
c003031d:	89 e0                	mov    %esp,%eax
c003031f:	83 c0 00             	add    $0x0,%eax
c0030322:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0030325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030328:	8d 50 ff             	lea    -0x1(%eax),%edx
c003032b:	89 55 e8             	mov    %edx,-0x18(%ebp)
c003032e:	89 c2                	mov    %eax,%edx
c0030330:	b8 10 00 00 00       	mov    $0x10,%eax
c0030335:	83 e8 01             	sub    $0x1,%eax
c0030338:	01 d0                	add    %edx,%eax
c003033a:	b9 10 00 00 00       	mov    $0x10,%ecx
c003033f:	ba 00 00 00 00       	mov    $0x0,%edx
c0030344:	f7 f1                	div    %ecx
c0030346:	6b c0 10             	imul   $0x10,%eax,%eax
c0030349:	29 c4                	sub    %eax,%esp
c003034b:	89 e0                	mov    %esp,%eax
c003034d:	83 c0 00             	add    $0x0,%eax
c0030350:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0030353:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0030356:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0030359:	83 ec 04             	sub    $0x4,%esp
c003035c:	52                   	push   %edx
c003035d:	50                   	push   %eax
c003035e:	ff 75 08             	pushl  0x8(%ebp)
c0030361:	e8 8e 0a 00 00       	call   c0030df4 <parse_path_name>
c0030366:	83 c4 10             	add    $0x10,%esp
c0030369:	8b 45 ec             	mov    -0x14(%ebp),%eax
c003036c:	83 ec 0c             	sub    $0xc,%esp
c003036f:	50                   	push   %eax
c0030370:	e8 eb 0c 00 00       	call   c0031060 <dir_open_path>
c0030375:	83 c4 10             	add    $0x10,%esp
c0030378:	89 45 e0             	mov    %eax,-0x20(%ebp)
c003037b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c003037f:	74 1d                	je     c003039e <filesys_remove+0xc3>
c0030381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0030384:	83 ec 08             	sub    $0x8,%esp
c0030387:	50                   	push   %eax
c0030388:	ff 75 e0             	pushl  -0x20(%ebp)
c003038b:	e8 2e 13 00 00       	call   c00316be <dir_remove>
c0030390:	83 c4 10             	add    $0x10,%esp
c0030393:	84 c0                	test   %al,%al
c0030395:	74 07                	je     c003039e <filesys_remove+0xc3>
c0030397:	b8 01 00 00 00       	mov    $0x1,%eax
c003039c:	eb 05                	jmp    c00303a3 <filesys_remove+0xc8>
c003039e:	b8 00 00 00 00       	mov    $0x0,%eax
c00303a3:	88 45 df             	mov    %al,-0x21(%ebp)
c00303a6:	80 65 df 01          	andb   $0x1,-0x21(%ebp)
c00303aa:	83 ec 0c             	sub    $0xc,%esp
c00303ad:	ff 75 e0             	pushl  -0x20(%ebp)
c00303b0:	e8 7f 0e 00 00       	call   c0031234 <dir_close>
c00303b5:	83 c4 10             	add    $0x10,%esp
c00303b8:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c00303bc:	89 dc                	mov    %ebx,%esp
c00303be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00303c1:	c9                   	leave  
c00303c2:	c3                   	ret    

c00303c3 <do_format>:
c00303c3:	55                   	push   %ebp
c00303c4:	89 e5                	mov    %esp,%ebp
c00303c6:	83 ec 08             	sub    $0x8,%esp
c00303c9:	83 ec 0c             	sub    $0xc,%esp
c00303cc:	68 7f 76 03 c0       	push   $0xc003767f
c00303d1:	e8 5a 7c ff ff       	call   c0028030 <printf>
c00303d6:	83 c4 10             	add    $0x10,%esp
c00303d9:	e8 3c 02 00 00       	call   c003061a <free_map_create>
c00303de:	83 ec 08             	sub    $0x8,%esp
c00303e1:	6a 10                	push   $0x10
c00303e3:	6a 01                	push   $0x1
c00303e5:	e8 44 0b 00 00       	call   c0030f2e <dir_create>
c00303ea:	83 c4 10             	add    $0x10,%esp
c00303ed:	83 f0 01             	xor    $0x1,%eax
c00303f0:	84 c0                	test   %al,%al
c00303f2:	74 19                	je     c003040d <do_format+0x4a>
c00303f4:	68 9c 76 03 c0       	push   $0xc003769c
c00303f9:	68 d4 76 03 c0       	push   $0xc00376d4
c00303fe:	68 83 00 00 00       	push   $0x83
c0030403:	68 67 76 03 c0       	push   $0xc0037667
c0030408:	e8 84 a1 ff ff       	call   c002a591 <debug_panic>
c003040d:	e8 ee 01 00 00       	call   c0030600 <free_map_close>
c0030412:	83 ec 0c             	sub    $0xc,%esp
c0030415:	68 bb 76 03 c0       	push   $0xc00376bb
c003041a:	e8 39 c4 ff ff       	call   c002c858 <puts>
c003041f:	83 c4 10             	add    $0x10,%esp
c0030422:	90                   	nop
c0030423:	c9                   	leave  
c0030424:	c3                   	ret    

c0030425 <free_map_init>:
c0030425:	55                   	push   %ebp
c0030426:	89 e5                	mov    %esp,%ebp
c0030428:	83 ec 08             	sub    $0x8,%esp
c003042b:	a1 40 87 04 c0       	mov    0xc0048740,%eax
c0030430:	83 ec 0c             	sub    $0xc,%esp
c0030433:	50                   	push   %eax
c0030434:	e8 c9 59 ff ff       	call   c0025e02 <block_size>
c0030439:	83 c4 10             	add    $0x10,%esp
c003043c:	83 ec 0c             	sub    $0xc,%esp
c003043f:	50                   	push   %eax
c0030440:	e8 cf b1 ff ff       	call   c002b614 <bitmap_create>
c0030445:	83 c4 10             	add    $0x10,%esp
c0030448:	a3 78 02 04 c0       	mov    %eax,0xc0040278
c003044d:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c0030452:	85 c0                	test   %eax,%eax
c0030454:	75 16                	jne    c003046c <free_map_init+0x47>
c0030456:	68 e0 76 03 c0       	push   $0xc00376e0
c003045b:	68 c4 77 03 c0       	push   $0xc00377c4
c0030460:	6a 11                	push   $0x11
c0030462:	68 18 77 03 c0       	push   $0xc0037718
c0030467:	e8 25 a1 ff ff       	call   c002a591 <debug_panic>
c003046c:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c0030471:	83 ec 08             	sub    $0x8,%esp
c0030474:	6a 00                	push   $0x0
c0030476:	50                   	push   %eax
c0030477:	e8 55 b3 ff ff       	call   c002b7d1 <bitmap_mark>
c003047c:	83 c4 10             	add    $0x10,%esp
c003047f:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c0030484:	83 ec 08             	sub    $0x8,%esp
c0030487:	6a 01                	push   $0x1
c0030489:	50                   	push   %eax
c003048a:	e8 42 b3 ff ff       	call   c002b7d1 <bitmap_mark>
c003048f:	83 c4 10             	add    $0x10,%esp
c0030492:	90                   	nop
c0030493:	c9                   	leave  
c0030494:	c3                   	ret    

c0030495 <free_map_allocate>:
c0030495:	55                   	push   %ebp
c0030496:	89 e5                	mov    %esp,%ebp
c0030498:	83 ec 18             	sub    $0x18,%esp
c003049b:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c00304a0:	6a 00                	push   $0x0
c00304a2:	ff 75 08             	pushl  0x8(%ebp)
c00304a5:	6a 00                	push   $0x0
c00304a7:	50                   	push   %eax
c00304a8:	e8 44 b8 ff ff       	call   c002bcf1 <bitmap_scan_and_flip>
c00304ad:	83 c4 10             	add    $0x10,%esp
c00304b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00304b3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00304b7:	74 45                	je     c00304fe <free_map_allocate+0x69>
c00304b9:	a1 74 02 04 c0       	mov    0xc0040274,%eax
c00304be:	85 c0                	test   %eax,%eax
c00304c0:	74 3c                	je     c00304fe <free_map_allocate+0x69>
c00304c2:	8b 15 74 02 04 c0    	mov    0xc0040274,%edx
c00304c8:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c00304cd:	83 ec 08             	sub    $0x8,%esp
c00304d0:	52                   	push   %edx
c00304d1:	50                   	push   %eax
c00304d2:	e8 13 b9 ff ff       	call   c002bdea <bitmap_write>
c00304d7:	83 c4 10             	add    $0x10,%esp
c00304da:	83 f0 01             	xor    $0x1,%eax
c00304dd:	84 c0                	test   %al,%al
c00304df:	74 1d                	je     c00304fe <free_map_allocate+0x69>
c00304e1:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c00304e6:	6a 00                	push   $0x0
c00304e8:	ff 75 08             	pushl  0x8(%ebp)
c00304eb:	ff 75 f4             	pushl  -0xc(%ebp)
c00304ee:	50                   	push   %eax
c00304ef:	e8 70 b4 ff ff       	call   c002b964 <bitmap_set_multiple>
c00304f4:	83 c4 10             	add    $0x10,%esp
c00304f7:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
c00304fe:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0030502:	74 08                	je     c003050c <free_map_allocate+0x77>
c0030504:	8b 45 0c             	mov    0xc(%ebp),%eax
c0030507:	8b 55 f4             	mov    -0xc(%ebp),%edx
c003050a:	89 10                	mov    %edx,(%eax)
c003050c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0030510:	0f 95 c0             	setne  %al
c0030513:	c9                   	leave  
c0030514:	c3                   	ret    

c0030515 <free_map_release>:
c0030515:	55                   	push   %ebp
c0030516:	89 e5                	mov    %esp,%ebp
c0030518:	83 ec 08             	sub    $0x8,%esp
c003051b:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c0030520:	83 ec 04             	sub    $0x4,%esp
c0030523:	ff 75 0c             	pushl  0xc(%ebp)
c0030526:	ff 75 08             	pushl  0x8(%ebp)
c0030529:	50                   	push   %eax
c003052a:	e8 e0 b6 ff ff       	call   c002bc0f <bitmap_all>
c003052f:	83 c4 10             	add    $0x10,%esp
c0030532:	84 c0                	test   %al,%al
c0030534:	75 1e                	jne    c0030554 <free_map_release+0x3f>
c0030536:	83 ec 0c             	sub    $0xc,%esp
c0030539:	68 34 77 03 c0       	push   $0xc0037734
c003053e:	68 57 77 03 c0       	push   $0xc0037757
c0030543:	68 d4 77 03 c0       	push   $0xc00377d4
c0030548:	6a 2f                	push   $0x2f
c003054a:	68 18 77 03 c0       	push   $0xc0037718
c003054f:	e8 3d a0 ff ff       	call   c002a591 <debug_panic>
c0030554:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c0030559:	6a 00                	push   $0x0
c003055b:	ff 75 0c             	pushl  0xc(%ebp)
c003055e:	ff 75 08             	pushl  0x8(%ebp)
c0030561:	50                   	push   %eax
c0030562:	e8 fd b3 ff ff       	call   c002b964 <bitmap_set_multiple>
c0030567:	83 c4 10             	add    $0x10,%esp
c003056a:	8b 15 74 02 04 c0    	mov    0xc0040274,%edx
c0030570:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c0030575:	83 ec 08             	sub    $0x8,%esp
c0030578:	52                   	push   %edx
c0030579:	50                   	push   %eax
c003057a:	e8 6b b8 ff ff       	call   c002bdea <bitmap_write>
c003057f:	83 c4 10             	add    $0x10,%esp
c0030582:	90                   	nop
c0030583:	c9                   	leave  
c0030584:	c3                   	ret    

c0030585 <free_map_open>:
c0030585:	55                   	push   %ebp
c0030586:	89 e5                	mov    %esp,%ebp
c0030588:	83 ec 08             	sub    $0x8,%esp
c003058b:	83 ec 0c             	sub    $0xc,%esp
c003058e:	6a 00                	push   $0x0
c0030590:	e8 c7 17 00 00       	call   c0031d5c <inode_open>
c0030595:	83 c4 10             	add    $0x10,%esp
c0030598:	83 ec 0c             	sub    $0xc,%esp
c003059b:	50                   	push   %eax
c003059c:	e8 32 01 00 00       	call   c00306d3 <file_open>
c00305a1:	83 c4 10             	add    $0x10,%esp
c00305a4:	a3 74 02 04 c0       	mov    %eax,0xc0040274
c00305a9:	a1 74 02 04 c0       	mov    0xc0040274,%eax
c00305ae:	85 c0                	test   %eax,%eax
c00305b0:	75 16                	jne    c00305c8 <free_map_open+0x43>
c00305b2:	68 6e 77 03 c0       	push   $0xc003776e
c00305b7:	68 e8 77 03 c0       	push   $0xc00377e8
c00305bc:	6a 3a                	push   $0x3a
c00305be:	68 18 77 03 c0       	push   $0xc0037718
c00305c3:	e8 c9 9f ff ff       	call   c002a591 <debug_panic>
c00305c8:	8b 15 74 02 04 c0    	mov    0xc0040274,%edx
c00305ce:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c00305d3:	83 ec 08             	sub    $0x8,%esp
c00305d6:	52                   	push   %edx
c00305d7:	50                   	push   %eax
c00305d8:	e8 73 b7 ff ff       	call   c002bd50 <bitmap_read>
c00305dd:	83 c4 10             	add    $0x10,%esp
c00305e0:	83 f0 01             	xor    $0x1,%eax
c00305e3:	84 c0                	test   %al,%al
c00305e5:	74 16                	je     c00305fd <free_map_open+0x78>
c00305e7:	68 82 77 03 c0       	push   $0xc0037782
c00305ec:	68 e8 77 03 c0       	push   $0xc00377e8
c00305f1:	6a 3c                	push   $0x3c
c00305f3:	68 18 77 03 c0       	push   $0xc0037718
c00305f8:	e8 94 9f ff ff       	call   c002a591 <debug_panic>
c00305fd:	90                   	nop
c00305fe:	c9                   	leave  
c00305ff:	c3                   	ret    

c0030600 <free_map_close>:
c0030600:	55                   	push   %ebp
c0030601:	89 e5                	mov    %esp,%ebp
c0030603:	83 ec 08             	sub    $0x8,%esp
c0030606:	a1 74 02 04 c0       	mov    0xc0040274,%eax
c003060b:	83 ec 0c             	sub    $0xc,%esp
c003060e:	50                   	push   %eax
c003060f:	e8 49 01 00 00       	call   c003075d <file_close>
c0030614:	83 c4 10             	add    $0x10,%esp
c0030617:	90                   	nop
c0030618:	c9                   	leave  
c0030619:	c3                   	ret    

c003061a <free_map_create>:
c003061a:	55                   	push   %ebp
c003061b:	89 e5                	mov    %esp,%ebp
c003061d:	83 ec 08             	sub    $0x8,%esp
c0030620:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c0030625:	83 ec 0c             	sub    $0xc,%esp
c0030628:	50                   	push   %eax
c0030629:	e8 0f b7 ff ff       	call   c002bd3d <bitmap_file_size>
c003062e:	83 c4 10             	add    $0x10,%esp
c0030631:	83 ec 04             	sub    $0x4,%esp
c0030634:	6a 00                	push   $0x0
c0030636:	50                   	push   %eax
c0030637:	6a 00                	push   $0x0
c0030639:	e8 49 16 00 00       	call   c0031c87 <inode_create>
c003063e:	83 c4 10             	add    $0x10,%esp
c0030641:	83 f0 01             	xor    $0x1,%eax
c0030644:	84 c0                	test   %al,%al
c0030646:	74 16                	je     c003065e <free_map_create+0x44>
c0030648:	68 96 77 03 c0       	push   $0xc0037796
c003064d:	68 f8 77 03 c0       	push   $0xc00377f8
c0030652:	6a 4d                	push   $0x4d
c0030654:	68 18 77 03 c0       	push   $0xc0037718
c0030659:	e8 33 9f ff ff       	call   c002a591 <debug_panic>
c003065e:	83 ec 0c             	sub    $0xc,%esp
c0030661:	6a 00                	push   $0x0
c0030663:	e8 f4 16 00 00       	call   c0031d5c <inode_open>
c0030668:	83 c4 10             	add    $0x10,%esp
c003066b:	83 ec 0c             	sub    $0xc,%esp
c003066e:	50                   	push   %eax
c003066f:	e8 5f 00 00 00       	call   c00306d3 <file_open>
c0030674:	83 c4 10             	add    $0x10,%esp
c0030677:	a3 74 02 04 c0       	mov    %eax,0xc0040274
c003067c:	a1 74 02 04 c0       	mov    0xc0040274,%eax
c0030681:	85 c0                	test   %eax,%eax
c0030683:	75 16                	jne    c003069b <free_map_create+0x81>
c0030685:	68 6e 77 03 c0       	push   $0xc003776e
c003068a:	68 f8 77 03 c0       	push   $0xc00377f8
c003068f:	6a 52                	push   $0x52
c0030691:	68 18 77 03 c0       	push   $0xc0037718
c0030696:	e8 f6 9e ff ff       	call   c002a591 <debug_panic>
c003069b:	8b 15 74 02 04 c0    	mov    0xc0040274,%edx
c00306a1:	a1 78 02 04 c0       	mov    0xc0040278,%eax
c00306a6:	83 ec 08             	sub    $0x8,%esp
c00306a9:	52                   	push   %edx
c00306aa:	50                   	push   %eax
c00306ab:	e8 3a b7 ff ff       	call   c002bdea <bitmap_write>
c00306b0:	83 c4 10             	add    $0x10,%esp
c00306b3:	83 f0 01             	xor    $0x1,%eax
c00306b6:	84 c0                	test   %al,%al
c00306b8:	74 16                	je     c00306d0 <free_map_create+0xb6>
c00306ba:	68 af 77 03 c0       	push   $0xc00377af
c00306bf:	68 f8 77 03 c0       	push   $0xc00377f8
c00306c4:	6a 54                	push   $0x54
c00306c6:	68 18 77 03 c0       	push   $0xc0037718
c00306cb:	e8 c1 9e ff ff       	call   c002a591 <debug_panic>
c00306d0:	90                   	nop
c00306d1:	c9                   	leave  
c00306d2:	c3                   	ret    

c00306d3 <file_open>:
c00306d3:	55                   	push   %ebp
c00306d4:	89 e5                	mov    %esp,%ebp
c00306d6:	83 ec 18             	sub    $0x18,%esp
c00306d9:	83 ec 08             	sub    $0x8,%esp
c00306dc:	6a 0c                	push   $0xc
c00306de:	6a 01                	push   $0x1
c00306e0:	e8 3c 3c ff ff       	call   c0024321 <calloc>
c00306e5:	83 c4 10             	add    $0x10,%esp
c00306e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00306eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00306ef:	74 24                	je     c0030715 <file_open+0x42>
c00306f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00306f5:	74 1e                	je     c0030715 <file_open+0x42>
c00306f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00306fa:	8b 55 08             	mov    0x8(%ebp),%edx
c00306fd:	89 10                	mov    %edx,(%eax)
c00306ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030702:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0030709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003070c:	c6 40 08 00          	movb   $0x0,0x8(%eax)
c0030710:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030713:	eb 21                	jmp    c0030736 <file_open+0x63>
c0030715:	83 ec 0c             	sub    $0xc,%esp
c0030718:	ff 75 08             	pushl  0x8(%ebp)
c003071b:	e8 25 19 00 00       	call   c0032045 <inode_close>
c0030720:	83 c4 10             	add    $0x10,%esp
c0030723:	83 ec 0c             	sub    $0xc,%esp
c0030726:	ff 75 f4             	pushl  -0xc(%ebp)
c0030729:	e8 22 3d ff ff       	call   c0024450 <free>
c003072e:	83 c4 10             	add    $0x10,%esp
c0030731:	b8 00 00 00 00       	mov    $0x0,%eax
c0030736:	c9                   	leave  
c0030737:	c3                   	ret    

c0030738 <file_reopen>:
c0030738:	55                   	push   %ebp
c0030739:	89 e5                	mov    %esp,%ebp
c003073b:	83 ec 08             	sub    $0x8,%esp
c003073e:	8b 45 08             	mov    0x8(%ebp),%eax
c0030741:	8b 00                	mov    (%eax),%eax
c0030743:	83 ec 0c             	sub    $0xc,%esp
c0030746:	50                   	push   %eax
c0030747:	e8 f4 16 00 00       	call   c0031e40 <inode_reopen>
c003074c:	83 c4 10             	add    $0x10,%esp
c003074f:	83 ec 0c             	sub    $0xc,%esp
c0030752:	50                   	push   %eax
c0030753:	e8 7b ff ff ff       	call   c00306d3 <file_open>
c0030758:	83 c4 10             	add    $0x10,%esp
c003075b:	c9                   	leave  
c003075c:	c3                   	ret    

c003075d <file_close>:
c003075d:	55                   	push   %ebp
c003075e:	89 e5                	mov    %esp,%ebp
c0030760:	83 ec 08             	sub    $0x8,%esp
c0030763:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030767:	74 2d                	je     c0030796 <file_close+0x39>
c0030769:	83 ec 0c             	sub    $0xc,%esp
c003076c:	ff 75 08             	pushl  0x8(%ebp)
c003076f:	e8 34 01 00 00       	call   c00308a8 <file_allow_write>
c0030774:	83 c4 10             	add    $0x10,%esp
c0030777:	8b 45 08             	mov    0x8(%ebp),%eax
c003077a:	8b 00                	mov    (%eax),%eax
c003077c:	83 ec 0c             	sub    $0xc,%esp
c003077f:	50                   	push   %eax
c0030780:	e8 c0 18 00 00       	call   c0032045 <inode_close>
c0030785:	83 c4 10             	add    $0x10,%esp
c0030788:	83 ec 0c             	sub    $0xc,%esp
c003078b:	ff 75 08             	pushl  0x8(%ebp)
c003078e:	e8 bd 3c ff ff       	call   c0024450 <free>
c0030793:	83 c4 10             	add    $0x10,%esp
c0030796:	90                   	nop
c0030797:	c9                   	leave  
c0030798:	c3                   	ret    

c0030799 <file_get_inode>:
c0030799:	55                   	push   %ebp
c003079a:	89 e5                	mov    %esp,%ebp
c003079c:	8b 45 08             	mov    0x8(%ebp),%eax
c003079f:	8b 00                	mov    (%eax),%eax
c00307a1:	5d                   	pop    %ebp
c00307a2:	c3                   	ret    

c00307a3 <file_read>:
c00307a3:	55                   	push   %ebp
c00307a4:	89 e5                	mov    %esp,%ebp
c00307a6:	83 ec 18             	sub    $0x18,%esp
c00307a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00307ac:	8b 50 04             	mov    0x4(%eax),%edx
c00307af:	8b 45 08             	mov    0x8(%ebp),%eax
c00307b2:	8b 00                	mov    (%eax),%eax
c00307b4:	52                   	push   %edx
c00307b5:	ff 75 10             	pushl  0x10(%ebp)
c00307b8:	ff 75 0c             	pushl  0xc(%ebp)
c00307bb:	50                   	push   %eax
c00307bc:	e8 2f 19 00 00       	call   c00320f0 <inode_read_at>
c00307c1:	83 c4 10             	add    $0x10,%esp
c00307c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00307c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00307ca:	8b 50 04             	mov    0x4(%eax),%edx
c00307cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00307d0:	01 c2                	add    %eax,%edx
c00307d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00307d5:	89 50 04             	mov    %edx,0x4(%eax)
c00307d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00307db:	c9                   	leave  
c00307dc:	c3                   	ret    

c00307dd <file_read_at>:
c00307dd:	55                   	push   %ebp
c00307de:	89 e5                	mov    %esp,%ebp
c00307e0:	83 ec 08             	sub    $0x8,%esp
c00307e3:	8b 45 08             	mov    0x8(%ebp),%eax
c00307e6:	8b 00                	mov    (%eax),%eax
c00307e8:	ff 75 14             	pushl  0x14(%ebp)
c00307eb:	ff 75 10             	pushl  0x10(%ebp)
c00307ee:	ff 75 0c             	pushl  0xc(%ebp)
c00307f1:	50                   	push   %eax
c00307f2:	e8 f9 18 00 00       	call   c00320f0 <inode_read_at>
c00307f7:	83 c4 10             	add    $0x10,%esp
c00307fa:	c9                   	leave  
c00307fb:	c3                   	ret    

c00307fc <file_write>:
c00307fc:	55                   	push   %ebp
c00307fd:	89 e5                	mov    %esp,%ebp
c00307ff:	83 ec 18             	sub    $0x18,%esp
c0030802:	8b 45 08             	mov    0x8(%ebp),%eax
c0030805:	8b 50 04             	mov    0x4(%eax),%edx
c0030808:	8b 45 08             	mov    0x8(%ebp),%eax
c003080b:	8b 00                	mov    (%eax),%eax
c003080d:	52                   	push   %edx
c003080e:	ff 75 10             	pushl  0x10(%ebp)
c0030811:	ff 75 0c             	pushl  0xc(%ebp)
c0030814:	50                   	push   %eax
c0030815:	e8 11 1a 00 00       	call   c003222b <inode_write_at>
c003081a:	83 c4 10             	add    $0x10,%esp
c003081d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030820:	8b 45 08             	mov    0x8(%ebp),%eax
c0030823:	8b 50 04             	mov    0x4(%eax),%edx
c0030826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030829:	01 c2                	add    %eax,%edx
c003082b:	8b 45 08             	mov    0x8(%ebp),%eax
c003082e:	89 50 04             	mov    %edx,0x4(%eax)
c0030831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030834:	c9                   	leave  
c0030835:	c3                   	ret    

c0030836 <file_write_at>:
c0030836:	55                   	push   %ebp
c0030837:	89 e5                	mov    %esp,%ebp
c0030839:	83 ec 08             	sub    $0x8,%esp
c003083c:	8b 45 08             	mov    0x8(%ebp),%eax
c003083f:	8b 00                	mov    (%eax),%eax
c0030841:	ff 75 14             	pushl  0x14(%ebp)
c0030844:	ff 75 10             	pushl  0x10(%ebp)
c0030847:	ff 75 0c             	pushl  0xc(%ebp)
c003084a:	50                   	push   %eax
c003084b:	e8 db 19 00 00       	call   c003222b <inode_write_at>
c0030850:	83 c4 10             	add    $0x10,%esp
c0030853:	c9                   	leave  
c0030854:	c3                   	ret    

c0030855 <file_deny_write>:
c0030855:	55                   	push   %ebp
c0030856:	89 e5                	mov    %esp,%ebp
c0030858:	83 ec 08             	sub    $0x8,%esp
c003085b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c003085f:	75 1e                	jne    c003087f <file_deny_write+0x2a>
c0030861:	83 ec 0c             	sub    $0xc,%esp
c0030864:	68 08 78 03 c0       	push   $0xc0037808
c0030869:	68 15 78 03 c0       	push   $0xc0037815
c003086e:	68 50 78 03 c0       	push   $0xc0037850
c0030873:	6a 79                	push   $0x79
c0030875:	68 2c 78 03 c0       	push   $0xc003782c
c003087a:	e8 12 9d ff ff       	call   c002a591 <debug_panic>
c003087f:	8b 45 08             	mov    0x8(%ebp),%eax
c0030882:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c0030886:	83 f0 01             	xor    $0x1,%eax
c0030889:	84 c0                	test   %al,%al
c003088b:	74 18                	je     c00308a5 <file_deny_write+0x50>
c003088d:	8b 45 08             	mov    0x8(%ebp),%eax
c0030890:	c6 40 08 01          	movb   $0x1,0x8(%eax)
c0030894:	8b 45 08             	mov    0x8(%ebp),%eax
c0030897:	8b 00                	mov    (%eax),%eax
c0030899:	83 ec 0c             	sub    $0xc,%esp
c003089c:	50                   	push   %eax
c003089d:	e8 8e 1b 00 00       	call   c0032430 <inode_deny_write>
c00308a2:	83 c4 10             	add    $0x10,%esp
c00308a5:	90                   	nop
c00308a6:	c9                   	leave  
c00308a7:	c3                   	ret    

c00308a8 <file_allow_write>:
c00308a8:	55                   	push   %ebp
c00308a9:	89 e5                	mov    %esp,%ebp
c00308ab:	83 ec 08             	sub    $0x8,%esp
c00308ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00308b2:	75 21                	jne    c00308d5 <file_allow_write+0x2d>
c00308b4:	83 ec 0c             	sub    $0xc,%esp
c00308b7:	68 08 78 03 c0       	push   $0xc0037808
c00308bc:	68 15 78 03 c0       	push   $0xc0037815
c00308c1:	68 60 78 03 c0       	push   $0xc0037860
c00308c6:	68 87 00 00 00       	push   $0x87
c00308cb:	68 2c 78 03 c0       	push   $0xc003782c
c00308d0:	e8 bc 9c ff ff       	call   c002a591 <debug_panic>
c00308d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00308d8:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c00308dc:	84 c0                	test   %al,%al
c00308de:	74 18                	je     c00308f8 <file_allow_write+0x50>
c00308e0:	8b 45 08             	mov    0x8(%ebp),%eax
c00308e3:	c6 40 08 00          	movb   $0x0,0x8(%eax)
c00308e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00308ea:	8b 00                	mov    (%eax),%eax
c00308ec:	83 ec 0c             	sub    $0xc,%esp
c00308ef:	50                   	push   %eax
c00308f0:	e8 84 1b 00 00       	call   c0032479 <inode_allow_write>
c00308f5:	83 c4 10             	add    $0x10,%esp
c00308f8:	90                   	nop
c00308f9:	c9                   	leave  
c00308fa:	c3                   	ret    

c00308fb <file_length>:
c00308fb:	55                   	push   %ebp
c00308fc:	89 e5                	mov    %esp,%ebp
c00308fe:	83 ec 08             	sub    $0x8,%esp
c0030901:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030905:	75 21                	jne    c0030928 <file_length+0x2d>
c0030907:	83 ec 0c             	sub    $0xc,%esp
c003090a:	68 08 78 03 c0       	push   $0xc0037808
c003090f:	68 15 78 03 c0       	push   $0xc0037815
c0030914:	68 74 78 03 c0       	push   $0xc0037874
c0030919:	68 93 00 00 00       	push   $0x93
c003091e:	68 2c 78 03 c0       	push   $0xc003782c
c0030923:	e8 69 9c ff ff       	call   c002a591 <debug_panic>
c0030928:	8b 45 08             	mov    0x8(%ebp),%eax
c003092b:	8b 00                	mov    (%eax),%eax
c003092d:	83 ec 0c             	sub    $0xc,%esp
c0030930:	50                   	push   %eax
c0030931:	e8 b7 1b 00 00       	call   c00324ed <inode_length>
c0030936:	83 c4 10             	add    $0x10,%esp
c0030939:	c9                   	leave  
c003093a:	c3                   	ret    

c003093b <file_seek>:
c003093b:	55                   	push   %ebp
c003093c:	89 e5                	mov    %esp,%ebp
c003093e:	83 ec 08             	sub    $0x8,%esp
c0030941:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030945:	75 21                	jne    c0030968 <file_seek+0x2d>
c0030947:	83 ec 0c             	sub    $0xc,%esp
c003094a:	68 08 78 03 c0       	push   $0xc0037808
c003094f:	68 15 78 03 c0       	push   $0xc0037815
c0030954:	68 80 78 03 c0       	push   $0xc0037880
c0030959:	68 9c 00 00 00       	push   $0x9c
c003095e:	68 2c 78 03 c0       	push   $0xc003782c
c0030963:	e8 29 9c ff ff       	call   c002a591 <debug_panic>
c0030968:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c003096c:	79 21                	jns    c003098f <file_seek+0x54>
c003096e:	83 ec 0c             	sub    $0xc,%esp
c0030971:	68 41 78 03 c0       	push   $0xc0037841
c0030976:	68 15 78 03 c0       	push   $0xc0037815
c003097b:	68 80 78 03 c0       	push   $0xc0037880
c0030980:	68 9d 00 00 00       	push   $0x9d
c0030985:	68 2c 78 03 c0       	push   $0xc003782c
c003098a:	e8 02 9c ff ff       	call   c002a591 <debug_panic>
c003098f:	8b 45 08             	mov    0x8(%ebp),%eax
c0030992:	8b 55 0c             	mov    0xc(%ebp),%edx
c0030995:	89 50 04             	mov    %edx,0x4(%eax)
c0030998:	90                   	nop
c0030999:	c9                   	leave  
c003099a:	c3                   	ret    

c003099b <file_tell>:
c003099b:	55                   	push   %ebp
c003099c:	89 e5                	mov    %esp,%ebp
c003099e:	83 ec 08             	sub    $0x8,%esp
c00309a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00309a5:	75 21                	jne    c00309c8 <file_tell+0x2d>
c00309a7:	83 ec 0c             	sub    $0xc,%esp
c00309aa:	68 08 78 03 c0       	push   $0xc0037808
c00309af:	68 15 78 03 c0       	push   $0xc0037815
c00309b4:	68 8c 78 03 c0       	push   $0xc003788c
c00309b9:	68 a6 00 00 00       	push   $0xa6
c00309be:	68 2c 78 03 c0       	push   $0xc003782c
c00309c3:	e8 c9 9b ff ff       	call   c002a591 <debug_panic>
c00309c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00309cb:	8b 40 04             	mov    0x4(%eax),%eax
c00309ce:	c9                   	leave  
c00309cf:	c3                   	ret    

c00309d0 <buffer_cache_init>:
c00309d0:	55                   	push   %ebp
c00309d1:	89 e5                	mov    %esp,%ebp
c00309d3:	83 ec 18             	sub    $0x18,%esp
c00309d6:	83 ec 0c             	sub    $0xc,%esp
c00309d9:	68 80 84 04 c0       	push   $0xc0048480
c00309de:	e8 fe 2a ff ff       	call   c00234e1 <lock_init>
c00309e3:	83 c4 10             	add    $0x10,%esp
c00309e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00309ed:	eb 43                	jmp    c0030a32 <buffer_cache_init+0x62>
c00309ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00309f2:	c1 e0 03             	shl    $0x3,%eax
c00309f5:	89 c2                	mov    %eax,%edx
c00309f7:	c1 e2 06             	shl    $0x6,%edx
c00309fa:	01 d0                	add    %edx,%eax
c00309fc:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030a01:	c6 00 00             	movb   $0x0,(%eax)
c0030a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030a07:	c1 e0 03             	shl    $0x3,%eax
c0030a0a:	89 c2                	mov    %eax,%edx
c0030a0c:	c1 e2 06             	shl    $0x6,%edx
c0030a0f:	01 d0                	add    %edx,%eax
c0030a11:	05 81 02 04 c0       	add    $0xc0040281,%eax
c0030a16:	c6 00 00             	movb   $0x0,(%eax)
c0030a19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030a1c:	c1 e0 03             	shl    $0x3,%eax
c0030a1f:	89 c2                	mov    %eax,%edx
c0030a21:	c1 e2 06             	shl    $0x6,%edx
c0030a24:	01 d0                	add    %edx,%eax
c0030a26:	05 82 02 04 c0       	add    $0xc0040282,%eax
c0030a2b:	c6 00 00             	movb   $0x0,(%eax)
c0030a2e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0030a32:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
c0030a36:	76 b7                	jbe    c00309ef <buffer_cache_init+0x1f>
c0030a38:	90                   	nop
c0030a39:	c9                   	leave  
c0030a3a:	c3                   	ret    

c0030a3b <buffer_cache_close>:
c0030a3b:	55                   	push   %ebp
c0030a3c:	89 e5                	mov    %esp,%ebp
c0030a3e:	83 ec 18             	sub    $0x18,%esp
c0030a41:	83 ec 0c             	sub    $0xc,%esp
c0030a44:	68 80 84 04 c0       	push   $0xc0048480
c0030a49:	e8 e0 2a ff ff       	call   c002352e <lock_acquire>
c0030a4e:	83 c4 10             	add    $0x10,%esp
c0030a51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0030a58:	eb 72                	jmp    c0030acc <buffer_cache_close+0x91>
c0030a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030a5d:	c1 e0 03             	shl    $0x3,%eax
c0030a60:	89 c2                	mov    %eax,%edx
c0030a62:	c1 e2 06             	shl    $0x6,%edx
c0030a65:	01 d0                	add    %edx,%eax
c0030a67:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030a6c:	0f b6 00             	movzbl (%eax),%eax
c0030a6f:	84 c0                	test   %al,%al
c0030a71:	74 55                	je     c0030ac8 <buffer_cache_close+0x8d>
c0030a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030a76:	c1 e0 03             	shl    $0x3,%eax
c0030a79:	89 c2                	mov    %eax,%edx
c0030a7b:	c1 e2 06             	shl    $0x6,%edx
c0030a7e:	01 d0                	add    %edx,%eax
c0030a80:	05 81 02 04 c0       	add    $0xc0040281,%eax
c0030a85:	0f b6 00             	movzbl (%eax),%eax
c0030a88:	84 c0                	test   %al,%al
c0030a8a:	74 3c                	je     c0030ac8 <buffer_cache_close+0x8d>
c0030a8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030a8f:	c1 e0 03             	shl    $0x3,%eax
c0030a92:	89 c2                	mov    %eax,%edx
c0030a94:	c1 e2 06             	shl    $0x6,%edx
c0030a97:	01 d0                	add    %edx,%eax
c0030a99:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030a9e:	8d 48 08             	lea    0x8(%eax),%ecx
c0030aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030aa4:	c1 e0 03             	shl    $0x3,%eax
c0030aa7:	89 c2                	mov    %eax,%edx
c0030aa9:	c1 e2 06             	shl    $0x6,%edx
c0030aac:	01 d0                	add    %edx,%eax
c0030aae:	05 84 02 04 c0       	add    $0xc0040284,%eax
c0030ab3:	8b 10                	mov    (%eax),%edx
c0030ab5:	a1 40 87 04 c0       	mov    0xc0048740,%eax
c0030aba:	83 ec 04             	sub    $0x4,%esp
c0030abd:	51                   	push   %ecx
c0030abe:	52                   	push   %edx
c0030abf:	50                   	push   %eax
c0030ac0:	e8 c1 52 ff ff       	call   c0025d86 <block_write>
c0030ac5:	83 c4 10             	add    $0x10,%esp
c0030ac8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0030acc:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
c0030ad0:	76 88                	jbe    c0030a5a <buffer_cache_close+0x1f>
c0030ad2:	83 ec 0c             	sub    $0xc,%esp
c0030ad5:	68 80 84 04 c0       	push   $0xc0048480
c0030ada:	e8 90 2c ff ff       	call   c002376f <lock_release>
c0030adf:	83 c4 10             	add    $0x10,%esp
c0030ae2:	90                   	nop
c0030ae3:	c9                   	leave  
c0030ae4:	c3                   	ret    

c0030ae5 <buffer_cache_lookup>:
c0030ae5:	55                   	push   %ebp
c0030ae6:	89 e5                	mov    %esp,%ebp
c0030ae8:	83 ec 10             	sub    $0x10,%esp
c0030aeb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0030af2:	eb 4a                	jmp    c0030b3e <buffer_cache_lookup+0x59>
c0030af4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0030af7:	c1 e0 03             	shl    $0x3,%eax
c0030afa:	89 c2                	mov    %eax,%edx
c0030afc:	c1 e2 06             	shl    $0x6,%edx
c0030aff:	01 d0                	add    %edx,%eax
c0030b01:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030b06:	0f b6 00             	movzbl (%eax),%eax
c0030b09:	84 c0                	test   %al,%al
c0030b0b:	74 2d                	je     c0030b3a <buffer_cache_lookup+0x55>
c0030b0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0030b10:	c1 e0 03             	shl    $0x3,%eax
c0030b13:	89 c2                	mov    %eax,%edx
c0030b15:	c1 e2 06             	shl    $0x6,%edx
c0030b18:	01 d0                	add    %edx,%eax
c0030b1a:	05 84 02 04 c0       	add    $0xc0040284,%eax
c0030b1f:	8b 00                	mov    (%eax),%eax
c0030b21:	3b 45 08             	cmp    0x8(%ebp),%eax
c0030b24:	75 14                	jne    c0030b3a <buffer_cache_lookup+0x55>
c0030b26:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0030b29:	c1 e0 03             	shl    $0x3,%eax
c0030b2c:	89 c2                	mov    %eax,%edx
c0030b2e:	c1 e2 06             	shl    $0x6,%edx
c0030b31:	01 d0                	add    %edx,%eax
c0030b33:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030b38:	eb 0f                	jmp    c0030b49 <buffer_cache_lookup+0x64>
c0030b3a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0030b3e:	83 7d fc 3f          	cmpl   $0x3f,-0x4(%ebp)
c0030b42:	76 b0                	jbe    c0030af4 <buffer_cache_lookup+0xf>
c0030b44:	b8 00 00 00 00       	mov    $0x0,%eax
c0030b49:	c9                   	leave  
c0030b4a:	c3                   	ret    

c0030b4b <buffer_cache_evict>:
c0030b4b:	55                   	push   %ebp
c0030b4c:	89 e5                	mov    %esp,%ebp
c0030b4e:	83 ec 08             	sub    $0x8,%esp
c0030b51:	83 ec 0c             	sub    $0xc,%esp
c0030b54:	68 80 84 04 c0       	push   $0xc0048480
c0030b59:	e8 d2 2c ff ff       	call   c0023830 <lock_held_by_current_thread>
c0030b5e:	83 c4 10             	add    $0x10,%esp
c0030b61:	84 c0                	test   %al,%al
c0030b63:	75 1e                	jne    c0030b83 <buffer_cache_evict+0x38>
c0030b65:	83 ec 0c             	sub    $0xc,%esp
c0030b68:	68 98 78 03 c0       	push   $0xc0037898
c0030b6d:	68 c8 78 03 c0       	push   $0xc00378c8
c0030b72:	68 0c 79 03 c0       	push   $0xc003790c
c0030b77:	6a 3d                	push   $0x3d
c0030b79:	68 df 78 03 c0       	push   $0xc00378df
c0030b7e:	e8 0e 9a ff ff       	call   c002a591 <debug_panic>
c0030b83:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030b88:	c1 e0 03             	shl    $0x3,%eax
c0030b8b:	89 c2                	mov    %eax,%edx
c0030b8d:	c1 e2 06             	shl    $0x6,%edx
c0030b90:	01 d0                	add    %edx,%eax
c0030b92:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030b97:	0f b6 00             	movzbl (%eax),%eax
c0030b9a:	83 f0 01             	xor    $0x1,%eax
c0030b9d:	84 c0                	test   %al,%al
c0030b9f:	74 19                	je     c0030bba <buffer_cache_evict+0x6f>
c0030ba1:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030ba6:	c1 e0 03             	shl    $0x3,%eax
c0030ba9:	89 c2                	mov    %eax,%edx
c0030bab:	c1 e2 06             	shl    $0x6,%edx
c0030bae:	01 d0                	add    %edx,%eax
c0030bb0:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030bb5:	e9 04 01 00 00       	jmp    c0030cbe <buffer_cache_evict+0x173>
c0030bba:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030bbf:	c1 e0 03             	shl    $0x3,%eax
c0030bc2:	89 c2                	mov    %eax,%edx
c0030bc4:	c1 e2 06             	shl    $0x6,%edx
c0030bc7:	01 d0                	add    %edx,%eax
c0030bc9:	05 82 02 04 c0       	add    $0xc0040282,%eax
c0030bce:	0f b6 00             	movzbl (%eax),%eax
c0030bd1:	84 c0                	test   %al,%al
c0030bd3:	74 29                	je     c0030bfe <buffer_cache_evict+0xb3>
c0030bd5:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030bda:	c1 e0 03             	shl    $0x3,%eax
c0030bdd:	89 c2                	mov    %eax,%edx
c0030bdf:	c1 e2 06             	shl    $0x6,%edx
c0030be2:	01 d0                	add    %edx,%eax
c0030be4:	05 82 02 04 c0       	add    $0xc0040282,%eax
c0030be9:	c6 00 00             	movb   $0x0,(%eax)
c0030bec:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030bf1:	83 c0 01             	add    $0x1,%eax
c0030bf4:	83 e0 3f             	and    $0x3f,%eax
c0030bf7:	a3 a4 84 04 c0       	mov    %eax,0xc00484a4
c0030bfc:	eb 85                	jmp    c0030b83 <buffer_cache_evict+0x38>
c0030bfe:	90                   	nop
c0030bff:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030c04:	c1 e0 03             	shl    $0x3,%eax
c0030c07:	89 c2                	mov    %eax,%edx
c0030c09:	c1 e2 06             	shl    $0x6,%edx
c0030c0c:	01 d0                	add    %edx,%eax
c0030c0e:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030c13:	0f b6 00             	movzbl (%eax),%eax
c0030c16:	84 c0                	test   %al,%al
c0030c18:	75 1e                	jne    c0030c38 <buffer_cache_evict+0xed>
c0030c1a:	83 ec 0c             	sub    $0xc,%esp
c0030c1d:	68 f5 78 03 c0       	push   $0xc00378f5
c0030c22:	68 c8 78 03 c0       	push   $0xc00378c8
c0030c27:	68 0c 79 03 c0       	push   $0xc003790c
c0030c2c:	6a 4a                	push   $0x4a
c0030c2e:	68 df 78 03 c0       	push   $0xc00378df
c0030c33:	e8 59 99 ff ff       	call   c002a591 <debug_panic>
c0030c38:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030c3d:	c1 e0 03             	shl    $0x3,%eax
c0030c40:	89 c2                	mov    %eax,%edx
c0030c42:	c1 e2 06             	shl    $0x6,%edx
c0030c45:	01 d0                	add    %edx,%eax
c0030c47:	05 81 02 04 c0       	add    $0xc0040281,%eax
c0030c4c:	0f b6 00             	movzbl (%eax),%eax
c0030c4f:	84 c0                	test   %al,%al
c0030c51:	74 40                	je     c0030c93 <buffer_cache_evict+0x148>
c0030c53:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030c58:	c1 e0 03             	shl    $0x3,%eax
c0030c5b:	89 c2                	mov    %eax,%edx
c0030c5d:	c1 e2 06             	shl    $0x6,%edx
c0030c60:	01 d0                	add    %edx,%eax
c0030c62:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030c67:	8d 48 08             	lea    0x8(%eax),%ecx
c0030c6a:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030c6f:	c1 e0 03             	shl    $0x3,%eax
c0030c72:	89 c2                	mov    %eax,%edx
c0030c74:	c1 e2 06             	shl    $0x6,%edx
c0030c77:	01 d0                	add    %edx,%eax
c0030c79:	05 84 02 04 c0       	add    $0xc0040284,%eax
c0030c7e:	8b 10                	mov    (%eax),%edx
c0030c80:	a1 40 87 04 c0       	mov    0xc0048740,%eax
c0030c85:	83 ec 04             	sub    $0x4,%esp
c0030c88:	51                   	push   %ecx
c0030c89:	52                   	push   %edx
c0030c8a:	50                   	push   %eax
c0030c8b:	e8 f6 50 ff ff       	call   c0025d86 <block_write>
c0030c90:	83 c4 10             	add    $0x10,%esp
c0030c93:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030c98:	c1 e0 03             	shl    $0x3,%eax
c0030c9b:	89 c2                	mov    %eax,%edx
c0030c9d:	c1 e2 06             	shl    $0x6,%edx
c0030ca0:	01 d0                	add    %edx,%eax
c0030ca2:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030ca7:	c6 00 00             	movb   $0x0,(%eax)
c0030caa:	a1 a4 84 04 c0       	mov    0xc00484a4,%eax
c0030caf:	c1 e0 03             	shl    $0x3,%eax
c0030cb2:	89 c2                	mov    %eax,%edx
c0030cb4:	c1 e2 06             	shl    $0x6,%edx
c0030cb7:	01 d0                	add    %edx,%eax
c0030cb9:	05 80 02 04 c0       	add    $0xc0040280,%eax
c0030cbe:	c9                   	leave  
c0030cbf:	c3                   	ret    

c0030cc0 <buffer_cache_read>:
c0030cc0:	55                   	push   %ebp
c0030cc1:	89 e5                	mov    %esp,%ebp
c0030cc3:	83 ec 18             	sub    $0x18,%esp
c0030cc6:	83 ec 0c             	sub    $0xc,%esp
c0030cc9:	68 80 84 04 c0       	push   $0xc0048480
c0030cce:	e8 5b 28 ff ff       	call   c002352e <lock_acquire>
c0030cd3:	83 c4 10             	add    $0x10,%esp
c0030cd6:	83 ec 0c             	sub    $0xc,%esp
c0030cd9:	ff 75 08             	pushl  0x8(%ebp)
c0030cdc:	e8 04 fe ff ff       	call   c0030ae5 <buffer_cache_lookup>
c0030ce1:	83 c4 10             	add    $0x10,%esp
c0030ce4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030ce7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030ceb:	75 39                	jne    c0030d26 <buffer_cache_read+0x66>
c0030ced:	e8 59 fe ff ff       	call   c0030b4b <buffer_cache_evict>
c0030cf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030cf8:	c6 00 01             	movb   $0x1,(%eax)
c0030cfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030cfe:	c6 40 01 00          	movb   $0x0,0x1(%eax)
c0030d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030d05:	8b 55 08             	mov    0x8(%ebp),%edx
c0030d08:	89 50 04             	mov    %edx,0x4(%eax)
c0030d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030d0e:	8d 50 08             	lea    0x8(%eax),%edx
c0030d11:	a1 40 87 04 c0       	mov    0xc0048740,%eax
c0030d16:	83 ec 04             	sub    $0x4,%esp
c0030d19:	52                   	push   %edx
c0030d1a:	ff 75 08             	pushl  0x8(%ebp)
c0030d1d:	50                   	push   %eax
c0030d1e:	e8 14 50 ff ff       	call   c0025d37 <block_read>
c0030d23:	83 c4 10             	add    $0x10,%esp
c0030d26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030d29:	c6 40 02 01          	movb   $0x1,0x2(%eax)
c0030d2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030d30:	83 c0 08             	add    $0x8,%eax
c0030d33:	83 ec 04             	sub    $0x4,%esp
c0030d36:	68 00 02 00 00       	push   $0x200
c0030d3b:	50                   	push   %eax
c0030d3c:	ff 75 0c             	pushl  0xc(%ebp)
c0030d3f:	e8 0d 85 ff ff       	call   c0029251 <memcpy>
c0030d44:	83 c4 10             	add    $0x10,%esp
c0030d47:	83 ec 0c             	sub    $0xc,%esp
c0030d4a:	68 80 84 04 c0       	push   $0xc0048480
c0030d4f:	e8 1b 2a ff ff       	call   c002376f <lock_release>
c0030d54:	83 c4 10             	add    $0x10,%esp
c0030d57:	90                   	nop
c0030d58:	c9                   	leave  
c0030d59:	c3                   	ret    

c0030d5a <buffer_cache_write>:
c0030d5a:	55                   	push   %ebp
c0030d5b:	89 e5                	mov    %esp,%ebp
c0030d5d:	83 ec 18             	sub    $0x18,%esp
c0030d60:	83 ec 0c             	sub    $0xc,%esp
c0030d63:	68 80 84 04 c0       	push   $0xc0048480
c0030d68:	e8 c1 27 ff ff       	call   c002352e <lock_acquire>
c0030d6d:	83 c4 10             	add    $0x10,%esp
c0030d70:	83 ec 0c             	sub    $0xc,%esp
c0030d73:	ff 75 08             	pushl  0x8(%ebp)
c0030d76:	e8 6a fd ff ff       	call   c0030ae5 <buffer_cache_lookup>
c0030d7b:	83 c4 10             	add    $0x10,%esp
c0030d7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030d81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030d85:	75 32                	jne    c0030db9 <buffer_cache_write+0x5f>
c0030d87:	e8 bf fd ff ff       	call   c0030b4b <buffer_cache_evict>
c0030d8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030d92:	c6 00 01             	movb   $0x1,(%eax)
c0030d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030d98:	8b 55 08             	mov    0x8(%ebp),%edx
c0030d9b:	89 50 04             	mov    %edx,0x4(%eax)
c0030d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030da1:	8d 50 08             	lea    0x8(%eax),%edx
c0030da4:	a1 40 87 04 c0       	mov    0xc0048740,%eax
c0030da9:	83 ec 04             	sub    $0x4,%esp
c0030dac:	52                   	push   %edx
c0030dad:	ff 75 08             	pushl  0x8(%ebp)
c0030db0:	50                   	push   %eax
c0030db1:	e8 81 4f ff ff       	call   c0025d37 <block_read>
c0030db6:	83 c4 10             	add    $0x10,%esp
c0030db9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030dbc:	c6 40 02 01          	movb   $0x1,0x2(%eax)
c0030dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030dc3:	c6 40 01 01          	movb   $0x1,0x1(%eax)
c0030dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030dca:	83 c0 08             	add    $0x8,%eax
c0030dcd:	83 ec 04             	sub    $0x4,%esp
c0030dd0:	68 00 02 00 00       	push   $0x200
c0030dd5:	ff 75 0c             	pushl  0xc(%ebp)
c0030dd8:	50                   	push   %eax
c0030dd9:	e8 73 84 ff ff       	call   c0029251 <memcpy>
c0030dde:	83 c4 10             	add    $0x10,%esp
c0030de1:	83 ec 0c             	sub    $0xc,%esp
c0030de4:	68 80 84 04 c0       	push   $0xc0048480
c0030de9:	e8 81 29 ff ff       	call   c002376f <lock_release>
c0030dee:	83 c4 10             	add    $0x10,%esp
c0030df1:	90                   	nop
c0030df2:	c9                   	leave  
c0030df3:	c3                   	ret    

c0030df4 <parse_path_name>:
c0030df4:	55                   	push   %ebp
c0030df5:	89 e5                	mov    %esp,%ebp
c0030df7:	83 ec 28             	sub    $0x28,%esp
c0030dfa:	83 ec 0c             	sub    $0xc,%esp
c0030dfd:	ff 75 08             	pushl  0x8(%ebp)
c0030e00:	e8 ab 8a ff ff       	call   c00298b0 <strlen>
c0030e05:	83 c4 10             	add    $0x10,%esp
c0030e08:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0030e0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0030e0e:	83 c0 01             	add    $0x1,%eax
c0030e11:	83 ec 0c             	sub    $0xc,%esp
c0030e14:	50                   	push   %eax
c0030e15:	e8 39 33 ff ff       	call   c0024153 <malloc>
c0030e1a:	83 c4 10             	add    $0x10,%esp
c0030e1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0030e20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0030e23:	83 c0 01             	add    $0x1,%eax
c0030e26:	83 ec 04             	sub    $0x4,%esp
c0030e29:	50                   	push   %eax
c0030e2a:	ff 75 08             	pushl  0x8(%ebp)
c0030e2d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0030e30:	e8 1c 84 ff ff       	call   c0029251 <memcpy>
c0030e35:	83 c4 10             	add    $0x10,%esp
c0030e38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0030e3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030e3e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0030e42:	7e 1c                	jle    c0030e60 <parse_path_name+0x6c>
c0030e44:	8b 45 08             	mov    0x8(%ebp),%eax
c0030e47:	0f b6 00             	movzbl (%eax),%eax
c0030e4a:	3c 2f                	cmp    $0x2f,%al
c0030e4c:	75 12                	jne    c0030e60 <parse_path_name+0x6c>
c0030e4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030e52:	74 0c                	je     c0030e60 <parse_path_name+0x6c>
c0030e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030e57:	8d 50 01             	lea    0x1(%eax),%edx
c0030e5a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0030e5d:	c6 00 2f             	movb   $0x2f,(%eax)
c0030e60:	c7 45 ec 20 79 03 c0 	movl   $0xc0037920,-0x14(%ebp)
c0030e67:	83 ec 04             	sub    $0x4,%esp
c0030e6a:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0030e6d:	50                   	push   %eax
c0030e6e:	68 21 79 03 c0       	push   $0xc0037921
c0030e73:	ff 75 e4             	pushl  -0x1c(%ebp)
c0030e76:	e8 c8 88 ff ff       	call   c0029743 <strtok_r>
c0030e7b:	83 c4 10             	add    $0x10,%esp
c0030e7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0030e81:	eb 65                	jmp    c0030ee8 <parse_path_name+0xf4>
c0030e83:	83 ec 0c             	sub    $0xc,%esp
c0030e86:	ff 75 ec             	pushl  -0x14(%ebp)
c0030e89:	e8 22 8a ff ff       	call   c00298b0 <strlen>
c0030e8e:	83 c4 10             	add    $0x10,%esp
c0030e91:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0030e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030e98:	74 2f                	je     c0030ec9 <parse_path_name+0xd5>
c0030e9a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0030e9e:	7e 29                	jle    c0030ec9 <parse_path_name+0xd5>
c0030ea0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0030ea3:	83 ec 04             	sub    $0x4,%esp
c0030ea6:	50                   	push   %eax
c0030ea7:	ff 75 ec             	pushl  -0x14(%ebp)
c0030eaa:	ff 75 f4             	pushl  -0xc(%ebp)
c0030ead:	e8 9f 83 ff ff       	call   c0029251 <memcpy>
c0030eb2:	83 c4 10             	add    $0x10,%esp
c0030eb5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0030eb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030ebb:	01 d0                	add    %edx,%eax
c0030ebd:	c6 00 2f             	movb   $0x2f,(%eax)
c0030ec0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0030ec3:	83 c0 01             	add    $0x1,%eax
c0030ec6:	01 45 f4             	add    %eax,-0xc(%ebp)
c0030ec9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0030ecc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0030ecf:	83 ec 04             	sub    $0x4,%esp
c0030ed2:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0030ed5:	50                   	push   %eax
c0030ed6:	68 21 79 03 c0       	push   $0xc0037921
c0030edb:	6a 00                	push   $0x0
c0030edd:	e8 61 88 ff ff       	call   c0029743 <strtok_r>
c0030ee2:	83 c4 10             	add    $0x10,%esp
c0030ee5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0030ee8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0030eec:	75 95                	jne    c0030e83 <parse_path_name+0x8f>
c0030eee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030ef2:	74 06                	je     c0030efa <parse_path_name+0x106>
c0030ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030ef7:	c6 00 00             	movb   $0x0,(%eax)
c0030efa:	83 ec 0c             	sub    $0xc,%esp
c0030efd:	ff 75 ec             	pushl  -0x14(%ebp)
c0030f00:	e8 ab 89 ff ff       	call   c00298b0 <strlen>
c0030f05:	83 c4 10             	add    $0x10,%esp
c0030f08:	83 c0 01             	add    $0x1,%eax
c0030f0b:	83 ec 04             	sub    $0x4,%esp
c0030f0e:	50                   	push   %eax
c0030f0f:	ff 75 ec             	pushl  -0x14(%ebp)
c0030f12:	ff 75 10             	pushl  0x10(%ebp)
c0030f15:	e8 37 83 ff ff       	call   c0029251 <memcpy>
c0030f1a:	83 c4 10             	add    $0x10,%esp
c0030f1d:	83 ec 0c             	sub    $0xc,%esp
c0030f20:	ff 75 e4             	pushl  -0x1c(%ebp)
c0030f23:	e8 28 35 ff ff       	call   c0024450 <free>
c0030f28:	83 c4 10             	add    $0x10,%esp
c0030f2b:	90                   	nop
c0030f2c:	c9                   	leave  
c0030f2d:	c3                   	ret    

c0030f2e <dir_create>:
c0030f2e:	55                   	push   %ebp
c0030f2f:	89 e5                	mov    %esp,%ebp
c0030f31:	83 ec 28             	sub    $0x28,%esp
c0030f34:	8b 55 0c             	mov    0xc(%ebp),%edx
c0030f37:	89 d0                	mov    %edx,%eax
c0030f39:	c1 e0 02             	shl    $0x2,%eax
c0030f3c:	01 d0                	add    %edx,%eax
c0030f3e:	c1 e0 02             	shl    $0x2,%eax
c0030f41:	83 ec 04             	sub    $0x4,%esp
c0030f44:	6a 01                	push   $0x1
c0030f46:	50                   	push   %eax
c0030f47:	ff 75 08             	pushl  0x8(%ebp)
c0030f4a:	e8 38 0d 00 00       	call   c0031c87 <inode_create>
c0030f4f:	83 c4 10             	add    $0x10,%esp
c0030f52:	88 45 f7             	mov    %al,-0x9(%ebp)
c0030f55:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0030f59:	83 f0 01             	xor    $0x1,%eax
c0030f5c:	84 c0                	test   %al,%al
c0030f5e:	74 07                	je     c0030f67 <dir_create+0x39>
c0030f60:	b8 00 00 00 00       	mov    $0x0,%eax
c0030f65:	eb 78                	jmp    c0030fdf <dir_create+0xb1>
c0030f67:	83 ec 0c             	sub    $0xc,%esp
c0030f6a:	ff 75 08             	pushl  0x8(%ebp)
c0030f6d:	e8 ea 0d 00 00       	call   c0031d5c <inode_open>
c0030f72:	83 c4 10             	add    $0x10,%esp
c0030f75:	83 ec 0c             	sub    $0xc,%esp
c0030f78:	50                   	push   %eax
c0030f79:	e8 63 00 00 00       	call   c0030fe1 <dir_open>
c0030f7e:	83 c4 10             	add    $0x10,%esp
c0030f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0030f84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0030f88:	75 1e                	jne    c0030fa8 <dir_create+0x7a>
c0030f8a:	83 ec 0c             	sub    $0xc,%esp
c0030f8d:	68 23 79 03 c0       	push   $0xc0037923
c0030f92:	68 2f 79 03 c0       	push   $0xc003792f
c0030f97:	68 74 79 03 c0       	push   $0xc0037974
c0030f9c:	6a 42                	push   $0x42
c0030f9e:	68 46 79 03 c0       	push   $0xc0037946
c0030fa3:	e8 e9 95 ff ff       	call   c002a591 <debug_panic>
c0030fa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0030fab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0030fae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0030fb1:	8b 00                	mov    (%eax),%eax
c0030fb3:	6a 00                	push   $0x0
c0030fb5:	6a 14                	push   $0x14
c0030fb7:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0030fba:	52                   	push   %edx
c0030fbb:	50                   	push   %eax
c0030fbc:	e8 6a 12 00 00       	call   c003222b <inode_write_at>
c0030fc1:	83 c4 10             	add    $0x10,%esp
c0030fc4:	83 f8 14             	cmp    $0x14,%eax
c0030fc7:	74 04                	je     c0030fcd <dir_create+0x9f>
c0030fc9:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0030fcd:	83 ec 0c             	sub    $0xc,%esp
c0030fd0:	ff 75 f0             	pushl  -0x10(%ebp)
c0030fd3:	e8 5c 02 00 00       	call   c0031234 <dir_close>
c0030fd8:	83 c4 10             	add    $0x10,%esp
c0030fdb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0030fdf:	c9                   	leave  
c0030fe0:	c3                   	ret    

c0030fe1 <dir_open>:
c0030fe1:	55                   	push   %ebp
c0030fe2:	89 e5                	mov    %esp,%ebp
c0030fe4:	83 ec 18             	sub    $0x18,%esp
c0030fe7:	83 ec 08             	sub    $0x8,%esp
c0030fea:	6a 08                	push   $0x8
c0030fec:	6a 01                	push   $0x1
c0030fee:	e8 2e 33 ff ff       	call   c0024321 <calloc>
c0030ff3:	83 c4 10             	add    $0x10,%esp
c0030ff6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030ff9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030ffd:	74 1d                	je     c003101c <dir_open+0x3b>
c0030fff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0031003:	74 17                	je     c003101c <dir_open+0x3b>
c0031005:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031008:	8b 55 08             	mov    0x8(%ebp),%edx
c003100b:	89 10                	mov    %edx,(%eax)
c003100d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031010:	c7 40 04 14 00 00 00 	movl   $0x14,0x4(%eax)
c0031017:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003101a:	eb 21                	jmp    c003103d <dir_open+0x5c>
c003101c:	83 ec 0c             	sub    $0xc,%esp
c003101f:	ff 75 08             	pushl  0x8(%ebp)
c0031022:	e8 1e 10 00 00       	call   c0032045 <inode_close>
c0031027:	83 c4 10             	add    $0x10,%esp
c003102a:	83 ec 0c             	sub    $0xc,%esp
c003102d:	ff 75 f4             	pushl  -0xc(%ebp)
c0031030:	e8 1b 34 ff ff       	call   c0024450 <free>
c0031035:	83 c4 10             	add    $0x10,%esp
c0031038:	b8 00 00 00 00       	mov    $0x0,%eax
c003103d:	c9                   	leave  
c003103e:	c3                   	ret    

c003103f <dir_open_root>:
c003103f:	55                   	push   %ebp
c0031040:	89 e5                	mov    %esp,%ebp
c0031042:	83 ec 08             	sub    $0x8,%esp
c0031045:	83 ec 0c             	sub    $0xc,%esp
c0031048:	6a 01                	push   $0x1
c003104a:	e8 0d 0d 00 00       	call   c0031d5c <inode_open>
c003104f:	83 c4 10             	add    $0x10,%esp
c0031052:	83 ec 0c             	sub    $0xc,%esp
c0031055:	50                   	push   %eax
c0031056:	e8 86 ff ff ff       	call   c0030fe1 <dir_open>
c003105b:	83 c4 10             	add    $0x10,%esp
c003105e:	c9                   	leave  
c003105f:	c3                   	ret    

c0031060 <dir_open_path>:
c0031060:	55                   	push   %ebp
c0031061:	89 e5                	mov    %esp,%ebp
c0031063:	53                   	push   %ebx
c0031064:	83 ec 34             	sub    $0x34,%esp
c0031067:	89 e0                	mov    %esp,%eax
c0031069:	89 c3                	mov    %eax,%ebx
c003106b:	83 ec 0c             	sub    $0xc,%esp
c003106e:	ff 75 08             	pushl  0x8(%ebp)
c0031071:	e8 3a 88 ff ff       	call   c00298b0 <strlen>
c0031076:	83 c4 10             	add    $0x10,%esp
c0031079:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003107c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c003107f:	83 c0 01             	add    $0x1,%eax
c0031082:	8d 50 ff             	lea    -0x1(%eax),%edx
c0031085:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0031088:	89 c2                	mov    %eax,%edx
c003108a:	b8 10 00 00 00       	mov    $0x10,%eax
c003108f:	83 e8 01             	sub    $0x1,%eax
c0031092:	01 d0                	add    %edx,%eax
c0031094:	b9 10 00 00 00       	mov    $0x10,%ecx
c0031099:	ba 00 00 00 00       	mov    $0x0,%edx
c003109e:	f7 f1                	div    %ecx
c00310a0:	6b c0 10             	imul   $0x10,%eax,%eax
c00310a3:	29 c4                	sub    %eax,%esp
c00310a5:	89 e0                	mov    %esp,%eax
c00310a7:	83 c0 00             	add    $0x0,%eax
c00310aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00310ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00310b0:	83 c0 01             	add    $0x1,%eax
c00310b3:	89 c2                	mov    %eax,%edx
c00310b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00310b8:	83 ec 04             	sub    $0x4,%esp
c00310bb:	52                   	push   %edx
c00310bc:	ff 75 08             	pushl  0x8(%ebp)
c00310bf:	50                   	push   %eax
c00310c0:	e8 69 88 ff ff       	call   c002992e <strlcpy>
c00310c5:	83 c4 10             	add    $0x10,%esp
c00310c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00310cb:	0f b6 00             	movzbl (%eax),%eax
c00310ce:	3c 2f                	cmp    $0x2f,%al
c00310d0:	75 0a                	jne    c00310dc <dir_open_path+0x7c>
c00310d2:	e8 68 ff ff ff       	call   c003103f <dir_open_root>
c00310d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00310da:	eb 37                	jmp    c0031113 <dir_open_path+0xb3>
c00310dc:	e8 08 fe fe ff       	call   c0020ee9 <thread_current>
c00310e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00310e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00310e7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
c00310ed:	85 c0                	test   %eax,%eax
c00310ef:	75 0a                	jne    c00310fb <dir_open_path+0x9b>
c00310f1:	e8 49 ff ff ff       	call   c003103f <dir_open_root>
c00310f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00310f9:	eb 18                	jmp    c0031113 <dir_open_path+0xb3>
c00310fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00310fe:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
c0031104:	83 ec 0c             	sub    $0xc,%esp
c0031107:	50                   	push   %eax
c0031108:	e8 02 01 00 00       	call   c003120f <dir_reopen>
c003110d:	83 c4 10             	add    $0x10,%esp
c0031110:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031113:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0031116:	83 ec 04             	sub    $0x4,%esp
c0031119:	8d 55 d8             	lea    -0x28(%ebp),%edx
c003111c:	52                   	push   %edx
c003111d:	68 21 79 03 c0       	push   $0xc0037921
c0031122:	50                   	push   %eax
c0031123:	e8 1b 86 ff ff       	call   c0029743 <strtok_r>
c0031128:	83 c4 10             	add    $0x10,%esp
c003112b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c003112e:	e9 95 00 00 00       	jmp    c00311c8 <dir_open_path+0x168>
c0031133:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c003113a:	83 ec 04             	sub    $0x4,%esp
c003113d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0031140:	50                   	push   %eax
c0031141:	ff 75 f0             	pushl  -0x10(%ebp)
c0031144:	ff 75 f4             	pushl  -0xc(%ebp)
c0031147:	e8 01 02 00 00       	call   c003134d <dir_lookup>
c003114c:	83 c4 10             	add    $0x10,%esp
c003114f:	83 f0 01             	xor    $0x1,%eax
c0031152:	84 c0                	test   %al,%al
c0031154:	74 18                	je     c003116e <dir_open_path+0x10e>
c0031156:	83 ec 0c             	sub    $0xc,%esp
c0031159:	ff 75 f4             	pushl  -0xc(%ebp)
c003115c:	e8 d3 00 00 00       	call   c0031234 <dir_close>
c0031161:	83 c4 10             	add    $0x10,%esp
c0031164:	b8 00 00 00 00       	mov    $0x0,%eax
c0031169:	e9 9a 00 00 00       	jmp    c0031208 <dir_open_path+0x1a8>
c003116e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031171:	83 ec 0c             	sub    $0xc,%esp
c0031174:	50                   	push   %eax
c0031175:	e8 67 fe ff ff       	call   c0030fe1 <dir_open>
c003117a:	83 c4 10             	add    $0x10,%esp
c003117d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0031180:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0031184:	75 15                	jne    c003119b <dir_open_path+0x13b>
c0031186:	83 ec 0c             	sub    $0xc,%esp
c0031189:	ff 75 f4             	pushl  -0xc(%ebp)
c003118c:	e8 a3 00 00 00       	call   c0031234 <dir_close>
c0031191:	83 c4 10             	add    $0x10,%esp
c0031194:	b8 00 00 00 00       	mov    $0x0,%eax
c0031199:	eb 6d                	jmp    c0031208 <dir_open_path+0x1a8>
c003119b:	83 ec 0c             	sub    $0xc,%esp
c003119e:	ff 75 f4             	pushl  -0xc(%ebp)
c00311a1:	e8 8e 00 00 00       	call   c0031234 <dir_close>
c00311a6:	83 c4 10             	add    $0x10,%esp
c00311a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00311ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00311af:	83 ec 04             	sub    $0x4,%esp
c00311b2:	8d 45 d8             	lea    -0x28(%ebp),%eax
c00311b5:	50                   	push   %eax
c00311b6:	68 21 79 03 c0       	push   $0xc0037921
c00311bb:	6a 00                	push   $0x0
c00311bd:	e8 81 85 ff ff       	call   c0029743 <strtok_r>
c00311c2:	83 c4 10             	add    $0x10,%esp
c00311c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00311c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00311cc:	0f 85 61 ff ff ff    	jne    c0031133 <dir_open_path+0xd3>
c00311d2:	83 ec 0c             	sub    $0xc,%esp
c00311d5:	ff 75 f4             	pushl  -0xc(%ebp)
c00311d8:	e8 85 00 00 00       	call   c0031262 <dir_get_inode>
c00311dd:	83 c4 10             	add    $0x10,%esp
c00311e0:	83 ec 0c             	sub    $0xc,%esp
c00311e3:	50                   	push   %eax
c00311e4:	e8 2c 13 00 00       	call   c0032515 <inode_is_removed>
c00311e9:	83 c4 10             	add    $0x10,%esp
c00311ec:	84 c0                	test   %al,%al
c00311ee:	74 15                	je     c0031205 <dir_open_path+0x1a5>
c00311f0:	83 ec 0c             	sub    $0xc,%esp
c00311f3:	ff 75 f4             	pushl  -0xc(%ebp)
c00311f6:	e8 39 00 00 00       	call   c0031234 <dir_close>
c00311fb:	83 c4 10             	add    $0x10,%esp
c00311fe:	b8 00 00 00 00       	mov    $0x0,%eax
c0031203:	eb 03                	jmp    c0031208 <dir_open_path+0x1a8>
c0031205:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031208:	89 dc                	mov    %ebx,%esp
c003120a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c003120d:	c9                   	leave  
c003120e:	c3                   	ret    

c003120f <dir_reopen>:
c003120f:	55                   	push   %ebp
c0031210:	89 e5                	mov    %esp,%ebp
c0031212:	83 ec 08             	sub    $0x8,%esp
c0031215:	8b 45 08             	mov    0x8(%ebp),%eax
c0031218:	8b 00                	mov    (%eax),%eax
c003121a:	83 ec 0c             	sub    $0xc,%esp
c003121d:	50                   	push   %eax
c003121e:	e8 1d 0c 00 00       	call   c0031e40 <inode_reopen>
c0031223:	83 c4 10             	add    $0x10,%esp
c0031226:	83 ec 0c             	sub    $0xc,%esp
c0031229:	50                   	push   %eax
c003122a:	e8 b2 fd ff ff       	call   c0030fe1 <dir_open>
c003122f:	83 c4 10             	add    $0x10,%esp
c0031232:	c9                   	leave  
c0031233:	c3                   	ret    

c0031234 <dir_close>:
c0031234:	55                   	push   %ebp
c0031235:	89 e5                	mov    %esp,%ebp
c0031237:	83 ec 08             	sub    $0x8,%esp
c003123a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c003123e:	74 1f                	je     c003125f <dir_close+0x2b>
c0031240:	8b 45 08             	mov    0x8(%ebp),%eax
c0031243:	8b 00                	mov    (%eax),%eax
c0031245:	83 ec 0c             	sub    $0xc,%esp
c0031248:	50                   	push   %eax
c0031249:	e8 f7 0d 00 00       	call   c0032045 <inode_close>
c003124e:	83 c4 10             	add    $0x10,%esp
c0031251:	83 ec 0c             	sub    $0xc,%esp
c0031254:	ff 75 08             	pushl  0x8(%ebp)
c0031257:	e8 f4 31 ff ff       	call   c0024450 <free>
c003125c:	83 c4 10             	add    $0x10,%esp
c003125f:	90                   	nop
c0031260:	c9                   	leave  
c0031261:	c3                   	ret    

c0031262 <dir_get_inode>:
c0031262:	55                   	push   %ebp
c0031263:	89 e5                	mov    %esp,%ebp
c0031265:	8b 45 08             	mov    0x8(%ebp),%eax
c0031268:	8b 00                	mov    (%eax),%eax
c003126a:	5d                   	pop    %ebp
c003126b:	c3                   	ret    

c003126c <lookup>:
c003126c:	55                   	push   %ebp
c003126d:	89 e5                	mov    %esp,%ebp
c003126f:	83 ec 28             	sub    $0x28,%esp
c0031272:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0031276:	75 21                	jne    c0031299 <lookup+0x2d>
c0031278:	83 ec 0c             	sub    $0xc,%esp
c003127b:	68 23 79 03 c0       	push   $0xc0037923
c0031280:	68 2f 79 03 c0       	push   $0xc003792f
c0031285:	68 80 79 03 c0       	push   $0xc0037980
c003128a:	68 bc 00 00 00       	push   $0xbc
c003128f:	68 46 79 03 c0       	push   $0xc0037946
c0031294:	e8 f8 92 ff ff       	call   c002a591 <debug_panic>
c0031299:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c003129d:	75 21                	jne    c00312c0 <lookup+0x54>
c003129f:	83 ec 0c             	sub    $0xc,%esp
c00312a2:	68 60 79 03 c0       	push   $0xc0037960
c00312a7:	68 2f 79 03 c0       	push   $0xc003792f
c00312ac:	68 80 79 03 c0       	push   $0xc0037980
c00312b1:	68 bd 00 00 00       	push   $0xbd
c00312b6:	68 46 79 03 c0       	push   $0xc0037946
c00312bb:	e8 d1 92 ff ff       	call   c002a591 <debug_panic>
c00312c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00312c7:	eb 60                	jmp    c0031329 <lookup+0xbd>
c00312c9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c00312cd:	84 c0                	test   %al,%al
c00312cf:	74 54                	je     c0031325 <lookup+0xb9>
c00312d1:	83 ec 08             	sub    $0x8,%esp
c00312d4:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00312d7:	83 c0 04             	add    $0x4,%eax
c00312da:	50                   	push   %eax
c00312db:	ff 75 0c             	pushl  0xc(%ebp)
c00312de:	e8 76 81 ff ff       	call   c0029459 <strcmp>
c00312e3:	83 c4 10             	add    $0x10,%esp
c00312e6:	85 c0                	test   %eax,%eax
c00312e8:	75 3b                	jne    c0031325 <lookup+0xb9>
c00312ea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00312ee:	74 20                	je     c0031310 <lookup+0xa4>
c00312f0:	8b 45 10             	mov    0x10(%ebp),%eax
c00312f3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00312f6:	89 10                	mov    %edx,(%eax)
c00312f8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00312fb:	89 50 04             	mov    %edx,0x4(%eax)
c00312fe:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0031301:	89 50 08             	mov    %edx,0x8(%eax)
c0031304:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0031307:	89 50 0c             	mov    %edx,0xc(%eax)
c003130a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c003130d:	89 50 10             	mov    %edx,0x10(%eax)
c0031310:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0031314:	74 08                	je     c003131e <lookup+0xb2>
c0031316:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0031319:	8b 45 14             	mov    0x14(%ebp),%eax
c003131c:	89 10                	mov    %edx,(%eax)
c003131e:	b8 01 00 00 00       	mov    $0x1,%eax
c0031323:	eb 26                	jmp    c003134b <lookup+0xdf>
c0031325:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
c0031329:	8b 55 f4             	mov    -0xc(%ebp),%edx
c003132c:	8b 45 08             	mov    0x8(%ebp),%eax
c003132f:	8b 00                	mov    (%eax),%eax
c0031331:	52                   	push   %edx
c0031332:	6a 14                	push   $0x14
c0031334:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0031337:	52                   	push   %edx
c0031338:	50                   	push   %eax
c0031339:	e8 b2 0d 00 00       	call   c00320f0 <inode_read_at>
c003133e:	83 c4 10             	add    $0x10,%esp
c0031341:	83 f8 14             	cmp    $0x14,%eax
c0031344:	74 83                	je     c00312c9 <lookup+0x5d>
c0031346:	b8 00 00 00 00       	mov    $0x0,%eax
c003134b:	c9                   	leave  
c003134c:	c3                   	ret    

c003134d <dir_lookup>:
c003134d:	55                   	push   %ebp
c003134e:	89 e5                	mov    %esp,%ebp
c0031350:	83 ec 28             	sub    $0x28,%esp
c0031353:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0031357:	75 21                	jne    c003137a <dir_lookup+0x2d>
c0031359:	83 ec 0c             	sub    $0xc,%esp
c003135c:	68 23 79 03 c0       	push   $0xc0037923
c0031361:	68 2f 79 03 c0       	push   $0xc003792f
c0031366:	68 88 79 03 c0       	push   $0xc0037988
c003136b:	68 d9 00 00 00       	push   $0xd9
c0031370:	68 46 79 03 c0       	push   $0xc0037946
c0031375:	e8 17 92 ff ff       	call   c002a591 <debug_panic>
c003137a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c003137e:	75 21                	jne    c00313a1 <dir_lookup+0x54>
c0031380:	83 ec 0c             	sub    $0xc,%esp
c0031383:	68 60 79 03 c0       	push   $0xc0037960
c0031388:	68 2f 79 03 c0       	push   $0xc003792f
c003138d:	68 88 79 03 c0       	push   $0xc0037988
c0031392:	68 da 00 00 00       	push   $0xda
c0031397:	68 46 79 03 c0       	push   $0xc0037946
c003139c:	e8 f0 91 ff ff       	call   c002a591 <debug_panic>
c00313a1:	83 ec 08             	sub    $0x8,%esp
c00313a4:	68 6d 79 03 c0       	push   $0xc003796d
c00313a9:	ff 75 0c             	pushl  0xc(%ebp)
c00313ac:	e8 a8 80 ff ff       	call   c0029459 <strcmp>
c00313b1:	83 c4 10             	add    $0x10,%esp
c00313b4:	85 c0                	test   %eax,%eax
c00313b6:	75 1a                	jne    c00313d2 <dir_lookup+0x85>
c00313b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00313bb:	8b 00                	mov    (%eax),%eax
c00313bd:	83 ec 0c             	sub    $0xc,%esp
c00313c0:	50                   	push   %eax
c00313c1:	e8 96 09 00 00       	call   c0031d5c <inode_open>
c00313c6:	83 c4 10             	add    $0x10,%esp
c00313c9:	89 c2                	mov    %eax,%edx
c00313cb:	8b 45 10             	mov    0x10(%ebp),%eax
c00313ce:	89 10                	mov    %edx,(%eax)
c00313d0:	eb 7e                	jmp    c0031450 <dir_lookup+0x103>
c00313d2:	83 ec 08             	sub    $0x8,%esp
c00313d5:	68 6f 79 03 c0       	push   $0xc003796f
c00313da:	ff 75 0c             	pushl  0xc(%ebp)
c00313dd:	e8 77 80 ff ff       	call   c0029459 <strcmp>
c00313e2:	83 c4 10             	add    $0x10,%esp
c00313e5:	85 c0                	test   %eax,%eax
c00313e7:	75 2e                	jne    c0031417 <dir_lookup+0xca>
c00313e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00313ec:	8b 00                	mov    (%eax),%eax
c00313ee:	6a 00                	push   $0x0
c00313f0:	6a 14                	push   $0x14
c00313f2:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c00313f5:	52                   	push   %edx
c00313f6:	50                   	push   %eax
c00313f7:	e8 f4 0c 00 00       	call   c00320f0 <inode_read_at>
c00313fc:	83 c4 10             	add    $0x10,%esp
c00313ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0031402:	83 ec 0c             	sub    $0xc,%esp
c0031405:	50                   	push   %eax
c0031406:	e8 51 09 00 00       	call   c0031d5c <inode_open>
c003140b:	83 c4 10             	add    $0x10,%esp
c003140e:	89 c2                	mov    %eax,%edx
c0031410:	8b 45 10             	mov    0x10(%ebp),%eax
c0031413:	89 10                	mov    %edx,(%eax)
c0031415:	eb 39                	jmp    c0031450 <dir_lookup+0x103>
c0031417:	6a 00                	push   $0x0
c0031419:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c003141c:	50                   	push   %eax
c003141d:	ff 75 0c             	pushl  0xc(%ebp)
c0031420:	ff 75 08             	pushl  0x8(%ebp)
c0031423:	e8 44 fe ff ff       	call   c003126c <lookup>
c0031428:	83 c4 10             	add    $0x10,%esp
c003142b:	84 c0                	test   %al,%al
c003142d:	74 18                	je     c0031447 <dir_lookup+0xfa>
c003142f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0031432:	83 ec 0c             	sub    $0xc,%esp
c0031435:	50                   	push   %eax
c0031436:	e8 21 09 00 00       	call   c0031d5c <inode_open>
c003143b:	83 c4 10             	add    $0x10,%esp
c003143e:	89 c2                	mov    %eax,%edx
c0031440:	8b 45 10             	mov    0x10(%ebp),%eax
c0031443:	89 10                	mov    %edx,(%eax)
c0031445:	eb 09                	jmp    c0031450 <dir_lookup+0x103>
c0031447:	8b 45 10             	mov    0x10(%ebp),%eax
c003144a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0031450:	8b 45 10             	mov    0x10(%ebp),%eax
c0031453:	8b 00                	mov    (%eax),%eax
c0031455:	85 c0                	test   %eax,%eax
c0031457:	0f 95 c0             	setne  %al
c003145a:	c9                   	leave  
c003145b:	c3                   	ret    

c003145c <dir_add>:
c003145c:	55                   	push   %ebp
c003145d:	89 e5                	mov    %esp,%ebp
c003145f:	83 ec 38             	sub    $0x38,%esp
c0031462:	8b 45 14             	mov    0x14(%ebp),%eax
c0031465:	88 45 d4             	mov    %al,-0x2c(%ebp)
c0031468:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
c003146c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0031470:	75 21                	jne    c0031493 <dir_add+0x37>
c0031472:	83 ec 0c             	sub    $0xc,%esp
c0031475:	68 23 79 03 c0       	push   $0xc0037923
c003147a:	68 2f 79 03 c0       	push   $0xc003792f
c003147f:	68 94 79 03 c0       	push   $0xc0037994
c0031484:	68 f8 00 00 00       	push   $0xf8
c0031489:	68 46 79 03 c0       	push   $0xc0037946
c003148e:	e8 fe 90 ff ff       	call   c002a591 <debug_panic>
c0031493:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0031497:	75 21                	jne    c00314ba <dir_add+0x5e>
c0031499:	83 ec 0c             	sub    $0xc,%esp
c003149c:	68 60 79 03 c0       	push   $0xc0037960
c00314a1:	68 2f 79 03 c0       	push   $0xc003792f
c00314a6:	68 94 79 03 c0       	push   $0xc0037994
c00314ab:	68 f9 00 00 00       	push   $0xf9
c00314b0:	68 46 79 03 c0       	push   $0xc0037946
c00314b5:	e8 d7 90 ff ff       	call   c002a591 <debug_panic>
c00314ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c00314bd:	0f b6 00             	movzbl (%eax),%eax
c00314c0:	84 c0                	test   %al,%al
c00314c2:	74 13                	je     c00314d7 <dir_add+0x7b>
c00314c4:	83 ec 0c             	sub    $0xc,%esp
c00314c7:	ff 75 0c             	pushl  0xc(%ebp)
c00314ca:	e8 e1 83 ff ff       	call   c00298b0 <strlen>
c00314cf:	83 c4 10             	add    $0x10,%esp
c00314d2:	83 f8 0e             	cmp    $0xe,%eax
c00314d5:	76 0a                	jbe    c00314e1 <dir_add+0x85>
c00314d7:	b8 00 00 00 00       	mov    $0x0,%eax
c00314dc:	e9 2b 01 00 00       	jmp    c003160c <dir_add+0x1b0>
c00314e1:	6a 00                	push   $0x0
c00314e3:	6a 00                	push   $0x0
c00314e5:	ff 75 0c             	pushl  0xc(%ebp)
c00314e8:	ff 75 08             	pushl  0x8(%ebp)
c00314eb:	e8 7c fd ff ff       	call   c003126c <lookup>
c00314f0:	83 c4 10             	add    $0x10,%esp
c00314f3:	84 c0                	test   %al,%al
c00314f5:	0f 85 09 01 00 00    	jne    c0031604 <dir_add+0x1a8>
c00314fb:	80 7d d4 00          	cmpb   $0x0,-0x2c(%ebp)
c00314ff:	0f 84 80 00 00 00    	je     c0031585 <dir_add+0x129>
c0031505:	83 ec 0c             	sub    $0xc,%esp
c0031508:	ff 75 10             	pushl  0x10(%ebp)
c003150b:	e8 4c 08 00 00       	call   c0031d5c <inode_open>
c0031510:	83 c4 10             	add    $0x10,%esp
c0031513:	83 ec 0c             	sub    $0xc,%esp
c0031516:	50                   	push   %eax
c0031517:	e8 c5 fa ff ff       	call   c0030fe1 <dir_open>
c003151c:	83 c4 10             	add    $0x10,%esp
c003151f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031522:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0031526:	0f 84 db 00 00 00    	je     c0031607 <dir_add+0x1ab>
c003152c:	83 ec 0c             	sub    $0xc,%esp
c003152f:	ff 75 08             	pushl  0x8(%ebp)
c0031532:	e8 2b fd ff ff       	call   c0031262 <dir_get_inode>
c0031537:	83 c4 10             	add    $0x10,%esp
c003153a:	83 ec 0c             	sub    $0xc,%esp
c003153d:	50                   	push   %eax
c003153e:	e8 1a 09 00 00       	call   c0031e5d <inode_get_inumber>
c0031543:	83 c4 10             	add    $0x10,%esp
c0031546:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0031549:	8b 45 ec             	mov    -0x14(%ebp),%eax
c003154c:	8b 00                	mov    (%eax),%eax
c003154e:	6a 00                	push   $0x0
c0031550:	6a 14                	push   $0x14
c0031552:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0031555:	52                   	push   %edx
c0031556:	50                   	push   %eax
c0031557:	e8 cf 0c 00 00       	call   c003222b <inode_write_at>
c003155c:	83 c4 10             	add    $0x10,%esp
c003155f:	83 f8 14             	cmp    $0x14,%eax
c0031562:	74 13                	je     c0031577 <dir_add+0x11b>
c0031564:	83 ec 0c             	sub    $0xc,%esp
c0031567:	ff 75 ec             	pushl  -0x14(%ebp)
c003156a:	e8 c5 fc ff ff       	call   c0031234 <dir_close>
c003156f:	83 c4 10             	add    $0x10,%esp
c0031572:	e9 91 00 00 00       	jmp    c0031608 <dir_add+0x1ac>
c0031577:	83 ec 0c             	sub    $0xc,%esp
c003157a:	ff 75 ec             	pushl  -0x14(%ebp)
c003157d:	e8 b2 fc ff ff       	call   c0031234 <dir_close>
c0031582:	83 c4 10             	add    $0x10,%esp
c0031585:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c003158c:	eb 14                	jmp    c00315a2 <dir_add+0x146>
c003158e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0031592:	83 f0 01             	xor    $0x1,%eax
c0031595:	84 c0                	test   %al,%al
c0031597:	75 27                	jne    c00315c0 <dir_add+0x164>
c0031599:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003159c:	83 c0 14             	add    $0x14,%eax
c003159f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00315a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00315a5:	8b 00                	mov    (%eax),%eax
c00315a7:	ff 75 f4             	pushl  -0xc(%ebp)
c00315aa:	6a 14                	push   $0x14
c00315ac:	8d 55 d8             	lea    -0x28(%ebp),%edx
c00315af:	52                   	push   %edx
c00315b0:	50                   	push   %eax
c00315b1:	e8 3a 0b 00 00       	call   c00320f0 <inode_read_at>
c00315b6:	83 c4 10             	add    $0x10,%esp
c00315b9:	83 f8 14             	cmp    $0x14,%eax
c00315bc:	74 d0                	je     c003158e <dir_add+0x132>
c00315be:	eb 01                	jmp    c00315c1 <dir_add+0x165>
c00315c0:	90                   	nop
c00315c1:	c6 45 eb 01          	movb   $0x1,-0x15(%ebp)
c00315c5:	83 ec 04             	sub    $0x4,%esp
c00315c8:	6a 0f                	push   $0xf
c00315ca:	ff 75 0c             	pushl  0xc(%ebp)
c00315cd:	8d 45 d8             	lea    -0x28(%ebp),%eax
c00315d0:	83 c0 04             	add    $0x4,%eax
c00315d3:	50                   	push   %eax
c00315d4:	e8 55 83 ff ff       	call   c002992e <strlcpy>
c00315d9:	83 c4 10             	add    $0x10,%esp
c00315dc:	8b 45 10             	mov    0x10(%ebp),%eax
c00315df:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00315e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00315e5:	8b 00                	mov    (%eax),%eax
c00315e7:	ff 75 f4             	pushl  -0xc(%ebp)
c00315ea:	6a 14                	push   $0x14
c00315ec:	8d 55 d8             	lea    -0x28(%ebp),%edx
c00315ef:	52                   	push   %edx
c00315f0:	50                   	push   %eax
c00315f1:	e8 35 0c 00 00       	call   c003222b <inode_write_at>
c00315f6:	83 c4 10             	add    $0x10,%esp
c00315f9:	83 f8 14             	cmp    $0x14,%eax
c00315fc:	0f 94 c0             	sete   %al
c00315ff:	88 45 f3             	mov    %al,-0xd(%ebp)
c0031602:	eb 04                	jmp    c0031608 <dir_add+0x1ac>
c0031604:	90                   	nop
c0031605:	eb 01                	jmp    c0031608 <dir_add+0x1ac>
c0031607:	90                   	nop
c0031608:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c003160c:	c9                   	leave  
c003160d:	c3                   	ret    

c003160e <dir_readdir>:
c003160e:	55                   	push   %ebp
c003160f:	89 e5                	mov    %esp,%ebp
c0031611:	83 ec 28             	sub    $0x28,%esp
c0031614:	eb 37                	jmp    c003164d <dir_readdir+0x3f>
c0031616:	8b 45 08             	mov    0x8(%ebp),%eax
c0031619:	8b 40 04             	mov    0x4(%eax),%eax
c003161c:	83 c0 14             	add    $0x14,%eax
c003161f:	89 c2                	mov    %eax,%edx
c0031621:	8b 45 08             	mov    0x8(%ebp),%eax
c0031624:	89 50 04             	mov    %edx,0x4(%eax)
c0031627:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c003162b:	84 c0                	test   %al,%al
c003162d:	74 1e                	je     c003164d <dir_readdir+0x3f>
c003162f:	83 ec 04             	sub    $0x4,%esp
c0031632:	6a 0f                	push   $0xf
c0031634:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0031637:	83 c0 04             	add    $0x4,%eax
c003163a:	50                   	push   %eax
c003163b:	ff 75 0c             	pushl  0xc(%ebp)
c003163e:	e8 eb 82 ff ff       	call   c002992e <strlcpy>
c0031643:	83 c4 10             	add    $0x10,%esp
c0031646:	b8 01 00 00 00       	mov    $0x1,%eax
c003164b:	eb 25                	jmp    c0031672 <dir_readdir+0x64>
c003164d:	8b 45 08             	mov    0x8(%ebp),%eax
c0031650:	8b 50 04             	mov    0x4(%eax),%edx
c0031653:	8b 45 08             	mov    0x8(%ebp),%eax
c0031656:	8b 00                	mov    (%eax),%eax
c0031658:	52                   	push   %edx
c0031659:	6a 14                	push   $0x14
c003165b:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c003165e:	52                   	push   %edx
c003165f:	50                   	push   %eax
c0031660:	e8 8b 0a 00 00       	call   c00320f0 <inode_read_at>
c0031665:	83 c4 10             	add    $0x10,%esp
c0031668:	83 f8 14             	cmp    $0x14,%eax
c003166b:	74 a9                	je     c0031616 <dir_readdir+0x8>
c003166d:	b8 00 00 00 00       	mov    $0x0,%eax
c0031672:	c9                   	leave  
c0031673:	c3                   	ret    

c0031674 <dir_isempty>:
c0031674:	55                   	push   %ebp
c0031675:	89 e5                	mov    %esp,%ebp
c0031677:	83 ec 28             	sub    $0x28,%esp
c003167a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0031681:	eb 18                	jmp    c003169b <dir_isempty+0x27>
c0031683:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0031687:	84 c0                	test   %al,%al
c0031689:	74 07                	je     c0031692 <dir_isempty+0x1e>
c003168b:	b8 00 00 00 00       	mov    $0x0,%eax
c0031690:	eb 2a                	jmp    c00316bc <dir_isempty+0x48>
c0031692:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031695:	83 c0 14             	add    $0x14,%eax
c0031698:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003169b:	8b 45 08             	mov    0x8(%ebp),%eax
c003169e:	8b 00                	mov    (%eax),%eax
c00316a0:	ff 75 f4             	pushl  -0xc(%ebp)
c00316a3:	6a 14                	push   $0x14
c00316a5:	8d 55 e0             	lea    -0x20(%ebp),%edx
c00316a8:	52                   	push   %edx
c00316a9:	50                   	push   %eax
c00316aa:	e8 41 0a 00 00       	call   c00320f0 <inode_read_at>
c00316af:	83 c4 10             	add    $0x10,%esp
c00316b2:	83 f8 14             	cmp    $0x14,%eax
c00316b5:	74 cc                	je     c0031683 <dir_isempty+0xf>
c00316b7:	b8 01 00 00 00       	mov    $0x1,%eax
c00316bc:	c9                   	leave  
c00316bd:	c3                   	ret    

c00316be <dir_remove>:
c00316be:	55                   	push   %ebp
c00316bf:	89 e5                	mov    %esp,%ebp
c00316c1:	83 ec 38             	sub    $0x38,%esp
c00316c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00316cb:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
c00316cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00316d3:	75 21                	jne    c00316f6 <dir_remove+0x38>
c00316d5:	83 ec 0c             	sub    $0xc,%esp
c00316d8:	68 23 79 03 c0       	push   $0xc0037923
c00316dd:	68 2f 79 03 c0       	push   $0xc003792f
c00316e2:	68 9c 79 03 c0       	push   $0xc003799c
c00316e7:	68 54 01 00 00       	push   $0x154
c00316ec:	68 46 79 03 c0       	push   $0xc0037946
c00316f1:	e8 9b 8e ff ff       	call   c002a591 <debug_panic>
c00316f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00316fa:	75 21                	jne    c003171d <dir_remove+0x5f>
c00316fc:	83 ec 0c             	sub    $0xc,%esp
c00316ff:	68 60 79 03 c0       	push   $0xc0037960
c0031704:	68 2f 79 03 c0       	push   $0xc003792f
c0031709:	68 9c 79 03 c0       	push   $0xc003799c
c003170e:	68 55 01 00 00       	push   $0x155
c0031713:	68 46 79 03 c0       	push   $0xc0037946
c0031718:	e8 74 8e ff ff       	call   c002a591 <debug_panic>
c003171d:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0031720:	50                   	push   %eax
c0031721:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0031724:	50                   	push   %eax
c0031725:	ff 75 0c             	pushl  0xc(%ebp)
c0031728:	ff 75 08             	pushl  0x8(%ebp)
c003172b:	e8 3c fb ff ff       	call   c003126c <lookup>
c0031730:	83 c4 10             	add    $0x10,%esp
c0031733:	83 f0 01             	xor    $0x1,%eax
c0031736:	84 c0                	test   %al,%al
c0031738:	0f 85 9e 00 00 00    	jne    c00317dc <dir_remove+0x11e>
c003173e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031741:	83 ec 0c             	sub    $0xc,%esp
c0031744:	50                   	push   %eax
c0031745:	e8 12 06 00 00       	call   c0031d5c <inode_open>
c003174a:	83 c4 10             	add    $0x10,%esp
c003174d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031750:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0031754:	0f 84 85 00 00 00    	je     c00317df <dir_remove+0x121>
c003175a:	83 ec 0c             	sub    $0xc,%esp
c003175d:	ff 75 f4             	pushl  -0xc(%ebp)
c0031760:	e8 96 0d 00 00       	call   c00324fb <inode_dir>
c0031765:	83 c4 10             	add    $0x10,%esp
c0031768:	85 c0                	test   %eax,%eax
c003176a:	74 3b                	je     c00317a7 <dir_remove+0xe9>
c003176c:	83 ec 0c             	sub    $0xc,%esp
c003176f:	ff 75 f4             	pushl  -0xc(%ebp)
c0031772:	e8 6a f8 ff ff       	call   c0030fe1 <dir_open>
c0031777:	83 c4 10             	add    $0x10,%esp
c003177a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003177d:	83 ec 0c             	sub    $0xc,%esp
c0031780:	ff 75 ec             	pushl  -0x14(%ebp)
c0031783:	e8 ec fe ff ff       	call   c0031674 <dir_isempty>
c0031788:	83 c4 10             	add    $0x10,%esp
c003178b:	88 45 eb             	mov    %al,-0x15(%ebp)
c003178e:	83 ec 0c             	sub    $0xc,%esp
c0031791:	ff 75 ec             	pushl  -0x14(%ebp)
c0031794:	e8 9b fa ff ff       	call   c0031234 <dir_close>
c0031799:	83 c4 10             	add    $0x10,%esp
c003179c:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c00317a0:	83 f0 01             	xor    $0x1,%eax
c00317a3:	84 c0                	test   %al,%al
c00317a5:	75 3b                	jne    c00317e2 <dir_remove+0x124>
c00317a7:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c00317ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
c00317ae:	8b 45 08             	mov    0x8(%ebp),%eax
c00317b1:	8b 00                	mov    (%eax),%eax
c00317b3:	52                   	push   %edx
c00317b4:	6a 14                	push   $0x14
c00317b6:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c00317b9:	52                   	push   %edx
c00317ba:	50                   	push   %eax
c00317bb:	e8 6b 0a 00 00       	call   c003222b <inode_write_at>
c00317c0:	83 c4 10             	add    $0x10,%esp
c00317c3:	83 f8 14             	cmp    $0x14,%eax
c00317c6:	75 1d                	jne    c00317e5 <dir_remove+0x127>
c00317c8:	83 ec 0c             	sub    $0xc,%esp
c00317cb:	ff 75 f4             	pushl  -0xc(%ebp)
c00317ce:	e8 e6 08 00 00       	call   c00320b9 <inode_remove>
c00317d3:	83 c4 10             	add    $0x10,%esp
c00317d6:	c6 45 f3 01          	movb   $0x1,-0xd(%ebp)
c00317da:	eb 0a                	jmp    c00317e6 <dir_remove+0x128>
c00317dc:	90                   	nop
c00317dd:	eb 07                	jmp    c00317e6 <dir_remove+0x128>
c00317df:	90                   	nop
c00317e0:	eb 04                	jmp    c00317e6 <dir_remove+0x128>
c00317e2:	90                   	nop
c00317e3:	eb 01                	jmp    c00317e6 <dir_remove+0x128>
c00317e5:	90                   	nop
c00317e6:	83 ec 0c             	sub    $0xc,%esp
c00317e9:	ff 75 f4             	pushl  -0xc(%ebp)
c00317ec:	e8 54 08 00 00       	call   c0032045 <inode_close>
c00317f1:	83 c4 10             	add    $0x10,%esp
c00317f4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c00317f8:	c9                   	leave  
c00317f9:	c3                   	ret    

c00317fa <min>:
c00317fa:	55                   	push   %ebp
c00317fb:	89 e5                	mov    %esp,%ebp
c00317fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0031800:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0031803:	0f 46 45 0c          	cmovbe 0xc(%ebp),%eax
c0031807:	5d                   	pop    %ebp
c0031808:	c3                   	ret    

c0031809 <inode_indirect_allocate>:
c0031809:	55                   	push   %ebp
c003180a:	89 e5                	mov    %esp,%ebp
c003180c:	81 ec 18 02 00 00    	sub    $0x218,%esp
c0031812:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0031816:	75 4a                	jne    c0031862 <inode_indirect_allocate+0x59>
c0031818:	8b 45 08             	mov    0x8(%ebp),%eax
c003181b:	8b 00                	mov    (%eax),%eax
c003181d:	85 c0                	test   %eax,%eax
c003181f:	75 21                	jne    c0031842 <inode_indirect_allocate+0x39>
c0031821:	83 ec 08             	sub    $0x8,%esp
c0031824:	ff 75 08             	pushl  0x8(%ebp)
c0031827:	6a 01                	push   $0x1
c0031829:	e8 67 ec ff ff       	call   c0030495 <free_map_allocate>
c003182e:	83 c4 10             	add    $0x10,%esp
c0031831:	83 f0 01             	xor    $0x1,%eax
c0031834:	84 c0                	test   %al,%al
c0031836:	74 0a                	je     c0031842 <inode_indirect_allocate+0x39>
c0031838:	b8 00 00 00 00       	mov    $0x0,%eax
c003183d:	e9 34 01 00 00       	jmp    c0031976 <inode_indirect_allocate+0x16d>
c0031842:	8b 45 08             	mov    0x8(%ebp),%eax
c0031845:	8b 00                	mov    (%eax),%eax
c0031847:	83 ec 08             	sub    $0x8,%esp
c003184a:	68 c0 84 04 c0       	push   $0xc00484c0
c003184f:	50                   	push   %eax
c0031850:	e8 05 f5 ff ff       	call   c0030d5a <buffer_cache_write>
c0031855:	83 c4 10             	add    $0x10,%esp
c0031858:	b8 01 00 00 00       	mov    $0x1,%eax
c003185d:	e9 14 01 00 00       	jmp    c0031976 <inode_indirect_allocate+0x16d>
c0031862:	8b 45 08             	mov    0x8(%ebp),%eax
c0031865:	8b 00                	mov    (%eax),%eax
c0031867:	85 c0                	test   %eax,%eax
c0031869:	75 26                	jne    c0031891 <inode_indirect_allocate+0x88>
c003186b:	83 ec 08             	sub    $0x8,%esp
c003186e:	ff 75 08             	pushl  0x8(%ebp)
c0031871:	6a 01                	push   $0x1
c0031873:	e8 1d ec ff ff       	call   c0030495 <free_map_allocate>
c0031878:	83 c4 10             	add    $0x10,%esp
c003187b:	8b 45 08             	mov    0x8(%ebp),%eax
c003187e:	8b 00                	mov    (%eax),%eax
c0031880:	83 ec 08             	sub    $0x8,%esp
c0031883:	68 c0 84 04 c0       	push   $0xc00484c0
c0031888:	50                   	push   %eax
c0031889:	e8 cc f4 ff ff       	call   c0030d5a <buffer_cache_write>
c003188e:	83 c4 10             	add    $0x10,%esp
c0031891:	8b 45 08             	mov    0x8(%ebp),%eax
c0031894:	8b 00                	mov    (%eax),%eax
c0031896:	83 ec 08             	sub    $0x8,%esp
c0031899:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
c003189f:	52                   	push   %edx
c00318a0:	50                   	push   %eax
c00318a1:	e8 1a f4 ff ff       	call   c0030cc0 <buffer_cache_read>
c00318a6:	83 c4 10             	add    $0x10,%esp
c00318a9:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c00318ad:	75 07                	jne    c00318b6 <inode_indirect_allocate+0xad>
c00318af:	b8 01 00 00 00       	mov    $0x1,%eax
c00318b4:	eb 05                	jmp    c00318bb <inode_indirect_allocate+0xb2>
c00318b6:	b8 80 00 00 00       	mov    $0x80,%eax
c00318bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00318be:	8b 55 0c             	mov    0xc(%ebp),%edx
c00318c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00318c4:	01 d0                	add    %edx,%eax
c00318c6:	83 e8 01             	sub    $0x1,%eax
c00318c9:	ba 00 00 00 00       	mov    $0x0,%edx
c00318ce:	f7 75 f0             	divl   -0x10(%ebp)
c00318d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00318d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00318db:	eb 50                	jmp    c003192d <inode_indirect_allocate+0x124>
c00318dd:	83 ec 08             	sub    $0x8,%esp
c00318e0:	ff 75 f0             	pushl  -0x10(%ebp)
c00318e3:	ff 75 0c             	pushl  0xc(%ebp)
c00318e6:	e8 0f ff ff ff       	call   c00317fa <min>
c00318eb:	83 c4 10             	add    $0x10,%esp
c00318ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00318f1:	8b 45 10             	mov    0x10(%ebp),%eax
c00318f4:	8d 50 ff             	lea    -0x1(%eax),%edx
c00318f7:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00318fd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0031900:	c1 e1 02             	shl    $0x2,%ecx
c0031903:	01 c8                	add    %ecx,%eax
c0031905:	83 ec 04             	sub    $0x4,%esp
c0031908:	52                   	push   %edx
c0031909:	ff 75 e8             	pushl  -0x18(%ebp)
c003190c:	50                   	push   %eax
c003190d:	e8 f7 fe ff ff       	call   c0031809 <inode_indirect_allocate>
c0031912:	83 c4 10             	add    $0x10,%esp
c0031915:	83 f0 01             	xor    $0x1,%eax
c0031918:	84 c0                	test   %al,%al
c003191a:	74 07                	je     c0031923 <inode_indirect_allocate+0x11a>
c003191c:	b8 00 00 00 00       	mov    $0x0,%eax
c0031921:	eb 53                	jmp    c0031976 <inode_indirect_allocate+0x16d>
c0031923:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0031926:	29 45 0c             	sub    %eax,0xc(%ebp)
c0031929:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c003192d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031930:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0031933:	72 a8                	jb     c00318dd <inode_indirect_allocate+0xd4>
c0031935:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0031939:	74 1e                	je     c0031959 <inode_indirect_allocate+0x150>
c003193b:	83 ec 0c             	sub    $0xc,%esp
c003193e:	68 a8 79 03 c0       	push   $0xc00379a8
c0031943:	68 b9 79 03 c0       	push   $0xc00379b9
c0031948:	68 44 7a 03 c0       	push   $0xc0037a44
c003194d:	6a 3d                	push   $0x3d
c003194f:	68 d0 79 03 c0       	push   $0xc00379d0
c0031954:	e8 38 8c ff ff       	call   c002a591 <debug_panic>
c0031959:	8b 45 08             	mov    0x8(%ebp),%eax
c003195c:	8b 00                	mov    (%eax),%eax
c003195e:	83 ec 08             	sub    $0x8,%esp
c0031961:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
c0031967:	52                   	push   %edx
c0031968:	50                   	push   %eax
c0031969:	e8 ec f3 ff ff       	call   c0030d5a <buffer_cache_write>
c003196e:	83 c4 10             	add    $0x10,%esp
c0031971:	b8 01 00 00 00       	mov    $0x1,%eax
c0031976:	c9                   	leave  
c0031977:	c3                   	ret    

c0031978 <bytes_to_sectors>:
c0031978:	55                   	push   %ebp
c0031979:	89 e5                	mov    %esp,%ebp
c003197b:	8b 45 08             	mov    0x8(%ebp),%eax
c003197e:	05 ff 01 00 00       	add    $0x1ff,%eax
c0031983:	8d 90 ff 01 00 00    	lea    0x1ff(%eax),%edx
c0031989:	85 c0                	test   %eax,%eax
c003198b:	0f 48 c2             	cmovs  %edx,%eax
c003198e:	c1 f8 09             	sar    $0x9,%eax
c0031991:	5d                   	pop    %ebp
c0031992:	c3                   	ret    

c0031993 <inode_allocate>:
c0031993:	55                   	push   %ebp
c0031994:	89 e5                	mov    %esp,%ebp
c0031996:	83 ec 18             	sub    $0x18,%esp
c0031999:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c003199d:	79 0a                	jns    c00319a9 <inode_allocate+0x16>
c003199f:	b8 00 00 00 00       	mov    $0x0,%eax
c00319a4:	e9 6a 01 00 00       	jmp    c0031b13 <inode_allocate+0x180>
c00319a9:	ff 75 0c             	pushl  0xc(%ebp)
c00319ac:	e8 c7 ff ff ff       	call   c0031978 <bytes_to_sectors>
c00319b1:	83 c4 04             	add    $0x4,%esp
c00319b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00319b7:	6a 7b                	push   $0x7b
c00319b9:	ff 75 f0             	pushl  -0x10(%ebp)
c00319bc:	e8 39 fe ff ff       	call   c00317fa <min>
c00319c1:	83 c4 08             	add    $0x8,%esp
c00319c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00319c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00319ce:	eb 59                	jmp    c0031a29 <inode_allocate+0x96>
c00319d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00319d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00319d6:	8b 04 90             	mov    (%eax,%edx,4),%eax
c00319d9:	85 c0                	test   %eax,%eax
c00319db:	75 48                	jne    c0031a25 <inode_allocate+0x92>
c00319dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00319e0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00319e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00319ea:	01 d0                	add    %edx,%eax
c00319ec:	83 ec 08             	sub    $0x8,%esp
c00319ef:	50                   	push   %eax
c00319f0:	6a 01                	push   $0x1
c00319f2:	e8 9e ea ff ff       	call   c0030495 <free_map_allocate>
c00319f7:	83 c4 10             	add    $0x10,%esp
c00319fa:	83 f0 01             	xor    $0x1,%eax
c00319fd:	84 c0                	test   %al,%al
c00319ff:	74 0a                	je     c0031a0b <inode_allocate+0x78>
c0031a01:	b8 00 00 00 00       	mov    $0x0,%eax
c0031a06:	e9 08 01 00 00       	jmp    c0031b13 <inode_allocate+0x180>
c0031a0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0031a0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0031a11:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0031a14:	83 ec 08             	sub    $0x8,%esp
c0031a17:	68 c0 84 04 c0       	push   $0xc00484c0
c0031a1c:	50                   	push   %eax
c0031a1d:	e8 38 f3 ff ff       	call   c0030d5a <buffer_cache_write>
c0031a22:	83 c4 10             	add    $0x10,%esp
c0031a25:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0031a29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031a2c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0031a2f:	72 9f                	jb     c00319d0 <inode_allocate+0x3d>
c0031a31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0031a34:	29 45 f0             	sub    %eax,-0x10(%ebp)
c0031a37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031a3b:	75 0a                	jne    c0031a47 <inode_allocate+0xb4>
c0031a3d:	b8 01 00 00 00       	mov    $0x1,%eax
c0031a42:	e9 cc 00 00 00       	jmp    c0031b13 <inode_allocate+0x180>
c0031a47:	83 ec 08             	sub    $0x8,%esp
c0031a4a:	68 80 00 00 00       	push   $0x80
c0031a4f:	ff 75 f0             	pushl  -0x10(%ebp)
c0031a52:	e8 a3 fd ff ff       	call   c00317fa <min>
c0031a57:	83 c4 10             	add    $0x10,%esp
c0031a5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0031a60:	05 ec 01 00 00       	add    $0x1ec,%eax
c0031a65:	83 ec 04             	sub    $0x4,%esp
c0031a68:	6a 01                	push   $0x1
c0031a6a:	ff 75 ec             	pushl  -0x14(%ebp)
c0031a6d:	50                   	push   %eax
c0031a6e:	e8 96 fd ff ff       	call   c0031809 <inode_indirect_allocate>
c0031a73:	83 c4 10             	add    $0x10,%esp
c0031a76:	83 f0 01             	xor    $0x1,%eax
c0031a79:	84 c0                	test   %al,%al
c0031a7b:	74 0a                	je     c0031a87 <inode_allocate+0xf4>
c0031a7d:	b8 00 00 00 00       	mov    $0x0,%eax
c0031a82:	e9 8c 00 00 00       	jmp    c0031b13 <inode_allocate+0x180>
c0031a87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0031a8a:	29 45 f0             	sub    %eax,-0x10(%ebp)
c0031a8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031a91:	75 07                	jne    c0031a9a <inode_allocate+0x107>
c0031a93:	b8 01 00 00 00       	mov    $0x1,%eax
c0031a98:	eb 79                	jmp    c0031b13 <inode_allocate+0x180>
c0031a9a:	83 ec 08             	sub    $0x8,%esp
c0031a9d:	68 00 40 00 00       	push   $0x4000
c0031aa2:	ff 75 f0             	pushl  -0x10(%ebp)
c0031aa5:	e8 50 fd ff ff       	call   c00317fa <min>
c0031aaa:	83 c4 10             	add    $0x10,%esp
c0031aad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031ab0:	8b 45 08             	mov    0x8(%ebp),%eax
c0031ab3:	05 f0 01 00 00       	add    $0x1f0,%eax
c0031ab8:	83 ec 04             	sub    $0x4,%esp
c0031abb:	6a 02                	push   $0x2
c0031abd:	ff 75 ec             	pushl  -0x14(%ebp)
c0031ac0:	50                   	push   %eax
c0031ac1:	e8 43 fd ff ff       	call   c0031809 <inode_indirect_allocate>
c0031ac6:	83 c4 10             	add    $0x10,%esp
c0031ac9:	83 f0 01             	xor    $0x1,%eax
c0031acc:	84 c0                	test   %al,%al
c0031ace:	74 07                	je     c0031ad7 <inode_allocate+0x144>
c0031ad0:	b8 00 00 00 00       	mov    $0x0,%eax
c0031ad5:	eb 3c                	jmp    c0031b13 <inode_allocate+0x180>
c0031ad7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0031ada:	29 45 f0             	sub    %eax,-0x10(%ebp)
c0031add:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031ae1:	75 07                	jne    c0031aea <inode_allocate+0x157>
c0031ae3:	b8 01 00 00 00       	mov    $0x1,%eax
c0031ae8:	eb 29                	jmp    c0031b13 <inode_allocate+0x180>
c0031aea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031aee:	74 1e                	je     c0031b0e <inode_allocate+0x17b>
c0031af0:	83 ec 0c             	sub    $0xc,%esp
c0031af3:	68 a8 79 03 c0       	push   $0xc00379a8
c0031af8:	68 b9 79 03 c0       	push   $0xc00379b9
c0031afd:	68 5c 7a 03 c0       	push   $0xc0037a5c
c0031b02:	6a 6c                	push   $0x6c
c0031b04:	68 d0 79 03 c0       	push   $0xc00379d0
c0031b09:	e8 83 8a ff ff       	call   c002a591 <debug_panic>
c0031b0e:	b8 00 00 00 00       	mov    $0x0,%eax
c0031b13:	c9                   	leave  
c0031b14:	c3                   	ret    

c0031b15 <index_to_sector>:
c0031b15:	55                   	push   %ebp
c0031b16:	89 e5                	mov    %esp,%ebp
c0031b18:	81 ec 18 02 00 00    	sub    $0x218,%esp
c0031b1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0031b25:	83 7d 0c 7a          	cmpl   $0x7a,0xc(%ebp)
c0031b29:	7f 0e                	jg     c0031b39 <index_to_sector+0x24>
c0031b2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0031b2e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0031b31:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0031b34:	e9 c0 00 00 00       	jmp    c0031bf9 <index_to_sector+0xe4>
c0031b39:	83 45 f4 7b          	addl   $0x7b,-0xc(%ebp)
c0031b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031b40:	83 e8 80             	sub    $0xffffff80,%eax
c0031b43:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0031b46:	7e 2e                	jle    c0031b76 <index_to_sector+0x61>
c0031b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0031b4b:	8b 80 ec 01 00 00    	mov    0x1ec(%eax),%eax
c0031b51:	83 ec 08             	sub    $0x8,%esp
c0031b54:	8d 95 ec fd ff ff    	lea    -0x214(%ebp),%edx
c0031b5a:	52                   	push   %edx
c0031b5b:	50                   	push   %eax
c0031b5c:	e8 5f f1 ff ff       	call   c0030cc0 <buffer_cache_read>
c0031b61:	83 c4 10             	add    $0x10,%esp
c0031b64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0031b67:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0031b6a:	8b 84 85 ec fd ff ff 	mov    -0x214(%ebp,%eax,4),%eax
c0031b71:	e9 83 00 00 00       	jmp    c0031bf9 <index_to_sector+0xe4>
c0031b76:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
c0031b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031b7d:	05 00 40 00 00       	add    $0x4000,%eax
c0031b82:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0031b85:	7e 6d                	jle    c0031bf4 <index_to_sector+0xdf>
c0031b87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0031b8a:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0031b8d:	8d 50 7f             	lea    0x7f(%eax),%edx
c0031b90:	85 c0                	test   %eax,%eax
c0031b92:	0f 48 c2             	cmovs  %edx,%eax
c0031b95:	c1 f8 07             	sar    $0x7,%eax
c0031b98:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0031b9e:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0031ba1:	99                   	cltd   
c0031ba2:	c1 ea 19             	shr    $0x19,%edx
c0031ba5:	01 d0                	add    %edx,%eax
c0031ba7:	83 e0 7f             	and    $0x7f,%eax
c0031baa:	29 d0                	sub    %edx,%eax
c0031bac:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031baf:	8b 45 08             	mov    0x8(%ebp),%eax
c0031bb2:	8b 80 f0 01 00 00    	mov    0x1f0(%eax),%eax
c0031bb8:	83 ec 08             	sub    $0x8,%esp
c0031bbb:	8d 95 ec fd ff ff    	lea    -0x214(%ebp),%edx
c0031bc1:	52                   	push   %edx
c0031bc2:	50                   	push   %eax
c0031bc3:	e8 f8 f0 ff ff       	call   c0030cc0 <buffer_cache_read>
c0031bc8:	83 c4 10             	add    $0x10,%esp
c0031bcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031bce:	8b 84 85 ec fd ff ff 	mov    -0x214(%ebp,%eax,4),%eax
c0031bd5:	83 ec 08             	sub    $0x8,%esp
c0031bd8:	8d 95 ec fd ff ff    	lea    -0x214(%ebp),%edx
c0031bde:	52                   	push   %edx
c0031bdf:	50                   	push   %eax
c0031be0:	e8 db f0 ff ff       	call   c0030cc0 <buffer_cache_read>
c0031be5:	83 c4 10             	add    $0x10,%esp
c0031be8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0031beb:	8b 84 85 ec fd ff ff 	mov    -0x214(%ebp,%eax,4),%eax
c0031bf2:	eb 05                	jmp    c0031bf9 <index_to_sector+0xe4>
c0031bf4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0031bf9:	c9                   	leave  
c0031bfa:	c3                   	ret    

c0031bfb <byte_to_sector>:
c0031bfb:	55                   	push   %ebp
c0031bfc:	89 e5                	mov    %esp,%ebp
c0031bfe:	83 ec 18             	sub    $0x18,%esp
c0031c01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0031c05:	75 21                	jne    c0031c28 <byte_to_sector+0x2d>
c0031c07:	83 ec 0c             	sub    $0xc,%esp
c0031c0a:	68 e6 79 03 c0       	push   $0xc00379e6
c0031c0f:	68 b9 79 03 c0       	push   $0xc00379b9
c0031c14:	68 6c 7a 03 c0       	push   $0xc0037a6c
c0031c19:	68 a8 00 00 00       	push   $0xa8
c0031c1e:	68 d0 79 03 c0       	push   $0xc00379d0
c0031c23:	e8 69 89 ff ff       	call   c002a591 <debug_panic>
c0031c28:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0031c2c:	78 39                	js     c0031c67 <byte_to_sector+0x6c>
c0031c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0031c31:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
c0031c37:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0031c3a:	7e 2b                	jle    c0031c67 <byte_to_sector+0x6c>
c0031c3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0031c3f:	8d 90 ff 01 00 00    	lea    0x1ff(%eax),%edx
c0031c45:	85 c0                	test   %eax,%eax
c0031c47:	0f 48 c2             	cmovs  %edx,%eax
c0031c4a:	c1 f8 09             	sar    $0x9,%eax
c0031c4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031c50:	8b 45 08             	mov    0x8(%ebp),%eax
c0031c53:	83 c0 18             	add    $0x18,%eax
c0031c56:	83 ec 08             	sub    $0x8,%esp
c0031c59:	ff 75 f4             	pushl  -0xc(%ebp)
c0031c5c:	50                   	push   %eax
c0031c5d:	e8 b3 fe ff ff       	call   c0031b15 <index_to_sector>
c0031c62:	83 c4 10             	add    $0x10,%esp
c0031c65:	eb 05                	jmp    c0031c6c <byte_to_sector+0x71>
c0031c67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0031c6c:	c9                   	leave  
c0031c6d:	c3                   	ret    

c0031c6e <inode_init>:
c0031c6e:	55                   	push   %ebp
c0031c6f:	89 e5                	mov    %esp,%ebp
c0031c71:	83 ec 08             	sub    $0x8,%esp
c0031c74:	83 ec 0c             	sub    $0xc,%esp
c0031c77:	68 c0 86 04 c0       	push   $0xc00486c0
c0031c7c:	e8 83 8b ff ff       	call   c002a804 <list_init>
c0031c81:	83 c4 10             	add    $0x10,%esp
c0031c84:	90                   	nop
c0031c85:	c9                   	leave  
c0031c86:	c3                   	ret    

c0031c87 <inode_create>:
c0031c87:	55                   	push   %ebp
c0031c88:	89 e5                	mov    %esp,%ebp
c0031c8a:	83 ec 28             	sub    $0x28,%esp
c0031c8d:	8b 45 10             	mov    0x10(%ebp),%eax
c0031c90:	88 45 e4             	mov    %al,-0x1c(%ebp)
c0031c93:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0031c9a:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0031c9e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0031ca2:	79 21                	jns    c0031cc5 <inode_create+0x3e>
c0031ca4:	83 ec 0c             	sub    $0xc,%esp
c0031ca7:	68 f4 79 03 c0       	push   $0xc00379f4
c0031cac:	68 b9 79 03 c0       	push   $0xc00379b9
c0031cb1:	68 7c 7a 03 c0       	push   $0xc0037a7c
c0031cb6:	68 c8 00 00 00       	push   $0xc8
c0031cbb:	68 d0 79 03 c0       	push   $0xc00379d0
c0031cc0:	e8 cc 88 ff ff       	call   c002a591 <debug_panic>
c0031cc5:	83 ec 08             	sub    $0x8,%esp
c0031cc8:	68 00 02 00 00       	push   $0x200
c0031ccd:	6a 01                	push   $0x1
c0031ccf:	e8 4d 26 ff ff       	call   c0024321 <calloc>
c0031cd4:	83 c4 10             	add    $0x10,%esp
c0031cd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031cda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031cde:	74 76                	je     c0031d56 <inode_create+0xcf>
c0031ce0:	83 ec 0c             	sub    $0xc,%esp
c0031ce3:	ff 75 0c             	pushl  0xc(%ebp)
c0031ce6:	e8 8d fc ff ff       	call   c0031978 <bytes_to_sectors>
c0031ceb:	83 c4 10             	add    $0x10,%esp
c0031cee:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031cf4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0031cf7:	89 90 f8 01 00 00    	mov    %edx,0x1f8(%eax)
c0031cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031d00:	c7 80 fc 01 00 00 44 	movl   $0x494e4f44,0x1fc(%eax)
c0031d07:	4f 4e 49 
c0031d0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031d0d:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0031d11:	88 90 f4 01 00 00    	mov    %dl,0x1f4(%eax)
c0031d17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031d1a:	8b 80 f8 01 00 00    	mov    0x1f8(%eax),%eax
c0031d20:	83 ec 08             	sub    $0x8,%esp
c0031d23:	50                   	push   %eax
c0031d24:	ff 75 f0             	pushl  -0x10(%ebp)
c0031d27:	e8 67 fc ff ff       	call   c0031993 <inode_allocate>
c0031d2c:	83 c4 10             	add    $0x10,%esp
c0031d2f:	84 c0                	test   %al,%al
c0031d31:	74 15                	je     c0031d48 <inode_create+0xc1>
c0031d33:	83 ec 08             	sub    $0x8,%esp
c0031d36:	ff 75 f0             	pushl  -0x10(%ebp)
c0031d39:	ff 75 08             	pushl  0x8(%ebp)
c0031d3c:	e8 19 f0 ff ff       	call   c0030d5a <buffer_cache_write>
c0031d41:	83 c4 10             	add    $0x10,%esp
c0031d44:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c0031d48:	83 ec 0c             	sub    $0xc,%esp
c0031d4b:	ff 75 f0             	pushl  -0x10(%ebp)
c0031d4e:	e8 fd 26 ff ff       	call   c0024450 <free>
c0031d53:	83 c4 10             	add    $0x10,%esp
c0031d56:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0031d5a:	c9                   	leave  
c0031d5b:	c3                   	ret    

c0031d5c <inode_open>:
c0031d5c:	55                   	push   %ebp
c0031d5d:	89 e5                	mov    %esp,%ebp
c0031d5f:	83 ec 18             	sub    $0x18,%esp
c0031d62:	83 ec 0c             	sub    $0xc,%esp
c0031d65:	68 c0 86 04 c0       	push   $0xc00486c0
c0031d6a:	e8 ea 8a ff ff       	call   c002a859 <list_begin>
c0031d6f:	83 c4 10             	add    $0x10,%esp
c0031d72:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031d75:	eb 3e                	jmp    c0031db5 <inode_open+0x59>
c0031d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031d7a:	83 c0 04             	add    $0x4,%eax
c0031d7d:	83 e8 04             	sub    $0x4,%eax
c0031d80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031d86:	8b 40 08             	mov    0x8(%eax),%eax
c0031d89:	3b 45 08             	cmp    0x8(%ebp),%eax
c0031d8c:	75 16                	jne    c0031da4 <inode_open+0x48>
c0031d8e:	83 ec 0c             	sub    $0xc,%esp
c0031d91:	ff 75 f0             	pushl  -0x10(%ebp)
c0031d94:	e8 a7 00 00 00       	call   c0031e40 <inode_reopen>
c0031d99:	83 c4 10             	add    $0x10,%esp
c0031d9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031d9f:	e9 9a 00 00 00       	jmp    c0031e3e <inode_open+0xe2>
c0031da4:	83 ec 0c             	sub    $0xc,%esp
c0031da7:	ff 75 f4             	pushl  -0xc(%ebp)
c0031daa:	e8 dc 8a ff ff       	call   c002a88b <list_next>
c0031daf:	83 c4 10             	add    $0x10,%esp
c0031db2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031db5:	83 ec 0c             	sub    $0xc,%esp
c0031db8:	68 c0 86 04 c0       	push   $0xc00486c0
c0031dbd:	e8 13 8b ff ff       	call   c002a8d5 <list_end>
c0031dc2:	83 c4 10             	add    $0x10,%esp
c0031dc5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0031dc8:	75 ad                	jne    c0031d77 <inode_open+0x1b>
c0031dca:	83 ec 0c             	sub    $0xc,%esp
c0031dcd:	68 18 02 00 00       	push   $0x218
c0031dd2:	e8 7c 23 ff ff       	call   c0024153 <malloc>
c0031dd7:	83 c4 10             	add    $0x10,%esp
c0031dda:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031ddd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031de1:	75 07                	jne    c0031dea <inode_open+0x8e>
c0031de3:	b8 00 00 00 00       	mov    $0x0,%eax
c0031de8:	eb 54                	jmp    c0031e3e <inode_open+0xe2>
c0031dea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031ded:	83 ec 08             	sub    $0x8,%esp
c0031df0:	50                   	push   %eax
c0031df1:	68 c0 86 04 c0       	push   $0xc00486c0
c0031df6:	e8 c3 8d ff ff       	call   c002abbe <list_push_front>
c0031dfb:	83 c4 10             	add    $0x10,%esp
c0031dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031e01:	8b 55 08             	mov    0x8(%ebp),%edx
c0031e04:	89 50 08             	mov    %edx,0x8(%eax)
c0031e07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031e0a:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
c0031e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031e14:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
c0031e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031e1e:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0031e22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031e25:	8d 50 18             	lea    0x18(%eax),%edx
c0031e28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031e2b:	8b 40 08             	mov    0x8(%eax),%eax
c0031e2e:	83 ec 08             	sub    $0x8,%esp
c0031e31:	52                   	push   %edx
c0031e32:	50                   	push   %eax
c0031e33:	e8 88 ee ff ff       	call   c0030cc0 <buffer_cache_read>
c0031e38:	83 c4 10             	add    $0x10,%esp
c0031e3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031e3e:	c9                   	leave  
c0031e3f:	c3                   	ret    

c0031e40 <inode_reopen>:
c0031e40:	55                   	push   %ebp
c0031e41:	89 e5                	mov    %esp,%ebp
c0031e43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0031e47:	74 0f                	je     c0031e58 <inode_reopen+0x18>
c0031e49:	8b 45 08             	mov    0x8(%ebp),%eax
c0031e4c:	8b 40 0c             	mov    0xc(%eax),%eax
c0031e4f:	8d 50 01             	lea    0x1(%eax),%edx
c0031e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0031e55:	89 50 0c             	mov    %edx,0xc(%eax)
c0031e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0031e5b:	5d                   	pop    %ebp
c0031e5c:	c3                   	ret    

c0031e5d <inode_get_inumber>:
c0031e5d:	55                   	push   %ebp
c0031e5e:	89 e5                	mov    %esp,%ebp
c0031e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0031e63:	8b 40 08             	mov    0x8(%eax),%eax
c0031e66:	5d                   	pop    %ebp
c0031e67:	c3                   	ret    

c0031e68 <inode_delete_indirect>:
c0031e68:	55                   	push   %ebp
c0031e69:	89 e5                	mov    %esp,%ebp
c0031e6b:	81 ec 18 02 00 00    	sub    $0x218,%esp
c0031e71:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0031e75:	75 15                	jne    c0031e8c <inode_delete_indirect+0x24>
c0031e77:	83 ec 08             	sub    $0x8,%esp
c0031e7a:	6a 01                	push   $0x1
c0031e7c:	ff 75 08             	pushl  0x8(%ebp)
c0031e7f:	e8 91 e6 ff ff       	call   c0030515 <free_map_release>
c0031e84:	83 c4 10             	add    $0x10,%esp
c0031e87:	e9 c6 00 00 00       	jmp    c0031f52 <inode_delete_indirect+0xea>
c0031e8c:	83 ec 08             	sub    $0x8,%esp
c0031e8f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0031e95:	50                   	push   %eax
c0031e96:	ff 75 08             	pushl  0x8(%ebp)
c0031e99:	e8 22 ee ff ff       	call   c0030cc0 <buffer_cache_read>
c0031e9e:	83 c4 10             	add    $0x10,%esp
c0031ea1:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c0031ea5:	75 07                	jne    c0031eae <inode_delete_indirect+0x46>
c0031ea7:	b8 01 00 00 00       	mov    $0x1,%eax
c0031eac:	eb 05                	jmp    c0031eb3 <inode_delete_indirect+0x4b>
c0031eae:	b8 80 00 00 00       	mov    $0x80,%eax
c0031eb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031eb6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0031eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031ebc:	01 d0                	add    %edx,%eax
c0031ebe:	83 e8 01             	sub    $0x1,%eax
c0031ec1:	ba 00 00 00 00       	mov    $0x0,%edx
c0031ec6:	f7 75 f0             	divl   -0x10(%ebp)
c0031ec9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031ecc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0031ed3:	eb 3e                	jmp    c0031f13 <inode_delete_indirect+0xab>
c0031ed5:	83 ec 08             	sub    $0x8,%esp
c0031ed8:	ff 75 f0             	pushl  -0x10(%ebp)
c0031edb:	ff 75 0c             	pushl  0xc(%ebp)
c0031ede:	e8 17 f9 ff ff       	call   c00317fa <min>
c0031ee3:	83 c4 10             	add    $0x10,%esp
c0031ee6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031ee9:	8b 45 10             	mov    0x10(%ebp),%eax
c0031eec:	8d 50 ff             	lea    -0x1(%eax),%edx
c0031eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031ef2:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
c0031ef9:	83 ec 04             	sub    $0x4,%esp
c0031efc:	52                   	push   %edx
c0031efd:	ff 75 e8             	pushl  -0x18(%ebp)
c0031f00:	50                   	push   %eax
c0031f01:	e8 62 ff ff ff       	call   c0031e68 <inode_delete_indirect>
c0031f06:	83 c4 10             	add    $0x10,%esp
c0031f09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0031f0c:	29 45 0c             	sub    %eax,0xc(%ebp)
c0031f0f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0031f13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031f16:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0031f19:	72 ba                	jb     c0031ed5 <inode_delete_indirect+0x6d>
c0031f1b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0031f1f:	74 21                	je     c0031f42 <inode_delete_indirect+0xda>
c0031f21:	83 ec 0c             	sub    $0xc,%esp
c0031f24:	68 a8 79 03 c0       	push   $0xc00379a8
c0031f29:	68 b9 79 03 c0       	push   $0xc00379b9
c0031f2e:	68 8c 7a 03 c0       	push   $0xc0037a8c
c0031f33:	68 28 01 00 00       	push   $0x128
c0031f38:	68 d0 79 03 c0       	push   $0xc00379d0
c0031f3d:	e8 4f 86 ff ff       	call   c002a591 <debug_panic>
c0031f42:	83 ec 08             	sub    $0x8,%esp
c0031f45:	6a 01                	push   $0x1
c0031f47:	ff 75 08             	pushl  0x8(%ebp)
c0031f4a:	e8 c6 e5 ff ff       	call   c0030515 <free_map_release>
c0031f4f:	83 c4 10             	add    $0x10,%esp
c0031f52:	c9                   	leave  
c0031f53:	c3                   	ret    

c0031f54 <inode_delete>:
c0031f54:	55                   	push   %ebp
c0031f55:	89 e5                	mov    %esp,%ebp
c0031f57:	83 ec 18             	sub    $0x18,%esp
c0031f5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0031f5d:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
c0031f63:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031f66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031f6a:	0f 88 cc 00 00 00    	js     c003203c <inode_delete+0xe8>
c0031f70:	ff 75 f0             	pushl  -0x10(%ebp)
c0031f73:	e8 00 fa ff ff       	call   c0031978 <bytes_to_sectors>
c0031f78:	83 c4 04             	add    $0x4,%esp
c0031f7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031f7e:	6a 7b                	push   $0x7b
c0031f80:	ff 75 ec             	pushl  -0x14(%ebp)
c0031f83:	e8 72 f8 ff ff       	call   c00317fa <min>
c0031f88:	83 c4 08             	add    $0x8,%esp
c0031f8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031f8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0031f95:	eb 1f                	jmp    c0031fb6 <inode_delete+0x62>
c0031f97:	8b 45 08             	mov    0x8(%ebp),%eax
c0031f9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0031f9d:	83 c2 04             	add    $0x4,%edx
c0031fa0:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
c0031fa4:	83 ec 08             	sub    $0x8,%esp
c0031fa7:	6a 01                	push   $0x1
c0031fa9:	50                   	push   %eax
c0031faa:	e8 66 e5 ff ff       	call   c0030515 <free_map_release>
c0031faf:	83 c4 10             	add    $0x10,%esp
c0031fb2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0031fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031fb9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0031fbc:	72 d9                	jb     c0031f97 <inode_delete+0x43>
c0031fbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0031fc1:	29 45 ec             	sub    %eax,-0x14(%ebp)
c0031fc4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0031fc8:	74 75                	je     c003203f <inode_delete+0xeb>
c0031fca:	83 ec 08             	sub    $0x8,%esp
c0031fcd:	68 80 00 00 00       	push   $0x80
c0031fd2:	ff 75 ec             	pushl  -0x14(%ebp)
c0031fd5:	e8 20 f8 ff ff       	call   c00317fa <min>
c0031fda:	83 c4 10             	add    $0x10,%esp
c0031fdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031fe0:	8b 45 08             	mov    0x8(%ebp),%eax
c0031fe3:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
c0031fe9:	83 ec 04             	sub    $0x4,%esp
c0031fec:	6a 01                	push   $0x1
c0031fee:	ff 75 e8             	pushl  -0x18(%ebp)
c0031ff1:	50                   	push   %eax
c0031ff2:	e8 71 fe ff ff       	call   c0031e68 <inode_delete_indirect>
c0031ff7:	83 c4 10             	add    $0x10,%esp
c0031ffa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0031ffd:	29 45 ec             	sub    %eax,-0x14(%ebp)
c0032000:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0032004:	74 3c                	je     c0032042 <inode_delete+0xee>
c0032006:	83 ec 08             	sub    $0x8,%esp
c0032009:	68 00 40 00 00       	push   $0x4000
c003200e:	ff 75 ec             	pushl  -0x14(%ebp)
c0032011:	e8 e4 f7 ff ff       	call   c00317fa <min>
c0032016:	83 c4 10             	add    $0x10,%esp
c0032019:	89 45 e8             	mov    %eax,-0x18(%ebp)
c003201c:	8b 45 08             	mov    0x8(%ebp),%eax
c003201f:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
c0032025:	83 ec 04             	sub    $0x4,%esp
c0032028:	6a 02                	push   $0x2
c003202a:	ff 75 e8             	pushl  -0x18(%ebp)
c003202d:	50                   	push   %eax
c003202e:	e8 35 fe ff ff       	call   c0031e68 <inode_delete_indirect>
c0032033:	83 c4 10             	add    $0x10,%esp
c0032036:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c003203a:	eb 07                	jmp    c0032043 <inode_delete+0xef>
c003203c:	90                   	nop
c003203d:	eb 04                	jmp    c0032043 <inode_delete+0xef>
c003203f:	90                   	nop
c0032040:	eb 01                	jmp    c0032043 <inode_delete+0xef>
c0032042:	90                   	nop
c0032043:	c9                   	leave  
c0032044:	c3                   	ret    

c0032045 <inode_close>:
c0032045:	55                   	push   %ebp
c0032046:	89 e5                	mov    %esp,%ebp
c0032048:	83 ec 08             	sub    $0x8,%esp
c003204b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c003204f:	74 65                	je     c00320b6 <inode_close+0x71>
c0032051:	8b 45 08             	mov    0x8(%ebp),%eax
c0032054:	8b 40 0c             	mov    0xc(%eax),%eax
c0032057:	8d 50 ff             	lea    -0x1(%eax),%edx
c003205a:	8b 45 08             	mov    0x8(%ebp),%eax
c003205d:	89 50 0c             	mov    %edx,0xc(%eax)
c0032060:	8b 45 08             	mov    0x8(%ebp),%eax
c0032063:	8b 40 0c             	mov    0xc(%eax),%eax
c0032066:	85 c0                	test   %eax,%eax
c0032068:	75 4d                	jne    c00320b7 <inode_close+0x72>
c003206a:	8b 45 08             	mov    0x8(%ebp),%eax
c003206d:	83 ec 0c             	sub    $0xc,%esp
c0032070:	50                   	push   %eax
c0032071:	e8 94 8b ff ff       	call   c002ac0a <list_remove>
c0032076:	83 c4 10             	add    $0x10,%esp
c0032079:	8b 45 08             	mov    0x8(%ebp),%eax
c003207c:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c0032080:	84 c0                	test   %al,%al
c0032082:	74 22                	je     c00320a6 <inode_close+0x61>
c0032084:	8b 45 08             	mov    0x8(%ebp),%eax
c0032087:	8b 40 08             	mov    0x8(%eax),%eax
c003208a:	83 ec 08             	sub    $0x8,%esp
c003208d:	6a 01                	push   $0x1
c003208f:	50                   	push   %eax
c0032090:	e8 80 e4 ff ff       	call   c0030515 <free_map_release>
c0032095:	83 c4 10             	add    $0x10,%esp
c0032098:	83 ec 0c             	sub    $0xc,%esp
c003209b:	ff 75 08             	pushl  0x8(%ebp)
c003209e:	e8 b1 fe ff ff       	call   c0031f54 <inode_delete>
c00320a3:	83 c4 10             	add    $0x10,%esp
c00320a6:	83 ec 0c             	sub    $0xc,%esp
c00320a9:	ff 75 08             	pushl  0x8(%ebp)
c00320ac:	e8 9f 23 ff ff       	call   c0024450 <free>
c00320b1:	83 c4 10             	add    $0x10,%esp
c00320b4:	eb 01                	jmp    c00320b7 <inode_close+0x72>
c00320b6:	90                   	nop
c00320b7:	c9                   	leave  
c00320b8:	c3                   	ret    

c00320b9 <inode_remove>:
c00320b9:	55                   	push   %ebp
c00320ba:	89 e5                	mov    %esp,%ebp
c00320bc:	83 ec 08             	sub    $0x8,%esp
c00320bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00320c3:	75 21                	jne    c00320e6 <inode_remove+0x2d>
c00320c5:	83 ec 0c             	sub    $0xc,%esp
c00320c8:	68 e6 79 03 c0       	push   $0xc00379e6
c00320cd:	68 b9 79 03 c0       	push   $0xc00379b9
c00320d2:	68 a4 7a 03 c0       	push   $0xc0037aa4
c00320d7:	68 67 01 00 00       	push   $0x167
c00320dc:	68 d0 79 03 c0       	push   $0xc00379d0
c00320e1:	e8 ab 84 ff ff       	call   c002a591 <debug_panic>
c00320e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00320e9:	c6 40 10 01          	movb   $0x1,0x10(%eax)
c00320ed:	90                   	nop
c00320ee:	c9                   	leave  
c00320ef:	c3                   	ret    

c00320f0 <inode_read_at>:
c00320f0:	55                   	push   %ebp
c00320f1:	89 e5                	mov    %esp,%ebp
c00320f3:	53                   	push   %ebx
c00320f4:	83 ec 34             	sub    $0x34,%esp
c00320f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00320fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00320fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0032104:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c003210b:	e9 f5 00 00 00       	jmp    c0032205 <inode_read_at+0x115>
c0032110:	83 ec 08             	sub    $0x8,%esp
c0032113:	ff 75 14             	pushl  0x14(%ebp)
c0032116:	ff 75 08             	pushl  0x8(%ebp)
c0032119:	e8 dd fa ff ff       	call   c0031bfb <byte_to_sector>
c003211e:	83 c4 10             	add    $0x10,%esp
c0032121:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0032124:	8b 45 14             	mov    0x14(%ebp),%eax
c0032127:	99                   	cltd   
c0032128:	c1 ea 17             	shr    $0x17,%edx
c003212b:	01 d0                	add    %edx,%eax
c003212d:	25 ff 01 00 00       	and    $0x1ff,%eax
c0032132:	29 d0                	sub    %edx,%eax
c0032134:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0032137:	83 ec 0c             	sub    $0xc,%esp
c003213a:	ff 75 08             	pushl  0x8(%ebp)
c003213d:	e8 ab 03 00 00       	call   c00324ed <inode_length>
c0032142:	83 c4 10             	add    $0x10,%esp
c0032145:	2b 45 14             	sub    0x14(%ebp),%eax
c0032148:	89 45 e0             	mov    %eax,-0x20(%ebp)
c003214b:	b8 00 02 00 00       	mov    $0x200,%eax
c0032150:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0032153:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0032156:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0032159:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c003215c:	0f 4e 45 dc          	cmovle -0x24(%ebp),%eax
c0032160:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0032163:	8b 45 10             	mov    0x10(%ebp),%eax
c0032166:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0032169:	0f 4e 45 d8          	cmovle -0x28(%ebp),%eax
c003216d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0032170:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0032174:	0f 8e 97 00 00 00    	jle    c0032211 <inode_read_at+0x121>
c003217a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c003217e:	75 22                	jne    c00321a2 <inode_read_at+0xb2>
c0032180:	81 7d d4 00 02 00 00 	cmpl   $0x200,-0x2c(%ebp)
c0032187:	75 19                	jne    c00321a2 <inode_read_at+0xb2>
c0032189:	8b 55 f4             	mov    -0xc(%ebp),%edx
c003218c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c003218f:	01 d0                	add    %edx,%eax
c0032191:	83 ec 08             	sub    $0x8,%esp
c0032194:	50                   	push   %eax
c0032195:	ff 75 e8             	pushl  -0x18(%ebp)
c0032198:	e8 23 eb ff ff       	call   c0030cc0 <buffer_cache_read>
c003219d:	83 c4 10             	add    $0x10,%esp
c00321a0:	eb 51                	jmp    c00321f3 <inode_read_at+0x103>
c00321a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00321a6:	75 19                	jne    c00321c1 <inode_read_at+0xd1>
c00321a8:	83 ec 0c             	sub    $0xc,%esp
c00321ab:	68 00 02 00 00       	push   $0x200
c00321b0:	e8 9e 1f ff ff       	call   c0024153 <malloc>
c00321b5:	83 c4 10             	add    $0x10,%esp
c00321b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00321bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00321bf:	74 53                	je     c0032214 <inode_read_at+0x124>
c00321c1:	83 ec 08             	sub    $0x8,%esp
c00321c4:	ff 75 f0             	pushl  -0x10(%ebp)
c00321c7:	ff 75 e8             	pushl  -0x18(%ebp)
c00321ca:	e8 f1 ea ff ff       	call   c0030cc0 <buffer_cache_read>
c00321cf:	83 c4 10             	add    $0x10,%esp
c00321d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00321d5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c00321d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00321db:	01 d1                	add    %edx,%ecx
c00321dd:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c00321e0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00321e3:	01 da                	add    %ebx,%edx
c00321e5:	83 ec 04             	sub    $0x4,%esp
c00321e8:	50                   	push   %eax
c00321e9:	51                   	push   %ecx
c00321ea:	52                   	push   %edx
c00321eb:	e8 61 70 ff ff       	call   c0029251 <memcpy>
c00321f0:	83 c4 10             	add    $0x10,%esp
c00321f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00321f6:	29 45 10             	sub    %eax,0x10(%ebp)
c00321f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00321fc:	01 45 14             	add    %eax,0x14(%ebp)
c00321ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0032202:	01 45 f4             	add    %eax,-0xc(%ebp)
c0032205:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0032209:	0f 8f 01 ff ff ff    	jg     c0032110 <inode_read_at+0x20>
c003220f:	eb 04                	jmp    c0032215 <inode_read_at+0x125>
c0032211:	90                   	nop
c0032212:	eb 01                	jmp    c0032215 <inode_read_at+0x125>
c0032214:	90                   	nop
c0032215:	83 ec 0c             	sub    $0xc,%esp
c0032218:	ff 75 f0             	pushl  -0x10(%ebp)
c003221b:	e8 30 22 ff ff       	call   c0024450 <free>
c0032220:	83 c4 10             	add    $0x10,%esp
c0032223:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0032226:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0032229:	c9                   	leave  
c003222a:	c3                   	ret    

c003222b <inode_write_at>:
c003222b:	55                   	push   %ebp
c003222c:	89 e5                	mov    %esp,%ebp
c003222e:	53                   	push   %ebx
c003222f:	83 ec 34             	sub    $0x34,%esp
c0032232:	8b 45 0c             	mov    0xc(%ebp),%eax
c0032235:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0032238:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c003223f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0032246:	8b 45 08             	mov    0x8(%ebp),%eax
c0032249:	8b 40 14             	mov    0x14(%eax),%eax
c003224c:	85 c0                	test   %eax,%eax
c003224e:	74 0a                	je     c003225a <inode_write_at+0x2f>
c0032250:	b8 00 00 00 00       	mov    $0x0,%eax
c0032255:	e9 d1 01 00 00       	jmp    c003242b <inode_write_at+0x200>
c003225a:	8b 55 14             	mov    0x14(%ebp),%edx
c003225d:	8b 45 10             	mov    0x10(%ebp),%eax
c0032260:	01 d0                	add    %edx,%eax
c0032262:	83 e8 01             	sub    $0x1,%eax
c0032265:	83 ec 08             	sub    $0x8,%esp
c0032268:	50                   	push   %eax
c0032269:	ff 75 08             	pushl  0x8(%ebp)
c003226c:	e8 8a f9 ff ff       	call   c0031bfb <byte_to_sector>
c0032271:	83 c4 10             	add    $0x10,%esp
c0032274:	83 f8 ff             	cmp    $0xffffffff,%eax
c0032277:	0f 85 8d 01 00 00    	jne    c003240a <inode_write_at+0x1df>
c003227d:	8b 55 14             	mov    0x14(%ebp),%edx
c0032280:	8b 45 10             	mov    0x10(%ebp),%eax
c0032283:	01 c2                	add    %eax,%edx
c0032285:	8b 45 08             	mov    0x8(%ebp),%eax
c0032288:	83 c0 18             	add    $0x18,%eax
c003228b:	83 ec 08             	sub    $0x8,%esp
c003228e:	52                   	push   %edx
c003228f:	50                   	push   %eax
c0032290:	e8 fe f6 ff ff       	call   c0031993 <inode_allocate>
c0032295:	83 c4 10             	add    $0x10,%esp
c0032298:	83 f0 01             	xor    $0x1,%eax
c003229b:	84 c0                	test   %al,%al
c003229d:	74 0a                	je     c00322a9 <inode_write_at+0x7e>
c003229f:	b8 00 00 00 00       	mov    $0x0,%eax
c00322a4:	e9 82 01 00 00       	jmp    c003242b <inode_write_at+0x200>
c00322a9:	8b 55 14             	mov    0x14(%ebp),%edx
c00322ac:	8b 45 10             	mov    0x10(%ebp),%eax
c00322af:	01 c2                	add    %eax,%edx
c00322b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00322b4:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
c00322ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00322bd:	8d 50 18             	lea    0x18(%eax),%edx
c00322c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00322c3:	8b 40 08             	mov    0x8(%eax),%eax
c00322c6:	83 ec 08             	sub    $0x8,%esp
c00322c9:	52                   	push   %edx
c00322ca:	50                   	push   %eax
c00322cb:	e8 8a ea ff ff       	call   c0030d5a <buffer_cache_write>
c00322d0:	83 c4 10             	add    $0x10,%esp
c00322d3:	e9 32 01 00 00       	jmp    c003240a <inode_write_at+0x1df>
c00322d8:	83 ec 08             	sub    $0x8,%esp
c00322db:	ff 75 14             	pushl  0x14(%ebp)
c00322de:	ff 75 08             	pushl  0x8(%ebp)
c00322e1:	e8 15 f9 ff ff       	call   c0031bfb <byte_to_sector>
c00322e6:	83 c4 10             	add    $0x10,%esp
c00322e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00322ec:	8b 45 14             	mov    0x14(%ebp),%eax
c00322ef:	99                   	cltd   
c00322f0:	c1 ea 17             	shr    $0x17,%edx
c00322f3:	01 d0                	add    %edx,%eax
c00322f5:	25 ff 01 00 00       	and    $0x1ff,%eax
c00322fa:	29 d0                	sub    %edx,%eax
c00322fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00322ff:	83 ec 0c             	sub    $0xc,%esp
c0032302:	ff 75 08             	pushl  0x8(%ebp)
c0032305:	e8 e3 01 00 00       	call   c00324ed <inode_length>
c003230a:	83 c4 10             	add    $0x10,%esp
c003230d:	2b 45 14             	sub    0x14(%ebp),%eax
c0032310:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0032313:	b8 00 02 00 00       	mov    $0x200,%eax
c0032318:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c003231b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c003231e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0032321:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0032324:	0f 4e 45 dc          	cmovle -0x24(%ebp),%eax
c0032328:	89 45 d8             	mov    %eax,-0x28(%ebp)
c003232b:	8b 45 10             	mov    0x10(%ebp),%eax
c003232e:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0032331:	0f 4e 45 d8          	cmovle -0x28(%ebp),%eax
c0032335:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0032338:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c003233c:	0f 8e d4 00 00 00    	jle    c0032416 <inode_write_at+0x1eb>
c0032342:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0032346:	75 25                	jne    c003236d <inode_write_at+0x142>
c0032348:	81 7d d4 00 02 00 00 	cmpl   $0x200,-0x2c(%ebp)
c003234f:	75 1c                	jne    c003236d <inode_write_at+0x142>
c0032351:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0032354:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0032357:	01 d0                	add    %edx,%eax
c0032359:	83 ec 08             	sub    $0x8,%esp
c003235c:	50                   	push   %eax
c003235d:	ff 75 e8             	pushl  -0x18(%ebp)
c0032360:	e8 f5 e9 ff ff       	call   c0030d5a <buffer_cache_write>
c0032365:	83 c4 10             	add    $0x10,%esp
c0032368:	e9 8b 00 00 00       	jmp    c00323f8 <inode_write_at+0x1cd>
c003236d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0032371:	75 1d                	jne    c0032390 <inode_write_at+0x165>
c0032373:	83 ec 0c             	sub    $0xc,%esp
c0032376:	68 00 02 00 00       	push   $0x200
c003237b:	e8 d3 1d ff ff       	call   c0024153 <malloc>
c0032380:	83 c4 10             	add    $0x10,%esp
c0032383:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0032386:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c003238a:	0f 84 89 00 00 00    	je     c0032419 <inode_write_at+0x1ee>
c0032390:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0032394:	7f 08                	jg     c003239e <inode_write_at+0x173>
c0032396:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0032399:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c003239c:	7d 13                	jge    c00323b1 <inode_write_at+0x186>
c003239e:	83 ec 08             	sub    $0x8,%esp
c00323a1:	ff 75 f0             	pushl  -0x10(%ebp)
c00323a4:	ff 75 e8             	pushl  -0x18(%ebp)
c00323a7:	e8 14 e9 ff ff       	call   c0030cc0 <buffer_cache_read>
c00323ac:	83 c4 10             	add    $0x10,%esp
c00323af:	eb 15                	jmp    c00323c6 <inode_write_at+0x19b>
c00323b1:	83 ec 04             	sub    $0x4,%esp
c00323b4:	68 00 02 00 00       	push   $0x200
c00323b9:	6a 00                	push   $0x0
c00323bb:	ff 75 f0             	pushl  -0x10(%ebp)
c00323be:	e8 94 74 ff ff       	call   c0029857 <memset>
c00323c3:	83 c4 10             	add    $0x10,%esp
c00323c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00323c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c00323cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00323cf:	01 d1                	add    %edx,%ecx
c00323d1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c00323d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00323d7:	01 da                	add    %ebx,%edx
c00323d9:	83 ec 04             	sub    $0x4,%esp
c00323dc:	50                   	push   %eax
c00323dd:	51                   	push   %ecx
c00323de:	52                   	push   %edx
c00323df:	e8 6d 6e ff ff       	call   c0029251 <memcpy>
c00323e4:	83 c4 10             	add    $0x10,%esp
c00323e7:	83 ec 08             	sub    $0x8,%esp
c00323ea:	ff 75 f0             	pushl  -0x10(%ebp)
c00323ed:	ff 75 e8             	pushl  -0x18(%ebp)
c00323f0:	e8 65 e9 ff ff       	call   c0030d5a <buffer_cache_write>
c00323f5:	83 c4 10             	add    $0x10,%esp
c00323f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00323fb:	29 45 10             	sub    %eax,0x10(%ebp)
c00323fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0032401:	01 45 14             	add    %eax,0x14(%ebp)
c0032404:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0032407:	01 45 f4             	add    %eax,-0xc(%ebp)
c003240a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c003240e:	0f 8f c4 fe ff ff    	jg     c00322d8 <inode_write_at+0xad>
c0032414:	eb 04                	jmp    c003241a <inode_write_at+0x1ef>
c0032416:	90                   	nop
c0032417:	eb 01                	jmp    c003241a <inode_write_at+0x1ef>
c0032419:	90                   	nop
c003241a:	83 ec 0c             	sub    $0xc,%esp
c003241d:	ff 75 f0             	pushl  -0x10(%ebp)
c0032420:	e8 2b 20 ff ff       	call   c0024450 <free>
c0032425:	83 c4 10             	add    $0x10,%esp
c0032428:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003242b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c003242e:	c9                   	leave  
c003242f:	c3                   	ret    

c0032430 <inode_deny_write>:
c0032430:	55                   	push   %ebp
c0032431:	89 e5                	mov    %esp,%ebp
c0032433:	83 ec 08             	sub    $0x8,%esp
c0032436:	8b 45 08             	mov    0x8(%ebp),%eax
c0032439:	8b 40 14             	mov    0x14(%eax),%eax
c003243c:	8d 50 01             	lea    0x1(%eax),%edx
c003243f:	8b 45 08             	mov    0x8(%ebp),%eax
c0032442:	89 50 14             	mov    %edx,0x14(%eax)
c0032445:	8b 45 08             	mov    0x8(%ebp),%eax
c0032448:	8b 50 14             	mov    0x14(%eax),%edx
c003244b:	8b 45 08             	mov    0x8(%ebp),%eax
c003244e:	8b 40 0c             	mov    0xc(%eax),%eax
c0032451:	39 c2                	cmp    %eax,%edx
c0032453:	7e 21                	jle    c0032476 <inode_deny_write+0x46>
c0032455:	83 ec 0c             	sub    $0xc,%esp
c0032458:	68 00 7a 03 c0       	push   $0xc0037a00
c003245d:	68 b9 79 03 c0       	push   $0xc00379b9
c0032462:	68 b4 7a 03 c0       	push   $0xc0037ab4
c0032467:	68 f5 01 00 00       	push   $0x1f5
c003246c:	68 d0 79 03 c0       	push   $0xc00379d0
c0032471:	e8 1b 81 ff ff       	call   c002a591 <debug_panic>
c0032476:	90                   	nop
c0032477:	c9                   	leave  
c0032478:	c3                   	ret    

c0032479 <inode_allow_write>:
c0032479:	55                   	push   %ebp
c003247a:	89 e5                	mov    %esp,%ebp
c003247c:	83 ec 08             	sub    $0x8,%esp
c003247f:	8b 45 08             	mov    0x8(%ebp),%eax
c0032482:	8b 40 14             	mov    0x14(%eax),%eax
c0032485:	85 c0                	test   %eax,%eax
c0032487:	7f 21                	jg     c00324aa <inode_allow_write+0x31>
c0032489:	83 ec 0c             	sub    $0xc,%esp
c003248c:	68 29 7a 03 c0       	push   $0xc0037a29
c0032491:	68 b9 79 03 c0       	push   $0xc00379b9
c0032496:	68 c8 7a 03 c0       	push   $0xc0037ac8
c003249b:	68 fe 01 00 00       	push   $0x1fe
c00324a0:	68 d0 79 03 c0       	push   $0xc00379d0
c00324a5:	e8 e7 80 ff ff       	call   c002a591 <debug_panic>
c00324aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00324ad:	8b 50 14             	mov    0x14(%eax),%edx
c00324b0:	8b 45 08             	mov    0x8(%ebp),%eax
c00324b3:	8b 40 0c             	mov    0xc(%eax),%eax
c00324b6:	39 c2                	cmp    %eax,%edx
c00324b8:	7e 21                	jle    c00324db <inode_allow_write+0x62>
c00324ba:	83 ec 0c             	sub    $0xc,%esp
c00324bd:	68 00 7a 03 c0       	push   $0xc0037a00
c00324c2:	68 b9 79 03 c0       	push   $0xc00379b9
c00324c7:	68 c8 7a 03 c0       	push   $0xc0037ac8
c00324cc:	68 ff 01 00 00       	push   $0x1ff
c00324d1:	68 d0 79 03 c0       	push   $0xc00379d0
c00324d6:	e8 b6 80 ff ff       	call   c002a591 <debug_panic>
c00324db:	8b 45 08             	mov    0x8(%ebp),%eax
c00324de:	8b 40 14             	mov    0x14(%eax),%eax
c00324e1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00324e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00324e7:	89 50 14             	mov    %edx,0x14(%eax)
c00324ea:	90                   	nop
c00324eb:	c9                   	leave  
c00324ec:	c3                   	ret    

c00324ed <inode_length>:
c00324ed:	55                   	push   %ebp
c00324ee:	89 e5                	mov    %esp,%ebp
c00324f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00324f3:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
c00324f9:	5d                   	pop    %ebp
c00324fa:	c3                   	ret    

c00324fb <inode_dir>:
c00324fb:	55                   	push   %ebp
c00324fc:	89 e5                	mov    %esp,%ebp
c00324fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0032501:	0f b6 80 0c 02 00 00 	movzbl 0x20c(%eax),%eax
c0032508:	5d                   	pop    %ebp
c0032509:	c3                   	ret    

c003250a <inode_num>:
c003250a:	55                   	push   %ebp
c003250b:	89 e5                	mov    %esp,%ebp
c003250d:	8b 45 08             	mov    0x8(%ebp),%eax
c0032510:	8b 40 08             	mov    0x8(%eax),%eax
c0032513:	5d                   	pop    %ebp
c0032514:	c3                   	ret    

c0032515 <inode_is_removed>:
c0032515:	55                   	push   %ebp
c0032516:	89 e5                	mov    %esp,%ebp
c0032518:	8b 45 08             	mov    0x8(%ebp),%eax
c003251b:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c003251f:	5d                   	pop    %ebp
c0032520:	c3                   	ret    

c0032521 <fsutil_ls>:
c0032521:	55                   	push   %ebp
c0032522:	89 e5                	mov    %esp,%ebp
c0032524:	83 ec 28             	sub    $0x28,%esp
c0032527:	83 ec 0c             	sub    $0xc,%esp
c003252a:	68 dc 7a 03 c0       	push   $0xc0037adc
c003252f:	e8 24 a3 ff ff       	call   c002c858 <puts>
c0032534:	83 c4 10             	add    $0x10,%esp
c0032537:	e8 03 eb ff ff       	call   c003103f <dir_open_root>
c003253c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003253f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0032543:	75 25                	jne    c003256a <fsutil_ls+0x49>
c0032545:	68 f9 7a 03 c0       	push   $0xc0037af9
c003254a:	68 84 7d 03 c0       	push   $0xc0037d84
c003254f:	6a 18                	push   $0x18
c0032551:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032556:	e8 36 80 ff ff       	call   c002a591 <debug_panic>
c003255b:	83 ec 0c             	sub    $0xc,%esp
c003255e:	8d 45 e5             	lea    -0x1b(%ebp),%eax
c0032561:	50                   	push   %eax
c0032562:	e8 f1 a2 ff ff       	call   c002c858 <puts>
c0032567:	83 c4 10             	add    $0x10,%esp
c003256a:	83 ec 08             	sub    $0x8,%esp
c003256d:	8d 45 e5             	lea    -0x1b(%ebp),%eax
c0032570:	50                   	push   %eax
c0032571:	ff 75 f4             	pushl  -0xc(%ebp)
c0032574:	e8 95 f0 ff ff       	call   c003160e <dir_readdir>
c0032579:	83 c4 10             	add    $0x10,%esp
c003257c:	84 c0                	test   %al,%al
c003257e:	75 db                	jne    c003255b <fsutil_ls+0x3a>
c0032580:	83 ec 0c             	sub    $0xc,%esp
c0032583:	ff 75 f4             	pushl  -0xc(%ebp)
c0032586:	e8 a9 ec ff ff       	call   c0031234 <dir_close>
c003258b:	83 c4 10             	add    $0x10,%esp
c003258e:	83 ec 0c             	sub    $0xc,%esp
c0032591:	68 25 7b 03 c0       	push   $0xc0037b25
c0032596:	e8 bd a2 ff ff       	call   c002c858 <puts>
c003259b:	83 c4 10             	add    $0x10,%esp
c003259e:	90                   	nop
c003259f:	c9                   	leave  
c00325a0:	c3                   	ret    

c00325a1 <fsutil_cat>:
c00325a1:	55                   	push   %ebp
c00325a2:	89 e5                	mov    %esp,%ebp
c00325a4:	83 ec 28             	sub    $0x28,%esp
c00325a7:	8b 45 08             	mov    0x8(%ebp),%eax
c00325aa:	8b 40 04             	mov    0x4(%eax),%eax
c00325ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00325b0:	83 ec 08             	sub    $0x8,%esp
c00325b3:	ff 75 f4             	pushl  -0xc(%ebp)
c00325b6:	68 38 7b 03 c0       	push   $0xc0037b38
c00325bb:	e8 70 5a ff ff       	call   c0028030 <printf>
c00325c0:	83 c4 10             	add    $0x10,%esp
c00325c3:	83 ec 0c             	sub    $0xc,%esp
c00325c6:	ff 75 f4             	pushl  -0xc(%ebp)
c00325c9:	e8 cb db ff ff       	call   c0030199 <filesys_open>
c00325ce:	83 c4 10             	add    $0x10,%esp
c00325d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00325d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00325d8:	75 1c                	jne    c00325f6 <fsutil_cat+0x55>
c00325da:	83 ec 0c             	sub    $0xc,%esp
c00325dd:	ff 75 f4             	pushl  -0xc(%ebp)
c00325e0:	68 59 7b 03 c0       	push   $0xc0037b59
c00325e5:	68 90 7d 03 c0       	push   $0xc0037d90
c00325ea:	6a 2c                	push   $0x2c
c00325ec:	68 0e 7b 03 c0       	push   $0xc0037b0e
c00325f1:	e8 9b 7f ff ff       	call   c002a591 <debug_panic>
c00325f6:	83 ec 0c             	sub    $0xc,%esp
c00325f9:	6a 01                	push   $0x1
c00325fb:	e8 08 18 ff ff       	call   c0023e08 <palloc_get_page>
c0032600:	83 c4 10             	add    $0x10,%esp
c0032603:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0032606:	83 ec 0c             	sub    $0xc,%esp
c0032609:	ff 75 f0             	pushl  -0x10(%ebp)
c003260c:	e8 8a e3 ff ff       	call   c003099b <file_tell>
c0032611:	83 c4 10             	add    $0x10,%esp
c0032614:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0032617:	83 ec 04             	sub    $0x4,%esp
c003261a:	68 00 10 00 00       	push   $0x1000
c003261f:	ff 75 ec             	pushl  -0x14(%ebp)
c0032622:	ff 75 f0             	pushl  -0x10(%ebp)
c0032625:	e8 79 e1 ff ff       	call   c00307a3 <file_read>
c003262a:	83 c4 10             	add    $0x10,%esp
c003262d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0032630:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0032634:	74 17                	je     c003264d <fsutil_cat+0xac>
c0032636:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0032639:	8b 45 e8             	mov    -0x18(%ebp),%eax
c003263c:	6a 01                	push   $0x1
c003263e:	52                   	push   %edx
c003263f:	ff 75 ec             	pushl  -0x14(%ebp)
c0032642:	50                   	push   %eax
c0032643:	e8 23 65 ff ff       	call   c0028b6b <hex_dump>
c0032648:	83 c4 10             	add    $0x10,%esp
c003264b:	eb b9                	jmp    c0032606 <fsutil_cat+0x65>
c003264d:	90                   	nop
c003264e:	83 ec 0c             	sub    $0xc,%esp
c0032651:	ff 75 ec             	pushl  -0x14(%ebp)
c0032654:	e8 07 19 ff ff       	call   c0023f60 <palloc_free_page>
c0032659:	83 c4 10             	add    $0x10,%esp
c003265c:	83 ec 0c             	sub    $0xc,%esp
c003265f:	ff 75 f0             	pushl  -0x10(%ebp)
c0032662:	e8 f6 e0 ff ff       	call   c003075d <file_close>
c0032667:	83 c4 10             	add    $0x10,%esp
c003266a:	90                   	nop
c003266b:	c9                   	leave  
c003266c:	c3                   	ret    

c003266d <fsutil_rm>:
c003266d:	55                   	push   %ebp
c003266e:	89 e5                	mov    %esp,%ebp
c0032670:	83 ec 18             	sub    $0x18,%esp
c0032673:	8b 45 08             	mov    0x8(%ebp),%eax
c0032676:	8b 40 04             	mov    0x4(%eax),%eax
c0032679:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003267c:	83 ec 08             	sub    $0x8,%esp
c003267f:	ff 75 f4             	pushl  -0xc(%ebp)
c0032682:	68 69 7b 03 c0       	push   $0xc0037b69
c0032687:	e8 a4 59 ff ff       	call   c0028030 <printf>
c003268c:	83 c4 10             	add    $0x10,%esp
c003268f:	83 ec 0c             	sub    $0xc,%esp
c0032692:	ff 75 f4             	pushl  -0xc(%ebp)
c0032695:	e8 41 dc ff ff       	call   c00302db <filesys_remove>
c003269a:	83 c4 10             	add    $0x10,%esp
c003269d:	83 f0 01             	xor    $0x1,%eax
c00326a0:	84 c0                	test   %al,%al
c00326a2:	74 1c                	je     c00326c0 <fsutil_rm+0x53>
c00326a4:	83 ec 0c             	sub    $0xc,%esp
c00326a7:	ff 75 f4             	pushl  -0xc(%ebp)
c00326aa:	68 7b 7b 03 c0       	push   $0xc0037b7b
c00326af:	68 9c 7d 03 c0       	push   $0xc0037d9c
c00326b4:	6a 43                	push   $0x43
c00326b6:	68 0e 7b 03 c0       	push   $0xc0037b0e
c00326bb:	e8 d1 7e ff ff       	call   c002a591 <debug_panic>
c00326c0:	90                   	nop
c00326c1:	c9                   	leave  
c00326c2:	c3                   	ret    

c00326c3 <fsutil_extract>:
c00326c3:	55                   	push   %ebp
c00326c4:	89 e5                	mov    %esp,%ebp
c00326c6:	83 ec 38             	sub    $0x38,%esp
c00326c9:	83 ec 0c             	sub    $0xc,%esp
c00326cc:	68 00 02 00 00       	push   $0x200
c00326d1:	e8 7d 1a ff ff       	call   c0024153 <malloc>
c00326d6:	83 c4 10             	add    $0x10,%esp
c00326d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00326dc:	83 ec 0c             	sub    $0xc,%esp
c00326df:	68 00 02 00 00       	push   $0x200
c00326e4:	e8 6a 1a ff ff       	call   c0024153 <malloc>
c00326e9:	83 c4 10             	add    $0x10,%esp
c00326ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00326ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00326f3:	74 06                	je     c00326fb <fsutil_extract+0x38>
c00326f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00326f9:	75 16                	jne    c0032711 <fsutil_extract+0x4e>
c00326fb:	68 8e 7b 03 c0       	push   $0xc0037b8e
c0032700:	68 a8 7d 03 c0       	push   $0xc0037da8
c0032705:	6a 54                	push   $0x54
c0032707:	68 0e 7b 03 c0       	push   $0xc0037b0e
c003270c:	e8 80 7e ff ff       	call   c002a591 <debug_panic>
c0032711:	83 ec 0c             	sub    $0xc,%esp
c0032714:	6a 02                	push   $0x2
c0032716:	e8 a9 34 ff ff       	call   c0025bc4 <block_get_role>
c003271b:	83 c4 10             	add    $0x10,%esp
c003271e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0032721:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0032725:	75 16                	jne    c003273d <fsutil_extract+0x7a>
c0032727:	68 a8 7b 03 c0       	push   $0xc0037ba8
c003272c:	68 a8 7d 03 c0       	push   $0xc0037da8
c0032731:	6a 59                	push   $0x59
c0032733:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032738:	e8 54 7e ff ff       	call   c002a591 <debug_panic>
c003273d:	83 ec 0c             	sub    $0xc,%esp
c0032740:	68 c8 7b 03 c0       	push   $0xc0037bc8
c0032745:	e8 0e a1 ff ff       	call   c002c858 <puts>
c003274a:	83 c4 10             	add    $0x10,%esp
c003274d:	a1 d0 86 04 c0       	mov    0xc00486d0,%eax
c0032752:	8d 50 01             	lea    0x1(%eax),%edx
c0032755:	89 15 d0 86 04 c0    	mov    %edx,0xc00486d0
c003275b:	83 ec 04             	sub    $0x4,%esp
c003275e:	ff 75 f4             	pushl  -0xc(%ebp)
c0032761:	50                   	push   %eax
c0032762:	ff 75 ec             	pushl  -0x14(%ebp)
c0032765:	e8 cd 35 ff ff       	call   c0025d37 <block_read>
c003276a:	83 c4 10             	add    $0x10,%esp
c003276d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0032770:	50                   	push   %eax
c0032771:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0032774:	50                   	push   %eax
c0032775:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0032778:	50                   	push   %eax
c0032779:	ff 75 f4             	pushl  -0xc(%ebp)
c003277c:	e8 36 7b ff ff       	call   c002a2b7 <ustar_parse_header>
c0032781:	83 c4 10             	add    $0x10,%esp
c0032784:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0032787:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c003278b:	74 25                	je     c00327b2 <fsutil_extract+0xef>
c003278d:	a1 d0 86 04 c0       	mov    0xc00486d0,%eax
c0032792:	83 e8 01             	sub    $0x1,%eax
c0032795:	83 ec 08             	sub    $0x8,%esp
c0032798:	ff 75 e8             	pushl  -0x18(%ebp)
c003279b:	50                   	push   %eax
c003279c:	68 0c 7c 03 c0       	push   $0xc0037c0c
c00327a1:	68 a8 7d 03 c0       	push   $0xc0037da8
c00327a6:	6a 69                	push   $0x69
c00327a8:	68 0e 7b 03 c0       	push   $0xc0037b0e
c00327ad:	e8 df 7d ff ff       	call   c002a591 <debug_panic>
c00327b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00327b5:	83 f8 ff             	cmp    $0xffffffff,%eax
c00327b8:	75 6c                	jne    c0032826 <fsutil_extract+0x163>
c00327ba:	83 ec 0c             	sub    $0xc,%esp
c00327bd:	68 2f 7c 03 c0       	push   $0xc0037c2f
c00327c2:	e8 91 a0 ff ff       	call   c002c858 <puts>
c00327c7:	83 c4 10             	add    $0x10,%esp
c00327ca:	83 ec 04             	sub    $0x4,%esp
c00327cd:	68 00 02 00 00       	push   $0x200
c00327d2:	6a 00                	push   $0x0
c00327d4:	ff 75 f4             	pushl  -0xc(%ebp)
c00327d7:	e8 7b 70 ff ff       	call   c0029857 <memset>
c00327dc:	83 c4 10             	add    $0x10,%esp
c00327df:	83 ec 04             	sub    $0x4,%esp
c00327e2:	ff 75 f4             	pushl  -0xc(%ebp)
c00327e5:	6a 00                	push   $0x0
c00327e7:	ff 75 ec             	pushl  -0x14(%ebp)
c00327ea:	e8 97 35 ff ff       	call   c0025d86 <block_write>
c00327ef:	83 c4 10             	add    $0x10,%esp
c00327f2:	83 ec 04             	sub    $0x4,%esp
c00327f5:	ff 75 f4             	pushl  -0xc(%ebp)
c00327f8:	6a 01                	push   $0x1
c00327fa:	ff 75 ec             	pushl  -0x14(%ebp)
c00327fd:	e8 84 35 ff ff       	call   c0025d86 <block_write>
c0032802:	83 c4 10             	add    $0x10,%esp
c0032805:	83 ec 0c             	sub    $0xc,%esp
c0032808:	ff 75 f0             	pushl  -0x10(%ebp)
c003280b:	e8 40 1c ff ff       	call   c0024450 <free>
c0032810:	83 c4 10             	add    $0x10,%esp
c0032813:	83 ec 0c             	sub    $0xc,%esp
c0032816:	ff 75 f4             	pushl  -0xc(%ebp)
c0032819:	e8 32 1c ff ff       	call   c0024450 <free>
c003281e:	83 c4 10             	add    $0x10,%esp
c0032821:	e9 44 01 00 00       	jmp    c003296a <fsutil_extract+0x2a7>
c0032826:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0032829:	83 f8 35             	cmp    $0x35,%eax
c003282c:	75 19                	jne    c0032847 <fsutil_extract+0x184>
c003282e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0032831:	83 ec 08             	sub    $0x8,%esp
c0032834:	50                   	push   %eax
c0032835:	68 48 7c 03 c0       	push   $0xc0037c48
c003283a:	e8 f1 57 ff ff       	call   c0028030 <printf>
c003283f:	83 c4 10             	add    $0x10,%esp
c0032842:	e9 06 ff ff ff       	jmp    c003274d <fsutil_extract+0x8a>
c0032847:	8b 45 d8             	mov    -0x28(%ebp),%eax
c003284a:	83 f8 30             	cmp    $0x30,%eax
c003284d:	0f 85 fa fe ff ff    	jne    c003274d <fsutil_extract+0x8a>
c0032853:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0032856:	83 ec 08             	sub    $0x8,%esp
c0032859:	50                   	push   %eax
c003285a:	68 60 7c 03 c0       	push   $0xc0037c60
c003285f:	e8 cc 57 ff ff       	call   c0028030 <printf>
c0032864:	83 c4 10             	add    $0x10,%esp
c0032867:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c003286a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c003286d:	83 ec 08             	sub    $0x8,%esp
c0032870:	52                   	push   %edx
c0032871:	50                   	push   %eax
c0032872:	e8 db d7 ff ff       	call   c0030052 <filesys_create>
c0032877:	83 c4 10             	add    $0x10,%esp
c003287a:	83 f0 01             	xor    $0x1,%eax
c003287d:	84 c0                	test   %al,%al
c003287f:	74 1d                	je     c003289e <fsutil_extract+0x1db>
c0032881:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0032884:	83 ec 0c             	sub    $0xc,%esp
c0032887:	50                   	push   %eax
c0032888:	68 86 7c 03 c0       	push   $0xc0037c86
c003288d:	68 a8 7d 03 c0       	push   $0xc0037da8
c0032892:	6a 7a                	push   $0x7a
c0032894:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032899:	e8 f3 7c ff ff       	call   c002a591 <debug_panic>
c003289e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00328a1:	83 ec 0c             	sub    $0xc,%esp
c00328a4:	50                   	push   %eax
c00328a5:	e8 ef d8 ff ff       	call   c0030199 <filesys_open>
c00328aa:	83 c4 10             	add    $0x10,%esp
c00328ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00328b0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00328b4:	0f 85 96 00 00 00    	jne    c0032950 <fsutil_extract+0x28d>
c00328ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00328bd:	83 ec 0c             	sub    $0xc,%esp
c00328c0:	50                   	push   %eax
c00328c1:	68 59 7b 03 c0       	push   $0xc0037b59
c00328c6:	68 a8 7d 03 c0       	push   $0xc0037da8
c00328cb:	6a 7d                	push   $0x7d
c00328cd:	68 0e 7b 03 c0       	push   $0xc0037b0e
c00328d2:	e8 ba 7c ff ff       	call   c002a591 <debug_panic>
c00328d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00328da:	ba 00 02 00 00       	mov    $0x200,%edx
c00328df:	3d 00 02 00 00       	cmp    $0x200,%eax
c00328e4:	0f 4f c2             	cmovg  %edx,%eax
c00328e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00328ea:	a1 d0 86 04 c0       	mov    0xc00486d0,%eax
c00328ef:	8d 50 01             	lea    0x1(%eax),%edx
c00328f2:	89 15 d0 86 04 c0    	mov    %edx,0xc00486d0
c00328f8:	83 ec 04             	sub    $0x4,%esp
c00328fb:	ff 75 f0             	pushl  -0x10(%ebp)
c00328fe:	50                   	push   %eax
c00328ff:	ff 75 ec             	pushl  -0x14(%ebp)
c0032902:	e8 30 34 ff ff       	call   c0025d37 <block_read>
c0032907:	83 c4 10             	add    $0x10,%esp
c003290a:	83 ec 04             	sub    $0x4,%esp
c003290d:	ff 75 e0             	pushl  -0x20(%ebp)
c0032910:	ff 75 f0             	pushl  -0x10(%ebp)
c0032913:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032916:	e8 e1 de ff ff       	call   c00307fc <file_write>
c003291b:	83 c4 10             	add    $0x10,%esp
c003291e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0032921:	74 24                	je     c0032947 <fsutil_extract+0x284>
c0032923:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0032926:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0032929:	83 ec 08             	sub    $0x8,%esp
c003292c:	52                   	push   %edx
c003292d:	50                   	push   %eax
c003292e:	68 98 7c 03 c0       	push   $0xc0037c98
c0032933:	68 a8 7d 03 c0       	push   $0xc0037da8
c0032938:	68 88 00 00 00       	push   $0x88
c003293d:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032942:	e8 4a 7c ff ff       	call   c002a591 <debug_panic>
c0032947:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c003294a:	2b 45 e0             	sub    -0x20(%ebp),%eax
c003294d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0032950:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0032953:	85 c0                	test   %eax,%eax
c0032955:	7f 80                	jg     c00328d7 <fsutil_extract+0x214>
c0032957:	83 ec 0c             	sub    $0xc,%esp
c003295a:	ff 75 e4             	pushl  -0x1c(%ebp)
c003295d:	e8 fb dd ff ff       	call   c003075d <file_close>
c0032962:	83 c4 10             	add    $0x10,%esp
c0032965:	e9 e3 fd ff ff       	jmp    c003274d <fsutil_extract+0x8a>
c003296a:	c9                   	leave  
c003296b:	c3                   	ret    

c003296c <fsutil_append>:
c003296c:	55                   	push   %ebp
c003296d:	89 e5                	mov    %esp,%ebp
c003296f:	83 ec 28             	sub    $0x28,%esp
c0032972:	8b 45 08             	mov    0x8(%ebp),%eax
c0032975:	8b 40 04             	mov    0x4(%eax),%eax
c0032978:	89 45 f0             	mov    %eax,-0x10(%ebp)
c003297b:	83 ec 08             	sub    $0x8,%esp
c003297e:	ff 75 f0             	pushl  -0x10(%ebp)
c0032981:	68 c4 7c 03 c0       	push   $0xc0037cc4
c0032986:	e8 a5 56 ff ff       	call   c0028030 <printf>
c003298b:	83 c4 10             	add    $0x10,%esp
c003298e:	83 ec 0c             	sub    $0xc,%esp
c0032991:	68 00 02 00 00       	push   $0x200
c0032996:	e8 b8 17 ff ff       	call   c0024153 <malloc>
c003299b:	83 c4 10             	add    $0x10,%esp
c003299e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00329a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00329a5:	75 19                	jne    c00329c0 <fsutil_append+0x54>
c00329a7:	68 fa 7c 03 c0       	push   $0xc0037cfa
c00329ac:	68 b8 7d 03 c0       	push   $0xc0037db8
c00329b1:	68 b6 00 00 00       	push   $0xb6
c00329b6:	68 0e 7b 03 c0       	push   $0xc0037b0e
c00329bb:	e8 d1 7b ff ff       	call   c002a591 <debug_panic>
c00329c0:	83 ec 0c             	sub    $0xc,%esp
c00329c3:	ff 75 f0             	pushl  -0x10(%ebp)
c00329c6:	e8 ce d7 ff ff       	call   c0030199 <filesys_open>
c00329cb:	83 c4 10             	add    $0x10,%esp
c00329ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00329d1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00329d5:	75 1f                	jne    c00329f6 <fsutil_append+0x8a>
c00329d7:	83 ec 0c             	sub    $0xc,%esp
c00329da:	ff 75 f0             	pushl  -0x10(%ebp)
c00329dd:	68 59 7b 03 c0       	push   $0xc0037b59
c00329e2:	68 b8 7d 03 c0       	push   $0xc0037db8
c00329e7:	68 bb 00 00 00       	push   $0xbb
c00329ec:	68 0e 7b 03 c0       	push   $0xc0037b0e
c00329f1:	e8 9b 7b ff ff       	call   c002a591 <debug_panic>
c00329f6:	83 ec 0c             	sub    $0xc,%esp
c00329f9:	ff 75 e8             	pushl  -0x18(%ebp)
c00329fc:	e8 fa de ff ff       	call   c00308fb <file_length>
c0032a01:	83 c4 10             	add    $0x10,%esp
c0032a04:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0032a07:	83 ec 0c             	sub    $0xc,%esp
c0032a0a:	6a 02                	push   $0x2
c0032a0c:	e8 b3 31 ff ff       	call   c0025bc4 <block_get_role>
c0032a11:	83 c4 10             	add    $0x10,%esp
c0032a14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0032a17:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0032a1b:	75 19                	jne    c0032a36 <fsutil_append+0xca>
c0032a1d:	68 a8 7b 03 c0       	push   $0xc0037ba8
c0032a22:	68 b8 7d 03 c0       	push   $0xc0037db8
c0032a27:	68 c1 00 00 00       	push   $0xc1
c0032a2c:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032a31:	e8 5b 7b ff ff       	call   c002a591 <debug_panic>
c0032a36:	ff 75 ec             	pushl  -0x14(%ebp)
c0032a39:	ff 75 f4             	pushl  -0xc(%ebp)
c0032a3c:	6a 30                	push   $0x30
c0032a3e:	ff 75 f0             	pushl  -0x10(%ebp)
c0032a41:	e8 d8 75 ff ff       	call   c002a01e <ustar_make_header>
c0032a46:	83 c4 10             	add    $0x10,%esp
c0032a49:	83 f0 01             	xor    $0x1,%eax
c0032a4c:	84 c0                	test   %al,%al
c0032a4e:	74 1f                	je     c0032a6f <fsutil_append+0x103>
c0032a50:	83 ec 0c             	sub    $0xc,%esp
c0032a53:	ff 75 f0             	pushl  -0x10(%ebp)
c0032a56:	68 14 7d 03 c0       	push   $0xc0037d14
c0032a5b:	68 b8 7d 03 c0       	push   $0xc0037db8
c0032a60:	68 c5 00 00 00       	push   $0xc5
c0032a65:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032a6a:	e8 22 7b ff ff       	call   c002a591 <debug_panic>
c0032a6f:	a1 d4 86 04 c0       	mov    0xc00486d4,%eax
c0032a74:	8d 50 01             	lea    0x1(%eax),%edx
c0032a77:	89 15 d4 86 04 c0    	mov    %edx,0xc00486d4
c0032a7d:	83 ec 04             	sub    $0x4,%esp
c0032a80:	ff 75 ec             	pushl  -0x14(%ebp)
c0032a83:	50                   	push   %eax
c0032a84:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032a87:	e8 fa 32 ff ff       	call   c0025d86 <block_write>
c0032a8c:	83 c4 10             	add    $0x10,%esp
c0032a8f:	e9 cd 00 00 00       	jmp    c0032b61 <fsutil_append+0x1f5>
c0032a94:	b8 00 02 00 00       	mov    $0x200,%eax
c0032a99:	81 7d f4 00 02 00 00 	cmpl   $0x200,-0xc(%ebp)
c0032aa0:	0f 4e 45 f4          	cmovle -0xc(%ebp),%eax
c0032aa4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0032aa7:	83 ec 0c             	sub    $0xc,%esp
c0032aaa:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032aad:	e8 50 33 ff ff       	call   c0025e02 <block_size>
c0032ab2:	83 c4 10             	add    $0x10,%esp
c0032ab5:	89 c2                	mov    %eax,%edx
c0032ab7:	a1 d4 86 04 c0       	mov    0xc00486d4,%eax
c0032abc:	39 c2                	cmp    %eax,%edx
c0032abe:	77 1f                	ja     c0032adf <fsutil_append+0x173>
c0032ac0:	83 ec 0c             	sub    $0xc,%esp
c0032ac3:	ff 75 f0             	pushl  -0x10(%ebp)
c0032ac6:	68 38 7d 03 c0       	push   $0xc0037d38
c0032acb:	68 b8 7d 03 c0       	push   $0xc0037db8
c0032ad0:	68 cd 00 00 00       	push   $0xcd
c0032ad5:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032ada:	e8 b2 7a ff ff       	call   c002a591 <debug_panic>
c0032adf:	83 ec 04             	sub    $0x4,%esp
c0032ae2:	ff 75 e0             	pushl  -0x20(%ebp)
c0032ae5:	ff 75 ec             	pushl  -0x14(%ebp)
c0032ae8:	ff 75 e8             	pushl  -0x18(%ebp)
c0032aeb:	e8 b3 dc ff ff       	call   c00307a3 <file_read>
c0032af0:	83 c4 10             	add    $0x10,%esp
c0032af3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0032af6:	74 22                	je     c0032b1a <fsutil_append+0x1ae>
c0032af8:	83 ec 08             	sub    $0x8,%esp
c0032afb:	ff 75 f4             	pushl  -0xc(%ebp)
c0032afe:	ff 75 f0             	pushl  -0x10(%ebp)
c0032b01:	68 5c 7d 03 c0       	push   $0xc0037d5c
c0032b06:	68 b8 7d 03 c0       	push   $0xc0037db8
c0032b0b:	68 cf 00 00 00       	push   $0xcf
c0032b10:	68 0e 7b 03 c0       	push   $0xc0037b0e
c0032b15:	e8 77 7a ff ff       	call   c002a591 <debug_panic>
c0032b1a:	b8 00 02 00 00       	mov    $0x200,%eax
c0032b1f:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0032b22:	89 c1                	mov    %eax,%ecx
c0032b24:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0032b27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0032b2a:	01 d0                	add    %edx,%eax
c0032b2c:	83 ec 04             	sub    $0x4,%esp
c0032b2f:	51                   	push   %ecx
c0032b30:	6a 00                	push   $0x0
c0032b32:	50                   	push   %eax
c0032b33:	e8 1f 6d ff ff       	call   c0029857 <memset>
c0032b38:	83 c4 10             	add    $0x10,%esp
c0032b3b:	a1 d4 86 04 c0       	mov    0xc00486d4,%eax
c0032b40:	8d 50 01             	lea    0x1(%eax),%edx
c0032b43:	89 15 d4 86 04 c0    	mov    %edx,0xc00486d4
c0032b49:	83 ec 04             	sub    $0x4,%esp
c0032b4c:	ff 75 ec             	pushl  -0x14(%ebp)
c0032b4f:	50                   	push   %eax
c0032b50:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032b53:	e8 2e 32 ff ff       	call   c0025d86 <block_write>
c0032b58:	83 c4 10             	add    $0x10,%esp
c0032b5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0032b5e:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0032b61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0032b65:	0f 8f 29 ff ff ff    	jg     c0032a94 <fsutil_append+0x128>
c0032b6b:	83 ec 04             	sub    $0x4,%esp
c0032b6e:	68 00 02 00 00       	push   $0x200
c0032b73:	6a 00                	push   $0x0
c0032b75:	ff 75 ec             	pushl  -0x14(%ebp)
c0032b78:	e8 da 6c ff ff       	call   c0029857 <memset>
c0032b7d:	83 c4 10             	add    $0x10,%esp
c0032b80:	a1 d4 86 04 c0       	mov    0xc00486d4,%eax
c0032b85:	83 ec 04             	sub    $0x4,%esp
c0032b88:	ff 75 ec             	pushl  -0x14(%ebp)
c0032b8b:	50                   	push   %eax
c0032b8c:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032b8f:	e8 f2 31 ff ff       	call   c0025d86 <block_write>
c0032b94:	83 c4 10             	add    $0x10,%esp
c0032b97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0032b9a:	8d 50 01             	lea    0x1(%eax),%edx
c0032b9d:	a1 d4 86 04 c0       	mov    0xc00486d4,%eax
c0032ba2:	83 ec 04             	sub    $0x4,%esp
c0032ba5:	52                   	push   %edx
c0032ba6:	50                   	push   %eax
c0032ba7:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032baa:	e8 d7 31 ff ff       	call   c0025d86 <block_write>
c0032baf:	83 c4 10             	add    $0x10,%esp
c0032bb2:	83 ec 0c             	sub    $0xc,%esp
c0032bb5:	ff 75 e8             	pushl  -0x18(%ebp)
c0032bb8:	e8 a0 db ff ff       	call   c003075d <file_close>
c0032bbd:	83 c4 10             	add    $0x10,%esp
c0032bc0:	83 ec 0c             	sub    $0xc,%esp
c0032bc3:	ff 75 ec             	pushl  -0x14(%ebp)
c0032bc6:	e8 85 18 ff ff       	call   c0024450 <free>
c0032bcb:	83 c4 10             	add    $0x10,%esp
c0032bce:	90                   	nop
c0032bcf:	c9                   	leave  
c0032bd0:	c3                   	ret    

c0032bd1 <pg_ofs>:
c0032bd1:	55                   	push   %ebp
c0032bd2:	89 e5                	mov    %esp,%ebp
c0032bd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0032bd7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0032bdc:	5d                   	pop    %ebp
c0032bdd:	c3                   	ret    

c0032bde <is_kernel_vaddr>:
c0032bde:	55                   	push   %ebp
c0032bdf:	89 e5                	mov    %esp,%ebp
c0032be1:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0032be8:	0f 97 c0             	seta   %al
c0032beb:	5d                   	pop    %ebp
c0032bec:	c3                   	ret    

c0032bed <vm_frame_init>:
c0032bed:	55                   	push   %ebp
c0032bee:	89 e5                	mov    %esp,%ebp
c0032bf0:	83 ec 08             	sub    $0x8,%esp
c0032bf3:	83 ec 0c             	sub    $0xc,%esp
c0032bf6:	68 e0 86 04 c0       	push   $0xc00486e0
c0032bfb:	e8 e1 08 ff ff       	call   c00234e1 <lock_init>
c0032c00:	83 c4 10             	add    $0x10,%esp
c0032c03:	6a 00                	push   $0x0
c0032c05:	68 6b 32 03 c0       	push   $0xc003326b
c0032c0a:	68 49 32 03 c0       	push   $0xc0033249
c0032c0f:	68 04 87 04 c0       	push   $0xc0048704
c0032c14:	e8 34 92 ff ff       	call   c002be4d <hash_init>
c0032c19:	83 c4 10             	add    $0x10,%esp
c0032c1c:	83 ec 0c             	sub    $0xc,%esp
c0032c1f:	68 1c 87 04 c0       	push   $0xc004871c
c0032c24:	e8 db 7b ff ff       	call   c002a804 <list_init>
c0032c29:	83 c4 10             	add    $0x10,%esp
c0032c2c:	c7 05 2c 87 04 c0 00 	movl   $0x0,0xc004872c
c0032c33:	00 00 00 
c0032c36:	90                   	nop
c0032c37:	c9                   	leave  
c0032c38:	c3                   	ret    

c0032c39 <vm_frame_allocate>:
c0032c39:	55                   	push   %ebp
c0032c3a:	89 e5                	mov    %esp,%ebp
c0032c3c:	83 ec 28             	sub    $0x28,%esp
c0032c3f:	83 ec 0c             	sub    $0xc,%esp
c0032c42:	68 e0 86 04 c0       	push   $0xc00486e0
c0032c47:	e8 e2 08 ff ff       	call   c002352e <lock_acquire>
c0032c4c:	83 c4 10             	add    $0x10,%esp
c0032c4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0032c52:	83 c8 04             	or     $0x4,%eax
c0032c55:	83 ec 0c             	sub    $0xc,%esp
c0032c58:	50                   	push   %eax
c0032c59:	e8 aa 11 ff ff       	call   c0023e08 <palloc_get_page>
c0032c5e:	83 c4 10             	add    $0x10,%esp
c0032c61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0032c64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0032c68:	0f 85 a4 01 00 00    	jne    c0032e12 <vm_frame_allocate+0x1d9>
c0032c6e:	e8 76 e2 fe ff       	call   c0020ee9 <thread_current>
c0032c73:	8b 40 30             	mov    0x30(%eax),%eax
c0032c76:	83 ec 0c             	sub    $0xc,%esp
c0032c79:	50                   	push   %eax
c0032c7a:	e8 15 05 00 00       	call   c0033194 <pick_frame_to_evicted>
c0032c7f:	83 c4 10             	add    $0x10,%esp
c0032c82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0032c85:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0032c89:	74 0a                	je     c0032c95 <vm_frame_allocate+0x5c>
c0032c8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032c8e:	8b 40 18             	mov    0x18(%eax),%eax
c0032c91:	85 c0                	test   %eax,%eax
c0032c93:	75 1e                	jne    c0032cb3 <vm_frame_allocate+0x7a>
c0032c95:	83 ec 0c             	sub    $0xc,%esp
c0032c98:	68 c8 7d 03 c0       	push   $0xc0037dc8
c0032c9d:	68 fa 7d 03 c0       	push   $0xc0037dfa
c0032ca2:	68 a0 7f 03 c0       	push   $0xc0037fa0
c0032ca7:	6a 34                	push   $0x34
c0032ca9:	68 11 7e 03 c0       	push   $0xc0037e11
c0032cae:	e8 de 78 ff ff       	call   c002a591 <debug_panic>
c0032cb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032cb6:	8b 40 18             	mov    0x18(%eax),%eax
c0032cb9:	8b 40 30             	mov    0x30(%eax),%eax
c0032cbc:	3d cc cc cc cc       	cmp    $0xcccccccc,%eax
c0032cc1:	75 1e                	jne    c0032ce1 <vm_frame_allocate+0xa8>
c0032cc3:	83 ec 0c             	sub    $0xc,%esp
c0032cc6:	68 24 7e 03 c0       	push   $0xc0037e24
c0032ccb:	68 fa 7d 03 c0       	push   $0xc0037dfa
c0032cd0:	68 a0 7f 03 c0       	push   $0xc0037fa0
c0032cd5:	6a 36                	push   $0x36
c0032cd7:	68 11 7e 03 c0       	push   $0xc0037e11
c0032cdc:	e8 b0 78 ff ff       	call   c002a591 <debug_panic>
c0032ce1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032ce4:	8b 50 04             	mov    0x4(%eax),%edx
c0032ce7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032cea:	8b 40 18             	mov    0x18(%eax),%eax
c0032ced:	8b 40 30             	mov    0x30(%eax),%eax
c0032cf0:	83 ec 08             	sub    $0x8,%esp
c0032cf3:	52                   	push   %edx
c0032cf4:	50                   	push   %eax
c0032cf5:	e8 3d b1 ff ff       	call   c002de37 <pagedir_clear_page>
c0032cfa:	83 c4 10             	add    $0x10,%esp
c0032cfd:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
c0032d01:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0032d05:	75 20                	jne    c0032d27 <vm_frame_allocate+0xee>
c0032d07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032d0a:	8b 50 04             	mov    0x4(%eax),%edx
c0032d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032d10:	8b 40 18             	mov    0x18(%eax),%eax
c0032d13:	8b 40 30             	mov    0x30(%eax),%eax
c0032d16:	83 ec 08             	sub    $0x8,%esp
c0032d19:	52                   	push   %edx
c0032d1a:	50                   	push   %eax
c0032d1b:	e8 c8 b1 ff ff       	call   c002dee8 <pagedir_is_dirty>
c0032d20:	83 c4 10             	add    $0x10,%esp
c0032d23:	84 c0                	test   %al,%al
c0032d25:	74 07                	je     c0032d2e <vm_frame_allocate+0xf5>
c0032d27:	b8 01 00 00 00       	mov    $0x1,%eax
c0032d2c:	eb 05                	jmp    c0032d33 <vm_frame_allocate+0xfa>
c0032d2e:	b8 00 00 00 00       	mov    $0x0,%eax
c0032d33:	88 45 ef             	mov    %al,-0x11(%ebp)
c0032d36:	80 65 ef 01          	andb   $0x1,-0x11(%ebp)
c0032d3a:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0032d3e:	75 1f                	jne    c0032d5f <vm_frame_allocate+0x126>
c0032d40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032d43:	8b 10                	mov    (%eax),%edx
c0032d45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032d48:	8b 40 18             	mov    0x18(%eax),%eax
c0032d4b:	8b 40 30             	mov    0x30(%eax),%eax
c0032d4e:	83 ec 08             	sub    $0x8,%esp
c0032d51:	52                   	push   %edx
c0032d52:	50                   	push   %eax
c0032d53:	e8 90 b1 ff ff       	call   c002dee8 <pagedir_is_dirty>
c0032d58:	83 c4 10             	add    $0x10,%esp
c0032d5b:	84 c0                	test   %al,%al
c0032d5d:	74 07                	je     c0032d66 <vm_frame_allocate+0x12d>
c0032d5f:	b8 01 00 00 00       	mov    $0x1,%eax
c0032d64:	eb 05                	jmp    c0032d6b <vm_frame_allocate+0x132>
c0032d66:	b8 00 00 00 00       	mov    $0x0,%eax
c0032d6b:	88 45 ef             	mov    %al,-0x11(%ebp)
c0032d6e:	80 65 ef 01          	andb   $0x1,-0x11(%ebp)
c0032d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032d75:	8b 00                	mov    (%eax),%eax
c0032d77:	83 ec 0c             	sub    $0xc,%esp
c0032d7a:	50                   	push   %eax
c0032d7b:	e8 de 0d 00 00       	call   c0033b5e <vm_swap_out>
c0032d80:	83 c4 10             	add    $0x10,%esp
c0032d83:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0032d86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032d89:	8b 50 04             	mov    0x4(%eax),%edx
c0032d8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032d8f:	8b 40 18             	mov    0x18(%eax),%eax
c0032d92:	8b 40 64             	mov    0x64(%eax),%eax
c0032d95:	83 ec 04             	sub    $0x4,%esp
c0032d98:	ff 75 e8             	pushl  -0x18(%ebp)
c0032d9b:	52                   	push   %edx
c0032d9c:	50                   	push   %eax
c0032d9d:	e8 57 06 00 00       	call   c00333f9 <vm_supt_set_swap>
c0032da2:	83 c4 10             	add    $0x10,%esp
c0032da5:	0f b6 4d ef          	movzbl -0x11(%ebp),%ecx
c0032da9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032dac:	8b 50 04             	mov    0x4(%eax),%edx
c0032daf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032db2:	8b 40 18             	mov    0x18(%eax),%eax
c0032db5:	8b 40 64             	mov    0x64(%eax),%eax
c0032db8:	83 ec 04             	sub    $0x4,%esp
c0032dbb:	51                   	push   %ecx
c0032dbc:	52                   	push   %edx
c0032dbd:	50                   	push   %eax
c0032dbe:	e8 83 07 00 00       	call   c0033546 <vm_supt_set_dirty>
c0032dc3:	83 c4 10             	add    $0x10,%esp
c0032dc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032dc9:	8b 00                	mov    (%eax),%eax
c0032dcb:	83 ec 08             	sub    $0x8,%esp
c0032dce:	6a 01                	push   $0x1
c0032dd0:	50                   	push   %eax
c0032dd1:	e8 f3 01 00 00       	call   c0032fc9 <vm_frame_do_free>
c0032dd6:	83 c4 10             	add    $0x10,%esp
c0032dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0032ddc:	83 c8 04             	or     $0x4,%eax
c0032ddf:	83 ec 0c             	sub    $0xc,%esp
c0032de2:	50                   	push   %eax
c0032de3:	e8 20 10 ff ff       	call   c0023e08 <palloc_get_page>
c0032de8:	83 c4 10             	add    $0x10,%esp
c0032deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0032dee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0032df2:	75 1e                	jne    c0032e12 <vm_frame_allocate+0x1d9>
c0032df4:	83 ec 0c             	sub    $0xc,%esp
c0032df7:	68 57 7e 03 c0       	push   $0xc0037e57
c0032dfc:	68 fa 7d 03 c0       	push   $0xc0037dfa
c0032e01:	68 a0 7f 03 c0       	push   $0xc0037fa0
c0032e06:	6a 42                	push   $0x42
c0032e08:	68 11 7e 03 c0       	push   $0xc0037e11
c0032e0d:	e8 7f 77 ff ff       	call   c002a591 <debug_panic>
c0032e12:	83 ec 0c             	sub    $0xc,%esp
c0032e15:	6a 20                	push   $0x20
c0032e17:	e8 37 13 ff ff       	call   c0024153 <malloc>
c0032e1c:	83 c4 10             	add    $0x10,%esp
c0032e1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0032e22:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0032e26:	75 17                	jne    c0032e3f <vm_frame_allocate+0x206>
c0032e28:	83 ec 0c             	sub    $0xc,%esp
c0032e2b:	68 e0 86 04 c0       	push   $0xc00486e0
c0032e30:	e8 3a 09 ff ff       	call   c002376f <lock_release>
c0032e35:	83 c4 10             	add    $0x10,%esp
c0032e38:	b8 00 00 00 00       	mov    $0x0,%eax
c0032e3d:	eb 66                	jmp    c0032ea5 <vm_frame_allocate+0x26c>
c0032e3f:	e8 a5 e0 fe ff       	call   c0020ee9 <thread_current>
c0032e44:	89 c2                	mov    %eax,%edx
c0032e46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0032e49:	89 50 18             	mov    %edx,0x18(%eax)
c0032e4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0032e4f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0032e52:	89 50 04             	mov    %edx,0x4(%eax)
c0032e55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0032e58:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0032e5b:	89 10                	mov    %edx,(%eax)
c0032e5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0032e60:	c6 40 1c 01          	movb   $0x1,0x1c(%eax)
c0032e64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0032e67:	83 c0 08             	add    $0x8,%eax
c0032e6a:	83 ec 08             	sub    $0x8,%esp
c0032e6d:	50                   	push   %eax
c0032e6e:	68 04 87 04 c0       	push   $0xc0048704
c0032e73:	e8 18 91 ff ff       	call   c002bf90 <hash_insert>
c0032e78:	83 c4 10             	add    $0x10,%esp
c0032e7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0032e7e:	83 c0 10             	add    $0x10,%eax
c0032e81:	83 ec 08             	sub    $0x8,%esp
c0032e84:	50                   	push   %eax
c0032e85:	68 1c 87 04 c0       	push   $0xc004871c
c0032e8a:	e8 55 7d ff ff       	call   c002abe4 <list_push_back>
c0032e8f:	83 c4 10             	add    $0x10,%esp
c0032e92:	83 ec 0c             	sub    $0xc,%esp
c0032e95:	68 e0 86 04 c0       	push   $0xc00486e0
c0032e9a:	e8 d0 08 ff ff       	call   c002376f <lock_release>
c0032e9f:	83 c4 10             	add    $0x10,%esp
c0032ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0032ea5:	c9                   	leave  
c0032ea6:	c3                   	ret    

c0032ea7 <vm_frame_free>:
c0032ea7:	55                   	push   %ebp
c0032ea8:	89 e5                	mov    %esp,%ebp
c0032eaa:	83 ec 08             	sub    $0x8,%esp
c0032ead:	83 ec 0c             	sub    $0xc,%esp
c0032eb0:	68 e0 86 04 c0       	push   $0xc00486e0
c0032eb5:	e8 74 06 ff ff       	call   c002352e <lock_acquire>
c0032eba:	83 c4 10             	add    $0x10,%esp
c0032ebd:	83 ec 08             	sub    $0x8,%esp
c0032ec0:	6a 01                	push   $0x1
c0032ec2:	ff 75 08             	pushl  0x8(%ebp)
c0032ec5:	e8 ff 00 00 00       	call   c0032fc9 <vm_frame_do_free>
c0032eca:	83 c4 10             	add    $0x10,%esp
c0032ecd:	83 ec 0c             	sub    $0xc,%esp
c0032ed0:	68 e0 86 04 c0       	push   $0xc00486e0
c0032ed5:	e8 95 08 ff ff       	call   c002376f <lock_release>
c0032eda:	83 c4 10             	add    $0x10,%esp
c0032edd:	90                   	nop
c0032ede:	c9                   	leave  
c0032edf:	c3                   	ret    

c0032ee0 <vm_frame_remove_entry>:
c0032ee0:	55                   	push   %ebp
c0032ee1:	89 e5                	mov    %esp,%ebp
c0032ee3:	83 ec 08             	sub    $0x8,%esp
c0032ee6:	83 ec 0c             	sub    $0xc,%esp
c0032ee9:	68 e0 86 04 c0       	push   $0xc00486e0
c0032eee:	e8 3b 06 ff ff       	call   c002352e <lock_acquire>
c0032ef3:	83 c4 10             	add    $0x10,%esp
c0032ef6:	83 ec 08             	sub    $0x8,%esp
c0032ef9:	6a 00                	push   $0x0
c0032efb:	ff 75 08             	pushl  0x8(%ebp)
c0032efe:	e8 c6 00 00 00       	call   c0032fc9 <vm_frame_do_free>
c0032f03:	83 c4 10             	add    $0x10,%esp
c0032f06:	83 ec 0c             	sub    $0xc,%esp
c0032f09:	68 e0 86 04 c0       	push   $0xc00486e0
c0032f0e:	e8 5c 08 ff ff       	call   c002376f <lock_release>
c0032f13:	83 c4 10             	add    $0x10,%esp
c0032f16:	90                   	nop
c0032f17:	c9                   	leave  
c0032f18:	c3                   	ret    

c0032f19 <vm_frame_set_pinned>:
c0032f19:	55                   	push   %ebp
c0032f1a:	89 e5                	mov    %esp,%ebp
c0032f1c:	83 ec 48             	sub    $0x48,%esp
c0032f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0032f22:	88 45 c4             	mov    %al,-0x3c(%ebp)
c0032f25:	83 ec 0c             	sub    $0xc,%esp
c0032f28:	68 e0 86 04 c0       	push   $0xc00486e0
c0032f2d:	e8 fc 05 ff ff       	call   c002352e <lock_acquire>
c0032f32:	83 c4 10             	add    $0x10,%esp
c0032f35:	8b 45 08             	mov    0x8(%ebp),%eax
c0032f38:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0032f3b:	83 ec 08             	sub    $0x8,%esp
c0032f3e:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0032f41:	83 c0 08             	add    $0x8,%eax
c0032f44:	50                   	push   %eax
c0032f45:	68 04 87 04 c0       	push   $0xc0048704
c0032f4a:	e8 0e 91 ff ff       	call   c002c05d <hash_find>
c0032f4f:	83 c4 10             	add    $0x10,%esp
c0032f52:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0032f55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0032f59:	75 16                	jne    c0032f71 <vm_frame_set_pinned+0x58>
c0032f5b:	68 6c 7e 03 c0       	push   $0xc0037e6c
c0032f60:	68 b4 7f 03 c0       	push   $0xc0037fb4
c0032f65:	6a 69                	push   $0x69
c0032f67:	68 11 7e 03 c0       	push   $0xc0037e11
c0032f6c:	e8 20 76 ff ff       	call   c002a591 <debug_panic>
c0032f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0032f74:	83 e8 08             	sub    $0x8,%eax
c0032f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0032f7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0032f7d:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
c0032f81:	88 50 1c             	mov    %dl,0x1c(%eax)
c0032f84:	83 ec 0c             	sub    $0xc,%esp
c0032f87:	68 e0 86 04 c0       	push   $0xc00486e0
c0032f8c:	e8 de 07 ff ff       	call   c002376f <lock_release>
c0032f91:	83 c4 10             	add    $0x10,%esp
c0032f94:	90                   	nop
c0032f95:	c9                   	leave  
c0032f96:	c3                   	ret    

c0032f97 <vm_frame_pin>:
c0032f97:	55                   	push   %ebp
c0032f98:	89 e5                	mov    %esp,%ebp
c0032f9a:	83 ec 08             	sub    $0x8,%esp
c0032f9d:	83 ec 08             	sub    $0x8,%esp
c0032fa0:	6a 01                	push   $0x1
c0032fa2:	ff 75 08             	pushl  0x8(%ebp)
c0032fa5:	e8 6f ff ff ff       	call   c0032f19 <vm_frame_set_pinned>
c0032faa:	83 c4 10             	add    $0x10,%esp
c0032fad:	90                   	nop
c0032fae:	c9                   	leave  
c0032faf:	c3                   	ret    

c0032fb0 <vm_frame_unpin>:
c0032fb0:	55                   	push   %ebp
c0032fb1:	89 e5                	mov    %esp,%ebp
c0032fb3:	83 ec 08             	sub    $0x8,%esp
c0032fb6:	83 ec 08             	sub    $0x8,%esp
c0032fb9:	6a 00                	push   $0x0
c0032fbb:	ff 75 08             	pushl  0x8(%ebp)
c0032fbe:	e8 56 ff ff ff       	call   c0032f19 <vm_frame_set_pinned>
c0032fc3:	83 c4 10             	add    $0x10,%esp
c0032fc6:	90                   	nop
c0032fc7:	c9                   	leave  
c0032fc8:	c3                   	ret    

c0032fc9 <vm_frame_do_free>:
c0032fc9:	55                   	push   %ebp
c0032fca:	89 e5                	mov    %esp,%ebp
c0032fcc:	83 ec 48             	sub    $0x48,%esp
c0032fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0032fd2:	88 45 c4             	mov    %al,-0x3c(%ebp)
c0032fd5:	83 ec 0c             	sub    $0xc,%esp
c0032fd8:	68 e0 86 04 c0       	push   $0xc00486e0
c0032fdd:	e8 4e 08 ff ff       	call   c0023830 <lock_held_by_current_thread>
c0032fe2:	83 c4 10             	add    $0x10,%esp
c0032fe5:	84 c0                	test   %al,%al
c0032fe7:	75 1e                	jne    c0033007 <vm_frame_do_free+0x3e>
c0032fe9:	83 ec 0c             	sub    $0xc,%esp
c0032fec:	68 9c 7e 03 c0       	push   $0xc0037e9c
c0032ff1:	68 fa 7d 03 c0       	push   $0xc0037dfa
c0032ff6:	68 c8 7f 03 c0       	push   $0xc0037fc8
c0032ffb:	6a 7a                	push   $0x7a
c0032ffd:	68 11 7e 03 c0       	push   $0xc0037e11
c0033002:	e8 8a 75 ff ff       	call   c002a591 <debug_panic>
c0033007:	83 ec 0c             	sub    $0xc,%esp
c003300a:	ff 75 08             	pushl  0x8(%ebp)
c003300d:	e8 cc fb ff ff       	call   c0032bde <is_kernel_vaddr>
c0033012:	83 c4 10             	add    $0x10,%esp
c0033015:	84 c0                	test   %al,%al
c0033017:	75 1e                	jne    c0033037 <vm_frame_do_free+0x6e>
c0033019:	83 ec 0c             	sub    $0xc,%esp
c003301c:	68 cd 7e 03 c0       	push   $0xc0037ecd
c0033021:	68 fa 7d 03 c0       	push   $0xc0037dfa
c0033026:	68 c8 7f 03 c0       	push   $0xc0037fc8
c003302b:	6a 7b                	push   $0x7b
c003302d:	68 11 7e 03 c0       	push   $0xc0037e11
c0033032:	e8 5a 75 ff ff       	call   c002a591 <debug_panic>
c0033037:	83 ec 0c             	sub    $0xc,%esp
c003303a:	ff 75 08             	pushl  0x8(%ebp)
c003303d:	e8 8f fb ff ff       	call   c0032bd1 <pg_ofs>
c0033042:	83 c4 10             	add    $0x10,%esp
c0033045:	85 c0                	test   %eax,%eax
c0033047:	74 1e                	je     c0033067 <vm_frame_do_free+0x9e>
c0033049:	83 ec 0c             	sub    $0xc,%esp
c003304c:	68 e7 7e 03 c0       	push   $0xc0037ee7
c0033051:	68 fa 7d 03 c0       	push   $0xc0037dfa
c0033056:	68 c8 7f 03 c0       	push   $0xc0037fc8
c003305b:	6a 7c                	push   $0x7c
c003305d:	68 11 7e 03 c0       	push   $0xc0037e11
c0033062:	e8 2a 75 ff ff       	call   c002a591 <debug_panic>
c0033067:	8b 45 08             	mov    0x8(%ebp),%eax
c003306a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c003306d:	83 ec 08             	sub    $0x8,%esp
c0033070:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0033073:	83 c0 08             	add    $0x8,%eax
c0033076:	50                   	push   %eax
c0033077:	68 04 87 04 c0       	push   $0xc0048704
c003307c:	e8 dc 8f ff ff       	call   c002c05d <hash_find>
c0033081:	83 c4 10             	add    $0x10,%esp
c0033084:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033087:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c003308b:	75 19                	jne    c00330a6 <vm_frame_do_free+0xdd>
c003308d:	68 00 7f 03 c0       	push   $0xc0037f00
c0033092:	68 c8 7f 03 c0       	push   $0xc0037fc8
c0033097:	68 82 00 00 00       	push   $0x82
c003309c:	68 11 7e 03 c0       	push   $0xc0037e11
c00330a1:	e8 eb 74 ff ff       	call   c002a591 <debug_panic>
c00330a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00330a9:	83 e8 08             	sub    $0x8,%eax
c00330ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00330af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00330b2:	83 c0 08             	add    $0x8,%eax
c00330b5:	83 ec 08             	sub    $0x8,%esp
c00330b8:	50                   	push   %eax
c00330b9:	68 04 87 04 c0       	push   $0xc0048704
c00330be:	e8 c5 8f ff ff       	call   c002c088 <hash_delete>
c00330c3:	83 c4 10             	add    $0x10,%esp
c00330c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00330c9:	83 c0 10             	add    $0x10,%eax
c00330cc:	83 ec 0c             	sub    $0xc,%esp
c00330cf:	50                   	push   %eax
c00330d0:	e8 35 7b ff ff       	call   c002ac0a <list_remove>
c00330d5:	83 c4 10             	add    $0x10,%esp
c00330d8:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
c00330dc:	74 0e                	je     c00330ec <vm_frame_do_free+0x123>
c00330de:	83 ec 0c             	sub    $0xc,%esp
c00330e1:	ff 75 08             	pushl  0x8(%ebp)
c00330e4:	e8 77 0e ff ff       	call   c0023f60 <palloc_free_page>
c00330e9:	83 c4 10             	add    $0x10,%esp
c00330ec:	83 ec 0c             	sub    $0xc,%esp
c00330ef:	ff 75 f0             	pushl  -0x10(%ebp)
c00330f2:	e8 59 13 ff ff       	call   c0024450 <free>
c00330f7:	83 c4 10             	add    $0x10,%esp
c00330fa:	90                   	nop
c00330fb:	c9                   	leave  
c00330fc:	c3                   	ret    

c00330fd <clk_frame_next>:
c00330fd:	55                   	push   %ebp
c00330fe:	89 e5                	mov    %esp,%ebp
c0033100:	83 ec 18             	sub    $0x18,%esp
c0033103:	83 ec 0c             	sub    $0xc,%esp
c0033106:	68 1c 87 04 c0       	push   $0xc004871c
c003310b:	e8 7c 7c ff ff       	call   c002ad8c <list_empty>
c0033110:	83 c4 10             	add    $0x10,%esp
c0033113:	84 c0                	test   %al,%al
c0033115:	74 19                	je     c0033130 <clk_frame_next+0x33>
c0033117:	68 30 7f 03 c0       	push   $0xc0037f30
c003311c:	68 dc 7f 03 c0       	push   $0xc0037fdc
c0033121:	68 90 00 00 00       	push   $0x90
c0033126:	68 11 7e 03 c0       	push   $0xc0037e11
c003312b:	e8 61 74 ff ff       	call   c002a591 <debug_panic>
c0033130:	a1 2c 87 04 c0       	mov    0xc004872c,%eax
c0033135:	85 c0                	test   %eax,%eax
c0033137:	74 1b                	je     c0033154 <clk_frame_next+0x57>
c0033139:	83 ec 0c             	sub    $0xc,%esp
c003313c:	68 1c 87 04 c0       	push   $0xc004871c
c0033141:	e8 8f 77 ff ff       	call   c002a8d5 <list_end>
c0033146:	83 c4 10             	add    $0x10,%esp
c0033149:	89 c2                	mov    %eax,%edx
c003314b:	a1 2c 87 04 c0       	mov    0xc004872c,%eax
c0033150:	39 c2                	cmp    %eax,%edx
c0033152:	75 17                	jne    c003316b <clk_frame_next+0x6e>
c0033154:	83 ec 0c             	sub    $0xc,%esp
c0033157:	68 1c 87 04 c0       	push   $0xc004871c
c003315c:	e8 f8 76 ff ff       	call   c002a859 <list_begin>
c0033161:	83 c4 10             	add    $0x10,%esp
c0033164:	a3 2c 87 04 c0       	mov    %eax,0xc004872c
c0033169:	eb 16                	jmp    c0033181 <clk_frame_next+0x84>
c003316b:	a1 2c 87 04 c0       	mov    0xc004872c,%eax
c0033170:	83 ec 0c             	sub    $0xc,%esp
c0033173:	50                   	push   %eax
c0033174:	e8 12 77 ff ff       	call   c002a88b <list_next>
c0033179:	83 c4 10             	add    $0x10,%esp
c003317c:	a3 2c 87 04 c0       	mov    %eax,0xc004872c
c0033181:	a1 2c 87 04 c0       	mov    0xc004872c,%eax
c0033186:	83 c0 04             	add    $0x4,%eax
c0033189:	83 e8 14             	sub    $0x14,%eax
c003318c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003318f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033192:	c9                   	leave  
c0033193:	c3                   	ret    

c0033194 <pick_frame_to_evicted>:
c0033194:	55                   	push   %ebp
c0033195:	89 e5                	mov    %esp,%ebp
c0033197:	83 ec 18             	sub    $0x18,%esp
c003319a:	83 ec 0c             	sub    $0xc,%esp
c003319d:	68 04 87 04 c0       	push   $0xc0048704
c00331a2:	e8 52 91 ff ff       	call   c002c2f9 <hash_size>
c00331a7:	83 c4 10             	add    $0x10,%esp
c00331aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00331ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00331b1:	75 19                	jne    c00331cc <pick_frame_to_evicted+0x38>
c00331b3:	68 30 7f 03 c0       	push   $0xc0037f30
c00331b8:	68 ec 7f 03 c0       	push   $0xc0037fec
c00331bd:	68 9f 00 00 00       	push   $0x9f
c00331c2:	68 11 7e 03 c0       	push   $0xc0037e11
c00331c7:	e8 c5 73 ff ff       	call   c002a591 <debug_panic>
c00331cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00331d3:	eb 4f                	jmp    c0033224 <pick_frame_to_evicted+0x90>
c00331d5:	e8 23 ff ff ff       	call   c00330fd <clk_frame_next>
c00331da:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00331dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00331e0:	0f b6 40 1c          	movzbl 0x1c(%eax),%eax
c00331e4:	84 c0                	test   %al,%al
c00331e6:	75 37                	jne    c003321f <pick_frame_to_evicted+0x8b>
c00331e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00331eb:	8b 40 04             	mov    0x4(%eax),%eax
c00331ee:	83 ec 08             	sub    $0x8,%esp
c00331f1:	50                   	push   %eax
c00331f2:	ff 75 08             	pushl  0x8(%ebp)
c00331f5:	e8 8c ad ff ff       	call   c002df86 <pagedir_is_accessed>
c00331fa:	83 c4 10             	add    $0x10,%esp
c00331fd:	84 c0                	test   %al,%al
c00331ff:	74 19                	je     c003321a <pick_frame_to_evicted+0x86>
c0033201:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0033204:	8b 40 04             	mov    0x4(%eax),%eax
c0033207:	83 ec 04             	sub    $0x4,%esp
c003320a:	6a 00                	push   $0x0
c003320c:	50                   	push   %eax
c003320d:	ff 75 08             	pushl  0x8(%ebp)
c0033210:	e8 b0 ad ff ff       	call   c002dfc5 <pagedir_set_accessed>
c0033215:	83 c4 10             	add    $0x10,%esp
c0033218:	eb 06                	jmp    c0033220 <pick_frame_to_evicted+0x8c>
c003321a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c003321d:	eb 28                	jmp    c0033247 <pick_frame_to_evicted+0xb3>
c003321f:	90                   	nop
c0033220:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0033224:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0033227:	01 c0                	add    %eax,%eax
c0033229:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c003322c:	73 a7                	jae    c00331d5 <pick_frame_to_evicted+0x41>
c003322e:	68 70 7f 03 c0       	push   $0xc0037f70
c0033233:	68 ec 7f 03 c0       	push   $0xc0037fec
c0033238:	68 aa 00 00 00       	push   $0xaa
c003323d:	68 11 7e 03 c0       	push   $0xc0037e11
c0033242:	e8 4a 73 ff ff       	call   c002a591 <debug_panic>
c0033247:	c9                   	leave  
c0033248:	c3                   	ret    

c0033249 <frame_hash_func>:
c0033249:	55                   	push   %ebp
c003324a:	89 e5                	mov    %esp,%ebp
c003324c:	83 ec 18             	sub    $0x18,%esp
c003324f:	8b 45 08             	mov    0x8(%ebp),%eax
c0033252:	83 e8 08             	sub    $0x8,%eax
c0033255:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033258:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003325b:	83 ec 08             	sub    $0x8,%esp
c003325e:	6a 04                	push   $0x4
c0033260:	50                   	push   %eax
c0033261:	e8 ac 90 ff ff       	call   c002c312 <hash_bytes>
c0033266:	83 c4 10             	add    $0x10,%esp
c0033269:	c9                   	leave  
c003326a:	c3                   	ret    

c003326b <frame_less_func>:
c003326b:	55                   	push   %ebp
c003326c:	89 e5                	mov    %esp,%ebp
c003326e:	83 ec 10             	sub    $0x10,%esp
c0033271:	8b 45 08             	mov    0x8(%ebp),%eax
c0033274:	83 e8 08             	sub    $0x8,%eax
c0033277:	89 45 fc             	mov    %eax,-0x4(%ebp)
c003327a:	8b 45 0c             	mov    0xc(%ebp),%eax
c003327d:	83 e8 08             	sub    $0x8,%eax
c0033280:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0033283:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0033286:	8b 10                	mov    (%eax),%edx
c0033288:	8b 45 f8             	mov    -0x8(%ebp),%eax
c003328b:	8b 00                	mov    (%eax),%eax
c003328d:	39 c2                	cmp    %eax,%edx
c003328f:	0f 92 c0             	setb   %al
c0033292:	c9                   	leave  
c0033293:	c3                   	ret    

c0033294 <vm_supt_create>:
c0033294:	55                   	push   %ebp
c0033295:	89 e5                	mov    %esp,%ebp
c0033297:	83 ec 18             	sub    $0x18,%esp
c003329a:	83 ec 0c             	sub    $0xc,%esp
c003329d:	6a 18                	push   $0x18
c003329f:	e8 af 0e ff ff       	call   c0024153 <malloc>
c00332a4:	83 c4 10             	add    $0x10,%esp
c00332a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00332aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00332ad:	6a 00                	push   $0x0
c00332af:	68 21 3a 03 c0       	push   $0xc0033a21
c00332b4:	68 ff 39 03 c0       	push   $0xc00339ff
c00332b9:	50                   	push   %eax
c00332ba:	e8 8e 8b ff ff       	call   c002be4d <hash_init>
c00332bf:	83 c4 10             	add    $0x10,%esp
c00332c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00332c5:	c9                   	leave  
c00332c6:	c3                   	ret    

c00332c7 <vm_supt_destroy>:
c00332c7:	55                   	push   %ebp
c00332c8:	89 e5                	mov    %esp,%ebp
c00332ca:	83 ec 08             	sub    $0x8,%esp
c00332cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00332d1:	75 1e                	jne    c00332f1 <vm_supt_destroy+0x2a>
c00332d3:	83 ec 0c             	sub    $0xc,%esp
c00332d6:	68 04 80 03 c0       	push   $0xc0038004
c00332db:	68 11 80 03 c0       	push   $0xc0038011
c00332e0:	68 94 80 03 c0       	push   $0xc0038094
c00332e5:	6a 1c                	push   $0x1c
c00332e7:	68 28 80 03 c0       	push   $0xc0038028
c00332ec:	e8 a0 72 ff ff       	call   c002a591 <debug_panic>
c00332f1:	8b 45 08             	mov    0x8(%ebp),%eax
c00332f4:	83 ec 08             	sub    $0x8,%esp
c00332f7:	68 4a 3a 03 c0       	push   $0xc0033a4a
c00332fc:	50                   	push   %eax
c00332fd:	e8 5c 8c ff ff       	call   c002bf5e <hash_destroy>
c0033302:	83 c4 10             	add    $0x10,%esp
c0033305:	83 ec 0c             	sub    $0xc,%esp
c0033308:	ff 75 08             	pushl  0x8(%ebp)
c003330b:	e8 40 11 ff ff       	call   c0024450 <free>
c0033310:	83 c4 10             	add    $0x10,%esp
c0033313:	90                   	nop
c0033314:	c9                   	leave  
c0033315:	c3                   	ret    

c0033316 <vm_supt_install_frame>:
c0033316:	55                   	push   %ebp
c0033317:	89 e5                	mov    %esp,%ebp
c0033319:	83 ec 18             	sub    $0x18,%esp
c003331c:	83 ec 0c             	sub    $0xc,%esp
c003331f:	6a 30                	push   $0x30
c0033321:	e8 2d 0e ff ff       	call   c0024153 <malloc>
c0033326:	83 c4 10             	add    $0x10,%esp
c0033329:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003332c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003332f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0033332:	89 10                	mov    %edx,(%eax)
c0033334:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033337:	8b 55 10             	mov    0x10(%ebp),%edx
c003333a:	89 50 04             	mov    %edx,0x4(%eax)
c003333d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033340:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
c0033347:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003334a:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
c003334e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033351:	c7 40 18 ff ff ff ff 	movl   $0xffffffff,0x18(%eax)
c0033358:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003335b:	8d 50 10             	lea    0x10(%eax),%edx
c003335e:	8b 45 08             	mov    0x8(%ebp),%eax
c0033361:	83 ec 08             	sub    $0x8,%esp
c0033364:	52                   	push   %edx
c0033365:	50                   	push   %eax
c0033366:	e8 25 8c ff ff       	call   c002bf90 <hash_insert>
c003336b:	83 c4 10             	add    $0x10,%esp
c003336e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0033371:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0033375:	75 07                	jne    c003337e <vm_supt_install_frame+0x68>
c0033377:	b8 01 00 00 00       	mov    $0x1,%eax
c003337c:	eb 13                	jmp    c0033391 <vm_supt_install_frame+0x7b>
c003337e:	83 ec 0c             	sub    $0xc,%esp
c0033381:	ff 75 08             	pushl  0x8(%ebp)
c0033384:	e8 c7 10 ff ff       	call   c0024450 <free>
c0033389:	83 c4 10             	add    $0x10,%esp
c003338c:	b8 00 00 00 00       	mov    $0x0,%eax
c0033391:	c9                   	leave  
c0033392:	c3                   	ret    

c0033393 <vm_supt_install_zeropage>:
c0033393:	55                   	push   %ebp
c0033394:	89 e5                	mov    %esp,%ebp
c0033396:	83 ec 18             	sub    $0x18,%esp
c0033399:	83 ec 0c             	sub    $0xc,%esp
c003339c:	6a 30                	push   $0x30
c003339e:	e8 b0 0d ff ff       	call   c0024153 <malloc>
c00333a3:	83 c4 10             	add    $0x10,%esp
c00333a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00333a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00333ac:	8b 55 0c             	mov    0xc(%ebp),%edx
c00333af:	89 10                	mov    %edx,(%eax)
c00333b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00333b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c00333bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00333be:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c00333c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00333c8:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
c00333cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00333cf:	8d 50 10             	lea    0x10(%eax),%edx
c00333d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00333d5:	83 ec 08             	sub    $0x8,%esp
c00333d8:	52                   	push   %edx
c00333d9:	50                   	push   %eax
c00333da:	e8 b1 8b ff ff       	call   c002bf90 <hash_insert>
c00333df:	83 c4 10             	add    $0x10,%esp
c00333e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00333e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00333e9:	75 07                	jne    c00333f2 <vm_supt_install_zeropage+0x5f>
c00333eb:	b8 01 00 00 00       	mov    $0x1,%eax
c00333f0:	eb 05                	jmp    c00333f7 <vm_supt_install_zeropage+0x64>
c00333f2:	b8 00 00 00 00       	mov    $0x0,%eax
c00333f7:	c9                   	leave  
c00333f8:	c3                   	ret    

c00333f9 <vm_supt_set_swap>:
c00333f9:	55                   	push   %ebp
c00333fa:	89 e5                	mov    %esp,%ebp
c00333fc:	83 ec 18             	sub    $0x18,%esp
c00333ff:	83 ec 08             	sub    $0x8,%esp
c0033402:	ff 75 0c             	pushl  0xc(%ebp)
c0033405:	ff 75 08             	pushl  0x8(%ebp)
c0033408:	e8 d1 00 00 00       	call   c00334de <vm_supt_lookup>
c003340d:	83 c4 10             	add    $0x10,%esp
c0033410:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033413:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0033417:	75 07                	jne    c0033420 <vm_supt_set_swap+0x27>
c0033419:	b8 00 00 00 00       	mov    $0x0,%eax
c003341e:	eb 22                	jmp    c0033442 <vm_supt_set_swap+0x49>
c0033420:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033423:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c003342a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003342d:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
c0033434:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033437:	8b 55 10             	mov    0x10(%ebp),%edx
c003343a:	89 50 18             	mov    %edx,0x18(%eax)
c003343d:	b8 01 00 00 00       	mov    $0x1,%eax
c0033442:	c9                   	leave  
c0033443:	c3                   	ret    

c0033444 <vm_supt_install_filesys>:
c0033444:	55                   	push   %ebp
c0033445:	89 e5                	mov    %esp,%ebp
c0033447:	83 ec 28             	sub    $0x28,%esp
c003344a:	8b 45 20             	mov    0x20(%ebp),%eax
c003344d:	88 45 e4             	mov    %al,-0x1c(%ebp)
c0033450:	83 ec 0c             	sub    $0xc,%esp
c0033453:	6a 30                	push   $0x30
c0033455:	e8 f9 0c ff ff       	call   c0024153 <malloc>
c003345a:	83 c4 10             	add    $0x10,%esp
c003345d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033460:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033463:	8b 55 0c             	mov    0xc(%ebp),%edx
c0033466:	89 10                	mov    %edx,(%eax)
c0033468:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003346b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0033472:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033475:	c7 40 08 03 00 00 00 	movl   $0x3,0x8(%eax)
c003347c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003347f:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
c0033483:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033486:	8b 55 10             	mov    0x10(%ebp),%edx
c0033489:	89 50 1c             	mov    %edx,0x1c(%eax)
c003348c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003348f:	8b 55 14             	mov    0x14(%ebp),%edx
c0033492:	89 50 20             	mov    %edx,0x20(%eax)
c0033495:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033498:	8b 55 18             	mov    0x18(%ebp),%edx
c003349b:	89 50 24             	mov    %edx,0x24(%eax)
c003349e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00334a1:	8b 55 1c             	mov    0x1c(%ebp),%edx
c00334a4:	89 50 28             	mov    %edx,0x28(%eax)
c00334a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00334aa:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c00334ae:	88 50 2c             	mov    %dl,0x2c(%eax)
c00334b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00334b4:	8d 50 10             	lea    0x10(%eax),%edx
c00334b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00334ba:	83 ec 08             	sub    $0x8,%esp
c00334bd:	52                   	push   %edx
c00334be:	50                   	push   %eax
c00334bf:	e8 cc 8a ff ff       	call   c002bf90 <hash_insert>
c00334c4:	83 c4 10             	add    $0x10,%esp
c00334c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00334ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00334ce:	75 07                	jne    c00334d7 <vm_supt_install_filesys+0x93>
c00334d0:	b8 01 00 00 00       	mov    $0x1,%eax
c00334d5:	eb 05                	jmp    c00334dc <vm_supt_install_filesys+0x98>
c00334d7:	b8 00 00 00 00       	mov    $0x0,%eax
c00334dc:	c9                   	leave  
c00334dd:	c3                   	ret    

c00334de <vm_supt_lookup>:
c00334de:	55                   	push   %ebp
c00334df:	89 e5                	mov    %esp,%ebp
c00334e1:	83 ec 48             	sub    $0x48,%esp
c00334e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00334e7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c00334ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00334ed:	83 ec 08             	sub    $0x8,%esp
c00334f0:	8d 55 c4             	lea    -0x3c(%ebp),%edx
c00334f3:	83 c2 10             	add    $0x10,%edx
c00334f6:	52                   	push   %edx
c00334f7:	50                   	push   %eax
c00334f8:	e8 60 8b ff ff       	call   c002c05d <hash_find>
c00334fd:	83 c4 10             	add    $0x10,%esp
c0033500:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033503:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0033507:	75 07                	jne    c0033510 <vm_supt_lookup+0x32>
c0033509:	b8 00 00 00 00       	mov    $0x0,%eax
c003350e:	eb 06                	jmp    c0033516 <vm_supt_lookup+0x38>
c0033510:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033513:	83 e8 10             	sub    $0x10,%eax
c0033516:	c9                   	leave  
c0033517:	c3                   	ret    

c0033518 <vm_supt_has_entry>:
c0033518:	55                   	push   %ebp
c0033519:	89 e5                	mov    %esp,%ebp
c003351b:	83 ec 18             	sub    $0x18,%esp
c003351e:	83 ec 08             	sub    $0x8,%esp
c0033521:	ff 75 0c             	pushl  0xc(%ebp)
c0033524:	ff 75 08             	pushl  0x8(%ebp)
c0033527:	e8 b2 ff ff ff       	call   c00334de <vm_supt_lookup>
c003352c:	83 c4 10             	add    $0x10,%esp
c003352f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033532:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0033536:	75 07                	jne    c003353f <vm_supt_has_entry+0x27>
c0033538:	b8 00 00 00 00       	mov    $0x0,%eax
c003353d:	eb 05                	jmp    c0033544 <vm_supt_has_entry+0x2c>
c003353f:	b8 01 00 00 00       	mov    $0x1,%eax
c0033544:	c9                   	leave  
c0033545:	c3                   	ret    

c0033546 <vm_supt_set_dirty>:
c0033546:	55                   	push   %ebp
c0033547:	89 e5                	mov    %esp,%ebp
c0033549:	83 ec 28             	sub    $0x28,%esp
c003354c:	8b 45 10             	mov    0x10(%ebp),%eax
c003354f:	88 45 e4             	mov    %al,-0x1c(%ebp)
c0033552:	83 ec 08             	sub    $0x8,%esp
c0033555:	ff 75 0c             	pushl  0xc(%ebp)
c0033558:	ff 75 08             	pushl  0x8(%ebp)
c003355b:	e8 7e ff ff ff       	call   c00334de <vm_supt_lookup>
c0033560:	83 c4 10             	add    $0x10,%esp
c0033563:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033566:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c003356a:	75 0b                	jne    c0033577 <vm_supt_set_dirty+0x31>
c003356c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003356f:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0033573:	84 c0                	test   %al,%al
c0033575:	74 07                	je     c003357e <vm_supt_set_dirty+0x38>
c0033577:	b8 01 00 00 00       	mov    $0x1,%eax
c003357c:	eb 05                	jmp    c0033583 <vm_supt_set_dirty+0x3d>
c003357e:	b8 00 00 00 00       	mov    $0x0,%eax
c0033583:	83 e0 01             	and    $0x1,%eax
c0033586:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0033589:	88 42 0c             	mov    %al,0xc(%edx)
c003358c:	b8 01 00 00 00       	mov    $0x1,%eax
c0033591:	c9                   	leave  
c0033592:	c3                   	ret    

c0033593 <vm_load_page_from_filesys>:
c0033593:	55                   	push   %ebp
c0033594:	89 e5                	mov    %esp,%ebp
c0033596:	83 ec 18             	sub    $0x18,%esp
c0033599:	8b 45 08             	mov    0x8(%ebp),%eax
c003359c:	8b 50 20             	mov    0x20(%eax),%edx
c003359f:	8b 45 08             	mov    0x8(%ebp),%eax
c00335a2:	8b 40 1c             	mov    0x1c(%eax),%eax
c00335a5:	83 ec 08             	sub    $0x8,%esp
c00335a8:	52                   	push   %edx
c00335a9:	50                   	push   %eax
c00335aa:	e8 8c d3 ff ff       	call   c003093b <file_seek>
c00335af:	83 c4 10             	add    $0x10,%esp
c00335b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00335b5:	8b 40 24             	mov    0x24(%eax),%eax
c00335b8:	89 c2                	mov    %eax,%edx
c00335ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00335bd:	8b 40 1c             	mov    0x1c(%eax),%eax
c00335c0:	83 ec 04             	sub    $0x4,%esp
c00335c3:	52                   	push   %edx
c00335c4:	ff 75 0c             	pushl  0xc(%ebp)
c00335c7:	50                   	push   %eax
c00335c8:	e8 d6 d1 ff ff       	call   c00307a3 <file_read>
c00335cd:	83 c4 10             	add    $0x10,%esp
c00335d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00335d3:	8b 45 08             	mov    0x8(%ebp),%eax
c00335d6:	8b 40 24             	mov    0x24(%eax),%eax
c00335d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00335dc:	74 07                	je     c00335e5 <vm_load_page_from_filesys+0x52>
c00335de:	b8 00 00 00 00       	mov    $0x0,%eax
c00335e3:	eb 55                	jmp    c003363a <vm_load_page_from_filesys+0xa7>
c00335e5:	8b 45 08             	mov    0x8(%ebp),%eax
c00335e8:	8b 50 24             	mov    0x24(%eax),%edx
c00335eb:	8b 45 08             	mov    0x8(%ebp),%eax
c00335ee:	8b 40 28             	mov    0x28(%eax),%eax
c00335f1:	01 d0                	add    %edx,%eax
c00335f3:	3d 00 10 00 00       	cmp    $0x1000,%eax
c00335f8:	74 1e                	je     c0033618 <vm_load_page_from_filesys+0x85>
c00335fa:	83 ec 0c             	sub    $0xc,%esp
c00335fd:	68 38 80 03 c0       	push   $0xc0038038
c0033602:	68 11 80 03 c0       	push   $0xc0038011
c0033607:	68 a4 80 03 c0       	push   $0xc00380a4
c003360c:	6a 77                	push   $0x77
c003360e:	68 28 80 03 c0       	push   $0xc0038028
c0033613:	e8 79 6f ff ff       	call   c002a591 <debug_panic>
c0033618:	8b 45 08             	mov    0x8(%ebp),%eax
c003361b:	8b 40 28             	mov    0x28(%eax),%eax
c003361e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0033621:	8b 55 0c             	mov    0xc(%ebp),%edx
c0033624:	01 ca                	add    %ecx,%edx
c0033626:	83 ec 04             	sub    $0x4,%esp
c0033629:	50                   	push   %eax
c003362a:	6a 00                	push   $0x0
c003362c:	52                   	push   %edx
c003362d:	e8 25 62 ff ff       	call   c0029857 <memset>
c0033632:	83 c4 10             	add    $0x10,%esp
c0033635:	b8 01 00 00 00       	mov    $0x1,%eax
c003363a:	c9                   	leave  
c003363b:	c3                   	ret    

c003363c <vm_load_page>:
c003363c:	55                   	push   %ebp
c003363d:	89 e5                	mov    %esp,%ebp
c003363f:	83 ec 18             	sub    $0x18,%esp
c0033642:	83 ec 08             	sub    $0x8,%esp
c0033645:	ff 75 10             	pushl  0x10(%ebp)
c0033648:	ff 75 08             	pushl  0x8(%ebp)
c003364b:	e8 8e fe ff ff       	call   c00334de <vm_supt_lookup>
c0033650:	83 c4 10             	add    $0x10,%esp
c0033653:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0033656:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c003365a:	75 0a                	jne    c0033666 <vm_load_page+0x2a>
c003365c:	b8 00 00 00 00       	mov    $0x0,%eax
c0033661:	e9 2b 01 00 00       	jmp    c0033791 <vm_load_page+0x155>
c0033666:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0033669:	8b 40 08             	mov    0x8(%eax),%eax
c003366c:	83 f8 01             	cmp    $0x1,%eax
c003366f:	75 0a                	jne    c003367b <vm_load_page+0x3f>
c0033671:	b8 01 00 00 00       	mov    $0x1,%eax
c0033676:	e9 16 01 00 00       	jmp    c0033791 <vm_load_page+0x155>
c003367b:	83 ec 08             	sub    $0x8,%esp
c003367e:	ff 75 10             	pushl  0x10(%ebp)
c0033681:	6a 04                	push   $0x4
c0033683:	e8 b1 f5 ff ff       	call   c0032c39 <vm_frame_allocate>
c0033688:	83 c4 10             	add    $0x10,%esp
c003368b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003368e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0033692:	75 0a                	jne    c003369e <vm_load_page+0x62>
c0033694:	b8 00 00 00 00       	mov    $0x0,%eax
c0033699:	e9 f3 00 00 00       	jmp    c0033791 <vm_load_page+0x155>
c003369e:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c00336a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00336a5:	8b 40 08             	mov    0x8(%eax),%eax
c00336a8:	83 f8 01             	cmp    $0x1,%eax
c00336ab:	74 78                	je     c0033725 <vm_load_page+0xe9>
c00336ad:	83 f8 01             	cmp    $0x1,%eax
c00336b0:	72 0c                	jb     c00336be <vm_load_page+0x82>
c00336b2:	83 f8 02             	cmp    $0x2,%eax
c00336b5:	74 1e                	je     c00336d5 <vm_load_page+0x99>
c00336b7:	83 f8 03             	cmp    $0x3,%eax
c00336ba:	74 30                	je     c00336ec <vm_load_page+0xb0>
c00336bc:	eb 68                	jmp    c0033726 <vm_load_page+0xea>
c00336be:	83 ec 04             	sub    $0x4,%esp
c00336c1:	68 00 10 00 00       	push   $0x1000
c00336c6:	6a 00                	push   $0x0
c00336c8:	ff 75 ec             	pushl  -0x14(%ebp)
c00336cb:	e8 87 61 ff ff       	call   c0029857 <memset>
c00336d0:	83 c4 10             	add    $0x10,%esp
c00336d3:	eb 51                	jmp    c0033726 <vm_load_page+0xea>
c00336d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00336d8:	8b 40 18             	mov    0x18(%eax),%eax
c00336db:	83 ec 08             	sub    $0x8,%esp
c00336de:	ff 75 ec             	pushl  -0x14(%ebp)
c00336e1:	50                   	push   %eax
c00336e2:	e8 f7 04 00 00       	call   c0033bde <vm_swap_in>
c00336e7:	83 c4 10             	add    $0x10,%esp
c00336ea:	eb 3a                	jmp    c0033726 <vm_load_page+0xea>
c00336ec:	83 ec 08             	sub    $0x8,%esp
c00336ef:	ff 75 ec             	pushl  -0x14(%ebp)
c00336f2:	ff 75 f0             	pushl  -0x10(%ebp)
c00336f5:	e8 99 fe ff ff       	call   c0033593 <vm_load_page_from_filesys>
c00336fa:	83 c4 10             	add    $0x10,%esp
c00336fd:	83 f0 01             	xor    $0x1,%eax
c0033700:	84 c0                	test   %al,%al
c0033702:	74 15                	je     c0033719 <vm_load_page+0xdd>
c0033704:	83 ec 0c             	sub    $0xc,%esp
c0033707:	ff 75 ec             	pushl  -0x14(%ebp)
c003370a:	e8 98 f7 ff ff       	call   c0032ea7 <vm_frame_free>
c003370f:	83 c4 10             	add    $0x10,%esp
c0033712:	b8 00 00 00 00       	mov    $0x0,%eax
c0033717:	eb 78                	jmp    c0033791 <vm_load_page+0x155>
c0033719:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003371c:	0f b6 40 2c          	movzbl 0x2c(%eax),%eax
c0033720:	88 45 f7             	mov    %al,-0x9(%ebp)
c0033723:	eb 01                	jmp    c0033726 <vm_load_page+0xea>
c0033725:	90                   	nop
c0033726:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c003372a:	50                   	push   %eax
c003372b:	ff 75 ec             	pushl  -0x14(%ebp)
c003372e:	ff 75 10             	pushl  0x10(%ebp)
c0033731:	ff 75 0c             	pushl  0xc(%ebp)
c0033734:	e8 07 a5 ff ff       	call   c002dc40 <pagedir_set_page>
c0033739:	83 c4 10             	add    $0x10,%esp
c003373c:	83 f0 01             	xor    $0x1,%eax
c003373f:	84 c0                	test   %al,%al
c0033741:	74 15                	je     c0033758 <vm_load_page+0x11c>
c0033743:	83 ec 0c             	sub    $0xc,%esp
c0033746:	ff 75 ec             	pushl  -0x14(%ebp)
c0033749:	e8 59 f7 ff ff       	call   c0032ea7 <vm_frame_free>
c003374e:	83 c4 10             	add    $0x10,%esp
c0033751:	b8 00 00 00 00       	mov    $0x0,%eax
c0033756:	eb 39                	jmp    c0033791 <vm_load_page+0x155>
c0033758:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003375b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c003375e:	89 50 04             	mov    %edx,0x4(%eax)
c0033761:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0033764:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
c003376b:	83 ec 04             	sub    $0x4,%esp
c003376e:	6a 00                	push   $0x0
c0033770:	ff 75 ec             	pushl  -0x14(%ebp)
c0033773:	ff 75 0c             	pushl  0xc(%ebp)
c0033776:	e8 ac a7 ff ff       	call   c002df27 <pagedir_set_dirty>
c003377b:	83 c4 10             	add    $0x10,%esp
c003377e:	83 ec 0c             	sub    $0xc,%esp
c0033781:	ff 75 ec             	pushl  -0x14(%ebp)
c0033784:	e8 27 f8 ff ff       	call   c0032fb0 <vm_frame_unpin>
c0033789:	83 c4 10             	add    $0x10,%esp
c003378c:	b8 01 00 00 00       	mov    $0x1,%eax
c0033791:	c9                   	leave  
c0033792:	c3                   	ret    

c0033793 <vm_supt_mm_unmap>:
c0033793:	55                   	push   %ebp
c0033794:	89 e5                	mov    %esp,%ebp
c0033796:	83 ec 18             	sub    $0x18,%esp
c0033799:	83 ec 08             	sub    $0x8,%esp
c003379c:	ff 75 10             	pushl  0x10(%ebp)
c003379f:	ff 75 08             	pushl  0x8(%ebp)
c00337a2:	e8 37 fd ff ff       	call   c00334de <vm_supt_lookup>
c00337a7:	83 c4 10             	add    $0x10,%esp
c00337aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00337ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00337b0:	8b 40 08             	mov    0x8(%eax),%eax
c00337b3:	83 f8 01             	cmp    $0x1,%eax
c00337b6:	75 12                	jne    c00337ca <vm_supt_mm_unmap+0x37>
c00337b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00337bb:	8b 40 04             	mov    0x4(%eax),%eax
c00337be:	83 ec 0c             	sub    $0xc,%esp
c00337c1:	50                   	push   %eax
c00337c2:	e8 d0 f7 ff ff       	call   c0032f97 <vm_frame_pin>
c00337c7:	83 c4 10             	add    $0x10,%esp
c00337ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00337cd:	8b 40 08             	mov    0x8(%eax),%eax
c00337d0:	83 f8 02             	cmp    $0x2,%eax
c00337d3:	74 17                	je     c00337ec <vm_supt_mm_unmap+0x59>
c00337d5:	83 f8 03             	cmp    $0x3,%eax
c00337d8:	0f 84 92 01 00 00    	je     c0033970 <vm_supt_mm_unmap+0x1dd>
c00337de:	83 f8 01             	cmp    $0x1,%eax
c00337e1:	0f 84 ab 00 00 00    	je     c0033892 <vm_supt_mm_unmap+0xff>
c00337e7:	e9 85 01 00 00       	jmp    c0033971 <vm_supt_mm_unmap+0x1de>
c00337ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00337ef:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c00337f3:	88 45 f3             	mov    %al,-0xd(%ebp)
c00337f6:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c00337fa:	75 18                	jne    c0033814 <vm_supt_mm_unmap+0x81>
c00337fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00337ff:	8b 00                	mov    (%eax),%eax
c0033801:	83 ec 08             	sub    $0x8,%esp
c0033804:	50                   	push   %eax
c0033805:	ff 75 0c             	pushl  0xc(%ebp)
c0033808:	e8 db a6 ff ff       	call   c002dee8 <pagedir_is_dirty>
c003380d:	83 c4 10             	add    $0x10,%esp
c0033810:	84 c0                	test   %al,%al
c0033812:	74 07                	je     c003381b <vm_supt_mm_unmap+0x88>
c0033814:	b8 01 00 00 00       	mov    $0x1,%eax
c0033819:	eb 05                	jmp    c0033820 <vm_supt_mm_unmap+0x8d>
c003381b:	b8 00 00 00 00       	mov    $0x0,%eax
c0033820:	88 45 f3             	mov    %al,-0xd(%ebp)
c0033823:	80 65 f3 01          	andb   $0x1,-0xd(%ebp)
c0033827:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c003382b:	74 4e                	je     c003387b <vm_supt_mm_unmap+0xe8>
c003382d:	83 ec 0c             	sub    $0xc,%esp
c0033830:	6a 00                	push   $0x0
c0033832:	e8 d1 05 ff ff       	call   c0023e08 <palloc_get_page>
c0033837:	83 c4 10             	add    $0x10,%esp
c003383a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003383d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033840:	8b 40 18             	mov    0x18(%eax),%eax
c0033843:	83 ec 08             	sub    $0x8,%esp
c0033846:	ff 75 ec             	pushl  -0x14(%ebp)
c0033849:	50                   	push   %eax
c003384a:	e8 8f 03 00 00       	call   c0033bde <vm_swap_in>
c003384f:	83 c4 10             	add    $0x10,%esp
c0033852:	ff 75 18             	pushl  0x18(%ebp)
c0033855:	68 00 10 00 00       	push   $0x1000
c003385a:	ff 75 ec             	pushl  -0x14(%ebp)
c003385d:	ff 75 14             	pushl  0x14(%ebp)
c0033860:	e8 d1 cf ff ff       	call   c0030836 <file_write_at>
c0033865:	83 c4 10             	add    $0x10,%esp
c0033868:	83 ec 0c             	sub    $0xc,%esp
c003386b:	ff 75 ec             	pushl  -0x14(%ebp)
c003386e:	e8 ed 06 ff ff       	call   c0023f60 <palloc_free_page>
c0033873:	83 c4 10             	add    $0x10,%esp
c0033876:	e9 f6 00 00 00       	jmp    c0033971 <vm_supt_mm_unmap+0x1de>
c003387b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003387e:	8b 40 18             	mov    0x18(%eax),%eax
c0033881:	83 ec 0c             	sub    $0xc,%esp
c0033884:	50                   	push   %eax
c0033885:	e8 bb 03 00 00       	call   c0033c45 <vm_swap_free>
c003388a:	83 c4 10             	add    $0x10,%esp
c003388d:	e9 df 00 00 00       	jmp    c0033971 <vm_supt_mm_unmap+0x1de>
c0033892:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033895:	8b 40 04             	mov    0x4(%eax),%eax
c0033898:	85 c0                	test   %eax,%eax
c003389a:	75 21                	jne    c00338bd <vm_supt_mm_unmap+0x12a>
c003389c:	83 ec 0c             	sub    $0xc,%esp
c003389f:	68 64 80 03 c0       	push   $0xc0038064
c00338a4:	68 11 80 03 c0       	push   $0xc0038011
c00338a9:	68 c0 80 03 c0       	push   $0xc00380c0
c00338ae:	68 b9 00 00 00       	push   $0xb9
c00338b3:	68 28 80 03 c0       	push   $0xc0038028
c00338b8:	e8 d4 6c ff ff       	call   c002a591 <debug_panic>
c00338bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00338c0:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c00338c4:	88 45 eb             	mov    %al,-0x15(%ebp)
c00338c7:	80 7d eb 00          	cmpb   $0x0,-0x15(%ebp)
c00338cb:	75 18                	jne    c00338e5 <vm_supt_mm_unmap+0x152>
c00338cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00338d0:	8b 00                	mov    (%eax),%eax
c00338d2:	83 ec 08             	sub    $0x8,%esp
c00338d5:	50                   	push   %eax
c00338d6:	ff 75 0c             	pushl  0xc(%ebp)
c00338d9:	e8 0a a6 ff ff       	call   c002dee8 <pagedir_is_dirty>
c00338de:	83 c4 10             	add    $0x10,%esp
c00338e1:	84 c0                	test   %al,%al
c00338e3:	74 07                	je     c00338ec <vm_supt_mm_unmap+0x159>
c00338e5:	b8 01 00 00 00       	mov    $0x1,%eax
c00338ea:	eb 05                	jmp    c00338f1 <vm_supt_mm_unmap+0x15e>
c00338ec:	b8 00 00 00 00       	mov    $0x0,%eax
c00338f1:	88 45 eb             	mov    %al,-0x15(%ebp)
c00338f4:	80 65 eb 01          	andb   $0x1,-0x15(%ebp)
c00338f8:	80 7d eb 00          	cmpb   $0x0,-0x15(%ebp)
c00338fc:	75 19                	jne    c0033917 <vm_supt_mm_unmap+0x184>
c00338fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033901:	8b 40 04             	mov    0x4(%eax),%eax
c0033904:	83 ec 08             	sub    $0x8,%esp
c0033907:	50                   	push   %eax
c0033908:	ff 75 0c             	pushl  0xc(%ebp)
c003390b:	e8 d8 a5 ff ff       	call   c002dee8 <pagedir_is_dirty>
c0033910:	83 c4 10             	add    $0x10,%esp
c0033913:	84 c0                	test   %al,%al
c0033915:	74 07                	je     c003391e <vm_supt_mm_unmap+0x18b>
c0033917:	b8 01 00 00 00       	mov    $0x1,%eax
c003391c:	eb 05                	jmp    c0033923 <vm_supt_mm_unmap+0x190>
c003391e:	b8 00 00 00 00       	mov    $0x0,%eax
c0033923:	88 45 eb             	mov    %al,-0x15(%ebp)
c0033926:	80 65 eb 01          	andb   $0x1,-0x15(%ebp)
c003392a:	80 7d eb 00          	cmpb   $0x0,-0x15(%ebp)
c003392e:	74 18                	je     c0033948 <vm_supt_mm_unmap+0x1b5>
c0033930:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0033933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033936:	8b 00                	mov    (%eax),%eax
c0033938:	ff 75 18             	pushl  0x18(%ebp)
c003393b:	52                   	push   %edx
c003393c:	50                   	push   %eax
c003393d:	ff 75 14             	pushl  0x14(%ebp)
c0033940:	e8 f1 ce ff ff       	call   c0030836 <file_write_at>
c0033945:	83 c4 10             	add    $0x10,%esp
c0033948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003394b:	8b 40 04             	mov    0x4(%eax),%eax
c003394e:	83 ec 0c             	sub    $0xc,%esp
c0033951:	50                   	push   %eax
c0033952:	e8 50 f5 ff ff       	call   c0032ea7 <vm_frame_free>
c0033957:	83 c4 10             	add    $0x10,%esp
c003395a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003395d:	8b 00                	mov    (%eax),%eax
c003395f:	83 ec 08             	sub    $0x8,%esp
c0033962:	50                   	push   %eax
c0033963:	ff 75 0c             	pushl  0xc(%ebp)
c0033966:	e8 cc a4 ff ff       	call   c002de37 <pagedir_clear_page>
c003396b:	83 c4 10             	add    $0x10,%esp
c003396e:	eb 01                	jmp    c0033971 <vm_supt_mm_unmap+0x1de>
c0033970:	90                   	nop
c0033971:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033974:	8d 50 10             	lea    0x10(%eax),%edx
c0033977:	8b 45 08             	mov    0x8(%ebp),%eax
c003397a:	83 ec 08             	sub    $0x8,%esp
c003397d:	52                   	push   %edx
c003397e:	50                   	push   %eax
c003397f:	e8 04 87 ff ff       	call   c002c088 <hash_delete>
c0033984:	83 c4 10             	add    $0x10,%esp
c0033987:	b8 01 00 00 00       	mov    $0x1,%eax
c003398c:	c9                   	leave  
c003398d:	c3                   	ret    

c003398e <vm_pin_page>:
c003398e:	55                   	push   %ebp
c003398f:	89 e5                	mov    %esp,%ebp
c0033991:	83 ec 18             	sub    $0x18,%esp
c0033994:	83 ec 08             	sub    $0x8,%esp
c0033997:	ff 75 0c             	pushl  0xc(%ebp)
c003399a:	ff 75 08             	pushl  0x8(%ebp)
c003399d:	e8 3c fb ff ff       	call   c00334de <vm_supt_lookup>
c00339a2:	83 c4 10             	add    $0x10,%esp
c00339a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00339a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00339ac:	74 14                	je     c00339c2 <vm_pin_page+0x34>
c00339ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00339b1:	8b 40 04             	mov    0x4(%eax),%eax
c00339b4:	83 ec 0c             	sub    $0xc,%esp
c00339b7:	50                   	push   %eax
c00339b8:	e8 da f5 ff ff       	call   c0032f97 <vm_frame_pin>
c00339bd:	83 c4 10             	add    $0x10,%esp
c00339c0:	eb 01                	jmp    c00339c3 <vm_pin_page+0x35>
c00339c2:	90                   	nop
c00339c3:	c9                   	leave  
c00339c4:	c3                   	ret    

c00339c5 <vm_unpin_page>:
c00339c5:	55                   	push   %ebp
c00339c6:	89 e5                	mov    %esp,%ebp
c00339c8:	83 ec 18             	sub    $0x18,%esp
c00339cb:	83 ec 08             	sub    $0x8,%esp
c00339ce:	ff 75 0c             	pushl  0xc(%ebp)
c00339d1:	ff 75 08             	pushl  0x8(%ebp)
c00339d4:	e8 05 fb ff ff       	call   c00334de <vm_supt_lookup>
c00339d9:	83 c4 10             	add    $0x10,%esp
c00339dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00339df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00339e2:	8b 40 08             	mov    0x8(%eax),%eax
c00339e5:	83 f8 01             	cmp    $0x1,%eax
c00339e8:	75 12                	jne    c00339fc <vm_unpin_page+0x37>
c00339ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00339ed:	8b 40 04             	mov    0x4(%eax),%eax
c00339f0:	83 ec 0c             	sub    $0xc,%esp
c00339f3:	50                   	push   %eax
c00339f4:	e8 b7 f5 ff ff       	call   c0032fb0 <vm_frame_unpin>
c00339f9:	83 c4 10             	add    $0x10,%esp
c00339fc:	90                   	nop
c00339fd:	c9                   	leave  
c00339fe:	c3                   	ret    

c00339ff <spte_hash_func>:
c00339ff:	55                   	push   %ebp
c0033a00:	89 e5                	mov    %esp,%ebp
c0033a02:	83 ec 18             	sub    $0x18,%esp
c0033a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0033a08:	83 e8 10             	sub    $0x10,%eax
c0033a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033a11:	8b 00                	mov    (%eax),%eax
c0033a13:	83 ec 0c             	sub    $0xc,%esp
c0033a16:	50                   	push   %eax
c0033a17:	e8 c9 89 ff ff       	call   c002c3e5 <hash_int>
c0033a1c:	83 c4 10             	add    $0x10,%esp
c0033a1f:	c9                   	leave  
c0033a20:	c3                   	ret    

c0033a21 <spte_less_func>:
c0033a21:	55                   	push   %ebp
c0033a22:	89 e5                	mov    %esp,%ebp
c0033a24:	83 ec 10             	sub    $0x10,%esp
c0033a27:	8b 45 08             	mov    0x8(%ebp),%eax
c0033a2a:	83 e8 10             	sub    $0x10,%eax
c0033a2d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0033a30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0033a33:	83 e8 10             	sub    $0x10,%eax
c0033a36:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0033a39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0033a3c:	8b 10                	mov    (%eax),%edx
c0033a3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0033a41:	8b 00                	mov    (%eax),%eax
c0033a43:	39 c2                	cmp    %eax,%edx
c0033a45:	0f 92 c0             	setb   %al
c0033a48:	c9                   	leave  
c0033a49:	c3                   	ret    

c0033a4a <spte_destroy_func>:
c0033a4a:	55                   	push   %ebp
c0033a4b:	89 e5                	mov    %esp,%ebp
c0033a4d:	83 ec 18             	sub    $0x18,%esp
c0033a50:	8b 45 08             	mov    0x8(%ebp),%eax
c0033a53:	83 e8 10             	sub    $0x10,%eax
c0033a56:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0033a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033a5c:	8b 40 04             	mov    0x4(%eax),%eax
c0033a5f:	85 c0                	test   %eax,%eax
c0033a61:	74 40                	je     c0033aa3 <spte_destroy_func+0x59>
c0033a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033a66:	8b 40 08             	mov    0x8(%eax),%eax
c0033a69:	83 f8 01             	cmp    $0x1,%eax
c0033a6c:	74 21                	je     c0033a8f <spte_destroy_func+0x45>
c0033a6e:	83 ec 0c             	sub    $0xc,%esp
c0033a71:	68 7b 80 03 c0       	push   $0xc003807b
c0033a76:	68 11 80 03 c0       	push   $0xc0038011
c0033a7b:	68 d4 80 03 c0       	push   $0xc00380d4
c0033a80:	68 e6 00 00 00       	push   $0xe6
c0033a85:	68 28 80 03 c0       	push   $0xc0038028
c0033a8a:	e8 02 6b ff ff       	call   c002a591 <debug_panic>
c0033a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033a92:	8b 40 04             	mov    0x4(%eax),%eax
c0033a95:	83 ec 0c             	sub    $0xc,%esp
c0033a98:	50                   	push   %eax
c0033a99:	e8 42 f4 ff ff       	call   c0032ee0 <vm_frame_remove_entry>
c0033a9e:	83 c4 10             	add    $0x10,%esp
c0033aa1:	eb 1d                	jmp    c0033ac0 <spte_destroy_func+0x76>
c0033aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033aa6:	8b 40 08             	mov    0x8(%eax),%eax
c0033aa9:	83 f8 02             	cmp    $0x2,%eax
c0033aac:	75 12                	jne    c0033ac0 <spte_destroy_func+0x76>
c0033aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033ab1:	8b 40 18             	mov    0x18(%eax),%eax
c0033ab4:	83 ec 0c             	sub    $0xc,%esp
c0033ab7:	50                   	push   %eax
c0033ab8:	e8 88 01 00 00       	call   c0033c45 <vm_swap_free>
c0033abd:	83 c4 10             	add    $0x10,%esp
c0033ac0:	83 ec 0c             	sub    $0xc,%esp
c0033ac3:	ff 75 f4             	pushl  -0xc(%ebp)
c0033ac6:	e8 85 09 ff ff       	call   c0024450 <free>
c0033acb:	83 c4 10             	add    $0x10,%esp
c0033ace:	90                   	nop
c0033acf:	c9                   	leave  
c0033ad0:	c3                   	ret    

c0033ad1 <vm_swap_init>:
c0033ad1:	55                   	push   %ebp
c0033ad2:	89 e5                	mov    %esp,%ebp
c0033ad4:	83 ec 08             	sub    $0x8,%esp
c0033ad7:	b8 08 00 00 00       	mov    $0x8,%eax
c0033adc:	85 c0                	test   %eax,%eax
c0033ade:	75 1e                	jne    c0033afe <vm_swap_init+0x2d>
c0033ae0:	83 ec 0c             	sub    $0xc,%esp
c0033ae3:	68 ec 80 03 c0       	push   $0xc00380ec
c0033ae8:	68 01 81 03 c0       	push   $0xc0038101
c0033aed:	68 28 81 03 c0       	push   $0xc0038128
c0033af2:	6a 0c                	push   $0xc
c0033af4:	68 18 81 03 c0       	push   $0xc0038118
c0033af9:	e8 93 6a ff ff       	call   c002a591 <debug_panic>
c0033afe:	83 ec 0c             	sub    $0xc,%esp
c0033b01:	6a 03                	push   $0x3
c0033b03:	e8 bc 20 ff ff       	call   c0025bc4 <block_get_role>
c0033b08:	83 c4 10             	add    $0x10,%esp
c0033b0b:	a3 30 87 04 c0       	mov    %eax,0xc0048730
c0033b10:	a1 30 87 04 c0       	mov    0xc0048730,%eax
c0033b15:	83 ec 0c             	sub    $0xc,%esp
c0033b18:	50                   	push   %eax
c0033b19:	e8 e4 22 ff ff       	call   c0025e02 <block_size>
c0033b1e:	83 c4 10             	add    $0x10,%esp
c0033b21:	b9 08 00 00 00       	mov    $0x8,%ecx
c0033b26:	ba 00 00 00 00       	mov    $0x0,%edx
c0033b2b:	f7 f1                	div    %ecx
c0033b2d:	a3 38 87 04 c0       	mov    %eax,0xc0048738
c0033b32:	a1 38 87 04 c0       	mov    0xc0048738,%eax
c0033b37:	83 ec 0c             	sub    $0xc,%esp
c0033b3a:	50                   	push   %eax
c0033b3b:	e8 d4 7a ff ff       	call   c002b614 <bitmap_create>
c0033b40:	83 c4 10             	add    $0x10,%esp
c0033b43:	a3 34 87 04 c0       	mov    %eax,0xc0048734
c0033b48:	a1 34 87 04 c0       	mov    0xc0048734,%eax
c0033b4d:	83 ec 08             	sub    $0x8,%esp
c0033b50:	6a 01                	push   $0x1
c0033b52:	50                   	push   %eax
c0033b53:	e8 b1 7d ff ff       	call   c002b909 <bitmap_set_all>
c0033b58:	83 c4 10             	add    $0x10,%esp
c0033b5b:	90                   	nop
c0033b5c:	c9                   	leave  
c0033b5d:	c3                   	ret    

c0033b5e <vm_swap_out>:
c0033b5e:	55                   	push   %ebp
c0033b5f:	89 e5                	mov    %esp,%ebp
c0033b61:	83 ec 18             	sub    $0x18,%esp
c0033b64:	a1 34 87 04 c0       	mov    0xc0048734,%eax
c0033b69:	6a 01                	push   $0x1
c0033b6b:	6a 01                	push   $0x1
c0033b6d:	6a 00                	push   $0x0
c0033b6f:	50                   	push   %eax
c0033b70:	e8 c6 80 ff ff       	call   c002bc3b <bitmap_scan>
c0033b75:	83 c4 10             	add    $0x10,%esp
c0033b78:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0033b7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0033b82:	eb 35                	jmp    c0033bb9 <vm_swap_out+0x5b>
c0033b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033b87:	c1 e0 09             	shl    $0x9,%eax
c0033b8a:	89 c2                	mov    %eax,%edx
c0033b8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0033b8f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0033b92:	b8 08 00 00 00       	mov    $0x8,%eax
c0033b97:	0f af 45 f0          	imul   -0x10(%ebp),%eax
c0033b9b:	89 c2                	mov    %eax,%edx
c0033b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033ba0:	01 c2                	add    %eax,%edx
c0033ba2:	a1 30 87 04 c0       	mov    0xc0048730,%eax
c0033ba7:	83 ec 04             	sub    $0x4,%esp
c0033baa:	51                   	push   %ecx
c0033bab:	52                   	push   %edx
c0033bac:	50                   	push   %eax
c0033bad:	e8 d4 21 ff ff       	call   c0025d86 <block_write>
c0033bb2:	83 c4 10             	add    $0x10,%esp
c0033bb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0033bb9:	b8 08 00 00 00       	mov    $0x8,%eax
c0033bbe:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0033bc1:	72 c1                	jb     c0033b84 <vm_swap_out+0x26>
c0033bc3:	a1 34 87 04 c0       	mov    0xc0048734,%eax
c0033bc8:	83 ec 04             	sub    $0x4,%esp
c0033bcb:	6a 00                	push   $0x0
c0033bcd:	ff 75 f0             	pushl  -0x10(%ebp)
c0033bd0:	50                   	push   %eax
c0033bd1:	e8 70 7b ff ff       	call   c002b746 <bitmap_set>
c0033bd6:	83 c4 10             	add    $0x10,%esp
c0033bd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0033bdc:	c9                   	leave  
c0033bdd:	c3                   	ret    

c0033bde <vm_swap_in>:
c0033bde:	55                   	push   %ebp
c0033bdf:	89 e5                	mov    %esp,%ebp
c0033be1:	83 ec 18             	sub    $0x18,%esp
c0033be4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0033beb:	eb 35                	jmp    c0033c22 <vm_swap_in+0x44>
c0033bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033bf0:	c1 e0 09             	shl    $0x9,%eax
c0033bf3:	89 c2                	mov    %eax,%edx
c0033bf5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0033bf8:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0033bfb:	b8 08 00 00 00       	mov    $0x8,%eax
c0033c00:	0f af 45 08          	imul   0x8(%ebp),%eax
c0033c04:	89 c2                	mov    %eax,%edx
c0033c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0033c09:	01 c2                	add    %eax,%edx
c0033c0b:	a1 30 87 04 c0       	mov    0xc0048730,%eax
c0033c10:	83 ec 04             	sub    $0x4,%esp
c0033c13:	51                   	push   %ecx
c0033c14:	52                   	push   %edx
c0033c15:	50                   	push   %eax
c0033c16:	e8 1c 21 ff ff       	call   c0025d37 <block_read>
c0033c1b:	83 c4 10             	add    $0x10,%esp
c0033c1e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0033c22:	b8 08 00 00 00       	mov    $0x8,%eax
c0033c27:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0033c2a:	72 c1                	jb     c0033bed <vm_swap_in+0xf>
c0033c2c:	a1 34 87 04 c0       	mov    0xc0048734,%eax
c0033c31:	83 ec 04             	sub    $0x4,%esp
c0033c34:	6a 01                	push   $0x1
c0033c36:	ff 75 08             	pushl  0x8(%ebp)
c0033c39:	50                   	push   %eax
c0033c3a:	e8 07 7b ff ff       	call   c002b746 <bitmap_set>
c0033c3f:	83 c4 10             	add    $0x10,%esp
c0033c42:	90                   	nop
c0033c43:	c9                   	leave  
c0033c44:	c3                   	ret    

c0033c45 <vm_swap_free>:
c0033c45:	55                   	push   %ebp
c0033c46:	89 e5                	mov    %esp,%ebp
c0033c48:	83 ec 08             	sub    $0x8,%esp
c0033c4b:	a1 34 87 04 c0       	mov    0xc0048734,%eax
c0033c50:	83 ec 04             	sub    $0x4,%esp
c0033c53:	6a 01                	push   $0x1
c0033c55:	ff 75 08             	pushl  0x8(%ebp)
c0033c58:	50                   	push   %eax
c0033c59:	e8 e8 7a ff ff       	call   c002b746 <bitmap_set>
c0033c5e:	83 c4 10             	add    $0x10,%esp
c0033c61:	90                   	nop
c0033c62:	c9                   	leave  
c0033c63:	c3                   	ret    
