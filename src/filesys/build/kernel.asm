
kernel.o:     file format elf32-i386


Disassembly of section .text:

c0020078 <start>:
start:

# The loader called into us with CS = 0x2000, SS = 0x0000, ESP = 0xf000,
# but we should initialize the other segment registers.

	mov $0x2000, %ax
c0020078:	b8 00 20 8e d8       	mov    $0xd88e2000,%eax
	mov %ax, %ds
	mov %ax, %es
c002007d:	8e c0                	mov    %eax,%es

# Set string instructions to go upward.
	cld
c002007f:	fc                   	cld    
#### which returns AX = (kB of physical memory) - 1024.  This only
#### works for memory sizes <= 65 MB, which should be fine for our
#### purposes.  We cap memory at 64 MB because that's all we prepare
#### page tables for, below.

	movb $0x88, %ah
c0020080:	b4 88                	mov    $0x88,%ah
	int $0x15
c0020082:	cd 15                	int    $0x15
	addl $1024, %eax	# Total kB memory
c0020084:	66 05 00 04          	add    $0x400,%ax
c0020088:	00 00                	add    %al,(%eax)
	cmp $0x10000, %eax	# Cap at 64 MB
c002008a:	66 3d 00 00          	cmp    $0x0,%ax
c002008e:	01 00                	add    %eax,(%eax)
	jbe 1f
c0020090:	76 06                	jbe    c0020098 <start+0x20>
	mov $0x10000, %eax
c0020092:	66 b8 00 00          	mov    $0x0,%ax
c0020096:	01 00                	add    %eax,(%eax)
1:	shrl $2, %eax		# Total 4 kB pages
c0020098:	66 c1 e8 02          	shr    $0x2,%ax
	addr32 movl %eax, init_ram_pages - LOADER_PHYS_BASE - 0x20000
c002009c:	67 66 a3 7e 01       	addr16 mov %ax,0x17e
c00200a1:	00 00                	add    %al,(%eax)
#### Enable A20.  Address line 20 is tied low when the machine boots,
#### which prevents addressing memory about 1 MB.  This code fixes it.

# Poll status register while busy.

1:	inb $0x64, %al
c00200a3:	e4 64                	in     $0x64,%al
	testb $0x2, %al
c00200a5:	a8 02                	test   $0x2,%al
	jnz 1b
c00200a7:	75 fa                	jne    c00200a3 <start+0x2b>

# Send command for writing output port.

	movb $0xd1, %al
c00200a9:	b0 d1                	mov    $0xd1,%al
	outb %al, $0x64
c00200ab:	e6 64                	out    %al,$0x64

# Poll status register while busy.

1:	inb $0x64, %al
c00200ad:	e4 64                	in     $0x64,%al
	testb $0x2, %al
c00200af:	a8 02                	test   $0x2,%al
	jnz 1b
c00200b1:	75 fa                	jne    c00200ad <start+0x35>

# Enable A20 line.

	movb $0xdf, %al
c00200b3:	b0 df                	mov    $0xdf,%al
	outb %al, $0x60
c00200b5:	e6 60                	out    %al,$0x60

# Poll status register while busy.

1:	inb $0x64, %al
c00200b7:	e4 64                	in     $0x64,%al
	testb $0x2, %al
c00200b9:	a8 02                	test   $0x2,%al
	jnz 1b
c00200bb:	75 fa                	jne    c00200b7 <start+0x3f>

#### Create temporary page directory and page table and set page
#### directory base register.

# Create page directory at 0xf000 (60 kB) and fill with zeroes.
	mov $0xf00, %ax
c00200bd:	b8 00 0f 8e c0       	mov    $0xc08e0f00,%eax
	mov %ax, %es
	subl %eax, %eax
c00200c2:	66 29 c0             	sub    %ax,%ax
	subl %edi, %edi
c00200c5:	66 29 ff             	sub    %di,%di
	movl $0x400, %ecx
c00200c8:	66 b9 00 04          	mov    $0x400,%cx
c00200cc:	00 00                	add    %al,(%eax)
	rep stosl
c00200ce:	66 f3 ab             	rep stos %ax,%es:(%edi)
# Add PDEs to point to page tables for the first 64 MB of RAM.
# Also add identical PDEs starting at LOADER_PHYS_BASE.
# See [IA32-v3a] section 3.7.6 "Page-Directory and Page-Table Entries"
# for a description of the bits in %eax.

	movl $0x10007, %eax
c00200d1:	66 b8 07 00          	mov    $0x7,%ax
c00200d5:	01 00                	add    %eax,(%eax)
	movl $0x11, %ecx
c00200d7:	66 b9 11 00          	mov    $0x11,%cx
c00200db:	00 00                	add    %al,(%eax)
	subl %edi, %edi
c00200dd:	66 29 ff             	sub    %di,%di
1:	movl %eax, %es:(%di)
c00200e0:	26 66 89 05 26 66 89 	mov    %ax,%es:0x85896626
c00200e7:	85 
	movl %eax, %es:LOADER_PHYS_BASE >> 20(%di)
c00200e8:	00 0c 83             	add    %cl,(%ebx,%eax,4)
	addw $4, %di
c00200eb:	c7 04 66 05 00 10 00 	movl   $0x100005,(%esi,%eiz,2)
	addl $0x1000, %eax
c00200f2:	00 e2                	add    %ah,%dl
	loop 1b
c00200f4:	eb b8                	jmp    c00200ae <start+0x36>
# Set up page tables for one-to-map linear to physical map for the
# first 64 MB of RAM.
# See [IA32-v3a] section 3.7.6 "Page-Directory and Page-Table Entries"
# for a description of the bits in %eax.

	movw $0x1000, %ax
c00200f6:	00 10                	add    %dl,(%eax)
	movw %ax, %es
c00200f8:	8e c0                	mov    %eax,%es
	movl $0x7, %eax
c00200fa:	66 b8 07 00          	mov    $0x7,%ax
c00200fe:	00 00                	add    %al,(%eax)
	movl $0x4000, %ecx
c0020100:	66 b9 00 40          	mov    $0x4000,%cx
c0020104:	00 00                	add    %al,(%eax)
	subl %edi, %edi
c0020106:	66 29 ff             	sub    %di,%di
1:	movl %eax, %es:(%di)
c0020109:	26 66 89 05 83 c7 04 	mov    %ax,%es:0x6604c783
c0020110:	66 
	addw $4, %di
	addl $0x1000, %eax
c0020111:	05 00 10 00 00       	add    $0x1000,%eax
	loop 1b
c0020116:	e2 f1                	loop   c0020109 <start+0x91>

# Set page directory base register.

	movl $0xf000, %eax
c0020118:	66 b8 00 f0          	mov    $0xf000,%ax
c002011c:	00 00                	add    %al,(%eax)
	movl %eax, %cr3
c002011e:	0f 22 d8             	mov    %eax,%cr3
#### Switch to protected mode.

# First, disable interrupts.  We won't set up the IDT until we get
# into C code, so any interrupt would blow us away.

	cli
c0020121:	fa                   	cli    
# We need a data32 prefix to ensure that all 32 bits of the GDT
# descriptor are loaded (default is to load only 24 bits).
# The CPU doesn't need an addr32 prefix but ELF doesn't do 16-bit
# relocations.

	data32 addr32 lgdt gdtdesc - LOADER_PHYS_BASE - 0x20000
c0020122:	67 66 0f 01 15       	lgdtw  (%di)
c0020127:	78 01                	js     c002012a <start+0xb2>
c0020129:	00 00                	add    %al,(%eax)
#    WP (Write Protect): if unset, ring 0 code ignores
#       write-protect bits in page tables (!).
#    EM (Emulation): forces floating-point instructions to trap.
#       We don't support floating point.

	movl %cr0, %eax
c002012b:	0f 20 c0             	mov    %cr0,%eax
	orl $CR0_PE | CR0_PG | CR0_WP | CR0_EM, %eax
c002012e:	66 0d 05 00          	or     $0x5,%ax
c0020132:	01 80 0f 22 c0 66    	add    %eax,0x66c0220f(%eax)
# the real-mode code segment cached in %cs's segment descriptor.  We
# need to reload %cs, and the easiest way is to use a far jump.
# Because we're not running in a 32-bit segment the data32 prefix is
# needed to jump to a 32-bit offset in the target segment.

	data32 ljmp $SEL_KCSEG, $1f
c0020138:	ea 3f 01 02 c0 08 00 	ljmp   $0x8,$0xc002013f
	.code32

# Reload all the other segment registers and the stack pointer to
# point into our new GDT.

1:	mov $SEL_KDSEG, %ax
c002013f:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
c0020143:	8e d8                	mov    %eax,%ds
	mov %ax, %es
c0020145:	8e c0                	mov    %eax,%es
	mov %ax, %fs
c0020147:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
c0020149:	8e e8                	mov    %eax,%gs
	mov %ax, %ss
c002014b:	8e d0                	mov    %eax,%ss
	addl $LOADER_PHYS_BASE, %esp
c002014d:	81 c4 00 00 00 c0    	add    $0xc0000000,%esp
	movl $0, %ebp			# Null-terminate main()'s backtrace
c0020153:	bd 00 00 00 00       	mov    $0x0,%ebp

#### Call pintos_init().

	call pintos_init
c0020158:	e8 79 01 00 00       	call   c00202d6 <pintos_init>

# pintos_init() shouldn't ever return.  If it does, spin.

1:	jmp 1b
c002015d:	eb fe                	jmp    c002015d <start+0xe5>
	...

c0020160 <gdt>:
	...
c0020168:	ff                   	(bad)  
c0020169:	ff 00                	incl   (%eax)
c002016b:	00 00                	add    %al,(%eax)
c002016d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
c0020174:	00                   	.byte 0x0
c0020175:	92                   	xchg   %eax,%edx
c0020176:	cf                   	iret   
	...

c0020178 <gdtdesc>:
c0020178:	17                   	pop    %ss
c0020179:	00 60 01             	add    %ah,0x1(%eax)
c002017c:	02 c0                	add    %al,%al

c002017e <init_ram_pages>:
c002017e:	00 00                	add    %al,(%eax)
	...

c0020182 <pg_ofs>:
#define PGBITS  12                         /* Number of offset bits. */
#define PGSIZE  (1 << PGBITS)              /* Bytes in a page. */
#define PGMASK  BITMASK(PGSHIFT, PGBITS)   /* Page offset bits (0:12). */

/* Offset within a page. */
static inline unsigned pg_ofs (const void *va) {
c0020182:	55                   	push   %ebp
c0020183:	89 e5                	mov    %esp,%ebp
  return (uintptr_t) va & PGMASK;
c0020185:	8b 45 08             	mov    0x8(%ebp),%eax
c0020188:	25 ff 0f 00 00       	and    $0xfff,%eax
}
c002018d:	5d                   	pop    %ebp
c002018e:	c3                   	ret    

c002018f <is_kernel_vaddr>:
}

/* Returns true if VADDR is a kernel virtual address. */
static inline bool
is_kernel_vaddr (const void *vaddr) 
{
c002018f:	55                   	push   %ebp
c0020190:	89 e5                	mov    %esp,%ebp
  return vaddr >= PHYS_BASE;
c0020192:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0020199:	0f 97 c0             	seta   %al
}
c002019c:	5d                   	pop    %ebp
c002019d:	c3                   	ret    

c002019e <ptov>:

/* Returns kernel virtual address at which physical address PADDR
   is mapped. */
static inline void *
ptov (uintptr_t paddr)
{
c002019e:	55                   	push   %ebp
c002019f:	89 e5                	mov    %esp,%ebp
c00201a1:	83 ec 08             	sub    $0x8,%esp
  ASSERT ((void *) paddr < PHYS_BASE);
c00201a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00201a7:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c00201ac:	76 1e                	jbe    c00201cc <ptov+0x2e>
c00201ae:	83 ec 0c             	sub    $0xc,%esp
c00201b1:	68 00 24 03 c0       	push   $0xc0032400
c00201b6:	68 1b 24 03 c0       	push   $0xc003241b
c00201bb:	68 40 2a 03 c0       	push   $0xc0032a40
c00201c0:	6a 4a                	push   $0x4a
c00201c2:	68 32 24 03 c0       	push   $0xc0032432
c00201c7:	e8 5e a3 00 00       	call   c002a52a <debug_panic>

  return (void *) (paddr + PHYS_BASE);
c00201cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00201cf:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c00201d4:	c9                   	leave  
c00201d5:	c3                   	ret    

c00201d6 <vtop>:

/* Returns physical address at which kernel virtual address VADDR
   is mapped. */
static inline uintptr_t
vtop (const void *vaddr)
{
c00201d6:	55                   	push   %ebp
c00201d7:	89 e5                	mov    %esp,%ebp
c00201d9:	83 ec 08             	sub    $0x8,%esp
  ASSERT (is_kernel_vaddr (vaddr));
c00201dc:	ff 75 08             	pushl  0x8(%ebp)
c00201df:	e8 ab ff ff ff       	call   c002018f <is_kernel_vaddr>
c00201e4:	83 c4 04             	add    $0x4,%esp
c00201e7:	84 c0                	test   %al,%al
c00201e9:	75 1e                	jne    c0020209 <vtop+0x33>
c00201eb:	83 ec 0c             	sub    $0xc,%esp
c00201ee:	68 48 24 03 c0       	push   $0xc0032448
c00201f3:	68 1b 24 03 c0       	push   $0xc003241b
c00201f8:	68 68 2a 03 c0       	push   $0xc0032a68
c00201fd:	6a 54                	push   $0x54
c00201ff:	68 32 24 03 c0       	push   $0xc0032432
c0020204:	e8 21 a3 00 00       	call   c002a52a <debug_panic>

  return (uintptr_t) vaddr - (uintptr_t) PHYS_BASE;
c0020209:	8b 45 08             	mov    0x8(%ebp),%eax
c002020c:	05 00 00 00 40       	add    $0x40000000,%eax
}
c0020211:	c9                   	leave  
c0020212:	c3                   	ret    

c0020213 <pt_no>:
#define PDSHIFT (PTSHIFT + PTBITS)         /* First page directory bit. */
#define PDBITS  10                         /* Number of page dir bits. */
#define PDMASK  BITMASK(PDSHIFT, PDBITS)   /* Page directory bits (22:31). */

/* Obtains page table index from a virtual address. */
static inline unsigned pt_no (const void *va) {
c0020213:	55                   	push   %ebp
c0020214:	89 e5                	mov    %esp,%ebp
  return ((uintptr_t) va & PTMASK) >> PTSHIFT;
c0020216:	8b 45 08             	mov    0x8(%ebp),%eax
c0020219:	c1 e8 0c             	shr    $0xc,%eax
c002021c:	25 ff 03 00 00       	and    $0x3ff,%eax
}
c0020221:	5d                   	pop    %ebp
c0020222:	c3                   	ret    

c0020223 <pd_no>:

/* Obtains page directory index from a virtual address. */
static inline uintptr_t pd_no (const void *va) {
c0020223:	55                   	push   %ebp
c0020224:	89 e5                	mov    %esp,%ebp
  return (uintptr_t) va >> PDSHIFT;
c0020226:	8b 45 08             	mov    0x8(%ebp),%eax
c0020229:	c1 e8 16             	shr    $0x16,%eax
}
c002022c:	5d                   	pop    %ebp
c002022d:	c3                   	ret    

c002022e <pde_create>:
#define PTE_U 0x4               /* 1=user/kernel, 0=kernel only. */
#define PTE_A 0x20              /* 1=accessed, 0=not acccessed. */
#define PTE_D 0x40              /* 1=dirty, 0=not dirty (PTEs only). */

/* Returns a PDE that points to page table PT. */
static inline uint32_t pde_create (uint32_t *pt) {
c002022e:	55                   	push   %ebp
c002022f:	89 e5                	mov    %esp,%ebp
c0020231:	83 ec 08             	sub    $0x8,%esp
  ASSERT (pg_ofs (pt) == 0);
c0020234:	ff 75 08             	pushl  0x8(%ebp)
c0020237:	e8 46 ff ff ff       	call   c0020182 <pg_ofs>
c002023c:	83 c4 04             	add    $0x4,%esp
c002023f:	85 c0                	test   %eax,%eax
c0020241:	74 1e                	je     c0020261 <pde_create+0x33>
c0020243:	83 ec 0c             	sub    $0xc,%esp
c0020246:	68 60 24 03 c0       	push   $0xc0032460
c002024b:	68 1b 24 03 c0       	push   $0xc003241b
c0020250:	68 48 2a 03 c0       	push   $0xc0032a48
c0020255:	6a 48                	push   $0x48
c0020257:	68 71 24 03 c0       	push   $0xc0032471
c002025c:	e8 c9 a2 00 00       	call   c002a52a <debug_panic>
  return vtop (pt) | PTE_U | PTE_P | PTE_W;
c0020261:	83 ec 0c             	sub    $0xc,%esp
c0020264:	ff 75 08             	pushl  0x8(%ebp)
c0020267:	e8 6a ff ff ff       	call   c00201d6 <vtop>
c002026c:	83 c4 10             	add    $0x10,%esp
c002026f:	83 c8 07             	or     $0x7,%eax
}
c0020272:	c9                   	leave  
c0020273:	c3                   	ret    

c0020274 <pte_create_kernel>:

/* Returns a PTE that points to PAGE.
   The PTE's page is readable.
   If WRITABLE is true then it will be writable as well.
   The page will be usable only by ring 0 code (the kernel). */
static inline uint32_t pte_create_kernel (void *page, bool writable) {
c0020274:	55                   	push   %ebp
c0020275:	89 e5                	mov    %esp,%ebp
c0020277:	83 ec 18             	sub    $0x18,%esp
c002027a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002027d:	88 45 f4             	mov    %al,-0xc(%ebp)
  ASSERT (pg_ofs (page) == 0);
c0020280:	ff 75 08             	pushl  0x8(%ebp)
c0020283:	e8 fa fe ff ff       	call   c0020182 <pg_ofs>
c0020288:	83 c4 04             	add    $0x4,%esp
c002028b:	85 c0                	test   %eax,%eax
c002028d:	74 1e                	je     c00202ad <pte_create_kernel+0x39>
c002028f:	83 ec 0c             	sub    $0xc,%esp
c0020292:	68 85 24 03 c0       	push   $0xc0032485
c0020297:	68 1b 24 03 c0       	push   $0xc003241b
c002029c:	68 54 2a 03 c0       	push   $0xc0032a54
c00202a1:	6a 58                	push   $0x58
c00202a3:	68 71 24 03 c0       	push   $0xc0032471
c00202a8:	e8 7d a2 00 00       	call   c002a52a <debug_panic>
  return vtop (page) | PTE_P | (writable ? PTE_W : 0);
c00202ad:	83 ec 0c             	sub    $0xc,%esp
c00202b0:	ff 75 08             	pushl  0x8(%ebp)
c00202b3:	e8 1e ff ff ff       	call   c00201d6 <vtop>
c00202b8:	83 c4 10             	add    $0x10,%esp
c00202bb:	89 c2                	mov    %eax,%edx
c00202bd:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c00202c1:	74 07                	je     c00202ca <pte_create_kernel+0x56>
c00202c3:	b8 02 00 00 00       	mov    $0x2,%eax
c00202c8:	eb 05                	jmp    c00202cf <pte_create_kernel+0x5b>
c00202ca:	b8 00 00 00 00       	mov    $0x0,%eax
c00202cf:	09 d0                	or     %edx,%eax
c00202d1:	83 c8 01             	or     $0x1,%eax
}
c00202d4:	c9                   	leave  
c00202d5:	c3                   	ret    

c00202d6 <pintos_init>:
int pintos_init (void) NO_RETURN;

/* Pintos main entry point. */
int
pintos_init (void)
{
c00202d6:	55                   	push   %ebp
c00202d7:	89 e5                	mov    %esp,%ebp
c00202d9:	83 ec 18             	sub    $0x18,%esp
  char **argv;

  /* Clear BSS. */  
  bss_init ();
c00202dc:	e8 e0 00 00 00       	call   c00203c1 <bss_init>

  /* Break command line into arguments and parse options. */
  argv = read_command_line ();
c00202e1:	e8 40 02 00 00       	call   c0020526 <read_command_line>
c00202e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  argv = parse_options (argv);
c00202e9:	83 ec 0c             	sub    $0xc,%esp
c00202ec:	ff 75 f4             	pushl  -0xc(%ebp)
c00202ef:	e8 62 03 00 00       	call   c0020656 <parse_options>
c00202f4:	83 c4 10             	add    $0x10,%esp
c00202f7:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Initialize ourselves as a thread so we can use locks,
     then enable console locking. */
  thread_init ();
c00202fa:	e8 a1 07 00 00       	call   c0020aa0 <thread_init>
  console_init ();  
c00202ff:	e8 8a c3 00 00       	call   c002c68e <console_init>

  /* Greet user. */
  printf ("Pintos booting with %'"PRIu32" kB RAM...\n",
          init_ram_pages * PGSIZE / 1024);
c0020304:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c0020309:	c1 e0 0c             	shl    $0xc,%eax
  printf ("Pintos booting with %'"PRIu32" kB RAM...\n",
c002030c:	c1 e8 0a             	shr    $0xa,%eax
c002030f:	83 ec 08             	sub    $0x8,%esp
c0020312:	50                   	push   %eax
c0020313:	68 98 24 03 c0       	push   $0xc0032498
c0020318:	e8 ac 7c 00 00       	call   c0027fc9 <printf>
c002031d:	83 c4 10             	add    $0x10,%esp

  /* Initialize memory system. */
  palloc_init (user_page_limit);
c0020320:	a1 a0 b7 03 c0       	mov    0xc003b7a0,%eax
c0020325:	83 ec 0c             	sub    $0xc,%esp
c0020328:	50                   	push   %eax
c0020329:	e8 f9 38 00 00       	call   c0023c27 <palloc_init>
c002032e:	83 c4 10             	add    $0x10,%esp
  malloc_init ();
c0020331:	e8 02 3d 00 00       	call   c0024038 <malloc_init>
  paging_init ();
c0020336:	e8 b0 00 00 00       	call   c00203eb <paging_init>
#ifdef VM
  vm_frame_init();
#endif
  /* Segmentation. */
#ifdef USERPROG
  tss_init ();
c002033b:	e8 0d f4 00 00       	call   c002f74d <tss_init>
  gdt_init ();
c0020340:	e8 35 f1 00 00       	call   c002f47a <gdt_init>
#endif

  /* Initialize interrupt handlers. */
  intr_init ();
c0020345:	e8 53 1a 00 00       	call   c0021d9d <intr_init>
  timer_init ();
c002034a:	e8 a4 44 00 00       	call   c00247f3 <timer_init>
  kbd_init ();
c002034f:	e8 e3 4b 00 00       	call   c0024f37 <kbd_init>
  input_init ();
c0020354:	e8 db 6e 00 00       	call   c0027234 <input_init>

#ifdef USERPROG
  exception_init ();
c0020359:	e8 f4 db 00 00       	call   c002df52 <exception_init>
  syscall_init ();
c002035e:	e8 07 e0 00 00       	call   c002e36a <syscall_init>
#endif

  /* Start thread scheduler and enable interrupts. */
  thread_start ();
c0020363:	e8 e9 07 00 00       	call   c0020b51 <thread_start>
  serial_init_queue ();
c0020368:	e8 c5 53 00 00       	call   c0025732 <serial_init_queue>
  timer_calibrate ();
c002036d:	e8 c2 44 00 00       	call   c0024834 <timer_calibrate>

#ifdef FILESYS
  /* Initialize file system. */
  ide_init ();
c0020372:	e8 a9 61 00 00       	call   c0026520 <ide_init>
  locate_block_devices ();
c0020377:	e8 1a 06 00 00       	call   c0020996 <locate_block_devices>
  filesys_init (format_filesys);
c002037c:	a0 40 c0 03 c0       	mov    0xc003c040,%al
c0020381:	0f b6 c0             	movzbl %al,%eax
c0020384:	83 ec 0c             	sub    $0xc,%esp
c0020387:	50                   	push   %eax
c0020388:	e8 71 f4 00 00       	call   c002f7fe <filesys_init>
c002038d:	83 c4 10             	add    $0x10,%esp
#endif
#ifdef VM
    vm_swap_init ();
#endif
  printf ("Boot complete.\n");
c0020390:	83 ec 0c             	sub    $0xc,%esp
c0020393:	68 bb 24 03 c0       	push   $0xc00324bb
c0020398:	e8 54 c4 00 00       	call   c002c7f1 <puts>
c002039d:	83 c4 10             	add    $0x10,%esp
  
  if (*argv != NULL) {
c00203a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00203a3:	8b 00                	mov    (%eax),%eax
c00203a5:	85 c0                	test   %eax,%eax
c00203a7:	74 0e                	je     c00203b7 <pintos_init+0xe1>
    /* Run actions specified on kernel command line. */
    run_actions (argv);
c00203a9:	83 ec 0c             	sub    $0xc,%esp
c00203ac:	ff 75 f4             	pushl  -0xc(%ebp)
c00203af:	e8 e3 04 00 00       	call   c0020897 <run_actions>
c00203b4:	83 c4 10             	add    $0x10,%esp
  } else {
    // TODO: no command line passed to kernel. Run interactively 
  }

  /* Finish up. */
  shutdown ();
c00203b7:	e8 36 76 00 00       	call   c00279f2 <shutdown>
  thread_exit ();
c00203bc:	e8 67 0b 00 00       	call   c0020f28 <thread_exit>

c00203c1 <bss_init>:

   The start and end of the BSS segment is recorded by the
   linker as _start_bss and _end_bss.  See kernel.lds. */
static void
bss_init (void) 
{
c00203c1:	55                   	push   %ebp
c00203c2:	89 e5                	mov    %esp,%ebp
c00203c4:	83 ec 08             	sub    $0x8,%esp
  extern char _start_bss, _end_bss;
  memset (&_start_bss, 0, &_end_bss - &_start_bss);
c00203c7:	ba c4 61 04 c0       	mov    $0xc00461c4,%edx
c00203cc:	b8 24 c0 03 c0       	mov    $0xc003c024,%eax
c00203d1:	29 c2                	sub    %eax,%edx
c00203d3:	89 d0                	mov    %edx,%eax
c00203d5:	83 ec 04             	sub    $0x4,%esp
c00203d8:	50                   	push   %eax
c00203d9:	6a 00                	push   $0x0
c00203db:	68 24 c0 03 c0       	push   $0xc003c024
c00203e0:	e8 0b 94 00 00       	call   c00297f0 <memset>
c00203e5:	83 c4 10             	add    $0x10,%esp
}
c00203e8:	90                   	nop
c00203e9:	c9                   	leave  
c00203ea:	c3                   	ret    

c00203eb <paging_init>:
   kernel virtual mapping, and then sets up the CPU to use the
   new page directory.  Points init_page_dir to the page
   directory it creates. */
static void
paging_init (void)
{
c00203eb:	55                   	push   %ebp
c00203ec:	89 e5                	mov    %esp,%ebp
c00203ee:	53                   	push   %ebx
c00203ef:	83 ec 24             	sub    $0x24,%esp
  uint32_t *pd, *pt;
  size_t page;
  extern char _start, _end_kernel_text;

  pd = init_page_dir = palloc_get_page (PAL_ASSERT | PAL_ZERO);
c00203f2:	83 ec 0c             	sub    $0xc,%esp
c00203f5:	6a 03                	push   $0x3
c00203f7:	e8 a7 39 00 00       	call   c0023da3 <palloc_get_page>
c00203fc:	83 c4 10             	add    $0x10,%esp
c00203ff:	a3 78 61 04 c0       	mov    %eax,0xc0046178
c0020404:	a1 78 61 04 c0       	mov    0xc0046178,%eax
c0020409:	89 45 ec             	mov    %eax,-0x14(%ebp)
  pt = NULL;
c002040c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  for (page = 0; page < init_ram_pages; page++)
c0020413:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002041a:	e9 df 00 00 00       	jmp    c00204fe <paging_init+0x113>
    {
      uintptr_t paddr = page * PGSIZE;
c002041f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020422:	c1 e0 0c             	shl    $0xc,%eax
c0020425:	89 45 e8             	mov    %eax,-0x18(%ebp)
      char *vaddr = ptov (paddr);
c0020428:	83 ec 0c             	sub    $0xc,%esp
c002042b:	ff 75 e8             	pushl  -0x18(%ebp)
c002042e:	e8 6b fd ff ff       	call   c002019e <ptov>
c0020433:	83 c4 10             	add    $0x10,%esp
c0020436:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      size_t pde_idx = pd_no (vaddr);
c0020439:	83 ec 0c             	sub    $0xc,%esp
c002043c:	ff 75 e4             	pushl  -0x1c(%ebp)
c002043f:	e8 df fd ff ff       	call   c0020223 <pd_no>
c0020444:	83 c4 10             	add    $0x10,%esp
c0020447:	89 45 e0             	mov    %eax,-0x20(%ebp)
      size_t pte_idx = pt_no (vaddr);
c002044a:	83 ec 0c             	sub    $0xc,%esp
c002044d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0020450:	e8 be fd ff ff       	call   c0020213 <pt_no>
c0020455:	83 c4 10             	add    $0x10,%esp
c0020458:	89 45 dc             	mov    %eax,-0x24(%ebp)
      bool in_kernel_text = &_start <= vaddr && vaddr < &_end_kernel_text;
c002045b:	81 7d e4 00 00 02 c0 	cmpl   $0xc0020000,-0x1c(%ebp)
c0020462:	72 10                	jb     c0020474 <paging_init+0x89>
c0020464:	81 7d e4 00 70 03 c0 	cmpl   $0xc0037000,-0x1c(%ebp)
c002046b:	73 07                	jae    c0020474 <paging_init+0x89>
c002046d:	b8 01 00 00 00       	mov    $0x1,%eax
c0020472:	eb 05                	jmp    c0020479 <paging_init+0x8e>
c0020474:	b8 00 00 00 00       	mov    $0x0,%eax
c0020479:	88 45 db             	mov    %al,-0x25(%ebp)
c002047c:	80 65 db 01          	andb   $0x1,-0x25(%ebp)

      if (pd[pde_idx] == 0)
c0020480:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0020483:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002048a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002048d:	01 d0                	add    %edx,%eax
c002048f:	8b 00                	mov    (%eax),%eax
c0020491:	85 c0                	test   %eax,%eax
c0020493:	75 30                	jne    c00204c5 <paging_init+0xda>
        {
          pt = palloc_get_page (PAL_ASSERT | PAL_ZERO);
c0020495:	83 ec 0c             	sub    $0xc,%esp
c0020498:	6a 03                	push   $0x3
c002049a:	e8 04 39 00 00       	call   c0023da3 <palloc_get_page>
c002049f:	83 c4 10             	add    $0x10,%esp
c00204a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
          pd[pde_idx] = pde_create (pt);
c00204a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00204a8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00204af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00204b2:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c00204b5:	83 ec 0c             	sub    $0xc,%esp
c00204b8:	ff 75 f4             	pushl  -0xc(%ebp)
c00204bb:	e8 6e fd ff ff       	call   c002022e <pde_create>
c00204c0:	83 c4 10             	add    $0x10,%esp
c00204c3:	89 03                	mov    %eax,(%ebx)
        }

      pt[pte_idx] = pte_create_kernel (vaddr, !in_kernel_text);
c00204c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00204c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00204cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00204d2:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c00204d5:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c00204d9:	85 c0                	test   %eax,%eax
c00204db:	0f 95 c0             	setne  %al
c00204de:	83 f0 01             	xor    $0x1,%eax
c00204e1:	0f b6 c0             	movzbl %al,%eax
c00204e4:	83 e0 01             	and    $0x1,%eax
c00204e7:	0f b6 c0             	movzbl %al,%eax
c00204ea:	83 ec 08             	sub    $0x8,%esp
c00204ed:	50                   	push   %eax
c00204ee:	ff 75 e4             	pushl  -0x1c(%ebp)
c00204f1:	e8 7e fd ff ff       	call   c0020274 <pte_create_kernel>
c00204f6:	83 c4 10             	add    $0x10,%esp
c00204f9:	89 03                	mov    %eax,(%ebx)
  for (page = 0; page < init_ram_pages; page++)
c00204fb:	ff 45 f0             	incl   -0x10(%ebp)
c00204fe:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c0020503:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0020506:	0f 82 13 ff ff ff    	jb     c002041f <paging_init+0x34>
  /* Store the physical address of the page directory into CR3
     aka PDBR (page directory base register).  This activates our
     new page tables immediately.  See [IA32-v2a] "MOV--Move
     to/from Control Registers" and [IA32-v3a] 3.7.5 "Base Address
     of the Page Directory". */
  asm volatile ("movl %0, %%cr3" : : "r" (vtop (init_page_dir)));
c002050c:	a1 78 61 04 c0       	mov    0xc0046178,%eax
c0020511:	83 ec 0c             	sub    $0xc,%esp
c0020514:	50                   	push   %eax
c0020515:	e8 bc fc ff ff       	call   c00201d6 <vtop>
c002051a:	83 c4 10             	add    $0x10,%esp
c002051d:	0f 22 d8             	mov    %eax,%cr3
}
c0020520:	90                   	nop
c0020521:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0020524:	c9                   	leave  
c0020525:	c3                   	ret    

c0020526 <read_command_line>:

/* Breaks the kernel command line into words and returns them as
   an argv-like array. */
static char **
read_command_line (void) 
{
c0020526:	55                   	push   %ebp
c0020527:	89 e5                	mov    %esp,%ebp
c0020529:	83 ec 18             	sub    $0x18,%esp
  static char *argv[LOADER_ARGS_LEN / 2 + 1];
  char *p, *end;
  int argc;
  int i;

  argc = *(uint32_t *) ptov (LOADER_ARG_CNT);
c002052c:	83 ec 0c             	sub    $0xc,%esp
c002052f:	68 3a 7d 00 00       	push   $0x7d3a
c0020534:	e8 65 fc ff ff       	call   c002019e <ptov>
c0020539:	83 c4 10             	add    $0x10,%esp
c002053c:	8b 00                	mov    (%eax),%eax
c002053e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  p = ptov (LOADER_ARGS);
c0020541:	83 ec 0c             	sub    $0xc,%esp
c0020544:	68 3e 7d 00 00       	push   $0x7d3e
c0020549:	e8 50 fc ff ff       	call   c002019e <ptov>
c002054e:	83 c4 10             	add    $0x10,%esp
c0020551:	89 45 f4             	mov    %eax,-0xc(%ebp)
  end = p + LOADER_ARGS_LEN;
c0020554:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020557:	83 e8 80             	sub    $0xffffff80,%eax
c002055a:	89 45 e8             	mov    %eax,-0x18(%ebp)
  for (i = 0; i < argc; i++) 
c002055d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0020564:	eb 4e                	jmp    c00205b4 <read_command_line+0x8e>
    {
      if (p >= end)
c0020566:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020569:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c002056c:	72 19                	jb     c0020587 <read_command_line+0x61>
        PANIC ("command line arguments overflow");
c002056e:	68 cc 24 03 c0       	push   $0xc00324cc
c0020573:	68 70 2a 03 c0       	push   $0xc0032a70
c0020578:	68 e3 00 00 00       	push   $0xe3
c002057d:	68 ec 24 03 c0       	push   $0xc00324ec
c0020582:	e8 a3 9f 00 00       	call   c002a52a <debug_panic>

      argv[i] = p;
c0020587:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002058a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002058d:	89 14 85 60 c0 03 c0 	mov    %edx,-0x3ffc3fa0(,%eax,4)
      p += strnlen (p, end - p) + 1;
c0020594:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0020597:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002059a:	29 c2                	sub    %eax,%edx
c002059c:	89 d0                	mov    %edx,%eax
c002059e:	83 ec 08             	sub    $0x8,%esp
c00205a1:	50                   	push   %eax
c00205a2:	ff 75 f4             	pushl  -0xc(%ebp)
c00205a5:	e8 ee 92 00 00       	call   c0029898 <strnlen>
c00205aa:	83 c4 10             	add    $0x10,%esp
c00205ad:	40                   	inc    %eax
c00205ae:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (i = 0; i < argc; i++) 
c00205b1:	ff 45 f0             	incl   -0x10(%ebp)
c00205b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00205b7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00205ba:	7c aa                	jl     c0020566 <read_command_line+0x40>
    }
  argv[argc] = NULL;
c00205bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00205bf:	c7 04 85 60 c0 03 c0 	movl   $0x0,-0x3ffc3fa0(,%eax,4)
c00205c6:	00 00 00 00 

  /* Print kernel command line. */
  printf ("Kernel command line:");
c00205ca:	83 ec 0c             	sub    $0xc,%esp
c00205cd:	68 01 25 03 c0       	push   $0xc0032501
c00205d2:	e8 f2 79 00 00       	call   c0027fc9 <printf>
c00205d7:	83 c4 10             	add    $0x10,%esp
  for (i = 0; i < argc; i++)
c00205da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c00205e1:	eb 57                	jmp    c002063a <read_command_line+0x114>
    if (strchr (argv[i], ' ') == NULL)
c00205e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00205e6:	8b 04 85 60 c0 03 c0 	mov    -0x3ffc3fa0(,%eax,4),%eax
c00205ed:	83 ec 08             	sub    $0x8,%esp
c00205f0:	6a 20                	push   $0x20
c00205f2:	50                   	push   %eax
c00205f3:	e8 07 8f 00 00       	call   c00294ff <strchr>
c00205f8:	83 c4 10             	add    $0x10,%esp
c00205fb:	85 c0                	test   %eax,%eax
c00205fd:	75 1d                	jne    c002061c <read_command_line+0xf6>
      printf (" %s", argv[i]);
c00205ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020602:	8b 04 85 60 c0 03 c0 	mov    -0x3ffc3fa0(,%eax,4),%eax
c0020609:	83 ec 08             	sub    $0x8,%esp
c002060c:	50                   	push   %eax
c002060d:	68 16 25 03 c0       	push   $0xc0032516
c0020612:	e8 b2 79 00 00       	call   c0027fc9 <printf>
c0020617:	83 c4 10             	add    $0x10,%esp
c002061a:	eb 1b                	jmp    c0020637 <read_command_line+0x111>
    else
      printf (" '%s'", argv[i]);
c002061c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002061f:	8b 04 85 60 c0 03 c0 	mov    -0x3ffc3fa0(,%eax,4),%eax
c0020626:	83 ec 08             	sub    $0x8,%esp
c0020629:	50                   	push   %eax
c002062a:	68 1a 25 03 c0       	push   $0xc003251a
c002062f:	e8 95 79 00 00       	call   c0027fc9 <printf>
c0020634:	83 c4 10             	add    $0x10,%esp
  for (i = 0; i < argc; i++)
c0020637:	ff 45 f0             	incl   -0x10(%ebp)
c002063a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002063d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0020640:	7c a1                	jl     c00205e3 <read_command_line+0xbd>
  printf ("\n");
c0020642:	83 ec 0c             	sub    $0xc,%esp
c0020645:	6a 0a                	push   $0xa
c0020647:	e8 2d c2 00 00       	call   c002c879 <putchar>
c002064c:	83 c4 10             	add    $0x10,%esp

  return argv;
c002064f:	b8 60 c0 03 c0       	mov    $0xc003c060,%eax
}
c0020654:	c9                   	leave  
c0020655:	c3                   	ret    

c0020656 <parse_options>:

/* Parses options in ARGV[]
   and returns the first non-option argument. */
static char **
parse_options (char **argv) 
{
c0020656:	55                   	push   %ebp
c0020657:	89 e5                	mov    %esp,%ebp
c0020659:	83 ec 18             	sub    $0x18,%esp
  for (; *argv != NULL && **argv == '-'; argv++)
c002065c:	e9 b6 01 00 00       	jmp    c0020817 <parse_options+0x1c1>
    {
      char *save_ptr;
      char *name = strtok_r (*argv, "=", &save_ptr);
c0020661:	8b 45 08             	mov    0x8(%ebp),%eax
c0020664:	8b 00                	mov    (%eax),%eax
c0020666:	83 ec 04             	sub    $0x4,%esp
c0020669:	8d 55 ec             	lea    -0x14(%ebp),%edx
c002066c:	52                   	push   %edx
c002066d:	68 20 25 03 c0       	push   $0xc0032520
c0020672:	50                   	push   %eax
c0020673:	e8 64 90 00 00       	call   c00296dc <strtok_r>
c0020678:	83 c4 10             	add    $0x10,%esp
c002067b:	89 45 f4             	mov    %eax,-0xc(%ebp)
      char *value = strtok_r (NULL, "", &save_ptr);
c002067e:	83 ec 04             	sub    $0x4,%esp
c0020681:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0020684:	50                   	push   %eax
c0020685:	68 22 25 03 c0       	push   $0xc0032522
c002068a:	6a 00                	push   $0x0
c002068c:	e8 4b 90 00 00       	call   c00296dc <strtok_r>
c0020691:	83 c4 10             	add    $0x10,%esp
c0020694:	89 45 f0             	mov    %eax,-0x10(%ebp)
      
      if (!strcmp (name, "-h"))
c0020697:	83 ec 08             	sub    $0x8,%esp
c002069a:	68 23 25 03 c0       	push   $0xc0032523
c002069f:	ff 75 f4             	pushl  -0xc(%ebp)
c00206a2:	e8 4b 8d 00 00       	call   c00293f2 <strcmp>
c00206a7:	83 c4 10             	add    $0x10,%esp
c00206aa:	85 c0                	test   %eax,%eax
c00206ac:	75 0a                	jne    c00206b8 <parse_options+0x62>
        usage ();
c00206ae:	e8 c8 02 00 00       	call   c002097b <usage>
c00206b3:	e9 5b 01 00 00       	jmp    c0020813 <parse_options+0x1bd>
      else if (!strcmp (name, "-q"))
c00206b8:	83 ec 08             	sub    $0x8,%esp
c00206bb:	68 26 25 03 c0       	push   $0xc0032526
c00206c0:	ff 75 f4             	pushl  -0xc(%ebp)
c00206c3:	e8 2a 8d 00 00       	call   c00293f2 <strcmp>
c00206c8:	83 c4 10             	add    $0x10,%esp
c00206cb:	85 c0                	test   %eax,%eax
c00206cd:	75 12                	jne    c00206e1 <parse_options+0x8b>
        shutdown_configure (SHUTDOWN_POWER_OFF);
c00206cf:	83 ec 0c             	sub    $0xc,%esp
c00206d2:	6a 01                	push   $0x1
c00206d4:	e8 3d 73 00 00       	call   c0027a16 <shutdown_configure>
c00206d9:	83 c4 10             	add    $0x10,%esp
c00206dc:	e9 32 01 00 00       	jmp    c0020813 <parse_options+0x1bd>
      else if (!strcmp (name, "-r"))
c00206e1:	83 ec 08             	sub    $0x8,%esp
c00206e4:	68 29 25 03 c0       	push   $0xc0032529
c00206e9:	ff 75 f4             	pushl  -0xc(%ebp)
c00206ec:	e8 01 8d 00 00       	call   c00293f2 <strcmp>
c00206f1:	83 c4 10             	add    $0x10,%esp
c00206f4:	85 c0                	test   %eax,%eax
c00206f6:	75 12                	jne    c002070a <parse_options+0xb4>
        shutdown_configure (SHUTDOWN_REBOOT);
c00206f8:	83 ec 0c             	sub    $0xc,%esp
c00206fb:	6a 02                	push   $0x2
c00206fd:	e8 14 73 00 00       	call   c0027a16 <shutdown_configure>
c0020702:	83 c4 10             	add    $0x10,%esp
c0020705:	e9 09 01 00 00       	jmp    c0020813 <parse_options+0x1bd>
#ifdef FILESYS
      else if (!strcmp (name, "-f"))
c002070a:	83 ec 08             	sub    $0x8,%esp
c002070d:	68 2c 25 03 c0       	push   $0xc003252c
c0020712:	ff 75 f4             	pushl  -0xc(%ebp)
c0020715:	e8 d8 8c 00 00       	call   c00293f2 <strcmp>
c002071a:	83 c4 10             	add    $0x10,%esp
c002071d:	85 c0                	test   %eax,%eax
c002071f:	75 0c                	jne    c002072d <parse_options+0xd7>
        format_filesys = true;
c0020721:	c6 05 40 c0 03 c0 01 	movb   $0x1,0xc003c040
c0020728:	e9 e6 00 00 00       	jmp    c0020813 <parse_options+0x1bd>
      else if (!strcmp (name, "-filesys"))
c002072d:	83 ec 08             	sub    $0x8,%esp
c0020730:	68 2f 25 03 c0       	push   $0xc003252f
c0020735:	ff 75 f4             	pushl  -0xc(%ebp)
c0020738:	e8 b5 8c 00 00       	call   c00293f2 <strcmp>
c002073d:	83 c4 10             	add    $0x10,%esp
c0020740:	85 c0                	test   %eax,%eax
c0020742:	75 0d                	jne    c0020751 <parse_options+0xfb>
        filesys_bdev_name = value;
c0020744:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020747:	a3 44 c0 03 c0       	mov    %eax,0xc003c044
c002074c:	e9 c2 00 00 00       	jmp    c0020813 <parse_options+0x1bd>
      else if (!strcmp (name, "-scratch"))
c0020751:	83 ec 08             	sub    $0x8,%esp
c0020754:	68 38 25 03 c0       	push   $0xc0032538
c0020759:	ff 75 f4             	pushl  -0xc(%ebp)
c002075c:	e8 91 8c 00 00       	call   c00293f2 <strcmp>
c0020761:	83 c4 10             	add    $0x10,%esp
c0020764:	85 c0                	test   %eax,%eax
c0020766:	75 0d                	jne    c0020775 <parse_options+0x11f>
        scratch_bdev_name = value;
c0020768:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002076b:	a3 48 c0 03 c0       	mov    %eax,0xc003c048
c0020770:	e9 9e 00 00 00       	jmp    c0020813 <parse_options+0x1bd>
#ifdef VM
      else if (!strcmp (name, "-swap"))
        swap_bdev_name = value;
#endif
#endif
      else if (!strcmp (name, "-rs"))
c0020775:	83 ec 08             	sub    $0x8,%esp
c0020778:	68 41 25 03 c0       	push   $0xc0032541
c002077d:	ff 75 f4             	pushl  -0xc(%ebp)
c0020780:	e8 6d 8c 00 00       	call   c00293f2 <strcmp>
c0020785:	83 c4 10             	add    $0x10,%esp
c0020788:	85 c0                	test   %eax,%eax
c002078a:	75 1c                	jne    c00207a8 <parse_options+0x152>
        random_init (atoi (value));
c002078c:	83 ec 0c             	sub    $0xc,%esp
c002078f:	ff 75 f0             	pushl  -0x10(%ebp)
c0020792:	e8 37 86 00 00       	call   c0028dce <atoi>
c0020797:	83 c4 10             	add    $0x10,%esp
c002079a:	83 ec 0c             	sub    $0xc,%esp
c002079d:	50                   	push   %eax
c002079e:	e8 a5 75 00 00       	call   c0027d48 <random_init>
c00207a3:	83 c4 10             	add    $0x10,%esp
c00207a6:	eb 6b                	jmp    c0020813 <parse_options+0x1bd>
      else if (!strcmp (name, "-mlfqs"))
c00207a8:	83 ec 08             	sub    $0x8,%esp
c00207ab:	68 45 25 03 c0       	push   $0xc0032545
c00207b0:	ff 75 f4             	pushl  -0xc(%ebp)
c00207b3:	e8 3a 8c 00 00       	call   c00293f2 <strcmp>
c00207b8:	83 c4 10             	add    $0x10,%esp
c00207bb:	85 c0                	test   %eax,%eax
c00207bd:	75 09                	jne    c00207c8 <parse_options+0x172>
        thread_mlfqs = true;
c00207bf:	c6 05 84 61 04 c0 01 	movb   $0x1,0xc0046184
c00207c6:	eb 4b                	jmp    c0020813 <parse_options+0x1bd>
#ifdef USERPROG
      else if (!strcmp (name, "-ul"))
c00207c8:	83 ec 08             	sub    $0x8,%esp
c00207cb:	68 4c 25 03 c0       	push   $0xc003254c
c00207d0:	ff 75 f4             	pushl  -0xc(%ebp)
c00207d3:	e8 1a 8c 00 00       	call   c00293f2 <strcmp>
c00207d8:	83 c4 10             	add    $0x10,%esp
c00207db:	85 c0                	test   %eax,%eax
c00207dd:	75 15                	jne    c00207f4 <parse_options+0x19e>
        user_page_limit = atoi (value);
c00207df:	83 ec 0c             	sub    $0xc,%esp
c00207e2:	ff 75 f0             	pushl  -0x10(%ebp)
c00207e5:	e8 e4 85 00 00       	call   c0028dce <atoi>
c00207ea:	83 c4 10             	add    $0x10,%esp
c00207ed:	a3 a0 b7 03 c0       	mov    %eax,0xc003b7a0
c00207f2:	eb 1f                	jmp    c0020813 <parse_options+0x1bd>
#endif
      else
        PANIC ("unknown option `%s' (use -h for help)", name);
c00207f4:	83 ec 0c             	sub    $0xc,%esp
c00207f7:	ff 75 f4             	pushl  -0xc(%ebp)
c00207fa:	68 50 25 03 c0       	push   $0xc0032550
c00207ff:	68 84 2a 03 c0       	push   $0xc0032a84
c0020804:	68 1c 01 00 00       	push   $0x11c
c0020809:	68 ec 24 03 c0       	push   $0xc00324ec
c002080e:	e8 17 9d 00 00       	call   c002a52a <debug_panic>
  for (; *argv != NULL && **argv == '-'; argv++)
c0020813:	83 45 08 04          	addl   $0x4,0x8(%ebp)
c0020817:	8b 45 08             	mov    0x8(%ebp),%eax
c002081a:	8b 00                	mov    (%eax),%eax
c002081c:	85 c0                	test   %eax,%eax
c002081e:	74 0f                	je     c002082f <parse_options+0x1d9>
c0020820:	8b 45 08             	mov    0x8(%ebp),%eax
c0020823:	8b 00                	mov    (%eax),%eax
c0020825:	8a 00                	mov    (%eax),%al
c0020827:	3c 2d                	cmp    $0x2d,%al
c0020829:	0f 84 32 fe ff ff    	je     c0020661 <parse_options+0xb>
     When running under Bochs, this is not enough by itself to
     get a good seed value, because the pintos script sets the
     initial time to a predictable value, not to the local time,
     for reproducibility.  To fix this, give the "-r" option to
     the pintos script to request real-time execution. */
  random_init (rtc_get_time ());
c002082f:	e8 7c 6f 00 00       	call   c00277b0 <rtc_get_time>
c0020834:	83 ec 0c             	sub    $0xc,%esp
c0020837:	50                   	push   %eax
c0020838:	e8 0b 75 00 00       	call   c0027d48 <random_init>
c002083d:	83 c4 10             	add    $0x10,%esp
  
  return argv;
c0020840:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0020843:	c9                   	leave  
c0020844:	c3                   	ret    

c0020845 <run_task>:

/* Runs the task specified in ARGV[1]. */
static void
run_task (char **argv)
{
c0020845:	55                   	push   %ebp
c0020846:	89 e5                	mov    %esp,%ebp
c0020848:	83 ec 18             	sub    $0x18,%esp
  const char *task = argv[1];
c002084b:	8b 45 08             	mov    0x8(%ebp),%eax
c002084e:	8b 40 04             	mov    0x4(%eax),%eax
c0020851:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  printf ("Executing '%s':\n", task);
c0020854:	83 ec 08             	sub    $0x8,%esp
c0020857:	ff 75 f4             	pushl  -0xc(%ebp)
c002085a:	68 76 25 03 c0       	push   $0xc0032576
c002085f:	e8 65 77 00 00       	call   c0027fc9 <printf>
c0020864:	83 c4 10             	add    $0x10,%esp
#ifdef USERPROG
  process_wait (process_execute (task));
c0020867:	83 ec 0c             	sub    $0xc,%esp
c002086a:	ff 75 f4             	pushl  -0xc(%ebp)
c002086d:	e8 f4 c0 00 00       	call   c002c966 <process_execute>
c0020872:	83 c4 10             	add    $0x10,%esp
c0020875:	83 ec 0c             	sub    $0xc,%esp
c0020878:	50                   	push   %eax
c0020879:	e8 ee c4 00 00       	call   c002cd6c <process_wait>
c002087e:	83 c4 10             	add    $0x10,%esp
#else
  run_test (task);
#endif
  printf ("Execution of '%s' complete.\n", task);
c0020881:	83 ec 08             	sub    $0x8,%esp
c0020884:	ff 75 f4             	pushl  -0xc(%ebp)
c0020887:	68 87 25 03 c0       	push   $0xc0032587
c002088c:	e8 38 77 00 00       	call   c0027fc9 <printf>
c0020891:	83 c4 10             	add    $0x10,%esp
}
c0020894:	90                   	nop
c0020895:	c9                   	leave  
c0020896:	c3                   	ret    

c0020897 <run_actions>:

/* Executes all of the actions specified in ARGV[]
   up to the null pointer sentinel. */
static void
run_actions (char **argv) 
{
c0020897:	55                   	push   %ebp
c0020898:	89 e5                	mov    %esp,%ebp
c002089a:	83 ec 18             	sub    $0x18,%esp
      {"append", 2, fsutil_append},
#endif
      {NULL, 0, NULL},
    };

  while (*argv != NULL)
c002089d:	e9 c9 00 00 00       	jmp    c002096b <run_actions+0xd4>
    {
      const struct action *a;
      int i;

      /* Find action name. */
      for (a = actions; ; a++)
c00208a2:	c7 45 f4 c0 2a 03 c0 	movl   $0xc0032ac0,-0xc(%ebp)
        if (a->name == NULL)
c00208a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00208ac:	8b 00                	mov    (%eax),%eax
c00208ae:	85 c0                	test   %eax,%eax
c00208b0:	75 22                	jne    c00208d4 <run_actions+0x3d>
          PANIC ("unknown action `%s' (use -h for help)", *argv);
c00208b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00208b5:	8b 00                	mov    (%eax),%eax
c00208b7:	83 ec 0c             	sub    $0xc,%esp
c00208ba:	50                   	push   %eax
c00208bb:	68 a4 25 03 c0       	push   $0xc00325a4
c00208c0:	68 14 2b 03 c0       	push   $0xc0032b14
c00208c5:	68 5e 01 00 00       	push   $0x15e
c00208ca:	68 ec 24 03 c0       	push   $0xc00324ec
c00208cf:	e8 56 9c 00 00       	call   c002a52a <debug_panic>
        else if (!strcmp (*argv, a->name))
c00208d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00208d7:	8b 10                	mov    (%eax),%edx
c00208d9:	8b 45 08             	mov    0x8(%ebp),%eax
c00208dc:	8b 00                	mov    (%eax),%eax
c00208de:	83 ec 08             	sub    $0x8,%esp
c00208e1:	52                   	push   %edx
c00208e2:	50                   	push   %eax
c00208e3:	e8 0a 8b 00 00       	call   c00293f2 <strcmp>
c00208e8:	83 c4 10             	add    $0x10,%esp
c00208eb:	85 c0                	test   %eax,%eax
c00208ed:	74 06                	je     c00208f5 <run_actions+0x5e>
      for (a = actions; ; a++)
c00208ef:	83 45 f4 0c          	addl   $0xc,-0xc(%ebp)
        if (a->name == NULL)
c00208f3:	eb b4                	jmp    c00208a9 <run_actions+0x12>
          break;
c00208f5:	90                   	nop

      /* Check for required arguments. */
      for (i = 1; i < a->argc; i++)
c00208f6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c00208fd:	eb 44                	jmp    c0020943 <run_actions+0xac>
        if (argv[i] == NULL)
c00208ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0020902:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0020909:	8b 45 08             	mov    0x8(%ebp),%eax
c002090c:	01 d0                	add    %edx,%eax
c002090e:	8b 00                	mov    (%eax),%eax
c0020910:	85 c0                	test   %eax,%eax
c0020912:	75 2c                	jne    c0020940 <run_actions+0xa9>
          PANIC ("action `%s' requires %d argument(s)", *argv, a->argc - 1);
c0020914:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020917:	8b 40 04             	mov    0x4(%eax),%eax
c002091a:	8d 50 ff             	lea    -0x1(%eax),%edx
c002091d:	8b 45 08             	mov    0x8(%ebp),%eax
c0020920:	8b 00                	mov    (%eax),%eax
c0020922:	83 ec 08             	sub    $0x8,%esp
c0020925:	52                   	push   %edx
c0020926:	50                   	push   %eax
c0020927:	68 cc 25 03 c0       	push   $0xc00325cc
c002092c:	68 14 2b 03 c0       	push   $0xc0032b14
c0020931:	68 65 01 00 00       	push   $0x165
c0020936:	68 ec 24 03 c0       	push   $0xc00324ec
c002093b:	e8 ea 9b 00 00       	call   c002a52a <debug_panic>
      for (i = 1; i < a->argc; i++)
c0020940:	ff 45 f0             	incl   -0x10(%ebp)
c0020943:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020946:	8b 40 04             	mov    0x4(%eax),%eax
c0020949:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002094c:	7f b1                	jg     c00208ff <run_actions+0x68>

      /* Invoke action and advance. */
      a->function (argv);
c002094e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020951:	8b 40 08             	mov    0x8(%eax),%eax
c0020954:	83 ec 0c             	sub    $0xc,%esp
c0020957:	ff 75 08             	pushl  0x8(%ebp)
c002095a:	ff d0                	call   *%eax
c002095c:	83 c4 10             	add    $0x10,%esp
      argv += a->argc;
c002095f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020962:	8b 40 04             	mov    0x4(%eax),%eax
c0020965:	c1 e0 02             	shl    $0x2,%eax
c0020968:	01 45 08             	add    %eax,0x8(%ebp)
  while (*argv != NULL)
c002096b:	8b 45 08             	mov    0x8(%ebp),%eax
c002096e:	8b 00                	mov    (%eax),%eax
c0020970:	85 c0                	test   %eax,%eax
c0020972:	0f 85 2a ff ff ff    	jne    c00208a2 <run_actions+0xb>
    }
  
}
c0020978:	90                   	nop
c0020979:	c9                   	leave  
c002097a:	c3                   	ret    

c002097b <usage>:

/* Prints a kernel command line help message and powers off the
   machine. */
static void
usage (void)
{
c002097b:	55                   	push   %ebp
c002097c:	89 e5                	mov    %esp,%ebp
c002097e:	83 ec 08             	sub    $0x8,%esp
  printf ("\nCommand line syntax: [OPTION...] [ACTION...]\n"
c0020981:	83 ec 0c             	sub    $0xc,%esp
c0020984:	68 f0 25 03 c0       	push   $0xc00325f0
c0020989:	e8 63 be 00 00       	call   c002c7f1 <puts>
c002098e:	83 c4 10             	add    $0x10,%esp
          "  -mlfqs             Use multi-level feedback queue scheduler.\n"
#ifdef USERPROG
          "  -ul=COUNT          Limit user memory to COUNT pages.\n"
#endif
          );
  shutdown_power_off ();
c0020991:	e8 15 71 00 00       	call   c0027aab <shutdown_power_off>

c0020996 <locate_block_devices>:

#ifdef FILESYS
/* Figure out what block devices to cast in the various Pintos roles. */
static void
locate_block_devices (void)
{
c0020996:	55                   	push   %ebp
c0020997:	89 e5                	mov    %esp,%ebp
c0020999:	83 ec 08             	sub    $0x8,%esp
  locate_block_device (BLOCK_FILESYS, filesys_bdev_name);
c002099c:	a1 44 c0 03 c0       	mov    0xc003c044,%eax
c00209a1:	83 ec 08             	sub    $0x8,%esp
c00209a4:	50                   	push   %eax
c00209a5:	6a 01                	push   $0x1
c00209a7:	e8 19 00 00 00       	call   c00209c5 <locate_block_device>
c00209ac:	83 c4 10             	add    $0x10,%esp
  locate_block_device (BLOCK_SCRATCH, scratch_bdev_name);
c00209af:	a1 48 c0 03 c0       	mov    0xc003c048,%eax
c00209b4:	83 ec 08             	sub    $0x8,%esp
c00209b7:	50                   	push   %eax
c00209b8:	6a 02                	push   $0x2
c00209ba:	e8 06 00 00 00       	call   c00209c5 <locate_block_device>
c00209bf:	83 c4 10             	add    $0x10,%esp
#ifdef VM
  locate_block_device (BLOCK_SWAP, swap_bdev_name);
#endif
}
c00209c2:	90                   	nop
c00209c3:	c9                   	leave  
c00209c4:	c3                   	ret    

c00209c5 <locate_block_device>:
   block device with the given NAME, if NAME is non-null,
   otherwise the first block device in probe order of type
   ROLE. */
static void
locate_block_device (enum block_type role, const char *name)
{
c00209c5:	55                   	push   %ebp
c00209c6:	89 e5                	mov    %esp,%ebp
c00209c8:	53                   	push   %ebx
c00209c9:	83 ec 14             	sub    $0x14,%esp
  struct block *block = NULL;
c00209cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (name != NULL)
c00209d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00209d7:	74 36                	je     c0020a0f <locate_block_device+0x4a>
    {
      block = block_get_by_name (name);
c00209d9:	83 ec 0c             	sub    $0xc,%esp
c00209dc:	ff 75 0c             	pushl  0xc(%ebp)
c00209df:	e8 30 52 00 00       	call   c0025c14 <block_get_by_name>
c00209e4:	83 c4 10             	add    $0x10,%esp
c00209e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
      if (block == NULL)
c00209ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00209ee:	75 56                	jne    c0020a46 <locate_block_device+0x81>
        PANIC ("No such block device \"%s\"", name);
c00209f0:	83 ec 0c             	sub    $0xc,%esp
c00209f3:	ff 75 0c             	pushl  0xc(%ebp)
c00209f6:	68 18 2a 03 c0       	push   $0xc0032a18
c00209fb:	68 20 2b 03 c0       	push   $0xc0032b20
c0020a00:	68 b2 01 00 00       	push   $0x1b2
c0020a05:	68 ec 24 03 c0       	push   $0xc00324ec
c0020a0a:	e8 1b 9b 00 00       	call   c002a52a <debug_panic>
    }
  else
    {
      for (block = block_first (); block != NULL; block = block_next (block))
c0020a0f:	e8 b9 51 00 00       	call   c0025bcd <block_first>
c0020a14:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0020a17:	eb 24                	jmp    c0020a3d <locate_block_device+0x78>
        if (block_type (block) == role)
c0020a19:	83 ec 0c             	sub    $0xc,%esp
c0020a1c:	ff 75 f4             	pushl  -0xc(%ebp)
c0020a1f:	e8 8d 53 00 00       	call   c0025db1 <block_type>
c0020a24:	83 c4 10             	add    $0x10,%esp
c0020a27:	3b 45 08             	cmp    0x8(%ebp),%eax
c0020a2a:	74 19                	je     c0020a45 <locate_block_device+0x80>
      for (block = block_first (); block != NULL; block = block_next (block))
c0020a2c:	83 ec 0c             	sub    $0xc,%esp
c0020a2f:	ff 75 f4             	pushl  -0xc(%ebp)
c0020a32:	e8 ba 51 00 00       	call   c0025bf1 <block_next>
c0020a37:	83 c4 10             	add    $0x10,%esp
c0020a3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0020a3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0020a41:	75 d6                	jne    c0020a19 <locate_block_device+0x54>
c0020a43:	eb 01                	jmp    c0020a46 <locate_block_device+0x81>
          break;
c0020a45:	90                   	nop
    }

  if (block != NULL)
c0020a46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0020a4a:	74 41                	je     c0020a8d <locate_block_device+0xc8>
    {
      printf ("%s: using %s\n", block_type_name (role), block_name (block));
c0020a4c:	83 ec 0c             	sub    $0xc,%esp
c0020a4f:	ff 75 f4             	pushl  -0xc(%ebp)
c0020a52:	e8 4f 53 00 00       	call   c0025da6 <block_name>
c0020a57:	83 c4 10             	add    $0x10,%esp
c0020a5a:	89 c3                	mov    %eax,%ebx
c0020a5c:	83 ec 0c             	sub    $0xc,%esp
c0020a5f:	ff 75 08             	pushl  0x8(%ebp)
c0020a62:	e8 c0 50 00 00       	call   c0025b27 <block_type_name>
c0020a67:	83 c4 10             	add    $0x10,%esp
c0020a6a:	83 ec 04             	sub    $0x4,%esp
c0020a6d:	53                   	push   %ebx
c0020a6e:	50                   	push   %eax
c0020a6f:	68 32 2a 03 c0       	push   $0xc0032a32
c0020a74:	e8 50 75 00 00       	call   c0027fc9 <printf>
c0020a79:	83 c4 10             	add    $0x10,%esp
      block_set_role (role, block);
c0020a7c:	83 ec 08             	sub    $0x8,%esp
c0020a7f:	ff 75 f4             	pushl  -0xc(%ebp)
c0020a82:	ff 75 08             	pushl  0x8(%ebp)
c0020a85:	e8 09 51 00 00       	call   c0025b93 <block_set_role>
c0020a8a:	83 c4 10             	add    $0x10,%esp
    }
}
c0020a8d:	90                   	nop
c0020a8e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0020a91:	c9                   	leave  
c0020a92:	c3                   	ret    

c0020a93 <pg_round_down>:
static inline void *pg_round_down (const void *va) {
c0020a93:	55                   	push   %ebp
c0020a94:	89 e5                	mov    %esp,%ebp
  return (void *) ((uintptr_t) va & ~PGMASK);
c0020a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0020a99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
c0020a9e:	5d                   	pop    %ebp
c0020a9f:	c3                   	ret    

c0020aa0 <thread_init>:

   It is not safe to call thread_current() until this function
   finishes. */
void
thread_init (void) 
{
c0020aa0:	55                   	push   %ebp
c0020aa1:	89 e5                	mov    %esp,%ebp
c0020aa3:	53                   	push   %ebx
c0020aa4:	83 ec 04             	sub    $0x4,%esp
  ASSERT (intr_get_level () == INTR_OFF);
c0020aa7:	e8 68 12 00 00       	call   c0021d14 <intr_get_level>
c0020aac:	85 c0                	test   %eax,%eax
c0020aae:	74 1e                	je     c0020ace <thread_init+0x2e>
c0020ab0:	83 ec 0c             	sub    $0xc,%esp
c0020ab3:	68 34 2b 03 c0       	push   $0xc0032b34
c0020ab8:	68 52 2b 03 c0       	push   $0xc0032b52
c0020abd:	68 5c 2d 03 c0       	push   $0xc0032d5c
c0020ac2:	6a 5e                	push   $0x5e
c0020ac4:	68 69 2b 03 c0       	push   $0xc0032b69
c0020ac9:	e8 5c 9a 00 00       	call   c002a52a <debug_panic>

  lock_init (&tid_lock);
c0020ace:	83 ec 0c             	sub    $0xc,%esp
c0020ad1:	68 c0 c1 03 c0       	push   $0xc003c1c0
c0020ad6:	e8 a3 29 00 00       	call   c002347e <lock_init>
c0020adb:	83 c4 10             	add    $0x10,%esp
  list_init (&ready_list);
c0020ade:	83 ec 0c             	sub    $0xc,%esp
c0020ae1:	68 80 c1 03 c0       	push   $0xc003c180
c0020ae6:	e8 b2 9c 00 00       	call   c002a79d <list_init>
c0020aeb:	83 c4 10             	add    $0x10,%esp
  list_init (&all_list);
c0020aee:	83 ec 0c             	sub    $0xc,%esp
c0020af1:	68 90 c1 03 c0       	push   $0xc003c190
c0020af6:	e8 a2 9c 00 00       	call   c002a79d <list_init>
c0020afb:	83 c4 10             	add    $0x10,%esp

  /* Set up a thread structure for the running thread. */
  initial_thread = running_thread ();
c0020afe:	e8 5e 07 00 00       	call   c0021261 <running_thread>
c0020b03:	a3 a4 c1 03 c0       	mov    %eax,0xc003c1a4
  init_thread (initial_thread, "main", PRI_DEFAULT);
c0020b08:	a1 a4 c1 03 c0       	mov    0xc003c1a4,%eax
c0020b0d:	83 ec 04             	sub    $0x4,%esp
c0020b10:	6a 1f                	push   $0x1f
c0020b12:	68 80 2b 03 c0       	push   $0xc0032b80
c0020b17:	50                   	push   %eax
c0020b18:	e8 86 07 00 00       	call   c00212a3 <init_thread>
c0020b1d:	83 c4 10             	add    $0x10,%esp
  initial_thread->status = THREAD_RUNNING;
c0020b20:	a1 a4 c1 03 c0       	mov    0xc003c1a4,%eax
c0020b25:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  initial_thread->tid = allocate_tid ();
c0020b2c:	8b 1d a4 c1 03 c0    	mov    0xc003c1a4,%ebx
c0020b32:	e8 45 0b 00 00       	call   c002167c <allocate_tid>
c0020b37:	89 03                	mov    %eax,(%ebx)

  load_avg = convert_to_fixed_point(0);
c0020b39:	83 ec 0c             	sub    $0xc,%esp
c0020b3c:	6a 00                	push   $0x0
c0020b3e:	e8 b9 98 00 00       	call   c002a3fc <convert_to_fixed_point>
c0020b43:	83 c4 10             	add    $0x10,%esp
c0020b46:	a3 80 61 04 c0       	mov    %eax,0xc0046180
  // if (thread_mlfqs)
  //   printf("123\n");
  // else
  //   printf("1243421\n");
}
c0020b4b:	90                   	nop
c0020b4c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0020b4f:	c9                   	leave  
c0020b50:	c3                   	ret    

c0020b51 <thread_start>:

/* Starts preemptive thread scheduling by enabling interrupts.
   Also creates the idle thread. */
void
thread_start (void) 
{
c0020b51:	55                   	push   %ebp
c0020b52:	89 e5                	mov    %esp,%ebp
c0020b54:	83 ec 28             	sub    $0x28,%esp
  /* Create the idle thread. */
  struct semaphore idle_started;
  sema_init (&idle_started, 0);
c0020b57:	83 ec 08             	sub    $0x8,%esp
c0020b5a:	6a 00                	push   $0x0
c0020b5c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0020b5f:	50                   	push   %eax
c0020b60:	e8 30 26 00 00       	call   c0023195 <sema_init>
c0020b65:	83 c4 10             	add    $0x10,%esp
  thread_create ("idle", PRI_MIN, idle, &idle_started);
c0020b68:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0020b6b:	50                   	push   %eax
c0020b6c:	68 ea 11 02 c0       	push   $0xc00211ea
c0020b71:	6a 00                	push   $0x0
c0020b73:	68 85 2b 03 c0       	push   $0xc0032b85
c0020b78:	e8 fc 00 00 00       	call   c0020c79 <thread_create>
c0020b7d:	83 c4 10             	add    $0x10,%esp

  /* Start preemptive thread scheduling. */
  intr_enable ();
c0020b80:	e8 c6 11 00 00       	call   c0021d4b <intr_enable>

  /* Wait for the idle thread to initialize idle_thread. */
  sema_down (&idle_started);
c0020b85:	83 ec 0c             	sub    $0xc,%esp
c0020b88:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0020b8b:	50                   	push   %eax
c0020b8c:	e8 4b 26 00 00       	call   c00231dc <sema_down>
c0020b91:	83 c4 10             	add    $0x10,%esp
}
c0020b94:	90                   	nop
c0020b95:	c9                   	leave  
c0020b96:	c3                   	ret    

c0020b97 <thread_tick>:

/* Called by the timer interrupt handler at each timer tick.
   Thus, this function runs in an external interrupt context. */
void
thread_tick (void) 
{
c0020b97:	55                   	push   %ebp
c0020b98:	89 e5                	mov    %esp,%ebp
c0020b9a:	83 ec 18             	sub    $0x18,%esp
  struct thread *t = thread_current ();
c0020b9d:	e8 06 03 00 00       	call   c0020ea8 <thread_current>
c0020ba2:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Update statistics. */
  if (t == idle_thread)
c0020ba5:	a1 a0 c1 03 c0       	mov    0xc003c1a0,%eax
c0020baa:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0020bad:	75 1e                	jne    c0020bcd <thread_tick+0x36>
    idle_ticks++;
c0020baf:	a1 e8 c1 03 c0       	mov    0xc003c1e8,%eax
c0020bb4:	8b 15 ec c1 03 c0    	mov    0xc003c1ec,%edx
c0020bba:	83 c0 01             	add    $0x1,%eax
c0020bbd:	83 d2 00             	adc    $0x0,%edx
c0020bc0:	a3 e8 c1 03 c0       	mov    %eax,0xc003c1e8
c0020bc5:	89 15 ec c1 03 c0    	mov    %edx,0xc003c1ec
c0020bcb:	eb 44                	jmp    c0020c11 <thread_tick+0x7a>
#ifdef USERPROG
  else if (t->pagedir != NULL)
c0020bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020bd0:	8b 40 30             	mov    0x30(%eax),%eax
c0020bd3:	85 c0                	test   %eax,%eax
c0020bd5:	74 1e                	je     c0020bf5 <thread_tick+0x5e>
    user_ticks++;
c0020bd7:	a1 f8 c1 03 c0       	mov    0xc003c1f8,%eax
c0020bdc:	8b 15 fc c1 03 c0    	mov    0xc003c1fc,%edx
c0020be2:	83 c0 01             	add    $0x1,%eax
c0020be5:	83 d2 00             	adc    $0x0,%edx
c0020be8:	a3 f8 c1 03 c0       	mov    %eax,0xc003c1f8
c0020bed:	89 15 fc c1 03 c0    	mov    %edx,0xc003c1fc
c0020bf3:	eb 1c                	jmp    c0020c11 <thread_tick+0x7a>
#endif
  else
    kernel_ticks++;
c0020bf5:	a1 f0 c1 03 c0       	mov    0xc003c1f0,%eax
c0020bfa:	8b 15 f4 c1 03 c0    	mov    0xc003c1f4,%edx
c0020c00:	83 c0 01             	add    $0x1,%eax
c0020c03:	83 d2 00             	adc    $0x0,%edx
c0020c06:	a3 f0 c1 03 c0       	mov    %eax,0xc003c1f0
c0020c0b:	89 15 f4 c1 03 c0    	mov    %edx,0xc003c1f4

  /* Enforce preemption. */
  if (++thread_ticks >= TIME_SLICE)
c0020c11:	a1 00 c2 03 c0       	mov    0xc003c200,%eax
c0020c16:	40                   	inc    %eax
c0020c17:	a3 00 c2 03 c0       	mov    %eax,0xc003c200
c0020c1c:	a1 00 c2 03 c0       	mov    0xc003c200,%eax
c0020c21:	83 f8 03             	cmp    $0x3,%eax
c0020c24:	76 05                	jbe    c0020c2b <thread_tick+0x94>
    intr_yield_on_return ();
c0020c26:	e8 39 14 00 00       	call   c0022064 <intr_yield_on_return>
}
c0020c2b:	90                   	nop
c0020c2c:	c9                   	leave  
c0020c2d:	c3                   	ret    

c0020c2e <thread_print_stats>:

/* Prints thread statistics. */
void
thread_print_stats (void) 
{
c0020c2e:	55                   	push   %ebp
c0020c2f:	89 e5                	mov    %esp,%ebp
c0020c31:	57                   	push   %edi
c0020c32:	56                   	push   %esi
c0020c33:	53                   	push   %ebx
c0020c34:	83 ec 0c             	sub    $0xc,%esp
  printf ("Thread: %lld idle ticks, %lld kernel ticks, %lld user ticks\n",
c0020c37:	8b 35 f8 c1 03 c0    	mov    0xc003c1f8,%esi
c0020c3d:	8b 3d fc c1 03 c0    	mov    0xc003c1fc,%edi
c0020c43:	8b 0d f0 c1 03 c0    	mov    0xc003c1f0,%ecx
c0020c49:	8b 1d f4 c1 03 c0    	mov    0xc003c1f4,%ebx
c0020c4f:	a1 e8 c1 03 c0       	mov    0xc003c1e8,%eax
c0020c54:	8b 15 ec c1 03 c0    	mov    0xc003c1ec,%edx
c0020c5a:	83 ec 04             	sub    $0x4,%esp
c0020c5d:	57                   	push   %edi
c0020c5e:	56                   	push   %esi
c0020c5f:	53                   	push   %ebx
c0020c60:	51                   	push   %ecx
c0020c61:	52                   	push   %edx
c0020c62:	50                   	push   %eax
c0020c63:	68 8c 2b 03 c0       	push   $0xc0032b8c
c0020c68:	e8 5c 73 00 00       	call   c0027fc9 <printf>
c0020c6d:	83 c4 20             	add    $0x20,%esp
          idle_ticks, kernel_ticks, user_ticks);
}
c0020c70:	90                   	nop
c0020c71:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0020c74:	5b                   	pop    %ebx
c0020c75:	5e                   	pop    %esi
c0020c76:	5f                   	pop    %edi
c0020c77:	5d                   	pop    %ebp
c0020c78:	c3                   	ret    

c0020c79 <thread_create>:
   PRIORITY, but no actual priority scheduling is implemented.
   Priority scheduling is the goal of Problem 1-3. */
tid_t
thread_create (const char *name, int priority,
               thread_func *function, void *aux) 
{
c0020c79:	55                   	push   %ebp
c0020c7a:	89 e5                	mov    %esp,%ebp
c0020c7c:	83 ec 28             	sub    $0x28,%esp
  struct kernel_thread_frame *kf;
  struct switch_entry_frame *ef;
  struct switch_threads_frame *sf;
  tid_t tid;

  ASSERT (function != NULL);
c0020c7f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0020c83:	75 21                	jne    c0020ca6 <thread_create+0x2d>
c0020c85:	83 ec 0c             	sub    $0xc,%esp
c0020c88:	68 c9 2b 03 c0       	push   $0xc0032bc9
c0020c8d:	68 52 2b 03 c0       	push   $0xc0032b52
c0020c92:	68 68 2d 03 c0       	push   $0xc0032d68
c0020c97:	68 b9 00 00 00       	push   $0xb9
c0020c9c:	68 69 2b 03 c0       	push   $0xc0032b69
c0020ca1:	e8 84 98 00 00       	call   c002a52a <debug_panic>

  /* Allocate thread. */
  t = palloc_get_page (PAL_ZERO);
c0020ca6:	83 ec 0c             	sub    $0xc,%esp
c0020ca9:	6a 02                	push   $0x2
c0020cab:	e8 f3 30 00 00       	call   c0023da3 <palloc_get_page>
c0020cb0:	83 c4 10             	add    $0x10,%esp
c0020cb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (t == NULL)
c0020cb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0020cba:	75 0a                	jne    c0020cc6 <thread_create+0x4d>
    return TID_ERROR;
c0020cbc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0020cc1:	e9 bc 00 00 00       	jmp    c0020d82 <thread_create+0x109>

  /* Initialize thread. */
  init_thread (t, name, priority);
c0020cc6:	83 ec 04             	sub    $0x4,%esp
c0020cc9:	ff 75 0c             	pushl  0xc(%ebp)
c0020ccc:	ff 75 08             	pushl  0x8(%ebp)
c0020ccf:	ff 75 f4             	pushl  -0xc(%ebp)
c0020cd2:	e8 cc 05 00 00       	call   c00212a3 <init_thread>
c0020cd7:	83 c4 10             	add    $0x10,%esp

  tid = t->tid = allocate_tid ();
c0020cda:	e8 9d 09 00 00       	call   c002167c <allocate_tid>
c0020cdf:	89 c2                	mov    %eax,%edx
c0020ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020ce4:	89 10                	mov    %edx,(%eax)
c0020ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020ce9:	8b 00                	mov    (%eax),%eax
c0020ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // printf("%d, create %d\n", thread_current()->tid, tid);

  /* Stack frame for kernel_thread(). */
  kf = alloc_frame (t, sizeof *kf);
c0020cee:	83 ec 08             	sub    $0x8,%esp
c0020cf1:	6a 0c                	push   $0xc
c0020cf3:	ff 75 f4             	pushl  -0xc(%ebp)
c0020cf6:	e8 4e 07 00 00       	call   c0021449 <alloc_frame>
c0020cfb:	83 c4 10             	add    $0x10,%esp
c0020cfe:	89 45 ec             	mov    %eax,-0x14(%ebp)
  kf->eip = NULL;
c0020d01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0020d04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  kf->function = function;
c0020d0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0020d0d:	8b 55 10             	mov    0x10(%ebp),%edx
c0020d10:	89 50 04             	mov    %edx,0x4(%eax)
  kf->aux = aux;
c0020d13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0020d16:	8b 55 14             	mov    0x14(%ebp),%edx
c0020d19:	89 50 08             	mov    %edx,0x8(%eax)

  /* Stack frame for switch_entry(). */
  ef = alloc_frame (t, sizeof *ef);
c0020d1c:	83 ec 08             	sub    $0x8,%esp
c0020d1f:	6a 04                	push   $0x4
c0020d21:	ff 75 f4             	pushl  -0xc(%ebp)
c0020d24:	e8 20 07 00 00       	call   c0021449 <alloc_frame>
c0020d29:	83 c4 10             	add    $0x10,%esp
c0020d2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
  ef->eip = (void (*) (void)) kernel_thread;
c0020d2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0020d32:	c7 00 1c 12 02 c0    	movl   $0xc002121c,(%eax)

  /* Stack frame for switch_threads(). */
  sf = alloc_frame (t, sizeof *sf);
c0020d38:	83 ec 08             	sub    $0x8,%esp
c0020d3b:	6a 1c                	push   $0x1c
c0020d3d:	ff 75 f4             	pushl  -0xc(%ebp)
c0020d40:	e8 04 07 00 00       	call   c0021449 <alloc_frame>
c0020d45:	83 c4 10             	add    $0x10,%esp
c0020d48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  sf->eip = switch_entry;
c0020d4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0020d4e:	c7 40 10 e8 1c 02 c0 	movl   $0xc0021ce8,0x10(%eax)
  sf->ebp = 0;
c0020d55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0020d58:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  /* Add to run queue. */
  thread_unblock (t);
c0020d5f:	83 ec 0c             	sub    $0xc,%esp
c0020d62:	ff 75 f4             	pushl  -0xc(%ebp)
c0020d65:	e8 8b 00 00 00       	call   c0020df5 <thread_unblock>
c0020d6a:	83 c4 10             	add    $0x10,%esp

  if (thread_current() -> priority < priority)
c0020d6d:	e8 36 01 00 00       	call   c0020ea8 <thread_current>
c0020d72:	8b 40 1c             	mov    0x1c(%eax),%eax
c0020d75:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0020d78:	7d 05                	jge    c0020d7f <thread_create+0x106>
    thread_yield();
c0020d7a:	e8 24 02 00 00       	call   c0020fa3 <thread_yield>

  return tid;
c0020d7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0020d82:	c9                   	leave  
c0020d83:	c3                   	ret    

c0020d84 <thread_block>:
   This function must be called with interrupts turned off.  It
   is usually a better idea to use one of the synchronization
   primitives in synch.h. */
void
thread_block (void) 
{
c0020d84:	55                   	push   %ebp
c0020d85:	89 e5                	mov    %esp,%ebp
c0020d87:	83 ec 08             	sub    $0x8,%esp
  ASSERT (!intr_context ());
c0020d8a:	e8 c9 12 00 00       	call   c0022058 <intr_context>
c0020d8f:	83 f0 01             	xor    $0x1,%eax
c0020d92:	84 c0                	test   %al,%al
c0020d94:	75 21                	jne    c0020db7 <thread_block+0x33>
c0020d96:	83 ec 0c             	sub    $0xc,%esp
c0020d99:	68 da 2b 03 c0       	push   $0xc0032bda
c0020d9e:	68 52 2b 03 c0       	push   $0xc0032b52
c0020da3:	68 78 2d 03 c0       	push   $0xc0032d78
c0020da8:	68 e8 00 00 00       	push   $0xe8
c0020dad:	68 69 2b 03 c0       	push   $0xc0032b69
c0020db2:	e8 73 97 00 00       	call   c002a52a <debug_panic>
  ASSERT (intr_get_level () == INTR_OFF);
c0020db7:	e8 58 0f 00 00       	call   c0021d14 <intr_get_level>
c0020dbc:	85 c0                	test   %eax,%eax
c0020dbe:	74 21                	je     c0020de1 <thread_block+0x5d>
c0020dc0:	83 ec 0c             	sub    $0xc,%esp
c0020dc3:	68 34 2b 03 c0       	push   $0xc0032b34
c0020dc8:	68 52 2b 03 c0       	push   $0xc0032b52
c0020dcd:	68 78 2d 03 c0       	push   $0xc0032d78
c0020dd2:	68 e9 00 00 00       	push   $0xe9
c0020dd7:	68 69 2b 03 c0       	push   $0xc0032b69
c0020ddc:	e8 49 97 00 00       	call   c002a52a <debug_panic>

  thread_current ()->status = THREAD_BLOCKED;
c0020de1:	e8 c2 00 00 00       	call   c0020ea8 <thread_current>
c0020de6:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
  schedule ();
c0020ded:	e8 b8 07 00 00       	call   c00215aa <schedule>
}
c0020df2:	90                   	nop
c0020df3:	c9                   	leave  
c0020df4:	c3                   	ret    

c0020df5 <thread_unblock>:
   be important: if the caller had disabled interrupts itself,
   it may expect that it can atomically unblock a thread and
   update other data. */
void
thread_unblock (struct thread *t) 
{
c0020df5:	55                   	push   %ebp
c0020df6:	89 e5                	mov    %esp,%ebp
c0020df8:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level;

  ASSERT (is_thread (t));
c0020dfb:	83 ec 0c             	sub    $0xc,%esp
c0020dfe:	ff 75 08             	pushl  0x8(%ebp)
c0020e01:	e8 73 04 00 00       	call   c0021279 <is_thread>
c0020e06:	83 c4 10             	add    $0x10,%esp
c0020e09:	84 c0                	test   %al,%al
c0020e0b:	75 21                	jne    c0020e2e <thread_unblock+0x39>
c0020e0d:	83 ec 0c             	sub    $0xc,%esp
c0020e10:	68 eb 2b 03 c0       	push   $0xc0032beb
c0020e15:	68 52 2b 03 c0       	push   $0xc0032b52
c0020e1a:	68 88 2d 03 c0       	push   $0xc0032d88
c0020e1f:	68 fc 00 00 00       	push   $0xfc
c0020e24:	68 69 2b 03 c0       	push   $0xc0032b69
c0020e29:	e8 fc 96 00 00       	call   c002a52a <debug_panic>

  old_level = intr_disable ();
c0020e2e:	e8 56 0f 00 00       	call   c0021d89 <intr_disable>
c0020e33:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ASSERT (t->status == THREAD_BLOCKED);
c0020e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0020e39:	8b 40 04             	mov    0x4(%eax),%eax
c0020e3c:	83 f8 02             	cmp    $0x2,%eax
c0020e3f:	74 21                	je     c0020e62 <thread_unblock+0x6d>
c0020e41:	83 ec 0c             	sub    $0xc,%esp
c0020e44:	68 f9 2b 03 c0       	push   $0xc0032bf9
c0020e49:	68 52 2b 03 c0       	push   $0xc0032b52
c0020e4e:	68 88 2d 03 c0       	push   $0xc0032d88
c0020e53:	68 ff 00 00 00       	push   $0xff
c0020e58:	68 69 2b 03 c0       	push   $0xc0032b69
c0020e5d:	e8 c8 96 00 00       	call   c002a52a <debug_panic>

  // list_push_back (&ready_list, &t->elem);
  list_insert_ordered(&ready_list, &t->elem, thread_priority_cmp, NULL);
c0020e62:	8b 45 08             	mov    0x8(%ebp),%eax
c0020e65:	83 c0 28             	add    $0x28,%eax
c0020e68:	6a 00                	push   $0x0
c0020e6a:	68 09 17 02 c0       	push   $0xc0021709
c0020e6f:	50                   	push   %eax
c0020e70:	68 80 c1 03 c0       	push   $0xc003c180
c0020e75:	e8 cb a3 00 00       	call   c002b245 <list_insert_ordered>
c0020e7a:	83 c4 10             	add    $0x10,%esp

  t->status = THREAD_READY;
c0020e7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0020e80:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
  intr_set_level (old_level);
c0020e87:	83 ec 0c             	sub    $0xc,%esp
c0020e8a:	ff 75 f4             	pushl  -0xc(%ebp)
c0020e8d:	e8 9f 0e 00 00       	call   c0021d31 <intr_set_level>
c0020e92:	83 c4 10             	add    $0x10,%esp
}
c0020e95:	90                   	nop
c0020e96:	c9                   	leave  
c0020e97:	c3                   	ret    

c0020e98 <thread_name>:

/* Returns the name of the running thread. */
const char *
thread_name (void) 
{
c0020e98:	55                   	push   %ebp
c0020e99:	89 e5                	mov    %esp,%ebp
c0020e9b:	83 ec 08             	sub    $0x8,%esp
  return thread_current ()->name;
c0020e9e:	e8 05 00 00 00       	call   c0020ea8 <thread_current>
c0020ea3:	83 c0 08             	add    $0x8,%eax
}
c0020ea6:	c9                   	leave  
c0020ea7:	c3                   	ret    

c0020ea8 <thread_current>:
/* Returns the running thread.
   This is running_thread() plus a couple of sanity checks.
   See the big comment at the top of thread.h for details. */
struct thread *
thread_current (void) 
{
c0020ea8:	55                   	push   %ebp
c0020ea9:	89 e5                	mov    %esp,%ebp
c0020eab:	83 ec 18             	sub    $0x18,%esp
  struct thread *t = running_thread ();
c0020eae:	e8 ae 03 00 00       	call   c0021261 <running_thread>
c0020eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  /* Make sure T is really a thread.
     If either of these assertions fire, then your thread may
     have overflowed its stack.  Each thread has less than 4 kB
     of stack, so a few big automatic arrays or moderate
     recursion can cause stack overflow. */
  ASSERT (is_thread (t));
c0020eb6:	83 ec 0c             	sub    $0xc,%esp
c0020eb9:	ff 75 f4             	pushl  -0xc(%ebp)
c0020ebc:	e8 b8 03 00 00       	call   c0021279 <is_thread>
c0020ec1:	83 c4 10             	add    $0x10,%esp
c0020ec4:	84 c0                	test   %al,%al
c0020ec6:	75 21                	jne    c0020ee9 <thread_current+0x41>
c0020ec8:	83 ec 0c             	sub    $0xc,%esp
c0020ecb:	68 eb 2b 03 c0       	push   $0xc0032beb
c0020ed0:	68 52 2b 03 c0       	push   $0xc0032b52
c0020ed5:	68 98 2d 03 c0       	push   $0xc0032d98
c0020eda:	68 1c 01 00 00       	push   $0x11c
c0020edf:	68 69 2b 03 c0       	push   $0xc0032b69
c0020ee4:	e8 41 96 00 00       	call   c002a52a <debug_panic>
  ASSERT (t->status == THREAD_RUNNING);
c0020ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020eec:	8b 40 04             	mov    0x4(%eax),%eax
c0020eef:	85 c0                	test   %eax,%eax
c0020ef1:	74 21                	je     c0020f14 <thread_current+0x6c>
c0020ef3:	83 ec 0c             	sub    $0xc,%esp
c0020ef6:	68 15 2c 03 c0       	push   $0xc0032c15
c0020efb:	68 52 2b 03 c0       	push   $0xc0032b52
c0020f00:	68 98 2d 03 c0       	push   $0xc0032d98
c0020f05:	68 1d 01 00 00       	push   $0x11d
c0020f0a:	68 69 2b 03 c0       	push   $0xc0032b69
c0020f0f:	e8 16 96 00 00       	call   c002a52a <debug_panic>

  return t;
c0020f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0020f17:	c9                   	leave  
c0020f18:	c3                   	ret    

c0020f19 <thread_tid>:

/* Returns the running thread's tid. */
tid_t
thread_tid (void) 
{
c0020f19:	55                   	push   %ebp
c0020f1a:	89 e5                	mov    %esp,%ebp
c0020f1c:	83 ec 08             	sub    $0x8,%esp
  return thread_current ()->tid;
c0020f1f:	e8 84 ff ff ff       	call   c0020ea8 <thread_current>
c0020f24:	8b 00                	mov    (%eax),%eax
}
c0020f26:	c9                   	leave  
c0020f27:	c3                   	ret    

c0020f28 <thread_exit>:

/* Deschedules the current thread and destroys it.  Never
   returns to the caller. */
void
thread_exit (void) 
{
c0020f28:	55                   	push   %ebp
c0020f29:	89 e5                	mov    %esp,%ebp
c0020f2b:	83 ec 08             	sub    $0x8,%esp
  ASSERT (!intr_context ());
c0020f2e:	e8 25 11 00 00       	call   c0022058 <intr_context>
c0020f33:	83 f0 01             	xor    $0x1,%eax
c0020f36:	84 c0                	test   %al,%al
c0020f38:	75 21                	jne    c0020f5b <thread_exit+0x33>
c0020f3a:	83 ec 0c             	sub    $0xc,%esp
c0020f3d:	68 da 2b 03 c0       	push   $0xc0032bda
c0020f42:	68 52 2b 03 c0       	push   $0xc0032b52
c0020f47:	68 a8 2d 03 c0       	push   $0xc0032da8
c0020f4c:	68 2e 01 00 00       	push   $0x12e
c0020f51:	68 69 2b 03 c0       	push   $0xc0032b69
c0020f56:	e8 cf 95 00 00       	call   c002a52a <debug_panic>

#ifdef USERPROG
  process_exit ();
c0020f5b:	e8 cd be 00 00       	call   c002ce2d <process_exit>
#endif

  /* Remove thread from all threads list, set our status to dying,
     and schedule another process.  That process will destroy us
     when it calls thread_schedule_tail(). */
  intr_disable ();
c0020f60:	e8 24 0e 00 00       	call   c0021d89 <intr_disable>
  list_remove (&thread_current()->allelem);
c0020f65:	e8 3e ff ff ff       	call   c0020ea8 <thread_current>
c0020f6a:	83 c0 20             	add    $0x20,%eax
c0020f6d:	83 ec 0c             	sub    $0xc,%esp
c0020f70:	50                   	push   %eax
c0020f71:	e8 2d 9c 00 00       	call   c002aba3 <list_remove>
c0020f76:	83 c4 10             	add    $0x10,%esp
  thread_current ()->status = THREAD_DYING;
c0020f79:	e8 2a ff ff ff       	call   c0020ea8 <thread_current>
c0020f7e:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
  schedule ();
c0020f85:	e8 20 06 00 00       	call   c00215aa <schedule>
  NOT_REACHED ();
c0020f8a:	68 34 2c 03 c0       	push   $0xc0032c34
c0020f8f:	68 a8 2d 03 c0       	push   $0xc0032da8
c0020f94:	68 3b 01 00 00       	push   $0x13b
c0020f99:	68 69 2b 03 c0       	push   $0xc0032b69
c0020f9e:	e8 87 95 00 00       	call   c002a52a <debug_panic>

c0020fa3 <thread_yield>:

/* Yields the CPU.  The current thread is not put to sleep and
   may be scheduled again immediately at the scheduler's whim. */
void
thread_yield (void) 
{
c0020fa3:	55                   	push   %ebp
c0020fa4:	89 e5                	mov    %esp,%ebp
c0020fa6:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur = thread_current ();
c0020fa9:	e8 fa fe ff ff       	call   c0020ea8 <thread_current>
c0020fae:	89 45 f4             	mov    %eax,-0xc(%ebp)
  enum intr_level old_level;
  
  ASSERT (!intr_context ());
c0020fb1:	e8 a2 10 00 00       	call   c0022058 <intr_context>
c0020fb6:	83 f0 01             	xor    $0x1,%eax
c0020fb9:	84 c0                	test   %al,%al
c0020fbb:	75 21                	jne    c0020fde <thread_yield+0x3b>
c0020fbd:	83 ec 0c             	sub    $0xc,%esp
c0020fc0:	68 da 2b 03 c0       	push   $0xc0032bda
c0020fc5:	68 52 2b 03 c0       	push   $0xc0032b52
c0020fca:	68 b4 2d 03 c0       	push   $0xc0032db4
c0020fcf:	68 46 01 00 00       	push   $0x146
c0020fd4:	68 69 2b 03 c0       	push   $0xc0032b69
c0020fd9:	e8 4c 95 00 00       	call   c002a52a <debug_panic>

  old_level = intr_disable ();
c0020fde:	e8 a6 0d 00 00       	call   c0021d89 <intr_disable>
c0020fe3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (cur != idle_thread) 
c0020fe6:	a1 a0 c1 03 c0       	mov    0xc003c1a0,%eax
c0020feb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0020fee:	74 1b                	je     c002100b <thread_yield+0x68>
    list_insert_ordered(&ready_list, &cur->elem, thread_priority_cmp, NULL);
c0020ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0020ff3:	83 c0 28             	add    $0x28,%eax
c0020ff6:	6a 00                	push   $0x0
c0020ff8:	68 09 17 02 c0       	push   $0xc0021709
c0020ffd:	50                   	push   %eax
c0020ffe:	68 80 c1 03 c0       	push   $0xc003c180
c0021003:	e8 3d a2 00 00       	call   c002b245 <list_insert_ordered>
c0021008:	83 c4 10             	add    $0x10,%esp

  cur->status = THREAD_READY;
c002100b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002100e:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
  schedule ();
c0021015:	e8 90 05 00 00       	call   c00215aa <schedule>
  intr_set_level (old_level);
c002101a:	83 ec 0c             	sub    $0xc,%esp
c002101d:	ff 75 f0             	pushl  -0x10(%ebp)
c0021020:	e8 0c 0d 00 00       	call   c0021d31 <intr_set_level>
c0021025:	83 c4 10             	add    $0x10,%esp
}
c0021028:	90                   	nop
c0021029:	c9                   	leave  
c002102a:	c3                   	ret    

c002102b <thread_foreach>:

/* Invoke function 'func' on all threads, passing along 'aux'.
   This function must be called with interrupts off. */
void
thread_foreach (thread_action_func *func, void *aux)
{
c002102b:	55                   	push   %ebp
c002102c:	89 e5                	mov    %esp,%ebp
c002102e:	83 ec 18             	sub    $0x18,%esp
  struct list_elem *e;

  ASSERT (intr_get_level () == INTR_OFF);
c0021031:	e8 de 0c 00 00       	call   c0021d14 <intr_get_level>
c0021036:	85 c0                	test   %eax,%eax
c0021038:	74 21                	je     c002105b <thread_foreach+0x30>
c002103a:	83 ec 0c             	sub    $0xc,%esp
c002103d:	68 34 2b 03 c0       	push   $0xc0032b34
c0021042:	68 52 2b 03 c0       	push   $0xc0032b52
c0021047:	68 c4 2d 03 c0       	push   $0xc0032dc4
c002104c:	68 58 01 00 00       	push   $0x158
c0021051:	68 69 2b 03 c0       	push   $0xc0032b69
c0021056:	e8 cf 94 00 00       	call   c002a52a <debug_panic>

  for (e = list_begin (&all_list); e != list_end (&all_list);
c002105b:	83 ec 0c             	sub    $0xc,%esp
c002105e:	68 90 c1 03 c0       	push   $0xc003c190
c0021063:	e8 8a 97 00 00       	call   c002a7f2 <list_begin>
c0021068:	83 c4 10             	add    $0x10,%esp
c002106b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002106e:	eb 2e                	jmp    c002109e <thread_foreach+0x73>
       e = list_next (e))
    {
      struct thread *t = list_entry (e, struct thread, allelem);
c0021070:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021073:	83 c0 04             	add    $0x4,%eax
c0021076:	83 e8 24             	sub    $0x24,%eax
c0021079:	89 45 f0             	mov    %eax,-0x10(%ebp)
      func (t, aux);
c002107c:	83 ec 08             	sub    $0x8,%esp
c002107f:	ff 75 0c             	pushl  0xc(%ebp)
c0021082:	ff 75 f0             	pushl  -0x10(%ebp)
c0021085:	8b 45 08             	mov    0x8(%ebp),%eax
c0021088:	ff d0                	call   *%eax
c002108a:	83 c4 10             	add    $0x10,%esp
       e = list_next (e))
c002108d:	83 ec 0c             	sub    $0xc,%esp
c0021090:	ff 75 f4             	pushl  -0xc(%ebp)
c0021093:	e8 8c 97 00 00       	call   c002a824 <list_next>
c0021098:	83 c4 10             	add    $0x10,%esp
c002109b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (e = list_begin (&all_list); e != list_end (&all_list);
c002109e:	83 ec 0c             	sub    $0xc,%esp
c00210a1:	68 90 c1 03 c0       	push   $0xc003c190
c00210a6:	e8 c3 97 00 00       	call   c002a86e <list_end>
c00210ab:	83 c4 10             	add    $0x10,%esp
c00210ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00210b1:	75 bd                	jne    c0021070 <thread_foreach+0x45>
    }
}
c00210b3:	90                   	nop
c00210b4:	c9                   	leave  
c00210b5:	c3                   	ret    

c00210b6 <thread_set_priority>:

/* Sets the current thread's priority to NEW_PRIORITY. */
void
thread_set_priority (int new_priority) 
{
c00210b6:	55                   	push   %ebp
c00210b7:	89 e5                	mov    %esp,%ebp
c00210b9:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c00210bc:	e8 c8 0c 00 00       	call   c0021d89 <intr_disable>
c00210c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (! thread_mlfqs)
c00210c4:	a0 84 61 04 c0       	mov    0xc0046184,%al
c00210c9:	83 f0 01             	xor    $0x1,%eax
c00210cc:	84 c0                	test   %al,%al
c00210ce:	74 51                	je     c0021121 <thread_set_priority+0x6b>
  {
    struct thread* cur_thread = thread_current ();
c00210d0:	e8 d3 fd ff ff       	call   c0020ea8 <thread_current>
c00210d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cur_thread->old_priority = new_priority;
c00210d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00210db:	8b 55 08             	mov    0x8(%ebp),%edx
c00210de:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    
    thread_update_priority(cur_thread);
c00210e4:	83 ec 0c             	sub    $0xc,%esp
c00210e7:	ff 75 f0             	pushl  -0x10(%ebp)
c00210ea:	e8 15 07 00 00       	call   c0021804 <thread_update_priority>
c00210ef:	83 c4 10             	add    $0x10,%esp
    if (list_empty (&cur_thread->holding_locks) || new_priority > cur_thread->priority)
c00210f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00210f5:	83 c0 74             	add    $0x74,%eax
c00210f8:	83 ec 0c             	sub    $0xc,%esp
c00210fb:	50                   	push   %eax
c00210fc:	e8 24 9c 00 00       	call   c002ad25 <list_empty>
c0021101:	83 c4 10             	add    $0x10,%esp
c0021104:	84 c0                	test   %al,%al
c0021106:	75 0b                	jne    c0021113 <thread_set_priority+0x5d>
c0021108:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002110b:	8b 40 1c             	mov    0x1c(%eax),%eax
c002110e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0021111:	7d 0e                	jge    c0021121 <thread_set_priority+0x6b>
    {
      cur_thread->priority = new_priority;
c0021113:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0021116:	8b 55 08             	mov    0x8(%ebp),%edx
c0021119:	89 50 1c             	mov    %edx,0x1c(%eax)
      thread_yield();
c002111c:	e8 82 fe ff ff       	call   c0020fa3 <thread_yield>
    }
  }

  intr_set_level (old_level);
c0021121:	83 ec 0c             	sub    $0xc,%esp
c0021124:	ff 75 f4             	pushl  -0xc(%ebp)
c0021127:	e8 05 0c 00 00       	call   c0021d31 <intr_set_level>
c002112c:	83 c4 10             	add    $0x10,%esp
}
c002112f:	90                   	nop
c0021130:	c9                   	leave  
c0021131:	c3                   	ret    

c0021132 <thread_get_priority>:

/* Returns the current thread's priority. */
int
thread_get_priority (void) 
{
c0021132:	55                   	push   %ebp
c0021133:	89 e5                	mov    %esp,%ebp
c0021135:	83 ec 08             	sub    $0x8,%esp
  return thread_current ()->priority;
c0021138:	e8 6b fd ff ff       	call   c0020ea8 <thread_current>
c002113d:	8b 40 1c             	mov    0x1c(%eax),%eax
}
c0021140:	c9                   	leave  
c0021141:	c3                   	ret    

c0021142 <thread_set_nice>:

/* Sets the current thread's nice value to NICE. */
void
thread_set_nice (int nice) 
{
c0021142:	55                   	push   %ebp
c0021143:	89 e5                	mov    %esp,%ebp
c0021145:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable();
c0021148:	e8 3c 0c 00 00       	call   c0021d89 <intr_disable>
c002114d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct thread* cur_thread = thread_current();
c0021150:	e8 53 fd ff ff       	call   c0020ea8 <thread_current>
c0021155:	89 45 f0             	mov    %eax,-0x10(%ebp)
  cur_thread->nice_val = nice;
c0021158:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002115b:	8b 55 08             	mov    0x8(%ebp),%edx
c002115e:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
  thread_update_priority_mlfqs(cur_thread);
c0021164:	83 ec 0c             	sub    $0xc,%esp
c0021167:	ff 75 f0             	pushl  -0x10(%ebp)
c002116a:	e8 47 09 00 00       	call   c0021ab6 <thread_update_priority_mlfqs>
c002116f:	83 c4 10             	add    $0x10,%esp
  intr_set_level(old_level);
c0021172:	83 ec 0c             	sub    $0xc,%esp
c0021175:	ff 75 f4             	pushl  -0xc(%ebp)
c0021178:	e8 b4 0b 00 00       	call   c0021d31 <intr_set_level>
c002117d:	83 c4 10             	add    $0x10,%esp
}
c0021180:	90                   	nop
c0021181:	c9                   	leave  
c0021182:	c3                   	ret    

c0021183 <thread_get_nice>:

/* Returns the current thread's nice value. */
int
thread_get_nice (void) 
{
c0021183:	55                   	push   %ebp
c0021184:	89 e5                	mov    %esp,%ebp
c0021186:	83 ec 08             	sub    $0x8,%esp
  return thread_current()->nice_val;
c0021189:	e8 1a fd ff ff       	call   c0020ea8 <thread_current>
c002118e:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
}
c0021194:	c9                   	leave  
c0021195:	c3                   	ret    

c0021196 <thread_get_load_avg>:

/* Returns 100 times the system load average. */
int
thread_get_load_avg (void) 
{
c0021196:	55                   	push   %ebp
c0021197:	89 e5                	mov    %esp,%ebp
c0021199:	83 ec 08             	sub    $0x8,%esp
  // int t = ff_mul_with_int(load_avg, 100);
  return convert_to_int_round(ff_mul_with_int(load_avg, 100));
c002119c:	a1 80 61 04 c0       	mov    0xc0046180,%eax
c00211a1:	83 ec 08             	sub    $0x8,%esp
c00211a4:	6a 64                	push   $0x64
c00211a6:	50                   	push   %eax
c00211a7:	e8 3b 93 00 00       	call   c002a4e7 <ff_mul_with_int>
c00211ac:	83 c4 10             	add    $0x10,%esp
c00211af:	83 ec 0c             	sub    $0xc,%esp
c00211b2:	50                   	push   %eax
c00211b3:	e8 65 92 00 00       	call   c002a41d <convert_to_int_round>
c00211b8:	83 c4 10             	add    $0x10,%esp
  // return convert_to_int_round(t);
}
c00211bb:	c9                   	leave  
c00211bc:	c3                   	ret    

c00211bd <thread_get_recent_cpu>:

/* Returns 100 times the current thread's recent_cpu value. */
int
thread_get_recent_cpu (void) 
{
c00211bd:	55                   	push   %ebp
c00211be:	89 e5                	mov    %esp,%ebp
c00211c0:	83 ec 08             	sub    $0x8,%esp
  return convert_to_int_round(ff_mul_with_int(thread_current()->recent_cpu, 100));
c00211c3:	e8 e0 fc ff ff       	call   c0020ea8 <thread_current>
c00211c8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c00211ce:	83 ec 08             	sub    $0x8,%esp
c00211d1:	6a 64                	push   $0x64
c00211d3:	50                   	push   %eax
c00211d4:	e8 0e 93 00 00       	call   c002a4e7 <ff_mul_with_int>
c00211d9:	83 c4 10             	add    $0x10,%esp
c00211dc:	83 ec 0c             	sub    $0xc,%esp
c00211df:	50                   	push   %eax
c00211e0:	e8 38 92 00 00       	call   c002a41d <convert_to_int_round>
c00211e5:	83 c4 10             	add    $0x10,%esp
}
c00211e8:	c9                   	leave  
c00211e9:	c3                   	ret    

c00211ea <idle>:
   blocks.  After that, the idle thread never appears in the
   ready list.  It is returned by next_thread_to_run() as a
   special case when the ready list is empty. */
static void
idle (void *idle_started_ UNUSED) 
{
c00211ea:	55                   	push   %ebp
c00211eb:	89 e5                	mov    %esp,%ebp
c00211ed:	83 ec 18             	sub    $0x18,%esp
  struct semaphore *idle_started = idle_started_;
c00211f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00211f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  idle_thread = thread_current ();
c00211f6:	e8 ad fc ff ff       	call   c0020ea8 <thread_current>
c00211fb:	a3 a0 c1 03 c0       	mov    %eax,0xc003c1a0
  sema_up (idle_started);
c0021200:	83 ec 0c             	sub    $0xc,%esp
c0021203:	ff 75 f4             	pushl  -0xc(%ebp)
c0021206:	e8 e0 20 00 00       	call   c00232eb <sema_up>
c002120b:	83 c4 10             	add    $0x10,%esp

  for (;;) 
    {
      /* Let someone else run. */
      intr_disable ();
c002120e:	e8 76 0b 00 00       	call   c0021d89 <intr_disable>
      thread_block ();
c0021213:	e8 6c fb ff ff       	call   c0020d84 <thread_block>
         one to occur, wasting as much as one clock tick worth of
         time.

         See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3a]
         7.11.1 "HLT Instruction". */
      asm volatile ("sti; hlt" : : : "memory");
c0021218:	fb                   	sti    
c0021219:	f4                   	hlt    
      intr_disable ();
c002121a:	eb f2                	jmp    c002120e <idle+0x24>

c002121c <kernel_thread>:
}

/* Function used as the basis for a kernel thread. */
static void
kernel_thread (thread_func *function, void *aux) 
{
c002121c:	55                   	push   %ebp
c002121d:	89 e5                	mov    %esp,%ebp
c002121f:	83 ec 08             	sub    $0x8,%esp
  ASSERT (function != NULL);
c0021222:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0021226:	75 21                	jne    c0021249 <kernel_thread+0x2d>
c0021228:	83 ec 0c             	sub    $0xc,%esp
c002122b:	68 c9 2b 03 c0       	push   $0xc0032bc9
c0021230:	68 52 2b 03 c0       	push   $0xc0032b52
c0021235:	68 d4 2d 03 c0       	push   $0xc0032dd4
c002123a:	68 ca 01 00 00       	push   $0x1ca
c002123f:	68 69 2b 03 c0       	push   $0xc0032b69
c0021244:	e8 e1 92 00 00       	call   c002a52a <debug_panic>

  intr_enable ();       /* The scheduler runs with interrupts off. */
c0021249:	e8 fd 0a 00 00       	call   c0021d4b <intr_enable>
  function (aux);       /* Execute the thread function. */
c002124e:	83 ec 0c             	sub    $0xc,%esp
c0021251:	ff 75 0c             	pushl  0xc(%ebp)
c0021254:	8b 45 08             	mov    0x8(%ebp),%eax
c0021257:	ff d0                	call   *%eax
c0021259:	83 c4 10             	add    $0x10,%esp
  thread_exit ();       /* If function() returns, kill the thread. */
c002125c:	e8 c7 fc ff ff       	call   c0020f28 <thread_exit>

c0021261 <running_thread>:
}

/* Returns the running thread. */
struct thread *
running_thread (void) 
{
c0021261:	55                   	push   %ebp
c0021262:	89 e5                	mov    %esp,%ebp
c0021264:	83 ec 10             	sub    $0x10,%esp

  /* Copy the CPU's stack pointer into `esp', and then round that
     down to the start of a page.  Because `struct thread' is
     always at the beginning of a page and the stack pointer is
     somewhere in the middle, this locates the curent thread. */
  asm ("mov %%esp, %0" : "=g" (esp));
c0021267:	89 e0                	mov    %esp,%eax
c0021269:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return pg_round_down (esp);
c002126c:	ff 75 fc             	pushl  -0x4(%ebp)
c002126f:	e8 1f f8 ff ff       	call   c0020a93 <pg_round_down>
c0021274:	83 c4 04             	add    $0x4,%esp
}
c0021277:	c9                   	leave  
c0021278:	c3                   	ret    

c0021279 <is_thread>:

/* Returns true if T appears to point to a valid thread. */
static bool
is_thread (struct thread *t)
{
c0021279:	55                   	push   %ebp
c002127a:	89 e5                	mov    %esp,%ebp
  return t != NULL && t->magic == THREAD_MAGIC;
c002127c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0021280:	74 17                	je     c0021299 <is_thread+0x20>
c0021282:	8b 45 08             	mov    0x8(%ebp),%eax
c0021285:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c002128b:	3d 4b bf 6a cd       	cmp    $0xcd6abf4b,%eax
c0021290:	75 07                	jne    c0021299 <is_thread+0x20>
c0021292:	b8 01 00 00 00       	mov    $0x1,%eax
c0021297:	eb 05                	jmp    c002129e <is_thread+0x25>
c0021299:	b8 00 00 00 00       	mov    $0x0,%eax
c002129e:	83 e0 01             	and    $0x1,%eax
}
c00212a1:	5d                   	pop    %ebp
c00212a2:	c3                   	ret    

c00212a3 <init_thread>:

/* Does basic initialization of T as a blocked thread named
   NAME. */
static void
init_thread (struct thread *t, const char *name, int priority)
{
c00212a3:	55                   	push   %ebp
c00212a4:	89 e5                	mov    %esp,%ebp
c00212a6:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level;

  ASSERT (t != NULL);
c00212a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00212ad:	75 21                	jne    c00212d0 <init_thread+0x2d>
c00212af:	83 ec 0c             	sub    $0xc,%esp
c00212b2:	68 56 2c 03 c0       	push   $0xc0032c56
c00212b7:	68 52 2b 03 c0       	push   $0xc0032b52
c00212bc:	68 e4 2d 03 c0       	push   $0xc0032de4
c00212c1:	68 ed 01 00 00       	push   $0x1ed
c00212c6:	68 69 2b 03 c0       	push   $0xc0032b69
c00212cb:	e8 5a 92 00 00       	call   c002a52a <debug_panic>
  ASSERT (PRI_MIN <= priority && priority <= PRI_MAX);
c00212d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00212d4:	78 06                	js     c00212dc <init_thread+0x39>
c00212d6:	83 7d 10 3f          	cmpl   $0x3f,0x10(%ebp)
c00212da:	7e 21                	jle    c00212fd <init_thread+0x5a>
c00212dc:	83 ec 0c             	sub    $0xc,%esp
c00212df:	68 60 2c 03 c0       	push   $0xc0032c60
c00212e4:	68 52 2b 03 c0       	push   $0xc0032b52
c00212e9:	68 e4 2d 03 c0       	push   $0xc0032de4
c00212ee:	68 ee 01 00 00       	push   $0x1ee
c00212f3:	68 69 2b 03 c0       	push   $0xc0032b69
c00212f8:	e8 2d 92 00 00       	call   c002a52a <debug_panic>
  ASSERT (name != NULL);
c00212fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0021301:	75 21                	jne    c0021324 <init_thread+0x81>
c0021303:	83 ec 0c             	sub    $0xc,%esp
c0021306:	68 8b 2c 03 c0       	push   $0xc0032c8b
c002130b:	68 52 2b 03 c0       	push   $0xc0032b52
c0021310:	68 e4 2d 03 c0       	push   $0xc0032de4
c0021315:	68 ef 01 00 00       	push   $0x1ef
c002131a:	68 69 2b 03 c0       	push   $0xc0032b69
c002131f:	e8 06 92 00 00       	call   c002a52a <debug_panic>

  memset (t, 0, sizeof *t);
c0021324:	83 ec 04             	sub    $0x4,%esp
c0021327:	68 9c 00 00 00       	push   $0x9c
c002132c:	6a 00                	push   $0x0
c002132e:	ff 75 08             	pushl  0x8(%ebp)
c0021331:	e8 ba 84 00 00       	call   c00297f0 <memset>
c0021336:	83 c4 10             	add    $0x10,%esp
  t->status = THREAD_BLOCKED;
c0021339:	8b 45 08             	mov    0x8(%ebp),%eax
c002133c:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
  strlcpy (t->name, name, sizeof t->name);
c0021343:	8b 45 08             	mov    0x8(%ebp),%eax
c0021346:	83 c0 08             	add    $0x8,%eax
c0021349:	83 ec 04             	sub    $0x4,%esp
c002134c:	6a 10                	push   $0x10
c002134e:	ff 75 0c             	pushl  0xc(%ebp)
c0021351:	50                   	push   %eax
c0021352:	e8 70 85 00 00       	call   c00298c7 <strlcpy>
c0021357:	83 c4 10             	add    $0x10,%esp
  t->stack = (uint8_t *) t + PGSIZE;
c002135a:	8b 45 08             	mov    0x8(%ebp),%eax
c002135d:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
c0021363:	8b 45 08             	mov    0x8(%ebp),%eax
c0021366:	89 50 18             	mov    %edx,0x18(%eax)
  t->priority = priority;
c0021369:	8b 45 08             	mov    0x8(%ebp),%eax
c002136c:	8b 55 10             	mov    0x10(%ebp),%edx
c002136f:	89 50 1c             	mov    %edx,0x1c(%eax)
  t->magic = THREAD_MAGIC;
c0021372:	8b 45 08             	mov    0x8(%ebp),%eax
c0021375:	c7 80 98 00 00 00 4b 	movl   $0xcd6abf4b,0x98(%eax)
c002137c:	bf 6a cd 

  #ifdef USERPROG
  t->pcb = NULL;
c002137f:	8b 45 08             	mov    0x8(%ebp),%eax
c0021382:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
  list_init(&t->child_threads);
c0021389:	8b 45 08             	mov    0x8(%ebp),%eax
c002138c:	83 c0 34             	add    $0x34,%eax
c002138f:	83 ec 0c             	sub    $0xc,%esp
c0021392:	50                   	push   %eax
c0021393:	e8 05 94 00 00       	call   c002a79d <list_init>
c0021398:	83 c4 10             	add    $0x10,%esp
  list_init(&t->opened_files);
c002139b:	8b 45 08             	mov    0x8(%ebp),%eax
c002139e:	83 c0 44             	add    $0x44,%eax
c00213a1:	83 ec 0c             	sub    $0xc,%esp
c00213a4:	50                   	push   %eax
c00213a5:	e8 f3 93 00 00       	call   c002a79d <list_init>
c00213aa:	83 c4 10             	add    $0x10,%esp
  t->executing_file = NULL;
c00213ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00213b0:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)

  #ifdef VM
    list_init(&t->mmap_list);
  #endif

  if (!thread_mlfqs) 
c00213b7:	a0 84 61 04 c0       	mov    0xc0046184,%al
c00213bc:	83 f0 01             	xor    $0x1,%eax
c00213bf:	84 c0                	test   %al,%al
c00213c1:	74 2d                	je     c00213f0 <init_thread+0x14d>
  {
    t->old_priority = priority;
c00213c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00213c6:	8b 55 10             	mov    0x10(%ebp),%edx
c00213c9:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    list_init(&t->holding_locks);
c00213cf:	8b 45 08             	mov    0x8(%ebp),%eax
c00213d2:	83 c0 74             	add    $0x74,%eax
c00213d5:	83 ec 0c             	sub    $0xc,%esp
c00213d8:	50                   	push   %eax
c00213d9:	e8 bf 93 00 00       	call   c002a79d <list_init>
c00213de:	83 c4 10             	add    $0x10,%esp
    t->lock_waiting = NULL;
c00213e1:	8b 45 08             	mov    0x8(%ebp),%eax
c00213e4:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c00213eb:	00 00 00 
c00213ee:	eb 25                	jmp    c0021415 <init_thread+0x172>
  } else
  {
    t->nice_val = 0;
c00213f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00213f3:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
c00213fa:	00 00 00 
    t->recent_cpu = convert_to_fixed_point(0);
c00213fd:	83 ec 0c             	sub    $0xc,%esp
c0021400:	6a 00                	push   $0x0
c0021402:	e8 f5 8f 00 00       	call   c002a3fc <convert_to_fixed_point>
c0021407:	83 c4 10             	add    $0x10,%esp
c002140a:	89 c2                	mov    %eax,%edx
c002140c:	8b 45 08             	mov    0x8(%ebp),%eax
c002140f:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
  }

  old_level = intr_disable ();
c0021415:	e8 6f 09 00 00       	call   c0021d89 <intr_disable>
c002141a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  list_insert_ordered (&all_list, &t->allelem, thread_priority_cmp, NULL);
c002141d:	8b 45 08             	mov    0x8(%ebp),%eax
c0021420:	83 c0 20             	add    $0x20,%eax
c0021423:	6a 00                	push   $0x0
c0021425:	68 09 17 02 c0       	push   $0xc0021709
c002142a:	50                   	push   %eax
c002142b:	68 90 c1 03 c0       	push   $0xc003c190
c0021430:	e8 10 9e 00 00       	call   c002b245 <list_insert_ordered>
c0021435:	83 c4 10             	add    $0x10,%esp

  intr_set_level (old_level);
c0021438:	83 ec 0c             	sub    $0xc,%esp
c002143b:	ff 75 f4             	pushl  -0xc(%ebp)
c002143e:	e8 ee 08 00 00       	call   c0021d31 <intr_set_level>
c0021443:	83 c4 10             	add    $0x10,%esp
}
c0021446:	90                   	nop
c0021447:	c9                   	leave  
c0021448:	c3                   	ret    

c0021449 <alloc_frame>:

/* Allocates a SIZE-byte frame at the top of thread T's stack and
   returns a pointer to the frame's base. */
static void *
alloc_frame (struct thread *t, size_t size) 
{
c0021449:	55                   	push   %ebp
c002144a:	89 e5                	mov    %esp,%ebp
c002144c:	83 ec 08             	sub    $0x8,%esp
  /* Stack data is always allocated in word-size units. */
  ASSERT (is_thread (t));
c002144f:	ff 75 08             	pushl  0x8(%ebp)
c0021452:	e8 22 fe ff ff       	call   c0021279 <is_thread>
c0021457:	83 c4 04             	add    $0x4,%esp
c002145a:	84 c0                	test   %al,%al
c002145c:	75 21                	jne    c002147f <alloc_frame+0x36>
c002145e:	83 ec 0c             	sub    $0xc,%esp
c0021461:	68 eb 2b 03 c0       	push   $0xc0032beb
c0021466:	68 52 2b 03 c0       	push   $0xc0032b52
c002146b:	68 f0 2d 03 c0       	push   $0xc0032df0
c0021470:	68 1a 02 00 00       	push   $0x21a
c0021475:	68 69 2b 03 c0       	push   $0xc0032b69
c002147a:	e8 ab 90 00 00       	call   c002a52a <debug_panic>
  ASSERT (size % sizeof (uint32_t) == 0);
c002147f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0021482:	83 e0 03             	and    $0x3,%eax
c0021485:	85 c0                	test   %eax,%eax
c0021487:	74 21                	je     c00214aa <alloc_frame+0x61>
c0021489:	83 ec 0c             	sub    $0xc,%esp
c002148c:	68 98 2c 03 c0       	push   $0xc0032c98
c0021491:	68 52 2b 03 c0       	push   $0xc0032b52
c0021496:	68 f0 2d 03 c0       	push   $0xc0032df0
c002149b:	68 1b 02 00 00       	push   $0x21b
c00214a0:	68 69 2b 03 c0       	push   $0xc0032b69
c00214a5:	e8 80 90 00 00       	call   c002a52a <debug_panic>

  t->stack -= size;
c00214aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00214ad:	8b 40 18             	mov    0x18(%eax),%eax
c00214b0:	8b 55 0c             	mov    0xc(%ebp),%edx
c00214b3:	f7 da                	neg    %edx
c00214b5:	01 c2                	add    %eax,%edx
c00214b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00214ba:	89 50 18             	mov    %edx,0x18(%eax)
  return t->stack;
c00214bd:	8b 45 08             	mov    0x8(%ebp),%eax
c00214c0:	8b 40 18             	mov    0x18(%eax),%eax
}
c00214c3:	c9                   	leave  
c00214c4:	c3                   	ret    

c00214c5 <next_thread_to_run>:
   empty.  (If the running thread can continue running, then it
   will be in the run queue.)  If the run queue is empty, return
   idle_thread. */
static struct thread *
next_thread_to_run (void) 
{
c00214c5:	55                   	push   %ebp
c00214c6:	89 e5                	mov    %esp,%ebp
c00214c8:	83 ec 08             	sub    $0x8,%esp
  if (list_empty (&ready_list))
c00214cb:	83 ec 0c             	sub    $0xc,%esp
c00214ce:	68 80 c1 03 c0       	push   $0xc003c180
c00214d3:	e8 4d 98 00 00       	call   c002ad25 <list_empty>
c00214d8:	83 c4 10             	add    $0x10,%esp
c00214db:	84 c0                	test   %al,%al
c00214dd:	74 07                	je     c00214e6 <next_thread_to_run+0x21>
    return idle_thread;
c00214df:	a1 a0 c1 03 c0       	mov    0xc003c1a0,%eax
c00214e4:	eb 16                	jmp    c00214fc <next_thread_to_run+0x37>
  else
    return list_entry (list_pop_front (&ready_list), struct thread, elem);
c00214e6:	83 ec 0c             	sub    $0xc,%esp
c00214e9:	68 80 c1 03 c0       	push   $0xc003c180
c00214ee:	e8 09 97 00 00       	call   c002abfc <list_pop_front>
c00214f3:	83 c4 10             	add    $0x10,%esp
c00214f6:	83 c0 04             	add    $0x4,%eax
c00214f9:	83 e8 2c             	sub    $0x2c,%eax
}
c00214fc:	c9                   	leave  
c00214fd:	c3                   	ret    

c00214fe <thread_schedule_tail>:

   After this function and its caller returns, the thread switch
   is complete. */
void
thread_schedule_tail (struct thread *prev)
{
c00214fe:	55                   	push   %ebp
c00214ff:	89 e5                	mov    %esp,%ebp
c0021501:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur = running_thread ();
c0021504:	e8 58 fd ff ff       	call   c0021261 <running_thread>
c0021509:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  ASSERT (intr_get_level () == INTR_OFF);
c002150c:	e8 03 08 00 00       	call   c0021d14 <intr_get_level>
c0021511:	85 c0                	test   %eax,%eax
c0021513:	74 21                	je     c0021536 <thread_schedule_tail+0x38>
c0021515:	83 ec 0c             	sub    $0xc,%esp
c0021518:	68 34 2b 03 c0       	push   $0xc0032b34
c002151d:	68 52 2b 03 c0       	push   $0xc0032b52
c0021522:	68 fc 2d 03 c0       	push   $0xc0032dfc
c0021527:	68 44 02 00 00       	push   $0x244
c002152c:	68 69 2b 03 c0       	push   $0xc0032b69
c0021531:	e8 f4 8f 00 00       	call   c002a52a <debug_panic>

  /* Mark us as running. */
  cur->status = THREAD_RUNNING;
c0021536:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021539:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

  /* Start new time slice. */
  thread_ticks = 0;
c0021540:	c7 05 00 c2 03 c0 00 	movl   $0x0,0xc003c200
c0021547:	00 00 00 

#ifdef USERPROG
  /* Activate the new address space. */
  if (prev != NULL)           // highlight: prev not NULL, means didn't switched, so don't need to activate process since it's just running
c002154a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002154e:	74 05                	je     c0021555 <thread_schedule_tail+0x57>
    process_activate ();
c0021550:	e8 5d ba 00 00       	call   c002cfb2 <process_activate>
  /* If the thread we switched from is dying, destroy its struct
     thread.  This must happen late so that thread_exit() doesn't
     pull out the rug under itself.  (We don't free
     initial_thread because its memory was not obtained via
     palloc().) */
  if (prev != NULL && prev->status == THREAD_DYING && prev != initial_thread) 
c0021555:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0021559:	74 4c                	je     c00215a7 <thread_schedule_tail+0xa9>
c002155b:	8b 45 08             	mov    0x8(%ebp),%eax
c002155e:	8b 40 04             	mov    0x4(%eax),%eax
c0021561:	83 f8 03             	cmp    $0x3,%eax
c0021564:	75 41                	jne    c00215a7 <thread_schedule_tail+0xa9>
c0021566:	a1 a4 c1 03 c0       	mov    0xc003c1a4,%eax
c002156b:	39 45 08             	cmp    %eax,0x8(%ebp)
c002156e:	74 37                	je     c00215a7 <thread_schedule_tail+0xa9>
    {
      ASSERT (prev != cur);
c0021570:	8b 45 08             	mov    0x8(%ebp),%eax
c0021573:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0021576:	75 21                	jne    c0021599 <thread_schedule_tail+0x9b>
c0021578:	83 ec 0c             	sub    $0xc,%esp
c002157b:	68 b6 2c 03 c0       	push   $0xc0032cb6
c0021580:	68 52 2b 03 c0       	push   $0xc0032b52
c0021585:	68 fc 2d 03 c0       	push   $0xc0032dfc
c002158a:	68 59 02 00 00       	push   $0x259
c002158f:	68 69 2b 03 c0       	push   $0xc0032b69
c0021594:	e8 91 8f 00 00       	call   c002a52a <debug_panic>
      palloc_free_page (prev);
c0021599:	83 ec 0c             	sub    $0xc,%esp
c002159c:	ff 75 08             	pushl  0x8(%ebp)
c002159f:	e8 57 29 00 00       	call   c0023efb <palloc_free_page>
c00215a4:	83 c4 10             	add    $0x10,%esp
    }
}
c00215a7:	90                   	nop
c00215a8:	c9                   	leave  
c00215a9:	c3                   	ret    

c00215aa <schedule>:

   It's not safe to call printf() until thread_schedule_tail()
   has completed. */
static void
schedule (void) 
{
c00215aa:	55                   	push   %ebp
c00215ab:	89 e5                	mov    %esp,%ebp
c00215ad:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur = running_thread ();
c00215b0:	e8 ac fc ff ff       	call   c0021261 <running_thread>
c00215b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct thread *next = next_thread_to_run ();
c00215b8:	e8 08 ff ff ff       	call   c00214c5 <next_thread_to_run>
c00215bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  struct thread *prev = NULL;
c00215c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  ASSERT (intr_get_level () == INTR_OFF);
c00215c7:	e8 48 07 00 00       	call   c0021d14 <intr_get_level>
c00215cc:	85 c0                	test   %eax,%eax
c00215ce:	74 21                	je     c00215f1 <schedule+0x47>
c00215d0:	83 ec 0c             	sub    $0xc,%esp
c00215d3:	68 34 2b 03 c0       	push   $0xc0032b34
c00215d8:	68 52 2b 03 c0       	push   $0xc0032b52
c00215dd:	68 14 2e 03 c0       	push   $0xc0032e14
c00215e2:	68 6c 02 00 00       	push   $0x26c
c00215e7:	68 69 2b 03 c0       	push   $0xc0032b69
c00215ec:	e8 39 8f 00 00       	call   c002a52a <debug_panic>
  ASSERT (cur->status != THREAD_RUNNING);
c00215f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00215f4:	8b 40 04             	mov    0x4(%eax),%eax
c00215f7:	85 c0                	test   %eax,%eax
c00215f9:	75 21                	jne    c002161c <schedule+0x72>
c00215fb:	83 ec 0c             	sub    $0xc,%esp
c00215fe:	68 c2 2c 03 c0       	push   $0xc0032cc2
c0021603:	68 52 2b 03 c0       	push   $0xc0032b52
c0021608:	68 14 2e 03 c0       	push   $0xc0032e14
c002160d:	68 6d 02 00 00       	push   $0x26d
c0021612:	68 69 2b 03 c0       	push   $0xc0032b69
c0021617:	e8 0e 8f 00 00       	call   c002a52a <debug_panic>
  ASSERT (is_thread (next));
c002161c:	83 ec 0c             	sub    $0xc,%esp
c002161f:	ff 75 ec             	pushl  -0x14(%ebp)
c0021622:	e8 52 fc ff ff       	call   c0021279 <is_thread>
c0021627:	83 c4 10             	add    $0x10,%esp
c002162a:	84 c0                	test   %al,%al
c002162c:	75 21                	jne    c002164f <schedule+0xa5>
c002162e:	83 ec 0c             	sub    $0xc,%esp
c0021631:	68 e0 2c 03 c0       	push   $0xc0032ce0
c0021636:	68 52 2b 03 c0       	push   $0xc0032b52
c002163b:	68 14 2e 03 c0       	push   $0xc0032e14
c0021640:	68 6e 02 00 00       	push   $0x26e
c0021645:	68 69 2b 03 c0       	push   $0xc0032b69
c002164a:	e8 db 8e 00 00       	call   c002a52a <debug_panic>

  if (cur != next)
c002164f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0021652:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0021655:	74 14                	je     c002166b <schedule+0xc1>
    prev = switch_threads (cur, next);
c0021657:	83 ec 08             	sub    $0x8,%esp
c002165a:	ff 75 ec             	pushl  -0x14(%ebp)
c002165d:	ff 75 f0             	pushl  -0x10(%ebp)
c0021660:	e8 66 06 00 00       	call   c0021ccb <switch_threads>
c0021665:	83 c4 10             	add    $0x10,%esp
c0021668:	89 45 f4             	mov    %eax,-0xc(%ebp)
  thread_schedule_tail (prev);
c002166b:	83 ec 0c             	sub    $0xc,%esp
c002166e:	ff 75 f4             	pushl  -0xc(%ebp)
c0021671:	e8 88 fe ff ff       	call   c00214fe <thread_schedule_tail>
c0021676:	83 c4 10             	add    $0x10,%esp
}
c0021679:	90                   	nop
c002167a:	c9                   	leave  
c002167b:	c3                   	ret    

c002167c <allocate_tid>:

/* Returns a tid to use for a new thread. */
static tid_t
allocate_tid (void) 
{
c002167c:	55                   	push   %ebp
c002167d:	89 e5                	mov    %esp,%ebp
c002167f:	83 ec 18             	sub    $0x18,%esp
  static tid_t next_tid = 1;
  tid_t tid;

  lock_acquire (&tid_lock);
c0021682:	83 ec 0c             	sub    $0xc,%esp
c0021685:	68 c0 c1 03 c0       	push   $0xc003c1c0
c002168a:	e8 3c 1e 00 00       	call   c00234cb <lock_acquire>
c002168f:	83 c4 10             	add    $0x10,%esp
  tid = next_tid++;
c0021692:	a1 a8 b7 03 c0       	mov    0xc003b7a8,%eax
c0021697:	8d 50 01             	lea    0x1(%eax),%edx
c002169a:	89 15 a8 b7 03 c0    	mov    %edx,0xc003b7a8
c00216a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_release (&tid_lock);
c00216a3:	83 ec 0c             	sub    $0xc,%esp
c00216a6:	68 c0 c1 03 c0       	push   $0xc003c1c0
c00216ab:	e8 5a 20 00 00       	call   c002370a <lock_release>
c00216b0:	83 c4 10             	add    $0x10,%esp

  return tid;
c00216b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c00216b6:	c9                   	leave  
c00216b7:	c3                   	ret    

c00216b8 <sleep_thread_cmp>:


/* Used to compare the wake up time for threads */
bool
sleep_thread_cmp (const struct list_elem* t1, const struct list_elem* t2, void* aux)
{
c00216b8:	55                   	push   %ebp
c00216b9:	89 e5                	mov    %esp,%ebp
c00216bb:	56                   	push   %esi
c00216bc:	53                   	push   %ebx
c00216bd:	83 ec 10             	sub    $0x10,%esp
  struct thread* thread1 = list_entry(t1, struct thread, sleepelem);
c00216c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00216c3:	83 c0 04             	add    $0x4,%eax
c00216c6:	83 e8 70             	sub    $0x70,%eax
c00216c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct thread* thread2 = list_entry(t2, struct thread, sleepelem);
c00216cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c00216cf:	83 c0 04             	add    $0x4,%eax
c00216d2:	83 e8 70             	sub    $0x70,%eax
c00216d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  return thread1->wake_tick <= thread2->wake_tick;
c00216d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00216db:	8b 48 64             	mov    0x64(%eax),%ecx
c00216de:	8b 58 68             	mov    0x68(%eax),%ebx
c00216e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00216e4:	8b 50 68             	mov    0x68(%eax),%edx
c00216e7:	8b 40 64             	mov    0x64(%eax),%eax
c00216ea:	be 01 00 00 00       	mov    $0x1,%esi
c00216ef:	39 d3                	cmp    %edx,%ebx
c00216f1:	7c 0d                	jl     c0021700 <sleep_thread_cmp+0x48>
c00216f3:	39 d3                	cmp    %edx,%ebx
c00216f5:	7f 04                	jg     c00216fb <sleep_thread_cmp+0x43>
c00216f7:	39 c1                	cmp    %eax,%ecx
c00216f9:	76 05                	jbe    c0021700 <sleep_thread_cmp+0x48>
c00216fb:	be 00 00 00 00       	mov    $0x0,%esi
c0021700:	89 f0                	mov    %esi,%eax
}
c0021702:	83 c4 10             	add    $0x10,%esp
c0021705:	5b                   	pop    %ebx
c0021706:	5e                   	pop    %esi
c0021707:	5d                   	pop    %ebp
c0021708:	c3                   	ret    

c0021709 <thread_priority_cmp>:

/* Used to compare the priority between threads */
bool
thread_priority_cmp (const struct list_elem* t1, const struct list_elem* t2, void* aux)
{
c0021709:	55                   	push   %ebp
c002170a:	89 e5                	mov    %esp,%ebp
c002170c:	83 ec 10             	sub    $0x10,%esp
  struct thread* thread1 = list_entry(t1, struct thread, elem);
c002170f:	8b 45 08             	mov    0x8(%ebp),%eax
c0021712:	83 c0 04             	add    $0x4,%eax
c0021715:	83 e8 2c             	sub    $0x2c,%eax
c0021718:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct thread* thread2 = list_entry(t2, struct thread, elem);
c002171b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002171e:	83 c0 04             	add    $0x4,%eax
c0021721:	83 e8 2c             	sub    $0x2c,%eax
c0021724:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return thread1->priority > thread2->priority;
c0021727:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002172a:	8b 50 1c             	mov    0x1c(%eax),%edx
c002172d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0021730:	8b 40 1c             	mov    0x1c(%eax),%eax
c0021733:	39 c2                	cmp    %eax,%edx
c0021735:	0f 9f c0             	setg   %al
}
c0021738:	c9                   	leave  
c0021739:	c3                   	ret    

c002173a <thread_donate_priority>:

/* Used to donate priority */
void 
thread_donate_priority (const struct thread* donate_to) 
{
c002173a:	55                   	push   %ebp
c002173b:	89 e5                	mov    %esp,%ebp
c002173d:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c0021740:	e8 44 06 00 00       	call   c0021d89 <intr_disable>
c0021745:	89 45 f4             	mov    %eax,-0xc(%ebp)

  thread_update_priority (donate_to); /* donate_to thread already has a bigger clock */
c0021748:	83 ec 0c             	sub    $0xc,%esp
c002174b:	ff 75 08             	pushl  0x8(%ebp)
c002174e:	e8 b1 00 00 00       	call   c0021804 <thread_update_priority>
c0021753:	83 c4 10             	add    $0x10,%esp

  if (donate_to->status == THREAD_READY) /* let it run immediately */
c0021756:	8b 45 08             	mov    0x8(%ebp),%eax
c0021759:	8b 40 04             	mov    0x4(%eax),%eax
c002175c:	83 f8 01             	cmp    $0x1,%eax
c002175f:	75 2d                	jne    c002178e <thread_donate_priority+0x54>
  {
    list_remove (&donate_to->elem);
c0021761:	8b 45 08             	mov    0x8(%ebp),%eax
c0021764:	83 c0 28             	add    $0x28,%eax
c0021767:	83 ec 0c             	sub    $0xc,%esp
c002176a:	50                   	push   %eax
c002176b:	e8 33 94 00 00       	call   c002aba3 <list_remove>
c0021770:	83 c4 10             	add    $0x10,%esp
    list_insert_ordered (&ready_list, &donate_to->elem, thread_priority_cmp, NULL);
c0021773:	8b 45 08             	mov    0x8(%ebp),%eax
c0021776:	83 c0 28             	add    $0x28,%eax
c0021779:	6a 00                	push   $0x0
c002177b:	68 09 17 02 c0       	push   $0xc0021709
c0021780:	50                   	push   %eax
c0021781:	68 80 c1 03 c0       	push   $0xc003c180
c0021786:	e8 ba 9a 00 00       	call   c002b245 <list_insert_ordered>
c002178b:	83 c4 10             	add    $0x10,%esp
  }

  intr_set_level (old_level);
c002178e:	83 ec 0c             	sub    $0xc,%esp
c0021791:	ff 75 f4             	pushl  -0xc(%ebp)
c0021794:	e8 98 05 00 00       	call   c0021d31 <intr_set_level>
c0021799:	83 c4 10             	add    $0x10,%esp
}
c002179c:	90                   	nop
c002179d:	c9                   	leave  
c002179e:	c3                   	ret    

c002179f <thread_hold_lock>:

/* let cur_thread hold a lock */
void 
thread_hold_lock (struct lock* lock)
{
c002179f:	55                   	push   %ebp
c00217a0:	89 e5                	mov    %esp,%ebp
c00217a2:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c00217a5:	e8 df 05 00 00       	call   c0021d89 <intr_disable>
c00217aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct thread* cur_thread = thread_current();
c00217ad:	e8 f6 f6 ff ff       	call   c0020ea8 <thread_current>
c00217b2:	89 45 f0             	mov    %eax,-0x10(%ebp)

  list_insert_ordered (&cur_thread->holding_locks, &lock->lock_elem, lock_priority_cmp, NULL);
c00217b5:	8b 45 08             	mov    0x8(%ebp),%eax
c00217b8:	8d 50 18             	lea    0x18(%eax),%edx
c00217bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00217be:	83 c0 74             	add    $0x74,%eax
c00217c1:	6a 00                	push   $0x0
c00217c3:	68 dd 3a 02 c0       	push   $0xc0023add
c00217c8:	52                   	push   %edx
c00217c9:	50                   	push   %eax
c00217ca:	e8 76 9a 00 00       	call   c002b245 <list_insert_ordered>
c00217cf:	83 c4 10             	add    $0x10,%esp
  
  if (cur_thread->priority < lock->max_priority)
c00217d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00217d5:	8b 50 1c             	mov    0x1c(%eax),%edx
c00217d8:	8b 45 08             	mov    0x8(%ebp),%eax
c00217db:	8b 40 20             	mov    0x20(%eax),%eax
c00217de:	39 c2                	cmp    %eax,%edx
c00217e0:	7d 11                	jge    c00217f3 <thread_hold_lock+0x54>
  {
    cur_thread->priority = lock->max_priority;
c00217e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00217e5:	8b 50 20             	mov    0x20(%eax),%edx
c00217e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00217eb:	89 50 1c             	mov    %edx,0x1c(%eax)
    thread_yield ();
c00217ee:	e8 b0 f7 ff ff       	call   c0020fa3 <thread_yield>
  }

  intr_set_level (old_level);
c00217f3:	83 ec 0c             	sub    $0xc,%esp
c00217f6:	ff 75 f4             	pushl  -0xc(%ebp)
c00217f9:	e8 33 05 00 00       	call   c0021d31 <intr_set_level>
c00217fe:	83 c4 10             	add    $0x10,%esp
}
c0021801:	90                   	nop
c0021802:	c9                   	leave  
c0021803:	c3                   	ret    

c0021804 <thread_update_priority>:


/* update thread's priority from the holding_locks && its old_priority */
void 
thread_update_priority(struct thread* to_update)
{
c0021804:	55                   	push   %ebp
c0021805:	89 e5                	mov    %esp,%ebp
c0021807:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c002180a:	e8 7a 05 00 00       	call   c0021d89 <intr_disable>
c002180f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int to_update_priority = to_update->old_priority;
c0021812:	8b 45 08             	mov    0x8(%ebp),%eax
c0021815:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
c002181b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  if (! list_empty(&to_update->holding_locks)) 
c002181e:	8b 45 08             	mov    0x8(%ebp),%eax
c0021821:	83 c0 74             	add    $0x74,%eax
c0021824:	83 ec 0c             	sub    $0xc,%esp
c0021827:	50                   	push   %eax
c0021828:	e8 f8 94 00 00       	call   c002ad25 <list_empty>
c002182d:	83 c4 10             	add    $0x10,%esp
c0021830:	83 f0 01             	xor    $0x1,%eax
c0021833:	84 c0                	test   %al,%al
c0021835:	74 45                	je     c002187c <thread_update_priority+0x78>
  {
    list_sort(&to_update->holding_locks, lock_priority_cmp, NULL);
c0021837:	8b 45 08             	mov    0x8(%ebp),%eax
c002183a:	83 c0 74             	add    $0x74,%eax
c002183d:	83 ec 04             	sub    $0x4,%esp
c0021840:	6a 00                	push   $0x0
c0021842:	68 dd 3a 02 c0       	push   $0xc0023add
c0021847:	50                   	push   %eax
c0021848:	e8 8f 98 00 00       	call   c002b0dc <list_sort>
c002184d:	83 c4 10             	add    $0x10,%esp
    int lock_max_priority;
    lock_max_priority = list_entry (list_front (&to_update->holding_locks), 
c0021850:	8b 45 08             	mov    0x8(%ebp),%eax
c0021853:	83 c0 74             	add    $0x74,%eax
c0021856:	83 ec 0c             	sub    $0xc,%esp
c0021859:	50                   	push   %eax
c002185a:	e8 f1 93 00 00       	call   c002ac50 <list_front>
c002185f:	83 c4 10             	add    $0x10,%esp
c0021862:	83 c0 04             	add    $0x4,%eax
c0021865:	83 e8 1c             	sub    $0x1c,%eax
c0021868:	8b 40 20             	mov    0x20(%eax),%eax
c002186b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                                      struct lock, lock_elem)->max_priority;
    if (lock_max_priority > to_update_priority)
c002186e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0021871:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0021874:	7e 06                	jle    c002187c <thread_update_priority+0x78>
      to_update_priority = lock_max_priority;
c0021876:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0021879:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }
  
  if (to_update->old_priority > to_update_priority)
c002187c:	8b 45 08             	mov    0x8(%ebp),%eax
c002187f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
c0021885:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0021888:	7e 0c                	jle    c0021896 <thread_update_priority+0x92>
    to_update_priority = to_update->old_priority;
c002188a:	8b 45 08             	mov    0x8(%ebp),%eax
c002188d:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
c0021893:	89 45 f4             	mov    %eax,-0xc(%ebp)

  to_update->priority = to_update_priority;
c0021896:	8b 45 08             	mov    0x8(%ebp),%eax
c0021899:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002189c:	89 50 1c             	mov    %edx,0x1c(%eax)

  intr_set_level (old_level);
c002189f:	83 ec 0c             	sub    $0xc,%esp
c00218a2:	ff 75 f0             	pushl  -0x10(%ebp)
c00218a5:	e8 87 04 00 00       	call   c0021d31 <intr_set_level>
c00218aa:	83 c4 10             	add    $0x10,%esp
}
c00218ad:	90                   	nop
c00218ae:	c9                   	leave  
c00218af:	c3                   	ret    

c00218b0 <thread_remove_lock>:


/* remove the lock from holding_locks in cur_thread*/
void 
thread_remove_lock(struct lock* to_rm) 
{
c00218b0:	55                   	push   %ebp
c00218b1:	89 e5                	mov    %esp,%ebp
c00218b3:	83 ec 18             	sub    $0x18,%esp
  enum intr_level old_level = intr_disable ();
c00218b6:	e8 ce 04 00 00       	call   c0021d89 <intr_disable>
c00218bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

  struct thread* cur_thread = thread_current();
c00218be:	e8 e5 f5 ff ff       	call   c0020ea8 <thread_current>
c00218c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  list_remove(&to_rm->lock_elem);
c00218c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00218c9:	83 c0 18             	add    $0x18,%eax
c00218cc:	83 ec 0c             	sub    $0xc,%esp
c00218cf:	50                   	push   %eax
c00218d0:	e8 ce 92 00 00       	call   c002aba3 <list_remove>
c00218d5:	83 c4 10             	add    $0x10,%esp
  thread_update_priority(cur_thread);
c00218d8:	83 ec 0c             	sub    $0xc,%esp
c00218db:	ff 75 f0             	pushl  -0x10(%ebp)
c00218de:	e8 21 ff ff ff       	call   c0021804 <thread_update_priority>
c00218e3:	83 c4 10             	add    $0x10,%esp

  intr_set_level (old_level);
c00218e6:	83 ec 0c             	sub    $0xc,%esp
c00218e9:	ff 75 f4             	pushl  -0xc(%ebp)
c00218ec:	e8 40 04 00 00       	call   c0021d31 <intr_set_level>
c00218f1:	83 c4 10             	add    $0x10,%esp
}
c00218f4:	90                   	nop
c00218f5:	c9                   	leave  
c00218f6:	c3                   	ret    

c00218f7 <thread_update_recent_cpu_and_load_avg>:

/* update all recent_cpu and load_avg for mlfqs */
void 
thread_update_recent_cpu_and_load_avg()
{
c00218f7:	55                   	push   %ebp
c00218f8:	89 e5                	mov    %esp,%ebp
c00218fa:	53                   	push   %ebx
c00218fb:	83 ec 24             	sub    $0x24,%esp
  struct thread *cur_thread = thread_current ();
c00218fe:	e8 a5 f5 ff ff       	call   c0020ea8 <thread_current>
c0021903:	89 45 f0             	mov    %eax,-0x10(%ebp)
  /* update load_avg */
  size_t ready_threads = list_size (&ready_list);
c0021906:	83 ec 0c             	sub    $0xc,%esp
c0021909:	68 80 c1 03 c0       	push   $0xc003c180
c002190e:	e8 c5 93 00 00       	call   c002acd8 <list_size>
c0021913:	83 c4 10             	add    $0x10,%esp
c0021916:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (cur_thread != idle_thread)
c0021919:	a1 a0 c1 03 c0       	mov    0xc003c1a0,%eax
c002191e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0021921:	74 03                	je     c0021926 <thread_update_recent_cpu_and_load_avg+0x2f>
    ready_threads = ready_threads + 1;
c0021923:	ff 45 f4             	incl   -0xc(%ebp)
  int ff_ready_threads = convert_to_fixed_point (ready_threads);
c0021926:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021929:	83 ec 0c             	sub    $0xc,%esp
c002192c:	50                   	push   %eax
c002192d:	e8 ca 8a 00 00       	call   c002a3fc <convert_to_fixed_point>
c0021932:	83 c4 10             	add    $0x10,%esp
c0021935:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int ff_59_60 = ff_div_with_int (convert_to_fixed_point (59), 60);
c0021938:	83 ec 0c             	sub    $0xc,%esp
c002193b:	6a 3b                	push   $0x3b
c002193d:	e8 ba 8a 00 00       	call   c002a3fc <convert_to_fixed_point>
c0021942:	83 c4 10             	add    $0x10,%esp
c0021945:	83 ec 08             	sub    $0x8,%esp
c0021948:	6a 3c                	push   $0x3c
c002194a:	50                   	push   %eax
c002194b:	e8 ce 8b 00 00       	call   c002a51e <ff_div_with_int>
c0021950:	83 c4 10             	add    $0x10,%esp
c0021953:	89 45 e8             	mov    %eax,-0x18(%ebp)
  int ff_1_60 = ff_div_with_int (convert_to_fixed_point (1), 60);
c0021956:	83 ec 0c             	sub    $0xc,%esp
c0021959:	6a 01                	push   $0x1
c002195b:	e8 9c 8a 00 00       	call   c002a3fc <convert_to_fixed_point>
c0021960:	83 c4 10             	add    $0x10,%esp
c0021963:	83 ec 08             	sub    $0x8,%esp
c0021966:	6a 3c                	push   $0x3c
c0021968:	50                   	push   %eax
c0021969:	e8 b0 8b 00 00       	call   c002a51e <ff_div_with_int>
c002196e:	83 c4 10             	add    $0x10,%esp
c0021971:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  load_avg = ff_add (ff_mul (ff_59_60, load_avg), ff_mul (ff_1_60, ff_ready_threads));
c0021974:	83 ec 08             	sub    $0x8,%esp
c0021977:	ff 75 ec             	pushl  -0x14(%ebp)
c002197a:	ff 75 e4             	pushl  -0x1c(%ebp)
c002197d:	e8 10 8b 00 00       	call   c002a492 <ff_mul>
c0021982:	83 c4 10             	add    $0x10,%esp
c0021985:	89 c3                	mov    %eax,%ebx
c0021987:	a1 80 61 04 c0       	mov    0xc0046180,%eax
c002198c:	83 ec 08             	sub    $0x8,%esp
c002198f:	50                   	push   %eax
c0021990:	ff 75 e8             	pushl  -0x18(%ebp)
c0021993:	e8 fa 8a 00 00       	call   c002a492 <ff_mul>
c0021998:	83 c4 10             	add    $0x10,%esp
c002199b:	83 ec 08             	sub    $0x8,%esp
c002199e:	53                   	push   %ebx
c002199f:	50                   	push   %eax
c00219a0:	e8 b1 8a 00 00       	call   c002a456 <ff_add>
c00219a5:	83 c4 10             	add    $0x10,%esp
c00219a8:	a3 80 61 04 c0       	mov    %eax,0xc0046180
  /* update recent_cpu */
  thread_foreach(thread_update_recent_cpu, NULL);
c00219ad:	83 ec 08             	sub    $0x8,%esp
c00219b0:	6a 00                	push   $0x0
c00219b2:	68 c5 19 02 c0       	push   $0xc00219c5
c00219b7:	e8 6f f6 ff ff       	call   c002102b <thread_foreach>
c00219bc:	83 c4 10             	add    $0x10,%esp
}
c00219bf:	90                   	nop
c00219c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00219c3:	c9                   	leave  
c00219c4:	c3                   	ret    

c00219c5 <thread_update_recent_cpu>:

/* update recent_cpu for a single thread for mlfqs */
void
thread_update_recent_cpu(struct thread *t, void *aux)
{
c00219c5:	55                   	push   %ebp
c00219c6:	89 e5                	mov    %esp,%ebp
c00219c8:	53                   	push   %ebx
c00219c9:	83 ec 14             	sub    $0x14,%esp
  if (t == idle_thread)
c00219cc:	a1 a0 c1 03 c0       	mov    0xc003c1a0,%eax
c00219d1:	39 45 08             	cmp    %eax,0x8(%ebp)
c00219d4:	0f 84 97 00 00 00    	je     c0021a71 <thread_update_recent_cpu+0xac>
    return;
  enum intr_level old_level = intr_disable ();
c00219da:	e8 aa 03 00 00       	call   c0021d89 <intr_disable>
c00219df:	89 45 f4             	mov    %eax,-0xc(%ebp)
  int timesload_avg = ff_mul_with_int(load_avg, 2);
c00219e2:	a1 80 61 04 c0       	mov    0xc0046180,%eax
c00219e7:	83 ec 08             	sub    $0x8,%esp
c00219ea:	6a 02                	push   $0x2
c00219ec:	50                   	push   %eax
c00219ed:	e8 f5 8a 00 00       	call   c002a4e7 <ff_mul_with_int>
c00219f2:	83 c4 10             	add    $0x10,%esp
c00219f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  // int load_avg_res = ff_div(ff_mul_with_int(load_avg, 2), ff_add_with_int(ff_mul_with_int(load_avg, 2), 1));
  int load_avg_res = ff_div(timesload_avg, ff_add_with_int(timesload_avg, 1));
c00219f8:	83 ec 08             	sub    $0x8,%esp
c00219fb:	6a 01                	push   $0x1
c00219fd:	ff 75 f0             	pushl  -0x10(%ebp)
c0021a00:	e8 69 8a 00 00       	call   c002a46e <ff_add_with_int>
c0021a05:	83 c4 10             	add    $0x10,%esp
c0021a08:	83 ec 08             	sub    $0x8,%esp
c0021a0b:	50                   	push   %eax
c0021a0c:	ff 75 f0             	pushl  -0x10(%ebp)
c0021a0f:	e8 df 8a 00 00       	call   c002a4f3 <ff_div>
c0021a14:	83 c4 10             	add    $0x10,%esp
c0021a17:	89 45 ec             	mov    %eax,-0x14(%ebp)
  t->recent_cpu = ff_add_with_int(ff_mul(load_avg_res, t->recent_cpu), t->nice_val);
c0021a1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0021a1d:	8b 98 8c 00 00 00    	mov    0x8c(%eax),%ebx
c0021a23:	8b 45 08             	mov    0x8(%ebp),%eax
c0021a26:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0021a2c:	83 ec 08             	sub    $0x8,%esp
c0021a2f:	50                   	push   %eax
c0021a30:	ff 75 ec             	pushl  -0x14(%ebp)
c0021a33:	e8 5a 8a 00 00       	call   c002a492 <ff_mul>
c0021a38:	83 c4 10             	add    $0x10,%esp
c0021a3b:	83 ec 08             	sub    $0x8,%esp
c0021a3e:	53                   	push   %ebx
c0021a3f:	50                   	push   %eax
c0021a40:	e8 29 8a 00 00       	call   c002a46e <ff_add_with_int>
c0021a45:	83 c4 10             	add    $0x10,%esp
c0021a48:	89 c2                	mov    %eax,%edx
c0021a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0021a4d:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
  thread_update_priority_mlfqs(t);
c0021a53:	83 ec 0c             	sub    $0xc,%esp
c0021a56:	ff 75 08             	pushl  0x8(%ebp)
c0021a59:	e8 58 00 00 00       	call   c0021ab6 <thread_update_priority_mlfqs>
c0021a5e:	83 c4 10             	add    $0x10,%esp
  intr_set_level (old_level);
c0021a61:	83 ec 0c             	sub    $0xc,%esp
c0021a64:	ff 75 f4             	pushl  -0xc(%ebp)
c0021a67:	e8 c5 02 00 00       	call   c0021d31 <intr_set_level>
c0021a6c:	83 c4 10             	add    $0x10,%esp
c0021a6f:	eb 01                	jmp    c0021a72 <thread_update_recent_cpu+0xad>
    return;
c0021a71:	90                   	nop
}
c0021a72:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0021a75:	c9                   	leave  
c0021a76:	c3                   	ret    

c0021a77 <thread_update_recent_cpu_one>:

/* update recent_cpu for mlfqs */
void 
thread_update_recent_cpu_one()
{
c0021a77:	55                   	push   %ebp
c0021a78:	89 e5                	mov    %esp,%ebp
c0021a7a:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur_thread = thread_current ();
c0021a7d:	e8 26 f4 ff ff       	call   c0020ea8 <thread_current>
c0021a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (cur_thread == idle_thread)
c0021a85:	a1 a0 c1 03 c0       	mov    0xc003c1a0,%eax
c0021a8a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0021a8d:	74 24                	je     c0021ab3 <thread_update_recent_cpu_one+0x3c>
    return;
  cur_thread->recent_cpu = ff_add_with_int (cur_thread->recent_cpu, 1);
c0021a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021a92:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0021a98:	83 ec 08             	sub    $0x8,%esp
c0021a9b:	6a 01                	push   $0x1
c0021a9d:	50                   	push   %eax
c0021a9e:	e8 cb 89 00 00       	call   c002a46e <ff_add_with_int>
c0021aa3:	83 c4 10             	add    $0x10,%esp
c0021aa6:	89 c2                	mov    %eax,%edx
c0021aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021aab:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
c0021ab1:	eb 01                	jmp    c0021ab4 <thread_update_recent_cpu_one+0x3d>
    return;
c0021ab3:	90                   	nop
}
c0021ab4:	c9                   	leave  
c0021ab5:	c3                   	ret    

c0021ab6 <thread_update_priority_mlfqs>:

/* update priority in mlfqs */
void 
thread_update_priority_mlfqs(struct thread* to_update)
{
c0021ab6:	55                   	push   %ebp
c0021ab7:	89 e5                	mov    %esp,%ebp
c0021ab9:	83 ec 18             	sub    $0x18,%esp
  if (to_update == idle_thread)
c0021abc:	a1 a0 c1 03 c0       	mov    0xc003c1a0,%eax
c0021ac1:	39 45 08             	cmp    %eax,0x8(%ebp)
c0021ac4:	0f 84 98 00 00 00    	je     c0021b62 <thread_update_priority_mlfqs+0xac>
    return;
  int tmp_priority;
  tmp_priority = ff_div_with_int(to_update->recent_cpu, 4);
c0021aca:	8b 45 08             	mov    0x8(%ebp),%eax
c0021acd:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0021ad3:	83 ec 08             	sub    $0x8,%esp
c0021ad6:	6a 04                	push   $0x4
c0021ad8:	50                   	push   %eax
c0021ad9:	e8 40 8a 00 00       	call   c002a51e <ff_div_with_int>
c0021ade:	83 c4 10             	add    $0x10,%esp
c0021ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  tmp_priority = ff_sub(convert_to_fixed_point(PRI_MAX), tmp_priority);
c0021ae4:	83 ec 0c             	sub    $0xc,%esp
c0021ae7:	6a 3f                	push   $0x3f
c0021ae9:	e8 0e 89 00 00       	call   c002a3fc <convert_to_fixed_point>
c0021aee:	83 c4 10             	add    $0x10,%esp
c0021af1:	83 ec 08             	sub    $0x8,%esp
c0021af4:	ff 75 f4             	pushl  -0xc(%ebp)
c0021af7:	50                   	push   %eax
c0021af8:	e8 66 89 00 00       	call   c002a463 <ff_sub>
c0021afd:	83 c4 10             	add    $0x10,%esp
c0021b00:	89 45 f4             	mov    %eax,-0xc(%ebp)
  // tmp_priority = ff_sub(tmp_priority, ff_mul_with_int(to_update->nice_val, 2));
  tmp_priority = ff_sub(tmp_priority, convert_to_fixed_point(to_update->nice_val * 2));
c0021b03:	8b 45 08             	mov    0x8(%ebp),%eax
c0021b06:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
c0021b0c:	01 c0                	add    %eax,%eax
c0021b0e:	83 ec 0c             	sub    $0xc,%esp
c0021b11:	50                   	push   %eax
c0021b12:	e8 e5 88 00 00       	call   c002a3fc <convert_to_fixed_point>
c0021b17:	83 c4 10             	add    $0x10,%esp
c0021b1a:	83 ec 08             	sub    $0x8,%esp
c0021b1d:	50                   	push   %eax
c0021b1e:	ff 75 f4             	pushl  -0xc(%ebp)
c0021b21:	e8 3d 89 00 00       	call   c002a463 <ff_sub>
c0021b26:	83 c4 10             	add    $0x10,%esp
c0021b29:	89 45 f4             	mov    %eax,-0xc(%ebp)
  tmp_priority = convert_to_int_round(tmp_priority);
c0021b2c:	83 ec 0c             	sub    $0xc,%esp
c0021b2f:	ff 75 f4             	pushl  -0xc(%ebp)
c0021b32:	e8 e6 88 00 00       	call   c002a41d <convert_to_int_round>
c0021b37:	83 c4 10             	add    $0x10,%esp
c0021b3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (tmp_priority < PRI_MIN)
c0021b3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0021b41:	79 07                	jns    c0021b4a <thread_update_priority_mlfqs+0x94>
    tmp_priority = PRI_MIN;
c0021b43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  if (tmp_priority > PRI_MAX)
c0021b4a:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
c0021b4e:	7e 07                	jle    c0021b57 <thread_update_priority_mlfqs+0xa1>
    tmp_priority = PRI_MAX;
c0021b50:	c7 45 f4 3f 00 00 00 	movl   $0x3f,-0xc(%ebp)
  to_update->priority = tmp_priority;
c0021b57:	8b 45 08             	mov    0x8(%ebp),%eax
c0021b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0021b5d:	89 50 1c             	mov    %edx,0x1c(%eax)
c0021b60:	eb 01                	jmp    c0021b63 <thread_update_priority_mlfqs+0xad>
    return;
c0021b62:	90                   	nop
}
c0021b63:	c9                   	leave  
c0021b64:	c3                   	ret    

c0021b65 <get_child_thread>:

#ifdef USERPROG
/* get specific child thread*/
struct process_control_block* 
get_child_thread(struct thread* cur, tid_t child_id)
{
c0021b65:	55                   	push   %ebp
c0021b66:	89 e5                	mov    %esp,%ebp
c0021b68:	83 ec 18             	sub    $0x18,%esp
  struct list* child_threads = &(cur->child_threads);
c0021b6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0021b6e:	83 c0 34             	add    $0x34,%eax
c0021b71:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct list_elem *itr = NULL, *next = NULL;
c0021b74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021b7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  // printf("[DEBUG] %s, getChild start, asking %d\n", cur->name, child_id);  
  if (!list_empty(child_threads)) {
c0021b82:	83 ec 0c             	sub    $0xc,%esp
c0021b85:	ff 75 f0             	pushl  -0x10(%ebp)
c0021b88:	e8 98 91 00 00       	call   c002ad25 <list_empty>
c0021b8d:	83 c4 10             	add    $0x10,%esp
c0021b90:	83 f0 01             	xor    $0x1,%eax
c0021b93:	84 c0                	test   %al,%al
c0021b95:	74 58                	je     c0021bef <get_child_thread+0x8a>
    for ( itr = list_front(child_threads); 
c0021b97:	83 ec 0c             	sub    $0xc,%esp
c0021b9a:	ff 75 f0             	pushl  -0x10(%ebp)
c0021b9d:	e8 ae 90 00 00       	call   c002ac50 <list_front>
c0021ba2:	83 c4 10             	add    $0x10,%esp
c0021ba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0021ba8:	eb 32                	jmp    c0021bdc <get_child_thread+0x77>
          itr != list_end(child_threads); 
          itr = next) {
      next = list_next(itr);
c0021baa:	83 ec 0c             	sub    $0xc,%esp
c0021bad:	ff 75 f4             	pushl  -0xc(%ebp)
c0021bb0:	e8 6f 8c 00 00       	call   c002a824 <list_next>
c0021bb5:	83 c4 10             	add    $0x10,%esp
c0021bb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
      struct process_control_block *child_thread = list_entry(itr, struct process_control_block, child_elem);
c0021bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021bbe:	83 c0 04             	add    $0x4,%eax
c0021bc1:	83 e8 40             	sub    $0x40,%eax
c0021bc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (child_thread->tid == child_id) {
c0021bc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0021bca:	8b 00                	mov    (%eax),%eax
c0021bcc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0021bcf:	75 05                	jne    c0021bd6 <get_child_thread+0x71>
        return child_thread;
c0021bd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0021bd4:	eb 1e                	jmp    c0021bf4 <get_child_thread+0x8f>
          itr = next) {
c0021bd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0021bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
          itr != list_end(child_threads); 
c0021bdc:	83 ec 0c             	sub    $0xc,%esp
c0021bdf:	ff 75 f0             	pushl  -0x10(%ebp)
c0021be2:	e8 87 8c 00 00       	call   c002a86e <list_end>
c0021be7:	83 c4 10             	add    $0x10,%esp
    for ( itr = list_front(child_threads); 
c0021bea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0021bed:	75 bb                	jne    c0021baa <get_child_thread+0x45>
      }
    }
  }
  // printf("[DEBUG] %s, getChild end\n", cur->name);
  return NULL;
c0021bef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0021bf4:	c9                   	leave  
c0021bf5:	c3                   	ret    

c0021bf6 <traverseChild>:


/*********************************************/
void traverseChild(struct thread* cur) {
c0021bf6:	55                   	push   %ebp
c0021bf7:	89 e5                	mov    %esp,%ebp
c0021bf9:	83 ec 18             	sub    $0x18,%esp
  struct list* child_threads = &(cur->child_threads);
c0021bfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0021bff:	83 c0 34             	add    $0x34,%eax
c0021c02:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct list_elem *itr = NULL, *next = NULL;
c0021c05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021c0c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  printf("[DEBUG] %s traverseChild start\n", cur->name); 
c0021c13:	8b 45 08             	mov    0x8(%ebp),%eax
c0021c16:	83 c0 08             	add    $0x8,%eax
c0021c19:	83 ec 08             	sub    $0x8,%esp
c0021c1c:	50                   	push   %eax
c0021c1d:	68 f4 2c 03 c0       	push   $0xc0032cf4
c0021c22:	e8 a2 63 00 00       	call   c0027fc9 <printf>
c0021c27:	83 c4 10             	add    $0x10,%esp
  // lock_acquire(&cur->child_thread_lock); 
  if (!list_empty(child_threads)) {
c0021c2a:	83 ec 0c             	sub    $0xc,%esp
c0021c2d:	ff 75 f0             	pushl  -0x10(%ebp)
c0021c30:	e8 f0 90 00 00       	call   c002ad25 <list_empty>
c0021c35:	83 c4 10             	add    $0x10,%esp
c0021c38:	83 f0 01             	xor    $0x1,%eax
c0021c3b:	84 c0                	test   %al,%al
c0021c3d:	74 72                	je     c0021cb1 <traverseChild+0xbb>
    for (itr = list_front(child_threads); 
c0021c3f:	83 ec 0c             	sub    $0xc,%esp
c0021c42:	ff 75 f0             	pushl  -0x10(%ebp)
c0021c45:	e8 06 90 00 00       	call   c002ac50 <list_front>
c0021c4a:	83 c4 10             	add    $0x10,%esp
c0021c4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0021c50:	eb 4c                	jmp    c0021c9e <traverseChild+0xa8>
          itr != list_end(child_threads); 
          itr = next) {
      next = list_next(itr);
c0021c52:	83 ec 0c             	sub    $0xc,%esp
c0021c55:	ff 75 f4             	pushl  -0xc(%ebp)
c0021c58:	e8 c7 8b 00 00       	call   c002a824 <list_next>
c0021c5d:	83 c4 10             	add    $0x10,%esp
c0021c60:	89 45 ec             	mov    %eax,-0x14(%ebp)
      printf("[DEBUG] next list_elem %d\n", next);
c0021c63:	83 ec 08             	sub    $0x8,%esp
c0021c66:	ff 75 ec             	pushl  -0x14(%ebp)
c0021c69:	68 14 2d 03 c0       	push   $0xc0032d14
c0021c6e:	e8 56 63 00 00       	call   c0027fc9 <printf>
c0021c73:	83 c4 10             	add    $0x10,%esp
      struct process_control_block *child_thread = list_entry(itr, struct process_control_block, child_elem);
c0021c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021c79:	83 c0 04             	add    $0x4,%eax
c0021c7c:	83 e8 40             	sub    $0x40,%eax
c0021c7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
      printf("[DEBUG] %d\n", child_thread->tid);
c0021c82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0021c85:	8b 00                	mov    (%eax),%eax
c0021c87:	83 ec 08             	sub    $0x8,%esp
c0021c8a:	50                   	push   %eax
c0021c8b:	68 2f 2d 03 c0       	push   $0xc0032d2f
c0021c90:	e8 34 63 00 00       	call   c0027fc9 <printf>
c0021c95:	83 c4 10             	add    $0x10,%esp
          itr = next) {
c0021c98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0021c9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
          itr != list_end(child_threads); 
c0021c9e:	83 ec 0c             	sub    $0xc,%esp
c0021ca1:	ff 75 f0             	pushl  -0x10(%ebp)
c0021ca4:	e8 c5 8b 00 00       	call   c002a86e <list_end>
c0021ca9:	83 c4 10             	add    $0x10,%esp
    for (itr = list_front(child_threads); 
c0021cac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0021caf:	75 a1                	jne    c0021c52 <traverseChild+0x5c>
    }
  }
  printf("[DEBUG] %s traverseChild end\n", cur->name);  
c0021cb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0021cb4:	83 c0 08             	add    $0x8,%eax
c0021cb7:	83 ec 08             	sub    $0x8,%esp
c0021cba:	50                   	push   %eax
c0021cbb:	68 3b 2d 03 c0       	push   $0xc0032d3b
c0021cc0:	e8 04 63 00 00       	call   c0027fc9 <printf>
c0021cc5:	83 c4 10             	add    $0x10,%esp
  // lock_release(&cur->child_thread_lock); 
}
c0021cc8:	90                   	nop
c0021cc9:	c9                   	leave  
c0021cca:	c3                   	ret    

c0021ccb <switch_threads>:
	# but requires us to preserve %ebx, %ebp, %esi, %edi.  See
	# [SysV-ABI-386] pages 3-11 and 3-12 for details.
	#
	# This stack frame must match the one set up by thread_create()
	# in size.
	pushl %ebx
c0021ccb:	53                   	push   %ebx
	pushl %ebp
c0021ccc:	55                   	push   %ebp
	pushl %esi
c0021ccd:	56                   	push   %esi
	pushl %edi
c0021cce:	57                   	push   %edi

	# Get offsetof (struct thread, stack).
.globl thread_stack_ofs
	mov thread_stack_ofs, %edx
c0021ccf:	8b 15 a4 b7 03 c0    	mov    0xc003b7a4,%edx

	# Save current stack pointer to old thread's stack, if any.
	movl SWITCH_CUR(%esp), %eax
c0021cd5:	8b 44 24 14          	mov    0x14(%esp),%eax
	movl %esp, (%eax,%edx,1)
c0021cd9:	89 24 10             	mov    %esp,(%eax,%edx,1)

	# Restore stack pointer from new thread's stack.
	movl SWITCH_NEXT(%esp), %ecx
c0021cdc:	8b 4c 24 18          	mov    0x18(%esp),%ecx
	movl (%ecx,%edx,1), %esp
c0021ce0:	8b 24 11             	mov    (%ecx,%edx,1),%esp

	# Restore caller's register state.
	popl %edi
c0021ce3:	5f                   	pop    %edi
	popl %esi
c0021ce4:	5e                   	pop    %esi
	popl %ebp
c0021ce5:	5d                   	pop    %ebp
	popl %ebx
c0021ce6:	5b                   	pop    %ebx
        ret
c0021ce7:	c3                   	ret    

c0021ce8 <switch_entry>:

.globl switch_entry
.func switch_entry
switch_entry:
	# Discard switch_threads() arguments.
	addl $8, %esp
c0021ce8:	83 c4 08             	add    $0x8,%esp

	# Call thread_schedule_tail(prev).
	pushl %eax
c0021ceb:	50                   	push   %eax
.globl thread_schedule_tail
	call thread_schedule_tail
c0021cec:	e8 0d f8 ff ff       	call   c00214fe <thread_schedule_tail>
	addl $4, %esp
c0021cf1:	83 c4 04             	add    $0x4,%esp

	# Start thread proper.
	ret
c0021cf4:	c3                   	ret    

c0021cf5 <outb>:
c0021cf5:	55                   	push   %ebp
c0021cf6:	89 e5                	mov    %esp,%ebp
c0021cf8:	83 ec 08             	sub    $0x8,%esp
c0021cfb:	8b 55 08             	mov    0x8(%ebp),%edx
c0021cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0021d01:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0021d05:	88 45 f8             	mov    %al,-0x8(%ebp)
c0021d08:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0021d0c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0021d10:	ee                   	out    %al,(%dx)
c0021d11:	90                   	nop
c0021d12:	c9                   	leave  
c0021d13:	c3                   	ret    

c0021d14 <intr_get_level>:
c0021d14:	55                   	push   %ebp
c0021d15:	89 e5                	mov    %esp,%ebp
c0021d17:	83 ec 10             	sub    $0x10,%esp
c0021d1a:	9c                   	pushf  
c0021d1b:	58                   	pop    %eax
c0021d1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0021d1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0021d22:	25 00 02 00 00       	and    $0x200,%eax
c0021d27:	85 c0                	test   %eax,%eax
c0021d29:	0f 95 c0             	setne  %al
c0021d2c:	0f b6 c0             	movzbl %al,%eax
c0021d2f:	c9                   	leave  
c0021d30:	c3                   	ret    

c0021d31 <intr_set_level>:
c0021d31:	55                   	push   %ebp
c0021d32:	89 e5                	mov    %esp,%ebp
c0021d34:	83 ec 08             	sub    $0x8,%esp
c0021d37:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0021d3b:	75 07                	jne    c0021d44 <intr_set_level+0x13>
c0021d3d:	e8 09 00 00 00       	call   c0021d4b <intr_enable>
c0021d42:	eb 05                	jmp    c0021d49 <intr_set_level+0x18>
c0021d44:	e8 40 00 00 00       	call   c0021d89 <intr_disable>
c0021d49:	c9                   	leave  
c0021d4a:	c3                   	ret    

c0021d4b <intr_enable>:
c0021d4b:	55                   	push   %ebp
c0021d4c:	89 e5                	mov    %esp,%ebp
c0021d4e:	83 ec 18             	sub    $0x18,%esp
c0021d51:	e8 be ff ff ff       	call   c0021d14 <intr_get_level>
c0021d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0021d59:	e8 fa 02 00 00       	call   c0022058 <intr_context>
c0021d5e:	83 f0 01             	xor    $0x1,%eax
c0021d61:	84 c0                	test   %al,%al
c0021d63:	75 1e                	jne    c0021d83 <intr_enable+0x38>
c0021d65:	83 ec 0c             	sub    $0xc,%esp
c0021d68:	68 20 2e 03 c0       	push   $0xc0032e20
c0021d6d:	68 31 2e 03 c0       	push   $0xc0032e31
c0021d72:	68 30 32 03 c0       	push   $0xc0033230
c0021d77:	6a 5b                	push   $0x5b
c0021d79:	68 48 2e 03 c0       	push   $0xc0032e48
c0021d7e:	e8 a7 87 00 00       	call   c002a52a <debug_panic>
c0021d83:	fb                   	sti    
c0021d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021d87:	c9                   	leave  
c0021d88:	c3                   	ret    

c0021d89 <intr_disable>:
c0021d89:	55                   	push   %ebp
c0021d8a:	89 e5                	mov    %esp,%ebp
c0021d8c:	83 ec 10             	sub    $0x10,%esp
c0021d8f:	e8 80 ff ff ff       	call   c0021d14 <intr_get_level>
c0021d94:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0021d97:	fa                   	cli    
c0021d98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0021d9b:	c9                   	leave  
c0021d9c:	c3                   	ret    

c0021d9d <intr_init>:
c0021d9d:	55                   	push   %ebp
c0021d9e:	89 e5                	mov    %esp,%ebp
c0021da0:	83 ec 18             	sub    $0x18,%esp
c0021da3:	e8 f6 02 00 00       	call   c002209e <pic_init>
c0021da8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021daf:	eb 2d                	jmp    c0021dde <intr_init+0x41>
c0021db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021db4:	8b 04 85 ac b7 03 c0 	mov    -0x3ffc4854(,%eax,4),%eax
c0021dbb:	83 ec 08             	sub    $0x8,%esp
c0021dbe:	6a 00                	push   $0x0
c0021dc0:	50                   	push   %eax
c0021dc1:	e8 d1 04 00 00       	call   c0022297 <make_intr_gate>
c0021dc6:	83 c4 10             	add    $0x10,%esp
c0021dc9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0021dcc:	89 04 cd 20 c2 03 c0 	mov    %eax,-0x3ffc3de0(,%ecx,8)
c0021dd3:	89 14 cd 24 c2 03 c0 	mov    %edx,-0x3ffc3ddc(,%ecx,8)
c0021dda:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0021dde:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
c0021de5:	7e ca                	jle    c0021db1 <intr_init+0x14>
c0021de7:	83 ec 08             	sub    $0x8,%esp
c0021dea:	68 20 c2 03 c0       	push   $0xc003c220
c0021def:	68 ff 07 00 00       	push   $0x7ff
c0021df4:	e8 d4 04 00 00       	call   c00222cd <make_idtr_operand>
c0021df9:	83 c4 10             	add    $0x10,%esp
c0021dfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0021dff:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0021e02:	0f 01 5d e8          	lidtl  -0x18(%ebp)
c0021e06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0021e0d:	eb 12                	jmp    c0021e21 <intr_init+0x84>
c0021e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0021e12:	c7 04 85 20 ce 03 c0 	movl   $0xc0032e62,-0x3ffc31e0(,%eax,4)
c0021e19:	62 2e 03 c0 
c0021e1d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0021e21:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
c0021e28:	7e e5                	jle    c0021e0f <intr_init+0x72>
c0021e2a:	c7 05 20 ce 03 c0 6a 	movl   $0xc0032e6a,0xc003ce20
c0021e31:	2e 03 c0 
c0021e34:	c7 05 24 ce 03 c0 7b 	movl   $0xc0032e7b,0xc003ce24
c0021e3b:	2e 03 c0 
c0021e3e:	c7 05 28 ce 03 c0 8f 	movl   $0xc0032e8f,0xc003ce28
c0021e45:	2e 03 c0 
c0021e48:	c7 05 2c ce 03 c0 9d 	movl   $0xc0032e9d,0xc003ce2c
c0021e4f:	2e 03 c0 
c0021e52:	c7 05 30 ce 03 c0 b6 	movl   $0xc0032eb6,0xc003ce30
c0021e59:	2e 03 c0 
c0021e5c:	c7 05 34 ce 03 c0 d0 	movl   $0xc0032ed0,0xc003ce34
c0021e63:	2e 03 c0 
c0021e66:	c7 05 38 ce 03 c0 f3 	movl   $0xc0032ef3,0xc003ce38
c0021e6d:	2e 03 c0 
c0021e70:	c7 05 3c ce 03 c0 10 	movl   $0xc0032f10,0xc003ce3c
c0021e77:	2f 03 c0 
c0021e7a:	c7 05 40 ce 03 c0 33 	movl   $0xc0032f33,0xc003ce40
c0021e81:	2f 03 c0 
c0021e84:	c7 05 44 ce 03 c0 4e 	movl   $0xc0032f4e,0xc003ce44
c0021e8b:	2f 03 c0 
c0021e8e:	c7 05 48 ce 03 c0 6a 	movl   $0xc0032f6a,0xc003ce48
c0021e95:	2f 03 c0 
c0021e98:	c7 05 4c ce 03 c0 84 	movl   $0xc0032f84,0xc003ce4c
c0021e9f:	2f 03 c0 
c0021ea2:	c7 05 50 ce 03 c0 9c 	movl   $0xc0032f9c,0xc003ce50
c0021ea9:	2f 03 c0 
c0021eac:	c7 05 54 ce 03 c0 b8 	movl   $0xc0032fb8,0xc003ce54
c0021eb3:	2f 03 c0 
c0021eb6:	c7 05 58 ce 03 c0 d9 	movl   $0xc0032fd9,0xc003ce58
c0021ebd:	2f 03 c0 
c0021ec0:	c7 05 60 ce 03 c0 f4 	movl   $0xc0032ff4,0xc003ce60
c0021ec7:	2f 03 c0 
c0021eca:	c7 05 64 ce 03 c0 15 	movl   $0xc0033015,0xc003ce64
c0021ed1:	30 03 c0 
c0021ed4:	c7 05 68 ce 03 c0 33 	movl   $0xc0033033,0xc003ce68
c0021edb:	30 03 c0 
c0021ede:	c7 05 6c ce 03 c0 50 	movl   $0xc0033050,0xc003ce6c
c0021ee5:	30 03 c0 
c0021ee8:	90                   	nop
c0021ee9:	c9                   	leave  
c0021eea:	c3                   	ret    

c0021eeb <register_handler>:
c0021eeb:	55                   	push   %ebp
c0021eec:	89 e5                	mov    %esp,%ebp
c0021eee:	53                   	push   %ebx
c0021eef:	83 ec 14             	sub    $0x14,%esp
c0021ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0021ef5:	88 45 f4             	mov    %al,-0xc(%ebp)
c0021ef8:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021efc:	8b 04 85 20 ca 03 c0 	mov    -0x3ffc35e0(,%eax,4),%eax
c0021f03:	85 c0                	test   %eax,%eax
c0021f05:	74 21                	je     c0021f28 <register_handler+0x3d>
c0021f07:	83 ec 0c             	sub    $0xc,%esp
c0021f0a:	68 72 30 03 c0       	push   $0xc0033072
c0021f0f:	68 31 2e 03 c0       	push   $0xc0032e31
c0021f14:	68 3c 32 03 c0       	push   $0xc003323c
c0021f19:	68 a8 00 00 00       	push   $0xa8
c0021f1e:	68 48 2e 03 c0       	push   $0xc0032e48
c0021f23:	e8 02 86 00 00       	call   c002a52a <debug_panic>
c0021f28:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c0021f2c:	75 2e                	jne    c0021f5c <register_handler+0x71>
c0021f2e:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
c0021f32:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021f36:	8b 04 85 ac b7 03 c0 	mov    -0x3ffc4854(,%eax,4),%eax
c0021f3d:	83 ec 08             	sub    $0x8,%esp
c0021f40:	ff 75 0c             	pushl  0xc(%ebp)
c0021f43:	50                   	push   %eax
c0021f44:	e8 69 03 00 00       	call   c00222b2 <make_trap_gate>
c0021f49:	83 c4 10             	add    $0x10,%esp
c0021f4c:	89 04 dd 20 c2 03 c0 	mov    %eax,-0x3ffc3de0(,%ebx,8)
c0021f53:	89 14 dd 24 c2 03 c0 	mov    %edx,-0x3ffc3ddc(,%ebx,8)
c0021f5a:	eb 2c                	jmp    c0021f88 <register_handler+0x9d>
c0021f5c:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
c0021f60:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021f64:	8b 04 85 ac b7 03 c0 	mov    -0x3ffc4854(,%eax,4),%eax
c0021f6b:	83 ec 08             	sub    $0x8,%esp
c0021f6e:	ff 75 0c             	pushl  0xc(%ebp)
c0021f71:	50                   	push   %eax
c0021f72:	e8 20 03 00 00       	call   c0022297 <make_intr_gate>
c0021f77:	83 c4 10             	add    $0x10,%esp
c0021f7a:	89 04 dd 20 c2 03 c0 	mov    %eax,-0x3ffc3de0(,%ebx,8)
c0021f81:	89 14 dd 24 c2 03 c0 	mov    %edx,-0x3ffc3ddc(,%ebx,8)
c0021f88:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021f8c:	8b 55 14             	mov    0x14(%ebp),%edx
c0021f8f:	89 14 85 20 ca 03 c0 	mov    %edx,-0x3ffc35e0(,%eax,4)
c0021f96:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021f9a:	8b 55 18             	mov    0x18(%ebp),%edx
c0021f9d:	89 14 85 20 ce 03 c0 	mov    %edx,-0x3ffc31e0(,%eax,4)
c0021fa4:	90                   	nop
c0021fa5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0021fa8:	c9                   	leave  
c0021fa9:	c3                   	ret    

c0021faa <intr_register_ext>:
c0021faa:	55                   	push   %ebp
c0021fab:	89 e5                	mov    %esp,%ebp
c0021fad:	83 ec 18             	sub    $0x18,%esp
c0021fb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0021fb3:	88 45 f4             	mov    %al,-0xc(%ebp)
c0021fb6:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
c0021fba:	76 06                	jbe    c0021fc2 <intr_register_ext+0x18>
c0021fbc:	80 7d f4 2f          	cmpb   $0x2f,-0xc(%ebp)
c0021fc0:	76 21                	jbe    c0021fe3 <intr_register_ext+0x39>
c0021fc2:	83 ec 0c             	sub    $0xc,%esp
c0021fc5:	68 90 30 03 c0       	push   $0xc0033090
c0021fca:	68 31 2e 03 c0       	push   $0xc0032e31
c0021fcf:	68 50 32 03 c0       	push   $0xc0033250
c0021fd4:	68 b8 00 00 00       	push   $0xb8
c0021fd9:	68 48 2e 03 c0       	push   $0xc0032e48
c0021fde:	e8 47 85 00 00       	call   c002a52a <debug_panic>
c0021fe3:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0021fe7:	83 ec 0c             	sub    $0xc,%esp
c0021fea:	ff 75 10             	pushl  0x10(%ebp)
c0021fed:	ff 75 0c             	pushl  0xc(%ebp)
c0021ff0:	6a 00                	push   $0x0
c0021ff2:	6a 00                	push   $0x0
c0021ff4:	50                   	push   %eax
c0021ff5:	e8 f1 fe ff ff       	call   c0021eeb <register_handler>
c0021ffa:	83 c4 20             	add    $0x20,%esp
c0021ffd:	90                   	nop
c0021ffe:	c9                   	leave  
c0021fff:	c3                   	ret    

c0022000 <intr_register_int>:
c0022000:	55                   	push   %ebp
c0022001:	89 e5                	mov    %esp,%ebp
c0022003:	83 ec 18             	sub    $0x18,%esp
c0022006:	8b 45 08             	mov    0x8(%ebp),%eax
c0022009:	88 45 f4             	mov    %al,-0xc(%ebp)
c002200c:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
c0022010:	76 27                	jbe    c0022039 <intr_register_int+0x39>
c0022012:	80 7d f4 2f          	cmpb   $0x2f,-0xc(%ebp)
c0022016:	77 21                	ja     c0022039 <intr_register_int+0x39>
c0022018:	83 ec 0c             	sub    $0xc,%esp
c002201b:	68 b4 30 03 c0       	push   $0xc00330b4
c0022020:	68 31 2e 03 c0       	push   $0xc0032e31
c0022025:	68 64 32 03 c0       	push   $0xc0033264
c002202a:	68 cd 00 00 00       	push   $0xcd
c002202f:	68 48 2e 03 c0       	push   $0xc0032e48
c0022034:	e8 f1 84 00 00       	call   c002a52a <debug_panic>
c0022039:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002203d:	83 ec 0c             	sub    $0xc,%esp
c0022040:	ff 75 18             	pushl  0x18(%ebp)
c0022043:	ff 75 14             	pushl  0x14(%ebp)
c0022046:	ff 75 10             	pushl  0x10(%ebp)
c0022049:	ff 75 0c             	pushl  0xc(%ebp)
c002204c:	50                   	push   %eax
c002204d:	e8 99 fe ff ff       	call   c0021eeb <register_handler>
c0022052:	83 c4 20             	add    $0x20,%esp
c0022055:	90                   	nop
c0022056:	c9                   	leave  
c0022057:	c3                   	ret    

c0022058 <intr_context>:
c0022058:	55                   	push   %ebp
c0022059:	89 e5                	mov    %esp,%ebp
c002205b:	0f b6 05 20 d6 03 c0 	movzbl 0xc003d620,%eax
c0022062:	5d                   	pop    %ebp
c0022063:	c3                   	ret    

c0022064 <intr_yield_on_return>:
c0022064:	55                   	push   %ebp
c0022065:	89 e5                	mov    %esp,%ebp
c0022067:	83 ec 08             	sub    $0x8,%esp
c002206a:	e8 e9 ff ff ff       	call   c0022058 <intr_context>
c002206f:	84 c0                	test   %al,%al
c0022071:	75 21                	jne    c0022094 <intr_yield_on_return+0x30>
c0022073:	83 ec 0c             	sub    $0xc,%esp
c0022076:	68 d3 30 03 c0       	push   $0xc00330d3
c002207b:	68 31 2e 03 c0       	push   $0xc0032e31
c0022080:	68 78 32 03 c0       	push   $0xc0033278
c0022085:	68 e0 00 00 00       	push   $0xe0
c002208a:	68 48 2e 03 c0       	push   $0xc0032e48
c002208f:	e8 96 84 00 00       	call   c002a52a <debug_panic>
c0022094:	c6 05 21 d6 03 c0 01 	movb   $0x1,0xc003d621
c002209b:	90                   	nop
c002209c:	c9                   	leave  
c002209d:	c3                   	ret    

c002209e <pic_init>:
c002209e:	55                   	push   %ebp
c002209f:	89 e5                	mov    %esp,%ebp
c00220a1:	68 ff 00 00 00       	push   $0xff
c00220a6:	6a 21                	push   $0x21
c00220a8:	e8 48 fc ff ff       	call   c0021cf5 <outb>
c00220ad:	83 c4 08             	add    $0x8,%esp
c00220b0:	68 ff 00 00 00       	push   $0xff
c00220b5:	68 a1 00 00 00       	push   $0xa1
c00220ba:	e8 36 fc ff ff       	call   c0021cf5 <outb>
c00220bf:	83 c4 08             	add    $0x8,%esp
c00220c2:	6a 11                	push   $0x11
c00220c4:	6a 20                	push   $0x20
c00220c6:	e8 2a fc ff ff       	call   c0021cf5 <outb>
c00220cb:	83 c4 08             	add    $0x8,%esp
c00220ce:	6a 20                	push   $0x20
c00220d0:	6a 21                	push   $0x21
c00220d2:	e8 1e fc ff ff       	call   c0021cf5 <outb>
c00220d7:	83 c4 08             	add    $0x8,%esp
c00220da:	6a 04                	push   $0x4
c00220dc:	6a 21                	push   $0x21
c00220de:	e8 12 fc ff ff       	call   c0021cf5 <outb>
c00220e3:	83 c4 08             	add    $0x8,%esp
c00220e6:	6a 01                	push   $0x1
c00220e8:	6a 21                	push   $0x21
c00220ea:	e8 06 fc ff ff       	call   c0021cf5 <outb>
c00220ef:	83 c4 08             	add    $0x8,%esp
c00220f2:	6a 11                	push   $0x11
c00220f4:	68 a0 00 00 00       	push   $0xa0
c00220f9:	e8 f7 fb ff ff       	call   c0021cf5 <outb>
c00220fe:	83 c4 08             	add    $0x8,%esp
c0022101:	6a 28                	push   $0x28
c0022103:	68 a1 00 00 00       	push   $0xa1
c0022108:	e8 e8 fb ff ff       	call   c0021cf5 <outb>
c002210d:	83 c4 08             	add    $0x8,%esp
c0022110:	6a 02                	push   $0x2
c0022112:	68 a1 00 00 00       	push   $0xa1
c0022117:	e8 d9 fb ff ff       	call   c0021cf5 <outb>
c002211c:	83 c4 08             	add    $0x8,%esp
c002211f:	6a 01                	push   $0x1
c0022121:	68 a1 00 00 00       	push   $0xa1
c0022126:	e8 ca fb ff ff       	call   c0021cf5 <outb>
c002212b:	83 c4 08             	add    $0x8,%esp
c002212e:	6a 00                	push   $0x0
c0022130:	6a 21                	push   $0x21
c0022132:	e8 be fb ff ff       	call   c0021cf5 <outb>
c0022137:	83 c4 08             	add    $0x8,%esp
c002213a:	6a 00                	push   $0x0
c002213c:	68 a1 00 00 00       	push   $0xa1
c0022141:	e8 af fb ff ff       	call   c0021cf5 <outb>
c0022146:	83 c4 08             	add    $0x8,%esp
c0022149:	90                   	nop
c002214a:	c9                   	leave  
c002214b:	c3                   	ret    

c002214c <pic_end_of_interrupt>:
c002214c:	55                   	push   %ebp
c002214d:	89 e5                	mov    %esp,%ebp
c002214f:	83 ec 08             	sub    $0x8,%esp
c0022152:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0022156:	7e 06                	jle    c002215e <pic_end_of_interrupt+0x12>
c0022158:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c002215c:	7e 21                	jle    c002217f <pic_end_of_interrupt+0x33>
c002215e:	83 ec 0c             	sub    $0xc,%esp
c0022161:	68 e3 30 03 c0       	push   $0xc00330e3
c0022166:	68 31 2e 03 c0       	push   $0xc0032e31
c002216b:	68 90 32 03 c0       	push   $0xc0033290
c0022170:	68 0b 01 00 00       	push   $0x10b
c0022175:	68 48 2e 03 c0       	push   $0xc0032e48
c002217a:	e8 ab 83 00 00       	call   c002a52a <debug_panic>
c002217f:	83 ec 08             	sub    $0x8,%esp
c0022182:	6a 20                	push   $0x20
c0022184:	6a 20                	push   $0x20
c0022186:	e8 6a fb ff ff       	call   c0021cf5 <outb>
c002218b:	83 c4 10             	add    $0x10,%esp
c002218e:	83 7d 08 27          	cmpl   $0x27,0x8(%ebp)
c0022192:	7e 12                	jle    c00221a6 <pic_end_of_interrupt+0x5a>
c0022194:	83 ec 08             	sub    $0x8,%esp
c0022197:	6a 20                	push   $0x20
c0022199:	68 a0 00 00 00       	push   $0xa0
c002219e:	e8 52 fb ff ff       	call   c0021cf5 <outb>
c00221a3:	83 c4 10             	add    $0x10,%esp
c00221a6:	90                   	nop
c00221a7:	c9                   	leave  
c00221a8:	c3                   	ret    

c00221a9 <make_gate>:
c00221a9:	55                   	push   %ebp
c00221aa:	89 e5                	mov    %esp,%ebp
c00221ac:	57                   	push   %edi
c00221ad:	56                   	push   %esi
c00221ae:	53                   	push   %ebx
c00221af:	83 ec 2c             	sub    $0x2c,%esp
c00221b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00221b6:	75 21                	jne    c00221d9 <make_gate+0x30>
c00221b8:	83 ec 0c             	sub    $0xc,%esp
c00221bb:	68 fd 30 03 c0       	push   $0xc00330fd
c00221c0:	68 31 2e 03 c0       	push   $0xc0032e31
c00221c5:	68 a8 32 03 c0       	push   $0xc00332a8
c00221ca:	68 2a 01 00 00       	push   $0x12a
c00221cf:	68 48 2e 03 c0       	push   $0xc0032e48
c00221d4:	e8 51 83 00 00       	call   c002a52a <debug_panic>
c00221d9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00221dd:	78 06                	js     c00221e5 <make_gate+0x3c>
c00221df:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
c00221e3:	7e 21                	jle    c0022206 <make_gate+0x5d>
c00221e5:	83 ec 0c             	sub    $0xc,%esp
c00221e8:	68 0e 31 03 c0       	push   $0xc003310e
c00221ed:	68 31 2e 03 c0       	push   $0xc0032e31
c00221f2:	68 a8 32 03 c0       	push   $0xc00332a8
c00221f7:	68 2b 01 00 00       	push   $0x12b
c00221fc:	68 48 2e 03 c0       	push   $0xc0032e48
c0022201:	e8 24 83 00 00       	call   c002a52a <debug_panic>
c0022206:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002220a:	78 06                	js     c0022212 <make_gate+0x69>
c002220c:	83 7d 10 0f          	cmpl   $0xf,0x10(%ebp)
c0022210:	7e 21                	jle    c0022233 <make_gate+0x8a>
c0022212:	83 ec 0c             	sub    $0xc,%esp
c0022215:	68 23 31 03 c0       	push   $0xc0033123
c002221a:	68 31 2e 03 c0       	push   $0xc0032e31
c002221f:	68 a8 32 03 c0       	push   $0xc00332a8
c0022224:	68 2c 01 00 00       	push   $0x12c
c0022229:	68 48 2e 03 c0       	push   $0xc0032e48
c002222e:	e8 f7 82 00 00       	call   c002a52a <debug_panic>
c0022233:	8b 45 08             	mov    0x8(%ebp),%eax
c0022236:	0f b7 c0             	movzwl %ax,%eax
c0022239:	0d 00 00 08 00       	or     $0x80000,%eax
c002223e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0022241:	8b 45 08             	mov    0x8(%ebp),%eax
c0022244:	66 b8 00 00          	mov    $0x0,%ax
c0022248:	89 c2                	mov    %eax,%edx
c002224a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002224d:	c1 e0 0d             	shl    $0xd,%eax
c0022250:	09 c2                	or     %eax,%edx
c0022252:	8b 45 10             	mov    0x10(%ebp),%eax
c0022255:	c1 e0 08             	shl    $0x8,%eax
c0022258:	09 d0                	or     %edx,%eax
c002225a:	80 cc 80             	or     $0x80,%ah
c002225d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0022260:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0022263:	bf 00 00 00 00       	mov    $0x0,%edi
c0022268:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002226b:	ba 00 00 00 00       	mov    $0x0,%edx
c0022270:	89 c2                	mov    %eax,%edx
c0022272:	b8 00 00 00 00       	mov    $0x0,%eax
c0022277:	89 45 d0             	mov    %eax,-0x30(%ebp)
c002227a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c002227d:	89 f0                	mov    %esi,%eax
c002227f:	0b 45 d0             	or     -0x30(%ebp),%eax
c0022282:	89 c1                	mov    %eax,%ecx
c0022284:	89 f8                	mov    %edi,%eax
c0022286:	0b 45 d4             	or     -0x2c(%ebp),%eax
c0022289:	89 c3                	mov    %eax,%ebx
c002228b:	89 c8                	mov    %ecx,%eax
c002228d:	89 da                	mov    %ebx,%edx
c002228f:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0022292:	5b                   	pop    %ebx
c0022293:	5e                   	pop    %esi
c0022294:	5f                   	pop    %edi
c0022295:	5d                   	pop    %ebp
c0022296:	c3                   	ret    

c0022297 <make_intr_gate>:
c0022297:	55                   	push   %ebp
c0022298:	89 e5                	mov    %esp,%ebp
c002229a:	83 ec 08             	sub    $0x8,%esp
c002229d:	83 ec 04             	sub    $0x4,%esp
c00222a0:	6a 0e                	push   $0xe
c00222a2:	ff 75 0c             	pushl  0xc(%ebp)
c00222a5:	ff 75 08             	pushl  0x8(%ebp)
c00222a8:	e8 fc fe ff ff       	call   c00221a9 <make_gate>
c00222ad:	83 c4 10             	add    $0x10,%esp
c00222b0:	c9                   	leave  
c00222b1:	c3                   	ret    

c00222b2 <make_trap_gate>:
c00222b2:	55                   	push   %ebp
c00222b3:	89 e5                	mov    %esp,%ebp
c00222b5:	83 ec 08             	sub    $0x8,%esp
c00222b8:	83 ec 04             	sub    $0x4,%esp
c00222bb:	6a 0f                	push   $0xf
c00222bd:	ff 75 0c             	pushl  0xc(%ebp)
c00222c0:	ff 75 08             	pushl  0x8(%ebp)
c00222c3:	e8 e1 fe ff ff       	call   c00221a9 <make_gate>
c00222c8:	83 c4 10             	add    $0x10,%esp
c00222cb:	c9                   	leave  
c00222cc:	c3                   	ret    

c00222cd <make_idtr_operand>:
c00222cd:	55                   	push   %ebp
c00222ce:	89 e5                	mov    %esp,%ebp
c00222d0:	57                   	push   %edi
c00222d1:	56                   	push   %esi
c00222d2:	53                   	push   %ebx
c00222d3:	83 ec 14             	sub    $0x14,%esp
c00222d6:	8b 45 08             	mov    0x8(%ebp),%eax
c00222d9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c00222dd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00222e1:	89 c6                	mov    %eax,%esi
c00222e3:	bf 00 00 00 00       	mov    $0x0,%edi
c00222e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00222eb:	ba 00 00 00 00       	mov    $0x0,%edx
c00222f0:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c00222f4:	c1 e0 10             	shl    $0x10,%eax
c00222f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00222fa:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00222fd:	89 f0                	mov    %esi,%eax
c00222ff:	0b 45 e0             	or     -0x20(%ebp),%eax
c0022302:	89 c1                	mov    %eax,%ecx
c0022304:	89 f8                	mov    %edi,%eax
c0022306:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0022309:	89 c3                	mov    %eax,%ebx
c002230b:	89 c8                	mov    %ecx,%eax
c002230d:	89 da                	mov    %ebx,%edx
c002230f:	83 c4 14             	add    $0x14,%esp
c0022312:	5b                   	pop    %ebx
c0022313:	5e                   	pop    %esi
c0022314:	5f                   	pop    %edi
c0022315:	5d                   	pop    %ebp
c0022316:	c3                   	ret    

c0022317 <intr_handler>:
c0022317:	55                   	push   %ebp
c0022318:	89 e5                	mov    %esp,%ebp
c002231a:	83 ec 18             	sub    $0x18,%esp
c002231d:	8b 45 08             	mov    0x8(%ebp),%eax
c0022320:	8b 40 30             	mov    0x30(%eax),%eax
c0022323:	83 f8 1f             	cmp    $0x1f,%eax
c0022326:	76 12                	jbe    c002233a <intr_handler+0x23>
c0022328:	8b 45 08             	mov    0x8(%ebp),%eax
c002232b:	8b 40 30             	mov    0x30(%eax),%eax
c002232e:	83 f8 2f             	cmp    $0x2f,%eax
c0022331:	77 07                	ja     c002233a <intr_handler+0x23>
c0022333:	b8 01 00 00 00       	mov    $0x1,%eax
c0022338:	eb 05                	jmp    c002233f <intr_handler+0x28>
c002233a:	b8 00 00 00 00       	mov    $0x0,%eax
c002233f:	88 45 f7             	mov    %al,-0x9(%ebp)
c0022342:	80 65 f7 01          	andb   $0x1,-0x9(%ebp)
c0022346:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c002234a:	74 65                	je     c00223b1 <intr_handler+0x9a>
c002234c:	e8 c3 f9 ff ff       	call   c0021d14 <intr_get_level>
c0022351:	85 c0                	test   %eax,%eax
c0022353:	74 21                	je     c0022376 <intr_handler+0x5f>
c0022355:	83 ec 0c             	sub    $0xc,%esp
c0022358:	68 3b 31 03 c0       	push   $0xc003313b
c002235d:	68 31 2e 03 c0       	push   $0xc0032e31
c0022362:	68 b4 32 03 c0       	push   $0xc00332b4
c0022367:	68 65 01 00 00       	push   $0x165
c002236c:	68 48 2e 03 c0       	push   $0xc0032e48
c0022371:	e8 b4 81 00 00       	call   c002a52a <debug_panic>
c0022376:	e8 dd fc ff ff       	call   c0022058 <intr_context>
c002237b:	83 f0 01             	xor    $0x1,%eax
c002237e:	84 c0                	test   %al,%al
c0022380:	75 21                	jne    c00223a3 <intr_handler+0x8c>
c0022382:	83 ec 0c             	sub    $0xc,%esp
c0022385:	68 20 2e 03 c0       	push   $0xc0032e20
c002238a:	68 31 2e 03 c0       	push   $0xc0032e31
c002238f:	68 b4 32 03 c0       	push   $0xc00332b4
c0022394:	68 66 01 00 00       	push   $0x166
c0022399:	68 48 2e 03 c0       	push   $0xc0032e48
c002239e:	e8 87 81 00 00       	call   c002a52a <debug_panic>
c00223a3:	c6 05 20 d6 03 c0 01 	movb   $0x1,0xc003d620
c00223aa:	c6 05 21 d6 03 c0 00 	movb   $0x0,0xc003d621
c00223b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00223b4:	8b 40 30             	mov    0x30(%eax),%eax
c00223b7:	8b 04 85 20 ca 03 c0 	mov    -0x3ffc35e0(,%eax,4),%eax
c00223be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00223c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00223c5:	74 10                	je     c00223d7 <intr_handler+0xc0>
c00223c7:	83 ec 0c             	sub    $0xc,%esp
c00223ca:	ff 75 08             	pushl  0x8(%ebp)
c00223cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00223d0:	ff d0                	call   *%eax
c00223d2:	83 c4 10             	add    $0x10,%esp
c00223d5:	eb 24                	jmp    c00223fb <intr_handler+0xe4>
c00223d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00223da:	8b 40 30             	mov    0x30(%eax),%eax
c00223dd:	83 f8 27             	cmp    $0x27,%eax
c00223e0:	74 19                	je     c00223fb <intr_handler+0xe4>
c00223e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00223e5:	8b 40 30             	mov    0x30(%eax),%eax
c00223e8:	83 f8 2f             	cmp    $0x2f,%eax
c00223eb:	74 0e                	je     c00223fb <intr_handler+0xe4>
c00223ed:	83 ec 0c             	sub    $0xc,%esp
c00223f0:	ff 75 08             	pushl  0x8(%ebp)
c00223f3:	e8 89 00 00 00       	call   c0022481 <unexpected_interrupt>
c00223f8:	83 c4 10             	add    $0x10,%esp
c00223fb:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c00223ff:	74 7d                	je     c002247e <intr_handler+0x167>
c0022401:	e8 0e f9 ff ff       	call   c0021d14 <intr_get_level>
c0022406:	85 c0                	test   %eax,%eax
c0022408:	74 21                	je     c002242b <intr_handler+0x114>
c002240a:	83 ec 0c             	sub    $0xc,%esp
c002240d:	68 3b 31 03 c0       	push   $0xc003313b
c0022412:	68 31 2e 03 c0       	push   $0xc0032e31
c0022417:	68 b4 32 03 c0       	push   $0xc00332b4
c002241c:	68 7c 01 00 00       	push   $0x17c
c0022421:	68 48 2e 03 c0       	push   $0xc0032e48
c0022426:	e8 ff 80 00 00       	call   c002a52a <debug_panic>
c002242b:	e8 28 fc ff ff       	call   c0022058 <intr_context>
c0022430:	84 c0                	test   %al,%al
c0022432:	75 21                	jne    c0022455 <intr_handler+0x13e>
c0022434:	83 ec 0c             	sub    $0xc,%esp
c0022437:	68 d3 30 03 c0       	push   $0xc00330d3
c002243c:	68 31 2e 03 c0       	push   $0xc0032e31
c0022441:	68 b4 32 03 c0       	push   $0xc00332b4
c0022446:	68 7d 01 00 00       	push   $0x17d
c002244b:	68 48 2e 03 c0       	push   $0xc0032e48
c0022450:	e8 d5 80 00 00       	call   c002a52a <debug_panic>
c0022455:	c6 05 20 d6 03 c0 00 	movb   $0x0,0xc003d620
c002245c:	8b 45 08             	mov    0x8(%ebp),%eax
c002245f:	8b 40 30             	mov    0x30(%eax),%eax
c0022462:	83 ec 0c             	sub    $0xc,%esp
c0022465:	50                   	push   %eax
c0022466:	e8 e1 fc ff ff       	call   c002214c <pic_end_of_interrupt>
c002246b:	83 c4 10             	add    $0x10,%esp
c002246e:	0f b6 05 21 d6 03 c0 	movzbl 0xc003d621,%eax
c0022475:	84 c0                	test   %al,%al
c0022477:	74 05                	je     c002247e <intr_handler+0x167>
c0022479:	e8 25 eb ff ff       	call   c0020fa3 <thread_yield>
c002247e:	90                   	nop
c002247f:	c9                   	leave  
c0022480:	c3                   	ret    

c0022481 <unexpected_interrupt>:
c0022481:	55                   	push   %ebp
c0022482:	89 e5                	mov    %esp,%ebp
c0022484:	83 ec 18             	sub    $0x18,%esp
c0022487:	8b 45 08             	mov    0x8(%ebp),%eax
c002248a:	8b 40 30             	mov    0x30(%eax),%eax
c002248d:	8b 14 85 20 d2 03 c0 	mov    -0x3ffc2de0(,%eax,4),%edx
c0022494:	83 c2 01             	add    $0x1,%edx
c0022497:	89 14 85 20 d2 03 c0 	mov    %edx,-0x3ffc2de0(,%eax,4)
c002249e:	8b 04 85 20 d2 03 c0 	mov    -0x3ffc2de0(,%eax,4),%eax
c00224a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00224a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00224ab:	83 e8 01             	sub    $0x1,%eax
c00224ae:	23 45 f4             	and    -0xc(%ebp),%eax
c00224b1:	85 c0                	test   %eax,%eax
c00224b3:	75 25                	jne    c00224da <unexpected_interrupt+0x59>
c00224b5:	8b 45 08             	mov    0x8(%ebp),%eax
c00224b8:	8b 40 30             	mov    0x30(%eax),%eax
c00224bb:	8b 14 85 20 ce 03 c0 	mov    -0x3ffc31e0(,%eax,4),%edx
c00224c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00224c5:	8b 40 30             	mov    0x30(%eax),%eax
c00224c8:	83 ec 04             	sub    $0x4,%esp
c00224cb:	52                   	push   %edx
c00224cc:	50                   	push   %eax
c00224cd:	68 5c 31 03 c0       	push   $0xc003315c
c00224d2:	e8 f2 5a 00 00       	call   c0027fc9 <printf>
c00224d7:	83 c4 10             	add    $0x10,%esp
c00224da:	90                   	nop
c00224db:	c9                   	leave  
c00224dc:	c3                   	ret    

c00224dd <intr_dump_frame>:
c00224dd:	55                   	push   %ebp
c00224de:	89 e5                	mov    %esp,%ebp
c00224e0:	53                   	push   %ebx
c00224e1:	83 ec 14             	sub    $0x14,%esp
c00224e4:	0f 20 d0             	mov    %cr2,%eax
c00224e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00224ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00224ed:	8b 48 3c             	mov    0x3c(%eax),%ecx
c00224f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00224f3:	8b 40 30             	mov    0x30(%eax),%eax
c00224f6:	8b 14 85 20 ce 03 c0 	mov    -0x3ffc31e0(,%eax,4),%edx
c00224fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0022500:	8b 40 30             	mov    0x30(%eax),%eax
c0022503:	51                   	push   %ecx
c0022504:	52                   	push   %edx
c0022505:	50                   	push   %eax
c0022506:	68 80 31 03 c0       	push   $0xc0033180
c002250b:	e8 b9 5a 00 00       	call   c0027fc9 <printf>
c0022510:	83 c4 10             	add    $0x10,%esp
c0022513:	8b 45 08             	mov    0x8(%ebp),%eax
c0022516:	8b 40 34             	mov    0x34(%eax),%eax
c0022519:	83 ec 04             	sub    $0x4,%esp
c002251c:	50                   	push   %eax
c002251d:	ff 75 f4             	pushl  -0xc(%ebp)
c0022520:	68 a0 31 03 c0       	push   $0xc00331a0
c0022525:	e8 9f 5a 00 00       	call   c0027fc9 <printf>
c002252a:	83 c4 10             	add    $0x10,%esp
c002252d:	8b 45 08             	mov    0x8(%ebp),%eax
c0022530:	8b 58 14             	mov    0x14(%eax),%ebx
c0022533:	8b 45 08             	mov    0x8(%ebp),%eax
c0022536:	8b 48 18             	mov    0x18(%eax),%ecx
c0022539:	8b 45 08             	mov    0x8(%ebp),%eax
c002253c:	8b 50 10             	mov    0x10(%eax),%edx
c002253f:	8b 45 08             	mov    0x8(%ebp),%eax
c0022542:	8b 40 1c             	mov    0x1c(%eax),%eax
c0022545:	83 ec 0c             	sub    $0xc,%esp
c0022548:	53                   	push   %ebx
c0022549:	51                   	push   %ecx
c002254a:	52                   	push   %edx
c002254b:	50                   	push   %eax
c002254c:	68 b8 31 03 c0       	push   $0xc00331b8
c0022551:	e8 73 5a 00 00       	call   c0027fc9 <printf>
c0022556:	83 c4 20             	add    $0x20,%esp
c0022559:	8b 45 08             	mov    0x8(%ebp),%eax
c002255c:	8b 48 08             	mov    0x8(%eax),%ecx
c002255f:	8b 45 08             	mov    0x8(%ebp),%eax
c0022562:	8b 40 48             	mov    0x48(%eax),%eax
c0022565:	89 c3                	mov    %eax,%ebx
c0022567:	8b 45 08             	mov    0x8(%ebp),%eax
c002256a:	8b 10                	mov    (%eax),%edx
c002256c:	8b 45 08             	mov    0x8(%ebp),%eax
c002256f:	8b 40 04             	mov    0x4(%eax),%eax
c0022572:	83 ec 0c             	sub    $0xc,%esp
c0022575:	51                   	push   %ecx
c0022576:	53                   	push   %ebx
c0022577:	52                   	push   %edx
c0022578:	50                   	push   %eax
c0022579:	68 e0 31 03 c0       	push   $0xc00331e0
c002257e:	e8 46 5a 00 00       	call   c0027fc9 <printf>
c0022583:	83 c4 20             	add    $0x20,%esp
c0022586:	8b 45 08             	mov    0x8(%ebp),%eax
c0022589:	0f b7 40 4c          	movzwl 0x4c(%eax),%eax
c002258d:	0f b7 d8             	movzwl %ax,%ebx
c0022590:	8b 45 08             	mov    0x8(%ebp),%eax
c0022593:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0022597:	0f b7 c8             	movzwl %ax,%ecx
c002259a:	8b 45 08             	mov    0x8(%ebp),%eax
c002259d:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c00225a1:	0f b7 d0             	movzwl %ax,%edx
c00225a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00225a7:	0f b7 40 40          	movzwl 0x40(%eax),%eax
c00225ab:	0f b7 c0             	movzwl %ax,%eax
c00225ae:	83 ec 0c             	sub    $0xc,%esp
c00225b1:	53                   	push   %ebx
c00225b2:	51                   	push   %ecx
c00225b3:	52                   	push   %edx
c00225b4:	50                   	push   %eax
c00225b5:	68 08 32 03 c0       	push   $0xc0033208
c00225ba:	e8 0a 5a 00 00       	call   c0027fc9 <printf>
c00225bf:	83 c4 20             	add    $0x20,%esp
c00225c2:	90                   	nop
c00225c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00225c6:	c9                   	leave  
c00225c7:	c3                   	ret    

c00225c8 <intr_name>:
c00225c8:	55                   	push   %ebp
c00225c9:	89 e5                	mov    %esp,%ebp
c00225cb:	83 ec 04             	sub    $0x4,%esp
c00225ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00225d1:	88 45 fc             	mov    %al,-0x4(%ebp)
c00225d4:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00225d8:	8b 04 85 20 ce 03 c0 	mov    -0x3ffc31e0(,%eax,4),%eax
c00225df:	c9                   	leave  
c00225e0:	c3                   	ret    

c00225e1 <intr_entry>:
   We "fall through" to intr_exit to return from the interrupt.
*/
.func intr_entry
intr_entry:
	/* Save caller's registers. */
	pushl %ds
c00225e1:	1e                   	push   %ds
	pushl %es
c00225e2:	06                   	push   %es
	pushl %fs
c00225e3:	0f a0                	push   %fs
	pushl %gs
c00225e5:	0f a8                	push   %gs
	pushal
c00225e7:	60                   	pusha  
        
	/* Set up kernel environment. */
	cld			/* String instructions go upward. */
c00225e8:	fc                   	cld    
	mov $SEL_KDSEG, %eax	/* Initialize segment registers. */
c00225e9:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
c00225ee:	8e d8                	mov    %eax,%ds
	mov %eax, %es
c00225f0:	8e c0                	mov    %eax,%es
	leal 56(%esp), %ebp	/* Set up frame pointer. */
c00225f2:	8d 6c 24 38          	lea    0x38(%esp),%ebp

	/* Call interrupt handler. */
	pushl %esp
c00225f6:	54                   	push   %esp
.globl intr_handler
	call intr_handler
c00225f7:	e8 1b fd ff ff       	call   c0022317 <intr_handler>
	addl $4, %esp
c00225fc:	83 c4 04             	add    $0x4,%esp

c00225ff <intr_exit>:
   userprog/process.c). */
.globl intr_exit
.func intr_exit
intr_exit:
        /* Restore caller's registers. */
	popal
c00225ff:	61                   	popa   
	popl %gs
c0022600:	0f a9                	pop    %gs
	popl %fs
c0022602:	0f a1                	pop    %fs
	popl %es
c0022604:	07                   	pop    %es
	popl %ds
c0022605:	1f                   	pop    %ds

        /* Discard `struct intr_frame' vec_no, error_code,
           frame_pointer members. */
	addl $12, %esp
c0022606:	83 c4 0c             	add    $0xc,%esp

        /* Return to caller. */
	iret
c0022609:	cf                   	iret   

c002260a <intr00_stub>:
                                                \
	.data;                                  \
	.long intr##NUMBER##_stub;

/* All the stubs. */
STUB(00, zero) STUB(01, zero) STUB(02, zero) STUB(03, zero)
c002260a:	55                   	push   %ebp
c002260b:	6a 00                	push   $0x0
c002260d:	6a 00                	push   $0x0
c002260f:	eb d0                	jmp    c00225e1 <intr_entry>

c0022611 <intr01_stub>:
c0022611:	55                   	push   %ebp
c0022612:	6a 00                	push   $0x0
c0022614:	6a 01                	push   $0x1
c0022616:	eb c9                	jmp    c00225e1 <intr_entry>

c0022618 <intr02_stub>:
c0022618:	55                   	push   %ebp
c0022619:	6a 00                	push   $0x0
c002261b:	6a 02                	push   $0x2
c002261d:	eb c2                	jmp    c00225e1 <intr_entry>

c002261f <intr03_stub>:
c002261f:	55                   	push   %ebp
c0022620:	6a 00                	push   $0x0
c0022622:	6a 03                	push   $0x3
c0022624:	eb bb                	jmp    c00225e1 <intr_entry>

c0022626 <intr04_stub>:
STUB(04, zero) STUB(05, zero) STUB(06, zero) STUB(07, zero)
c0022626:	55                   	push   %ebp
c0022627:	6a 00                	push   $0x0
c0022629:	6a 04                	push   $0x4
c002262b:	eb b4                	jmp    c00225e1 <intr_entry>

c002262d <intr05_stub>:
c002262d:	55                   	push   %ebp
c002262e:	6a 00                	push   $0x0
c0022630:	6a 05                	push   $0x5
c0022632:	eb ad                	jmp    c00225e1 <intr_entry>

c0022634 <intr06_stub>:
c0022634:	55                   	push   %ebp
c0022635:	6a 00                	push   $0x0
c0022637:	6a 06                	push   $0x6
c0022639:	eb a6                	jmp    c00225e1 <intr_entry>

c002263b <intr07_stub>:
c002263b:	55                   	push   %ebp
c002263c:	6a 00                	push   $0x0
c002263e:	6a 07                	push   $0x7
c0022640:	eb 9f                	jmp    c00225e1 <intr_entry>

c0022642 <intr08_stub>:
STUB(08, REAL) STUB(09, zero) STUB(0a, REAL) STUB(0b, REAL)
c0022642:	ff 34 24             	pushl  (%esp)
c0022645:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022649:	6a 08                	push   $0x8
c002264b:	eb 94                	jmp    c00225e1 <intr_entry>

c002264d <intr09_stub>:
c002264d:	55                   	push   %ebp
c002264e:	6a 00                	push   $0x0
c0022650:	6a 09                	push   $0x9
c0022652:	eb 8d                	jmp    c00225e1 <intr_entry>

c0022654 <intr0a_stub>:
c0022654:	ff 34 24             	pushl  (%esp)
c0022657:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c002265b:	6a 0a                	push   $0xa
c002265d:	eb 82                	jmp    c00225e1 <intr_entry>

c002265f <intr0b_stub>:
c002265f:	ff 34 24             	pushl  (%esp)
c0022662:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022666:	6a 0b                	push   $0xb
c0022668:	e9 74 ff ff ff       	jmp    c00225e1 <intr_entry>

c002266d <intr0c_stub>:
STUB(0c, zero) STUB(0d, REAL) STUB(0e, REAL) STUB(0f, zero)
c002266d:	55                   	push   %ebp
c002266e:	6a 00                	push   $0x0
c0022670:	6a 0c                	push   $0xc
c0022672:	e9 6a ff ff ff       	jmp    c00225e1 <intr_entry>

c0022677 <intr0d_stub>:
c0022677:	ff 34 24             	pushl  (%esp)
c002267a:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c002267e:	6a 0d                	push   $0xd
c0022680:	e9 5c ff ff ff       	jmp    c00225e1 <intr_entry>

c0022685 <intr0e_stub>:
c0022685:	ff 34 24             	pushl  (%esp)
c0022688:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c002268c:	6a 0e                	push   $0xe
c002268e:	e9 4e ff ff ff       	jmp    c00225e1 <intr_entry>

c0022693 <intr0f_stub>:
c0022693:	55                   	push   %ebp
c0022694:	6a 00                	push   $0x0
c0022696:	6a 0f                	push   $0xf
c0022698:	e9 44 ff ff ff       	jmp    c00225e1 <intr_entry>

c002269d <intr10_stub>:

STUB(10, zero) STUB(11, REAL) STUB(12, zero) STUB(13, zero)
c002269d:	55                   	push   %ebp
c002269e:	6a 00                	push   $0x0
c00226a0:	6a 10                	push   $0x10
c00226a2:	e9 3a ff ff ff       	jmp    c00225e1 <intr_entry>

c00226a7 <intr11_stub>:
c00226a7:	ff 34 24             	pushl  (%esp)
c00226aa:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00226ae:	6a 11                	push   $0x11
c00226b0:	e9 2c ff ff ff       	jmp    c00225e1 <intr_entry>

c00226b5 <intr12_stub>:
c00226b5:	55                   	push   %ebp
c00226b6:	6a 00                	push   $0x0
c00226b8:	6a 12                	push   $0x12
c00226ba:	e9 22 ff ff ff       	jmp    c00225e1 <intr_entry>

c00226bf <intr13_stub>:
c00226bf:	55                   	push   %ebp
c00226c0:	6a 00                	push   $0x0
c00226c2:	6a 13                	push   $0x13
c00226c4:	e9 18 ff ff ff       	jmp    c00225e1 <intr_entry>

c00226c9 <intr14_stub>:
STUB(14, zero) STUB(15, zero) STUB(16, zero) STUB(17, zero)
c00226c9:	55                   	push   %ebp
c00226ca:	6a 00                	push   $0x0
c00226cc:	6a 14                	push   $0x14
c00226ce:	e9 0e ff ff ff       	jmp    c00225e1 <intr_entry>

c00226d3 <intr15_stub>:
c00226d3:	55                   	push   %ebp
c00226d4:	6a 00                	push   $0x0
c00226d6:	6a 15                	push   $0x15
c00226d8:	e9 04 ff ff ff       	jmp    c00225e1 <intr_entry>

c00226dd <intr16_stub>:
c00226dd:	55                   	push   %ebp
c00226de:	6a 00                	push   $0x0
c00226e0:	6a 16                	push   $0x16
c00226e2:	e9 fa fe ff ff       	jmp    c00225e1 <intr_entry>

c00226e7 <intr17_stub>:
c00226e7:	55                   	push   %ebp
c00226e8:	6a 00                	push   $0x0
c00226ea:	6a 17                	push   $0x17
c00226ec:	e9 f0 fe ff ff       	jmp    c00225e1 <intr_entry>

c00226f1 <intr18_stub>:
STUB(18, REAL) STUB(19, zero) STUB(1a, REAL) STUB(1b, REAL)
c00226f1:	ff 34 24             	pushl  (%esp)
c00226f4:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c00226f8:	6a 18                	push   $0x18
c00226fa:	e9 e2 fe ff ff       	jmp    c00225e1 <intr_entry>

c00226ff <intr19_stub>:
c00226ff:	55                   	push   %ebp
c0022700:	6a 00                	push   $0x0
c0022702:	6a 19                	push   $0x19
c0022704:	e9 d8 fe ff ff       	jmp    c00225e1 <intr_entry>

c0022709 <intr1a_stub>:
c0022709:	ff 34 24             	pushl  (%esp)
c002270c:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022710:	6a 1a                	push   $0x1a
c0022712:	e9 ca fe ff ff       	jmp    c00225e1 <intr_entry>

c0022717 <intr1b_stub>:
c0022717:	ff 34 24             	pushl  (%esp)
c002271a:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c002271e:	6a 1b                	push   $0x1b
c0022720:	e9 bc fe ff ff       	jmp    c00225e1 <intr_entry>

c0022725 <intr1c_stub>:
STUB(1c, zero) STUB(1d, REAL) STUB(1e, REAL) STUB(1f, zero)
c0022725:	55                   	push   %ebp
c0022726:	6a 00                	push   $0x0
c0022728:	6a 1c                	push   $0x1c
c002272a:	e9 b2 fe ff ff       	jmp    c00225e1 <intr_entry>

c002272f <intr1d_stub>:
c002272f:	ff 34 24             	pushl  (%esp)
c0022732:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022736:	6a 1d                	push   $0x1d
c0022738:	e9 a4 fe ff ff       	jmp    c00225e1 <intr_entry>

c002273d <intr1e_stub>:
c002273d:	ff 34 24             	pushl  (%esp)
c0022740:	89 6c 24 04          	mov    %ebp,0x4(%esp)
c0022744:	6a 1e                	push   $0x1e
c0022746:	e9 96 fe ff ff       	jmp    c00225e1 <intr_entry>

c002274b <intr1f_stub>:
c002274b:	55                   	push   %ebp
c002274c:	6a 00                	push   $0x0
c002274e:	6a 1f                	push   $0x1f
c0022750:	e9 8c fe ff ff       	jmp    c00225e1 <intr_entry>

c0022755 <intr20_stub>:

STUB(20, zero) STUB(21, zero) STUB(22, zero) STUB(23, zero)
c0022755:	55                   	push   %ebp
c0022756:	6a 00                	push   $0x0
c0022758:	6a 20                	push   $0x20
c002275a:	e9 82 fe ff ff       	jmp    c00225e1 <intr_entry>

c002275f <intr21_stub>:
c002275f:	55                   	push   %ebp
c0022760:	6a 00                	push   $0x0
c0022762:	6a 21                	push   $0x21
c0022764:	e9 78 fe ff ff       	jmp    c00225e1 <intr_entry>

c0022769 <intr22_stub>:
c0022769:	55                   	push   %ebp
c002276a:	6a 00                	push   $0x0
c002276c:	6a 22                	push   $0x22
c002276e:	e9 6e fe ff ff       	jmp    c00225e1 <intr_entry>

c0022773 <intr23_stub>:
c0022773:	55                   	push   %ebp
c0022774:	6a 00                	push   $0x0
c0022776:	6a 23                	push   $0x23
c0022778:	e9 64 fe ff ff       	jmp    c00225e1 <intr_entry>

c002277d <intr24_stub>:
STUB(24, zero) STUB(25, zero) STUB(26, zero) STUB(27, zero)
c002277d:	55                   	push   %ebp
c002277e:	6a 00                	push   $0x0
c0022780:	6a 24                	push   $0x24
c0022782:	e9 5a fe ff ff       	jmp    c00225e1 <intr_entry>

c0022787 <intr25_stub>:
c0022787:	55                   	push   %ebp
c0022788:	6a 00                	push   $0x0
c002278a:	6a 25                	push   $0x25
c002278c:	e9 50 fe ff ff       	jmp    c00225e1 <intr_entry>

c0022791 <intr26_stub>:
c0022791:	55                   	push   %ebp
c0022792:	6a 00                	push   $0x0
c0022794:	6a 26                	push   $0x26
c0022796:	e9 46 fe ff ff       	jmp    c00225e1 <intr_entry>

c002279b <intr27_stub>:
c002279b:	55                   	push   %ebp
c002279c:	6a 00                	push   $0x0
c002279e:	6a 27                	push   $0x27
c00227a0:	e9 3c fe ff ff       	jmp    c00225e1 <intr_entry>

c00227a5 <intr28_stub>:
STUB(28, zero) STUB(29, zero) STUB(2a, zero) STUB(2b, zero)
c00227a5:	55                   	push   %ebp
c00227a6:	6a 00                	push   $0x0
c00227a8:	6a 28                	push   $0x28
c00227aa:	e9 32 fe ff ff       	jmp    c00225e1 <intr_entry>

c00227af <intr29_stub>:
c00227af:	55                   	push   %ebp
c00227b0:	6a 00                	push   $0x0
c00227b2:	6a 29                	push   $0x29
c00227b4:	e9 28 fe ff ff       	jmp    c00225e1 <intr_entry>

c00227b9 <intr2a_stub>:
c00227b9:	55                   	push   %ebp
c00227ba:	6a 00                	push   $0x0
c00227bc:	6a 2a                	push   $0x2a
c00227be:	e9 1e fe ff ff       	jmp    c00225e1 <intr_entry>

c00227c3 <intr2b_stub>:
c00227c3:	55                   	push   %ebp
c00227c4:	6a 00                	push   $0x0
c00227c6:	6a 2b                	push   $0x2b
c00227c8:	e9 14 fe ff ff       	jmp    c00225e1 <intr_entry>

c00227cd <intr2c_stub>:
STUB(2c, zero) STUB(2d, zero) STUB(2e, zero) STUB(2f, zero)
c00227cd:	55                   	push   %ebp
c00227ce:	6a 00                	push   $0x0
c00227d0:	6a 2c                	push   $0x2c
c00227d2:	e9 0a fe ff ff       	jmp    c00225e1 <intr_entry>

c00227d7 <intr2d_stub>:
c00227d7:	55                   	push   %ebp
c00227d8:	6a 00                	push   $0x0
c00227da:	6a 2d                	push   $0x2d
c00227dc:	e9 00 fe ff ff       	jmp    c00225e1 <intr_entry>

c00227e1 <intr2e_stub>:
c00227e1:	55                   	push   %ebp
c00227e2:	6a 00                	push   $0x0
c00227e4:	6a 2e                	push   $0x2e
c00227e6:	e9 f6 fd ff ff       	jmp    c00225e1 <intr_entry>

c00227eb <intr2f_stub>:
c00227eb:	55                   	push   %ebp
c00227ec:	6a 00                	push   $0x0
c00227ee:	6a 2f                	push   $0x2f
c00227f0:	e9 ec fd ff ff       	jmp    c00225e1 <intr_entry>

c00227f5 <intr30_stub>:

STUB(30, zero) STUB(31, zero) STUB(32, zero) STUB(33, zero)
c00227f5:	55                   	push   %ebp
c00227f6:	6a 00                	push   $0x0
c00227f8:	6a 30                	push   $0x30
c00227fa:	e9 e2 fd ff ff       	jmp    c00225e1 <intr_entry>

c00227ff <intr31_stub>:
c00227ff:	55                   	push   %ebp
c0022800:	6a 00                	push   $0x0
c0022802:	6a 31                	push   $0x31
c0022804:	e9 d8 fd ff ff       	jmp    c00225e1 <intr_entry>

c0022809 <intr32_stub>:
c0022809:	55                   	push   %ebp
c002280a:	6a 00                	push   $0x0
c002280c:	6a 32                	push   $0x32
c002280e:	e9 ce fd ff ff       	jmp    c00225e1 <intr_entry>

c0022813 <intr33_stub>:
c0022813:	55                   	push   %ebp
c0022814:	6a 00                	push   $0x0
c0022816:	6a 33                	push   $0x33
c0022818:	e9 c4 fd ff ff       	jmp    c00225e1 <intr_entry>

c002281d <intr34_stub>:
STUB(34, zero) STUB(35, zero) STUB(36, zero) STUB(37, zero)
c002281d:	55                   	push   %ebp
c002281e:	6a 00                	push   $0x0
c0022820:	6a 34                	push   $0x34
c0022822:	e9 ba fd ff ff       	jmp    c00225e1 <intr_entry>

c0022827 <intr35_stub>:
c0022827:	55                   	push   %ebp
c0022828:	6a 00                	push   $0x0
c002282a:	6a 35                	push   $0x35
c002282c:	e9 b0 fd ff ff       	jmp    c00225e1 <intr_entry>

c0022831 <intr36_stub>:
c0022831:	55                   	push   %ebp
c0022832:	6a 00                	push   $0x0
c0022834:	6a 36                	push   $0x36
c0022836:	e9 a6 fd ff ff       	jmp    c00225e1 <intr_entry>

c002283b <intr37_stub>:
c002283b:	55                   	push   %ebp
c002283c:	6a 00                	push   $0x0
c002283e:	6a 37                	push   $0x37
c0022840:	e9 9c fd ff ff       	jmp    c00225e1 <intr_entry>

c0022845 <intr38_stub>:
STUB(38, zero) STUB(39, zero) STUB(3a, zero) STUB(3b, zero)
c0022845:	55                   	push   %ebp
c0022846:	6a 00                	push   $0x0
c0022848:	6a 38                	push   $0x38
c002284a:	e9 92 fd ff ff       	jmp    c00225e1 <intr_entry>

c002284f <intr39_stub>:
c002284f:	55                   	push   %ebp
c0022850:	6a 00                	push   $0x0
c0022852:	6a 39                	push   $0x39
c0022854:	e9 88 fd ff ff       	jmp    c00225e1 <intr_entry>

c0022859 <intr3a_stub>:
c0022859:	55                   	push   %ebp
c002285a:	6a 00                	push   $0x0
c002285c:	6a 3a                	push   $0x3a
c002285e:	e9 7e fd ff ff       	jmp    c00225e1 <intr_entry>

c0022863 <intr3b_stub>:
c0022863:	55                   	push   %ebp
c0022864:	6a 00                	push   $0x0
c0022866:	6a 3b                	push   $0x3b
c0022868:	e9 74 fd ff ff       	jmp    c00225e1 <intr_entry>

c002286d <intr3c_stub>:
STUB(3c, zero) STUB(3d, zero) STUB(3e, zero) STUB(3f, zero)
c002286d:	55                   	push   %ebp
c002286e:	6a 00                	push   $0x0
c0022870:	6a 3c                	push   $0x3c
c0022872:	e9 6a fd ff ff       	jmp    c00225e1 <intr_entry>

c0022877 <intr3d_stub>:
c0022877:	55                   	push   %ebp
c0022878:	6a 00                	push   $0x0
c002287a:	6a 3d                	push   $0x3d
c002287c:	e9 60 fd ff ff       	jmp    c00225e1 <intr_entry>

c0022881 <intr3e_stub>:
c0022881:	55                   	push   %ebp
c0022882:	6a 00                	push   $0x0
c0022884:	6a 3e                	push   $0x3e
c0022886:	e9 56 fd ff ff       	jmp    c00225e1 <intr_entry>

c002288b <intr3f_stub>:
c002288b:	55                   	push   %ebp
c002288c:	6a 00                	push   $0x0
c002288e:	6a 3f                	push   $0x3f
c0022890:	e9 4c fd ff ff       	jmp    c00225e1 <intr_entry>

c0022895 <intr40_stub>:

STUB(40, zero) STUB(41, zero) STUB(42, zero) STUB(43, zero)
c0022895:	55                   	push   %ebp
c0022896:	6a 00                	push   $0x0
c0022898:	6a 40                	push   $0x40
c002289a:	e9 42 fd ff ff       	jmp    c00225e1 <intr_entry>

c002289f <intr41_stub>:
c002289f:	55                   	push   %ebp
c00228a0:	6a 00                	push   $0x0
c00228a2:	6a 41                	push   $0x41
c00228a4:	e9 38 fd ff ff       	jmp    c00225e1 <intr_entry>

c00228a9 <intr42_stub>:
c00228a9:	55                   	push   %ebp
c00228aa:	6a 00                	push   $0x0
c00228ac:	6a 42                	push   $0x42
c00228ae:	e9 2e fd ff ff       	jmp    c00225e1 <intr_entry>

c00228b3 <intr43_stub>:
c00228b3:	55                   	push   %ebp
c00228b4:	6a 00                	push   $0x0
c00228b6:	6a 43                	push   $0x43
c00228b8:	e9 24 fd ff ff       	jmp    c00225e1 <intr_entry>

c00228bd <intr44_stub>:
STUB(44, zero) STUB(45, zero) STUB(46, zero) STUB(47, zero)
c00228bd:	55                   	push   %ebp
c00228be:	6a 00                	push   $0x0
c00228c0:	6a 44                	push   $0x44
c00228c2:	e9 1a fd ff ff       	jmp    c00225e1 <intr_entry>

c00228c7 <intr45_stub>:
c00228c7:	55                   	push   %ebp
c00228c8:	6a 00                	push   $0x0
c00228ca:	6a 45                	push   $0x45
c00228cc:	e9 10 fd ff ff       	jmp    c00225e1 <intr_entry>

c00228d1 <intr46_stub>:
c00228d1:	55                   	push   %ebp
c00228d2:	6a 00                	push   $0x0
c00228d4:	6a 46                	push   $0x46
c00228d6:	e9 06 fd ff ff       	jmp    c00225e1 <intr_entry>

c00228db <intr47_stub>:
c00228db:	55                   	push   %ebp
c00228dc:	6a 00                	push   $0x0
c00228de:	6a 47                	push   $0x47
c00228e0:	e9 fc fc ff ff       	jmp    c00225e1 <intr_entry>

c00228e5 <intr48_stub>:
STUB(48, zero) STUB(49, zero) STUB(4a, zero) STUB(4b, zero)
c00228e5:	55                   	push   %ebp
c00228e6:	6a 00                	push   $0x0
c00228e8:	6a 48                	push   $0x48
c00228ea:	e9 f2 fc ff ff       	jmp    c00225e1 <intr_entry>

c00228ef <intr49_stub>:
c00228ef:	55                   	push   %ebp
c00228f0:	6a 00                	push   $0x0
c00228f2:	6a 49                	push   $0x49
c00228f4:	e9 e8 fc ff ff       	jmp    c00225e1 <intr_entry>

c00228f9 <intr4a_stub>:
c00228f9:	55                   	push   %ebp
c00228fa:	6a 00                	push   $0x0
c00228fc:	6a 4a                	push   $0x4a
c00228fe:	e9 de fc ff ff       	jmp    c00225e1 <intr_entry>

c0022903 <intr4b_stub>:
c0022903:	55                   	push   %ebp
c0022904:	6a 00                	push   $0x0
c0022906:	6a 4b                	push   $0x4b
c0022908:	e9 d4 fc ff ff       	jmp    c00225e1 <intr_entry>

c002290d <intr4c_stub>:
STUB(4c, zero) STUB(4d, zero) STUB(4e, zero) STUB(4f, zero)
c002290d:	55                   	push   %ebp
c002290e:	6a 00                	push   $0x0
c0022910:	6a 4c                	push   $0x4c
c0022912:	e9 ca fc ff ff       	jmp    c00225e1 <intr_entry>

c0022917 <intr4d_stub>:
c0022917:	55                   	push   %ebp
c0022918:	6a 00                	push   $0x0
c002291a:	6a 4d                	push   $0x4d
c002291c:	e9 c0 fc ff ff       	jmp    c00225e1 <intr_entry>

c0022921 <intr4e_stub>:
c0022921:	55                   	push   %ebp
c0022922:	6a 00                	push   $0x0
c0022924:	6a 4e                	push   $0x4e
c0022926:	e9 b6 fc ff ff       	jmp    c00225e1 <intr_entry>

c002292b <intr4f_stub>:
c002292b:	55                   	push   %ebp
c002292c:	6a 00                	push   $0x0
c002292e:	6a 4f                	push   $0x4f
c0022930:	e9 ac fc ff ff       	jmp    c00225e1 <intr_entry>

c0022935 <intr50_stub>:

STUB(50, zero) STUB(51, zero) STUB(52, zero) STUB(53, zero)
c0022935:	55                   	push   %ebp
c0022936:	6a 00                	push   $0x0
c0022938:	6a 50                	push   $0x50
c002293a:	e9 a2 fc ff ff       	jmp    c00225e1 <intr_entry>

c002293f <intr51_stub>:
c002293f:	55                   	push   %ebp
c0022940:	6a 00                	push   $0x0
c0022942:	6a 51                	push   $0x51
c0022944:	e9 98 fc ff ff       	jmp    c00225e1 <intr_entry>

c0022949 <intr52_stub>:
c0022949:	55                   	push   %ebp
c002294a:	6a 00                	push   $0x0
c002294c:	6a 52                	push   $0x52
c002294e:	e9 8e fc ff ff       	jmp    c00225e1 <intr_entry>

c0022953 <intr53_stub>:
c0022953:	55                   	push   %ebp
c0022954:	6a 00                	push   $0x0
c0022956:	6a 53                	push   $0x53
c0022958:	e9 84 fc ff ff       	jmp    c00225e1 <intr_entry>

c002295d <intr54_stub>:
STUB(54, zero) STUB(55, zero) STUB(56, zero) STUB(57, zero)
c002295d:	55                   	push   %ebp
c002295e:	6a 00                	push   $0x0
c0022960:	6a 54                	push   $0x54
c0022962:	e9 7a fc ff ff       	jmp    c00225e1 <intr_entry>

c0022967 <intr55_stub>:
c0022967:	55                   	push   %ebp
c0022968:	6a 00                	push   $0x0
c002296a:	6a 55                	push   $0x55
c002296c:	e9 70 fc ff ff       	jmp    c00225e1 <intr_entry>

c0022971 <intr56_stub>:
c0022971:	55                   	push   %ebp
c0022972:	6a 00                	push   $0x0
c0022974:	6a 56                	push   $0x56
c0022976:	e9 66 fc ff ff       	jmp    c00225e1 <intr_entry>

c002297b <intr57_stub>:
c002297b:	55                   	push   %ebp
c002297c:	6a 00                	push   $0x0
c002297e:	6a 57                	push   $0x57
c0022980:	e9 5c fc ff ff       	jmp    c00225e1 <intr_entry>

c0022985 <intr58_stub>:
STUB(58, zero) STUB(59, zero) STUB(5a, zero) STUB(5b, zero)
c0022985:	55                   	push   %ebp
c0022986:	6a 00                	push   $0x0
c0022988:	6a 58                	push   $0x58
c002298a:	e9 52 fc ff ff       	jmp    c00225e1 <intr_entry>

c002298f <intr59_stub>:
c002298f:	55                   	push   %ebp
c0022990:	6a 00                	push   $0x0
c0022992:	6a 59                	push   $0x59
c0022994:	e9 48 fc ff ff       	jmp    c00225e1 <intr_entry>

c0022999 <intr5a_stub>:
c0022999:	55                   	push   %ebp
c002299a:	6a 00                	push   $0x0
c002299c:	6a 5a                	push   $0x5a
c002299e:	e9 3e fc ff ff       	jmp    c00225e1 <intr_entry>

c00229a3 <intr5b_stub>:
c00229a3:	55                   	push   %ebp
c00229a4:	6a 00                	push   $0x0
c00229a6:	6a 5b                	push   $0x5b
c00229a8:	e9 34 fc ff ff       	jmp    c00225e1 <intr_entry>

c00229ad <intr5c_stub>:
STUB(5c, zero) STUB(5d, zero) STUB(5e, zero) STUB(5f, zero)
c00229ad:	55                   	push   %ebp
c00229ae:	6a 00                	push   $0x0
c00229b0:	6a 5c                	push   $0x5c
c00229b2:	e9 2a fc ff ff       	jmp    c00225e1 <intr_entry>

c00229b7 <intr5d_stub>:
c00229b7:	55                   	push   %ebp
c00229b8:	6a 00                	push   $0x0
c00229ba:	6a 5d                	push   $0x5d
c00229bc:	e9 20 fc ff ff       	jmp    c00225e1 <intr_entry>

c00229c1 <intr5e_stub>:
c00229c1:	55                   	push   %ebp
c00229c2:	6a 00                	push   $0x0
c00229c4:	6a 5e                	push   $0x5e
c00229c6:	e9 16 fc ff ff       	jmp    c00225e1 <intr_entry>

c00229cb <intr5f_stub>:
c00229cb:	55                   	push   %ebp
c00229cc:	6a 00                	push   $0x0
c00229ce:	6a 5f                	push   $0x5f
c00229d0:	e9 0c fc ff ff       	jmp    c00225e1 <intr_entry>

c00229d5 <intr60_stub>:

STUB(60, zero) STUB(61, zero) STUB(62, zero) STUB(63, zero)
c00229d5:	55                   	push   %ebp
c00229d6:	6a 00                	push   $0x0
c00229d8:	6a 60                	push   $0x60
c00229da:	e9 02 fc ff ff       	jmp    c00225e1 <intr_entry>

c00229df <intr61_stub>:
c00229df:	55                   	push   %ebp
c00229e0:	6a 00                	push   $0x0
c00229e2:	6a 61                	push   $0x61
c00229e4:	e9 f8 fb ff ff       	jmp    c00225e1 <intr_entry>

c00229e9 <intr62_stub>:
c00229e9:	55                   	push   %ebp
c00229ea:	6a 00                	push   $0x0
c00229ec:	6a 62                	push   $0x62
c00229ee:	e9 ee fb ff ff       	jmp    c00225e1 <intr_entry>

c00229f3 <intr63_stub>:
c00229f3:	55                   	push   %ebp
c00229f4:	6a 00                	push   $0x0
c00229f6:	6a 63                	push   $0x63
c00229f8:	e9 e4 fb ff ff       	jmp    c00225e1 <intr_entry>

c00229fd <intr64_stub>:
STUB(64, zero) STUB(65, zero) STUB(66, zero) STUB(67, zero)
c00229fd:	55                   	push   %ebp
c00229fe:	6a 00                	push   $0x0
c0022a00:	6a 64                	push   $0x64
c0022a02:	e9 da fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a07 <intr65_stub>:
c0022a07:	55                   	push   %ebp
c0022a08:	6a 00                	push   $0x0
c0022a0a:	6a 65                	push   $0x65
c0022a0c:	e9 d0 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a11 <intr66_stub>:
c0022a11:	55                   	push   %ebp
c0022a12:	6a 00                	push   $0x0
c0022a14:	6a 66                	push   $0x66
c0022a16:	e9 c6 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a1b <intr67_stub>:
c0022a1b:	55                   	push   %ebp
c0022a1c:	6a 00                	push   $0x0
c0022a1e:	6a 67                	push   $0x67
c0022a20:	e9 bc fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a25 <intr68_stub>:
STUB(68, zero) STUB(69, zero) STUB(6a, zero) STUB(6b, zero)
c0022a25:	55                   	push   %ebp
c0022a26:	6a 00                	push   $0x0
c0022a28:	6a 68                	push   $0x68
c0022a2a:	e9 b2 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a2f <intr69_stub>:
c0022a2f:	55                   	push   %ebp
c0022a30:	6a 00                	push   $0x0
c0022a32:	6a 69                	push   $0x69
c0022a34:	e9 a8 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a39 <intr6a_stub>:
c0022a39:	55                   	push   %ebp
c0022a3a:	6a 00                	push   $0x0
c0022a3c:	6a 6a                	push   $0x6a
c0022a3e:	e9 9e fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a43 <intr6b_stub>:
c0022a43:	55                   	push   %ebp
c0022a44:	6a 00                	push   $0x0
c0022a46:	6a 6b                	push   $0x6b
c0022a48:	e9 94 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a4d <intr6c_stub>:
STUB(6c, zero) STUB(6d, zero) STUB(6e, zero) STUB(6f, zero)
c0022a4d:	55                   	push   %ebp
c0022a4e:	6a 00                	push   $0x0
c0022a50:	6a 6c                	push   $0x6c
c0022a52:	e9 8a fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a57 <intr6d_stub>:
c0022a57:	55                   	push   %ebp
c0022a58:	6a 00                	push   $0x0
c0022a5a:	6a 6d                	push   $0x6d
c0022a5c:	e9 80 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a61 <intr6e_stub>:
c0022a61:	55                   	push   %ebp
c0022a62:	6a 00                	push   $0x0
c0022a64:	6a 6e                	push   $0x6e
c0022a66:	e9 76 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a6b <intr6f_stub>:
c0022a6b:	55                   	push   %ebp
c0022a6c:	6a 00                	push   $0x0
c0022a6e:	6a 6f                	push   $0x6f
c0022a70:	e9 6c fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a75 <intr70_stub>:

STUB(70, zero) STUB(71, zero) STUB(72, zero) STUB(73, zero)
c0022a75:	55                   	push   %ebp
c0022a76:	6a 00                	push   $0x0
c0022a78:	6a 70                	push   $0x70
c0022a7a:	e9 62 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a7f <intr71_stub>:
c0022a7f:	55                   	push   %ebp
c0022a80:	6a 00                	push   $0x0
c0022a82:	6a 71                	push   $0x71
c0022a84:	e9 58 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a89 <intr72_stub>:
c0022a89:	55                   	push   %ebp
c0022a8a:	6a 00                	push   $0x0
c0022a8c:	6a 72                	push   $0x72
c0022a8e:	e9 4e fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a93 <intr73_stub>:
c0022a93:	55                   	push   %ebp
c0022a94:	6a 00                	push   $0x0
c0022a96:	6a 73                	push   $0x73
c0022a98:	e9 44 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022a9d <intr74_stub>:
STUB(74, zero) STUB(75, zero) STUB(76, zero) STUB(77, zero)
c0022a9d:	55                   	push   %ebp
c0022a9e:	6a 00                	push   $0x0
c0022aa0:	6a 74                	push   $0x74
c0022aa2:	e9 3a fb ff ff       	jmp    c00225e1 <intr_entry>

c0022aa7 <intr75_stub>:
c0022aa7:	55                   	push   %ebp
c0022aa8:	6a 00                	push   $0x0
c0022aaa:	6a 75                	push   $0x75
c0022aac:	e9 30 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022ab1 <intr76_stub>:
c0022ab1:	55                   	push   %ebp
c0022ab2:	6a 00                	push   $0x0
c0022ab4:	6a 76                	push   $0x76
c0022ab6:	e9 26 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022abb <intr77_stub>:
c0022abb:	55                   	push   %ebp
c0022abc:	6a 00                	push   $0x0
c0022abe:	6a 77                	push   $0x77
c0022ac0:	e9 1c fb ff ff       	jmp    c00225e1 <intr_entry>

c0022ac5 <intr78_stub>:
STUB(78, zero) STUB(79, zero) STUB(7a, zero) STUB(7b, zero)
c0022ac5:	55                   	push   %ebp
c0022ac6:	6a 00                	push   $0x0
c0022ac8:	6a 78                	push   $0x78
c0022aca:	e9 12 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022acf <intr79_stub>:
c0022acf:	55                   	push   %ebp
c0022ad0:	6a 00                	push   $0x0
c0022ad2:	6a 79                	push   $0x79
c0022ad4:	e9 08 fb ff ff       	jmp    c00225e1 <intr_entry>

c0022ad9 <intr7a_stub>:
c0022ad9:	55                   	push   %ebp
c0022ada:	6a 00                	push   $0x0
c0022adc:	6a 7a                	push   $0x7a
c0022ade:	e9 fe fa ff ff       	jmp    c00225e1 <intr_entry>

c0022ae3 <intr7b_stub>:
c0022ae3:	55                   	push   %ebp
c0022ae4:	6a 00                	push   $0x0
c0022ae6:	6a 7b                	push   $0x7b
c0022ae8:	e9 f4 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022aed <intr7c_stub>:
STUB(7c, zero) STUB(7d, zero) STUB(7e, zero) STUB(7f, zero)
c0022aed:	55                   	push   %ebp
c0022aee:	6a 00                	push   $0x0
c0022af0:	6a 7c                	push   $0x7c
c0022af2:	e9 ea fa ff ff       	jmp    c00225e1 <intr_entry>

c0022af7 <intr7d_stub>:
c0022af7:	55                   	push   %ebp
c0022af8:	6a 00                	push   $0x0
c0022afa:	6a 7d                	push   $0x7d
c0022afc:	e9 e0 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b01 <intr7e_stub>:
c0022b01:	55                   	push   %ebp
c0022b02:	6a 00                	push   $0x0
c0022b04:	6a 7e                	push   $0x7e
c0022b06:	e9 d6 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b0b <intr7f_stub>:
c0022b0b:	55                   	push   %ebp
c0022b0c:	6a 00                	push   $0x0
c0022b0e:	6a 7f                	push   $0x7f
c0022b10:	e9 cc fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b15 <intr80_stub>:

STUB(80, zero) STUB(81, zero) STUB(82, zero) STUB(83, zero)
c0022b15:	55                   	push   %ebp
c0022b16:	6a 00                	push   $0x0
c0022b18:	68 80 00 00 00       	push   $0x80
c0022b1d:	e9 bf fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b22 <intr81_stub>:
c0022b22:	55                   	push   %ebp
c0022b23:	6a 00                	push   $0x0
c0022b25:	68 81 00 00 00       	push   $0x81
c0022b2a:	e9 b2 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b2f <intr82_stub>:
c0022b2f:	55                   	push   %ebp
c0022b30:	6a 00                	push   $0x0
c0022b32:	68 82 00 00 00       	push   $0x82
c0022b37:	e9 a5 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b3c <intr83_stub>:
c0022b3c:	55                   	push   %ebp
c0022b3d:	6a 00                	push   $0x0
c0022b3f:	68 83 00 00 00       	push   $0x83
c0022b44:	e9 98 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b49 <intr84_stub>:
STUB(84, zero) STUB(85, zero) STUB(86, zero) STUB(87, zero)
c0022b49:	55                   	push   %ebp
c0022b4a:	6a 00                	push   $0x0
c0022b4c:	68 84 00 00 00       	push   $0x84
c0022b51:	e9 8b fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b56 <intr85_stub>:
c0022b56:	55                   	push   %ebp
c0022b57:	6a 00                	push   $0x0
c0022b59:	68 85 00 00 00       	push   $0x85
c0022b5e:	e9 7e fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b63 <intr86_stub>:
c0022b63:	55                   	push   %ebp
c0022b64:	6a 00                	push   $0x0
c0022b66:	68 86 00 00 00       	push   $0x86
c0022b6b:	e9 71 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b70 <intr87_stub>:
c0022b70:	55                   	push   %ebp
c0022b71:	6a 00                	push   $0x0
c0022b73:	68 87 00 00 00       	push   $0x87
c0022b78:	e9 64 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b7d <intr88_stub>:
STUB(88, zero) STUB(89, zero) STUB(8a, zero) STUB(8b, zero)
c0022b7d:	55                   	push   %ebp
c0022b7e:	6a 00                	push   $0x0
c0022b80:	68 88 00 00 00       	push   $0x88
c0022b85:	e9 57 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b8a <intr89_stub>:
c0022b8a:	55                   	push   %ebp
c0022b8b:	6a 00                	push   $0x0
c0022b8d:	68 89 00 00 00       	push   $0x89
c0022b92:	e9 4a fa ff ff       	jmp    c00225e1 <intr_entry>

c0022b97 <intr8a_stub>:
c0022b97:	55                   	push   %ebp
c0022b98:	6a 00                	push   $0x0
c0022b9a:	68 8a 00 00 00       	push   $0x8a
c0022b9f:	e9 3d fa ff ff       	jmp    c00225e1 <intr_entry>

c0022ba4 <intr8b_stub>:
c0022ba4:	55                   	push   %ebp
c0022ba5:	6a 00                	push   $0x0
c0022ba7:	68 8b 00 00 00       	push   $0x8b
c0022bac:	e9 30 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022bb1 <intr8c_stub>:
STUB(8c, zero) STUB(8d, zero) STUB(8e, zero) STUB(8f, zero)
c0022bb1:	55                   	push   %ebp
c0022bb2:	6a 00                	push   $0x0
c0022bb4:	68 8c 00 00 00       	push   $0x8c
c0022bb9:	e9 23 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022bbe <intr8d_stub>:
c0022bbe:	55                   	push   %ebp
c0022bbf:	6a 00                	push   $0x0
c0022bc1:	68 8d 00 00 00       	push   $0x8d
c0022bc6:	e9 16 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022bcb <intr8e_stub>:
c0022bcb:	55                   	push   %ebp
c0022bcc:	6a 00                	push   $0x0
c0022bce:	68 8e 00 00 00       	push   $0x8e
c0022bd3:	e9 09 fa ff ff       	jmp    c00225e1 <intr_entry>

c0022bd8 <intr8f_stub>:
c0022bd8:	55                   	push   %ebp
c0022bd9:	6a 00                	push   $0x0
c0022bdb:	68 8f 00 00 00       	push   $0x8f
c0022be0:	e9 fc f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022be5 <intr90_stub>:

STUB(90, zero) STUB(91, zero) STUB(92, zero) STUB(93, zero)
c0022be5:	55                   	push   %ebp
c0022be6:	6a 00                	push   $0x0
c0022be8:	68 90 00 00 00       	push   $0x90
c0022bed:	e9 ef f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022bf2 <intr91_stub>:
c0022bf2:	55                   	push   %ebp
c0022bf3:	6a 00                	push   $0x0
c0022bf5:	68 91 00 00 00       	push   $0x91
c0022bfa:	e9 e2 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022bff <intr92_stub>:
c0022bff:	55                   	push   %ebp
c0022c00:	6a 00                	push   $0x0
c0022c02:	68 92 00 00 00       	push   $0x92
c0022c07:	e9 d5 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c0c <intr93_stub>:
c0022c0c:	55                   	push   %ebp
c0022c0d:	6a 00                	push   $0x0
c0022c0f:	68 93 00 00 00       	push   $0x93
c0022c14:	e9 c8 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c19 <intr94_stub>:
STUB(94, zero) STUB(95, zero) STUB(96, zero) STUB(97, zero)
c0022c19:	55                   	push   %ebp
c0022c1a:	6a 00                	push   $0x0
c0022c1c:	68 94 00 00 00       	push   $0x94
c0022c21:	e9 bb f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c26 <intr95_stub>:
c0022c26:	55                   	push   %ebp
c0022c27:	6a 00                	push   $0x0
c0022c29:	68 95 00 00 00       	push   $0x95
c0022c2e:	e9 ae f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c33 <intr96_stub>:
c0022c33:	55                   	push   %ebp
c0022c34:	6a 00                	push   $0x0
c0022c36:	68 96 00 00 00       	push   $0x96
c0022c3b:	e9 a1 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c40 <intr97_stub>:
c0022c40:	55                   	push   %ebp
c0022c41:	6a 00                	push   $0x0
c0022c43:	68 97 00 00 00       	push   $0x97
c0022c48:	e9 94 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c4d <intr98_stub>:
STUB(98, zero) STUB(99, zero) STUB(9a, zero) STUB(9b, zero)
c0022c4d:	55                   	push   %ebp
c0022c4e:	6a 00                	push   $0x0
c0022c50:	68 98 00 00 00       	push   $0x98
c0022c55:	e9 87 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c5a <intr99_stub>:
c0022c5a:	55                   	push   %ebp
c0022c5b:	6a 00                	push   $0x0
c0022c5d:	68 99 00 00 00       	push   $0x99
c0022c62:	e9 7a f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c67 <intr9a_stub>:
c0022c67:	55                   	push   %ebp
c0022c68:	6a 00                	push   $0x0
c0022c6a:	68 9a 00 00 00       	push   $0x9a
c0022c6f:	e9 6d f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c74 <intr9b_stub>:
c0022c74:	55                   	push   %ebp
c0022c75:	6a 00                	push   $0x0
c0022c77:	68 9b 00 00 00       	push   $0x9b
c0022c7c:	e9 60 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c81 <intr9c_stub>:
STUB(9c, zero) STUB(9d, zero) STUB(9e, zero) STUB(9f, zero)
c0022c81:	55                   	push   %ebp
c0022c82:	6a 00                	push   $0x0
c0022c84:	68 9c 00 00 00       	push   $0x9c
c0022c89:	e9 53 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c8e <intr9d_stub>:
c0022c8e:	55                   	push   %ebp
c0022c8f:	6a 00                	push   $0x0
c0022c91:	68 9d 00 00 00       	push   $0x9d
c0022c96:	e9 46 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022c9b <intr9e_stub>:
c0022c9b:	55                   	push   %ebp
c0022c9c:	6a 00                	push   $0x0
c0022c9e:	68 9e 00 00 00       	push   $0x9e
c0022ca3:	e9 39 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022ca8 <intr9f_stub>:
c0022ca8:	55                   	push   %ebp
c0022ca9:	6a 00                	push   $0x0
c0022cab:	68 9f 00 00 00       	push   $0x9f
c0022cb0:	e9 2c f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022cb5 <intra0_stub>:

STUB(a0, zero) STUB(a1, zero) STUB(a2, zero) STUB(a3, zero)
c0022cb5:	55                   	push   %ebp
c0022cb6:	6a 00                	push   $0x0
c0022cb8:	68 a0 00 00 00       	push   $0xa0
c0022cbd:	e9 1f f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022cc2 <intra1_stub>:
c0022cc2:	55                   	push   %ebp
c0022cc3:	6a 00                	push   $0x0
c0022cc5:	68 a1 00 00 00       	push   $0xa1
c0022cca:	e9 12 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022ccf <intra2_stub>:
c0022ccf:	55                   	push   %ebp
c0022cd0:	6a 00                	push   $0x0
c0022cd2:	68 a2 00 00 00       	push   $0xa2
c0022cd7:	e9 05 f9 ff ff       	jmp    c00225e1 <intr_entry>

c0022cdc <intra3_stub>:
c0022cdc:	55                   	push   %ebp
c0022cdd:	6a 00                	push   $0x0
c0022cdf:	68 a3 00 00 00       	push   $0xa3
c0022ce4:	e9 f8 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022ce9 <intra4_stub>:
STUB(a4, zero) STUB(a5, zero) STUB(a6, zero) STUB(a7, zero)
c0022ce9:	55                   	push   %ebp
c0022cea:	6a 00                	push   $0x0
c0022cec:	68 a4 00 00 00       	push   $0xa4
c0022cf1:	e9 eb f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022cf6 <intra5_stub>:
c0022cf6:	55                   	push   %ebp
c0022cf7:	6a 00                	push   $0x0
c0022cf9:	68 a5 00 00 00       	push   $0xa5
c0022cfe:	e9 de f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d03 <intra6_stub>:
c0022d03:	55                   	push   %ebp
c0022d04:	6a 00                	push   $0x0
c0022d06:	68 a6 00 00 00       	push   $0xa6
c0022d0b:	e9 d1 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d10 <intra7_stub>:
c0022d10:	55                   	push   %ebp
c0022d11:	6a 00                	push   $0x0
c0022d13:	68 a7 00 00 00       	push   $0xa7
c0022d18:	e9 c4 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d1d <intra8_stub>:
STUB(a8, zero) STUB(a9, zero) STUB(aa, zero) STUB(ab, zero)
c0022d1d:	55                   	push   %ebp
c0022d1e:	6a 00                	push   $0x0
c0022d20:	68 a8 00 00 00       	push   $0xa8
c0022d25:	e9 b7 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d2a <intra9_stub>:
c0022d2a:	55                   	push   %ebp
c0022d2b:	6a 00                	push   $0x0
c0022d2d:	68 a9 00 00 00       	push   $0xa9
c0022d32:	e9 aa f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d37 <intraa_stub>:
c0022d37:	55                   	push   %ebp
c0022d38:	6a 00                	push   $0x0
c0022d3a:	68 aa 00 00 00       	push   $0xaa
c0022d3f:	e9 9d f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d44 <intrab_stub>:
c0022d44:	55                   	push   %ebp
c0022d45:	6a 00                	push   $0x0
c0022d47:	68 ab 00 00 00       	push   $0xab
c0022d4c:	e9 90 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d51 <intrac_stub>:
STUB(ac, zero) STUB(ad, zero) STUB(ae, zero) STUB(af, zero)
c0022d51:	55                   	push   %ebp
c0022d52:	6a 00                	push   $0x0
c0022d54:	68 ac 00 00 00       	push   $0xac
c0022d59:	e9 83 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d5e <intrad_stub>:
c0022d5e:	55                   	push   %ebp
c0022d5f:	6a 00                	push   $0x0
c0022d61:	68 ad 00 00 00       	push   $0xad
c0022d66:	e9 76 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d6b <intrae_stub>:
c0022d6b:	55                   	push   %ebp
c0022d6c:	6a 00                	push   $0x0
c0022d6e:	68 ae 00 00 00       	push   $0xae
c0022d73:	e9 69 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d78 <intraf_stub>:
c0022d78:	55                   	push   %ebp
c0022d79:	6a 00                	push   $0x0
c0022d7b:	68 af 00 00 00       	push   $0xaf
c0022d80:	e9 5c f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d85 <intrb0_stub>:

STUB(b0, zero) STUB(b1, zero) STUB(b2, zero) STUB(b3, zero)
c0022d85:	55                   	push   %ebp
c0022d86:	6a 00                	push   $0x0
c0022d88:	68 b0 00 00 00       	push   $0xb0
c0022d8d:	e9 4f f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d92 <intrb1_stub>:
c0022d92:	55                   	push   %ebp
c0022d93:	6a 00                	push   $0x0
c0022d95:	68 b1 00 00 00       	push   $0xb1
c0022d9a:	e9 42 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022d9f <intrb2_stub>:
c0022d9f:	55                   	push   %ebp
c0022da0:	6a 00                	push   $0x0
c0022da2:	68 b2 00 00 00       	push   $0xb2
c0022da7:	e9 35 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022dac <intrb3_stub>:
c0022dac:	55                   	push   %ebp
c0022dad:	6a 00                	push   $0x0
c0022daf:	68 b3 00 00 00       	push   $0xb3
c0022db4:	e9 28 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022db9 <intrb4_stub>:
STUB(b4, zero) STUB(b5, zero) STUB(b6, zero) STUB(b7, zero)
c0022db9:	55                   	push   %ebp
c0022dba:	6a 00                	push   $0x0
c0022dbc:	68 b4 00 00 00       	push   $0xb4
c0022dc1:	e9 1b f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022dc6 <intrb5_stub>:
c0022dc6:	55                   	push   %ebp
c0022dc7:	6a 00                	push   $0x0
c0022dc9:	68 b5 00 00 00       	push   $0xb5
c0022dce:	e9 0e f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022dd3 <intrb6_stub>:
c0022dd3:	55                   	push   %ebp
c0022dd4:	6a 00                	push   $0x0
c0022dd6:	68 b6 00 00 00       	push   $0xb6
c0022ddb:	e9 01 f8 ff ff       	jmp    c00225e1 <intr_entry>

c0022de0 <intrb7_stub>:
c0022de0:	55                   	push   %ebp
c0022de1:	6a 00                	push   $0x0
c0022de3:	68 b7 00 00 00       	push   $0xb7
c0022de8:	e9 f4 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022ded <intrb8_stub>:
STUB(b8, zero) STUB(b9, zero) STUB(ba, zero) STUB(bb, zero)
c0022ded:	55                   	push   %ebp
c0022dee:	6a 00                	push   $0x0
c0022df0:	68 b8 00 00 00       	push   $0xb8
c0022df5:	e9 e7 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022dfa <intrb9_stub>:
c0022dfa:	55                   	push   %ebp
c0022dfb:	6a 00                	push   $0x0
c0022dfd:	68 b9 00 00 00       	push   $0xb9
c0022e02:	e9 da f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e07 <intrba_stub>:
c0022e07:	55                   	push   %ebp
c0022e08:	6a 00                	push   $0x0
c0022e0a:	68 ba 00 00 00       	push   $0xba
c0022e0f:	e9 cd f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e14 <intrbb_stub>:
c0022e14:	55                   	push   %ebp
c0022e15:	6a 00                	push   $0x0
c0022e17:	68 bb 00 00 00       	push   $0xbb
c0022e1c:	e9 c0 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e21 <intrbc_stub>:
STUB(bc, zero) STUB(bd, zero) STUB(be, zero) STUB(bf, zero)
c0022e21:	55                   	push   %ebp
c0022e22:	6a 00                	push   $0x0
c0022e24:	68 bc 00 00 00       	push   $0xbc
c0022e29:	e9 b3 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e2e <intrbd_stub>:
c0022e2e:	55                   	push   %ebp
c0022e2f:	6a 00                	push   $0x0
c0022e31:	68 bd 00 00 00       	push   $0xbd
c0022e36:	e9 a6 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e3b <intrbe_stub>:
c0022e3b:	55                   	push   %ebp
c0022e3c:	6a 00                	push   $0x0
c0022e3e:	68 be 00 00 00       	push   $0xbe
c0022e43:	e9 99 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e48 <intrbf_stub>:
c0022e48:	55                   	push   %ebp
c0022e49:	6a 00                	push   $0x0
c0022e4b:	68 bf 00 00 00       	push   $0xbf
c0022e50:	e9 8c f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e55 <intrc0_stub>:

STUB(c0, zero) STUB(c1, zero) STUB(c2, zero) STUB(c3, zero)
c0022e55:	55                   	push   %ebp
c0022e56:	6a 00                	push   $0x0
c0022e58:	68 c0 00 00 00       	push   $0xc0
c0022e5d:	e9 7f f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e62 <intrc1_stub>:
c0022e62:	55                   	push   %ebp
c0022e63:	6a 00                	push   $0x0
c0022e65:	68 c1 00 00 00       	push   $0xc1
c0022e6a:	e9 72 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e6f <intrc2_stub>:
c0022e6f:	55                   	push   %ebp
c0022e70:	6a 00                	push   $0x0
c0022e72:	68 c2 00 00 00       	push   $0xc2
c0022e77:	e9 65 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e7c <intrc3_stub>:
c0022e7c:	55                   	push   %ebp
c0022e7d:	6a 00                	push   $0x0
c0022e7f:	68 c3 00 00 00       	push   $0xc3
c0022e84:	e9 58 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e89 <intrc4_stub>:
STUB(c4, zero) STUB(c5, zero) STUB(c6, zero) STUB(c7, zero)
c0022e89:	55                   	push   %ebp
c0022e8a:	6a 00                	push   $0x0
c0022e8c:	68 c4 00 00 00       	push   $0xc4
c0022e91:	e9 4b f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022e96 <intrc5_stub>:
c0022e96:	55                   	push   %ebp
c0022e97:	6a 00                	push   $0x0
c0022e99:	68 c5 00 00 00       	push   $0xc5
c0022e9e:	e9 3e f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022ea3 <intrc6_stub>:
c0022ea3:	55                   	push   %ebp
c0022ea4:	6a 00                	push   $0x0
c0022ea6:	68 c6 00 00 00       	push   $0xc6
c0022eab:	e9 31 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022eb0 <intrc7_stub>:
c0022eb0:	55                   	push   %ebp
c0022eb1:	6a 00                	push   $0x0
c0022eb3:	68 c7 00 00 00       	push   $0xc7
c0022eb8:	e9 24 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022ebd <intrc8_stub>:
STUB(c8, zero) STUB(c9, zero) STUB(ca, zero) STUB(cb, zero)
c0022ebd:	55                   	push   %ebp
c0022ebe:	6a 00                	push   $0x0
c0022ec0:	68 c8 00 00 00       	push   $0xc8
c0022ec5:	e9 17 f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022eca <intrc9_stub>:
c0022eca:	55                   	push   %ebp
c0022ecb:	6a 00                	push   $0x0
c0022ecd:	68 c9 00 00 00       	push   $0xc9
c0022ed2:	e9 0a f7 ff ff       	jmp    c00225e1 <intr_entry>

c0022ed7 <intrca_stub>:
c0022ed7:	55                   	push   %ebp
c0022ed8:	6a 00                	push   $0x0
c0022eda:	68 ca 00 00 00       	push   $0xca
c0022edf:	e9 fd f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022ee4 <intrcb_stub>:
c0022ee4:	55                   	push   %ebp
c0022ee5:	6a 00                	push   $0x0
c0022ee7:	68 cb 00 00 00       	push   $0xcb
c0022eec:	e9 f0 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022ef1 <intrcc_stub>:
STUB(cc, zero) STUB(cd, zero) STUB(ce, zero) STUB(cf, zero)
c0022ef1:	55                   	push   %ebp
c0022ef2:	6a 00                	push   $0x0
c0022ef4:	68 cc 00 00 00       	push   $0xcc
c0022ef9:	e9 e3 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022efe <intrcd_stub>:
c0022efe:	55                   	push   %ebp
c0022eff:	6a 00                	push   $0x0
c0022f01:	68 cd 00 00 00       	push   $0xcd
c0022f06:	e9 d6 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f0b <intrce_stub>:
c0022f0b:	55                   	push   %ebp
c0022f0c:	6a 00                	push   $0x0
c0022f0e:	68 ce 00 00 00       	push   $0xce
c0022f13:	e9 c9 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f18 <intrcf_stub>:
c0022f18:	55                   	push   %ebp
c0022f19:	6a 00                	push   $0x0
c0022f1b:	68 cf 00 00 00       	push   $0xcf
c0022f20:	e9 bc f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f25 <intrd0_stub>:

STUB(d0, zero) STUB(d1, zero) STUB(d2, zero) STUB(d3, zero)
c0022f25:	55                   	push   %ebp
c0022f26:	6a 00                	push   $0x0
c0022f28:	68 d0 00 00 00       	push   $0xd0
c0022f2d:	e9 af f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f32 <intrd1_stub>:
c0022f32:	55                   	push   %ebp
c0022f33:	6a 00                	push   $0x0
c0022f35:	68 d1 00 00 00       	push   $0xd1
c0022f3a:	e9 a2 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f3f <intrd2_stub>:
c0022f3f:	55                   	push   %ebp
c0022f40:	6a 00                	push   $0x0
c0022f42:	68 d2 00 00 00       	push   $0xd2
c0022f47:	e9 95 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f4c <intrd3_stub>:
c0022f4c:	55                   	push   %ebp
c0022f4d:	6a 00                	push   $0x0
c0022f4f:	68 d3 00 00 00       	push   $0xd3
c0022f54:	e9 88 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f59 <intrd4_stub>:
STUB(d4, zero) STUB(d5, zero) STUB(d6, zero) STUB(d7, zero)
c0022f59:	55                   	push   %ebp
c0022f5a:	6a 00                	push   $0x0
c0022f5c:	68 d4 00 00 00       	push   $0xd4
c0022f61:	e9 7b f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f66 <intrd5_stub>:
c0022f66:	55                   	push   %ebp
c0022f67:	6a 00                	push   $0x0
c0022f69:	68 d5 00 00 00       	push   $0xd5
c0022f6e:	e9 6e f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f73 <intrd6_stub>:
c0022f73:	55                   	push   %ebp
c0022f74:	6a 00                	push   $0x0
c0022f76:	68 d6 00 00 00       	push   $0xd6
c0022f7b:	e9 61 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f80 <intrd7_stub>:
c0022f80:	55                   	push   %ebp
c0022f81:	6a 00                	push   $0x0
c0022f83:	68 d7 00 00 00       	push   $0xd7
c0022f88:	e9 54 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f8d <intrd8_stub>:
STUB(d8, zero) STUB(d9, zero) STUB(da, zero) STUB(db, zero)
c0022f8d:	55                   	push   %ebp
c0022f8e:	6a 00                	push   $0x0
c0022f90:	68 d8 00 00 00       	push   $0xd8
c0022f95:	e9 47 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022f9a <intrd9_stub>:
c0022f9a:	55                   	push   %ebp
c0022f9b:	6a 00                	push   $0x0
c0022f9d:	68 d9 00 00 00       	push   $0xd9
c0022fa2:	e9 3a f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022fa7 <intrda_stub>:
c0022fa7:	55                   	push   %ebp
c0022fa8:	6a 00                	push   $0x0
c0022faa:	68 da 00 00 00       	push   $0xda
c0022faf:	e9 2d f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022fb4 <intrdb_stub>:
c0022fb4:	55                   	push   %ebp
c0022fb5:	6a 00                	push   $0x0
c0022fb7:	68 db 00 00 00       	push   $0xdb
c0022fbc:	e9 20 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022fc1 <intrdc_stub>:
STUB(dc, zero) STUB(dd, zero) STUB(de, zero) STUB(df, zero)
c0022fc1:	55                   	push   %ebp
c0022fc2:	6a 00                	push   $0x0
c0022fc4:	68 dc 00 00 00       	push   $0xdc
c0022fc9:	e9 13 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022fce <intrdd_stub>:
c0022fce:	55                   	push   %ebp
c0022fcf:	6a 00                	push   $0x0
c0022fd1:	68 dd 00 00 00       	push   $0xdd
c0022fd6:	e9 06 f6 ff ff       	jmp    c00225e1 <intr_entry>

c0022fdb <intrde_stub>:
c0022fdb:	55                   	push   %ebp
c0022fdc:	6a 00                	push   $0x0
c0022fde:	68 de 00 00 00       	push   $0xde
c0022fe3:	e9 f9 f5 ff ff       	jmp    c00225e1 <intr_entry>

c0022fe8 <intrdf_stub>:
c0022fe8:	55                   	push   %ebp
c0022fe9:	6a 00                	push   $0x0
c0022feb:	68 df 00 00 00       	push   $0xdf
c0022ff0:	e9 ec f5 ff ff       	jmp    c00225e1 <intr_entry>

c0022ff5 <intre0_stub>:

STUB(e0, zero) STUB(e1, zero) STUB(e2, zero) STUB(e3, zero)
c0022ff5:	55                   	push   %ebp
c0022ff6:	6a 00                	push   $0x0
c0022ff8:	68 e0 00 00 00       	push   $0xe0
c0022ffd:	e9 df f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023002 <intre1_stub>:
c0023002:	55                   	push   %ebp
c0023003:	6a 00                	push   $0x0
c0023005:	68 e1 00 00 00       	push   $0xe1
c002300a:	e9 d2 f5 ff ff       	jmp    c00225e1 <intr_entry>

c002300f <intre2_stub>:
c002300f:	55                   	push   %ebp
c0023010:	6a 00                	push   $0x0
c0023012:	68 e2 00 00 00       	push   $0xe2
c0023017:	e9 c5 f5 ff ff       	jmp    c00225e1 <intr_entry>

c002301c <intre3_stub>:
c002301c:	55                   	push   %ebp
c002301d:	6a 00                	push   $0x0
c002301f:	68 e3 00 00 00       	push   $0xe3
c0023024:	e9 b8 f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023029 <intre4_stub>:
STUB(e4, zero) STUB(e5, zero) STUB(e6, zero) STUB(e7, zero)
c0023029:	55                   	push   %ebp
c002302a:	6a 00                	push   $0x0
c002302c:	68 e4 00 00 00       	push   $0xe4
c0023031:	e9 ab f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023036 <intre5_stub>:
c0023036:	55                   	push   %ebp
c0023037:	6a 00                	push   $0x0
c0023039:	68 e5 00 00 00       	push   $0xe5
c002303e:	e9 9e f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023043 <intre6_stub>:
c0023043:	55                   	push   %ebp
c0023044:	6a 00                	push   $0x0
c0023046:	68 e6 00 00 00       	push   $0xe6
c002304b:	e9 91 f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023050 <intre7_stub>:
c0023050:	55                   	push   %ebp
c0023051:	6a 00                	push   $0x0
c0023053:	68 e7 00 00 00       	push   $0xe7
c0023058:	e9 84 f5 ff ff       	jmp    c00225e1 <intr_entry>

c002305d <intre8_stub>:
STUB(e8, zero) STUB(e9, zero) STUB(ea, zero) STUB(eb, zero)
c002305d:	55                   	push   %ebp
c002305e:	6a 00                	push   $0x0
c0023060:	68 e8 00 00 00       	push   $0xe8
c0023065:	e9 77 f5 ff ff       	jmp    c00225e1 <intr_entry>

c002306a <intre9_stub>:
c002306a:	55                   	push   %ebp
c002306b:	6a 00                	push   $0x0
c002306d:	68 e9 00 00 00       	push   $0xe9
c0023072:	e9 6a f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023077 <intrea_stub>:
c0023077:	55                   	push   %ebp
c0023078:	6a 00                	push   $0x0
c002307a:	68 ea 00 00 00       	push   $0xea
c002307f:	e9 5d f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023084 <intreb_stub>:
c0023084:	55                   	push   %ebp
c0023085:	6a 00                	push   $0x0
c0023087:	68 eb 00 00 00       	push   $0xeb
c002308c:	e9 50 f5 ff ff       	jmp    c00225e1 <intr_entry>

c0023091 <intrec_stub>:
STUB(ec, zero) STUB(ed, zero) STUB(ee, zero) STUB(ef, zero)
c0023091:	55                   	push   %ebp
c0023092:	6a 00                	push   $0x0
c0023094:	68 ec 00 00 00       	push   $0xec
c0023099:	e9 43 f5 ff ff       	jmp    c00225e1 <intr_entry>

c002309e <intred_stub>:
c002309e:	55                   	push   %ebp
c002309f:	6a 00                	push   $0x0
c00230a1:	68 ed 00 00 00       	push   $0xed
c00230a6:	e9 36 f5 ff ff       	jmp    c00225e1 <intr_entry>

c00230ab <intree_stub>:
c00230ab:	55                   	push   %ebp
c00230ac:	6a 00                	push   $0x0
c00230ae:	68 ee 00 00 00       	push   $0xee
c00230b3:	e9 29 f5 ff ff       	jmp    c00225e1 <intr_entry>

c00230b8 <intref_stub>:
c00230b8:	55                   	push   %ebp
c00230b9:	6a 00                	push   $0x0
c00230bb:	68 ef 00 00 00       	push   $0xef
c00230c0:	e9 1c f5 ff ff       	jmp    c00225e1 <intr_entry>

c00230c5 <intrf0_stub>:

STUB(f0, zero) STUB(f1, zero) STUB(f2, zero) STUB(f3, zero)
c00230c5:	55                   	push   %ebp
c00230c6:	6a 00                	push   $0x0
c00230c8:	68 f0 00 00 00       	push   $0xf0
c00230cd:	e9 0f f5 ff ff       	jmp    c00225e1 <intr_entry>

c00230d2 <intrf1_stub>:
c00230d2:	55                   	push   %ebp
c00230d3:	6a 00                	push   $0x0
c00230d5:	68 f1 00 00 00       	push   $0xf1
c00230da:	e9 02 f5 ff ff       	jmp    c00225e1 <intr_entry>

c00230df <intrf2_stub>:
c00230df:	55                   	push   %ebp
c00230e0:	6a 00                	push   $0x0
c00230e2:	68 f2 00 00 00       	push   $0xf2
c00230e7:	e9 f5 f4 ff ff       	jmp    c00225e1 <intr_entry>

c00230ec <intrf3_stub>:
c00230ec:	55                   	push   %ebp
c00230ed:	6a 00                	push   $0x0
c00230ef:	68 f3 00 00 00       	push   $0xf3
c00230f4:	e9 e8 f4 ff ff       	jmp    c00225e1 <intr_entry>

c00230f9 <intrf4_stub>:
STUB(f4, zero) STUB(f5, zero) STUB(f6, zero) STUB(f7, zero)
c00230f9:	55                   	push   %ebp
c00230fa:	6a 00                	push   $0x0
c00230fc:	68 f4 00 00 00       	push   $0xf4
c0023101:	e9 db f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023106 <intrf5_stub>:
c0023106:	55                   	push   %ebp
c0023107:	6a 00                	push   $0x0
c0023109:	68 f5 00 00 00       	push   $0xf5
c002310e:	e9 ce f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023113 <intrf6_stub>:
c0023113:	55                   	push   %ebp
c0023114:	6a 00                	push   $0x0
c0023116:	68 f6 00 00 00       	push   $0xf6
c002311b:	e9 c1 f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023120 <intrf7_stub>:
c0023120:	55                   	push   %ebp
c0023121:	6a 00                	push   $0x0
c0023123:	68 f7 00 00 00       	push   $0xf7
c0023128:	e9 b4 f4 ff ff       	jmp    c00225e1 <intr_entry>

c002312d <intrf8_stub>:
STUB(f8, zero) STUB(f9, zero) STUB(fa, zero) STUB(fb, zero)
c002312d:	55                   	push   %ebp
c002312e:	6a 00                	push   $0x0
c0023130:	68 f8 00 00 00       	push   $0xf8
c0023135:	e9 a7 f4 ff ff       	jmp    c00225e1 <intr_entry>

c002313a <intrf9_stub>:
c002313a:	55                   	push   %ebp
c002313b:	6a 00                	push   $0x0
c002313d:	68 f9 00 00 00       	push   $0xf9
c0023142:	e9 9a f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023147 <intrfa_stub>:
c0023147:	55                   	push   %ebp
c0023148:	6a 00                	push   $0x0
c002314a:	68 fa 00 00 00       	push   $0xfa
c002314f:	e9 8d f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023154 <intrfb_stub>:
c0023154:	55                   	push   %ebp
c0023155:	6a 00                	push   $0x0
c0023157:	68 fb 00 00 00       	push   $0xfb
c002315c:	e9 80 f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023161 <intrfc_stub>:
STUB(fc, zero) STUB(fd, zero) STUB(fe, zero) STUB(ff, zero)
c0023161:	55                   	push   %ebp
c0023162:	6a 00                	push   $0x0
c0023164:	68 fc 00 00 00       	push   $0xfc
c0023169:	e9 73 f4 ff ff       	jmp    c00225e1 <intr_entry>

c002316e <intrfd_stub>:
c002316e:	55                   	push   %ebp
c002316f:	6a 00                	push   $0x0
c0023171:	68 fd 00 00 00       	push   $0xfd
c0023176:	e9 66 f4 ff ff       	jmp    c00225e1 <intr_entry>

c002317b <intrfe_stub>:
c002317b:	55                   	push   %ebp
c002317c:	6a 00                	push   $0x0
c002317e:	68 fe 00 00 00       	push   $0xfe
c0023183:	e9 59 f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023188 <intrff_stub>:
c0023188:	55                   	push   %ebp
c0023189:	6a 00                	push   $0x0
c002318b:	68 ff 00 00 00       	push   $0xff
c0023190:	e9 4c f4 ff ff       	jmp    c00225e1 <intr_entry>

c0023195 <sema_init>:
c0023195:	55                   	push   %ebp
c0023196:	89 e5                	mov    %esp,%ebp
c0023198:	83 ec 08             	sub    $0x8,%esp
c002319b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002319f:	75 1e                	jne    c00231bf <sema_init+0x2a>
c00231a1:	83 ec 0c             	sub    $0xc,%esp
c00231a4:	68 c4 32 03 c0       	push   $0xc00332c4
c00231a9:	68 d1 32 03 c0       	push   $0xc00332d1
c00231ae:	68 98 33 03 c0       	push   $0xc0033398
c00231b3:	6a 2f                	push   $0x2f
c00231b5:	68 e8 32 03 c0       	push   $0xc00332e8
c00231ba:	e8 6b 73 00 00       	call   c002a52a <debug_panic>
c00231bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00231c2:	8b 55 0c             	mov    0xc(%ebp),%edx
c00231c5:	89 10                	mov    %edx,(%eax)
c00231c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00231ca:	83 c0 04             	add    $0x4,%eax
c00231cd:	83 ec 0c             	sub    $0xc,%esp
c00231d0:	50                   	push   %eax
c00231d1:	e8 c7 75 00 00       	call   c002a79d <list_init>
c00231d6:	83 c4 10             	add    $0x10,%esp
c00231d9:	90                   	nop
c00231da:	c9                   	leave  
c00231db:	c3                   	ret    

c00231dc <sema_down>:
c00231dc:	55                   	push   %ebp
c00231dd:	89 e5                	mov    %esp,%ebp
c00231df:	83 ec 18             	sub    $0x18,%esp
c00231e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00231e6:	75 1e                	jne    c0023206 <sema_down+0x2a>
c00231e8:	83 ec 0c             	sub    $0xc,%esp
c00231eb:	68 c4 32 03 c0       	push   $0xc00332c4
c00231f0:	68 d1 32 03 c0       	push   $0xc00332d1
c00231f5:	68 a4 33 03 c0       	push   $0xc00333a4
c00231fa:	6a 41                	push   $0x41
c00231fc:	68 e8 32 03 c0       	push   $0xc00332e8
c0023201:	e8 24 73 00 00       	call   c002a52a <debug_panic>
c0023206:	e8 4d ee ff ff       	call   c0022058 <intr_context>
c002320b:	83 f0 01             	xor    $0x1,%eax
c002320e:	84 c0                	test   %al,%al
c0023210:	75 1e                	jne    c0023230 <sema_down+0x54>
c0023212:	83 ec 0c             	sub    $0xc,%esp
c0023215:	68 fe 32 03 c0       	push   $0xc00332fe
c002321a:	68 d1 32 03 c0       	push   $0xc00332d1
c002321f:	68 a4 33 03 c0       	push   $0xc00333a4
c0023224:	6a 42                	push   $0x42
c0023226:	68 e8 32 03 c0       	push   $0xc00332e8
c002322b:	e8 fa 72 00 00       	call   c002a52a <debug_panic>
c0023230:	e8 54 eb ff ff       	call   c0021d89 <intr_disable>
c0023235:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023238:	eb 24                	jmp    c002325e <sema_down+0x82>
c002323a:	e8 69 dc ff ff       	call   c0020ea8 <thread_current>
c002323f:	8d 50 28             	lea    0x28(%eax),%edx
c0023242:	8b 45 08             	mov    0x8(%ebp),%eax
c0023245:	83 c0 04             	add    $0x4,%eax
c0023248:	6a 00                	push   $0x0
c002324a:	68 09 17 02 c0       	push   $0xc0021709
c002324f:	52                   	push   %edx
c0023250:	50                   	push   %eax
c0023251:	e8 ef 7f 00 00       	call   c002b245 <list_insert_ordered>
c0023256:	83 c4 10             	add    $0x10,%esp
c0023259:	e8 26 db ff ff       	call   c0020d84 <thread_block>
c002325e:	8b 45 08             	mov    0x8(%ebp),%eax
c0023261:	8b 00                	mov    (%eax),%eax
c0023263:	85 c0                	test   %eax,%eax
c0023265:	74 d3                	je     c002323a <sema_down+0x5e>
c0023267:	8b 45 08             	mov    0x8(%ebp),%eax
c002326a:	8b 00                	mov    (%eax),%eax
c002326c:	8d 50 ff             	lea    -0x1(%eax),%edx
c002326f:	8b 45 08             	mov    0x8(%ebp),%eax
c0023272:	89 10                	mov    %edx,(%eax)
c0023274:	83 ec 0c             	sub    $0xc,%esp
c0023277:	ff 75 f4             	pushl  -0xc(%ebp)
c002327a:	e8 b2 ea ff ff       	call   c0021d31 <intr_set_level>
c002327f:	83 c4 10             	add    $0x10,%esp
c0023282:	90                   	nop
c0023283:	c9                   	leave  
c0023284:	c3                   	ret    

c0023285 <sema_try_down>:
c0023285:	55                   	push   %ebp
c0023286:	89 e5                	mov    %esp,%ebp
c0023288:	83 ec 18             	sub    $0x18,%esp
c002328b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002328f:	75 1e                	jne    c00232af <sema_try_down+0x2a>
c0023291:	83 ec 0c             	sub    $0xc,%esp
c0023294:	68 c4 32 03 c0       	push   $0xc00332c4
c0023299:	68 d1 32 03 c0       	push   $0xc00332d1
c002329e:	68 b0 33 03 c0       	push   $0xc00333b0
c00232a3:	6a 5a                	push   $0x5a
c00232a5:	68 e8 32 03 c0       	push   $0xc00332e8
c00232aa:	e8 7b 72 00 00       	call   c002a52a <debug_panic>
c00232af:	e8 d5 ea ff ff       	call   c0021d89 <intr_disable>
c00232b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00232b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00232ba:	8b 00                	mov    (%eax),%eax
c00232bc:	85 c0                	test   %eax,%eax
c00232be:	74 13                	je     c00232d3 <sema_try_down+0x4e>
c00232c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00232c3:	8b 00                	mov    (%eax),%eax
c00232c5:	8d 50 ff             	lea    -0x1(%eax),%edx
c00232c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00232cb:	89 10                	mov    %edx,(%eax)
c00232cd:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c00232d1:	eb 04                	jmp    c00232d7 <sema_try_down+0x52>
c00232d3:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00232d7:	83 ec 0c             	sub    $0xc,%esp
c00232da:	ff 75 f0             	pushl  -0x10(%ebp)
c00232dd:	e8 4f ea ff ff       	call   c0021d31 <intr_set_level>
c00232e2:	83 c4 10             	add    $0x10,%esp
c00232e5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00232e9:	c9                   	leave  
c00232ea:	c3                   	ret    

c00232eb <sema_up>:
c00232eb:	55                   	push   %ebp
c00232ec:	89 e5                	mov    %esp,%ebp
c00232ee:	83 ec 18             	sub    $0x18,%esp
c00232f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00232f5:	75 1e                	jne    c0023315 <sema_up+0x2a>
c00232f7:	83 ec 0c             	sub    $0xc,%esp
c00232fa:	68 c4 32 03 c0       	push   $0xc00332c4
c00232ff:	68 d1 32 03 c0       	push   $0xc00332d1
c0023304:	68 c0 33 03 c0       	push   $0xc00333c0
c0023309:	6a 72                	push   $0x72
c002330b:	68 e8 32 03 c0       	push   $0xc00332e8
c0023310:	e8 15 72 00 00       	call   c002a52a <debug_panic>
c0023315:	e8 6f ea ff ff       	call   c0021d89 <intr_disable>
c002331a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002331d:	8b 45 08             	mov    0x8(%ebp),%eax
c0023320:	83 c0 04             	add    $0x4,%eax
c0023323:	83 ec 0c             	sub    $0xc,%esp
c0023326:	50                   	push   %eax
c0023327:	e8 f9 79 00 00       	call   c002ad25 <list_empty>
c002332c:	83 c4 10             	add    $0x10,%esp
c002332f:	83 f0 01             	xor    $0x1,%eax
c0023332:	84 c0                	test   %al,%al
c0023334:	74 3d                	je     c0023373 <sema_up+0x88>
c0023336:	8b 45 08             	mov    0x8(%ebp),%eax
c0023339:	83 c0 04             	add    $0x4,%eax
c002333c:	83 ec 04             	sub    $0x4,%esp
c002333f:	6a 00                	push   $0x0
c0023341:	68 09 17 02 c0       	push   $0xc0021709
c0023346:	50                   	push   %eax
c0023347:	e8 90 7d 00 00       	call   c002b0dc <list_sort>
c002334c:	83 c4 10             	add    $0x10,%esp
c002334f:	8b 45 08             	mov    0x8(%ebp),%eax
c0023352:	83 c0 04             	add    $0x4,%eax
c0023355:	83 ec 0c             	sub    $0xc,%esp
c0023358:	50                   	push   %eax
c0023359:	e8 9e 78 00 00       	call   c002abfc <list_pop_front>
c002335e:	83 c4 10             	add    $0x10,%esp
c0023361:	83 c0 04             	add    $0x4,%eax
c0023364:	83 e8 2c             	sub    $0x2c,%eax
c0023367:	83 ec 0c             	sub    $0xc,%esp
c002336a:	50                   	push   %eax
c002336b:	e8 85 da ff ff       	call   c0020df5 <thread_unblock>
c0023370:	83 c4 10             	add    $0x10,%esp
c0023373:	8b 45 08             	mov    0x8(%ebp),%eax
c0023376:	8b 00                	mov    (%eax),%eax
c0023378:	8d 50 01             	lea    0x1(%eax),%edx
c002337b:	8b 45 08             	mov    0x8(%ebp),%eax
c002337e:	89 10                	mov    %edx,(%eax)
c0023380:	e8 d3 ec ff ff       	call   c0022058 <intr_context>
c0023385:	83 f0 01             	xor    $0x1,%eax
c0023388:	84 c0                	test   %al,%al
c002338a:	74 05                	je     c0023391 <sema_up+0xa6>
c002338c:	e8 12 dc ff ff       	call   c0020fa3 <thread_yield>
c0023391:	83 ec 0c             	sub    $0xc,%esp
c0023394:	ff 75 f4             	pushl  -0xc(%ebp)
c0023397:	e8 95 e9 ff ff       	call   c0021d31 <intr_set_level>
c002339c:	83 c4 10             	add    $0x10,%esp
c002339f:	90                   	nop
c00233a0:	c9                   	leave  
c00233a1:	c3                   	ret    

c00233a2 <sema_self_test>:
c00233a2:	55                   	push   %ebp
c00233a3:	89 e5                	mov    %esp,%ebp
c00233a5:	83 ec 38             	sub    $0x38,%esp
c00233a8:	83 ec 0c             	sub    $0xc,%esp
c00233ab:	68 0f 33 03 c0       	push   $0xc003330f
c00233b0:	e8 14 4c 00 00       	call   c0027fc9 <printf>
c00233b5:	83 c4 10             	add    $0x10,%esp
c00233b8:	83 ec 08             	sub    $0x8,%esp
c00233bb:	6a 00                	push   $0x0
c00233bd:	8d 45 cc             	lea    -0x34(%ebp),%eax
c00233c0:	50                   	push   %eax
c00233c1:	e8 cf fd ff ff       	call   c0023195 <sema_init>
c00233c6:	83 c4 10             	add    $0x10,%esp
c00233c9:	83 ec 08             	sub    $0x8,%esp
c00233cc:	6a 00                	push   $0x0
c00233ce:	8d 45 cc             	lea    -0x34(%ebp),%eax
c00233d1:	83 c0 14             	add    $0x14,%eax
c00233d4:	50                   	push   %eax
c00233d5:	e8 bb fd ff ff       	call   c0023195 <sema_init>
c00233da:	83 c4 10             	add    $0x10,%esp
c00233dd:	8d 45 cc             	lea    -0x34(%ebp),%eax
c00233e0:	50                   	push   %eax
c00233e1:	68 3c 34 02 c0       	push   $0xc002343c
c00233e6:	6a 1f                	push   $0x1f
c00233e8:	68 25 33 03 c0       	push   $0xc0033325
c00233ed:	e8 87 d8 ff ff       	call   c0020c79 <thread_create>
c00233f2:	83 c4 10             	add    $0x10,%esp
c00233f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00233fc:	eb 25                	jmp    c0023423 <sema_self_test+0x81>
c00233fe:	83 ec 0c             	sub    $0xc,%esp
c0023401:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0023404:	50                   	push   %eax
c0023405:	e8 e1 fe ff ff       	call   c00232eb <sema_up>
c002340a:	83 c4 10             	add    $0x10,%esp
c002340d:	83 ec 0c             	sub    $0xc,%esp
c0023410:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0023413:	83 c0 14             	add    $0x14,%eax
c0023416:	50                   	push   %eax
c0023417:	e8 c0 fd ff ff       	call   c00231dc <sema_down>
c002341c:	83 c4 10             	add    $0x10,%esp
c002341f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0023423:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0023427:	7e d5                	jle    c00233fe <sema_self_test+0x5c>
c0023429:	83 ec 0c             	sub    $0xc,%esp
c002342c:	68 2f 33 03 c0       	push   $0xc003332f
c0023431:	e8 bb 93 00 00       	call   c002c7f1 <puts>
c0023436:	83 c4 10             	add    $0x10,%esp
c0023439:	90                   	nop
c002343a:	c9                   	leave  
c002343b:	c3                   	ret    

c002343c <sema_test_helper>:
c002343c:	55                   	push   %ebp
c002343d:	89 e5                	mov    %esp,%ebp
c002343f:	83 ec 18             	sub    $0x18,%esp
c0023442:	8b 45 08             	mov    0x8(%ebp),%eax
c0023445:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023448:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002344f:	eb 24                	jmp    c0023475 <sema_test_helper+0x39>
c0023451:	83 ec 0c             	sub    $0xc,%esp
c0023454:	ff 75 f0             	pushl  -0x10(%ebp)
c0023457:	e8 80 fd ff ff       	call   c00231dc <sema_down>
c002345c:	83 c4 10             	add    $0x10,%esp
c002345f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023462:	83 c0 14             	add    $0x14,%eax
c0023465:	83 ec 0c             	sub    $0xc,%esp
c0023468:	50                   	push   %eax
c0023469:	e8 7d fe ff ff       	call   c00232eb <sema_up>
c002346e:	83 c4 10             	add    $0x10,%esp
c0023471:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0023475:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0023479:	7e d6                	jle    c0023451 <sema_test_helper+0x15>
c002347b:	90                   	nop
c002347c:	c9                   	leave  
c002347d:	c3                   	ret    

c002347e <lock_init>:
c002347e:	55                   	push   %ebp
c002347f:	89 e5                	mov    %esp,%ebp
c0023481:	83 ec 08             	sub    $0x8,%esp
c0023484:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023488:	75 21                	jne    c00234ab <lock_init+0x2d>
c002348a:	83 ec 0c             	sub    $0xc,%esp
c002348d:	68 35 33 03 c0       	push   $0xc0033335
c0023492:	68 d1 32 03 c0       	push   $0xc00332d1
c0023497:	68 c8 33 03 c0       	push   $0xc00333c8
c002349c:	68 b8 00 00 00       	push   $0xb8
c00234a1:	68 e8 32 03 c0       	push   $0xc00332e8
c00234a6:	e8 7f 70 00 00       	call   c002a52a <debug_panic>
c00234ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00234ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c00234b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00234b7:	83 c0 04             	add    $0x4,%eax
c00234ba:	83 ec 08             	sub    $0x8,%esp
c00234bd:	6a 01                	push   $0x1
c00234bf:	50                   	push   %eax
c00234c0:	e8 d0 fc ff ff       	call   c0023195 <sema_init>
c00234c5:	83 c4 10             	add    $0x10,%esp
c00234c8:	90                   	nop
c00234c9:	c9                   	leave  
c00234ca:	c3                   	ret    

c00234cb <lock_acquire>:
c00234cb:	55                   	push   %ebp
c00234cc:	89 e5                	mov    %esp,%ebp
c00234ce:	83 ec 18             	sub    $0x18,%esp
c00234d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00234d5:	75 21                	jne    c00234f8 <lock_acquire+0x2d>
c00234d7:	83 ec 0c             	sub    $0xc,%esp
c00234da:	68 35 33 03 c0       	push   $0xc0033335
c00234df:	68 d1 32 03 c0       	push   $0xc00332d1
c00234e4:	68 d4 33 03 c0       	push   $0xc00333d4
c00234e9:	68 c9 00 00 00       	push   $0xc9
c00234ee:	68 e8 32 03 c0       	push   $0xc00332e8
c00234f3:	e8 32 70 00 00       	call   c002a52a <debug_panic>
c00234f8:	e8 5b eb ff ff       	call   c0022058 <intr_context>
c00234fd:	83 f0 01             	xor    $0x1,%eax
c0023500:	84 c0                	test   %al,%al
c0023502:	75 21                	jne    c0023525 <lock_acquire+0x5a>
c0023504:	83 ec 0c             	sub    $0xc,%esp
c0023507:	68 fe 32 03 c0       	push   $0xc00332fe
c002350c:	68 d1 32 03 c0       	push   $0xc00332d1
c0023511:	68 d4 33 03 c0       	push   $0xc00333d4
c0023516:	68 ca 00 00 00       	push   $0xca
c002351b:	68 e8 32 03 c0       	push   $0xc00332e8
c0023520:	e8 05 70 00 00       	call   c002a52a <debug_panic>
c0023525:	83 ec 0c             	sub    $0xc,%esp
c0023528:	ff 75 08             	pushl  0x8(%ebp)
c002352b:	e8 9b 02 00 00       	call   c00237cb <lock_held_by_current_thread>
c0023530:	83 c4 10             	add    $0x10,%esp
c0023533:	83 f0 01             	xor    $0x1,%eax
c0023536:	84 c0                	test   %al,%al
c0023538:	75 21                	jne    c002355b <lock_acquire+0x90>
c002353a:	83 ec 0c             	sub    $0xc,%esp
c002353d:	68 44 33 03 c0       	push   $0xc0033344
c0023542:	68 d1 32 03 c0       	push   $0xc00332d1
c0023547:	68 d4 33 03 c0       	push   $0xc00333d4
c002354c:	68 cb 00 00 00       	push   $0xcb
c0023551:	68 e8 32 03 c0       	push   $0xc00332e8
c0023556:	e8 cf 6f 00 00       	call   c002a52a <debug_panic>
c002355b:	e8 48 d9 ff ff       	call   c0020ea8 <thread_current>
c0023560:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023563:	0f b6 05 84 61 04 c0 	movzbl 0xc0046184,%eax
c002356a:	83 f0 01             	xor    $0x1,%eax
c002356d:	84 c0                	test   %al,%al
c002356f:	74 5f                	je     c00235d0 <lock_acquire+0x105>
c0023571:	8b 45 08             	mov    0x8(%ebp),%eax
c0023574:	8b 00                	mov    (%eax),%eax
c0023576:	85 c0                	test   %eax,%eax
c0023578:	74 56                	je     c00235d0 <lock_acquire+0x105>
c002357a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002357d:	8b 55 08             	mov    0x8(%ebp),%edx
c0023580:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
c0023586:	8b 45 08             	mov    0x8(%ebp),%eax
c0023589:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002358c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002358f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0023592:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023595:	eb 28                	jmp    c00235bf <lock_acquire+0xf4>
c0023597:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002359a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002359d:	89 50 20             	mov    %edx,0x20(%eax)
c00235a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00235a3:	8b 00                	mov    (%eax),%eax
c00235a5:	83 ec 0c             	sub    $0xc,%esp
c00235a8:	50                   	push   %eax
c00235a9:	e8 8c e1 ff ff       	call   c002173a <thread_donate_priority>
c00235ae:	83 c4 10             	add    $0x10,%esp
c00235b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00235b4:	8b 00                	mov    (%eax),%eax
c00235b6:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c00235bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00235bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00235c3:	74 0b                	je     c00235d0 <lock_acquire+0x105>
c00235c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00235c8:	8b 40 20             	mov    0x20(%eax),%eax
c00235cb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00235ce:	7c c7                	jl     c0023597 <lock_acquire+0xcc>
c00235d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00235d3:	83 c0 04             	add    $0x4,%eax
c00235d6:	83 ec 0c             	sub    $0xc,%esp
c00235d9:	50                   	push   %eax
c00235da:	e8 fd fb ff ff       	call   c00231dc <sema_down>
c00235df:	83 c4 10             	add    $0x10,%esp
c00235e2:	e8 a2 e7 ff ff       	call   c0021d89 <intr_disable>
c00235e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00235ea:	e8 b9 d8 ff ff       	call   c0020ea8 <thread_current>
c00235ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00235f2:	0f b6 05 84 61 04 c0 	movzbl 0xc0046184,%eax
c00235f9:	83 f0 01             	xor    $0x1,%eax
c00235fc:	84 c0                	test   %al,%al
c00235fe:	74 61                	je     c0023661 <lock_acquire+0x196>
c0023600:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023603:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c002360a:	00 00 00 
c002360d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023610:	8b 50 1c             	mov    0x1c(%eax),%edx
c0023613:	8b 45 08             	mov    0x8(%ebp),%eax
c0023616:	89 50 20             	mov    %edx,0x20(%eax)
c0023619:	8b 45 08             	mov    0x8(%ebp),%eax
c002361c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002361f:	89 10                	mov    %edx,(%eax)
c0023621:	8b 45 08             	mov    0x8(%ebp),%eax
c0023624:	8d 50 18             	lea    0x18(%eax),%edx
c0023627:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002362a:	83 c0 74             	add    $0x74,%eax
c002362d:	6a 00                	push   $0x0
c002362f:	68 dd 3a 02 c0       	push   $0xc0023add
c0023634:	52                   	push   %edx
c0023635:	50                   	push   %eax
c0023636:	e8 0a 7c 00 00       	call   c002b245 <list_insert_ordered>
c002363b:	83 c4 10             	add    $0x10,%esp
c002363e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023641:	8b 50 1c             	mov    0x1c(%eax),%edx
c0023644:	8b 45 08             	mov    0x8(%ebp),%eax
c0023647:	8b 40 20             	mov    0x20(%eax),%eax
c002364a:	39 c2                	cmp    %eax,%edx
c002364c:	7d 1b                	jge    c0023669 <lock_acquire+0x19e>
c002364e:	8b 45 08             	mov    0x8(%ebp),%eax
c0023651:	8b 50 20             	mov    0x20(%eax),%edx
c0023654:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023657:	89 50 1c             	mov    %edx,0x1c(%eax)
c002365a:	e8 44 d9 ff ff       	call   c0020fa3 <thread_yield>
c002365f:	eb 08                	jmp    c0023669 <lock_acquire+0x19e>
c0023661:	8b 45 08             	mov    0x8(%ebp),%eax
c0023664:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0023667:	89 10                	mov    %edx,(%eax)
c0023669:	83 ec 0c             	sub    $0xc,%esp
c002366c:	ff 75 e8             	pushl  -0x18(%ebp)
c002366f:	e8 bd e6 ff ff       	call   c0021d31 <intr_set_level>
c0023674:	83 c4 10             	add    $0x10,%esp
c0023677:	90                   	nop
c0023678:	c9                   	leave  
c0023679:	c3                   	ret    

c002367a <lock_try_acquire>:
c002367a:	55                   	push   %ebp
c002367b:	89 e5                	mov    %esp,%ebp
c002367d:	83 ec 18             	sub    $0x18,%esp
c0023680:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023684:	75 21                	jne    c00236a7 <lock_try_acquire+0x2d>
c0023686:	83 ec 0c             	sub    $0xc,%esp
c0023689:	68 35 33 03 c0       	push   $0xc0033335
c002368e:	68 d1 32 03 c0       	push   $0xc00332d1
c0023693:	68 e4 33 03 c0       	push   $0xc00333e4
c0023698:	68 03 01 00 00       	push   $0x103
c002369d:	68 e8 32 03 c0       	push   $0xc00332e8
c00236a2:	e8 83 6e 00 00       	call   c002a52a <debug_panic>
c00236a7:	83 ec 0c             	sub    $0xc,%esp
c00236aa:	ff 75 08             	pushl  0x8(%ebp)
c00236ad:	e8 19 01 00 00       	call   c00237cb <lock_held_by_current_thread>
c00236b2:	83 c4 10             	add    $0x10,%esp
c00236b5:	83 f0 01             	xor    $0x1,%eax
c00236b8:	84 c0                	test   %al,%al
c00236ba:	75 21                	jne    c00236dd <lock_try_acquire+0x63>
c00236bc:	83 ec 0c             	sub    $0xc,%esp
c00236bf:	68 44 33 03 c0       	push   $0xc0033344
c00236c4:	68 d1 32 03 c0       	push   $0xc00332d1
c00236c9:	68 e4 33 03 c0       	push   $0xc00333e4
c00236ce:	68 04 01 00 00       	push   $0x104
c00236d3:	68 e8 32 03 c0       	push   $0xc00332e8
c00236d8:	e8 4d 6e 00 00       	call   c002a52a <debug_panic>
c00236dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00236e0:	83 c0 04             	add    $0x4,%eax
c00236e3:	83 ec 0c             	sub    $0xc,%esp
c00236e6:	50                   	push   %eax
c00236e7:	e8 99 fb ff ff       	call   c0023285 <sema_try_down>
c00236ec:	83 c4 10             	add    $0x10,%esp
c00236ef:	88 45 f7             	mov    %al,-0x9(%ebp)
c00236f2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c00236f6:	74 0c                	je     c0023704 <lock_try_acquire+0x8a>
c00236f8:	e8 ab d7 ff ff       	call   c0020ea8 <thread_current>
c00236fd:	89 c2                	mov    %eax,%edx
c00236ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0023702:	89 10                	mov    %edx,(%eax)
c0023704:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0023708:	c9                   	leave  
c0023709:	c3                   	ret    

c002370a <lock_release>:
c002370a:	55                   	push   %ebp
c002370b:	89 e5                	mov    %esp,%ebp
c002370d:	83 ec 18             	sub    $0x18,%esp
c0023710:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023714:	75 21                	jne    c0023737 <lock_release+0x2d>
c0023716:	83 ec 0c             	sub    $0xc,%esp
c0023719:	68 35 33 03 c0       	push   $0xc0033335
c002371e:	68 d1 32 03 c0       	push   $0xc00332d1
c0023723:	68 f8 33 03 c0       	push   $0xc00333f8
c0023728:	68 14 01 00 00       	push   $0x114
c002372d:	68 e8 32 03 c0       	push   $0xc00332e8
c0023732:	e8 f3 6d 00 00       	call   c002a52a <debug_panic>
c0023737:	83 ec 0c             	sub    $0xc,%esp
c002373a:	ff 75 08             	pushl  0x8(%ebp)
c002373d:	e8 89 00 00 00       	call   c00237cb <lock_held_by_current_thread>
c0023742:	83 c4 10             	add    $0x10,%esp
c0023745:	84 c0                	test   %al,%al
c0023747:	75 21                	jne    c002376a <lock_release+0x60>
c0023749:	83 ec 0c             	sub    $0xc,%esp
c002374c:	68 68 33 03 c0       	push   $0xc0033368
c0023751:	68 d1 32 03 c0       	push   $0xc00332d1
c0023756:	68 f8 33 03 c0       	push   $0xc00333f8
c002375b:	68 15 01 00 00       	push   $0x115
c0023760:	68 e8 32 03 c0       	push   $0xc00332e8
c0023765:	e8 c0 6d 00 00       	call   c002a52a <debug_panic>
c002376a:	e8 1a e6 ff ff       	call   c0021d89 <intr_disable>
c002376f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023772:	0f b6 05 84 61 04 c0 	movzbl 0xc0046184,%eax
c0023779:	83 f0 01             	xor    $0x1,%eax
c002377c:	84 c0                	test   %al,%al
c002377e:	74 1f                	je     c002379f <lock_release+0x95>
c0023780:	83 ec 0c             	sub    $0xc,%esp
c0023783:	ff 75 08             	pushl  0x8(%ebp)
c0023786:	e8 25 e1 ff ff       	call   c00218b0 <thread_remove_lock>
c002378b:	83 c4 10             	add    $0x10,%esp
c002378e:	e8 15 d7 ff ff       	call   c0020ea8 <thread_current>
c0023793:	83 ec 0c             	sub    $0xc,%esp
c0023796:	50                   	push   %eax
c0023797:	e8 68 e0 ff ff       	call   c0021804 <thread_update_priority>
c002379c:	83 c4 10             	add    $0x10,%esp
c002379f:	8b 45 08             	mov    0x8(%ebp),%eax
c00237a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c00237a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00237ab:	83 c0 04             	add    $0x4,%eax
c00237ae:	83 ec 0c             	sub    $0xc,%esp
c00237b1:	50                   	push   %eax
c00237b2:	e8 34 fb ff ff       	call   c00232eb <sema_up>
c00237b7:	83 c4 10             	add    $0x10,%esp
c00237ba:	83 ec 0c             	sub    $0xc,%esp
c00237bd:	ff 75 f4             	pushl  -0xc(%ebp)
c00237c0:	e8 6c e5 ff ff       	call   c0021d31 <intr_set_level>
c00237c5:	83 c4 10             	add    $0x10,%esp
c00237c8:	90                   	nop
c00237c9:	c9                   	leave  
c00237ca:	c3                   	ret    

c00237cb <lock_held_by_current_thread>:
c00237cb:	55                   	push   %ebp
c00237cc:	89 e5                	mov    %esp,%ebp
c00237ce:	53                   	push   %ebx
c00237cf:	83 ec 04             	sub    $0x4,%esp
c00237d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00237d6:	75 21                	jne    c00237f9 <lock_held_by_current_thread+0x2e>
c00237d8:	83 ec 0c             	sub    $0xc,%esp
c00237db:	68 35 33 03 c0       	push   $0xc0033335
c00237e0:	68 d1 32 03 c0       	push   $0xc00332d1
c00237e5:	68 08 34 03 c0       	push   $0xc0033408
c00237ea:	68 2a 01 00 00       	push   $0x12a
c00237ef:	68 e8 32 03 c0       	push   $0xc00332e8
c00237f4:	e8 31 6d 00 00       	call   c002a52a <debug_panic>
c00237f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00237fc:	8b 18                	mov    (%eax),%ebx
c00237fe:	e8 a5 d6 ff ff       	call   c0020ea8 <thread_current>
c0023803:	39 c3                	cmp    %eax,%ebx
c0023805:	0f 94 c0             	sete   %al
c0023808:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002380b:	c9                   	leave  
c002380c:	c3                   	ret    

c002380d <cond_init>:
c002380d:	55                   	push   %ebp
c002380e:	89 e5                	mov    %esp,%ebp
c0023810:	83 ec 08             	sub    $0x8,%esp
c0023813:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023817:	75 21                	jne    c002383a <cond_init+0x2d>
c0023819:	83 ec 0c             	sub    $0xc,%esp
c002381c:	68 8b 33 03 c0       	push   $0xc003338b
c0023821:	68 d1 32 03 c0       	push   $0xc00332d1
c0023826:	68 24 34 03 c0       	push   $0xc0033424
c002382b:	68 3c 01 00 00       	push   $0x13c
c0023830:	68 e8 32 03 c0       	push   $0xc00332e8
c0023835:	e8 f0 6c 00 00       	call   c002a52a <debug_panic>
c002383a:	8b 45 08             	mov    0x8(%ebp),%eax
c002383d:	83 ec 0c             	sub    $0xc,%esp
c0023840:	50                   	push   %eax
c0023841:	e8 57 6f 00 00       	call   c002a79d <list_init>
c0023846:	83 c4 10             	add    $0x10,%esp
c0023849:	90                   	nop
c002384a:	c9                   	leave  
c002384b:	c3                   	ret    

c002384c <cond_wait>:
c002384c:	55                   	push   %ebp
c002384d:	89 e5                	mov    %esp,%ebp
c002384f:	83 ec 28             	sub    $0x28,%esp
c0023852:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023856:	75 21                	jne    c0023879 <cond_wait+0x2d>
c0023858:	83 ec 0c             	sub    $0xc,%esp
c002385b:	68 8b 33 03 c0       	push   $0xc003338b
c0023860:	68 d1 32 03 c0       	push   $0xc00332d1
c0023865:	68 30 34 03 c0       	push   $0xc0033430
c002386a:	68 5a 01 00 00       	push   $0x15a
c002386f:	68 e8 32 03 c0       	push   $0xc00332e8
c0023874:	e8 b1 6c 00 00       	call   c002a52a <debug_panic>
c0023879:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002387d:	75 21                	jne    c00238a0 <cond_wait+0x54>
c002387f:	83 ec 0c             	sub    $0xc,%esp
c0023882:	68 35 33 03 c0       	push   $0xc0033335
c0023887:	68 d1 32 03 c0       	push   $0xc00332d1
c002388c:	68 30 34 03 c0       	push   $0xc0033430
c0023891:	68 5b 01 00 00       	push   $0x15b
c0023896:	68 e8 32 03 c0       	push   $0xc00332e8
c002389b:	e8 8a 6c 00 00       	call   c002a52a <debug_panic>
c00238a0:	e8 b3 e7 ff ff       	call   c0022058 <intr_context>
c00238a5:	83 f0 01             	xor    $0x1,%eax
c00238a8:	84 c0                	test   %al,%al
c00238aa:	75 21                	jne    c00238cd <cond_wait+0x81>
c00238ac:	83 ec 0c             	sub    $0xc,%esp
c00238af:	68 fe 32 03 c0       	push   $0xc00332fe
c00238b4:	68 d1 32 03 c0       	push   $0xc00332d1
c00238b9:	68 30 34 03 c0       	push   $0xc0033430
c00238be:	68 5c 01 00 00       	push   $0x15c
c00238c3:	68 e8 32 03 c0       	push   $0xc00332e8
c00238c8:	e8 5d 6c 00 00       	call   c002a52a <debug_panic>
c00238cd:	83 ec 0c             	sub    $0xc,%esp
c00238d0:	ff 75 0c             	pushl  0xc(%ebp)
c00238d3:	e8 f3 fe ff ff       	call   c00237cb <lock_held_by_current_thread>
c00238d8:	83 c4 10             	add    $0x10,%esp
c00238db:	84 c0                	test   %al,%al
c00238dd:	75 21                	jne    c0023900 <cond_wait+0xb4>
c00238df:	83 ec 0c             	sub    $0xc,%esp
c00238e2:	68 68 33 03 c0       	push   $0xc0033368
c00238e7:	68 d1 32 03 c0       	push   $0xc00332d1
c00238ec:	68 30 34 03 c0       	push   $0xc0033430
c00238f1:	68 5d 01 00 00       	push   $0x15d
c00238f6:	68 e8 32 03 c0       	push   $0xc00332e8
c00238fb:	e8 2a 6c 00 00       	call   c002a52a <debug_panic>
c0023900:	83 ec 08             	sub    $0x8,%esp
c0023903:	6a 00                	push   $0x0
c0023905:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0023908:	83 c0 08             	add    $0x8,%eax
c002390b:	50                   	push   %eax
c002390c:	e8 84 f8 ff ff       	call   c0023195 <sema_init>
c0023911:	83 c4 10             	add    $0x10,%esp
c0023914:	8b 45 08             	mov    0x8(%ebp),%eax
c0023917:	83 ec 08             	sub    $0x8,%esp
c002391a:	8d 55 dc             	lea    -0x24(%ebp),%edx
c002391d:	52                   	push   %edx
c002391e:	50                   	push   %eax
c002391f:	e8 59 72 00 00       	call   c002ab7d <list_push_back>
c0023924:	83 c4 10             	add    $0x10,%esp
c0023927:	83 ec 0c             	sub    $0xc,%esp
c002392a:	ff 75 0c             	pushl  0xc(%ebp)
c002392d:	e8 d8 fd ff ff       	call   c002370a <lock_release>
c0023932:	83 c4 10             	add    $0x10,%esp
c0023935:	83 ec 0c             	sub    $0xc,%esp
c0023938:	8d 45 dc             	lea    -0x24(%ebp),%eax
c002393b:	83 c0 08             	add    $0x8,%eax
c002393e:	50                   	push   %eax
c002393f:	e8 98 f8 ff ff       	call   c00231dc <sema_down>
c0023944:	83 c4 10             	add    $0x10,%esp
c0023947:	83 ec 0c             	sub    $0xc,%esp
c002394a:	ff 75 0c             	pushl  0xc(%ebp)
c002394d:	e8 79 fb ff ff       	call   c00234cb <lock_acquire>
c0023952:	83 c4 10             	add    $0x10,%esp
c0023955:	90                   	nop
c0023956:	c9                   	leave  
c0023957:	c3                   	ret    

c0023958 <cond_signal>:
c0023958:	55                   	push   %ebp
c0023959:	89 e5                	mov    %esp,%ebp
c002395b:	83 ec 08             	sub    $0x8,%esp
c002395e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023962:	75 21                	jne    c0023985 <cond_signal+0x2d>
c0023964:	83 ec 0c             	sub    $0xc,%esp
c0023967:	68 8b 33 03 c0       	push   $0xc003338b
c002396c:	68 d1 32 03 c0       	push   $0xc00332d1
c0023971:	68 3c 34 03 c0       	push   $0xc003343c
c0023976:	68 70 01 00 00       	push   $0x170
c002397b:	68 e8 32 03 c0       	push   $0xc00332e8
c0023980:	e8 a5 6b 00 00       	call   c002a52a <debug_panic>
c0023985:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0023989:	75 21                	jne    c00239ac <cond_signal+0x54>
c002398b:	83 ec 0c             	sub    $0xc,%esp
c002398e:	68 35 33 03 c0       	push   $0xc0033335
c0023993:	68 d1 32 03 c0       	push   $0xc00332d1
c0023998:	68 3c 34 03 c0       	push   $0xc003343c
c002399d:	68 71 01 00 00       	push   $0x171
c00239a2:	68 e8 32 03 c0       	push   $0xc00332e8
c00239a7:	e8 7e 6b 00 00       	call   c002a52a <debug_panic>
c00239ac:	e8 a7 e6 ff ff       	call   c0022058 <intr_context>
c00239b1:	83 f0 01             	xor    $0x1,%eax
c00239b4:	84 c0                	test   %al,%al
c00239b6:	75 21                	jne    c00239d9 <cond_signal+0x81>
c00239b8:	83 ec 0c             	sub    $0xc,%esp
c00239bb:	68 fe 32 03 c0       	push   $0xc00332fe
c00239c0:	68 d1 32 03 c0       	push   $0xc00332d1
c00239c5:	68 3c 34 03 c0       	push   $0xc003343c
c00239ca:	68 72 01 00 00       	push   $0x172
c00239cf:	68 e8 32 03 c0       	push   $0xc00332e8
c00239d4:	e8 51 6b 00 00       	call   c002a52a <debug_panic>
c00239d9:	83 ec 0c             	sub    $0xc,%esp
c00239dc:	ff 75 0c             	pushl  0xc(%ebp)
c00239df:	e8 e7 fd ff ff       	call   c00237cb <lock_held_by_current_thread>
c00239e4:	83 c4 10             	add    $0x10,%esp
c00239e7:	84 c0                	test   %al,%al
c00239e9:	75 21                	jne    c0023a0c <cond_signal+0xb4>
c00239eb:	83 ec 0c             	sub    $0xc,%esp
c00239ee:	68 68 33 03 c0       	push   $0xc0033368
c00239f3:	68 d1 32 03 c0       	push   $0xc00332d1
c00239f8:	68 3c 34 03 c0       	push   $0xc003343c
c00239fd:	68 73 01 00 00       	push   $0x173
c0023a02:	68 e8 32 03 c0       	push   $0xc00332e8
c0023a07:	e8 1e 6b 00 00       	call   c002a52a <debug_panic>
c0023a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0023a0f:	83 ec 0c             	sub    $0xc,%esp
c0023a12:	50                   	push   %eax
c0023a13:	e8 0d 73 00 00       	call   c002ad25 <list_empty>
c0023a18:	83 c4 10             	add    $0x10,%esp
c0023a1b:	83 f0 01             	xor    $0x1,%eax
c0023a1e:	84 c0                	test   %al,%al
c0023a20:	74 3a                	je     c0023a5c <cond_signal+0x104>
c0023a22:	8b 45 08             	mov    0x8(%ebp),%eax
c0023a25:	83 ec 04             	sub    $0x4,%esp
c0023a28:	6a 00                	push   $0x0
c0023a2a:	68 0e 3b 02 c0       	push   $0xc0023b0e
c0023a2f:	50                   	push   %eax
c0023a30:	e8 a7 76 00 00       	call   c002b0dc <list_sort>
c0023a35:	83 c4 10             	add    $0x10,%esp
c0023a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0023a3b:	83 ec 0c             	sub    $0xc,%esp
c0023a3e:	50                   	push   %eax
c0023a3f:	e8 b8 71 00 00       	call   c002abfc <list_pop_front>
c0023a44:	83 c4 10             	add    $0x10,%esp
c0023a47:	83 c0 04             	add    $0x4,%eax
c0023a4a:	83 e8 04             	sub    $0x4,%eax
c0023a4d:	83 c0 08             	add    $0x8,%eax
c0023a50:	83 ec 0c             	sub    $0xc,%esp
c0023a53:	50                   	push   %eax
c0023a54:	e8 92 f8 ff ff       	call   c00232eb <sema_up>
c0023a59:	83 c4 10             	add    $0x10,%esp
c0023a5c:	90                   	nop
c0023a5d:	c9                   	leave  
c0023a5e:	c3                   	ret    

c0023a5f <cond_broadcast>:
c0023a5f:	55                   	push   %ebp
c0023a60:	89 e5                	mov    %esp,%ebp
c0023a62:	83 ec 08             	sub    $0x8,%esp
c0023a65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023a69:	75 21                	jne    c0023a8c <cond_broadcast+0x2d>
c0023a6b:	83 ec 0c             	sub    $0xc,%esp
c0023a6e:	68 8b 33 03 c0       	push   $0xc003338b
c0023a73:	68 d1 32 03 c0       	push   $0xc00332d1
c0023a78:	68 48 34 03 c0       	push   $0xc0033448
c0023a7d:	68 86 01 00 00       	push   $0x186
c0023a82:	68 e8 32 03 c0       	push   $0xc00332e8
c0023a87:	e8 9e 6a 00 00       	call   c002a52a <debug_panic>
c0023a8c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0023a90:	75 32                	jne    c0023ac4 <cond_broadcast+0x65>
c0023a92:	83 ec 0c             	sub    $0xc,%esp
c0023a95:	68 35 33 03 c0       	push   $0xc0033335
c0023a9a:	68 d1 32 03 c0       	push   $0xc00332d1
c0023a9f:	68 48 34 03 c0       	push   $0xc0033448
c0023aa4:	68 87 01 00 00       	push   $0x187
c0023aa9:	68 e8 32 03 c0       	push   $0xc00332e8
c0023aae:	e8 77 6a 00 00       	call   c002a52a <debug_panic>
c0023ab3:	83 ec 08             	sub    $0x8,%esp
c0023ab6:	ff 75 0c             	pushl  0xc(%ebp)
c0023ab9:	ff 75 08             	pushl  0x8(%ebp)
c0023abc:	e8 97 fe ff ff       	call   c0023958 <cond_signal>
c0023ac1:	83 c4 10             	add    $0x10,%esp
c0023ac4:	8b 45 08             	mov    0x8(%ebp),%eax
c0023ac7:	83 ec 0c             	sub    $0xc,%esp
c0023aca:	50                   	push   %eax
c0023acb:	e8 55 72 00 00       	call   c002ad25 <list_empty>
c0023ad0:	83 c4 10             	add    $0x10,%esp
c0023ad3:	83 f0 01             	xor    $0x1,%eax
c0023ad6:	84 c0                	test   %al,%al
c0023ad8:	75 d9                	jne    c0023ab3 <cond_broadcast+0x54>
c0023ada:	90                   	nop
c0023adb:	c9                   	leave  
c0023adc:	c3                   	ret    

c0023add <lock_priority_cmp>:
c0023add:	55                   	push   %ebp
c0023ade:	89 e5                	mov    %esp,%ebp
c0023ae0:	83 ec 10             	sub    $0x10,%esp
c0023ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0023ae6:	83 c0 04             	add    $0x4,%eax
c0023ae9:	83 e8 1c             	sub    $0x1c,%eax
c0023aec:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0023aef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023af2:	83 c0 04             	add    $0x4,%eax
c0023af5:	83 e8 1c             	sub    $0x1c,%eax
c0023af8:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0023afb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0023afe:	8b 50 20             	mov    0x20(%eax),%edx
c0023b01:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0023b04:	8b 40 20             	mov    0x20(%eax),%eax
c0023b07:	39 c2                	cmp    %eax,%edx
c0023b09:	0f 9f c0             	setg   %al
c0023b0c:	c9                   	leave  
c0023b0d:	c3                   	ret    

c0023b0e <cond_sema_cmp>:
c0023b0e:	55                   	push   %ebp
c0023b0f:	89 e5                	mov    %esp,%ebp
c0023b11:	83 ec 18             	sub    $0x18,%esp
c0023b14:	8b 45 08             	mov    0x8(%ebp),%eax
c0023b17:	83 c0 04             	add    $0x4,%eax
c0023b1a:	83 e8 04             	sub    $0x4,%eax
c0023b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023b20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023b23:	83 c0 04             	add    $0x4,%eax
c0023b26:	83 e8 04             	sub    $0x4,%eax
c0023b29:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023b2f:	83 c0 0c             	add    $0xc,%eax
c0023b32:	83 ec 0c             	sub    $0xc,%esp
c0023b35:	50                   	push   %eax
c0023b36:	e8 15 71 00 00       	call   c002ac50 <list_front>
c0023b3b:	83 c4 10             	add    $0x10,%esp
c0023b3e:	83 c0 04             	add    $0x4,%eax
c0023b41:	83 e8 2c             	sub    $0x2c,%eax
c0023b44:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023b4a:	83 c0 0c             	add    $0xc,%eax
c0023b4d:	83 ec 0c             	sub    $0xc,%esp
c0023b50:	50                   	push   %eax
c0023b51:	e8 fa 70 00 00       	call   c002ac50 <list_front>
c0023b56:	83 c4 10             	add    $0x10,%esp
c0023b59:	83 c0 04             	add    $0x4,%eax
c0023b5c:	83 e8 2c             	sub    $0x2c,%eax
c0023b5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0023b62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0023b65:	8b 50 1c             	mov    0x1c(%eax),%edx
c0023b68:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0023b6b:	8b 40 1c             	mov    0x1c(%eax),%eax
c0023b6e:	39 c2                	cmp    %eax,%edx
c0023b70:	0f 9f c0             	setg   %al
c0023b73:	c9                   	leave  
c0023b74:	c3                   	ret    

c0023b75 <lock_update_priority>:
c0023b75:	55                   	push   %ebp
c0023b76:	89 e5                	mov    %esp,%ebp
c0023b78:	83 ec 18             	sub    $0x18,%esp
c0023b7b:	e8 09 e2 ff ff       	call   c0021d89 <intr_disable>
c0023b80:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023b83:	8b 45 08             	mov    0x8(%ebp),%eax
c0023b86:	83 c0 08             	add    $0x8,%eax
c0023b89:	83 ec 0c             	sub    $0xc,%esp
c0023b8c:	50                   	push   %eax
c0023b8d:	e8 93 71 00 00       	call   c002ad25 <list_empty>
c0023b92:	83 c4 10             	add    $0x10,%esp
c0023b95:	84 c0                	test   %al,%al
c0023b97:	74 0c                	je     c0023ba5 <lock_update_priority+0x30>
c0023b99:	8b 45 08             	mov    0x8(%ebp),%eax
c0023b9c:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0023ba3:	eb 21                	jmp    c0023bc6 <lock_update_priority+0x51>
c0023ba5:	8b 45 08             	mov    0x8(%ebp),%eax
c0023ba8:	83 c0 08             	add    $0x8,%eax
c0023bab:	83 ec 0c             	sub    $0xc,%esp
c0023bae:	50                   	push   %eax
c0023baf:	e8 9c 70 00 00       	call   c002ac50 <list_front>
c0023bb4:	83 c4 10             	add    $0x10,%esp
c0023bb7:	83 c0 04             	add    $0x4,%eax
c0023bba:	83 e8 2c             	sub    $0x2c,%eax
c0023bbd:	8b 50 1c             	mov    0x1c(%eax),%edx
c0023bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0023bc3:	89 50 20             	mov    %edx,0x20(%eax)
c0023bc6:	83 ec 0c             	sub    $0xc,%esp
c0023bc9:	ff 75 f4             	pushl  -0xc(%ebp)
c0023bcc:	e8 60 e1 ff ff       	call   c0021d31 <intr_set_level>
c0023bd1:	83 c4 10             	add    $0x10,%esp
c0023bd4:	90                   	nop
c0023bd5:	c9                   	leave  
c0023bd6:	c3                   	ret    

c0023bd7 <pg_ofs>:
c0023bd7:	55                   	push   %ebp
c0023bd8:	89 e5                	mov    %esp,%ebp
c0023bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0023bdd:	25 ff 0f 00 00       	and    $0xfff,%eax
c0023be2:	5d                   	pop    %ebp
c0023be3:	c3                   	ret    

c0023be4 <pg_no>:
c0023be4:	55                   	push   %ebp
c0023be5:	89 e5                	mov    %esp,%ebp
c0023be7:	8b 45 08             	mov    0x8(%ebp),%eax
c0023bea:	c1 e8 0c             	shr    $0xc,%eax
c0023bed:	5d                   	pop    %ebp
c0023bee:	c3                   	ret    

c0023bef <ptov>:
c0023bef:	55                   	push   %ebp
c0023bf0:	89 e5                	mov    %esp,%ebp
c0023bf2:	83 ec 08             	sub    $0x8,%esp
c0023bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0023bf8:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c0023bfd:	76 1e                	jbe    c0023c1d <ptov+0x2e>
c0023bff:	83 ec 0c             	sub    $0xc,%esp
c0023c02:	68 58 34 03 c0       	push   $0xc0033458
c0023c07:	68 73 34 03 c0       	push   $0xc0033473
c0023c0c:	68 90 35 03 c0       	push   $0xc0033590
c0023c11:	6a 4a                	push   $0x4a
c0023c13:	68 8a 34 03 c0       	push   $0xc003348a
c0023c18:	e8 0d 69 00 00       	call   c002a52a <debug_panic>
c0023c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c20:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0023c25:	c9                   	leave  
c0023c26:	c3                   	ret    

c0023c27 <palloc_init>:
c0023c27:	55                   	push   %ebp
c0023c28:	89 e5                	mov    %esp,%ebp
c0023c2a:	83 ec 28             	sub    $0x28,%esp
c0023c2d:	83 ec 0c             	sub    $0xc,%esp
c0023c30:	68 00 00 10 00       	push   $0x100000
c0023c35:	e8 b5 ff ff ff       	call   c0023bef <ptov>
c0023c3a:	83 c4 10             	add    $0x10,%esp
c0023c3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023c40:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c0023c45:	c1 e0 0c             	shl    $0xc,%eax
c0023c48:	83 ec 0c             	sub    $0xc,%esp
c0023c4b:	50                   	push   %eax
c0023c4c:	e8 9e ff ff ff       	call   c0023bef <ptov>
c0023c51:	83 c4 10             	add    $0x10,%esp
c0023c54:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023c57:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0023c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023c5d:	29 c2                	sub    %eax,%edx
c0023c5f:	89 d0                	mov    %edx,%eax
c0023c61:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0023c67:	85 c0                	test   %eax,%eax
c0023c69:	0f 48 c2             	cmovs  %edx,%eax
c0023c6c:	c1 f8 0c             	sar    $0xc,%eax
c0023c6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0023c72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0023c75:	d1 e8                	shr    %eax
c0023c77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023c7d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0023c80:	76 06                	jbe    c0023c88 <palloc_init+0x61>
c0023c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0023c85:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023c88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0023c8b:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0023c8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0023c91:	68 a0 34 03 c0       	push   $0xc00334a0
c0023c96:	ff 75 e4             	pushl  -0x1c(%ebp)
c0023c99:	ff 75 f0             	pushl  -0x10(%ebp)
c0023c9c:	68 40 d6 03 c0       	push   $0xc003d640
c0023ca1:	e8 6e 02 00 00       	call   c0023f14 <init_pool>
c0023ca6:	83 c4 10             	add    $0x10,%esp
c0023ca9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0023cac:	c1 e0 0c             	shl    $0xc,%eax
c0023caf:	89 c2                	mov    %eax,%edx
c0023cb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023cb4:	01 d0                	add    %edx,%eax
c0023cb6:	68 ac 34 03 c0       	push   $0xc00334ac
c0023cbb:	ff 75 f4             	pushl  -0xc(%ebp)
c0023cbe:	50                   	push   %eax
c0023cbf:	68 80 d6 03 c0       	push   $0xc003d680
c0023cc4:	e8 4b 02 00 00       	call   c0023f14 <init_pool>
c0023cc9:	83 c4 10             	add    $0x10,%esp
c0023ccc:	90                   	nop
c0023ccd:	c9                   	leave  
c0023cce:	c3                   	ret    

c0023ccf <palloc_get_multiple>:
c0023ccf:	55                   	push   %ebp
c0023cd0:	89 e5                	mov    %esp,%ebp
c0023cd2:	83 ec 18             	sub    $0x18,%esp
c0023cd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0023cd8:	83 e0 04             	and    $0x4,%eax
c0023cdb:	85 c0                	test   %eax,%eax
c0023cdd:	74 07                	je     c0023ce6 <palloc_get_multiple+0x17>
c0023cdf:	b8 80 d6 03 c0       	mov    $0xc003d680,%eax
c0023ce4:	eb 05                	jmp    c0023ceb <palloc_get_multiple+0x1c>
c0023ce6:	b8 40 d6 03 c0       	mov    $0xc003d640,%eax
c0023ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023cee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0023cf2:	75 0a                	jne    c0023cfe <palloc_get_multiple+0x2f>
c0023cf4:	b8 00 00 00 00       	mov    $0x0,%eax
c0023cf9:	e9 a3 00 00 00       	jmp    c0023da1 <palloc_get_multiple+0xd2>
c0023cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d01:	83 ec 0c             	sub    $0xc,%esp
c0023d04:	50                   	push   %eax
c0023d05:	e8 c1 f7 ff ff       	call   c00234cb <lock_acquire>
c0023d0a:	83 c4 10             	add    $0x10,%esp
c0023d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d10:	8b 40 24             	mov    0x24(%eax),%eax
c0023d13:	6a 00                	push   $0x0
c0023d15:	ff 75 0c             	pushl  0xc(%ebp)
c0023d18:	6a 00                	push   $0x0
c0023d1a:	50                   	push   %eax
c0023d1b:	e8 6a 7f 00 00       	call   c002bc8a <bitmap_scan_and_flip>
c0023d20:	83 c4 10             	add    $0x10,%esp
c0023d23:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d29:	83 ec 0c             	sub    $0xc,%esp
c0023d2c:	50                   	push   %eax
c0023d2d:	e8 d8 f9 ff ff       	call   c002370a <lock_release>
c0023d32:	83 c4 10             	add    $0x10,%esp
c0023d35:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0023d39:	74 13                	je     c0023d4e <palloc_get_multiple+0x7f>
c0023d3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023d3e:	8b 40 28             	mov    0x28(%eax),%eax
c0023d41:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0023d44:	c1 e2 0c             	shl    $0xc,%edx
c0023d47:	01 d0                	add    %edx,%eax
c0023d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023d4c:	eb 07                	jmp    c0023d55 <palloc_get_multiple+0x86>
c0023d4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0023d55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0023d59:	74 23                	je     c0023d7e <palloc_get_multiple+0xaf>
c0023d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0023d5e:	83 e0 02             	and    $0x2,%eax
c0023d61:	85 c0                	test   %eax,%eax
c0023d63:	74 39                	je     c0023d9e <palloc_get_multiple+0xcf>
c0023d65:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023d68:	c1 e0 0c             	shl    $0xc,%eax
c0023d6b:	83 ec 04             	sub    $0x4,%esp
c0023d6e:	50                   	push   %eax
c0023d6f:	6a 00                	push   $0x0
c0023d71:	ff 75 f4             	pushl  -0xc(%ebp)
c0023d74:	e8 77 5a 00 00       	call   c00297f0 <memset>
c0023d79:	83 c4 10             	add    $0x10,%esp
c0023d7c:	eb 20                	jmp    c0023d9e <palloc_get_multiple+0xcf>
c0023d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0023d81:	83 e0 01             	and    $0x1,%eax
c0023d84:	85 c0                	test   %eax,%eax
c0023d86:	74 16                	je     c0023d9e <palloc_get_multiple+0xcf>
c0023d88:	68 b6 34 03 c0       	push   $0xc00334b6
c0023d8d:	68 98 35 03 c0       	push   $0xc0033598
c0023d92:	6a 61                	push   $0x61
c0023d94:	68 cf 34 03 c0       	push   $0xc00334cf
c0023d99:	e8 8c 67 00 00       	call   c002a52a <debug_panic>
c0023d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023da1:	c9                   	leave  
c0023da2:	c3                   	ret    

c0023da3 <palloc_get_page>:
c0023da3:	55                   	push   %ebp
c0023da4:	89 e5                	mov    %esp,%ebp
c0023da6:	83 ec 08             	sub    $0x8,%esp
c0023da9:	83 ec 08             	sub    $0x8,%esp
c0023dac:	6a 01                	push   $0x1
c0023dae:	ff 75 08             	pushl  0x8(%ebp)
c0023db1:	e8 19 ff ff ff       	call   c0023ccf <palloc_get_multiple>
c0023db6:	83 c4 10             	add    $0x10,%esp
c0023db9:	c9                   	leave  
c0023dba:	c3                   	ret    

c0023dbb <palloc_free_multiple>:
c0023dbb:	55                   	push   %ebp
c0023dbc:	89 e5                	mov    %esp,%ebp
c0023dbe:	53                   	push   %ebx
c0023dbf:	83 ec 14             	sub    $0x14,%esp
c0023dc2:	ff 75 08             	pushl  0x8(%ebp)
c0023dc5:	e8 0d fe ff ff       	call   c0023bd7 <pg_ofs>
c0023dca:	83 c4 04             	add    $0x4,%esp
c0023dcd:	85 c0                	test   %eax,%eax
c0023dcf:	74 1e                	je     c0023def <palloc_free_multiple+0x34>
c0023dd1:	83 ec 0c             	sub    $0xc,%esp
c0023dd4:	68 e6 34 03 c0       	push   $0xc00334e6
c0023dd9:	68 73 34 03 c0       	push   $0xc0033473
c0023dde:	68 ac 35 03 c0       	push   $0xc00335ac
c0023de3:	6a 7b                	push   $0x7b
c0023de5:	68 cf 34 03 c0       	push   $0xc00334cf
c0023dea:	e8 3b 67 00 00       	call   c002a52a <debug_panic>
c0023def:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0023df3:	0f 84 fc 00 00 00    	je     c0023ef5 <palloc_free_multiple+0x13a>
c0023df9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0023dfd:	0f 84 f2 00 00 00    	je     c0023ef5 <palloc_free_multiple+0x13a>
c0023e03:	83 ec 08             	sub    $0x8,%esp
c0023e06:	ff 75 08             	pushl  0x8(%ebp)
c0023e09:	68 40 d6 03 c0       	push   $0xc003d640
c0023e0e:	e8 a8 01 00 00       	call   c0023fbb <page_from_pool>
c0023e13:	83 c4 10             	add    $0x10,%esp
c0023e16:	84 c0                	test   %al,%al
c0023e18:	74 09                	je     c0023e23 <palloc_free_multiple+0x68>
c0023e1a:	c7 45 f4 40 d6 03 c0 	movl   $0xc003d640,-0xc(%ebp)
c0023e21:	eb 39                	jmp    c0023e5c <palloc_free_multiple+0xa1>
c0023e23:	83 ec 08             	sub    $0x8,%esp
c0023e26:	ff 75 08             	pushl  0x8(%ebp)
c0023e29:	68 80 d6 03 c0       	push   $0xc003d680
c0023e2e:	e8 88 01 00 00       	call   c0023fbb <page_from_pool>
c0023e33:	83 c4 10             	add    $0x10,%esp
c0023e36:	84 c0                	test   %al,%al
c0023e38:	74 09                	je     c0023e43 <palloc_free_multiple+0x88>
c0023e3a:	c7 45 f4 80 d6 03 c0 	movl   $0xc003d680,-0xc(%ebp)
c0023e41:	eb 19                	jmp    c0023e5c <palloc_free_multiple+0xa1>
c0023e43:	68 fc 34 03 c0       	push   $0xc00334fc
c0023e48:	68 ac 35 03 c0       	push   $0xc00335ac
c0023e4d:	68 84 00 00 00       	push   $0x84
c0023e52:	68 cf 34 03 c0       	push   $0xc00334cf
c0023e57:	e8 ce 66 00 00       	call   c002a52a <debug_panic>
c0023e5c:	83 ec 0c             	sub    $0xc,%esp
c0023e5f:	ff 75 08             	pushl  0x8(%ebp)
c0023e62:	e8 7d fd ff ff       	call   c0023be4 <pg_no>
c0023e67:	83 c4 10             	add    $0x10,%esp
c0023e6a:	89 c3                	mov    %eax,%ebx
c0023e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023e6f:	8b 40 28             	mov    0x28(%eax),%eax
c0023e72:	83 ec 0c             	sub    $0xc,%esp
c0023e75:	50                   	push   %eax
c0023e76:	e8 69 fd ff ff       	call   c0023be4 <pg_no>
c0023e7b:	83 c4 10             	add    $0x10,%esp
c0023e7e:	29 c3                	sub    %eax,%ebx
c0023e80:	89 d8                	mov    %ebx,%eax
c0023e82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023e85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023e88:	c1 e0 0c             	shl    $0xc,%eax
c0023e8b:	83 ec 04             	sub    $0x4,%esp
c0023e8e:	50                   	push   %eax
c0023e8f:	68 cc 00 00 00       	push   $0xcc
c0023e94:	ff 75 08             	pushl  0x8(%ebp)
c0023e97:	e8 54 59 00 00       	call   c00297f0 <memset>
c0023e9c:	83 c4 10             	add    $0x10,%esp
c0023e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023ea2:	8b 40 24             	mov    0x24(%eax),%eax
c0023ea5:	83 ec 04             	sub    $0x4,%esp
c0023ea8:	ff 75 0c             	pushl  0xc(%ebp)
c0023eab:	ff 75 f0             	pushl  -0x10(%ebp)
c0023eae:	50                   	push   %eax
c0023eaf:	e8 f4 7c 00 00       	call   c002bba8 <bitmap_all>
c0023eb4:	83 c4 10             	add    $0x10,%esp
c0023eb7:	84 c0                	test   %al,%al
c0023eb9:	75 21                	jne    c0023edc <palloc_free_multiple+0x121>
c0023ebb:	83 ec 0c             	sub    $0xc,%esp
c0023ebe:	68 20 35 03 c0       	push   $0xc0033520
c0023ec3:	68 73 34 03 c0       	push   $0xc0033473
c0023ec8:	68 ac 35 03 c0       	push   $0xc00335ac
c0023ecd:	68 8c 00 00 00       	push   $0x8c
c0023ed2:	68 cf 34 03 c0       	push   $0xc00334cf
c0023ed7:	e8 4e 66 00 00       	call   c002a52a <debug_panic>
c0023edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023edf:	8b 40 24             	mov    0x24(%eax),%eax
c0023ee2:	6a 00                	push   $0x0
c0023ee4:	ff 75 0c             	pushl  0xc(%ebp)
c0023ee7:	ff 75 f0             	pushl  -0x10(%ebp)
c0023eea:	50                   	push   %eax
c0023eeb:	e8 0d 7a 00 00       	call   c002b8fd <bitmap_set_multiple>
c0023ef0:	83 c4 10             	add    $0x10,%esp
c0023ef3:	eb 01                	jmp    c0023ef6 <palloc_free_multiple+0x13b>
c0023ef5:	90                   	nop
c0023ef6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0023ef9:	c9                   	leave  
c0023efa:	c3                   	ret    

c0023efb <palloc_free_page>:
c0023efb:	55                   	push   %ebp
c0023efc:	89 e5                	mov    %esp,%ebp
c0023efe:	83 ec 08             	sub    $0x8,%esp
c0023f01:	83 ec 08             	sub    $0x8,%esp
c0023f04:	6a 01                	push   $0x1
c0023f06:	ff 75 08             	pushl  0x8(%ebp)
c0023f09:	e8 ad fe ff ff       	call   c0023dbb <palloc_free_multiple>
c0023f0e:	83 c4 10             	add    $0x10,%esp
c0023f11:	90                   	nop
c0023f12:	c9                   	leave  
c0023f13:	c3                   	ret    

c0023f14 <init_pool>:
c0023f14:	55                   	push   %ebp
c0023f15:	89 e5                	mov    %esp,%ebp
c0023f17:	83 ec 18             	sub    $0x18,%esp
c0023f1a:	83 ec 0c             	sub    $0xc,%esp
c0023f1d:	ff 75 10             	pushl  0x10(%ebp)
c0023f20:	e8 6e 77 00 00       	call   c002b693 <bitmap_buf_size>
c0023f25:	83 c4 10             	add    $0x10,%esp
c0023f28:	05 ff 0f 00 00       	add    $0xfff,%eax
c0023f2d:	c1 e8 0c             	shr    $0xc,%eax
c0023f30:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023f33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023f36:	3b 45 10             	cmp    0x10(%ebp),%eax
c0023f39:	76 1f                	jbe    c0023f5a <init_pool+0x46>
c0023f3b:	83 ec 0c             	sub    $0xc,%esp
c0023f3e:	ff 75 14             	pushl  0x14(%ebp)
c0023f41:	68 50 35 03 c0       	push   $0xc0033550
c0023f46:	68 c4 35 03 c0       	push   $0xc00335c4
c0023f4b:	68 a1 00 00 00       	push   $0xa1
c0023f50:	68 cf 34 03 c0       	push   $0xc00334cf
c0023f55:	e8 d0 65 00 00       	call   c002a52a <debug_panic>
c0023f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023f5d:	29 45 10             	sub    %eax,0x10(%ebp)
c0023f60:	83 ec 04             	sub    $0x4,%esp
c0023f63:	ff 75 14             	pushl  0x14(%ebp)
c0023f66:	ff 75 10             	pushl  0x10(%ebp)
c0023f69:	68 74 35 03 c0       	push   $0xc0033574
c0023f6e:	e8 56 40 00 00       	call   c0027fc9 <printf>
c0023f73:	83 c4 10             	add    $0x10,%esp
c0023f76:	8b 45 08             	mov    0x8(%ebp),%eax
c0023f79:	83 ec 0c             	sub    $0xc,%esp
c0023f7c:	50                   	push   %eax
c0023f7d:	e8 fc f4 ff ff       	call   c002347e <lock_init>
c0023f82:	83 c4 10             	add    $0x10,%esp
c0023f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023f88:	c1 e0 0c             	shl    $0xc,%eax
c0023f8b:	83 ec 04             	sub    $0x4,%esp
c0023f8e:	50                   	push   %eax
c0023f8f:	ff 75 0c             	pushl  0xc(%ebp)
c0023f92:	ff 75 10             	pushl  0x10(%ebp)
c0023f95:	e8 93 76 00 00       	call   c002b62d <bitmap_create_in_buf>
c0023f9a:	83 c4 10             	add    $0x10,%esp
c0023f9d:	89 c2                	mov    %eax,%edx
c0023f9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0023fa2:	89 50 24             	mov    %edx,0x24(%eax)
c0023fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0023fa8:	c1 e0 0c             	shl    $0xc,%eax
c0023fab:	89 c2                	mov    %eax,%edx
c0023fad:	8b 45 0c             	mov    0xc(%ebp),%eax
c0023fb0:	01 c2                	add    %eax,%edx
c0023fb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0023fb5:	89 50 28             	mov    %edx,0x28(%eax)
c0023fb8:	90                   	nop
c0023fb9:	c9                   	leave  
c0023fba:	c3                   	ret    

c0023fbb <page_from_pool>:
c0023fbb:	55                   	push   %ebp
c0023fbc:	89 e5                	mov    %esp,%ebp
c0023fbe:	83 ec 18             	sub    $0x18,%esp
c0023fc1:	ff 75 0c             	pushl  0xc(%ebp)
c0023fc4:	e8 1b fc ff ff       	call   c0023be4 <pg_no>
c0023fc9:	83 c4 04             	add    $0x4,%esp
c0023fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0023fcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0023fd2:	8b 40 28             	mov    0x28(%eax),%eax
c0023fd5:	50                   	push   %eax
c0023fd6:	e8 09 fc ff ff       	call   c0023be4 <pg_no>
c0023fdb:	83 c4 04             	add    $0x4,%esp
c0023fde:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0023fe1:	8b 45 08             	mov    0x8(%ebp),%eax
c0023fe4:	8b 40 24             	mov    0x24(%eax),%eax
c0023fe7:	83 ec 0c             	sub    $0xc,%esp
c0023fea:	50                   	push   %eax
c0023feb:	e8 e5 76 00 00       	call   c002b6d5 <bitmap_size>
c0023ff0:	83 c4 10             	add    $0x10,%esp
c0023ff3:	89 c2                	mov    %eax,%edx
c0023ff5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0023ff8:	01 d0                	add    %edx,%eax
c0023ffa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0023ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024000:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0024003:	72 0f                	jb     c0024014 <page_from_pool+0x59>
c0024005:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024008:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002400b:	73 07                	jae    c0024014 <page_from_pool+0x59>
c002400d:	b8 01 00 00 00       	mov    $0x1,%eax
c0024012:	eb 05                	jmp    c0024019 <page_from_pool+0x5e>
c0024014:	b8 00 00 00 00       	mov    $0x0,%eax
c0024019:	83 e0 01             	and    $0x1,%eax
c002401c:	c9                   	leave  
c002401d:	c3                   	ret    

c002401e <pg_ofs>:
c002401e:	55                   	push   %ebp
c002401f:	89 e5                	mov    %esp,%ebp
c0024021:	8b 45 08             	mov    0x8(%ebp),%eax
c0024024:	25 ff 0f 00 00       	and    $0xfff,%eax
c0024029:	5d                   	pop    %ebp
c002402a:	c3                   	ret    

c002402b <pg_round_down>:
c002402b:	55                   	push   %ebp
c002402c:	89 e5                	mov    %esp,%ebp
c002402e:	8b 45 08             	mov    0x8(%ebp),%eax
c0024031:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0024036:	5d                   	pop    %ebp
c0024037:	c3                   	ret    

c0024038 <malloc_init>:
c0024038:	55                   	push   %ebp
c0024039:	89 e5                	mov    %esp,%ebp
c002403b:	83 ec 18             	sub    $0x18,%esp
c002403e:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
c0024045:	e9 94 00 00 00       	jmp    c00240de <malloc_init+0xa6>
c002404a:	a1 18 d9 03 c0       	mov    0xc003d918,%eax
c002404f:	8d 50 01             	lea    0x1(%eax),%edx
c0024052:	89 15 18 d9 03 c0    	mov    %edx,0xc003d918
c0024058:	89 c2                	mov    %eax,%edx
c002405a:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
c0024061:	89 c2                	mov    %eax,%edx
c0024063:	89 d0                	mov    %edx,%eax
c0024065:	c1 e0 04             	shl    $0x4,%eax
c0024068:	29 d0                	sub    %edx,%eax
c002406a:	05 c0 d6 03 c0       	add    $0xc003d6c0,%eax
c002406f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024072:	a1 18 d9 03 c0       	mov    0xc003d918,%eax
c0024077:	83 f8 0a             	cmp    $0xa,%eax
c002407a:	76 1e                	jbe    c002409a <malloc_init+0x62>
c002407c:	83 ec 0c             	sub    $0xc,%esp
c002407f:	68 d0 35 03 c0       	push   $0xc00335d0
c0024084:	68 f9 35 03 c0       	push   $0xc00335f9
c0024089:	68 04 37 03 c0       	push   $0xc0033704
c002408e:	6a 4f                	push   $0x4f
c0024090:	68 10 36 03 c0       	push   $0xc0033610
c0024095:	e8 90 64 00 00       	call   c002a52a <debug_panic>
c002409a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002409d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00240a0:	89 10                	mov    %edx,(%eax)
c00240a2:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c00240a7:	ba 00 00 00 00       	mov    $0x0,%edx
c00240ac:	f7 75 f4             	divl   -0xc(%ebp)
c00240af:	89 c2                	mov    %eax,%edx
c00240b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00240b4:	89 50 04             	mov    %edx,0x4(%eax)
c00240b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00240ba:	83 c0 08             	add    $0x8,%eax
c00240bd:	83 ec 0c             	sub    $0xc,%esp
c00240c0:	50                   	push   %eax
c00240c1:	e8 d7 66 00 00       	call   c002a79d <list_init>
c00240c6:	83 c4 10             	add    $0x10,%esp
c00240c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00240cc:	83 c0 18             	add    $0x18,%eax
c00240cf:	83 ec 0c             	sub    $0xc,%esp
c00240d2:	50                   	push   %eax
c00240d3:	e8 a6 f3 ff ff       	call   c002347e <lock_init>
c00240d8:	83 c4 10             	add    $0x10,%esp
c00240db:	d1 65 f4             	shll   -0xc(%ebp)
c00240de:	81 7d f4 ff 07 00 00 	cmpl   $0x7ff,-0xc(%ebp)
c00240e5:	0f 86 5f ff ff ff    	jbe    c002404a <malloc_init+0x12>
c00240eb:	90                   	nop
c00240ec:	c9                   	leave  
c00240ed:	c3                   	ret    

c00240ee <malloc>:
c00240ee:	55                   	push   %ebp
c00240ef:	89 e5                	mov    %esp,%ebp
c00240f1:	83 ec 28             	sub    $0x28,%esp
c00240f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00240f8:	75 0a                	jne    c0024104 <malloc+0x16>
c00240fa:	b8 00 00 00 00       	mov    $0x0,%eax
c00240ff:	e9 b6 01 00 00       	jmp    c00242ba <malloc+0x1cc>
c0024104:	c7 45 f4 c0 d6 03 c0 	movl   $0xc003d6c0,-0xc(%ebp)
c002410b:	eb 0e                	jmp    c002411b <malloc+0x2d>
c002410d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024110:	8b 00                	mov    (%eax),%eax
c0024112:	3b 45 08             	cmp    0x8(%ebp),%eax
c0024115:	73 21                	jae    c0024138 <malloc+0x4a>
c0024117:	83 45 f4 3c          	addl   $0x3c,-0xc(%ebp)
c002411b:	a1 18 d9 03 c0       	mov    0xc003d918,%eax
c0024120:	c1 e0 02             	shl    $0x2,%eax
c0024123:	89 c2                	mov    %eax,%edx
c0024125:	c1 e2 04             	shl    $0x4,%edx
c0024128:	29 c2                	sub    %eax,%edx
c002412a:	89 d0                	mov    %edx,%eax
c002412c:	05 c0 d6 03 c0       	add    $0xc003d6c0,%eax
c0024131:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0024134:	77 d7                	ja     c002410d <malloc+0x1f>
c0024136:	eb 01                	jmp    c0024139 <malloc+0x4b>
c0024138:	90                   	nop
c0024139:	a1 18 d9 03 c0       	mov    0xc003d918,%eax
c002413e:	c1 e0 02             	shl    $0x2,%eax
c0024141:	89 c2                	mov    %eax,%edx
c0024143:	c1 e2 04             	shl    $0x4,%edx
c0024146:	29 c2                	sub    %eax,%edx
c0024148:	89 d0                	mov    %edx,%eax
c002414a:	05 c0 d6 03 c0       	add    $0xc003d6c0,%eax
c002414f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0024152:	75 58                	jne    c00241ac <malloc+0xbe>
c0024154:	8b 45 08             	mov    0x8(%ebp),%eax
c0024157:	05 0b 10 00 00       	add    $0x100b,%eax
c002415c:	c1 e8 0c             	shr    $0xc,%eax
c002415f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024162:	83 ec 08             	sub    $0x8,%esp
c0024165:	ff 75 ec             	pushl  -0x14(%ebp)
c0024168:	6a 00                	push   $0x0
c002416a:	e8 60 fb ff ff       	call   c0023ccf <palloc_get_multiple>
c002416f:	83 c4 10             	add    $0x10,%esp
c0024172:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0024175:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0024179:	75 0a                	jne    c0024185 <malloc+0x97>
c002417b:	b8 00 00 00 00       	mov    $0x0,%eax
c0024180:	e9 35 01 00 00       	jmp    c00242ba <malloc+0x1cc>
c0024185:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024188:	c7 00 ed 8e 54 9a    	movl   $0x9a548eed,(%eax)
c002418e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024191:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0024198:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002419b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002419e:	89 50 08             	mov    %edx,0x8(%eax)
c00241a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00241a4:	83 c0 0c             	add    $0xc,%eax
c00241a7:	e9 0e 01 00 00       	jmp    c00242ba <malloc+0x1cc>
c00241ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00241af:	83 c0 18             	add    $0x18,%eax
c00241b2:	83 ec 0c             	sub    $0xc,%esp
c00241b5:	50                   	push   %eax
c00241b6:	e8 10 f3 ff ff       	call   c00234cb <lock_acquire>
c00241bb:	83 c4 10             	add    $0x10,%esp
c00241be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00241c1:	83 c0 08             	add    $0x8,%eax
c00241c4:	83 ec 0c             	sub    $0xc,%esp
c00241c7:	50                   	push   %eax
c00241c8:	e8 58 6b 00 00       	call   c002ad25 <list_empty>
c00241cd:	83 c4 10             	add    $0x10,%esp
c00241d0:	84 c0                	test   %al,%al
c00241d2:	0f 84 92 00 00 00    	je     c002426a <malloc+0x17c>
c00241d8:	83 ec 0c             	sub    $0xc,%esp
c00241db:	6a 00                	push   $0x0
c00241dd:	e8 c1 fb ff ff       	call   c0023da3 <palloc_get_page>
c00241e2:	83 c4 10             	add    $0x10,%esp
c00241e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00241e8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00241ec:	75 1c                	jne    c002420a <malloc+0x11c>
c00241ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00241f1:	83 c0 18             	add    $0x18,%eax
c00241f4:	83 ec 0c             	sub    $0xc,%esp
c00241f7:	50                   	push   %eax
c00241f8:	e8 0d f5 ff ff       	call   c002370a <lock_release>
c00241fd:	83 c4 10             	add    $0x10,%esp
c0024200:	b8 00 00 00 00       	mov    $0x0,%eax
c0024205:	e9 b0 00 00 00       	jmp    c00242ba <malloc+0x1cc>
c002420a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002420d:	c7 00 ed 8e 54 9a    	movl   $0x9a548eed,(%eax)
c0024213:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024216:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0024219:	89 50 04             	mov    %edx,0x4(%eax)
c002421c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002421f:	8b 50 04             	mov    0x4(%eax),%edx
c0024222:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024225:	89 50 08             	mov    %edx,0x8(%eax)
c0024228:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002422f:	eb 2e                	jmp    c002425f <malloc+0x171>
c0024231:	83 ec 08             	sub    $0x8,%esp
c0024234:	ff 75 f0             	pushl  -0x10(%ebp)
c0024237:	ff 75 e8             	pushl  -0x18(%ebp)
c002423a:	e8 ea 03 00 00       	call   c0024629 <arena_to_block>
c002423f:	83 c4 10             	add    $0x10,%esp
c0024242:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0024245:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0024248:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002424b:	83 c2 08             	add    $0x8,%edx
c002424e:	83 ec 08             	sub    $0x8,%esp
c0024251:	50                   	push   %eax
c0024252:	52                   	push   %edx
c0024253:	e8 25 69 00 00       	call   c002ab7d <list_push_back>
c0024258:	83 c4 10             	add    $0x10,%esp
c002425b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002425f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024262:	8b 40 04             	mov    0x4(%eax),%eax
c0024265:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0024268:	77 c7                	ja     c0024231 <malloc+0x143>
c002426a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002426d:	83 c0 08             	add    $0x8,%eax
c0024270:	83 ec 0c             	sub    $0xc,%esp
c0024273:	50                   	push   %eax
c0024274:	e8 83 69 00 00       	call   c002abfc <list_pop_front>
c0024279:	83 c4 10             	add    $0x10,%esp
c002427c:	83 c0 04             	add    $0x4,%eax
c002427f:	83 e8 04             	sub    $0x4,%eax
c0024282:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0024285:	83 ec 0c             	sub    $0xc,%esp
c0024288:	ff 75 e0             	pushl  -0x20(%ebp)
c002428b:	e8 9b 02 00 00       	call   c002452b <block_to_arena>
c0024290:	83 c4 10             	add    $0x10,%esp
c0024293:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0024296:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024299:	8b 40 08             	mov    0x8(%eax),%eax
c002429c:	8d 50 ff             	lea    -0x1(%eax),%edx
c002429f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00242a2:	89 50 08             	mov    %edx,0x8(%eax)
c00242a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00242a8:	83 c0 18             	add    $0x18,%eax
c00242ab:	83 ec 0c             	sub    $0xc,%esp
c00242ae:	50                   	push   %eax
c00242af:	e8 56 f4 ff ff       	call   c002370a <lock_release>
c00242b4:	83 c4 10             	add    $0x10,%esp
c00242b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00242ba:	c9                   	leave  
c00242bb:	c3                   	ret    

c00242bc <calloc>:
c00242bc:	55                   	push   %ebp
c00242bd:	89 e5                	mov    %esp,%ebp
c00242bf:	83 ec 18             	sub    $0x18,%esp
c00242c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00242c5:	0f af 45 0c          	imul   0xc(%ebp),%eax
c00242c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00242cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00242cf:	3b 45 08             	cmp    0x8(%ebp),%eax
c00242d2:	72 08                	jb     c00242dc <calloc+0x20>
c00242d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00242d7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00242da:	73 07                	jae    c00242e3 <calloc+0x27>
c00242dc:	b8 00 00 00 00       	mov    $0x0,%eax
c00242e1:	eb 2d                	jmp    c0024310 <calloc+0x54>
c00242e3:	83 ec 0c             	sub    $0xc,%esp
c00242e6:	ff 75 f4             	pushl  -0xc(%ebp)
c00242e9:	e8 00 fe ff ff       	call   c00240ee <malloc>
c00242ee:	83 c4 10             	add    $0x10,%esp
c00242f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00242f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00242f8:	74 13                	je     c002430d <calloc+0x51>
c00242fa:	83 ec 04             	sub    $0x4,%esp
c00242fd:	ff 75 f4             	pushl  -0xc(%ebp)
c0024300:	6a 00                	push   $0x0
c0024302:	ff 75 f0             	pushl  -0x10(%ebp)
c0024305:	e8 e6 54 00 00       	call   c00297f0 <memset>
c002430a:	83 c4 10             	add    $0x10,%esp
c002430d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024310:	c9                   	leave  
c0024311:	c3                   	ret    

c0024312 <block_size>:
c0024312:	55                   	push   %ebp
c0024313:	89 e5                	mov    %esp,%ebp
c0024315:	53                   	push   %ebx
c0024316:	83 ec 14             	sub    $0x14,%esp
c0024319:	8b 45 08             	mov    0x8(%ebp),%eax
c002431c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002431f:	83 ec 0c             	sub    $0xc,%esp
c0024322:	ff 75 f4             	pushl  -0xc(%ebp)
c0024325:	e8 01 02 00 00       	call   c002452b <block_to_arena>
c002432a:	83 c4 10             	add    $0x10,%esp
c002432d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024330:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024333:	8b 40 04             	mov    0x4(%eax),%eax
c0024336:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024339:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002433d:	74 07                	je     c0024346 <block_size+0x34>
c002433f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0024342:	8b 00                	mov    (%eax),%eax
c0024344:	eb 1d                	jmp    c0024363 <block_size+0x51>
c0024346:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024349:	8b 40 08             	mov    0x8(%eax),%eax
c002434c:	c1 e0 0c             	shl    $0xc,%eax
c002434f:	89 c3                	mov    %eax,%ebx
c0024351:	83 ec 0c             	sub    $0xc,%esp
c0024354:	ff 75 08             	pushl  0x8(%ebp)
c0024357:	e8 c2 fc ff ff       	call   c002401e <pg_ofs>
c002435c:	83 c4 10             	add    $0x10,%esp
c002435f:	29 c3                	sub    %eax,%ebx
c0024361:	89 d8                	mov    %ebx,%eax
c0024363:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0024366:	c9                   	leave  
c0024367:	c3                   	ret    

c0024368 <realloc>:
c0024368:	55                   	push   %ebp
c0024369:	89 e5                	mov    %esp,%ebp
c002436b:	83 ec 18             	sub    $0x18,%esp
c002436e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0024372:	75 15                	jne    c0024389 <realloc+0x21>
c0024374:	83 ec 0c             	sub    $0xc,%esp
c0024377:	ff 75 08             	pushl  0x8(%ebp)
c002437a:	e8 6c 00 00 00       	call   c00243eb <free>
c002437f:	83 c4 10             	add    $0x10,%esp
c0024382:	b8 00 00 00 00       	mov    $0x0,%eax
c0024387:	eb 60                	jmp    c00243e9 <realloc+0x81>
c0024389:	83 ec 0c             	sub    $0xc,%esp
c002438c:	ff 75 0c             	pushl  0xc(%ebp)
c002438f:	e8 5a fd ff ff       	call   c00240ee <malloc>
c0024394:	83 c4 10             	add    $0x10,%esp
c0024397:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002439a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002439e:	74 46                	je     c00243e6 <realloc+0x7e>
c00243a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00243a4:	74 40                	je     c00243e6 <realloc+0x7e>
c00243a6:	83 ec 0c             	sub    $0xc,%esp
c00243a9:	ff 75 08             	pushl  0x8(%ebp)
c00243ac:	e8 61 ff ff ff       	call   c0024312 <block_size>
c00243b1:	83 c4 10             	add    $0x10,%esp
c00243b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00243b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00243ba:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c00243bd:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
c00243c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00243c4:	83 ec 04             	sub    $0x4,%esp
c00243c7:	ff 75 ec             	pushl  -0x14(%ebp)
c00243ca:	ff 75 08             	pushl  0x8(%ebp)
c00243cd:	ff 75 f4             	pushl  -0xc(%ebp)
c00243d0:	e8 15 4e 00 00       	call   c00291ea <memcpy>
c00243d5:	83 c4 10             	add    $0x10,%esp
c00243d8:	83 ec 0c             	sub    $0xc,%esp
c00243db:	ff 75 08             	pushl  0x8(%ebp)
c00243de:	e8 08 00 00 00       	call   c00243eb <free>
c00243e3:	83 c4 10             	add    $0x10,%esp
c00243e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00243e9:	c9                   	leave  
c00243ea:	c3                   	ret    

c00243eb <free>:
c00243eb:	55                   	push   %ebp
c00243ec:	89 e5                	mov    %esp,%ebp
c00243ee:	83 ec 28             	sub    $0x28,%esp
c00243f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00243f5:	0f 84 2e 01 00 00    	je     c0024529 <free+0x13e>
c00243fb:	8b 45 08             	mov    0x8(%ebp),%eax
c00243fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024401:	83 ec 0c             	sub    $0xc,%esp
c0024404:	ff 75 f0             	pushl  -0x10(%ebp)
c0024407:	e8 1f 01 00 00       	call   c002452b <block_to_arena>
c002440c:	83 c4 10             	add    $0x10,%esp
c002440f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024412:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0024415:	8b 40 04             	mov    0x4(%eax),%eax
c0024418:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002441b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c002441f:	0f 84 ee 00 00 00    	je     c0024513 <free+0x128>
c0024425:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024428:	8b 00                	mov    (%eax),%eax
c002442a:	83 ec 04             	sub    $0x4,%esp
c002442d:	50                   	push   %eax
c002442e:	68 cc 00 00 00       	push   $0xcc
c0024433:	ff 75 f0             	pushl  -0x10(%ebp)
c0024436:	e8 b5 53 00 00       	call   c00297f0 <memset>
c002443b:	83 c4 10             	add    $0x10,%esp
c002443e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024441:	83 c0 18             	add    $0x18,%eax
c0024444:	83 ec 0c             	sub    $0xc,%esp
c0024447:	50                   	push   %eax
c0024448:	e8 7e f0 ff ff       	call   c00234cb <lock_acquire>
c002444d:	83 c4 10             	add    $0x10,%esp
c0024450:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024453:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0024456:	83 c2 08             	add    $0x8,%edx
c0024459:	83 ec 08             	sub    $0x8,%esp
c002445c:	50                   	push   %eax
c002445d:	52                   	push   %edx
c002445e:	e8 f4 66 00 00       	call   c002ab57 <list_push_front>
c0024463:	83 c4 10             	add    $0x10,%esp
c0024466:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0024469:	8b 40 08             	mov    0x8(%eax),%eax
c002446c:	8d 50 01             	lea    0x1(%eax),%edx
c002446f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0024472:	89 50 08             	mov    %edx,0x8(%eax)
c0024475:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0024478:	8b 50 08             	mov    0x8(%eax),%edx
c002447b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002447e:	8b 40 04             	mov    0x4(%eax),%eax
c0024481:	39 c2                	cmp    %eax,%edx
c0024483:	72 7a                	jb     c00244ff <free+0x114>
c0024485:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0024488:	8b 50 08             	mov    0x8(%eax),%edx
c002448b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002448e:	8b 40 04             	mov    0x4(%eax),%eax
c0024491:	39 c2                	cmp    %eax,%edx
c0024493:	74 21                	je     c00244b6 <free+0xcb>
c0024495:	83 ec 0c             	sub    $0xc,%esp
c0024498:	68 28 36 03 c0       	push   $0xc0033628
c002449d:	68 f9 35 03 c0       	push   $0xc00335f9
c00244a2:	68 10 37 03 c0       	push   $0xc0033710
c00244a7:	68 f6 00 00 00       	push   $0xf6
c00244ac:	68 10 36 03 c0       	push   $0xc0033610
c00244b1:	e8 74 60 00 00       	call   c002a52a <debug_panic>
c00244b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00244bd:	eb 27                	jmp    c00244e6 <free+0xfb>
c00244bf:	83 ec 08             	sub    $0x8,%esp
c00244c2:	ff 75 f4             	pushl  -0xc(%ebp)
c00244c5:	ff 75 ec             	pushl  -0x14(%ebp)
c00244c8:	e8 5c 01 00 00       	call   c0024629 <arena_to_block>
c00244cd:	83 c4 10             	add    $0x10,%esp
c00244d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00244d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00244d6:	83 ec 0c             	sub    $0xc,%esp
c00244d9:	50                   	push   %eax
c00244da:	e8 c4 66 00 00       	call   c002aba3 <list_remove>
c00244df:	83 c4 10             	add    $0x10,%esp
c00244e2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00244e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00244e9:	8b 40 04             	mov    0x4(%eax),%eax
c00244ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00244ef:	77 ce                	ja     c00244bf <free+0xd4>
c00244f1:	83 ec 0c             	sub    $0xc,%esp
c00244f4:	ff 75 ec             	pushl  -0x14(%ebp)
c00244f7:	e8 ff f9 ff ff       	call   c0023efb <palloc_free_page>
c00244fc:	83 c4 10             	add    $0x10,%esp
c00244ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024502:	83 c0 18             	add    $0x18,%eax
c0024505:	83 ec 0c             	sub    $0xc,%esp
c0024508:	50                   	push   %eax
c0024509:	e8 fc f1 ff ff       	call   c002370a <lock_release>
c002450e:	83 c4 10             	add    $0x10,%esp
c0024511:	eb 16                	jmp    c0024529 <free+0x13e>
c0024513:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0024516:	8b 40 08             	mov    0x8(%eax),%eax
c0024519:	83 ec 08             	sub    $0x8,%esp
c002451c:	50                   	push   %eax
c002451d:	ff 75 ec             	pushl  -0x14(%ebp)
c0024520:	e8 96 f8 ff ff       	call   c0023dbb <palloc_free_multiple>
c0024525:	83 c4 10             	add    $0x10,%esp
c0024528:	90                   	nop
c0024529:	c9                   	leave  
c002452a:	c3                   	ret    

c002452b <block_to_arena>:
c002452b:	55                   	push   %ebp
c002452c:	89 e5                	mov    %esp,%ebp
c002452e:	83 ec 18             	sub    $0x18,%esp
c0024531:	ff 75 08             	pushl  0x8(%ebp)
c0024534:	e8 f2 fa ff ff       	call   c002402b <pg_round_down>
c0024539:	83 c4 04             	add    $0x4,%esp
c002453c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002453f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0024543:	75 21                	jne    c0024566 <block_to_arena+0x3b>
c0024545:	83 ec 0c             	sub    $0xc,%esp
c0024548:	68 4b 36 03 c0       	push   $0xc003364b
c002454d:	68 f9 35 03 c0       	push   $0xc00335f9
c0024552:	68 18 37 03 c0       	push   $0xc0033718
c0024557:	68 11 01 00 00       	push   $0x111
c002455c:	68 10 36 03 c0       	push   $0xc0033610
c0024561:	e8 c4 5f 00 00       	call   c002a52a <debug_panic>
c0024566:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024569:	8b 00                	mov    (%eax),%eax
c002456b:	3d ed 8e 54 9a       	cmp    $0x9a548eed,%eax
c0024570:	74 21                	je     c0024593 <block_to_arena+0x68>
c0024572:	83 ec 0c             	sub    $0xc,%esp
c0024575:	68 55 36 03 c0       	push   $0xc0033655
c002457a:	68 f9 35 03 c0       	push   $0xc00335f9
c002457f:	68 18 37 03 c0       	push   $0xc0033718
c0024584:	68 12 01 00 00       	push   $0x112
c0024589:	68 10 36 03 c0       	push   $0xc0033610
c002458e:	e8 97 5f 00 00       	call   c002a52a <debug_panic>
c0024593:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024596:	8b 40 04             	mov    0x4(%eax),%eax
c0024599:	85 c0                	test   %eax,%eax
c002459b:	74 49                	je     c00245e6 <block_to_arena+0xbb>
c002459d:	83 ec 0c             	sub    $0xc,%esp
c00245a0:	ff 75 08             	pushl  0x8(%ebp)
c00245a3:	e8 76 fa ff ff       	call   c002401e <pg_ofs>
c00245a8:	83 c4 10             	add    $0x10,%esp
c00245ab:	8d 50 f4             	lea    -0xc(%eax),%edx
c00245ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00245b1:	8b 40 04             	mov    0x4(%eax),%eax
c00245b4:	8b 08                	mov    (%eax),%ecx
c00245b6:	89 d0                	mov    %edx,%eax
c00245b8:	ba 00 00 00 00       	mov    $0x0,%edx
c00245bd:	f7 f1                	div    %ecx
c00245bf:	89 d0                	mov    %edx,%eax
c00245c1:	85 c0                	test   %eax,%eax
c00245c3:	74 21                	je     c00245e6 <block_to_arena+0xbb>
c00245c5:	83 ec 0c             	sub    $0xc,%esp
c00245c8:	68 70 36 03 c0       	push   $0xc0033670
c00245cd:	68 f9 35 03 c0       	push   $0xc00335f9
c00245d2:	68 18 37 03 c0       	push   $0xc0033718
c00245d7:	68 16 01 00 00       	push   $0x116
c00245dc:	68 10 36 03 c0       	push   $0xc0033610
c00245e1:	e8 44 5f 00 00       	call   c002a52a <debug_panic>
c00245e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00245e9:	8b 40 04             	mov    0x4(%eax),%eax
c00245ec:	85 c0                	test   %eax,%eax
c00245ee:	75 34                	jne    c0024624 <block_to_arena+0xf9>
c00245f0:	83 ec 0c             	sub    $0xc,%esp
c00245f3:	ff 75 08             	pushl  0x8(%ebp)
c00245f6:	e8 23 fa ff ff       	call   c002401e <pg_ofs>
c00245fb:	83 c4 10             	add    $0x10,%esp
c00245fe:	83 f8 0c             	cmp    $0xc,%eax
c0024601:	74 21                	je     c0024624 <block_to_arena+0xf9>
c0024603:	83 ec 0c             	sub    $0xc,%esp
c0024606:	68 b8 36 03 c0       	push   $0xc00336b8
c002460b:	68 f9 35 03 c0       	push   $0xc00335f9
c0024610:	68 18 37 03 c0       	push   $0xc0033718
c0024615:	68 17 01 00 00       	push   $0x117
c002461a:	68 10 36 03 c0       	push   $0xc0033610
c002461f:	e8 06 5f 00 00       	call   c002a52a <debug_panic>
c0024624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024627:	c9                   	leave  
c0024628:	c3                   	ret    

c0024629 <arena_to_block>:
c0024629:	55                   	push   %ebp
c002462a:	89 e5                	mov    %esp,%ebp
c002462c:	83 ec 08             	sub    $0x8,%esp
c002462f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0024633:	75 21                	jne    c0024656 <arena_to_block+0x2d>
c0024635:	83 ec 0c             	sub    $0xc,%esp
c0024638:	68 4b 36 03 c0       	push   $0xc003364b
c002463d:	68 f9 35 03 c0       	push   $0xc00335f9
c0024642:	68 28 37 03 c0       	push   $0xc0033728
c0024647:	68 20 01 00 00       	push   $0x120
c002464c:	68 10 36 03 c0       	push   $0xc0033610
c0024651:	e8 d4 5e 00 00       	call   c002a52a <debug_panic>
c0024656:	8b 45 08             	mov    0x8(%ebp),%eax
c0024659:	8b 00                	mov    (%eax),%eax
c002465b:	3d ed 8e 54 9a       	cmp    $0x9a548eed,%eax
c0024660:	74 21                	je     c0024683 <arena_to_block+0x5a>
c0024662:	83 ec 0c             	sub    $0xc,%esp
c0024665:	68 55 36 03 c0       	push   $0xc0033655
c002466a:	68 f9 35 03 c0       	push   $0xc00335f9
c002466f:	68 28 37 03 c0       	push   $0xc0033728
c0024674:	68 21 01 00 00       	push   $0x121
c0024679:	68 10 36 03 c0       	push   $0xc0033610
c002467e:	e8 a7 5e 00 00       	call   c002a52a <debug_panic>
c0024683:	8b 45 08             	mov    0x8(%ebp),%eax
c0024686:	8b 40 04             	mov    0x4(%eax),%eax
c0024689:	8b 40 04             	mov    0x4(%eax),%eax
c002468c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002468f:	77 21                	ja     c00246b2 <arena_to_block+0x89>
c0024691:	83 ec 0c             	sub    $0xc,%esp
c0024694:	68 e4 36 03 c0       	push   $0xc00336e4
c0024699:	68 f9 35 03 c0       	push   $0xc00335f9
c002469e:	68 28 37 03 c0       	push   $0xc0033728
c00246a3:	68 22 01 00 00       	push   $0x122
c00246a8:	68 10 36 03 c0       	push   $0xc0033610
c00246ad:	e8 78 5e 00 00       	call   c002a52a <debug_panic>
c00246b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00246b5:	8b 40 04             	mov    0x4(%eax),%eax
c00246b8:	8b 00                	mov    (%eax),%eax
c00246ba:	0f af 45 0c          	imul   0xc(%ebp),%eax
c00246be:	8d 50 0c             	lea    0xc(%eax),%edx
c00246c1:	8b 45 08             	mov    0x8(%ebp),%eax
c00246c4:	01 d0                	add    %edx,%eax
c00246c6:	c9                   	leave  
c00246c7:	c3                   	ret    

c00246c8 <outb>:
c00246c8:	55                   	push   %ebp
c00246c9:	89 e5                	mov    %esp,%ebp
c00246cb:	83 ec 08             	sub    $0x8,%esp
c00246ce:	8b 55 08             	mov    0x8(%ebp),%edx
c00246d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00246d4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00246d8:	88 45 f8             	mov    %al,-0x8(%ebp)
c00246db:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00246df:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00246e3:	ee                   	out    %al,(%dx)
c00246e4:	90                   	nop
c00246e5:	c9                   	leave  
c00246e6:	c3                   	ret    

c00246e7 <pit_configure_channel>:
c00246e7:	55                   	push   %ebp
c00246e8:	89 e5                	mov    %esp,%ebp
c00246ea:	83 ec 18             	sub    $0x18,%esp
c00246ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00246f1:	74 24                	je     c0024717 <pit_configure_channel+0x30>
c00246f3:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c00246f7:	74 1e                	je     c0024717 <pit_configure_channel+0x30>
c00246f9:	83 ec 0c             	sub    $0xc,%esp
c00246fc:	68 38 37 03 c0       	push   $0xc0033738
c0024701:	68 55 37 03 c0       	push   $0xc0033755
c0024706:	68 98 37 03 c0       	push   $0xc0033798
c002470b:	6a 33                	push   $0x33
c002470d:	68 6c 37 03 c0       	push   $0xc003376c
c0024712:	e8 13 5e 00 00       	call   c002a52a <debug_panic>
c0024717:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
c002471b:	74 24                	je     c0024741 <pit_configure_channel+0x5a>
c002471d:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
c0024721:	74 1e                	je     c0024741 <pit_configure_channel+0x5a>
c0024723:	83 ec 0c             	sub    $0xc,%esp
c0024726:	68 80 37 03 c0       	push   $0xc0033780
c002472b:	68 55 37 03 c0       	push   $0xc0033755
c0024730:	68 98 37 03 c0       	push   $0xc0033798
c0024735:	6a 34                	push   $0x34
c0024737:	68 6c 37 03 c0       	push   $0xc003376c
c002473c:	e8 e9 5d 00 00       	call   c002a52a <debug_panic>
c0024741:	83 7d 10 12          	cmpl   $0x12,0x10(%ebp)
c0024745:	7f 08                	jg     c002474f <pit_configure_channel+0x68>
c0024747:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c002474d:	eb 2a                	jmp    c0024779 <pit_configure_channel+0x92>
c002474f:	81 7d 10 dc 34 12 00 	cmpl   $0x1234dc,0x10(%ebp)
c0024756:	7e 08                	jle    c0024760 <pit_configure_channel+0x79>
c0024758:	66 c7 45 f6 02 00    	movw   $0x2,-0xa(%ebp)
c002475e:	eb 19                	jmp    c0024779 <pit_configure_channel+0x92>
c0024760:	8b 45 10             	mov    0x10(%ebp),%eax
c0024763:	89 c2                	mov    %eax,%edx
c0024765:	c1 ea 1f             	shr    $0x1f,%edx
c0024768:	01 d0                	add    %edx,%eax
c002476a:	d1 f8                	sar    %eax
c002476c:	05 dc 34 12 00       	add    $0x1234dc,%eax
c0024771:	99                   	cltd   
c0024772:	f7 7d 10             	idivl  0x10(%ebp)
c0024775:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0024779:	e8 0b d6 ff ff       	call   c0021d89 <intr_disable>
c002477e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024781:	8b 45 08             	mov    0x8(%ebp),%eax
c0024784:	c1 e0 06             	shl    $0x6,%eax
c0024787:	83 c8 30             	or     $0x30,%eax
c002478a:	89 c2                	mov    %eax,%edx
c002478c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002478f:	01 c0                	add    %eax,%eax
c0024791:	09 d0                	or     %edx,%eax
c0024793:	0f b6 c0             	movzbl %al,%eax
c0024796:	83 ec 08             	sub    $0x8,%esp
c0024799:	50                   	push   %eax
c002479a:	6a 43                	push   $0x43
c002479c:	e8 27 ff ff ff       	call   c00246c8 <outb>
c00247a1:	83 c4 10             	add    $0x10,%esp
c00247a4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c00247a8:	0f b6 d0             	movzbl %al,%edx
c00247ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00247ae:	83 c0 40             	add    $0x40,%eax
c00247b1:	0f b7 c0             	movzwl %ax,%eax
c00247b4:	83 ec 08             	sub    $0x8,%esp
c00247b7:	52                   	push   %edx
c00247b8:	50                   	push   %eax
c00247b9:	e8 0a ff ff ff       	call   c00246c8 <outb>
c00247be:	83 c4 10             	add    $0x10,%esp
c00247c1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c00247c5:	66 c1 e8 08          	shr    $0x8,%ax
c00247c9:	0f b6 d0             	movzbl %al,%edx
c00247cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00247cf:	83 c0 40             	add    $0x40,%eax
c00247d2:	0f b7 c0             	movzwl %ax,%eax
c00247d5:	83 ec 08             	sub    $0x8,%esp
c00247d8:	52                   	push   %edx
c00247d9:	50                   	push   %eax
c00247da:	e8 e9 fe ff ff       	call   c00246c8 <outb>
c00247df:	83 c4 10             	add    $0x10,%esp
c00247e2:	83 ec 0c             	sub    $0xc,%esp
c00247e5:	ff 75 f0             	pushl  -0x10(%ebp)
c00247e8:	e8 44 d5 ff ff       	call   c0021d31 <intr_set_level>
c00247ed:	83 c4 10             	add    $0x10,%esp
c00247f0:	90                   	nop
c00247f1:	c9                   	leave  
c00247f2:	c3                   	ret    

c00247f3 <timer_init>:
c00247f3:	55                   	push   %ebp
c00247f4:	89 e5                	mov    %esp,%ebp
c00247f6:	83 ec 08             	sub    $0x8,%esp
c00247f9:	83 ec 0c             	sub    $0xc,%esp
c00247fc:	68 2c d9 03 c0       	push   $0xc003d92c
c0024801:	e8 97 5f 00 00       	call   c002a79d <list_init>
c0024806:	83 c4 10             	add    $0x10,%esp
c0024809:	83 ec 04             	sub    $0x4,%esp
c002480c:	6a 64                	push   $0x64
c002480e:	6a 02                	push   $0x2
c0024810:	6a 00                	push   $0x0
c0024812:	e8 d0 fe ff ff       	call   c00246e7 <pit_configure_channel>
c0024817:	83 c4 10             	add    $0x10,%esp
c002481a:	83 ec 04             	sub    $0x4,%esp
c002481d:	68 b0 37 03 c0       	push   $0xc00337b0
c0024822:	68 7c 4b 02 c0       	push   $0xc0024b7c
c0024827:	6a 20                	push   $0x20
c0024829:	e8 7c d7 ff ff       	call   c0021faa <intr_register_ext>
c002482e:	83 c4 10             	add    $0x10,%esp
c0024831:	90                   	nop
c0024832:	c9                   	leave  
c0024833:	c3                   	ret    

c0024834 <timer_calibrate>:
c0024834:	55                   	push   %ebp
c0024835:	89 e5                	mov    %esp,%ebp
c0024837:	53                   	push   %ebx
c0024838:	83 ec 14             	sub    $0x14,%esp
c002483b:	e8 d4 d4 ff ff       	call   c0021d14 <intr_get_level>
c0024840:	83 f8 01             	cmp    $0x1,%eax
c0024843:	74 1e                	je     c0024863 <timer_calibrate+0x2f>
c0024845:	83 ec 0c             	sub    $0xc,%esp
c0024848:	68 bb 37 03 c0       	push   $0xc00337bb
c002484d:	68 d8 37 03 c0       	push   $0xc00337d8
c0024852:	68 68 38 03 c0       	push   $0xc0033868
c0024857:	6a 34                	push   $0x34
c0024859:	68 ef 37 03 c0       	push   $0xc00337ef
c002485e:	e8 c7 5c 00 00       	call   c002a52a <debug_panic>
c0024863:	83 ec 0c             	sub    $0xc,%esp
c0024866:	68 05 38 03 c0       	push   $0xc0033805
c002486b:	e8 59 37 00 00       	call   c0027fc9 <printf>
c0024870:	83 c4 10             	add    $0x10,%esp
c0024873:	c7 05 28 d9 03 c0 00 	movl   $0x400,0xc003d928
c002487a:	04 00 00 
c002487d:	eb 33                	jmp    c00248b2 <timer_calibrate+0x7e>
c002487f:	a1 28 d9 03 c0       	mov    0xc003d928,%eax
c0024884:	01 c0                	add    %eax,%eax
c0024886:	a3 28 d9 03 c0       	mov    %eax,0xc003d928
c002488b:	a1 28 d9 03 c0       	mov    0xc003d928,%eax
c0024890:	85 c0                	test   %eax,%eax
c0024892:	75 1e                	jne    c00248b2 <timer_calibrate+0x7e>
c0024894:	83 ec 0c             	sub    $0xc,%esp
c0024897:	68 1c 38 03 c0       	push   $0xc003381c
c002489c:	68 d8 37 03 c0       	push   $0xc00337d8
c00248a1:	68 68 38 03 c0       	push   $0xc0033868
c00248a6:	6a 3d                	push   $0x3d
c00248a8:	68 ef 37 03 c0       	push   $0xc00337ef
c00248ad:	e8 78 5c 00 00       	call   c002a52a <debug_panic>
c00248b2:	a1 28 d9 03 c0       	mov    0xc003d928,%eax
c00248b7:	01 c0                	add    %eax,%eax
c00248b9:	83 ec 0c             	sub    $0xc,%esp
c00248bc:	50                   	push   %eax
c00248bd:	e8 c8 03 00 00       	call   c0024c8a <too_many_loops>
c00248c2:	83 c4 10             	add    $0x10,%esp
c00248c5:	83 f0 01             	xor    $0x1,%eax
c00248c8:	84 c0                	test   %al,%al
c00248ca:	75 b3                	jne    c002487f <timer_calibrate+0x4b>
c00248cc:	a1 28 d9 03 c0       	mov    0xc003d928,%eax
c00248d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00248d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00248d7:	d1 e8                	shr    %eax
c00248d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00248dc:	eb 29                	jmp    c0024907 <timer_calibrate+0xd3>
c00248de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00248e1:	0b 45 f4             	or     -0xc(%ebp),%eax
c00248e4:	83 ec 0c             	sub    $0xc,%esp
c00248e7:	50                   	push   %eax
c00248e8:	e8 9d 03 00 00       	call   c0024c8a <too_many_loops>
c00248ed:	83 c4 10             	add    $0x10,%esp
c00248f0:	83 f0 01             	xor    $0x1,%eax
c00248f3:	84 c0                	test   %al,%al
c00248f5:	74 0d                	je     c0024904 <timer_calibrate+0xd0>
c00248f7:	a1 28 d9 03 c0       	mov    0xc003d928,%eax
c00248fc:	0b 45 f4             	or     -0xc(%ebp),%eax
c00248ff:	a3 28 d9 03 c0       	mov    %eax,0xc003d928
c0024904:	d1 6d f4             	shrl   -0xc(%ebp)
c0024907:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002490a:	c1 e8 0a             	shr    $0xa,%eax
c002490d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0024910:	75 cc                	jne    c00248de <timer_calibrate+0xaa>
c0024912:	a1 28 d9 03 c0       	mov    0xc003d928,%eax
c0024917:	ba 00 00 00 00       	mov    $0x0,%edx
c002491c:	6b da 64             	imul   $0x64,%edx,%ebx
c002491f:	6b c8 00             	imul   $0x0,%eax,%ecx
c0024922:	01 d9                	add    %ebx,%ecx
c0024924:	bb 64 00 00 00       	mov    $0x64,%ebx
c0024929:	f7 e3                	mul    %ebx
c002492b:	01 d1                	add    %edx,%ecx
c002492d:	89 ca                	mov    %ecx,%edx
c002492f:	83 ec 04             	sub    $0x4,%esp
c0024932:	52                   	push   %edx
c0024933:	50                   	push   %eax
c0024934:	68 30 38 03 c0       	push   $0xc0033830
c0024939:	e8 8b 36 00 00       	call   c0027fc9 <printf>
c002493e:	83 c4 10             	add    $0x10,%esp
c0024941:	90                   	nop
c0024942:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0024945:	c9                   	leave  
c0024946:	c3                   	ret    

c0024947 <timer_ticks>:
c0024947:	55                   	push   %ebp
c0024948:	89 e5                	mov    %esp,%ebp
c002494a:	83 ec 18             	sub    $0x18,%esp
c002494d:	e8 37 d4 ff ff       	call   c0021d89 <intr_disable>
c0024952:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024955:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c002495a:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024960:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0024963:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0024966:	83 ec 0c             	sub    $0xc,%esp
c0024969:	ff 75 f4             	pushl  -0xc(%ebp)
c002496c:	e8 c0 d3 ff ff       	call   c0021d31 <intr_set_level>
c0024971:	83 c4 10             	add    $0x10,%esp
c0024974:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024977:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002497a:	c9                   	leave  
c002497b:	c3                   	ret    

c002497c <timer_elapsed>:
c002497c:	55                   	push   %ebp
c002497d:	89 e5                	mov    %esp,%ebp
c002497f:	83 ec 18             	sub    $0x18,%esp
c0024982:	8b 45 08             	mov    0x8(%ebp),%eax
c0024985:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024988:	8b 45 0c             	mov    0xc(%ebp),%eax
c002498b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002498e:	e8 b4 ff ff ff       	call   c0024947 <timer_ticks>
c0024993:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0024996:	1b 55 f4             	sbb    -0xc(%ebp),%edx
c0024999:	c9                   	leave  
c002499a:	c3                   	ret    

c002499b <timer_sleep>:
c002499b:	55                   	push   %ebp
c002499c:	89 e5                	mov    %esp,%ebp
c002499e:	53                   	push   %ebx
c002499f:	83 ec 24             	sub    $0x24,%esp
c00249a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00249a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00249a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00249ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00249ae:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00249b2:	7f 14                	jg     c00249c8 <timer_sleep+0x2d>
c00249b4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00249b8:	0f 88 96 00 00 00    	js     c0024a54 <timer_sleep+0xb9>
c00249be:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c00249c2:	0f 86 8c 00 00 00    	jbe    c0024a54 <timer_sleep+0xb9>
c00249c8:	e8 7a ff ff ff       	call   c0024947 <timer_ticks>
c00249cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00249d0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00249d3:	e8 3c d3 ff ff       	call   c0021d14 <intr_get_level>
c00249d8:	83 f8 01             	cmp    $0x1,%eax
c00249db:	74 1e                	je     c00249fb <timer_sleep+0x60>
c00249dd:	83 ec 0c             	sub    $0xc,%esp
c00249e0:	68 bb 37 03 c0       	push   $0xc00337bb
c00249e5:	68 d8 37 03 c0       	push   $0xc00337d8
c00249ea:	68 78 38 03 c0       	push   $0xc0033878
c00249ef:	6a 69                	push   $0x69
c00249f1:	68 ef 37 03 c0       	push   $0xc00337ef
c00249f6:	e8 2f 5b 00 00       	call   c002a52a <debug_panic>
c00249fb:	e8 89 d3 ff ff       	call   c0021d89 <intr_disable>
c0024a00:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0024a03:	e8 a0 c4 ff ff       	call   c0020ea8 <thread_current>
c0024a08:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0024a0b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0024a0e:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0024a11:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0024a14:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0024a17:	01 c8                	add    %ecx,%eax
c0024a19:	11 da                	adc    %ebx,%edx
c0024a1b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0024a1e:	89 41 64             	mov    %eax,0x64(%ecx)
c0024a21:	89 51 68             	mov    %edx,0x68(%ecx)
c0024a24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0024a27:	83 c0 6c             	add    $0x6c,%eax
c0024a2a:	6a 00                	push   $0x0
c0024a2c:	68 b8 16 02 c0       	push   $0xc00216b8
c0024a31:	50                   	push   %eax
c0024a32:	68 2c d9 03 c0       	push   $0xc003d92c
c0024a37:	e8 09 68 00 00       	call   c002b245 <list_insert_ordered>
c0024a3c:	83 c4 10             	add    $0x10,%esp
c0024a3f:	e8 40 c3 ff ff       	call   c0020d84 <thread_block>
c0024a44:	83 ec 0c             	sub    $0xc,%esp
c0024a47:	ff 75 ec             	pushl  -0x14(%ebp)
c0024a4a:	e8 e2 d2 ff ff       	call   c0021d31 <intr_set_level>
c0024a4f:	83 c4 10             	add    $0x10,%esp
c0024a52:	eb 01                	jmp    c0024a55 <timer_sleep+0xba>
c0024a54:	90                   	nop
c0024a55:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0024a58:	c9                   	leave  
c0024a59:	c3                   	ret    

c0024a5a <timer_msleep>:
c0024a5a:	55                   	push   %ebp
c0024a5b:	89 e5                	mov    %esp,%ebp
c0024a5d:	83 ec 18             	sub    $0x18,%esp
c0024a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0024a63:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024a66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024a6c:	83 ec 04             	sub    $0x4,%esp
c0024a6f:	68 e8 03 00 00       	push   $0x3e8
c0024a74:	ff 75 f4             	pushl  -0xc(%ebp)
c0024a77:	ff 75 f0             	pushl  -0x10(%ebp)
c0024a7a:	e8 cd 02 00 00       	call   c0024d4c <real_time_sleep>
c0024a7f:	83 c4 10             	add    $0x10,%esp
c0024a82:	90                   	nop
c0024a83:	c9                   	leave  
c0024a84:	c3                   	ret    

c0024a85 <timer_usleep>:
c0024a85:	55                   	push   %ebp
c0024a86:	89 e5                	mov    %esp,%ebp
c0024a88:	83 ec 18             	sub    $0x18,%esp
c0024a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0024a8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024a91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024a94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024a97:	83 ec 04             	sub    $0x4,%esp
c0024a9a:	68 40 42 0f 00       	push   $0xf4240
c0024a9f:	ff 75 f4             	pushl  -0xc(%ebp)
c0024aa2:	ff 75 f0             	pushl  -0x10(%ebp)
c0024aa5:	e8 a2 02 00 00       	call   c0024d4c <real_time_sleep>
c0024aaa:	83 c4 10             	add    $0x10,%esp
c0024aad:	90                   	nop
c0024aae:	c9                   	leave  
c0024aaf:	c3                   	ret    

c0024ab0 <timer_nsleep>:
c0024ab0:	55                   	push   %ebp
c0024ab1:	89 e5                	mov    %esp,%ebp
c0024ab3:	83 ec 18             	sub    $0x18,%esp
c0024ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0024ab9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024abc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024abf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024ac2:	83 ec 04             	sub    $0x4,%esp
c0024ac5:	68 00 ca 9a 3b       	push   $0x3b9aca00
c0024aca:	ff 75 f4             	pushl  -0xc(%ebp)
c0024acd:	ff 75 f0             	pushl  -0x10(%ebp)
c0024ad0:	e8 77 02 00 00       	call   c0024d4c <real_time_sleep>
c0024ad5:	83 c4 10             	add    $0x10,%esp
c0024ad8:	90                   	nop
c0024ad9:	c9                   	leave  
c0024ada:	c3                   	ret    

c0024adb <timer_mdelay>:
c0024adb:	55                   	push   %ebp
c0024adc:	89 e5                	mov    %esp,%ebp
c0024ade:	83 ec 18             	sub    $0x18,%esp
c0024ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0024ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024aea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024aed:	83 ec 04             	sub    $0x4,%esp
c0024af0:	68 e8 03 00 00       	push   $0x3e8
c0024af5:	ff 75 f4             	pushl  -0xc(%ebp)
c0024af8:	ff 75 f0             	pushl  -0x10(%ebp)
c0024afb:	e8 fe 02 00 00       	call   c0024dfe <real_time_delay>
c0024b00:	83 c4 10             	add    $0x10,%esp
c0024b03:	90                   	nop
c0024b04:	c9                   	leave  
c0024b05:	c3                   	ret    

c0024b06 <timer_udelay>:
c0024b06:	55                   	push   %ebp
c0024b07:	89 e5                	mov    %esp,%ebp
c0024b09:	83 ec 18             	sub    $0x18,%esp
c0024b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0024b0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024b12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024b15:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024b18:	83 ec 04             	sub    $0x4,%esp
c0024b1b:	68 40 42 0f 00       	push   $0xf4240
c0024b20:	ff 75 f4             	pushl  -0xc(%ebp)
c0024b23:	ff 75 f0             	pushl  -0x10(%ebp)
c0024b26:	e8 d3 02 00 00       	call   c0024dfe <real_time_delay>
c0024b2b:	83 c4 10             	add    $0x10,%esp
c0024b2e:	90                   	nop
c0024b2f:	c9                   	leave  
c0024b30:	c3                   	ret    

c0024b31 <timer_ndelay>:
c0024b31:	55                   	push   %ebp
c0024b32:	89 e5                	mov    %esp,%ebp
c0024b34:	83 ec 18             	sub    $0x18,%esp
c0024b37:	8b 45 08             	mov    0x8(%ebp),%eax
c0024b3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024b3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024b40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024b43:	83 ec 04             	sub    $0x4,%esp
c0024b46:	68 00 ca 9a 3b       	push   $0x3b9aca00
c0024b4b:	ff 75 f4             	pushl  -0xc(%ebp)
c0024b4e:	ff 75 f0             	pushl  -0x10(%ebp)
c0024b51:	e8 a8 02 00 00       	call   c0024dfe <real_time_delay>
c0024b56:	83 c4 10             	add    $0x10,%esp
c0024b59:	90                   	nop
c0024b5a:	c9                   	leave  
c0024b5b:	c3                   	ret    

c0024b5c <timer_print_stats>:
c0024b5c:	55                   	push   %ebp
c0024b5d:	89 e5                	mov    %esp,%ebp
c0024b5f:	83 ec 08             	sub    $0x8,%esp
c0024b62:	e8 e0 fd ff ff       	call   c0024947 <timer_ticks>
c0024b67:	83 ec 04             	sub    $0x4,%esp
c0024b6a:	52                   	push   %edx
c0024b6b:	50                   	push   %eax
c0024b6c:	68 40 38 03 c0       	push   $0xc0033840
c0024b71:	e8 53 34 00 00       	call   c0027fc9 <printf>
c0024b76:	83 c4 10             	add    $0x10,%esp
c0024b79:	90                   	nop
c0024b7a:	c9                   	leave  
c0024b7b:	c3                   	ret    

c0024b7c <timer_interrupt>:
c0024b7c:	55                   	push   %ebp
c0024b7d:	89 e5                	mov    %esp,%ebp
c0024b7f:	56                   	push   %esi
c0024b80:	53                   	push   %ebx
c0024b81:	83 ec 10             	sub    $0x10,%esp
c0024b84:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024b89:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024b8f:	83 c0 01             	add    $0x1,%eax
c0024b92:	83 d2 00             	adc    $0x0,%edx
c0024b95:	a3 20 d9 03 c0       	mov    %eax,0xc003d920
c0024b9a:	89 15 24 d9 03 c0    	mov    %edx,0xc003d924
c0024ba0:	e8 f2 bf ff ff       	call   c0020b97 <thread_tick>
c0024ba5:	0f b6 05 84 61 04 c0 	movzbl 0xc0046184,%eax
c0024bac:	84 c0                	test   %al,%al
c0024bae:	0f 84 b4 00 00 00    	je     c0024c68 <timer_interrupt+0xec>
c0024bb4:	e8 be ce ff ff       	call   c0021a77 <thread_update_recent_cpu_one>
c0024bb9:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024bbe:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024bc4:	89 c1                	mov    %eax,%ecx
c0024bc6:	83 e1 03             	and    $0x3,%ecx
c0024bc9:	89 cb                	mov    %ecx,%ebx
c0024bcb:	89 d0                	mov    %edx,%eax
c0024bcd:	83 e0 00             	and    $0x0,%eax
c0024bd0:	89 c6                	mov    %eax,%esi
c0024bd2:	89 f0                	mov    %esi,%eax
c0024bd4:	09 d8                	or     %ebx,%eax
c0024bd6:	85 c0                	test   %eax,%eax
c0024bd8:	75 11                	jne    c0024beb <timer_interrupt+0x6f>
c0024bda:	e8 c9 c2 ff ff       	call   c0020ea8 <thread_current>
c0024bdf:	83 ec 0c             	sub    $0xc,%esp
c0024be2:	50                   	push   %eax
c0024be3:	e8 ce ce ff ff       	call   c0021ab6 <thread_update_priority_mlfqs>
c0024be8:	83 c4 10             	add    $0x10,%esp
c0024beb:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024bf0:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024bf6:	6a 00                	push   $0x0
c0024bf8:	6a 64                	push   $0x64
c0024bfa:	52                   	push   %edx
c0024bfb:	50                   	push   %eax
c0024bfc:	e8 09 52 00 00       	call   c0029e0a <__moddi3>
c0024c01:	83 c4 10             	add    $0x10,%esp
c0024c04:	09 d0                	or     %edx,%eax
c0024c06:	85 c0                	test   %eax,%eax
c0024c08:	75 5e                	jne    c0024c68 <timer_interrupt+0xec>
c0024c0a:	e8 e8 cc ff ff       	call   c00218f7 <thread_update_recent_cpu_and_load_avg>
c0024c0f:	eb 57                	jmp    c0024c68 <timer_interrupt+0xec>
c0024c11:	83 ec 0c             	sub    $0xc,%esp
c0024c14:	68 2c d9 03 c0       	push   $0xc003d92c
c0024c19:	e8 32 60 00 00       	call   c002ac50 <list_front>
c0024c1e:	83 c4 10             	add    $0x10,%esp
c0024c21:	83 c0 04             	add    $0x4,%eax
c0024c24:	83 e8 70             	sub    $0x70,%eax
c0024c27:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0024c2d:	8b 48 64             	mov    0x64(%eax),%ecx
c0024c30:	8b 58 68             	mov    0x68(%eax),%ebx
c0024c33:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024c38:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024c3e:	39 d3                	cmp    %edx,%ebx
c0024c40:	7f 3f                	jg     c0024c81 <timer_interrupt+0x105>
c0024c42:	39 d3                	cmp    %edx,%ebx
c0024c44:	7c 04                	jl     c0024c4a <timer_interrupt+0xce>
c0024c46:	39 c1                	cmp    %eax,%ecx
c0024c48:	77 37                	ja     c0024c81 <timer_interrupt+0x105>
c0024c4a:	83 ec 0c             	sub    $0xc,%esp
c0024c4d:	ff 75 f4             	pushl  -0xc(%ebp)
c0024c50:	e8 a0 c1 ff ff       	call   c0020df5 <thread_unblock>
c0024c55:	83 c4 10             	add    $0x10,%esp
c0024c58:	83 ec 0c             	sub    $0xc,%esp
c0024c5b:	68 2c d9 03 c0       	push   $0xc003d92c
c0024c60:	e8 97 5f 00 00       	call   c002abfc <list_pop_front>
c0024c65:	83 c4 10             	add    $0x10,%esp
c0024c68:	83 ec 0c             	sub    $0xc,%esp
c0024c6b:	68 2c d9 03 c0       	push   $0xc003d92c
c0024c70:	e8 b0 60 00 00       	call   c002ad25 <list_empty>
c0024c75:	83 c4 10             	add    $0x10,%esp
c0024c78:	83 f0 01             	xor    $0x1,%eax
c0024c7b:	84 c0                	test   %al,%al
c0024c7d:	75 92                	jne    c0024c11 <timer_interrupt+0x95>
c0024c7f:	eb 01                	jmp    c0024c82 <timer_interrupt+0x106>
c0024c81:	90                   	nop
c0024c82:	90                   	nop
c0024c83:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0024c86:	5b                   	pop    %ebx
c0024c87:	5e                   	pop    %esi
c0024c88:	5d                   	pop    %ebp
c0024c89:	c3                   	ret    

c0024c8a <too_many_loops>:
c0024c8a:	55                   	push   %ebp
c0024c8b:	89 e5                	mov    %esp,%ebp
c0024c8d:	56                   	push   %esi
c0024c8e:	53                   	push   %ebx
c0024c8f:	83 ec 10             	sub    $0x10,%esp
c0024c92:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024c97:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024c9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024ca0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0024ca3:	eb 00                	jmp    c0024ca5 <too_many_loops+0x1b>
c0024ca5:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024caa:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024cb0:	89 d1                	mov    %edx,%ecx
c0024cb2:	33 4d f4             	xor    -0xc(%ebp),%ecx
c0024cb5:	33 45 f0             	xor    -0x10(%ebp),%eax
c0024cb8:	09 c8                	or     %ecx,%eax
c0024cba:	85 c0                	test   %eax,%eax
c0024cbc:	74 e7                	je     c0024ca5 <too_many_loops+0x1b>
c0024cbe:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024cc3:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024cc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024ccc:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0024ccf:	8b 45 08             	mov    0x8(%ebp),%eax
c0024cd2:	ba 00 00 00 00       	mov    $0x0,%edx
c0024cd7:	83 ec 08             	sub    $0x8,%esp
c0024cda:	52                   	push   %edx
c0024cdb:	50                   	push   %eax
c0024cdc:	e8 2c 00 00 00       	call   c0024d0d <busy_wait>
c0024ce1:	83 c4 10             	add    $0x10,%esp
c0024ce4:	a1 20 d9 03 c0       	mov    0xc003d920,%eax
c0024ce9:	8b 15 24 d9 03 c0    	mov    0xc003d924,%edx
c0024cef:	89 c1                	mov    %eax,%ecx
c0024cf1:	33 4d f0             	xor    -0x10(%ebp),%ecx
c0024cf4:	89 cb                	mov    %ecx,%ebx
c0024cf6:	89 d0                	mov    %edx,%eax
c0024cf8:	33 45 f4             	xor    -0xc(%ebp),%eax
c0024cfb:	89 c6                	mov    %eax,%esi
c0024cfd:	89 d8                	mov    %ebx,%eax
c0024cff:	09 f0                	or     %esi,%eax
c0024d01:	85 c0                	test   %eax,%eax
c0024d03:	0f 95 c0             	setne  %al
c0024d06:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0024d09:	5b                   	pop    %ebx
c0024d0a:	5e                   	pop    %esi
c0024d0b:	5d                   	pop    %ebp
c0024d0c:	c3                   	ret    

c0024d0d <busy_wait>:
c0024d0d:	55                   	push   %ebp
c0024d0e:	89 e5                	mov    %esp,%ebp
c0024d10:	53                   	push   %ebx
c0024d11:	83 ec 0c             	sub    $0xc,%esp
c0024d14:	8b 45 08             	mov    0x8(%ebp),%eax
c0024d17:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024d1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024d20:	eb 00                	jmp    c0024d22 <busy_wait+0x15>
c0024d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0024d25:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0024d28:	89 c1                	mov    %eax,%ecx
c0024d2a:	89 d3                	mov    %edx,%ebx
c0024d2c:	83 c1 ff             	add    $0xffffffff,%ecx
c0024d2f:	83 d3 ff             	adc    $0xffffffff,%ebx
c0024d32:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0024d35:	89 5d f4             	mov    %ebx,-0xc(%ebp)
c0024d38:	85 d2                	test   %edx,%edx
c0024d3a:	7f e6                	jg     c0024d22 <busy_wait+0x15>
c0024d3c:	85 d2                	test   %edx,%edx
c0024d3e:	78 05                	js     c0024d45 <busy_wait+0x38>
c0024d40:	83 f8 00             	cmp    $0x0,%eax
c0024d43:	77 dd                	ja     c0024d22 <busy_wait+0x15>
c0024d45:	90                   	nop
c0024d46:	83 c4 0c             	add    $0xc,%esp
c0024d49:	5b                   	pop    %ebx
c0024d4a:	5d                   	pop    %ebp
c0024d4b:	c3                   	ret    

c0024d4c <real_time_sleep>:
c0024d4c:	55                   	push   %ebp
c0024d4d:	89 e5                	mov    %esp,%ebp
c0024d4f:	53                   	push   %ebx
c0024d50:	83 ec 24             	sub    $0x24,%esp
c0024d53:	8b 45 08             	mov    0x8(%ebp),%eax
c0024d56:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0024d59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024d5c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0024d5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0024d62:	6b d0 64             	imul   $0x64,%eax,%edx
c0024d65:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0024d68:	6b c0 00             	imul   $0x0,%eax,%eax
c0024d6b:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0024d6e:	b8 64 00 00 00       	mov    $0x64,%eax
c0024d73:	f7 65 e0             	mull   -0x20(%ebp)
c0024d76:	01 d1                	add    %edx,%ecx
c0024d78:	89 ca                	mov    %ecx,%edx
c0024d7a:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0024d7d:	89 cb                	mov    %ecx,%ebx
c0024d7f:	c1 fb 1f             	sar    $0x1f,%ebx
c0024d82:	53                   	push   %ebx
c0024d83:	51                   	push   %ecx
c0024d84:	52                   	push   %edx
c0024d85:	50                   	push   %eax
c0024d86:	e8 4b 50 00 00       	call   c0029dd6 <__divdi3>
c0024d8b:	83 c4 10             	add    $0x10,%esp
c0024d8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024d91:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0024d94:	e8 7b cf ff ff       	call   c0021d14 <intr_get_level>
c0024d99:	83 f8 01             	cmp    $0x1,%eax
c0024d9c:	74 21                	je     c0024dbf <real_time_sleep+0x73>
c0024d9e:	83 ec 0c             	sub    $0xc,%esp
c0024da1:	68 bb 37 03 c0       	push   $0xc00337bb
c0024da6:	68 d8 37 03 c0       	push   $0xc00337d8
c0024dab:	68 84 38 03 c0       	push   $0xc0033884
c0024db0:	68 03 01 00 00       	push   $0x103
c0024db5:	68 ef 37 03 c0       	push   $0xc00337ef
c0024dba:	e8 6b 57 00 00       	call   c002a52a <debug_panic>
c0024dbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0024dc3:	78 1f                	js     c0024de4 <real_time_sleep+0x98>
c0024dc5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0024dc9:	7f 06                	jg     c0024dd1 <real_time_sleep+0x85>
c0024dcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0024dcf:	76 13                	jbe    c0024de4 <real_time_sleep+0x98>
c0024dd1:	83 ec 08             	sub    $0x8,%esp
c0024dd4:	ff 75 f4             	pushl  -0xc(%ebp)
c0024dd7:	ff 75 f0             	pushl  -0x10(%ebp)
c0024dda:	e8 bc fb ff ff       	call   c002499b <timer_sleep>
c0024ddf:	83 c4 10             	add    $0x10,%esp
c0024de2:	eb 14                	jmp    c0024df8 <real_time_sleep+0xac>
c0024de4:	83 ec 04             	sub    $0x4,%esp
c0024de7:	ff 75 10             	pushl  0x10(%ebp)
c0024dea:	ff 75 e4             	pushl  -0x1c(%ebp)
c0024ded:	ff 75 e0             	pushl  -0x20(%ebp)
c0024df0:	e8 09 00 00 00       	call   c0024dfe <real_time_delay>
c0024df5:	83 c4 10             	add    $0x10,%esp
c0024df8:	90                   	nop
c0024df9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0024dfc:	c9                   	leave  
c0024dfd:	c3                   	ret    

c0024dfe <real_time_delay>:
c0024dfe:	55                   	push   %ebp
c0024dff:	89 e5                	mov    %esp,%ebp
c0024e01:	56                   	push   %esi
c0024e02:	53                   	push   %ebx
c0024e03:	83 ec 10             	sub    $0x10,%esp
c0024e06:	8b 45 08             	mov    0x8(%ebp),%eax
c0024e09:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0024e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0024e0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0024e12:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0024e15:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c0024e1a:	89 c8                	mov    %ecx,%eax
c0024e1c:	f7 ea                	imul   %edx
c0024e1e:	c1 fa 06             	sar    $0x6,%edx
c0024e21:	89 c8                	mov    %ecx,%eax
c0024e23:	c1 f8 1f             	sar    $0x1f,%eax
c0024e26:	29 c2                	sub    %eax,%edx
c0024e28:	89 d0                	mov    %edx,%eax
c0024e2a:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c0024e30:	29 c1                	sub    %eax,%ecx
c0024e32:	89 c8                	mov    %ecx,%eax
c0024e34:	85 c0                	test   %eax,%eax
c0024e36:	74 21                	je     c0024e59 <real_time_delay+0x5b>
c0024e38:	83 ec 0c             	sub    $0xc,%esp
c0024e3b:	68 53 38 03 c0       	push   $0xc0033853
c0024e40:	68 d8 37 03 c0       	push   $0xc00337d8
c0024e45:	68 94 38 03 c0       	push   $0xc0033894
c0024e4a:	68 19 01 00 00       	push   $0x119
c0024e4f:	68 ef 37 03 c0       	push   $0xc00337ef
c0024e54:	e8 d1 56 00 00       	call   c002a52a <debug_panic>
c0024e59:	a1 28 d9 03 c0       	mov    0xc003d928,%eax
c0024e5e:	ba 00 00 00 00       	mov    $0x0,%edx
c0024e63:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0024e66:	89 cb                	mov    %ecx,%ebx
c0024e68:	0f af da             	imul   %edx,%ebx
c0024e6b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0024e6e:	0f af c8             	imul   %eax,%ecx
c0024e71:	01 d9                	add    %ebx,%ecx
c0024e73:	f7 65 f0             	mull   -0x10(%ebp)
c0024e76:	01 d1                	add    %edx,%ecx
c0024e78:	89 ca                	mov    %ecx,%edx
c0024e7a:	6a 00                	push   $0x0
c0024e7c:	68 e8 03 00 00       	push   $0x3e8
c0024e81:	52                   	push   %edx
c0024e82:	50                   	push   %eax
c0024e83:	e8 4e 4f 00 00       	call   c0029dd6 <__divdi3>
c0024e88:	83 c4 10             	add    $0x10,%esp
c0024e8b:	6b da 64             	imul   $0x64,%edx,%ebx
c0024e8e:	6b c8 00             	imul   $0x0,%eax,%ecx
c0024e91:	8d 34 0b             	lea    (%ebx,%ecx,1),%esi
c0024e94:	b9 64 00 00 00       	mov    $0x64,%ecx
c0024e99:	f7 e1                	mul    %ecx
c0024e9b:	89 c1                	mov    %eax,%ecx
c0024e9d:	89 d3                	mov    %edx,%ebx
c0024e9f:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
c0024ea2:	89 c3                	mov    %eax,%ebx
c0024ea4:	8b 75 10             	mov    0x10(%ebp),%esi
c0024ea7:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c0024eac:	89 f0                	mov    %esi,%eax
c0024eae:	f7 ea                	imul   %edx
c0024eb0:	c1 fa 06             	sar    $0x6,%edx
c0024eb3:	89 f0                	mov    %esi,%eax
c0024eb5:	c1 f8 1f             	sar    $0x1f,%eax
c0024eb8:	29 c2                	sub    %eax,%edx
c0024eba:	89 d0                	mov    %edx,%eax
c0024ebc:	99                   	cltd   
c0024ebd:	52                   	push   %edx
c0024ebe:	50                   	push   %eax
c0024ebf:	53                   	push   %ebx
c0024ec0:	51                   	push   %ecx
c0024ec1:	e8 10 4f 00 00       	call   c0029dd6 <__divdi3>
c0024ec6:	83 c4 10             	add    $0x10,%esp
c0024ec9:	83 ec 08             	sub    $0x8,%esp
c0024ecc:	52                   	push   %edx
c0024ecd:	50                   	push   %eax
c0024ece:	e8 3a fe ff ff       	call   c0024d0d <busy_wait>
c0024ed3:	83 c4 10             	add    $0x10,%esp
c0024ed6:	90                   	nop
c0024ed7:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0024eda:	5b                   	pop    %ebx
c0024edb:	5e                   	pop    %esi
c0024edc:	5d                   	pop    %ebp
c0024edd:	c3                   	ret    

c0024ede <isupper>:
c0024ede:	55                   	push   %ebp
c0024edf:	89 e5                	mov    %esp,%ebp
c0024ee1:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0024ee5:	7e 0d                	jle    c0024ef4 <isupper+0x16>
c0024ee7:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0024eeb:	7f 07                	jg     c0024ef4 <isupper+0x16>
c0024eed:	b8 01 00 00 00       	mov    $0x1,%eax
c0024ef2:	eb 05                	jmp    c0024ef9 <isupper+0x1b>
c0024ef4:	b8 00 00 00 00       	mov    $0x0,%eax
c0024ef9:	5d                   	pop    %ebp
c0024efa:	c3                   	ret    

c0024efb <tolower>:
c0024efb:	55                   	push   %ebp
c0024efc:	89 e5                	mov    %esp,%ebp
c0024efe:	ff 75 08             	pushl  0x8(%ebp)
c0024f01:	e8 d8 ff ff ff       	call   c0024ede <isupper>
c0024f06:	83 c4 04             	add    $0x4,%esp
c0024f09:	85 c0                	test   %eax,%eax
c0024f0b:	74 08                	je     c0024f15 <tolower+0x1a>
c0024f0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0024f10:	83 c0 20             	add    $0x20,%eax
c0024f13:	eb 03                	jmp    c0024f18 <tolower+0x1d>
c0024f15:	8b 45 08             	mov    0x8(%ebp),%eax
c0024f18:	c9                   	leave  
c0024f19:	c3                   	ret    

c0024f1a <inb>:
c0024f1a:	55                   	push   %ebp
c0024f1b:	89 e5                	mov    %esp,%ebp
c0024f1d:	83 ec 14             	sub    $0x14,%esp
c0024f20:	8b 45 08             	mov    0x8(%ebp),%eax
c0024f23:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0024f27:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0024f2b:	89 c2                	mov    %eax,%edx
c0024f2d:	ec                   	in     (%dx),%al
c0024f2e:	88 45 ff             	mov    %al,-0x1(%ebp)
c0024f31:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0024f35:	c9                   	leave  
c0024f36:	c3                   	ret    

c0024f37 <kbd_init>:
c0024f37:	55                   	push   %ebp
c0024f38:	89 e5                	mov    %esp,%ebp
c0024f3a:	83 ec 08             	sub    $0x8,%esp
c0024f3d:	83 ec 04             	sub    $0x4,%esp
c0024f40:	68 c0 38 03 c0       	push   $0xc00338c0
c0024f45:	68 7d 4f 02 c0       	push   $0xc0024f7d
c0024f4a:	6a 21                	push   $0x21
c0024f4c:	e8 59 d0 ff ff       	call   c0021faa <intr_register_ext>
c0024f51:	83 c4 10             	add    $0x10,%esp
c0024f54:	90                   	nop
c0024f55:	c9                   	leave  
c0024f56:	c3                   	ret    

c0024f57 <kbd_print_stats>:
c0024f57:	55                   	push   %ebp
c0024f58:	89 e5                	mov    %esp,%ebp
c0024f5a:	83 ec 08             	sub    $0x8,%esp
c0024f5d:	a1 48 d9 03 c0       	mov    0xc003d948,%eax
c0024f62:	8b 15 4c d9 03 c0    	mov    0xc003d94c,%edx
c0024f68:	83 ec 04             	sub    $0x4,%esp
c0024f6b:	52                   	push   %edx
c0024f6c:	50                   	push   %eax
c0024f6d:	68 ce 38 03 c0       	push   $0xc00338ce
c0024f72:	e8 52 30 00 00       	call   c0027fc9 <printf>
c0024f77:	83 c4 10             	add    $0x10,%esp
c0024f7a:	90                   	nop
c0024f7b:	c9                   	leave  
c0024f7c:	c3                   	ret    

c0024f7d <keyboard_interrupt>:
c0024f7d:	55                   	push   %ebp
c0024f7e:	89 e5                	mov    %esp,%ebp
c0024f80:	53                   	push   %ebx
c0024f81:	83 ec 14             	sub    $0x14,%esp
c0024f84:	0f b6 05 40 d9 03 c0 	movzbl 0xc003d940,%eax
c0024f8b:	84 c0                	test   %al,%al
c0024f8d:	75 0b                	jne    c0024f9a <keyboard_interrupt+0x1d>
c0024f8f:	0f b6 05 41 d9 03 c0 	movzbl 0xc003d941,%eax
c0024f96:	84 c0                	test   %al,%al
c0024f98:	74 07                	je     c0024fa1 <keyboard_interrupt+0x24>
c0024f9a:	b8 01 00 00 00       	mov    $0x1,%eax
c0024f9f:	eb 05                	jmp    c0024fa6 <keyboard_interrupt+0x29>
c0024fa1:	b8 00 00 00 00       	mov    $0x0,%eax
c0024fa6:	88 45 ef             	mov    %al,-0x11(%ebp)
c0024fa9:	80 65 ef 01          	andb   $0x1,-0x11(%ebp)
c0024fad:	0f b6 05 42 d9 03 c0 	movzbl 0xc003d942,%eax
c0024fb4:	84 c0                	test   %al,%al
c0024fb6:	75 0b                	jne    c0024fc3 <keyboard_interrupt+0x46>
c0024fb8:	0f b6 05 43 d9 03 c0 	movzbl 0xc003d943,%eax
c0024fbf:	84 c0                	test   %al,%al
c0024fc1:	74 07                	je     c0024fca <keyboard_interrupt+0x4d>
c0024fc3:	b8 01 00 00 00       	mov    $0x1,%eax
c0024fc8:	eb 05                	jmp    c0024fcf <keyboard_interrupt+0x52>
c0024fca:	b8 00 00 00 00       	mov    $0x0,%eax
c0024fcf:	88 45 ee             	mov    %al,-0x12(%ebp)
c0024fd2:	80 65 ee 01          	andb   $0x1,-0x12(%ebp)
c0024fd6:	0f b6 05 44 d9 03 c0 	movzbl 0xc003d944,%eax
c0024fdd:	84 c0                	test   %al,%al
c0024fdf:	75 0b                	jne    c0024fec <keyboard_interrupt+0x6f>
c0024fe1:	0f b6 05 45 d9 03 c0 	movzbl 0xc003d945,%eax
c0024fe8:	84 c0                	test   %al,%al
c0024fea:	74 07                	je     c0024ff3 <keyboard_interrupt+0x76>
c0024fec:	b8 01 00 00 00       	mov    $0x1,%eax
c0024ff1:	eb 05                	jmp    c0024ff8 <keyboard_interrupt+0x7b>
c0024ff3:	b8 00 00 00 00       	mov    $0x0,%eax
c0024ff8:	88 45 ed             	mov    %al,-0x13(%ebp)
c0024ffb:	80 65 ed 01          	andb   $0x1,-0x13(%ebp)
c0024fff:	6a 60                	push   $0x60
c0025001:	e8 14 ff ff ff       	call   c0024f1a <inb>
c0025006:	83 c4 04             	add    $0x4,%esp
c0025009:	0f b6 c0             	movzbl %al,%eax
c002500c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002500f:	81 7d f4 e0 00 00 00 	cmpl   $0xe0,-0xc(%ebp)
c0025016:	75 1a                	jne    c0025032 <keyboard_interrupt+0xb5>
c0025018:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002501b:	c1 e0 08             	shl    $0x8,%eax
c002501e:	89 c3                	mov    %eax,%ebx
c0025020:	6a 60                	push   $0x60
c0025022:	e8 f3 fe ff ff       	call   c0024f1a <inb>
c0025027:	83 c4 04             	add    $0x4,%esp
c002502a:	0f b6 c0             	movzbl %al,%eax
c002502d:	09 d8                	or     %ebx,%eax
c002502f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025032:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025035:	25 80 00 00 00       	and    $0x80,%eax
c002503a:	85 c0                	test   %eax,%eax
c002503c:	0f 95 c0             	setne  %al
c002503f:	88 45 ec             	mov    %al,-0x14(%ebp)
c0025042:	81 65 f4 7f ff ff ff 	andl   $0xffffff7f,-0xc(%ebp)
c0025049:	83 7d f4 3a          	cmpl   $0x3a,-0xc(%ebp)
c002504d:	75 31                	jne    c0025080 <keyboard_interrupt+0x103>
c002504f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0025053:	83 f0 01             	xor    $0x1,%eax
c0025056:	84 c0                	test   %al,%al
c0025058:	0f 84 84 01 00 00    	je     c00251e2 <keyboard_interrupt+0x265>
c002505e:	0f b6 05 46 d9 03 c0 	movzbl 0xc003d946,%eax
c0025065:	0f b6 c0             	movzbl %al,%eax
c0025068:	85 c0                	test   %eax,%eax
c002506a:	0f 95 c0             	setne  %al
c002506d:	83 f0 01             	xor    $0x1,%eax
c0025070:	0f b6 c0             	movzbl %al,%eax
c0025073:	83 e0 01             	and    $0x1,%eax
c0025076:	a2 46 d9 03 c0       	mov    %al,0xc003d946
c002507b:	e9 62 01 00 00       	jmp    c00251e2 <keyboard_interrupt+0x265>
c0025080:	83 ec 04             	sub    $0x4,%esp
c0025083:	8d 45 eb             	lea    -0x15(%ebp),%eax
c0025086:	50                   	push   %eax
c0025087:	ff 75 f4             	pushl  -0xc(%ebp)
c002508a:	68 20 39 03 c0       	push   $0xc0033920
c002508f:	e8 54 01 00 00       	call   c00251e8 <map_key>
c0025094:	83 c4 10             	add    $0x10,%esp
c0025097:	84 c0                	test   %al,%al
c0025099:	75 4f                	jne    c00250ea <keyboard_interrupt+0x16d>
c002509b:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c002509f:	83 f0 01             	xor    $0x1,%eax
c00250a2:	84 c0                	test   %al,%al
c00250a4:	74 1b                	je     c00250c1 <keyboard_interrupt+0x144>
c00250a6:	83 ec 04             	sub    $0x4,%esp
c00250a9:	8d 45 eb             	lea    -0x15(%ebp),%eax
c00250ac:	50                   	push   %eax
c00250ad:	ff 75 f4             	pushl  -0xc(%ebp)
c00250b0:	68 a0 39 03 c0       	push   $0xc00339a0
c00250b5:	e8 2e 01 00 00       	call   c00251e8 <map_key>
c00250ba:	83 c4 10             	add    $0x10,%esp
c00250bd:	84 c0                	test   %al,%al
c00250bf:	75 29                	jne    c00250ea <keyboard_interrupt+0x16d>
c00250c1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c00250c5:	0f 84 d8 00 00 00    	je     c00251a3 <keyboard_interrupt+0x226>
c00250cb:	83 ec 04             	sub    $0x4,%esp
c00250ce:	8d 45 eb             	lea    -0x15(%ebp),%eax
c00250d1:	50                   	push   %eax
c00250d2:	ff 75 f4             	pushl  -0xc(%ebp)
c00250d5:	68 00 3a 03 c0       	push   $0xc0033a00
c00250da:	e8 09 01 00 00       	call   c00251e8 <map_key>
c00250df:	83 c4 10             	add    $0x10,%esp
c00250e2:	84 c0                	test   %al,%al
c00250e4:	0f 84 b9 00 00 00    	je     c00251a3 <keyboard_interrupt+0x226>
c00250ea:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00250ee:	83 f0 01             	xor    $0x1,%eax
c00250f1:	84 c0                	test   %al,%al
c00250f3:	0f 84 e8 00 00 00    	je     c00251e1 <keyboard_interrupt+0x264>
c00250f9:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c00250fd:	3c 7f                	cmp    $0x7f,%al
c00250ff:	75 11                	jne    c0025112 <keyboard_interrupt+0x195>
c0025101:	80 7d ed 00          	cmpb   $0x0,-0x13(%ebp)
c0025105:	74 0b                	je     c0025112 <keyboard_interrupt+0x195>
c0025107:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c002510b:	74 05                	je     c0025112 <keyboard_interrupt+0x195>
c002510d:	e8 12 29 00 00       	call   c0027a24 <shutdown_reboot>
c0025112:	80 7d ed 00          	cmpb   $0x0,-0x13(%ebp)
c0025116:	74 1c                	je     c0025134 <keyboard_interrupt+0x1b7>
c0025118:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c002511c:	3c 3f                	cmp    $0x3f,%al
c002511e:	76 14                	jbe    c0025134 <keyboard_interrupt+0x1b7>
c0025120:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0025124:	3c 5f                	cmp    $0x5f,%al
c0025126:	77 0c                	ja     c0025134 <keyboard_interrupt+0x1b7>
c0025128:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c002512c:	83 e8 40             	sub    $0x40,%eax
c002512f:	88 45 eb             	mov    %al,-0x15(%ebp)
c0025132:	eb 22                	jmp    c0025156 <keyboard_interrupt+0x1d9>
c0025134:	0f b6 05 46 d9 03 c0 	movzbl 0xc003d946,%eax
c002513b:	38 45 ef             	cmp    %al,-0x11(%ebp)
c002513e:	75 16                	jne    c0025156 <keyboard_interrupt+0x1d9>
c0025140:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0025144:	0f b6 c0             	movzbl %al,%eax
c0025147:	83 ec 0c             	sub    $0xc,%esp
c002514a:	50                   	push   %eax
c002514b:	e8 ab fd ff ff       	call   c0024efb <tolower>
c0025150:	83 c4 10             	add    $0x10,%esp
c0025153:	88 45 eb             	mov    %al,-0x15(%ebp)
c0025156:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c002515a:	74 0a                	je     c0025166 <keyboard_interrupt+0x1e9>
c002515c:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0025160:	83 c0 80             	add    $0xffffff80,%eax
c0025163:	88 45 eb             	mov    %al,-0x15(%ebp)
c0025166:	e8 a1 21 00 00       	call   c002730c <input_full>
c002516b:	83 f0 01             	xor    $0x1,%eax
c002516e:	84 c0                	test   %al,%al
c0025170:	74 6f                	je     c00251e1 <keyboard_interrupt+0x264>
c0025172:	a1 48 d9 03 c0       	mov    0xc003d948,%eax
c0025177:	8b 15 4c d9 03 c0    	mov    0xc003d94c,%edx
c002517d:	83 c0 01             	add    $0x1,%eax
c0025180:	83 d2 00             	adc    $0x0,%edx
c0025183:	a3 48 d9 03 c0       	mov    %eax,0xc003d948
c0025188:	89 15 4c d9 03 c0    	mov    %edx,0xc003d94c
c002518e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0025192:	0f b6 c0             	movzbl %al,%eax
c0025195:	83 ec 0c             	sub    $0xc,%esp
c0025198:	50                   	push   %eax
c0025199:	e8 af 20 00 00       	call   c002724d <input_putc>
c002519e:	83 c4 10             	add    $0x10,%esp
c00251a1:	eb 3e                	jmp    c00251e1 <keyboard_interrupt+0x264>
c00251a3:	c7 45 f0 40 3a 03 c0 	movl   $0xc0033a40,-0x10(%ebp)
c00251aa:	eb 2a                	jmp    c00251d6 <keyboard_interrupt+0x259>
c00251ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00251af:	8b 00                	mov    (%eax),%eax
c00251b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00251b4:	75 1c                	jne    c00251d2 <keyboard_interrupt+0x255>
c00251b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00251b9:	8b 50 04             	mov    0x4(%eax),%edx
c00251bc:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00251c0:	85 c0                	test   %eax,%eax
c00251c2:	0f 95 c0             	setne  %al
c00251c5:	83 f0 01             	xor    $0x1,%eax
c00251c8:	0f b6 c0             	movzbl %al,%eax
c00251cb:	83 e0 01             	and    $0x1,%eax
c00251ce:	88 02                	mov    %al,(%edx)
c00251d0:	eb 10                	jmp    c00251e2 <keyboard_interrupt+0x265>
c00251d2:	83 45 f0 08          	addl   $0x8,-0x10(%ebp)
c00251d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00251d9:	8b 00                	mov    (%eax),%eax
c00251db:	85 c0                	test   %eax,%eax
c00251dd:	75 cd                	jne    c00251ac <keyboard_interrupt+0x22f>
c00251df:	eb 01                	jmp    c00251e2 <keyboard_interrupt+0x265>
c00251e1:	90                   	nop
c00251e2:	90                   	nop
c00251e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00251e6:	c9                   	leave  
c00251e7:	c3                   	ret    

c00251e8 <map_key>:
c00251e8:	55                   	push   %ebp
c00251e9:	89 e5                	mov    %esp,%ebp
c00251eb:	53                   	push   %ebx
c00251ec:	83 ec 04             	sub    $0x4,%esp
c00251ef:	eb 5d                	jmp    c002524e <map_key+0x66>
c00251f1:	8b 45 08             	mov    0x8(%ebp),%eax
c00251f4:	0f b6 00             	movzbl (%eax),%eax
c00251f7:	0f b6 c0             	movzbl %al,%eax
c00251fa:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00251fd:	77 4b                	ja     c002524a <map_key+0x62>
c00251ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0025202:	0f b6 00             	movzbl (%eax),%eax
c0025205:	0f b6 d8             	movzbl %al,%ebx
c0025208:	8b 45 08             	mov    0x8(%ebp),%eax
c002520b:	8b 40 04             	mov    0x4(%eax),%eax
c002520e:	83 ec 0c             	sub    $0xc,%esp
c0025211:	50                   	push   %eax
c0025212:	e8 32 46 00 00       	call   c0029849 <strlen>
c0025217:	83 c4 10             	add    $0x10,%esp
c002521a:	01 d8                	add    %ebx,%eax
c002521c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002521f:	76 29                	jbe    c002524a <map_key+0x62>
c0025221:	8b 45 08             	mov    0x8(%ebp),%eax
c0025224:	8b 50 04             	mov    0x4(%eax),%edx
c0025227:	8b 45 08             	mov    0x8(%ebp),%eax
c002522a:	0f b6 00             	movzbl (%eax),%eax
c002522d:	0f b6 c0             	movzbl %al,%eax
c0025230:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0025233:	29 c1                	sub    %eax,%ecx
c0025235:	89 c8                	mov    %ecx,%eax
c0025237:	01 d0                	add    %edx,%eax
c0025239:	0f b6 00             	movzbl (%eax),%eax
c002523c:	89 c2                	mov    %eax,%edx
c002523e:	8b 45 10             	mov    0x10(%ebp),%eax
c0025241:	88 10                	mov    %dl,(%eax)
c0025243:	b8 01 00 00 00       	mov    $0x1,%eax
c0025248:	eb 13                	jmp    c002525d <map_key+0x75>
c002524a:	83 45 08 08          	addl   $0x8,0x8(%ebp)
c002524e:	8b 45 08             	mov    0x8(%ebp),%eax
c0025251:	0f b6 00             	movzbl (%eax),%eax
c0025254:	84 c0                	test   %al,%al
c0025256:	75 99                	jne    c00251f1 <map_key+0x9>
c0025258:	b8 00 00 00 00       	mov    $0x0,%eax
c002525d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0025260:	c9                   	leave  
c0025261:	c3                   	ret    

c0025262 <inb>:
c0025262:	55                   	push   %ebp
c0025263:	89 e5                	mov    %esp,%ebp
c0025265:	83 ec 14             	sub    $0x14,%esp
c0025268:	8b 45 08             	mov    0x8(%ebp),%eax
c002526b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c002526f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0025273:	89 c2                	mov    %eax,%edx
c0025275:	ec                   	in     (%dx),%al
c0025276:	88 45 ff             	mov    %al,-0x1(%ebp)
c0025279:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c002527d:	c9                   	leave  
c002527e:	c3                   	ret    

c002527f <outb>:
c002527f:	55                   	push   %ebp
c0025280:	89 e5                	mov    %esp,%ebp
c0025282:	83 ec 08             	sub    $0x8,%esp
c0025285:	8b 55 08             	mov    0x8(%ebp),%edx
c0025288:	8b 45 0c             	mov    0xc(%ebp),%eax
c002528b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c002528f:	88 45 f8             	mov    %al,-0x8(%ebp)
c0025292:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0025296:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c002529a:	ee                   	out    %al,(%dx)
c002529b:	90                   	nop
c002529c:	c9                   	leave  
c002529d:	c3                   	ret    

c002529e <outw>:
c002529e:	55                   	push   %ebp
c002529f:	89 e5                	mov    %esp,%ebp
c00252a1:	83 ec 08             	sub    $0x8,%esp
c00252a4:	8b 55 08             	mov    0x8(%ebp),%edx
c00252a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00252aa:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00252ae:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c00252b2:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c00252b6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00252ba:	66 ef                	out    %ax,(%dx)
c00252bc:	90                   	nop
c00252bd:	c9                   	leave  
c00252be:	c3                   	ret    

c00252bf <ptov>:
c00252bf:	55                   	push   %ebp
c00252c0:	89 e5                	mov    %esp,%ebp
c00252c2:	83 ec 08             	sub    $0x8,%esp
c00252c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00252c8:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c00252cd:	76 1e                	jbe    c00252ed <ptov+0x2e>
c00252cf:	83 ec 0c             	sub    $0xc,%esp
c00252d2:	68 78 3a 03 c0       	push   $0xc0033a78
c00252d7:	68 93 3a 03 c0       	push   $0xc0033a93
c00252dc:	68 dc 3a 03 c0       	push   $0xc0033adc
c00252e1:	6a 4a                	push   $0x4a
c00252e3:	68 aa 3a 03 c0       	push   $0xc0033aaa
c00252e8:	e8 3d 52 00 00       	call   c002a52a <debug_panic>
c00252ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00252f0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c00252f5:	c9                   	leave  
c00252f6:	c3                   	ret    

c00252f7 <init>:
c00252f7:	55                   	push   %ebp
c00252f8:	89 e5                	mov    %esp,%ebp
c00252fa:	83 ec 08             	sub    $0x8,%esp
c00252fd:	0f b6 05 5c d9 03 c0 	movzbl 0xc003d95c,%eax
c0025304:	83 f0 01             	xor    $0x1,%eax
c0025307:	84 c0                	test   %al,%al
c0025309:	74 31                	je     c002533c <init+0x45>
c002530b:	83 ec 0c             	sub    $0xc,%esp
c002530e:	68 00 80 0b 00       	push   $0xb8000
c0025313:	e8 a7 ff ff ff       	call   c00252bf <ptov>
c0025318:	83 c4 10             	add    $0x10,%esp
c002531b:	a3 58 d9 03 c0       	mov    %eax,0xc003d958
c0025320:	83 ec 08             	sub    $0x8,%esp
c0025323:	68 54 d9 03 c0       	push   $0xc003d954
c0025328:	68 50 d9 03 c0       	push   $0xc003d950
c002532d:	e8 9a 02 00 00       	call   c00255cc <find_cursor>
c0025332:	83 c4 10             	add    $0x10,%esp
c0025335:	c6 05 5c d9 03 c0 01 	movb   $0x1,0xc003d95c
c002533c:	90                   	nop
c002533d:	c9                   	leave  
c002533e:	c3                   	ret    

c002533f <vga_putc>:
c002533f:	55                   	push   %ebp
c0025340:	89 e5                	mov    %esp,%ebp
c0025342:	83 ec 18             	sub    $0x18,%esp
c0025345:	e8 3f ca ff ff       	call   c0021d89 <intr_disable>
c002534a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002534d:	e8 a5 ff ff ff       	call   c00252f7 <init>
c0025352:	8b 45 08             	mov    0x8(%ebp),%eax
c0025355:	83 e8 07             	sub    $0x7,%eax
c0025358:	83 f8 06             	cmp    $0x6,%eax
c002535b:	0f 87 90 00 00 00    	ja     c00253f1 <vga_putc+0xb2>
c0025361:	8b 04 85 c0 3a 03 c0 	mov    -0x3ffcc540(,%eax,4),%eax
c0025368:	ff e0                	jmp    *%eax
c002536a:	e8 9e 01 00 00       	call   c002550d <newline>
c002536f:	e9 e9 00 00 00       	jmp    c002545d <vga_putc+0x11e>
c0025374:	e8 fa 00 00 00       	call   c0025473 <cls>
c0025379:	e9 df 00 00 00       	jmp    c002545d <vga_putc+0x11e>
c002537e:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c0025383:	85 c0                	test   %eax,%eax
c0025385:	0f 84 cb 00 00 00    	je     c0025456 <vga_putc+0x117>
c002538b:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c0025390:	83 e8 01             	sub    $0x1,%eax
c0025393:	a3 50 d9 03 c0       	mov    %eax,0xc003d950
c0025398:	e9 b9 00 00 00       	jmp    c0025456 <vga_putc+0x117>
c002539d:	c7 05 50 d9 03 c0 00 	movl   $0x0,0xc003d950
c00253a4:	00 00 00 
c00253a7:	e9 b1 00 00 00       	jmp    c002545d <vga_putc+0x11e>
c00253ac:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c00253b1:	83 c0 08             	add    $0x8,%eax
c00253b4:	c1 e8 03             	shr    $0x3,%eax
c00253b7:	c1 e0 03             	shl    $0x3,%eax
c00253ba:	a3 50 d9 03 c0       	mov    %eax,0xc003d950
c00253bf:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c00253c4:	83 f8 4f             	cmp    $0x4f,%eax
c00253c7:	0f 86 8c 00 00 00    	jbe    c0025459 <vga_putc+0x11a>
c00253cd:	e8 3b 01 00 00       	call   c002550d <newline>
c00253d2:	e9 82 00 00 00       	jmp    c0025459 <vga_putc+0x11a>
c00253d7:	83 ec 0c             	sub    $0xc,%esp
c00253da:	ff 75 f4             	pushl  -0xc(%ebp)
c00253dd:	e8 4f c9 ff ff       	call   c0021d31 <intr_set_level>
c00253e2:	83 c4 10             	add    $0x10,%esp
c00253e5:	e8 70 28 00 00       	call   c0027c5a <speaker_beep>
c00253ea:	e8 9a c9 ff ff       	call   c0021d89 <intr_disable>
c00253ef:	eb 6c                	jmp    c002545d <vga_putc+0x11e>
c00253f1:	8b 0d 58 d9 03 c0    	mov    0xc003d958,%ecx
c00253f7:	8b 15 54 d9 03 c0    	mov    0xc003d954,%edx
c00253fd:	89 d0                	mov    %edx,%eax
c00253ff:	c1 e0 02             	shl    $0x2,%eax
c0025402:	01 d0                	add    %edx,%eax
c0025404:	c1 e0 05             	shl    $0x5,%eax
c0025407:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c002540a:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c002540f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0025412:	88 0c 42             	mov    %cl,(%edx,%eax,2)
c0025415:	8b 0d 58 d9 03 c0    	mov    0xc003d958,%ecx
c002541b:	8b 15 54 d9 03 c0    	mov    0xc003d954,%edx
c0025421:	89 d0                	mov    %edx,%eax
c0025423:	c1 e0 02             	shl    $0x2,%eax
c0025426:	01 d0                	add    %edx,%eax
c0025428:	c1 e0 05             	shl    $0x5,%eax
c002542b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c002542e:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c0025433:	c6 44 42 01 07       	movb   $0x7,0x1(%edx,%eax,2)
c0025438:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c002543d:	83 c0 01             	add    $0x1,%eax
c0025440:	a3 50 d9 03 c0       	mov    %eax,0xc003d950
c0025445:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c002544a:	83 f8 4f             	cmp    $0x4f,%eax
c002544d:	76 0d                	jbe    c002545c <vga_putc+0x11d>
c002544f:	e8 b9 00 00 00       	call   c002550d <newline>
c0025454:	eb 06                	jmp    c002545c <vga_putc+0x11d>
c0025456:	90                   	nop
c0025457:	eb 04                	jmp    c002545d <vga_putc+0x11e>
c0025459:	90                   	nop
c002545a:	eb 01                	jmp    c002545d <vga_putc+0x11e>
c002545c:	90                   	nop
c002545d:	e8 0e 01 00 00       	call   c0025570 <move_cursor>
c0025462:	83 ec 0c             	sub    $0xc,%esp
c0025465:	ff 75 f4             	pushl  -0xc(%ebp)
c0025468:	e8 c4 c8 ff ff       	call   c0021d31 <intr_set_level>
c002546d:	83 c4 10             	add    $0x10,%esp
c0025470:	90                   	nop
c0025471:	c9                   	leave  
c0025472:	c3                   	ret    

c0025473 <cls>:
c0025473:	55                   	push   %ebp
c0025474:	89 e5                	mov    %esp,%ebp
c0025476:	83 ec 18             	sub    $0x18,%esp
c0025479:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0025480:	eb 12                	jmp    c0025494 <cls+0x21>
c0025482:	83 ec 0c             	sub    $0xc,%esp
c0025485:	ff 75 f4             	pushl  -0xc(%ebp)
c0025488:	e8 29 00 00 00       	call   c00254b6 <clear_row>
c002548d:	83 c4 10             	add    $0x10,%esp
c0025490:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0025494:	83 7d f4 18          	cmpl   $0x18,-0xc(%ebp)
c0025498:	76 e8                	jbe    c0025482 <cls+0xf>
c002549a:	c7 05 54 d9 03 c0 00 	movl   $0x0,0xc003d954
c00254a1:	00 00 00 
c00254a4:	a1 54 d9 03 c0       	mov    0xc003d954,%eax
c00254a9:	a3 50 d9 03 c0       	mov    %eax,0xc003d950
c00254ae:	e8 bd 00 00 00       	call   c0025570 <move_cursor>
c00254b3:	90                   	nop
c00254b4:	c9                   	leave  
c00254b5:	c3                   	ret    

c00254b6 <clear_row>:
c00254b6:	55                   	push   %ebp
c00254b7:	89 e5                	mov    %esp,%ebp
c00254b9:	83 ec 10             	sub    $0x10,%esp
c00254bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c00254c3:	eb 3f                	jmp    c0025504 <clear_row+0x4e>
c00254c5:	8b 0d 58 d9 03 c0    	mov    0xc003d958,%ecx
c00254cb:	8b 55 08             	mov    0x8(%ebp),%edx
c00254ce:	89 d0                	mov    %edx,%eax
c00254d0:	c1 e0 02             	shl    $0x2,%eax
c00254d3:	01 d0                	add    %edx,%eax
c00254d5:	c1 e0 05             	shl    $0x5,%eax
c00254d8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c00254db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00254de:	c6 04 42 20          	movb   $0x20,(%edx,%eax,2)
c00254e2:	8b 0d 58 d9 03 c0    	mov    0xc003d958,%ecx
c00254e8:	8b 55 08             	mov    0x8(%ebp),%edx
c00254eb:	89 d0                	mov    %edx,%eax
c00254ed:	c1 e0 02             	shl    $0x2,%eax
c00254f0:	01 d0                	add    %edx,%eax
c00254f2:	c1 e0 05             	shl    $0x5,%eax
c00254f5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c00254f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00254fb:	c6 44 42 01 07       	movb   $0x7,0x1(%edx,%eax,2)
c0025500:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0025504:	83 7d fc 4f          	cmpl   $0x4f,-0x4(%ebp)
c0025508:	76 bb                	jbe    c00254c5 <clear_row+0xf>
c002550a:	90                   	nop
c002550b:	c9                   	leave  
c002550c:	c3                   	ret    

c002550d <newline>:
c002550d:	55                   	push   %ebp
c002550e:	89 e5                	mov    %esp,%ebp
c0025510:	83 ec 08             	sub    $0x8,%esp
c0025513:	c7 05 50 d9 03 c0 00 	movl   $0x0,0xc003d950
c002551a:	00 00 00 
c002551d:	a1 54 d9 03 c0       	mov    0xc003d954,%eax
c0025522:	83 c0 01             	add    $0x1,%eax
c0025525:	a3 54 d9 03 c0       	mov    %eax,0xc003d954
c002552a:	a1 54 d9 03 c0       	mov    0xc003d954,%eax
c002552f:	83 f8 18             	cmp    $0x18,%eax
c0025532:	76 39                	jbe    c002556d <newline+0x60>
c0025534:	c7 05 54 d9 03 c0 18 	movl   $0x18,0xc003d954
c002553b:	00 00 00 
c002553e:	a1 58 d9 03 c0       	mov    0xc003d958,%eax
c0025543:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0025549:	a1 58 d9 03 c0       	mov    0xc003d958,%eax
c002554e:	83 ec 04             	sub    $0x4,%esp
c0025551:	68 00 0f 00 00       	push   $0xf00
c0025556:	52                   	push   %edx
c0025557:	50                   	push   %eax
c0025558:	e8 1c 3d 00 00       	call   c0029279 <memmove>
c002555d:	83 c4 10             	add    $0x10,%esp
c0025560:	83 ec 0c             	sub    $0xc,%esp
c0025563:	6a 18                	push   $0x18
c0025565:	e8 4c ff ff ff       	call   c00254b6 <clear_row>
c002556a:	83 c4 10             	add    $0x10,%esp
c002556d:	90                   	nop
c002556e:	c9                   	leave  
c002556f:	c3                   	ret    

c0025570 <move_cursor>:
c0025570:	55                   	push   %ebp
c0025571:	89 e5                	mov    %esp,%ebp
c0025573:	83 ec 10             	sub    $0x10,%esp
c0025576:	a1 54 d9 03 c0       	mov    0xc003d954,%eax
c002557b:	89 c2                	mov    %eax,%edx
c002557d:	89 d0                	mov    %edx,%eax
c002557f:	c1 e0 02             	shl    $0x2,%eax
c0025582:	01 d0                	add    %edx,%eax
c0025584:	c1 e0 04             	shl    $0x4,%eax
c0025587:	89 c2                	mov    %eax,%edx
c0025589:	a1 50 d9 03 c0       	mov    0xc003d950,%eax
c002558e:	01 d0                	add    %edx,%eax
c0025590:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
c0025594:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0025598:	b0 00                	mov    $0x0,%al
c002559a:	83 c8 0e             	or     $0xe,%eax
c002559d:	0f b7 c0             	movzwl %ax,%eax
c00255a0:	50                   	push   %eax
c00255a1:	68 d4 03 00 00       	push   $0x3d4
c00255a6:	e8 f3 fc ff ff       	call   c002529e <outw>
c00255ab:	83 c4 08             	add    $0x8,%esp
c00255ae:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c00255b2:	c1 e0 08             	shl    $0x8,%eax
c00255b5:	83 c8 0f             	or     $0xf,%eax
c00255b8:	0f b7 c0             	movzwl %ax,%eax
c00255bb:	50                   	push   %eax
c00255bc:	68 d4 03 00 00       	push   $0x3d4
c00255c1:	e8 d8 fc ff ff       	call   c002529e <outw>
c00255c6:	83 c4 08             	add    $0x8,%esp
c00255c9:	90                   	nop
c00255ca:	c9                   	leave  
c00255cb:	c3                   	ret    

c00255cc <find_cursor>:
c00255cc:	55                   	push   %ebp
c00255cd:	89 e5                	mov    %esp,%ebp
c00255cf:	83 ec 10             	sub    $0x10,%esp
c00255d2:	6a 0e                	push   $0xe
c00255d4:	68 d4 03 00 00       	push   $0x3d4
c00255d9:	e8 a1 fc ff ff       	call   c002527f <outb>
c00255de:	83 c4 08             	add    $0x8,%esp
c00255e1:	68 d5 03 00 00       	push   $0x3d5
c00255e6:	e8 77 fc ff ff       	call   c0025262 <inb>
c00255eb:	83 c4 04             	add    $0x4,%esp
c00255ee:	0f b6 c0             	movzbl %al,%eax
c00255f1:	c1 e0 08             	shl    $0x8,%eax
c00255f4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
c00255f8:	6a 0f                	push   $0xf
c00255fa:	68 d4 03 00 00       	push   $0x3d4
c00255ff:	e8 7b fc ff ff       	call   c002527f <outb>
c0025604:	83 c4 08             	add    $0x8,%esp
c0025607:	68 d5 03 00 00       	push   $0x3d5
c002560c:	e8 51 fc ff ff       	call   c0025262 <inb>
c0025611:	83 c4 04             	add    $0x4,%esp
c0025614:	0f b6 c0             	movzbl %al,%eax
c0025617:	66 09 45 fe          	or     %ax,-0x2(%ebp)
c002561b:	0f b7 4d fe          	movzwl -0x2(%ebp),%ecx
c002561f:	0f b7 c1             	movzwl %cx,%eax
c0025622:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0025628:	c1 e8 10             	shr    $0x10,%eax
c002562b:	89 c2                	mov    %eax,%edx
c002562d:	66 c1 ea 06          	shr    $0x6,%dx
c0025631:	89 d0                	mov    %edx,%eax
c0025633:	c1 e0 02             	shl    $0x2,%eax
c0025636:	01 d0                	add    %edx,%eax
c0025638:	c1 e0 04             	shl    $0x4,%eax
c002563b:	29 c1                	sub    %eax,%ecx
c002563d:	89 ca                	mov    %ecx,%edx
c002563f:	0f b7 d2             	movzwl %dx,%edx
c0025642:	8b 45 08             	mov    0x8(%ebp),%eax
c0025645:	89 10                	mov    %edx,(%eax)
c0025647:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c002564b:	0f b7 c0             	movzwl %ax,%eax
c002564e:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0025654:	c1 e8 10             	shr    $0x10,%eax
c0025657:	66 c1 e8 06          	shr    $0x6,%ax
c002565b:	0f b7 d0             	movzwl %ax,%edx
c002565e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0025661:	89 10                	mov    %edx,(%eax)
c0025663:	90                   	nop
c0025664:	c9                   	leave  
c0025665:	c3                   	ret    

c0025666 <inb>:
c0025666:	55                   	push   %ebp
c0025667:	89 e5                	mov    %esp,%ebp
c0025669:	83 ec 14             	sub    $0x14,%esp
c002566c:	8b 45 08             	mov    0x8(%ebp),%eax
c002566f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0025673:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0025677:	89 c2                	mov    %eax,%edx
c0025679:	ec                   	in     (%dx),%al
c002567a:	88 45 ff             	mov    %al,-0x1(%ebp)
c002567d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0025681:	c9                   	leave  
c0025682:	c3                   	ret    

c0025683 <outb>:
c0025683:	55                   	push   %ebp
c0025684:	89 e5                	mov    %esp,%ebp
c0025686:	83 ec 08             	sub    $0x8,%esp
c0025689:	8b 55 08             	mov    0x8(%ebp),%edx
c002568c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002568f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0025693:	88 45 f8             	mov    %al,-0x8(%ebp)
c0025696:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c002569a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c002569e:	ee                   	out    %al,(%dx)
c002569f:	90                   	nop
c00256a0:	c9                   	leave  
c00256a1:	c3                   	ret    

c00256a2 <init_poll>:
c00256a2:	55                   	push   %ebp
c00256a3:	89 e5                	mov    %esp,%ebp
c00256a5:	83 ec 08             	sub    $0x8,%esp
c00256a8:	a1 60 d9 03 c0       	mov    0xc003d960,%eax
c00256ad:	85 c0                	test   %eax,%eax
c00256af:	74 1e                	je     c00256cf <init_poll+0x2d>
c00256b1:	83 ec 0c             	sub    $0xc,%esp
c00256b4:	68 e4 3a 03 c0       	push   $0xc0033ae4
c00256b9:	68 f3 3a 03 c0       	push   $0xc0033af3
c00256be:	68 70 3b 03 c0       	push   $0xc0033b70
c00256c3:	6a 45                	push   $0x45
c00256c5:	68 0a 3b 03 c0       	push   $0xc0033b0a
c00256ca:	e8 5b 4e 00 00       	call   c002a52a <debug_panic>
c00256cf:	83 ec 08             	sub    $0x8,%esp
c00256d2:	6a 00                	push   $0x0
c00256d4:	68 f9 03 00 00       	push   $0x3f9
c00256d9:	e8 a5 ff ff ff       	call   c0025683 <outb>
c00256de:	83 c4 10             	add    $0x10,%esp
c00256e1:	83 ec 08             	sub    $0x8,%esp
c00256e4:	6a 00                	push   $0x0
c00256e6:	68 fa 03 00 00       	push   $0x3fa
c00256eb:	e8 93 ff ff ff       	call   c0025683 <outb>
c00256f0:	83 c4 10             	add    $0x10,%esp
c00256f3:	83 ec 0c             	sub    $0xc,%esp
c00256f6:	68 80 25 00 00       	push   $0x2580
c00256fb:	e8 e8 01 00 00       	call   c00258e8 <set_serial>
c0025700:	83 c4 10             	add    $0x10,%esp
c0025703:	83 ec 08             	sub    $0x8,%esp
c0025706:	6a 08                	push   $0x8
c0025708:	68 fc 03 00 00       	push   $0x3fc
c002570d:	e8 71 ff ff ff       	call   c0025683 <outb>
c0025712:	83 c4 10             	add    $0x10,%esp
c0025715:	83 ec 0c             	sub    $0xc,%esp
c0025718:	68 80 d9 03 c0       	push   $0xc003d980
c002571d:	e8 29 1c 00 00       	call   c002734b <intq_init>
c0025722:	83 c4 10             	add    $0x10,%esp
c0025725:	c7 05 60 d9 03 c0 01 	movl   $0x1,0xc003d960
c002572c:	00 00 00 
c002572f:	90                   	nop
c0025730:	c9                   	leave  
c0025731:	c3                   	ret    

c0025732 <serial_init_queue>:
c0025732:	55                   	push   %ebp
c0025733:	89 e5                	mov    %esp,%ebp
c0025735:	83 ec 18             	sub    $0x18,%esp
c0025738:	a1 60 d9 03 c0       	mov    0xc003d960,%eax
c002573d:	85 c0                	test   %eax,%eax
c002573f:	75 05                	jne    c0025746 <serial_init_queue+0x14>
c0025741:	e8 5c ff ff ff       	call   c00256a2 <init_poll>
c0025746:	a1 60 d9 03 c0       	mov    0xc003d960,%eax
c002574b:	83 f8 01             	cmp    $0x1,%eax
c002574e:	74 1e                	je     c002576e <serial_init_queue+0x3c>
c0025750:	83 ec 0c             	sub    $0xc,%esp
c0025753:	68 21 3b 03 c0       	push   $0xc0033b21
c0025758:	68 f3 3a 03 c0       	push   $0xc0033af3
c002575d:	68 7c 3b 03 c0       	push   $0xc0033b7c
c0025762:	6a 58                	push   $0x58
c0025764:	68 0a 3b 03 c0       	push   $0xc0033b0a
c0025769:	e8 bc 4d 00 00       	call   c002a52a <debug_panic>
c002576e:	83 ec 04             	sub    $0x4,%esp
c0025771:	68 2e 3b 03 c0       	push   $0xc0033b2e
c0025776:	68 71 5a 02 c0       	push   $0xc0025a71
c002577b:	6a 24                	push   $0x24
c002577d:	e8 28 c8 ff ff       	call   c0021faa <intr_register_ext>
c0025782:	83 c4 10             	add    $0x10,%esp
c0025785:	c7 05 60 d9 03 c0 02 	movl   $0x2,0xc003d960
c002578c:	00 00 00 
c002578f:	e8 f5 c5 ff ff       	call   c0021d89 <intr_disable>
c0025794:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025797:	e8 f5 01 00 00       	call   c0025991 <write_ier>
c002579c:	83 ec 0c             	sub    $0xc,%esp
c002579f:	ff 75 f4             	pushl  -0xc(%ebp)
c00257a2:	e8 8a c5 ff ff       	call   c0021d31 <intr_set_level>
c00257a7:	83 c4 10             	add    $0x10,%esp
c00257aa:	90                   	nop
c00257ab:	c9                   	leave  
c00257ac:	c3                   	ret    

c00257ad <serial_putc>:
c00257ad:	55                   	push   %ebp
c00257ae:	89 e5                	mov    %esp,%ebp
c00257b0:	83 ec 28             	sub    $0x28,%esp
c00257b3:	8b 45 08             	mov    0x8(%ebp),%eax
c00257b6:	88 45 e4             	mov    %al,-0x1c(%ebp)
c00257b9:	e8 cb c5 ff ff       	call   c0021d89 <intr_disable>
c00257be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00257c1:	a1 60 d9 03 c0       	mov    0xc003d960,%eax
c00257c6:	83 f8 02             	cmp    $0x2,%eax
c00257c9:	74 20                	je     c00257eb <serial_putc+0x3e>
c00257cb:	a1 60 d9 03 c0       	mov    0xc003d960,%eax
c00257d0:	85 c0                	test   %eax,%eax
c00257d2:	75 05                	jne    c00257d9 <serial_putc+0x2c>
c00257d4:	e8 c9 fe ff ff       	call   c00256a2 <init_poll>
c00257d9:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00257dd:	83 ec 0c             	sub    $0xc,%esp
c00257e0:	50                   	push   %eax
c00257e1:	e8 22 02 00 00       	call   c0025a08 <putc_poll>
c00257e6:	83 c4 10             	add    $0x10,%esp
c00257e9:	eb 53                	jmp    c002583e <serial_putc+0x91>
c00257eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00257ef:	75 33                	jne    c0025824 <serial_putc+0x77>
c00257f1:	83 ec 0c             	sub    $0xc,%esp
c00257f4:	68 80 d9 03 c0       	push   $0xc003d980
c00257f9:	e8 d1 1b 00 00       	call   c00273cf <intq_full>
c00257fe:	83 c4 10             	add    $0x10,%esp
c0025801:	84 c0                	test   %al,%al
c0025803:	74 1f                	je     c0025824 <serial_putc+0x77>
c0025805:	83 ec 0c             	sub    $0xc,%esp
c0025808:	68 80 d9 03 c0       	push   $0xc003d980
c002580d:	e8 0b 1c 00 00       	call   c002741d <intq_getc>
c0025812:	83 c4 10             	add    $0x10,%esp
c0025815:	0f b6 c0             	movzbl %al,%eax
c0025818:	83 ec 0c             	sub    $0xc,%esp
c002581b:	50                   	push   %eax
c002581c:	e8 e7 01 00 00       	call   c0025a08 <putc_poll>
c0025821:	83 c4 10             	add    $0x10,%esp
c0025824:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0025828:	83 ec 08             	sub    $0x8,%esp
c002582b:	50                   	push   %eax
c002582c:	68 80 d9 03 c0       	push   $0xc003d980
c0025831:	e8 c9 1c 00 00       	call   c00274ff <intq_putc>
c0025836:	83 c4 10             	add    $0x10,%esp
c0025839:	e8 53 01 00 00       	call   c0025991 <write_ier>
c002583e:	83 ec 0c             	sub    $0xc,%esp
c0025841:	ff 75 f4             	pushl  -0xc(%ebp)
c0025844:	e8 e8 c4 ff ff       	call   c0021d31 <intr_set_level>
c0025849:	83 c4 10             	add    $0x10,%esp
c002584c:	90                   	nop
c002584d:	c9                   	leave  
c002584e:	c3                   	ret    

c002584f <serial_flush>:
c002584f:	55                   	push   %ebp
c0025850:	89 e5                	mov    %esp,%ebp
c0025852:	83 ec 18             	sub    $0x18,%esp
c0025855:	e8 2f c5 ff ff       	call   c0021d89 <intr_disable>
c002585a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002585d:	eb 1f                	jmp    c002587e <serial_flush+0x2f>
c002585f:	83 ec 0c             	sub    $0xc,%esp
c0025862:	68 80 d9 03 c0       	push   $0xc003d980
c0025867:	e8 b1 1b 00 00       	call   c002741d <intq_getc>
c002586c:	83 c4 10             	add    $0x10,%esp
c002586f:	0f b6 c0             	movzbl %al,%eax
c0025872:	83 ec 0c             	sub    $0xc,%esp
c0025875:	50                   	push   %eax
c0025876:	e8 8d 01 00 00       	call   c0025a08 <putc_poll>
c002587b:	83 c4 10             	add    $0x10,%esp
c002587e:	83 ec 0c             	sub    $0xc,%esp
c0025881:	68 80 d9 03 c0       	push   $0xc003d980
c0025886:	e8 04 1b 00 00       	call   c002738f <intq_empty>
c002588b:	83 c4 10             	add    $0x10,%esp
c002588e:	83 f0 01             	xor    $0x1,%eax
c0025891:	84 c0                	test   %al,%al
c0025893:	75 ca                	jne    c002585f <serial_flush+0x10>
c0025895:	83 ec 0c             	sub    $0xc,%esp
c0025898:	ff 75 f4             	pushl  -0xc(%ebp)
c002589b:	e8 91 c4 ff ff       	call   c0021d31 <intr_set_level>
c00258a0:	83 c4 10             	add    $0x10,%esp
c00258a3:	90                   	nop
c00258a4:	c9                   	leave  
c00258a5:	c3                   	ret    

c00258a6 <serial_notify>:
c00258a6:	55                   	push   %ebp
c00258a7:	89 e5                	mov    %esp,%ebp
c00258a9:	83 ec 08             	sub    $0x8,%esp
c00258ac:	e8 63 c4 ff ff       	call   c0021d14 <intr_get_level>
c00258b1:	85 c0                	test   %eax,%eax
c00258b3:	74 21                	je     c00258d6 <serial_notify+0x30>
c00258b5:	83 ec 0c             	sub    $0xc,%esp
c00258b8:	68 35 3b 03 c0       	push   $0xc0033b35
c00258bd:	68 f3 3a 03 c0       	push   $0xc0033af3
c00258c2:	68 90 3b 03 c0       	push   $0xc0033b90
c00258c7:	68 96 00 00 00       	push   $0x96
c00258cc:	68 0a 3b 03 c0       	push   $0xc0033b0a
c00258d1:	e8 54 4c 00 00       	call   c002a52a <debug_panic>
c00258d6:	a1 60 d9 03 c0       	mov    0xc003d960,%eax
c00258db:	83 f8 02             	cmp    $0x2,%eax
c00258de:	75 05                	jne    c00258e5 <serial_notify+0x3f>
c00258e0:	e8 ac 00 00 00       	call   c0025991 <write_ier>
c00258e5:	90                   	nop
c00258e6:	c9                   	leave  
c00258e7:	c3                   	ret    

c00258e8 <set_serial>:
c00258e8:	55                   	push   %ebp
c00258e9:	89 e5                	mov    %esp,%ebp
c00258eb:	83 ec 18             	sub    $0x18,%esp
c00258ee:	c7 45 f4 00 c2 01 00 	movl   $0x1c200,-0xc(%ebp)
c00258f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00258f8:	99                   	cltd   
c00258f9:	f7 7d 08             	idivl  0x8(%ebp)
c00258fc:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0025900:	81 7d 08 2b 01 00 00 	cmpl   $0x12b,0x8(%ebp)
c0025907:	7e 09                	jle    c0025912 <set_serial+0x2a>
c0025909:	81 7d 08 00 c2 01 00 	cmpl   $0x1c200,0x8(%ebp)
c0025910:	7e 21                	jle    c0025933 <set_serial+0x4b>
c0025912:	83 ec 0c             	sub    $0xc,%esp
c0025915:	68 53 3b 03 c0       	push   $0xc0033b53
c002591a:	68 f3 3a 03 c0       	push   $0xc0033af3
c002591f:	68 a0 3b 03 c0       	push   $0xc0033ba0
c0025924:	68 a2 00 00 00       	push   $0xa2
c0025929:	68 0a 3b 03 c0       	push   $0xc0033b0a
c002592e:	e8 f7 4b 00 00       	call   c002a52a <debug_panic>
c0025933:	83 ec 08             	sub    $0x8,%esp
c0025936:	68 83 00 00 00       	push   $0x83
c002593b:	68 fb 03 00 00       	push   $0x3fb
c0025940:	e8 3e fd ff ff       	call   c0025683 <outb>
c0025945:	83 c4 10             	add    $0x10,%esp
c0025948:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c002594c:	0f b6 c0             	movzbl %al,%eax
c002594f:	83 ec 08             	sub    $0x8,%esp
c0025952:	50                   	push   %eax
c0025953:	68 f8 03 00 00       	push   $0x3f8
c0025958:	e8 26 fd ff ff       	call   c0025683 <outb>
c002595d:	83 c4 10             	add    $0x10,%esp
c0025960:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0025964:	66 c1 e8 08          	shr    $0x8,%ax
c0025968:	0f b6 c0             	movzbl %al,%eax
c002596b:	83 ec 08             	sub    $0x8,%esp
c002596e:	50                   	push   %eax
c002596f:	68 f9 03 00 00       	push   $0x3f9
c0025974:	e8 0a fd ff ff       	call   c0025683 <outb>
c0025979:	83 c4 10             	add    $0x10,%esp
c002597c:	83 ec 08             	sub    $0x8,%esp
c002597f:	6a 03                	push   $0x3
c0025981:	68 fb 03 00 00       	push   $0x3fb
c0025986:	e8 f8 fc ff ff       	call   c0025683 <outb>
c002598b:	83 c4 10             	add    $0x10,%esp
c002598e:	90                   	nop
c002598f:	c9                   	leave  
c0025990:	c3                   	ret    

c0025991 <write_ier>:
c0025991:	55                   	push   %ebp
c0025992:	89 e5                	mov    %esp,%ebp
c0025994:	83 ec 18             	sub    $0x18,%esp
c0025997:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c002599b:	e8 74 c3 ff ff       	call   c0021d14 <intr_get_level>
c00259a0:	85 c0                	test   %eax,%eax
c00259a2:	74 21                	je     c00259c5 <write_ier+0x34>
c00259a4:	83 ec 0c             	sub    $0xc,%esp
c00259a7:	68 35 3b 03 c0       	push   $0xc0033b35
c00259ac:	68 f3 3a 03 c0       	push   $0xc0033af3
c00259b1:	68 ac 3b 03 c0       	push   $0xc0033bac
c00259b6:	68 b5 00 00 00       	push   $0xb5
c00259bb:	68 0a 3b 03 c0       	push   $0xc0033b0a
c00259c0:	e8 65 4b 00 00       	call   c002a52a <debug_panic>
c00259c5:	83 ec 0c             	sub    $0xc,%esp
c00259c8:	68 80 d9 03 c0       	push   $0xc003d980
c00259cd:	e8 bd 19 00 00       	call   c002738f <intq_empty>
c00259d2:	83 c4 10             	add    $0x10,%esp
c00259d5:	83 f0 01             	xor    $0x1,%eax
c00259d8:	84 c0                	test   %al,%al
c00259da:	74 04                	je     c00259e0 <write_ier+0x4f>
c00259dc:	80 4d f7 02          	orb    $0x2,-0x9(%ebp)
c00259e0:	e8 27 19 00 00       	call   c002730c <input_full>
c00259e5:	83 f0 01             	xor    $0x1,%eax
c00259e8:	84 c0                	test   %al,%al
c00259ea:	74 04                	je     c00259f0 <write_ier+0x5f>
c00259ec:	80 4d f7 01          	orb    $0x1,-0x9(%ebp)
c00259f0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00259f4:	83 ec 08             	sub    $0x8,%esp
c00259f7:	50                   	push   %eax
c00259f8:	68 f9 03 00 00       	push   $0x3f9
c00259fd:	e8 81 fc ff ff       	call   c0025683 <outb>
c0025a02:	83 c4 10             	add    $0x10,%esp
c0025a05:	90                   	nop
c0025a06:	c9                   	leave  
c0025a07:	c3                   	ret    

c0025a08 <putc_poll>:
c0025a08:	55                   	push   %ebp
c0025a09:	89 e5                	mov    %esp,%ebp
c0025a0b:	83 ec 18             	sub    $0x18,%esp
c0025a0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0025a11:	88 45 f4             	mov    %al,-0xc(%ebp)
c0025a14:	e8 fb c2 ff ff       	call   c0021d14 <intr_get_level>
c0025a19:	85 c0                	test   %eax,%eax
c0025a1b:	74 22                	je     c0025a3f <putc_poll+0x37>
c0025a1d:	83 ec 0c             	sub    $0xc,%esp
c0025a20:	68 35 3b 03 c0       	push   $0xc0033b35
c0025a25:	68 f3 3a 03 c0       	push   $0xc0033af3
c0025a2a:	68 b8 3b 03 c0       	push   $0xc0033bb8
c0025a2f:	68 c9 00 00 00       	push   $0xc9
c0025a34:	68 0a 3b 03 c0       	push   $0xc0033b0a
c0025a39:	e8 ec 4a 00 00       	call   c002a52a <debug_panic>
c0025a3e:	90                   	nop
c0025a3f:	83 ec 0c             	sub    $0xc,%esp
c0025a42:	68 fd 03 00 00       	push   $0x3fd
c0025a47:	e8 1a fc ff ff       	call   c0025666 <inb>
c0025a4c:	83 c4 10             	add    $0x10,%esp
c0025a4f:	0f b6 c0             	movzbl %al,%eax
c0025a52:	83 e0 20             	and    $0x20,%eax
c0025a55:	85 c0                	test   %eax,%eax
c0025a57:	74 e5                	je     c0025a3e <putc_poll+0x36>
c0025a59:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0025a5d:	83 ec 08             	sub    $0x8,%esp
c0025a60:	50                   	push   %eax
c0025a61:	68 f8 03 00 00       	push   $0x3f8
c0025a66:	e8 18 fc ff ff       	call   c0025683 <outb>
c0025a6b:	83 c4 10             	add    $0x10,%esp
c0025a6e:	90                   	nop
c0025a6f:	c9                   	leave  
c0025a70:	c3                   	ret    

c0025a71 <serial_interrupt>:
c0025a71:	55                   	push   %ebp
c0025a72:	89 e5                	mov    %esp,%ebp
c0025a74:	83 ec 08             	sub    $0x8,%esp
c0025a77:	68 fa 03 00 00       	push   $0x3fa
c0025a7c:	e8 e5 fb ff ff       	call   c0025666 <inb>
c0025a81:	83 c4 04             	add    $0x4,%esp
c0025a84:	eb 1c                	jmp    c0025aa2 <serial_interrupt+0x31>
c0025a86:	68 f8 03 00 00       	push   $0x3f8
c0025a8b:	e8 d6 fb ff ff       	call   c0025666 <inb>
c0025a90:	83 c4 04             	add    $0x4,%esp
c0025a93:	0f b6 c0             	movzbl %al,%eax
c0025a96:	83 ec 0c             	sub    $0xc,%esp
c0025a99:	50                   	push   %eax
c0025a9a:	e8 ae 17 00 00       	call   c002724d <input_putc>
c0025a9f:	83 c4 10             	add    $0x10,%esp
c0025aa2:	e8 65 18 00 00       	call   c002730c <input_full>
c0025aa7:	83 f0 01             	xor    $0x1,%eax
c0025aaa:	84 c0                	test   %al,%al
c0025aac:	74 40                	je     c0025aee <serial_interrupt+0x7d>
c0025aae:	83 ec 0c             	sub    $0xc,%esp
c0025ab1:	68 fd 03 00 00       	push   $0x3fd
c0025ab6:	e8 ab fb ff ff       	call   c0025666 <inb>
c0025abb:	83 c4 10             	add    $0x10,%esp
c0025abe:	0f b6 c0             	movzbl %al,%eax
c0025ac1:	83 e0 01             	and    $0x1,%eax
c0025ac4:	85 c0                	test   %eax,%eax
c0025ac6:	75 be                	jne    c0025a86 <serial_interrupt+0x15>
c0025ac8:	eb 24                	jmp    c0025aee <serial_interrupt+0x7d>
c0025aca:	83 ec 0c             	sub    $0xc,%esp
c0025acd:	68 80 d9 03 c0       	push   $0xc003d980
c0025ad2:	e8 46 19 00 00       	call   c002741d <intq_getc>
c0025ad7:	83 c4 10             	add    $0x10,%esp
c0025ada:	0f b6 c0             	movzbl %al,%eax
c0025add:	83 ec 08             	sub    $0x8,%esp
c0025ae0:	50                   	push   %eax
c0025ae1:	68 f8 03 00 00       	push   $0x3f8
c0025ae6:	e8 98 fb ff ff       	call   c0025683 <outb>
c0025aeb:	83 c4 10             	add    $0x10,%esp
c0025aee:	83 ec 0c             	sub    $0xc,%esp
c0025af1:	68 80 d9 03 c0       	push   $0xc003d980
c0025af6:	e8 94 18 00 00       	call   c002738f <intq_empty>
c0025afb:	83 c4 10             	add    $0x10,%esp
c0025afe:	83 f0 01             	xor    $0x1,%eax
c0025b01:	84 c0                	test   %al,%al
c0025b03:	74 1a                	je     c0025b1f <serial_interrupt+0xae>
c0025b05:	83 ec 0c             	sub    $0xc,%esp
c0025b08:	68 fd 03 00 00       	push   $0x3fd
c0025b0d:	e8 54 fb ff ff       	call   c0025666 <inb>
c0025b12:	83 c4 10             	add    $0x10,%esp
c0025b15:	0f b6 c0             	movzbl %al,%eax
c0025b18:	83 e0 20             	and    $0x20,%eax
c0025b1b:	85 c0                	test   %eax,%eax
c0025b1d:	75 ab                	jne    c0025aca <serial_interrupt+0x59>
c0025b1f:	e8 6d fe ff ff       	call   c0025991 <write_ier>
c0025b24:	90                   	nop
c0025b25:	c9                   	leave  
c0025b26:	c3                   	ret    

c0025b27 <block_type_name>:
c0025b27:	55                   	push   %ebp
c0025b28:	89 e5                	mov    %esp,%ebp
c0025b2a:	83 ec 08             	sub    $0x8,%esp
c0025b2d:	83 7d 08 05          	cmpl   $0x5,0x8(%ebp)
c0025b31:	76 1e                	jbe    c0025b51 <block_type_name+0x2a>
c0025b33:	83 ec 0c             	sub    $0xc,%esp
c0025b36:	68 c4 3b 03 c0       	push   $0xc0033bc4
c0025b3b:	68 d5 3b 03 c0       	push   $0xc0033bd5
c0025b40:	68 dc 3c 03 c0       	push   $0xc0033cdc
c0025b45:	6a 2f                	push   $0x2f
c0025b47:	68 ec 3b 03 c0       	push   $0xc0033bec
c0025b4c:	e8 d9 49 00 00       	call   c002a52a <debug_panic>
c0025b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0025b54:	8b 04 85 bc bb 03 c0 	mov    -0x3ffc4444(,%eax,4),%eax
c0025b5b:	c9                   	leave  
c0025b5c:	c3                   	ret    

c0025b5d <block_get_role>:
c0025b5d:	55                   	push   %ebp
c0025b5e:	89 e5                	mov    %esp,%ebp
c0025b60:	83 ec 08             	sub    $0x8,%esp
c0025b63:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c0025b67:	76 1e                	jbe    c0025b87 <block_get_role+0x2a>
c0025b69:	83 ec 0c             	sub    $0xc,%esp
c0025b6c:	68 02 3c 03 c0       	push   $0xc0033c02
c0025b71:	68 d5 3b 03 c0       	push   $0xc0033bd5
c0025b76:	68 14 3d 03 c0       	push   $0xc0033d14
c0025b7b:	6a 38                	push   $0x38
c0025b7d:	68 ec 3b 03 c0       	push   $0xc0033bec
c0025b82:	e8 a3 49 00 00       	call   c002a52a <debug_panic>
c0025b87:	8b 45 08             	mov    0x8(%ebp),%eax
c0025b8a:	8b 04 85 f4 d9 03 c0 	mov    -0x3ffc260c(,%eax,4),%eax
c0025b91:	c9                   	leave  
c0025b92:	c3                   	ret    

c0025b93 <block_set_role>:
c0025b93:	55                   	push   %ebp
c0025b94:	89 e5                	mov    %esp,%ebp
c0025b96:	83 ec 08             	sub    $0x8,%esp
c0025b99:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c0025b9d:	76 1e                	jbe    c0025bbd <block_set_role+0x2a>
c0025b9f:	83 ec 0c             	sub    $0xc,%esp
c0025ba2:	68 02 3c 03 c0       	push   $0xc0033c02
c0025ba7:	68 d5 3b 03 c0       	push   $0xc0033bd5
c0025bac:	68 24 3d 03 c0       	push   $0xc0033d24
c0025bb1:	6a 40                	push   $0x40
c0025bb3:	68 ec 3b 03 c0       	push   $0xc0033bec
c0025bb8:	e8 6d 49 00 00       	call   c002a52a <debug_panic>
c0025bbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0025bc0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0025bc3:	89 14 85 f4 d9 03 c0 	mov    %edx,-0x3ffc260c(,%eax,4)
c0025bca:	90                   	nop
c0025bcb:	c9                   	leave  
c0025bcc:	c3                   	ret    

c0025bcd <block_first>:
c0025bcd:	55                   	push   %ebp
c0025bce:	89 e5                	mov    %esp,%ebp
c0025bd0:	83 ec 08             	sub    $0x8,%esp
c0025bd3:	83 ec 0c             	sub    $0xc,%esp
c0025bd6:	68 ac bb 03 c0       	push   $0xc003bbac
c0025bdb:	e8 12 4c 00 00       	call   c002a7f2 <list_begin>
c0025be0:	83 c4 10             	add    $0x10,%esp
c0025be3:	83 ec 0c             	sub    $0xc,%esp
c0025be6:	50                   	push   %eax
c0025be7:	e8 6d 03 00 00       	call   c0025f59 <list_elem_to_block>
c0025bec:	83 c4 10             	add    $0x10,%esp
c0025bef:	c9                   	leave  
c0025bf0:	c3                   	ret    

c0025bf1 <block_next>:
c0025bf1:	55                   	push   %ebp
c0025bf2:	89 e5                	mov    %esp,%ebp
c0025bf4:	83 ec 08             	sub    $0x8,%esp
c0025bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0025bfa:	83 ec 0c             	sub    $0xc,%esp
c0025bfd:	50                   	push   %eax
c0025bfe:	e8 21 4c 00 00       	call   c002a824 <list_next>
c0025c03:	83 c4 10             	add    $0x10,%esp
c0025c06:	83 ec 0c             	sub    $0xc,%esp
c0025c09:	50                   	push   %eax
c0025c0a:	e8 4a 03 00 00       	call   c0025f59 <list_elem_to_block>
c0025c0f:	83 c4 10             	add    $0x10,%esp
c0025c12:	c9                   	leave  
c0025c13:	c3                   	ret    

c0025c14 <block_get_by_name>:
c0025c14:	55                   	push   %ebp
c0025c15:	89 e5                	mov    %esp,%ebp
c0025c17:	83 ec 18             	sub    $0x18,%esp
c0025c1a:	83 ec 0c             	sub    $0xc,%esp
c0025c1d:	68 ac bb 03 c0       	push   $0xc003bbac
c0025c22:	e8 cb 4b 00 00       	call   c002a7f2 <list_begin>
c0025c27:	83 c4 10             	add    $0x10,%esp
c0025c2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025c2d:	eb 3b                	jmp    c0025c6a <block_get_by_name+0x56>
c0025c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025c32:	83 c0 04             	add    $0x4,%eax
c0025c35:	83 e8 04             	sub    $0x4,%eax
c0025c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0025c3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025c3e:	83 c0 08             	add    $0x8,%eax
c0025c41:	83 ec 08             	sub    $0x8,%esp
c0025c44:	50                   	push   %eax
c0025c45:	ff 75 08             	pushl  0x8(%ebp)
c0025c48:	e8 a5 37 00 00       	call   c00293f2 <strcmp>
c0025c4d:	83 c4 10             	add    $0x10,%esp
c0025c50:	85 c0                	test   %eax,%eax
c0025c52:	75 05                	jne    c0025c59 <block_get_by_name+0x45>
c0025c54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025c57:	eb 2b                	jmp    c0025c84 <block_get_by_name+0x70>
c0025c59:	83 ec 0c             	sub    $0xc,%esp
c0025c5c:	ff 75 f4             	pushl  -0xc(%ebp)
c0025c5f:	e8 c0 4b 00 00       	call   c002a824 <list_next>
c0025c64:	83 c4 10             	add    $0x10,%esp
c0025c67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025c6a:	83 ec 0c             	sub    $0xc,%esp
c0025c6d:	68 ac bb 03 c0       	push   $0xc003bbac
c0025c72:	e8 f7 4b 00 00       	call   c002a86e <list_end>
c0025c77:	83 c4 10             	add    $0x10,%esp
c0025c7a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0025c7d:	75 b0                	jne    c0025c2f <block_get_by_name+0x1b>
c0025c7f:	b8 00 00 00 00       	mov    $0x0,%eax
c0025c84:	c9                   	leave  
c0025c85:	c3                   	ret    

c0025c86 <check_sector>:
c0025c86:	55                   	push   %ebp
c0025c87:	89 e5                	mov    %esp,%ebp
c0025c89:	53                   	push   %ebx
c0025c8a:	83 ec 04             	sub    $0x4,%esp
c0025c8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0025c90:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025c93:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0025c96:	77 32                	ja     c0025cca <check_sector+0x44>
c0025c98:	8b 45 08             	mov    0x8(%ebp),%eax
c0025c9b:	8b 58 1c             	mov    0x1c(%eax),%ebx
c0025c9e:	83 ec 0c             	sub    $0xc,%esp
c0025ca1:	ff 75 08             	pushl  0x8(%ebp)
c0025ca4:	e8 fd 00 00 00       	call   c0025da6 <block_name>
c0025ca9:	83 c4 10             	add    $0x10,%esp
c0025cac:	83 ec 04             	sub    $0x4,%esp
c0025caf:	53                   	push   %ebx
c0025cb0:	ff 75 0c             	pushl  0xc(%ebp)
c0025cb3:	50                   	push   %eax
c0025cb4:	68 18 3c 03 c0       	push   $0xc0033c18
c0025cb9:	68 34 3d 03 c0       	push   $0xc0033d34
c0025cbe:	6a 70                	push   $0x70
c0025cc0:	68 ec 3b 03 c0       	push   $0xc0033bec
c0025cc5:	e8 60 48 00 00       	call   c002a52a <debug_panic>
c0025cca:	90                   	nop
c0025ccb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0025cce:	c9                   	leave  
c0025ccf:	c3                   	ret    

c0025cd0 <block_read>:
c0025cd0:	55                   	push   %ebp
c0025cd1:	89 e5                	mov    %esp,%ebp
c0025cd3:	83 ec 08             	sub    $0x8,%esp
c0025cd6:	83 ec 08             	sub    $0x8,%esp
c0025cd9:	ff 75 0c             	pushl  0xc(%ebp)
c0025cdc:	ff 75 08             	pushl  0x8(%ebp)
c0025cdf:	e8 a2 ff ff ff       	call   c0025c86 <check_sector>
c0025ce4:	83 c4 10             	add    $0x10,%esp
c0025ce7:	8b 45 08             	mov    0x8(%ebp),%eax
c0025cea:	8b 40 20             	mov    0x20(%eax),%eax
c0025ced:	8b 00                	mov    (%eax),%eax
c0025cef:	8b 55 08             	mov    0x8(%ebp),%edx
c0025cf2:	8b 52 24             	mov    0x24(%edx),%edx
c0025cf5:	83 ec 04             	sub    $0x4,%esp
c0025cf8:	ff 75 10             	pushl  0x10(%ebp)
c0025cfb:	ff 75 0c             	pushl  0xc(%ebp)
c0025cfe:	52                   	push   %edx
c0025cff:	ff d0                	call   *%eax
c0025d01:	83 c4 10             	add    $0x10,%esp
c0025d04:	8b 45 08             	mov    0x8(%ebp),%eax
c0025d07:	8b 50 2c             	mov    0x2c(%eax),%edx
c0025d0a:	8b 40 28             	mov    0x28(%eax),%eax
c0025d0d:	83 c0 01             	add    $0x1,%eax
c0025d10:	83 d2 00             	adc    $0x0,%edx
c0025d13:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0025d16:	89 41 28             	mov    %eax,0x28(%ecx)
c0025d19:	89 51 2c             	mov    %edx,0x2c(%ecx)
c0025d1c:	90                   	nop
c0025d1d:	c9                   	leave  
c0025d1e:	c3                   	ret    

c0025d1f <block_write>:
c0025d1f:	55                   	push   %ebp
c0025d20:	89 e5                	mov    %esp,%ebp
c0025d22:	83 ec 08             	sub    $0x8,%esp
c0025d25:	83 ec 08             	sub    $0x8,%esp
c0025d28:	ff 75 0c             	pushl  0xc(%ebp)
c0025d2b:	ff 75 08             	pushl  0x8(%ebp)
c0025d2e:	e8 53 ff ff ff       	call   c0025c86 <check_sector>
c0025d33:	83 c4 10             	add    $0x10,%esp
c0025d36:	8b 45 08             	mov    0x8(%ebp),%eax
c0025d39:	8b 40 18             	mov    0x18(%eax),%eax
c0025d3c:	83 f8 05             	cmp    $0x5,%eax
c0025d3f:	75 21                	jne    c0025d62 <block_write+0x43>
c0025d41:	83 ec 0c             	sub    $0xc,%esp
c0025d44:	68 4b 3c 03 c0       	push   $0xc0033c4b
c0025d49:	68 d5 3b 03 c0       	push   $0xc0033bd5
c0025d4e:	68 44 3d 03 c0       	push   $0xc0033d44
c0025d53:	68 89 00 00 00       	push   $0x89
c0025d58:	68 ec 3b 03 c0       	push   $0xc0033bec
c0025d5d:	e8 c8 47 00 00       	call   c002a52a <debug_panic>
c0025d62:	8b 45 08             	mov    0x8(%ebp),%eax
c0025d65:	8b 40 20             	mov    0x20(%eax),%eax
c0025d68:	8b 40 04             	mov    0x4(%eax),%eax
c0025d6b:	8b 55 08             	mov    0x8(%ebp),%edx
c0025d6e:	8b 52 24             	mov    0x24(%edx),%edx
c0025d71:	83 ec 04             	sub    $0x4,%esp
c0025d74:	ff 75 10             	pushl  0x10(%ebp)
c0025d77:	ff 75 0c             	pushl  0xc(%ebp)
c0025d7a:	52                   	push   %edx
c0025d7b:	ff d0                	call   *%eax
c0025d7d:	83 c4 10             	add    $0x10,%esp
c0025d80:	8b 45 08             	mov    0x8(%ebp),%eax
c0025d83:	8b 50 34             	mov    0x34(%eax),%edx
c0025d86:	8b 40 30             	mov    0x30(%eax),%eax
c0025d89:	83 c0 01             	add    $0x1,%eax
c0025d8c:	83 d2 00             	adc    $0x0,%edx
c0025d8f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0025d92:	89 41 30             	mov    %eax,0x30(%ecx)
c0025d95:	89 51 34             	mov    %edx,0x34(%ecx)
c0025d98:	90                   	nop
c0025d99:	c9                   	leave  
c0025d9a:	c3                   	ret    

c0025d9b <block_size>:
c0025d9b:	55                   	push   %ebp
c0025d9c:	89 e5                	mov    %esp,%ebp
c0025d9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0025da1:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025da4:	5d                   	pop    %ebp
c0025da5:	c3                   	ret    

c0025da6 <block_name>:
c0025da6:	55                   	push   %ebp
c0025da7:	89 e5                	mov    %esp,%ebp
c0025da9:	8b 45 08             	mov    0x8(%ebp),%eax
c0025dac:	83 c0 08             	add    $0x8,%eax
c0025daf:	5d                   	pop    %ebp
c0025db0:	c3                   	ret    

c0025db1 <block_type>:
c0025db1:	55                   	push   %ebp
c0025db2:	89 e5                	mov    %esp,%ebp
c0025db4:	8b 45 08             	mov    0x8(%ebp),%eax
c0025db7:	8b 40 18             	mov    0x18(%eax),%eax
c0025dba:	5d                   	pop    %ebp
c0025dbb:	c3                   	ret    

c0025dbc <block_print_stats>:
c0025dbc:	55                   	push   %ebp
c0025dbd:	89 e5                	mov    %esp,%ebp
c0025dbf:	56                   	push   %esi
c0025dc0:	53                   	push   %ebx
c0025dc1:	83 ec 20             	sub    $0x20,%esp
c0025dc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0025dcb:	eb 63                	jmp    c0025e30 <block_print_stats+0x74>
c0025dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025dd0:	8b 04 85 f4 d9 03 c0 	mov    -0x3ffc260c(,%eax,4),%eax
c0025dd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0025dda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0025dde:	74 4c                	je     c0025e2c <block_print_stats+0x70>
c0025de0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025de3:	8b 50 34             	mov    0x34(%eax),%edx
c0025de6:	8b 40 30             	mov    0x30(%eax),%eax
c0025de9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0025dec:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0025def:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025df2:	8b 58 28             	mov    0x28(%eax),%ebx
c0025df5:	8b 70 2c             	mov    0x2c(%eax),%esi
c0025df8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025dfb:	8b 40 18             	mov    0x18(%eax),%eax
c0025dfe:	83 ec 0c             	sub    $0xc,%esp
c0025e01:	50                   	push   %eax
c0025e02:	e8 20 fd ff ff       	call   c0025b27 <block_type_name>
c0025e07:	83 c4 10             	add    $0x10,%esp
c0025e0a:	89 c2                	mov    %eax,%edx
c0025e0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0025e0f:	83 c0 08             	add    $0x8,%eax
c0025e12:	83 ec 04             	sub    $0x4,%esp
c0025e15:	ff 75 e4             	pushl  -0x1c(%ebp)
c0025e18:	ff 75 e0             	pushl  -0x20(%ebp)
c0025e1b:	56                   	push   %esi
c0025e1c:	53                   	push   %ebx
c0025e1d:	52                   	push   %edx
c0025e1e:	50                   	push   %eax
c0025e1f:	68 68 3c 03 c0       	push   $0xc0033c68
c0025e24:	e8 a0 21 00 00       	call   c0027fc9 <printf>
c0025e29:	83 c4 20             	add    $0x20,%esp
c0025e2c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0025e30:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c0025e34:	7e 97                	jle    c0025dcd <block_print_stats+0x11>
c0025e36:	90                   	nop
c0025e37:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0025e3a:	5b                   	pop    %ebx
c0025e3b:	5e                   	pop    %esi
c0025e3c:	5d                   	pop    %ebp
c0025e3d:	c3                   	ret    

c0025e3e <block_register>:
c0025e3e:	55                   	push   %ebp
c0025e3f:	89 e5                	mov    %esp,%ebp
c0025e41:	83 ec 18             	sub    $0x18,%esp
c0025e44:	83 ec 0c             	sub    $0xc,%esp
c0025e47:	6a 38                	push   $0x38
c0025e49:	e8 a0 e2 ff ff       	call   c00240ee <malloc>
c0025e4e:	83 c4 10             	add    $0x10,%esp
c0025e51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0025e54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0025e58:	75 19                	jne    c0025e73 <block_register+0x35>
c0025e5a:	68 8c 3c 03 c0       	push   $0xc0033c8c
c0025e5f:	68 50 3d 03 c0       	push   $0xc0033d50
c0025e64:	68 c1 00 00 00       	push   $0xc1
c0025e69:	68 ec 3b 03 c0       	push   $0xc0033bec
c0025e6e:	e8 b7 46 00 00       	call   c002a52a <debug_panic>
c0025e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025e76:	83 ec 08             	sub    $0x8,%esp
c0025e79:	50                   	push   %eax
c0025e7a:	68 ac bb 03 c0       	push   $0xc003bbac
c0025e7f:	e8 f9 4c 00 00       	call   c002ab7d <list_push_back>
c0025e84:	83 c4 10             	add    $0x10,%esp
c0025e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025e8a:	83 c0 08             	add    $0x8,%eax
c0025e8d:	83 ec 04             	sub    $0x4,%esp
c0025e90:	6a 10                	push   $0x10
c0025e92:	ff 75 08             	pushl  0x8(%ebp)
c0025e95:	50                   	push   %eax
c0025e96:	e8 2c 3a 00 00       	call   c00298c7 <strlcpy>
c0025e9b:	83 c4 10             	add    $0x10,%esp
c0025e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025ea1:	8b 55 0c             	mov    0xc(%ebp),%edx
c0025ea4:	89 50 18             	mov    %edx,0x18(%eax)
c0025ea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025eaa:	8b 55 14             	mov    0x14(%ebp),%edx
c0025ead:	89 50 1c             	mov    %edx,0x1c(%eax)
c0025eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025eb3:	8b 55 18             	mov    0x18(%ebp),%edx
c0025eb6:	89 50 20             	mov    %edx,0x20(%eax)
c0025eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025ebc:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0025ebf:	89 50 24             	mov    %edx,0x24(%eax)
c0025ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025ec5:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c0025ecc:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
c0025ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025ed6:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
c0025edd:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
c0025ee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025ee7:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025eea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0025eed:	83 c2 08             	add    $0x8,%edx
c0025ef0:	83 ec 04             	sub    $0x4,%esp
c0025ef3:	50                   	push   %eax
c0025ef4:	52                   	push   %edx
c0025ef5:	68 c2 3c 03 c0       	push   $0xc0033cc2
c0025efa:	e8 ca 20 00 00       	call   c0027fc9 <printf>
c0025eff:	83 c4 10             	add    $0x10,%esp
c0025f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f05:	8b 40 1c             	mov    0x1c(%eax),%eax
c0025f08:	ba 00 00 00 00       	mov    $0x0,%edx
c0025f0d:	0f a4 c2 09          	shld   $0x9,%eax,%edx
c0025f11:	c1 e0 09             	shl    $0x9,%eax
c0025f14:	83 ec 08             	sub    $0x8,%esp
c0025f17:	52                   	push   %edx
c0025f18:	50                   	push   %eax
c0025f19:	e8 d0 2d 00 00       	call   c0028cee <print_human_readable_size>
c0025f1e:	83 c4 10             	add    $0x10,%esp
c0025f21:	83 ec 0c             	sub    $0xc,%esp
c0025f24:	6a 29                	push   $0x29
c0025f26:	e8 4e 69 00 00       	call   c002c879 <putchar>
c0025f2b:	83 c4 10             	add    $0x10,%esp
c0025f2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0025f32:	74 13                	je     c0025f47 <block_register+0x109>
c0025f34:	83 ec 08             	sub    $0x8,%esp
c0025f37:	ff 75 10             	pushl  0x10(%ebp)
c0025f3a:	68 d4 3c 03 c0       	push   $0xc0033cd4
c0025f3f:	e8 85 20 00 00       	call   c0027fc9 <printf>
c0025f44:	83 c4 10             	add    $0x10,%esp
c0025f47:	83 ec 0c             	sub    $0xc,%esp
c0025f4a:	6a 0a                	push   $0xa
c0025f4c:	e8 28 69 00 00       	call   c002c879 <putchar>
c0025f51:	83 c4 10             	add    $0x10,%esp
c0025f54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025f57:	c9                   	leave  
c0025f58:	c3                   	ret    

c0025f59 <list_elem_to_block>:
c0025f59:	55                   	push   %ebp
c0025f5a:	89 e5                	mov    %esp,%ebp
c0025f5c:	83 ec 08             	sub    $0x8,%esp
c0025f5f:	83 ec 0c             	sub    $0xc,%esp
c0025f62:	68 ac bb 03 c0       	push   $0xc003bbac
c0025f67:	e8 02 49 00 00       	call   c002a86e <list_end>
c0025f6c:	83 c4 10             	add    $0x10,%esp
c0025f6f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0025f72:	74 0b                	je     c0025f7f <list_elem_to_block+0x26>
c0025f74:	8b 45 08             	mov    0x8(%ebp),%eax
c0025f77:	83 c0 04             	add    $0x4,%eax
c0025f7a:	83 e8 04             	sub    $0x4,%eax
c0025f7d:	eb 05                	jmp    c0025f84 <list_elem_to_block+0x2b>
c0025f7f:	b8 00 00 00 00       	mov    $0x0,%eax
c0025f84:	c9                   	leave  
c0025f85:	c3                   	ret    

c0025f86 <partition_scan>:
c0025f86:	55                   	push   %ebp
c0025f87:	89 e5                	mov    %esp,%ebp
c0025f89:	83 ec 18             	sub    $0x18,%esp
c0025f8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0025f93:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0025f96:	50                   	push   %eax
c0025f97:	6a 00                	push   $0x0
c0025f99:	6a 00                	push   $0x0
c0025f9b:	ff 75 08             	pushl  0x8(%ebp)
c0025f9e:	e8 2c 00 00 00       	call   c0025fcf <read_partition_table>
c0025fa3:	83 c4 10             	add    $0x10,%esp
c0025fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0025fa9:	85 c0                	test   %eax,%eax
c0025fab:	75 1f                	jne    c0025fcc <partition_scan+0x46>
c0025fad:	83 ec 0c             	sub    $0xc,%esp
c0025fb0:	ff 75 08             	pushl  0x8(%ebp)
c0025fb3:	e8 ee fd ff ff       	call   c0025da6 <block_name>
c0025fb8:	83 c4 10             	add    $0x10,%esp
c0025fbb:	83 ec 08             	sub    $0x8,%esp
c0025fbe:	50                   	push   %eax
c0025fbf:	68 60 3d 03 c0       	push   $0xc0033d60
c0025fc4:	e8 00 20 00 00       	call   c0027fc9 <printf>
c0025fc9:	83 c4 10             	add    $0x10,%esp
c0025fcc:	90                   	nop
c0025fcd:	c9                   	leave  
c0025fce:	c3                   	ret    

c0025fcf <read_partition_table>:
c0025fcf:	55                   	push   %ebp
c0025fd0:	89 e5                	mov    %esp,%ebp
c0025fd2:	53                   	push   %ebx
c0025fd3:	83 ec 14             	sub    $0x14,%esp
c0025fd6:	83 ec 0c             	sub    $0xc,%esp
c0025fd9:	ff 75 08             	pushl  0x8(%ebp)
c0025fdc:	e8 ba fd ff ff       	call   c0025d9b <block_size>
c0025fe1:	83 c4 10             	add    $0x10,%esp
c0025fe4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0025fe7:	77 27                	ja     c0026010 <read_partition_table+0x41>
c0025fe9:	83 ec 0c             	sub    $0xc,%esp
c0025fec:	ff 75 08             	pushl  0x8(%ebp)
c0025fef:	e8 b2 fd ff ff       	call   c0025da6 <block_name>
c0025ff4:	83 c4 10             	add    $0x10,%esp
c0025ff7:	83 ec 04             	sub    $0x4,%esp
c0025ffa:	ff 75 0c             	pushl  0xc(%ebp)
c0025ffd:	50                   	push   %eax
c0025ffe:	68 84 3d 03 c0       	push   $0xc0033d84
c0026003:	e8 c1 1f 00 00       	call   c0027fc9 <printf>
c0026008:	83 c4 10             	add    $0x10,%esp
c002600b:	e9 d9 01 00 00       	jmp    c00261e9 <read_partition_table+0x21a>
c0026010:	83 ec 0c             	sub    $0xc,%esp
c0026013:	68 00 02 00 00       	push   $0x200
c0026018:	e8 d1 e0 ff ff       	call   c00240ee <malloc>
c002601d:	83 c4 10             	add    $0x10,%esp
c0026020:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026023:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0026027:	75 16                	jne    c002603f <read_partition_table+0x70>
c0026029:	68 bc 3d 03 c0       	push   $0xc0033dbc
c002602e:	68 44 3f 03 c0       	push   $0xc0033f44
c0026033:	6a 5a                	push   $0x5a
c0026035:	68 eb 3d 03 c0       	push   $0xc0033deb
c002603a:	e8 eb 44 00 00       	call   c002a52a <debug_panic>
c002603f:	83 ec 04             	sub    $0x4,%esp
c0026042:	ff 75 f0             	pushl  -0x10(%ebp)
c0026045:	6a 00                	push   $0x0
c0026047:	ff 75 08             	pushl  0x8(%ebp)
c002604a:	e8 81 fc ff ff       	call   c0025cd0 <block_read>
c002604f:	83 c4 10             	add    $0x10,%esp
c0026052:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026055:	0f b7 80 fe 01 00 00 	movzwl 0x1fe(%eax),%eax
c002605c:	66 3d 55 aa          	cmp    $0xaa55,%ax
c0026060:	74 5c                	je     c00260be <read_partition_table+0xef>
c0026062:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0026066:	75 21                	jne    c0026089 <read_partition_table+0xba>
c0026068:	83 ec 0c             	sub    $0xc,%esp
c002606b:	ff 75 08             	pushl  0x8(%ebp)
c002606e:	e8 33 fd ff ff       	call   c0025da6 <block_name>
c0026073:	83 c4 10             	add    $0x10,%esp
c0026076:	83 ec 08             	sub    $0x8,%esp
c0026079:	50                   	push   %eax
c002607a:	68 08 3e 03 c0       	push   $0xc0033e08
c002607f:	e8 45 1f 00 00       	call   c0027fc9 <printf>
c0026084:	83 c4 10             	add    $0x10,%esp
c0026087:	eb 22                	jmp    c00260ab <read_partition_table+0xdc>
c0026089:	83 ec 0c             	sub    $0xc,%esp
c002608c:	ff 75 08             	pushl  0x8(%ebp)
c002608f:	e8 12 fd ff ff       	call   c0025da6 <block_name>
c0026094:	83 c4 10             	add    $0x10,%esp
c0026097:	83 ec 04             	sub    $0x4,%esp
c002609a:	ff 75 0c             	pushl  0xc(%ebp)
c002609d:	50                   	push   %eax
c002609e:	68 30 3e 03 c0       	push   $0xc0033e30
c00260a3:	e8 21 1f 00 00       	call   c0027fc9 <printf>
c00260a8:	83 c4 10             	add    $0x10,%esp
c00260ab:	83 ec 0c             	sub    $0xc,%esp
c00260ae:	ff 75 f0             	pushl  -0x10(%ebp)
c00260b1:	e8 35 e3 ff ff       	call   c00243eb <free>
c00260b6:	83 c4 10             	add    $0x10,%esp
c00260b9:	e9 2b 01 00 00       	jmp    c00261e9 <read_partition_table+0x21a>
c00260be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00260c5:	e9 07 01 00 00       	jmp    c00261d1 <read_partition_table+0x202>
c00260ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00260cd:	83 c0 1b             	add    $0x1b,%eax
c00260d0:	c1 e0 04             	shl    $0x4,%eax
c00260d3:	89 c2                	mov    %eax,%edx
c00260d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00260d8:	01 d0                	add    %edx,%eax
c00260da:	83 c0 0e             	add    $0xe,%eax
c00260dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00260e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00260e3:	8b 40 0c             	mov    0xc(%eax),%eax
c00260e6:	85 c0                	test   %eax,%eax
c00260e8:	0f 84 df 00 00 00    	je     c00261cd <read_partition_table+0x1fe>
c00260ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00260f1:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c00260f5:	84 c0                	test   %al,%al
c00260f7:	0f 84 d0 00 00 00    	je     c00261cd <read_partition_table+0x1fe>
c00260fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026100:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0026104:	3c 05                	cmp    $0x5,%al
c0026106:	74 21                	je     c0026129 <read_partition_table+0x15a>
c0026108:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002610b:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c002610f:	3c 0f                	cmp    $0xf,%al
c0026111:	74 16                	je     c0026129 <read_partition_table+0x15a>
c0026113:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026116:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c002611a:	3c 85                	cmp    $0x85,%al
c002611c:	74 0b                	je     c0026129 <read_partition_table+0x15a>
c002611e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026121:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0026125:	3c c5                	cmp    $0xc5,%al
c0026127:	75 65                	jne    c002618e <read_partition_table+0x1bf>
c0026129:	83 ec 0c             	sub    $0xc,%esp
c002612c:	ff 75 08             	pushl  0x8(%ebp)
c002612f:	e8 72 fc ff ff       	call   c0025da6 <block_name>
c0026134:	83 c4 10             	add    $0x10,%esp
c0026137:	83 ec 04             	sub    $0x4,%esp
c002613a:	ff 75 0c             	pushl  0xc(%ebp)
c002613d:	50                   	push   %eax
c002613e:	68 64 3e 03 c0       	push   $0xc0033e64
c0026143:	e8 81 1e 00 00       	call   c0027fc9 <printf>
c0026148:	83 c4 10             	add    $0x10,%esp
c002614b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002614f:	75 1e                	jne    c002616f <read_partition_table+0x1a0>
c0026151:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026154:	8b 50 08             	mov    0x8(%eax),%edx
c0026157:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002615a:	8b 40 08             	mov    0x8(%eax),%eax
c002615d:	ff 75 14             	pushl  0x14(%ebp)
c0026160:	52                   	push   %edx
c0026161:	50                   	push   %eax
c0026162:	ff 75 08             	pushl  0x8(%ebp)
c0026165:	e8 65 fe ff ff       	call   c0025fcf <read_partition_table>
c002616a:	83 c4 10             	add    $0x10,%esp
c002616d:	eb 5e                	jmp    c00261cd <read_partition_table+0x1fe>
c002616f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026172:	8b 50 08             	mov    0x8(%eax),%edx
c0026175:	8b 45 10             	mov    0x10(%ebp),%eax
c0026178:	01 d0                	add    %edx,%eax
c002617a:	ff 75 14             	pushl  0x14(%ebp)
c002617d:	ff 75 10             	pushl  0x10(%ebp)
c0026180:	50                   	push   %eax
c0026181:	ff 75 08             	pushl  0x8(%ebp)
c0026184:	e8 46 fe ff ff       	call   c0025fcf <read_partition_table>
c0026189:	83 c4 10             	add    $0x10,%esp
c002618c:	eb 3f                	jmp    c00261cd <read_partition_table+0x1fe>
c002618e:	8b 45 14             	mov    0x14(%ebp),%eax
c0026191:	8b 00                	mov    (%eax),%eax
c0026193:	8d 50 01             	lea    0x1(%eax),%edx
c0026196:	8b 45 14             	mov    0x14(%ebp),%eax
c0026199:	89 10                	mov    %edx,(%eax)
c002619b:	8b 45 14             	mov    0x14(%ebp),%eax
c002619e:	8b 08                	mov    (%eax),%ecx
c00261a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00261a3:	8b 50 0c             	mov    0xc(%eax),%edx
c00261a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00261a9:	8b 58 08             	mov    0x8(%eax),%ebx
c00261ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c00261af:	01 c3                	add    %eax,%ebx
c00261b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00261b4:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c00261b8:	0f b6 c0             	movzbl %al,%eax
c00261bb:	83 ec 0c             	sub    $0xc,%esp
c00261be:	51                   	push   %ecx
c00261bf:	52                   	push   %edx
c00261c0:	53                   	push   %ebx
c00261c1:	50                   	push   %eax
c00261c2:	ff 75 08             	pushl  0x8(%ebp)
c00261c5:	e8 24 00 00 00       	call   c00261ee <found_partition>
c00261ca:	83 c4 20             	add    $0x20,%esp
c00261cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00261d1:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c00261d5:	0f 86 ef fe ff ff    	jbe    c00260ca <read_partition_table+0xfb>
c00261db:	83 ec 0c             	sub    $0xc,%esp
c00261de:	ff 75 f0             	pushl  -0x10(%ebp)
c00261e1:	e8 05 e2 ff ff       	call   c00243eb <free>
c00261e6:	83 c4 10             	add    $0x10,%esp
c00261e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00261ec:	c9                   	leave  
c00261ed:	c3                   	ret    

c00261ee <found_partition>:
c00261ee:	55                   	push   %ebp
c00261ef:	89 e5                	mov    %esp,%ebp
c00261f1:	56                   	push   %esi
c00261f2:	53                   	push   %ebx
c00261f3:	81 ec b0 00 00 00    	sub    $0xb0,%esp
c00261f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00261fc:	88 85 54 ff ff ff    	mov    %al,-0xac(%ebp)
c0026202:	83 ec 0c             	sub    $0xc,%esp
c0026205:	ff 75 08             	pushl  0x8(%ebp)
c0026208:	e8 8e fb ff ff       	call   c0025d9b <block_size>
c002620d:	83 c4 10             	add    $0x10,%esp
c0026210:	3b 45 10             	cmp    0x10(%ebp),%eax
c0026213:	77 27                	ja     c002623c <found_partition+0x4e>
c0026215:	83 ec 0c             	sub    $0xc,%esp
c0026218:	ff 75 08             	pushl  0x8(%ebp)
c002621b:	e8 86 fb ff ff       	call   c0025da6 <block_name>
c0026220:	83 c4 10             	add    $0x10,%esp
c0026223:	ff 75 10             	pushl  0x10(%ebp)
c0026226:	ff 75 18             	pushl  0x18(%ebp)
c0026229:	50                   	push   %eax
c002622a:	68 8c 3e 03 c0       	push   $0xc0033e8c
c002622f:	e8 95 1d 00 00       	call   c0027fc9 <printf>
c0026234:	83 c4 10             	add    $0x10,%esp
c0026237:	e9 76 01 00 00       	jmp    c00263b2 <found_partition+0x1c4>
c002623c:	8b 55 10             	mov    0x10(%ebp),%edx
c002623f:	8b 45 14             	mov    0x14(%ebp),%eax
c0026242:	01 d0                	add    %edx,%eax
c0026244:	3b 45 10             	cmp    0x10(%ebp),%eax
c0026247:	72 1b                	jb     c0026264 <found_partition+0x76>
c0026249:	8b 55 10             	mov    0x10(%ebp),%edx
c002624c:	8b 45 14             	mov    0x14(%ebp),%eax
c002624f:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c0026252:	83 ec 0c             	sub    $0xc,%esp
c0026255:	ff 75 08             	pushl  0x8(%ebp)
c0026258:	e8 3e fb ff ff       	call   c0025d9b <block_size>
c002625d:	83 c4 10             	add    $0x10,%esp
c0026260:	39 c3                	cmp    %eax,%ebx
c0026262:	76 42                	jbe    c00262a6 <found_partition+0xb8>
c0026264:	83 ec 0c             	sub    $0xc,%esp
c0026267:	ff 75 08             	pushl  0x8(%ebp)
c002626a:	e8 2c fb ff ff       	call   c0025d9b <block_size>
c002626f:	83 c4 10             	add    $0x10,%esp
c0026272:	89 c6                	mov    %eax,%esi
c0026274:	8b 55 10             	mov    0x10(%ebp),%edx
c0026277:	8b 45 14             	mov    0x14(%ebp),%eax
c002627a:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c002627d:	83 ec 0c             	sub    $0xc,%esp
c0026280:	ff 75 08             	pushl  0x8(%ebp)
c0026283:	e8 1e fb ff ff       	call   c0025da6 <block_name>
c0026288:	83 c4 10             	add    $0x10,%esp
c002628b:	83 ec 0c             	sub    $0xc,%esp
c002628e:	56                   	push   %esi
c002628f:	53                   	push   %ebx
c0026290:	ff 75 18             	pushl  0x18(%ebp)
c0026293:	50                   	push   %eax
c0026294:	68 c4 3e 03 c0       	push   $0xc0033ec4
c0026299:	e8 2b 1d 00 00       	call   c0027fc9 <printf>
c002629e:	83 c4 20             	add    $0x20,%esp
c00262a1:	e9 0c 01 00 00       	jmp    c00263b2 <found_partition+0x1c4>
c00262a6:	80 bd 54 ff ff ff 20 	cmpb   $0x20,-0xac(%ebp)
c00262ad:	74 37                	je     c00262e6 <found_partition+0xf8>
c00262af:	80 bd 54 ff ff ff 21 	cmpb   $0x21,-0xac(%ebp)
c00262b6:	74 27                	je     c00262df <found_partition+0xf1>
c00262b8:	80 bd 54 ff ff ff 22 	cmpb   $0x22,-0xac(%ebp)
c00262bf:	74 17                	je     c00262d8 <found_partition+0xea>
c00262c1:	80 bd 54 ff ff ff 23 	cmpb   $0x23,-0xac(%ebp)
c00262c8:	75 07                	jne    c00262d1 <found_partition+0xe3>
c00262ca:	b8 03 00 00 00       	mov    $0x3,%eax
c00262cf:	eb 1a                	jmp    c00262eb <found_partition+0xfd>
c00262d1:	b8 05 00 00 00       	mov    $0x5,%eax
c00262d6:	eb 13                	jmp    c00262eb <found_partition+0xfd>
c00262d8:	b8 02 00 00 00       	mov    $0x2,%eax
c00262dd:	eb 0c                	jmp    c00262eb <found_partition+0xfd>
c00262df:	b8 01 00 00 00       	mov    $0x1,%eax
c00262e4:	eb 05                	jmp    c00262eb <found_partition+0xfd>
c00262e6:	b8 00 00 00 00       	mov    $0x0,%eax
c00262eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00262ee:	83 ec 0c             	sub    $0xc,%esp
c00262f1:	6a 08                	push   $0x8
c00262f3:	e8 f6 dd ff ff       	call   c00240ee <malloc>
c00262f8:	83 c4 10             	add    $0x10,%esp
c00262fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00262fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0026302:	75 19                	jne    c002631d <found_partition+0x12f>
c0026304:	68 f8 3e 03 c0       	push   $0xc0033ef8
c0026309:	68 5c 3f 03 c0       	push   $0xc0033f5c
c002630e:	68 b1 00 00 00       	push   $0xb1
c0026313:	68 eb 3d 03 c0       	push   $0xc0033deb
c0026318:	e8 0d 42 00 00       	call   c002a52a <debug_panic>
c002631d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026320:	8b 55 08             	mov    0x8(%ebp),%edx
c0026323:	89 10                	mov    %edx,(%eax)
c0026325:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026328:	8b 55 10             	mov    0x10(%ebp),%edx
c002632b:	89 50 04             	mov    %edx,0x4(%eax)
c002632e:	83 ec 0c             	sub    $0xc,%esp
c0026331:	ff 75 08             	pushl  0x8(%ebp)
c0026334:	e8 6d fa ff ff       	call   c0025da6 <block_name>
c0026339:	83 c4 10             	add    $0x10,%esp
c002633c:	83 ec 0c             	sub    $0xc,%esp
c002633f:	ff 75 18             	pushl  0x18(%ebp)
c0026342:	50                   	push   %eax
c0026343:	68 2b 3f 03 c0       	push   $0xc0033f2b
c0026348:	6a 10                	push   $0x10
c002634a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c002634d:	50                   	push   %eax
c002634e:	e8 4d 1c 00 00       	call   c0027fa0 <snprintf>
c0026353:	83 c4 20             	add    $0x20,%esp
c0026356:	0f b6 9d 54 ff ff ff 	movzbl -0xac(%ebp),%ebx
c002635d:	0f b6 85 54 ff ff ff 	movzbl -0xac(%ebp),%eax
c0026364:	83 ec 0c             	sub    $0xc,%esp
c0026367:	50                   	push   %eax
c0026368:	e8 4d 00 00 00       	call   c00263ba <partition_type_name>
c002636d:	83 c4 10             	add    $0x10,%esp
c0026370:	83 ec 0c             	sub    $0xc,%esp
c0026373:	53                   	push   %ebx
c0026374:	50                   	push   %eax
c0026375:	68 30 3f 03 c0       	push   $0xc0033f30
c002637a:	68 80 00 00 00       	push   $0x80
c002637f:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
c0026385:	50                   	push   %eax
c0026386:	e8 15 1c 00 00       	call   c0027fa0 <snprintf>
c002638b:	83 c4 20             	add    $0x20,%esp
c002638e:	83 ec 08             	sub    $0x8,%esp
c0026391:	ff 75 f0             	pushl  -0x10(%ebp)
c0026394:	68 e0 bb 03 c0       	push   $0xc003bbe0
c0026399:	ff 75 14             	pushl  0x14(%ebp)
c002639c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
c00263a2:	50                   	push   %eax
c00263a3:	ff 75 f4             	pushl  -0xc(%ebp)
c00263a6:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00263a9:	50                   	push   %eax
c00263aa:	e8 8f fa ff ff       	call   c0025e3e <block_register>
c00263af:	83 c4 20             	add    $0x20,%esp
c00263b2:	90                   	nop
c00263b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
c00263b6:	5b                   	pop    %ebx
c00263b7:	5e                   	pop    %esi
c00263b8:	5d                   	pop    %ebp
c00263b9:	c3                   	ret    

c00263ba <partition_type_name>:
c00263ba:	55                   	push   %ebp
c00263bb:	89 e5                	mov    %esp,%ebp
c00263bd:	83 ec 04             	sub    $0x4,%esp
c00263c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00263c3:	88 45 fc             	mov    %al,-0x4(%ebp)
c00263c6:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00263ca:	8b 04 85 00 bc 03 c0 	mov    -0x3ffc4400(,%eax,4),%eax
c00263d1:	85 c0                	test   %eax,%eax
c00263d3:	74 0d                	je     c00263e2 <partition_type_name+0x28>
c00263d5:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00263d9:	8b 04 85 00 bc 03 c0 	mov    -0x3ffc4400(,%eax,4),%eax
c00263e0:	eb 05                	jmp    c00263e7 <partition_type_name+0x2d>
c00263e2:	b8 3a 3f 03 c0       	mov    $0xc0033f3a,%eax
c00263e7:	c9                   	leave  
c00263e8:	c3                   	ret    

c00263e9 <partition_read>:
c00263e9:	55                   	push   %ebp
c00263ea:	89 e5                	mov    %esp,%ebp
c00263ec:	83 ec 18             	sub    $0x18,%esp
c00263ef:	8b 45 08             	mov    0x8(%ebp),%eax
c00263f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00263f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00263f8:	8b 50 04             	mov    0x4(%eax),%edx
c00263fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00263fe:	01 c2                	add    %eax,%edx
c0026400:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026403:	8b 00                	mov    (%eax),%eax
c0026405:	83 ec 04             	sub    $0x4,%esp
c0026408:	ff 75 10             	pushl  0x10(%ebp)
c002640b:	52                   	push   %edx
c002640c:	50                   	push   %eax
c002640d:	e8 be f8 ff ff       	call   c0025cd0 <block_read>
c0026412:	83 c4 10             	add    $0x10,%esp
c0026415:	90                   	nop
c0026416:	c9                   	leave  
c0026417:	c3                   	ret    

c0026418 <partition_write>:
c0026418:	55                   	push   %ebp
c0026419:	89 e5                	mov    %esp,%ebp
c002641b:	83 ec 18             	sub    $0x18,%esp
c002641e:	8b 45 08             	mov    0x8(%ebp),%eax
c0026421:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026424:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026427:	8b 50 04             	mov    0x4(%eax),%edx
c002642a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002642d:	01 c2                	add    %eax,%edx
c002642f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026432:	8b 00                	mov    (%eax),%eax
c0026434:	83 ec 04             	sub    $0x4,%esp
c0026437:	ff 75 10             	pushl  0x10(%ebp)
c002643a:	52                   	push   %edx
c002643b:	50                   	push   %eax
c002643c:	e8 de f8 ff ff       	call   c0025d1f <block_write>
c0026441:	83 c4 10             	add    $0x10,%esp
c0026444:	90                   	nop
c0026445:	c9                   	leave  
c0026446:	c3                   	ret    

c0026447 <isspace>:
c0026447:	55                   	push   %ebp
c0026448:	89 e5                	mov    %esp,%ebp
c002644a:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c002644e:	74 1e                	je     c002646e <isspace+0x27>
c0026450:	83 7d 08 0c          	cmpl   $0xc,0x8(%ebp)
c0026454:	74 18                	je     c002646e <isspace+0x27>
c0026456:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c002645a:	74 12                	je     c002646e <isspace+0x27>
c002645c:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
c0026460:	74 0c                	je     c002646e <isspace+0x27>
c0026462:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c0026466:	74 06                	je     c002646e <isspace+0x27>
c0026468:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
c002646c:	75 07                	jne    c0026475 <isspace+0x2e>
c002646e:	b8 01 00 00 00       	mov    $0x1,%eax
c0026473:	eb 05                	jmp    c002647a <isspace+0x33>
c0026475:	b8 00 00 00 00       	mov    $0x0,%eax
c002647a:	5d                   	pop    %ebp
c002647b:	c3                   	ret    

c002647c <inb>:
c002647c:	55                   	push   %ebp
c002647d:	89 e5                	mov    %esp,%ebp
c002647f:	83 ec 14             	sub    $0x14,%esp
c0026482:	8b 45 08             	mov    0x8(%ebp),%eax
c0026485:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0026489:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c002648d:	89 c2                	mov    %eax,%edx
c002648f:	ec                   	in     (%dx),%al
c0026490:	88 45 ff             	mov    %al,-0x1(%ebp)
c0026493:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0026497:	c9                   	leave  
c0026498:	c3                   	ret    

c0026499 <insw>:
c0026499:	55                   	push   %ebp
c002649a:	89 e5                	mov    %esp,%ebp
c002649c:	57                   	push   %edi
c002649d:	53                   	push   %ebx
c002649e:	83 ec 04             	sub    $0x4,%esp
c00264a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00264a4:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
c00264a8:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c00264ac:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00264af:	8b 45 10             	mov    0x10(%ebp),%eax
c00264b2:	89 cb                	mov    %ecx,%ebx
c00264b4:	89 df                	mov    %ebx,%edi
c00264b6:	89 c1                	mov    %eax,%ecx
c00264b8:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c00264bb:	89 c8                	mov    %ecx,%eax
c00264bd:	89 fb                	mov    %edi,%ebx
c00264bf:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c00264c2:	89 45 10             	mov    %eax,0x10(%ebp)
c00264c5:	90                   	nop
c00264c6:	83 c4 04             	add    $0x4,%esp
c00264c9:	5b                   	pop    %ebx
c00264ca:	5f                   	pop    %edi
c00264cb:	5d                   	pop    %ebp
c00264cc:	c3                   	ret    

c00264cd <outb>:
c00264cd:	55                   	push   %ebp
c00264ce:	89 e5                	mov    %esp,%ebp
c00264d0:	83 ec 08             	sub    $0x8,%esp
c00264d3:	8b 55 08             	mov    0x8(%ebp),%edx
c00264d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00264d9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00264dd:	88 45 f8             	mov    %al,-0x8(%ebp)
c00264e0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00264e4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00264e8:	ee                   	out    %al,(%dx)
c00264e9:	90                   	nop
c00264ea:	c9                   	leave  
c00264eb:	c3                   	ret    

c00264ec <outsw>:
c00264ec:	55                   	push   %ebp
c00264ed:	89 e5                	mov    %esp,%ebp
c00264ef:	56                   	push   %esi
c00264f0:	53                   	push   %ebx
c00264f1:	83 ec 04             	sub    $0x4,%esp
c00264f4:	8b 45 08             	mov    0x8(%ebp),%eax
c00264f7:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
c00264fb:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c00264ff:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0026502:	8b 45 10             	mov    0x10(%ebp),%eax
c0026505:	89 cb                	mov    %ecx,%ebx
c0026507:	89 de                	mov    %ebx,%esi
c0026509:	89 c1                	mov    %eax,%ecx
c002650b:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c002650e:	89 c8                	mov    %ecx,%eax
c0026510:	89 f3                	mov    %esi,%ebx
c0026512:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0026515:	89 45 10             	mov    %eax,0x10(%ebp)
c0026518:	90                   	nop
c0026519:	83 c4 04             	add    $0x4,%esp
c002651c:	5b                   	pop    %ebx
c002651d:	5e                   	pop    %esi
c002651e:	5d                   	pop    %ebp
c002651f:	c3                   	ret    

c0026520 <ide_init>:
c0026520:	55                   	push   %ebp
c0026521:	89 e5                	mov    %esp,%ebp
c0026523:	83 ec 18             	sub    $0x18,%esp
c0026526:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002652d:	e9 bd 01 00 00       	jmp    c00266ef <ide_init+0x1cf>
c0026532:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026535:	89 c2                	mov    %eax,%edx
c0026537:	89 d0                	mov    %edx,%eax
c0026539:	c1 e0 04             	shl    $0x4,%eax
c002653c:	89 c2                	mov    %eax,%edx
c002653e:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0026545:	29 d0                	sub    %edx,%eax
c0026547:	05 20 da 03 c0       	add    $0xc003da20,%eax
c002654c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002654f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026552:	ff 75 f4             	pushl  -0xc(%ebp)
c0026555:	68 30 44 03 c0       	push   $0xc0034430
c002655a:	6a 08                	push   $0x8
c002655c:	50                   	push   %eax
c002655d:	e8 3e 1a 00 00       	call   c0027fa0 <snprintf>
c0026562:	83 c4 10             	add    $0x10,%esp
c0026565:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026568:	85 c0                	test   %eax,%eax
c002656a:	74 07                	je     c0026573 <ide_init+0x53>
c002656c:	83 f8 01             	cmp    $0x1,%eax
c002656f:	74 14                	je     c0026585 <ide_init+0x65>
c0026571:	eb 24                	jmp    c0026597 <ide_init+0x77>
c0026573:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026576:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
c002657c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002657f:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
c0026583:	eb 28                	jmp    c00265ad <ide_init+0x8d>
c0026585:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026588:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
c002658e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026591:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
c0026595:	eb 16                	jmp    c00265ad <ide_init+0x8d>
c0026597:	68 38 44 03 c0       	push   $0xc0034438
c002659c:	68 8c 45 03 c0       	push   $0xc003458c
c00265a1:	6a 7c                	push   $0x7c
c00265a3:	68 5a 44 03 c0       	push   $0xc003445a
c00265a8:	e8 7d 3f 00 00       	call   c002a52a <debug_panic>
c00265ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265b0:	83 c0 0c             	add    $0xc,%eax
c00265b3:	83 ec 0c             	sub    $0xc,%esp
c00265b6:	50                   	push   %eax
c00265b7:	e8 c2 ce ff ff       	call   c002347e <lock_init>
c00265bc:	83 c4 10             	add    $0x10,%esp
c00265bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265c2:	c6 40 30 00          	movb   $0x0,0x30(%eax)
c00265c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265c9:	83 c0 34             	add    $0x34,%eax
c00265cc:	83 ec 08             	sub    $0x8,%esp
c00265cf:	6a 00                	push   $0x0
c00265d1:	50                   	push   %eax
c00265d2:	e8 be cb ff ff       	call   c0023195 <sema_init>
c00265d7:	83 c4 10             	add    $0x10,%esp
c00265da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c00265e1:	eb 5a                	jmp    c002663d <ide_init+0x11d>
c00265e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00265e6:	89 d0                	mov    %edx,%eax
c00265e8:	c1 e0 02             	shl    $0x2,%eax
c00265eb:	01 d0                	add    %edx,%eax
c00265ed:	c1 e0 02             	shl    $0x2,%eax
c00265f0:	8d 50 40             	lea    0x40(%eax),%edx
c00265f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00265f6:	01 d0                	add    %edx,%eax
c00265f8:	83 c0 08             	add    $0x8,%eax
c00265fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00265fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026601:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0026604:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026607:	01 d0                	add    %edx,%eax
c0026609:	8d 50 61             	lea    0x61(%eax),%edx
c002660c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002660f:	52                   	push   %edx
c0026610:	68 6e 44 03 c0       	push   $0xc003446e
c0026615:	6a 08                	push   $0x8
c0026617:	50                   	push   %eax
c0026618:	e8 83 19 00 00       	call   c0027fa0 <snprintf>
c002661d:	83 c4 10             	add    $0x10,%esp
c0026620:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0026623:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0026626:	89 50 08             	mov    %edx,0x8(%eax)
c0026629:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002662c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002662f:	89 50 0c             	mov    %edx,0xc(%eax)
c0026632:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0026635:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0026639:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002663d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
c0026641:	7e a0                	jle    c00265e3 <ide_init+0xc3>
c0026643:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0026646:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026649:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c002664d:	0f b6 c0             	movzbl %al,%eax
c0026650:	83 ec 04             	sub    $0x4,%esp
c0026653:	52                   	push   %edx
c0026654:	68 9d 71 02 c0       	push   $0xc002719d
c0026659:	50                   	push   %eax
c002665a:	e8 4b b9 ff ff       	call   c0021faa <intr_register_ext>
c002665f:	83 c4 10             	add    $0x10,%esp
c0026662:	83 ec 0c             	sub    $0xc,%esp
c0026665:	ff 75 ec             	pushl  -0x14(%ebp)
c0026668:	e8 8f 00 00 00       	call   c00266fc <reset_channel>
c002666d:	83 c4 10             	add    $0x10,%esp
c0026670:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026673:	83 c0 48             	add    $0x48,%eax
c0026676:	83 ec 0c             	sub    $0xc,%esp
c0026679:	50                   	push   %eax
c002667a:	e8 09 03 00 00       	call   c0026988 <check_device_type>
c002667f:	83 c4 10             	add    $0x10,%esp
c0026682:	84 c0                	test   %al,%al
c0026684:	74 12                	je     c0026698 <ide_init+0x178>
c0026686:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0026689:	83 c0 5c             	add    $0x5c,%eax
c002668c:	83 ec 0c             	sub    $0xc,%esp
c002668f:	50                   	push   %eax
c0026690:	e8 f3 02 00 00       	call   c0026988 <check_device_type>
c0026695:	83 c4 10             	add    $0x10,%esp
c0026698:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002669f:	eb 44                	jmp    c00266e5 <ide_init+0x1c5>
c00266a1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c00266a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00266a7:	89 d0                	mov    %edx,%eax
c00266a9:	c1 e0 02             	shl    $0x2,%eax
c00266ac:	01 d0                	add    %edx,%eax
c00266ae:	c1 e0 02             	shl    $0x2,%eax
c00266b1:	01 c8                	add    %ecx,%eax
c00266b3:	83 c0 58             	add    $0x58,%eax
c00266b6:	0f b6 00             	movzbl (%eax),%eax
c00266b9:	84 c0                	test   %al,%al
c00266bb:	74 24                	je     c00266e1 <ide_init+0x1c1>
c00266bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00266c0:	89 d0                	mov    %edx,%eax
c00266c2:	c1 e0 02             	shl    $0x2,%eax
c00266c5:	01 d0                	add    %edx,%eax
c00266c7:	c1 e0 02             	shl    $0x2,%eax
c00266ca:	8d 50 40             	lea    0x40(%eax),%edx
c00266cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00266d0:	01 d0                	add    %edx,%eax
c00266d2:	83 c0 08             	add    $0x8,%eax
c00266d5:	83 ec 0c             	sub    $0xc,%esp
c00266d8:	50                   	push   %eax
c00266d9:	e8 a5 03 00 00       	call   c0026a83 <identify_ata_device>
c00266de:	83 c4 10             	add    $0x10,%esp
c00266e1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c00266e5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
c00266e9:	7e b6                	jle    c00266a1 <ide_init+0x181>
c00266eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00266ef:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c00266f3:	0f 86 39 fe ff ff    	jbe    c0026532 <ide_init+0x12>
c00266f9:	90                   	nop
c00266fa:	c9                   	leave  
c00266fb:	c3                   	ret    

c00266fc <reset_channel>:
c00266fc:	55                   	push   %ebp
c00266fd:	89 e5                	mov    %esp,%ebp
c00266ff:	83 ec 18             	sub    $0x18,%esp
c0026702:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0026709:	e9 2b 01 00 00       	jmp    c0026839 <reset_channel+0x13d>
c002670e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0026711:	89 d0                	mov    %edx,%eax
c0026713:	c1 e0 02             	shl    $0x2,%eax
c0026716:	01 d0                	add    %edx,%eax
c0026718:	c1 e0 02             	shl    $0x2,%eax
c002671b:	8d 50 40             	lea    0x40(%eax),%edx
c002671e:	8b 45 08             	mov    0x8(%ebp),%eax
c0026721:	01 d0                	add    %edx,%eax
c0026723:	83 c0 08             	add    $0x8,%eax
c0026726:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0026729:	83 ec 0c             	sub    $0xc,%esp
c002672c:	ff 75 ec             	pushl  -0x14(%ebp)
c002672f:	e8 cd 09 00 00       	call   c0027101 <select_device>
c0026734:	83 c4 10             	add    $0x10,%esp
c0026737:	8b 45 08             	mov    0x8(%ebp),%eax
c002673a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c002673e:	83 c0 02             	add    $0x2,%eax
c0026741:	0f b7 c0             	movzwl %ax,%eax
c0026744:	83 ec 08             	sub    $0x8,%esp
c0026747:	6a 55                	push   $0x55
c0026749:	50                   	push   %eax
c002674a:	e8 7e fd ff ff       	call   c00264cd <outb>
c002674f:	83 c4 10             	add    $0x10,%esp
c0026752:	8b 45 08             	mov    0x8(%ebp),%eax
c0026755:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026759:	83 c0 03             	add    $0x3,%eax
c002675c:	0f b7 c0             	movzwl %ax,%eax
c002675f:	83 ec 08             	sub    $0x8,%esp
c0026762:	68 aa 00 00 00       	push   $0xaa
c0026767:	50                   	push   %eax
c0026768:	e8 60 fd ff ff       	call   c00264cd <outb>
c002676d:	83 c4 10             	add    $0x10,%esp
c0026770:	8b 45 08             	mov    0x8(%ebp),%eax
c0026773:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026777:	83 c0 02             	add    $0x2,%eax
c002677a:	0f b7 c0             	movzwl %ax,%eax
c002677d:	83 ec 08             	sub    $0x8,%esp
c0026780:	68 aa 00 00 00       	push   $0xaa
c0026785:	50                   	push   %eax
c0026786:	e8 42 fd ff ff       	call   c00264cd <outb>
c002678b:	83 c4 10             	add    $0x10,%esp
c002678e:	8b 45 08             	mov    0x8(%ebp),%eax
c0026791:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026795:	83 c0 03             	add    $0x3,%eax
c0026798:	0f b7 c0             	movzwl %ax,%eax
c002679b:	83 ec 08             	sub    $0x8,%esp
c002679e:	6a 55                	push   $0x55
c00267a0:	50                   	push   %eax
c00267a1:	e8 27 fd ff ff       	call   c00264cd <outb>
c00267a6:	83 c4 10             	add    $0x10,%esp
c00267a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00267ac:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00267b0:	83 c0 02             	add    $0x2,%eax
c00267b3:	0f b7 c0             	movzwl %ax,%eax
c00267b6:	83 ec 08             	sub    $0x8,%esp
c00267b9:	6a 55                	push   $0x55
c00267bb:	50                   	push   %eax
c00267bc:	e8 0c fd ff ff       	call   c00264cd <outb>
c00267c1:	83 c4 10             	add    $0x10,%esp
c00267c4:	8b 45 08             	mov    0x8(%ebp),%eax
c00267c7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00267cb:	83 c0 03             	add    $0x3,%eax
c00267ce:	0f b7 c0             	movzwl %ax,%eax
c00267d1:	83 ec 08             	sub    $0x8,%esp
c00267d4:	68 aa 00 00 00       	push   $0xaa
c00267d9:	50                   	push   %eax
c00267da:	e8 ee fc ff ff       	call   c00264cd <outb>
c00267df:	83 c4 10             	add    $0x10,%esp
c00267e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00267e5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00267e9:	83 c0 02             	add    $0x2,%eax
c00267ec:	0f b7 c0             	movzwl %ax,%eax
c00267ef:	83 ec 0c             	sub    $0xc,%esp
c00267f2:	50                   	push   %eax
c00267f3:	e8 84 fc ff ff       	call   c002647c <inb>
c00267f8:	83 c4 10             	add    $0x10,%esp
c00267fb:	3c 55                	cmp    $0x55,%al
c00267fd:	75 24                	jne    c0026823 <reset_channel+0x127>
c00267ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0026802:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026806:	83 c0 03             	add    $0x3,%eax
c0026809:	0f b7 c0             	movzwl %ax,%eax
c002680c:	83 ec 0c             	sub    $0xc,%esp
c002680f:	50                   	push   %eax
c0026810:	e8 67 fc ff ff       	call   c002647c <inb>
c0026815:	83 c4 10             	add    $0x10,%esp
c0026818:	3c aa                	cmp    $0xaa,%al
c002681a:	75 07                	jne    c0026823 <reset_channel+0x127>
c002681c:	b8 01 00 00 00       	mov    $0x1,%eax
c0026821:	eb 05                	jmp    c0026828 <reset_channel+0x12c>
c0026823:	b8 00 00 00 00       	mov    $0x0,%eax
c0026828:	83 e0 01             	and    $0x1,%eax
c002682b:	8d 4d ea             	lea    -0x16(%ebp),%ecx
c002682e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0026831:	01 ca                	add    %ecx,%edx
c0026833:	88 02                	mov    %al,(%edx)
c0026835:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0026839:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c002683d:	0f 8e cb fe ff ff    	jle    c002670e <reset_channel+0x12>
c0026843:	8b 45 08             	mov    0x8(%ebp),%eax
c0026846:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c002684a:	66 05 06 02          	add    $0x206,%ax
c002684e:	0f b7 c0             	movzwl %ax,%eax
c0026851:	83 ec 08             	sub    $0x8,%esp
c0026854:	6a 00                	push   $0x0
c0026856:	50                   	push   %eax
c0026857:	e8 71 fc ff ff       	call   c00264cd <outb>
c002685c:	83 c4 10             	add    $0x10,%esp
c002685f:	83 ec 08             	sub    $0x8,%esp
c0026862:	6a 00                	push   $0x0
c0026864:	6a 0a                	push   $0xa
c0026866:	e8 1a e2 ff ff       	call   c0024a85 <timer_usleep>
c002686b:	83 c4 10             	add    $0x10,%esp
c002686e:	8b 45 08             	mov    0x8(%ebp),%eax
c0026871:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026875:	66 05 06 02          	add    $0x206,%ax
c0026879:	0f b7 c0             	movzwl %ax,%eax
c002687c:	83 ec 08             	sub    $0x8,%esp
c002687f:	6a 04                	push   $0x4
c0026881:	50                   	push   %eax
c0026882:	e8 46 fc ff ff       	call   c00264cd <outb>
c0026887:	83 c4 10             	add    $0x10,%esp
c002688a:	83 ec 08             	sub    $0x8,%esp
c002688d:	6a 00                	push   $0x0
c002688f:	6a 0a                	push   $0xa
c0026891:	e8 ef e1 ff ff       	call   c0024a85 <timer_usleep>
c0026896:	83 c4 10             	add    $0x10,%esp
c0026899:	8b 45 08             	mov    0x8(%ebp),%eax
c002689c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00268a0:	66 05 06 02          	add    $0x206,%ax
c00268a4:	0f b7 c0             	movzwl %ax,%eax
c00268a7:	83 ec 08             	sub    $0x8,%esp
c00268aa:	6a 00                	push   $0x0
c00268ac:	50                   	push   %eax
c00268ad:	e8 1b fc ff ff       	call   c00264cd <outb>
c00268b2:	83 c4 10             	add    $0x10,%esp
c00268b5:	83 ec 08             	sub    $0x8,%esp
c00268b8:	6a 00                	push   $0x0
c00268ba:	68 96 00 00 00       	push   $0x96
c00268bf:	e8 96 e1 ff ff       	call   c0024a5a <timer_msleep>
c00268c4:	83 c4 10             	add    $0x10,%esp
c00268c7:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c00268cb:	84 c0                	test   %al,%al
c00268cd:	74 24                	je     c00268f3 <reset_channel+0x1f7>
c00268cf:	8b 45 08             	mov    0x8(%ebp),%eax
c00268d2:	83 c0 48             	add    $0x48,%eax
c00268d5:	83 ec 0c             	sub    $0xc,%esp
c00268d8:	50                   	push   %eax
c00268d9:	e8 23 08 00 00       	call   c0027101 <select_device>
c00268de:	83 c4 10             	add    $0x10,%esp
c00268e1:	8b 45 08             	mov    0x8(%ebp),%eax
c00268e4:	83 c0 48             	add    $0x48,%eax
c00268e7:	83 ec 0c             	sub    $0xc,%esp
c00268ea:	50                   	push   %eax
c00268eb:	e8 44 07 00 00       	call   c0027034 <wait_while_busy>
c00268f0:	83 c4 10             	add    $0x10,%esp
c00268f3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c00268f7:	84 c0                	test   %al,%al
c00268f9:	0f 84 86 00 00 00    	je     c0026985 <reset_channel+0x289>
c00268ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0026902:	83 c0 5c             	add    $0x5c,%eax
c0026905:	83 ec 0c             	sub    $0xc,%esp
c0026908:	50                   	push   %eax
c0026909:	e8 f3 07 00 00       	call   c0027101 <select_device>
c002690e:	83 c4 10             	add    $0x10,%esp
c0026911:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0026918:	eb 4d                	jmp    c0026967 <reset_channel+0x26b>
c002691a:	8b 45 08             	mov    0x8(%ebp),%eax
c002691d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026921:	83 c0 02             	add    $0x2,%eax
c0026924:	0f b7 c0             	movzwl %ax,%eax
c0026927:	83 ec 0c             	sub    $0xc,%esp
c002692a:	50                   	push   %eax
c002692b:	e8 4c fb ff ff       	call   c002647c <inb>
c0026930:	83 c4 10             	add    $0x10,%esp
c0026933:	3c 01                	cmp    $0x1,%al
c0026935:	75 1d                	jne    c0026954 <reset_channel+0x258>
c0026937:	8b 45 08             	mov    0x8(%ebp),%eax
c002693a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c002693e:	83 c0 03             	add    $0x3,%eax
c0026941:	0f b7 c0             	movzwl %ax,%eax
c0026944:	83 ec 0c             	sub    $0xc,%esp
c0026947:	50                   	push   %eax
c0026948:	e8 2f fb ff ff       	call   c002647c <inb>
c002694d:	83 c4 10             	add    $0x10,%esp
c0026950:	3c 01                	cmp    $0x1,%al
c0026952:	74 1e                	je     c0026972 <reset_channel+0x276>
c0026954:	83 ec 08             	sub    $0x8,%esp
c0026957:	6a 00                	push   $0x0
c0026959:	6a 0a                	push   $0xa
c002695b:	e8 fa e0 ff ff       	call   c0024a5a <timer_msleep>
c0026960:	83 c4 10             	add    $0x10,%esp
c0026963:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0026967:	81 7d f0 b7 0b 00 00 	cmpl   $0xbb7,-0x10(%ebp)
c002696e:	7e aa                	jle    c002691a <reset_channel+0x21e>
c0026970:	eb 01                	jmp    c0026973 <reset_channel+0x277>
c0026972:	90                   	nop
c0026973:	8b 45 08             	mov    0x8(%ebp),%eax
c0026976:	83 c0 5c             	add    $0x5c,%eax
c0026979:	83 ec 0c             	sub    $0xc,%esp
c002697c:	50                   	push   %eax
c002697d:	e8 b2 06 00 00       	call   c0027034 <wait_while_busy>
c0026982:	83 c4 10             	add    $0x10,%esp
c0026985:	90                   	nop
c0026986:	c9                   	leave  
c0026987:	c3                   	ret    

c0026988 <check_device_type>:
c0026988:	55                   	push   %ebp
c0026989:	89 e5                	mov    %esp,%ebp
c002698b:	83 ec 18             	sub    $0x18,%esp
c002698e:	8b 45 08             	mov    0x8(%ebp),%eax
c0026991:	8b 40 08             	mov    0x8(%eax),%eax
c0026994:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026997:	83 ec 0c             	sub    $0xc,%esp
c002699a:	ff 75 08             	pushl  0x8(%ebp)
c002699d:	e8 5f 07 00 00       	call   c0027101 <select_device>
c00269a2:	83 c4 10             	add    $0x10,%esp
c00269a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00269a8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00269ac:	83 c0 01             	add    $0x1,%eax
c00269af:	0f b7 c0             	movzwl %ax,%eax
c00269b2:	83 ec 0c             	sub    $0xc,%esp
c00269b5:	50                   	push   %eax
c00269b6:	e8 c1 fa ff ff       	call   c002647c <inb>
c00269bb:	83 c4 10             	add    $0x10,%esp
c00269be:	88 45 f3             	mov    %al,-0xd(%ebp)
c00269c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00269c4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00269c8:	83 c0 04             	add    $0x4,%eax
c00269cb:	0f b7 c0             	movzwl %ax,%eax
c00269ce:	83 ec 0c             	sub    $0xc,%esp
c00269d1:	50                   	push   %eax
c00269d2:	e8 a5 fa ff ff       	call   c002647c <inb>
c00269d7:	83 c4 10             	add    $0x10,%esp
c00269da:	88 45 f2             	mov    %al,-0xe(%ebp)
c00269dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00269e0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00269e4:	83 c0 05             	add    $0x5,%eax
c00269e7:	0f b7 c0             	movzwl %ax,%eax
c00269ea:	83 ec 0c             	sub    $0xc,%esp
c00269ed:	50                   	push   %eax
c00269ee:	e8 89 fa ff ff       	call   c002647c <inb>
c00269f3:	83 c4 10             	add    $0x10,%esp
c00269f6:	88 45 f1             	mov    %al,-0xf(%ebp)
c00269f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00269fc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026a00:	83 c0 07             	add    $0x7,%eax
c0026a03:	0f b7 c0             	movzwl %ax,%eax
c0026a06:	83 ec 0c             	sub    $0xc,%esp
c0026a09:	50                   	push   %eax
c0026a0a:	e8 6d fa ff ff       	call   c002647c <inb>
c0026a0f:	83 c4 10             	add    $0x10,%esp
c0026a12:	88 45 f0             	mov    %al,-0x10(%ebp)
c0026a15:	80 7d f3 01          	cmpb   $0x1,-0xd(%ebp)
c0026a19:	74 11                	je     c0026a2c <check_device_type+0xa4>
c0026a1b:	80 7d f3 81          	cmpb   $0x81,-0xd(%ebp)
c0026a1f:	75 1e                	jne    c0026a3f <check_device_type+0xb7>
c0026a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0026a24:	8b 40 0c             	mov    0xc(%eax),%eax
c0026a27:	83 f8 01             	cmp    $0x1,%eax
c0026a2a:	74 13                	je     c0026a3f <check_device_type+0xb7>
c0026a2c:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0026a30:	83 e0 40             	and    $0x40,%eax
c0026a33:	85 c0                	test   %eax,%eax
c0026a35:	74 08                	je     c0026a3f <check_device_type+0xb7>
c0026a37:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0026a3b:	84 c0                	test   %al,%al
c0026a3d:	79 10                	jns    c0026a4f <check_device_type+0xc7>
c0026a3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0026a42:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0026a46:	80 7d f3 81          	cmpb   $0x81,-0xd(%ebp)
c0026a4a:	0f 95 c0             	setne  %al
c0026a4d:	eb 32                	jmp    c0026a81 <check_device_type+0xf9>
c0026a4f:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c0026a53:	75 06                	jne    c0026a5b <check_device_type+0xd3>
c0026a55:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c0026a59:	74 0c                	je     c0026a67 <check_device_type+0xdf>
c0026a5b:	80 7d f2 3c          	cmpb   $0x3c,-0xe(%ebp)
c0026a5f:	75 0d                	jne    c0026a6e <check_device_type+0xe6>
c0026a61:	80 7d f1 c3          	cmpb   $0xc3,-0xf(%ebp)
c0026a65:	75 07                	jne    c0026a6e <check_device_type+0xe6>
c0026a67:	b8 01 00 00 00       	mov    $0x1,%eax
c0026a6c:	eb 05                	jmp    c0026a73 <check_device_type+0xeb>
c0026a6e:	b8 00 00 00 00       	mov    $0x0,%eax
c0026a73:	83 e0 01             	and    $0x1,%eax
c0026a76:	8b 55 08             	mov    0x8(%ebp),%edx
c0026a79:	88 42 10             	mov    %al,0x10(%edx)
c0026a7c:	b8 01 00 00 00       	mov    $0x1,%eax
c0026a81:	c9                   	leave  
c0026a82:	c3                   	ret    

c0026a83 <identify_ata_device>:
c0026a83:	55                   	push   %ebp
c0026a84:	89 e5                	mov    %esp,%ebp
c0026a86:	81 ec a8 02 00 00    	sub    $0x2a8,%esp
c0026a8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0026a8f:	8b 40 08             	mov    0x8(%eax),%eax
c0026a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0026a98:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c0026a9c:	84 c0                	test   %al,%al
c0026a9e:	75 21                	jne    c0026ac1 <identify_ata_device+0x3e>
c0026aa0:	83 ec 0c             	sub    $0xc,%esp
c0026aa3:	68 73 44 03 c0       	push   $0xc0034473
c0026aa8:	68 7d 44 03 c0       	push   $0xc003447d
c0026aad:	68 98 45 03 c0       	push   $0xc0034598
c0026ab2:	68 0d 01 00 00       	push   $0x10d
c0026ab7:	68 5a 44 03 c0       	push   $0xc003445a
c0026abc:	e8 69 3a 00 00       	call   c002a52a <debug_panic>
c0026ac1:	83 ec 0c             	sub    $0xc,%esp
c0026ac4:	ff 75 08             	pushl  0x8(%ebp)
c0026ac7:	e8 9e 06 00 00       	call   c002716a <select_device_wait>
c0026acc:	83 c4 10             	add    $0x10,%esp
c0026acf:	83 ec 08             	sub    $0x8,%esp
c0026ad2:	68 ec 00 00 00       	push   $0xec
c0026ad7:	ff 75 f4             	pushl  -0xc(%ebp)
c0026ada:	e8 4b 04 00 00       	call   c0026f2a <issue_pio_command>
c0026adf:	83 c4 10             	add    $0x10,%esp
c0026ae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026ae5:	83 c0 34             	add    $0x34,%eax
c0026ae8:	83 ec 0c             	sub    $0xc,%esp
c0026aeb:	50                   	push   %eax
c0026aec:	e8 eb c6 ff ff       	call   c00231dc <sema_down>
c0026af1:	83 c4 10             	add    $0x10,%esp
c0026af4:	83 ec 0c             	sub    $0xc,%esp
c0026af7:	ff 75 08             	pushl  0x8(%ebp)
c0026afa:	e8 35 05 00 00       	call   c0027034 <wait_while_busy>
c0026aff:	83 c4 10             	add    $0x10,%esp
c0026b02:	83 f0 01             	xor    $0x1,%eax
c0026b05:	84 c0                	test   %al,%al
c0026b07:	74 0c                	je     c0026b15 <identify_ata_device+0x92>
c0026b09:	8b 45 08             	mov    0x8(%ebp),%eax
c0026b0c:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0026b10:	e9 fb 00 00 00       	jmp    c0026c10 <identify_ata_device+0x18d>
c0026b15:	83 ec 08             	sub    $0x8,%esp
c0026b18:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026b1e:	50                   	push   %eax
c0026b1f:	ff 75 f4             	pushl  -0xc(%ebp)
c0026b22:	e8 62 04 00 00       	call   c0026f89 <input_sector>
c0026b27:	83 c4 10             	add    $0x10,%esp
c0026b2a:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026b30:	83 c0 78             	add    $0x78,%eax
c0026b33:	8b 00                	mov    (%eax),%eax
c0026b35:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026b38:	83 ec 08             	sub    $0x8,%esp
c0026b3b:	6a 14                	push   $0x14
c0026b3d:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026b43:	83 c0 14             	add    $0x14,%eax
c0026b46:	50                   	push   %eax
c0026b47:	e8 c6 00 00 00       	call   c0026c12 <descramble_ata_string>
c0026b4c:	83 c4 10             	add    $0x10,%esp
c0026b4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0026b52:	83 ec 08             	sub    $0x8,%esp
c0026b55:	6a 28                	push   $0x28
c0026b57:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0026b5d:	83 c0 36             	add    $0x36,%eax
c0026b60:	50                   	push   %eax
c0026b61:	e8 ac 00 00 00       	call   c0026c12 <descramble_ata_string>
c0026b66:	83 c4 10             	add    $0x10,%esp
c0026b69:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0026b6c:	83 ec 0c             	sub    $0xc,%esp
c0026b6f:	ff 75 e8             	pushl  -0x18(%ebp)
c0026b72:	ff 75 ec             	pushl  -0x14(%ebp)
c0026b75:	68 94 44 03 c0       	push   $0xc0034494
c0026b7a:	68 80 00 00 00       	push   $0x80
c0026b7f:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c0026b85:	50                   	push   %eax
c0026b86:	e8 15 14 00 00       	call   c0027fa0 <snprintf>
c0026b8b:	83 c4 20             	add    $0x20,%esp
c0026b8e:	81 7d f0 ff ff 1f 00 	cmpl   $0x1fffff,-0x10(%ebp)
c0026b95:	76 45                	jbe    c0026bdc <identify_ata_device+0x159>
c0026b97:	8b 45 08             	mov    0x8(%ebp),%eax
c0026b9a:	83 ec 08             	sub    $0x8,%esp
c0026b9d:	50                   	push   %eax
c0026b9e:	68 ac 44 03 c0       	push   $0xc00344ac
c0026ba3:	e8 21 14 00 00       	call   c0027fc9 <printf>
c0026ba8:	83 c4 10             	add    $0x10,%esp
c0026bab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026bae:	c1 e0 09             	shl    $0x9,%eax
c0026bb1:	ba 00 00 00 00       	mov    $0x0,%edx
c0026bb6:	83 ec 08             	sub    $0x8,%esp
c0026bb9:	52                   	push   %edx
c0026bba:	50                   	push   %eax
c0026bbb:	e8 2e 21 00 00       	call   c0028cee <print_human_readable_size>
c0026bc0:	83 c4 10             	add    $0x10,%esp
c0026bc3:	83 ec 0c             	sub    $0xc,%esp
c0026bc6:	68 ba 44 03 c0       	push   $0xc00344ba
c0026bcb:	e8 21 5c 00 00       	call   c002c7f1 <puts>
c0026bd0:	83 c4 10             	add    $0x10,%esp
c0026bd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0026bd6:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0026bda:	eb 34                	jmp    c0026c10 <identify_ata_device+0x18d>
c0026bdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0026bdf:	83 ec 08             	sub    $0x8,%esp
c0026be2:	ff 75 08             	pushl  0x8(%ebp)
c0026be5:	68 00 c0 03 c0       	push   $0xc003c000
c0026bea:	ff 75 f0             	pushl  -0x10(%ebp)
c0026bed:	8d 95 64 fd ff ff    	lea    -0x29c(%ebp),%edx
c0026bf3:	52                   	push   %edx
c0026bf4:	6a 04                	push   $0x4
c0026bf6:	50                   	push   %eax
c0026bf7:	e8 42 f2 ff ff       	call   c0025e3e <block_register>
c0026bfc:	83 c4 20             	add    $0x20,%esp
c0026bff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0026c02:	83 ec 0c             	sub    $0xc,%esp
c0026c05:	ff 75 e4             	pushl  -0x1c(%ebp)
c0026c08:	e8 79 f3 ff ff       	call   c0025f86 <partition_scan>
c0026c0d:	83 c4 10             	add    $0x10,%esp
c0026c10:	c9                   	leave  
c0026c11:	c3                   	ret    

c0026c12 <descramble_ata_string>:
c0026c12:	55                   	push   %ebp
c0026c13:	89 e5                	mov    %esp,%ebp
c0026c15:	83 ec 10             	sub    $0x10,%esp
c0026c18:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0026c1f:	eb 3b                	jmp    c0026c5c <descramble_ata_string+0x4a>
c0026c21:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0026c24:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c27:	01 d0                	add    %edx,%eax
c0026c29:	0f b6 00             	movzbl (%eax),%eax
c0026c2c:	88 45 fb             	mov    %al,-0x5(%ebp)
c0026c2f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0026c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c35:	01 c2                	add    %eax,%edx
c0026c37:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0026c3a:	8d 48 01             	lea    0x1(%eax),%ecx
c0026c3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c40:	01 c8                	add    %ecx,%eax
c0026c42:	0f b6 00             	movzbl (%eax),%eax
c0026c45:	88 02                	mov    %al,(%edx)
c0026c47:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0026c4a:	8d 50 01             	lea    0x1(%eax),%edx
c0026c4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c50:	01 c2                	add    %eax,%edx
c0026c52:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0026c56:	88 02                	mov    %al,(%edx)
c0026c58:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
c0026c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0026c5f:	83 c0 01             	add    $0x1,%eax
c0026c62:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0026c65:	7c ba                	jl     c0026c21 <descramble_ata_string+0xf>
c0026c67:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
c0026c6b:	eb 2d                	jmp    c0026c9a <descramble_ata_string+0x88>
c0026c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026c70:	8d 50 ff             	lea    -0x1(%eax),%edx
c0026c73:	8b 45 08             	mov    0x8(%ebp),%eax
c0026c76:	01 d0                	add    %edx,%eax
c0026c78:	0f b6 00             	movzbl (%eax),%eax
c0026c7b:	0f be c0             	movsbl %al,%eax
c0026c7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026c81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0026c85:	74 0f                	je     c0026c96 <descramble_ata_string+0x84>
c0026c87:	ff 75 f4             	pushl  -0xc(%ebp)
c0026c8a:	e8 b8 f7 ff ff       	call   c0026447 <isspace>
c0026c8f:	83 c4 04             	add    $0x4,%esp
c0026c92:	85 c0                	test   %eax,%eax
c0026c94:	74 0c                	je     c0026ca2 <descramble_ata_string+0x90>
c0026c96:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
c0026c9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0026c9e:	7f cd                	jg     c0026c6d <descramble_ata_string+0x5b>
c0026ca0:	eb 01                	jmp    c0026ca3 <descramble_ata_string+0x91>
c0026ca2:	90                   	nop
c0026ca3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0026ca6:	8b 45 08             	mov    0x8(%ebp),%eax
c0026ca9:	01 d0                	add    %edx,%eax
c0026cab:	c6 00 00             	movb   $0x0,(%eax)
c0026cae:	8b 45 08             	mov    0x8(%ebp),%eax
c0026cb1:	c9                   	leave  
c0026cb2:	c3                   	ret    

c0026cb3 <ide_read>:
c0026cb3:	55                   	push   %ebp
c0026cb4:	89 e5                	mov    %esp,%ebp
c0026cb6:	83 ec 18             	sub    $0x18,%esp
c0026cb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0026cbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026cbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026cc2:	8b 40 08             	mov    0x8(%eax),%eax
c0026cc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026ccb:	83 c0 0c             	add    $0xc,%eax
c0026cce:	83 ec 0c             	sub    $0xc,%esp
c0026cd1:	50                   	push   %eax
c0026cd2:	e8 f4 c7 ff ff       	call   c00234cb <lock_acquire>
c0026cd7:	83 c4 10             	add    $0x10,%esp
c0026cda:	83 ec 08             	sub    $0x8,%esp
c0026cdd:	ff 75 0c             	pushl  0xc(%ebp)
c0026ce0:	ff 75 f4             	pushl  -0xc(%ebp)
c0026ce3:	e8 3b 01 00 00       	call   c0026e23 <select_sector>
c0026ce8:	83 c4 10             	add    $0x10,%esp
c0026ceb:	83 ec 08             	sub    $0x8,%esp
c0026cee:	6a 20                	push   $0x20
c0026cf0:	ff 75 f0             	pushl  -0x10(%ebp)
c0026cf3:	e8 32 02 00 00       	call   c0026f2a <issue_pio_command>
c0026cf8:	83 c4 10             	add    $0x10,%esp
c0026cfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026cfe:	83 c0 34             	add    $0x34,%eax
c0026d01:	83 ec 0c             	sub    $0xc,%esp
c0026d04:	50                   	push   %eax
c0026d05:	e8 d2 c4 ff ff       	call   c00231dc <sema_down>
c0026d0a:	83 c4 10             	add    $0x10,%esp
c0026d0d:	83 ec 0c             	sub    $0xc,%esp
c0026d10:	ff 75 f4             	pushl  -0xc(%ebp)
c0026d13:	e8 1c 03 00 00       	call   c0027034 <wait_while_busy>
c0026d18:	83 c4 10             	add    $0x10,%esp
c0026d1b:	83 f0 01             	xor    $0x1,%eax
c0026d1e:	84 c0                	test   %al,%al
c0026d20:	74 23                	je     c0026d45 <ide_read+0x92>
c0026d22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026d25:	83 ec 08             	sub    $0x8,%esp
c0026d28:	ff 75 0c             	pushl  0xc(%ebp)
c0026d2b:	50                   	push   %eax
c0026d2c:	68 cc 44 03 c0       	push   $0xc00344cc
c0026d31:	68 ac 45 03 c0       	push   $0xc00345ac
c0026d36:	68 62 01 00 00       	push   $0x162
c0026d3b:	68 5a 44 03 c0       	push   $0xc003445a
c0026d40:	e8 e5 37 00 00       	call   c002a52a <debug_panic>
c0026d45:	83 ec 08             	sub    $0x8,%esp
c0026d48:	ff 75 10             	pushl  0x10(%ebp)
c0026d4b:	ff 75 f0             	pushl  -0x10(%ebp)
c0026d4e:	e8 36 02 00 00       	call   c0026f89 <input_sector>
c0026d53:	83 c4 10             	add    $0x10,%esp
c0026d56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026d59:	83 c0 0c             	add    $0xc,%eax
c0026d5c:	83 ec 0c             	sub    $0xc,%esp
c0026d5f:	50                   	push   %eax
c0026d60:	e8 a5 c9 ff ff       	call   c002370a <lock_release>
c0026d65:	83 c4 10             	add    $0x10,%esp
c0026d68:	90                   	nop
c0026d69:	c9                   	leave  
c0026d6a:	c3                   	ret    

c0026d6b <ide_write>:
c0026d6b:	55                   	push   %ebp
c0026d6c:	89 e5                	mov    %esp,%ebp
c0026d6e:	83 ec 18             	sub    $0x18,%esp
c0026d71:	8b 45 08             	mov    0x8(%ebp),%eax
c0026d74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026d7a:	8b 40 08             	mov    0x8(%eax),%eax
c0026d7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0026d80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026d83:	83 c0 0c             	add    $0xc,%eax
c0026d86:	83 ec 0c             	sub    $0xc,%esp
c0026d89:	50                   	push   %eax
c0026d8a:	e8 3c c7 ff ff       	call   c00234cb <lock_acquire>
c0026d8f:	83 c4 10             	add    $0x10,%esp
c0026d92:	83 ec 08             	sub    $0x8,%esp
c0026d95:	ff 75 0c             	pushl  0xc(%ebp)
c0026d98:	ff 75 f4             	pushl  -0xc(%ebp)
c0026d9b:	e8 83 00 00 00       	call   c0026e23 <select_sector>
c0026da0:	83 c4 10             	add    $0x10,%esp
c0026da3:	83 ec 08             	sub    $0x8,%esp
c0026da6:	6a 30                	push   $0x30
c0026da8:	ff 75 f0             	pushl  -0x10(%ebp)
c0026dab:	e8 7a 01 00 00       	call   c0026f2a <issue_pio_command>
c0026db0:	83 c4 10             	add    $0x10,%esp
c0026db3:	83 ec 0c             	sub    $0xc,%esp
c0026db6:	ff 75 f4             	pushl  -0xc(%ebp)
c0026db9:	e8 76 02 00 00       	call   c0027034 <wait_while_busy>
c0026dbe:	83 c4 10             	add    $0x10,%esp
c0026dc1:	83 f0 01             	xor    $0x1,%eax
c0026dc4:	84 c0                	test   %al,%al
c0026dc6:	74 23                	je     c0026deb <ide_write+0x80>
c0026dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026dcb:	83 ec 08             	sub    $0x8,%esp
c0026dce:	ff 75 0c             	pushl  0xc(%ebp)
c0026dd1:	50                   	push   %eax
c0026dd2:	68 ec 44 03 c0       	push   $0xc00344ec
c0026dd7:	68 b8 45 03 c0       	push   $0xc00345b8
c0026ddc:	68 75 01 00 00       	push   $0x175
c0026de1:	68 5a 44 03 c0       	push   $0xc003445a
c0026de6:	e8 3f 37 00 00       	call   c002a52a <debug_panic>
c0026deb:	83 ec 08             	sub    $0x8,%esp
c0026dee:	ff 75 10             	pushl  0x10(%ebp)
c0026df1:	ff 75 f0             	pushl  -0x10(%ebp)
c0026df4:	e8 b1 01 00 00       	call   c0026faa <output_sector>
c0026df9:	83 c4 10             	add    $0x10,%esp
c0026dfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026dff:	83 c0 34             	add    $0x34,%eax
c0026e02:	83 ec 0c             	sub    $0xc,%esp
c0026e05:	50                   	push   %eax
c0026e06:	e8 d1 c3 ff ff       	call   c00231dc <sema_down>
c0026e0b:	83 c4 10             	add    $0x10,%esp
c0026e0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0026e11:	83 c0 0c             	add    $0xc,%eax
c0026e14:	83 ec 0c             	sub    $0xc,%esp
c0026e17:	50                   	push   %eax
c0026e18:	e8 ed c8 ff ff       	call   c002370a <lock_release>
c0026e1d:	83 c4 10             	add    $0x10,%esp
c0026e20:	90                   	nop
c0026e21:	c9                   	leave  
c0026e22:	c3                   	ret    

c0026e23 <select_sector>:
c0026e23:	55                   	push   %ebp
c0026e24:	89 e5                	mov    %esp,%ebp
c0026e26:	83 ec 18             	sub    $0x18,%esp
c0026e29:	8b 45 08             	mov    0x8(%ebp),%eax
c0026e2c:	8b 40 08             	mov    0x8(%eax),%eax
c0026e2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0026e32:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0026e39:	76 21                	jbe    c0026e5c <select_sector+0x39>
c0026e3b:	83 ec 0c             	sub    $0xc,%esp
c0026e3e:	68 0d 45 03 c0       	push   $0xc003450d
c0026e43:	68 7d 44 03 c0       	push   $0xc003447d
c0026e48:	68 c4 45 03 c0       	push   $0xc00345c4
c0026e4d:	68 89 01 00 00       	push   $0x189
c0026e52:	68 5a 44 03 c0       	push   $0xc003445a
c0026e57:	e8 ce 36 00 00       	call   c002a52a <debug_panic>
c0026e5c:	83 ec 0c             	sub    $0xc,%esp
c0026e5f:	ff 75 08             	pushl  0x8(%ebp)
c0026e62:	e8 03 03 00 00       	call   c002716a <select_device_wait>
c0026e67:	83 c4 10             	add    $0x10,%esp
c0026e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026e6d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026e71:	83 c0 02             	add    $0x2,%eax
c0026e74:	0f b7 c0             	movzwl %ax,%eax
c0026e77:	83 ec 08             	sub    $0x8,%esp
c0026e7a:	6a 01                	push   $0x1
c0026e7c:	50                   	push   %eax
c0026e7d:	e8 4b f6 ff ff       	call   c00264cd <outb>
c0026e82:	83 c4 10             	add    $0x10,%esp
c0026e85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026e88:	0f b6 d0             	movzbl %al,%edx
c0026e8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026e8e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026e92:	83 c0 03             	add    $0x3,%eax
c0026e95:	0f b7 c0             	movzwl %ax,%eax
c0026e98:	83 ec 08             	sub    $0x8,%esp
c0026e9b:	52                   	push   %edx
c0026e9c:	50                   	push   %eax
c0026e9d:	e8 2b f6 ff ff       	call   c00264cd <outb>
c0026ea2:	83 c4 10             	add    $0x10,%esp
c0026ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026ea8:	c1 e8 08             	shr    $0x8,%eax
c0026eab:	0f b6 d0             	movzbl %al,%edx
c0026eae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026eb1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026eb5:	83 c0 04             	add    $0x4,%eax
c0026eb8:	0f b7 c0             	movzwl %ax,%eax
c0026ebb:	83 ec 08             	sub    $0x8,%esp
c0026ebe:	52                   	push   %edx
c0026ebf:	50                   	push   %eax
c0026ec0:	e8 08 f6 ff ff       	call   c00264cd <outb>
c0026ec5:	83 c4 10             	add    $0x10,%esp
c0026ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026ecb:	c1 e8 10             	shr    $0x10,%eax
c0026ece:	0f b6 d0             	movzbl %al,%edx
c0026ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026ed4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026ed8:	83 c0 05             	add    $0x5,%eax
c0026edb:	0f b7 c0             	movzwl %ax,%eax
c0026ede:	83 ec 08             	sub    $0x8,%esp
c0026ee1:	52                   	push   %edx
c0026ee2:	50                   	push   %eax
c0026ee3:	e8 e5 f5 ff ff       	call   c00264cd <outb>
c0026ee8:	83 c4 10             	add    $0x10,%esp
c0026eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0026eee:	8b 40 0c             	mov    0xc(%eax),%eax
c0026ef1:	83 f8 01             	cmp    $0x1,%eax
c0026ef4:	75 07                	jne    c0026efd <select_sector+0xda>
c0026ef6:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c0026efb:	eb 05                	jmp    c0026f02 <select_sector+0xdf>
c0026efd:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
c0026f02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026f05:	c1 e8 18             	shr    $0x18,%eax
c0026f08:	09 d0                	or     %edx,%eax
c0026f0a:	0f b6 d0             	movzbl %al,%edx
c0026f0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0026f10:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026f14:	83 c0 06             	add    $0x6,%eax
c0026f17:	0f b7 c0             	movzwl %ax,%eax
c0026f1a:	83 ec 08             	sub    $0x8,%esp
c0026f1d:	52                   	push   %edx
c0026f1e:	50                   	push   %eax
c0026f1f:	e8 a9 f5 ff ff       	call   c00264cd <outb>
c0026f24:	83 c4 10             	add    $0x10,%esp
c0026f27:	90                   	nop
c0026f28:	c9                   	leave  
c0026f29:	c3                   	ret    

c0026f2a <issue_pio_command>:
c0026f2a:	55                   	push   %ebp
c0026f2b:	89 e5                	mov    %esp,%ebp
c0026f2d:	83 ec 18             	sub    $0x18,%esp
c0026f30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0026f33:	88 45 f4             	mov    %al,-0xc(%ebp)
c0026f36:	e8 d9 ad ff ff       	call   c0021d14 <intr_get_level>
c0026f3b:	83 f8 01             	cmp    $0x1,%eax
c0026f3e:	74 21                	je     c0026f61 <issue_pio_command+0x37>
c0026f40:	83 ec 0c             	sub    $0xc,%esp
c0026f43:	68 22 45 03 c0       	push   $0xc0034522
c0026f48:	68 7d 44 03 c0       	push   $0xc003447d
c0026f4d:	68 d4 45 03 c0       	push   $0xc00345d4
c0026f52:	68 9b 01 00 00       	push   $0x19b
c0026f57:	68 5a 44 03 c0       	push   $0xc003445a
c0026f5c:	e8 c9 35 00 00       	call   c002a52a <debug_panic>
c0026f61:	8b 45 08             	mov    0x8(%ebp),%eax
c0026f64:	c6 40 30 01          	movb   $0x1,0x30(%eax)
c0026f68:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c0026f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0026f6f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026f73:	83 c0 07             	add    $0x7,%eax
c0026f76:	0f b7 c0             	movzwl %ax,%eax
c0026f79:	83 ec 08             	sub    $0x8,%esp
c0026f7c:	52                   	push   %edx
c0026f7d:	50                   	push   %eax
c0026f7e:	e8 4a f5 ff ff       	call   c00264cd <outb>
c0026f83:	83 c4 10             	add    $0x10,%esp
c0026f86:	90                   	nop
c0026f87:	c9                   	leave  
c0026f88:	c3                   	ret    

c0026f89 <input_sector>:
c0026f89:	55                   	push   %ebp
c0026f8a:	89 e5                	mov    %esp,%ebp
c0026f8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0026f8f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026f93:	0f b7 c0             	movzwl %ax,%eax
c0026f96:	68 00 01 00 00       	push   $0x100
c0026f9b:	ff 75 0c             	pushl  0xc(%ebp)
c0026f9e:	50                   	push   %eax
c0026f9f:	e8 f5 f4 ff ff       	call   c0026499 <insw>
c0026fa4:	83 c4 0c             	add    $0xc,%esp
c0026fa7:	90                   	nop
c0026fa8:	c9                   	leave  
c0026fa9:	c3                   	ret    

c0026faa <output_sector>:
c0026faa:	55                   	push   %ebp
c0026fab:	89 e5                	mov    %esp,%ebp
c0026fad:	8b 45 08             	mov    0x8(%ebp),%eax
c0026fb0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026fb4:	0f b7 c0             	movzwl %ax,%eax
c0026fb7:	68 00 01 00 00       	push   $0x100
c0026fbc:	ff 75 0c             	pushl  0xc(%ebp)
c0026fbf:	50                   	push   %eax
c0026fc0:	e8 27 f5 ff ff       	call   c00264ec <outsw>
c0026fc5:	83 c4 0c             	add    $0xc,%esp
c0026fc8:	90                   	nop
c0026fc9:	c9                   	leave  
c0026fca:	c3                   	ret    

c0026fcb <wait_until_idle>:
c0026fcb:	55                   	push   %ebp
c0026fcc:	89 e5                	mov    %esp,%ebp
c0026fce:	83 ec 18             	sub    $0x18,%esp
c0026fd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0026fd8:	eb 38                	jmp    c0027012 <wait_until_idle+0x47>
c0026fda:	8b 45 08             	mov    0x8(%ebp),%eax
c0026fdd:	8b 40 08             	mov    0x8(%eax),%eax
c0026fe0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0026fe4:	83 c0 07             	add    $0x7,%eax
c0026fe7:	0f b7 c0             	movzwl %ax,%eax
c0026fea:	50                   	push   %eax
c0026feb:	e8 8c f4 ff ff       	call   c002647c <inb>
c0026ff0:	83 c4 04             	add    $0x4,%esp
c0026ff3:	0f b6 c0             	movzbl %al,%eax
c0026ff6:	25 88 00 00 00       	and    $0x88,%eax
c0026ffb:	85 c0                	test   %eax,%eax
c0026ffd:	74 32                	je     c0027031 <wait_until_idle+0x66>
c0026fff:	83 ec 08             	sub    $0x8,%esp
c0027002:	6a 00                	push   $0x0
c0027004:	6a 0a                	push   $0xa
c0027006:	e8 7a da ff ff       	call   c0024a85 <timer_usleep>
c002700b:	83 c4 10             	add    $0x10,%esp
c002700e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0027012:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
c0027019:	7e bf                	jle    c0026fda <wait_until_idle+0xf>
c002701b:	8b 45 08             	mov    0x8(%ebp),%eax
c002701e:	83 ec 08             	sub    $0x8,%esp
c0027021:	50                   	push   %eax
c0027022:	68 3f 45 03 c0       	push   $0xc003453f
c0027027:	e8 9d 0f 00 00       	call   c0027fc9 <printf>
c002702c:	83 c4 10             	add    $0x10,%esp
c002702f:	eb 01                	jmp    c0027032 <wait_until_idle+0x67>
c0027031:	90                   	nop
c0027032:	c9                   	leave  
c0027033:	c3                   	ret    

c0027034 <wait_while_busy>:
c0027034:	55                   	push   %ebp
c0027035:	89 e5                	mov    %esp,%ebp
c0027037:	83 ec 18             	sub    $0x18,%esp
c002703a:	8b 45 08             	mov    0x8(%ebp),%eax
c002703d:	8b 40 08             	mov    0x8(%eax),%eax
c0027040:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0027043:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002704a:	e9 8e 00 00 00       	jmp    c00270dd <wait_while_busy+0xa9>
c002704f:	81 7d f4 bc 02 00 00 	cmpl   $0x2bc,-0xc(%ebp)
c0027056:	75 14                	jne    c002706c <wait_while_busy+0x38>
c0027058:	8b 45 08             	mov    0x8(%ebp),%eax
c002705b:	83 ec 08             	sub    $0x8,%esp
c002705e:	50                   	push   %eax
c002705f:	68 51 45 03 c0       	push   $0xc0034551
c0027064:	e8 60 0f 00 00       	call   c0027fc9 <printf>
c0027069:	83 c4 10             	add    $0x10,%esp
c002706c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002706f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0027073:	66 05 06 02          	add    $0x206,%ax
c0027077:	0f b7 c0             	movzwl %ax,%eax
c002707a:	83 ec 0c             	sub    $0xc,%esp
c002707d:	50                   	push   %eax
c002707e:	e8 f9 f3 ff ff       	call   c002647c <inb>
c0027083:	83 c4 10             	add    $0x10,%esp
c0027086:	84 c0                	test   %al,%al
c0027088:	78 40                	js     c00270ca <wait_while_busy+0x96>
c002708a:	81 7d f4 bb 02 00 00 	cmpl   $0x2bb,-0xc(%ebp)
c0027091:	7e 10                	jle    c00270a3 <wait_while_busy+0x6f>
c0027093:	83 ec 0c             	sub    $0xc,%esp
c0027096:	68 66 45 03 c0       	push   $0xc0034566
c002709b:	e8 51 57 00 00       	call   c002c7f1 <puts>
c00270a0:	83 c4 10             	add    $0x10,%esp
c00270a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00270a6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00270aa:	66 05 06 02          	add    $0x206,%ax
c00270ae:	0f b7 c0             	movzwl %ax,%eax
c00270b1:	83 ec 0c             	sub    $0xc,%esp
c00270b4:	50                   	push   %eax
c00270b5:	e8 c2 f3 ff ff       	call   c002647c <inb>
c00270ba:	83 c4 10             	add    $0x10,%esp
c00270bd:	0f b6 c0             	movzbl %al,%eax
c00270c0:	83 e0 08             	and    $0x8,%eax
c00270c3:	85 c0                	test   %eax,%eax
c00270c5:	0f 95 c0             	setne  %al
c00270c8:	eb 35                	jmp    c00270ff <wait_while_busy+0xcb>
c00270ca:	83 ec 08             	sub    $0x8,%esp
c00270cd:	6a 00                	push   $0x0
c00270cf:	6a 0a                	push   $0xa
c00270d1:	e8 84 d9 ff ff       	call   c0024a5a <timer_msleep>
c00270d6:	83 c4 10             	add    $0x10,%esp
c00270d9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00270dd:	81 7d f4 b7 0b 00 00 	cmpl   $0xbb7,-0xc(%ebp)
c00270e4:	0f 8e 65 ff ff ff    	jle    c002704f <wait_while_busy+0x1b>
c00270ea:	83 ec 0c             	sub    $0xc,%esp
c00270ed:	68 69 45 03 c0       	push   $0xc0034569
c00270f2:	e8 fa 56 00 00       	call   c002c7f1 <puts>
c00270f7:	83 c4 10             	add    $0x10,%esp
c00270fa:	b8 00 00 00 00       	mov    $0x0,%eax
c00270ff:	c9                   	leave  
c0027100:	c3                   	ret    

c0027101 <select_device>:
c0027101:	55                   	push   %ebp
c0027102:	89 e5                	mov    %esp,%ebp
c0027104:	83 ec 18             	sub    $0x18,%esp
c0027107:	8b 45 08             	mov    0x8(%ebp),%eax
c002710a:	8b 40 08             	mov    0x8(%eax),%eax
c002710d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0027110:	c6 45 f7 a0          	movb   $0xa0,-0x9(%ebp)
c0027114:	8b 45 08             	mov    0x8(%ebp),%eax
c0027117:	8b 40 0c             	mov    0xc(%eax),%eax
c002711a:	83 f8 01             	cmp    $0x1,%eax
c002711d:	75 04                	jne    c0027123 <select_device+0x22>
c002711f:	80 4d f7 10          	orb    $0x10,-0x9(%ebp)
c0027123:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0027127:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002712a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c002712e:	83 c0 06             	add    $0x6,%eax
c0027131:	0f b7 c0             	movzwl %ax,%eax
c0027134:	52                   	push   %edx
c0027135:	50                   	push   %eax
c0027136:	e8 92 f3 ff ff       	call   c00264cd <outb>
c002713b:	83 c4 08             	add    $0x8,%esp
c002713e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0027141:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0027145:	66 05 06 02          	add    $0x206,%ax
c0027149:	0f b7 c0             	movzwl %ax,%eax
c002714c:	50                   	push   %eax
c002714d:	e8 2a f3 ff ff       	call   c002647c <inb>
c0027152:	83 c4 04             	add    $0x4,%esp
c0027155:	83 ec 08             	sub    $0x8,%esp
c0027158:	6a 00                	push   $0x0
c002715a:	68 90 01 00 00       	push   $0x190
c002715f:	e8 4c d9 ff ff       	call   c0024ab0 <timer_nsleep>
c0027164:	83 c4 10             	add    $0x10,%esp
c0027167:	90                   	nop
c0027168:	c9                   	leave  
c0027169:	c3                   	ret    

c002716a <select_device_wait>:
c002716a:	55                   	push   %ebp
c002716b:	89 e5                	mov    %esp,%ebp
c002716d:	83 ec 08             	sub    $0x8,%esp
c0027170:	83 ec 0c             	sub    $0xc,%esp
c0027173:	ff 75 08             	pushl  0x8(%ebp)
c0027176:	e8 50 fe ff ff       	call   c0026fcb <wait_until_idle>
c002717b:	83 c4 10             	add    $0x10,%esp
c002717e:	83 ec 0c             	sub    $0xc,%esp
c0027181:	ff 75 08             	pushl  0x8(%ebp)
c0027184:	e8 78 ff ff ff       	call   c0027101 <select_device>
c0027189:	83 c4 10             	add    $0x10,%esp
c002718c:	83 ec 0c             	sub    $0xc,%esp
c002718f:	ff 75 08             	pushl  0x8(%ebp)
c0027192:	e8 34 fe ff ff       	call   c0026fcb <wait_until_idle>
c0027197:	83 c4 10             	add    $0x10,%esp
c002719a:	90                   	nop
c002719b:	c9                   	leave  
c002719c:	c3                   	ret    

c002719d <interrupt_handler>:
c002719d:	55                   	push   %ebp
c002719e:	89 e5                	mov    %esp,%ebp
c00271a0:	83 ec 18             	sub    $0x18,%esp
c00271a3:	c7 45 f4 20 da 03 c0 	movl   $0xc003da20,-0xc(%ebp)
c00271aa:	eb 63                	jmp    c002720f <interrupt_handler+0x72>
c00271ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00271af:	8b 50 30             	mov    0x30(%eax),%edx
c00271b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00271b5:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c00271b9:	0f b6 c0             	movzbl %al,%eax
c00271bc:	39 c2                	cmp    %eax,%edx
c00271be:	75 4b                	jne    c002720b <interrupt_handler+0x6e>
c00271c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00271c3:	0f b6 40 30          	movzbl 0x30(%eax),%eax
c00271c7:	84 c0                	test   %al,%al
c00271c9:	74 2a                	je     c00271f5 <interrupt_handler+0x58>
c00271cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00271ce:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00271d2:	83 c0 07             	add    $0x7,%eax
c00271d5:	0f b7 c0             	movzwl %ax,%eax
c00271d8:	50                   	push   %eax
c00271d9:	e8 9e f2 ff ff       	call   c002647c <inb>
c00271de:	83 c4 04             	add    $0x4,%esp
c00271e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00271e4:	83 c0 34             	add    $0x34,%eax
c00271e7:	83 ec 0c             	sub    $0xc,%esp
c00271ea:	50                   	push   %eax
c00271eb:	e8 fb c0 ff ff       	call   c00232eb <sema_up>
c00271f0:	83 c4 10             	add    $0x10,%esp
c00271f3:	eb 3d                	jmp    c0027232 <interrupt_handler+0x95>
c00271f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00271f8:	83 ec 08             	sub    $0x8,%esp
c00271fb:	50                   	push   %eax
c00271fc:	68 70 45 03 c0       	push   $0xc0034570
c0027201:	e8 c3 0d 00 00       	call   c0027fc9 <printf>
c0027206:	83 c4 10             	add    $0x10,%esp
c0027209:	eb 27                	jmp    c0027232 <interrupt_handler+0x95>
c002720b:	83 45 f4 70          	addl   $0x70,-0xc(%ebp)
c002720f:	b8 00 db 03 c0       	mov    $0xc003db00,%eax
c0027214:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0027217:	72 93                	jb     c00271ac <interrupt_handler+0xf>
c0027219:	68 38 44 03 c0       	push   $0xc0034438
c002721e:	68 e8 45 03 c0       	push   $0xc00345e8
c0027223:	68 0c 02 00 00       	push   $0x20c
c0027228:	68 5a 44 03 c0       	push   $0xc003445a
c002722d:	e8 f8 32 00 00       	call   c002a52a <debug_panic>
c0027232:	c9                   	leave  
c0027233:	c3                   	ret    

c0027234 <input_init>:
c0027234:	55                   	push   %ebp
c0027235:	89 e5                	mov    %esp,%ebp
c0027237:	83 ec 08             	sub    $0x8,%esp
c002723a:	83 ec 0c             	sub    $0xc,%esp
c002723d:	68 00 db 03 c0       	push   $0xc003db00
c0027242:	e8 04 01 00 00       	call   c002734b <intq_init>
c0027247:	83 c4 10             	add    $0x10,%esp
c002724a:	90                   	nop
c002724b:	c9                   	leave  
c002724c:	c3                   	ret    

c002724d <input_putc>:
c002724d:	55                   	push   %ebp
c002724e:	89 e5                	mov    %esp,%ebp
c0027250:	83 ec 18             	sub    $0x18,%esp
c0027253:	8b 45 08             	mov    0x8(%ebp),%eax
c0027256:	88 45 f4             	mov    %al,-0xc(%ebp)
c0027259:	e8 b6 aa ff ff       	call   c0021d14 <intr_get_level>
c002725e:	85 c0                	test   %eax,%eax
c0027260:	74 1e                	je     c0027280 <input_putc+0x33>
c0027262:	83 ec 0c             	sub    $0xc,%esp
c0027265:	68 fc 45 03 c0       	push   $0xc00345fc
c002726a:	68 1a 46 03 c0       	push   $0xc003461a
c002726f:	68 5c 46 03 c0       	push   $0xc003465c
c0027274:	6a 15                	push   $0x15
c0027276:	68 31 46 03 c0       	push   $0xc0034631
c002727b:	e8 aa 32 00 00       	call   c002a52a <debug_panic>
c0027280:	83 ec 0c             	sub    $0xc,%esp
c0027283:	68 00 db 03 c0       	push   $0xc003db00
c0027288:	e8 42 01 00 00       	call   c00273cf <intq_full>
c002728d:	83 c4 10             	add    $0x10,%esp
c0027290:	83 f0 01             	xor    $0x1,%eax
c0027293:	84 c0                	test   %al,%al
c0027295:	75 1e                	jne    c00272b5 <input_putc+0x68>
c0027297:	83 ec 0c             	sub    $0xc,%esp
c002729a:	68 47 46 03 c0       	push   $0xc0034647
c002729f:	68 1a 46 03 c0       	push   $0xc003461a
c00272a4:	68 5c 46 03 c0       	push   $0xc003465c
c00272a9:	6a 16                	push   $0x16
c00272ab:	68 31 46 03 c0       	push   $0xc0034631
c00272b0:	e8 75 32 00 00       	call   c002a52a <debug_panic>
c00272b5:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00272b9:	83 ec 08             	sub    $0x8,%esp
c00272bc:	50                   	push   %eax
c00272bd:	68 00 db 03 c0       	push   $0xc003db00
c00272c2:	e8 38 02 00 00       	call   c00274ff <intq_putc>
c00272c7:	83 c4 10             	add    $0x10,%esp
c00272ca:	e8 d7 e5 ff ff       	call   c00258a6 <serial_notify>
c00272cf:	90                   	nop
c00272d0:	c9                   	leave  
c00272d1:	c3                   	ret    

c00272d2 <input_getc>:
c00272d2:	55                   	push   %ebp
c00272d3:	89 e5                	mov    %esp,%ebp
c00272d5:	83 ec 18             	sub    $0x18,%esp
c00272d8:	e8 ac aa ff ff       	call   c0021d89 <intr_disable>
c00272dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00272e0:	83 ec 0c             	sub    $0xc,%esp
c00272e3:	68 00 db 03 c0       	push   $0xc003db00
c00272e8:	e8 30 01 00 00       	call   c002741d <intq_getc>
c00272ed:	83 c4 10             	add    $0x10,%esp
c00272f0:	88 45 f3             	mov    %al,-0xd(%ebp)
c00272f3:	e8 ae e5 ff ff       	call   c00258a6 <serial_notify>
c00272f8:	83 ec 0c             	sub    $0xc,%esp
c00272fb:	ff 75 f4             	pushl  -0xc(%ebp)
c00272fe:	e8 2e aa ff ff       	call   c0021d31 <intr_set_level>
c0027303:	83 c4 10             	add    $0x10,%esp
c0027306:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c002730a:	c9                   	leave  
c002730b:	c3                   	ret    

c002730c <input_full>:
c002730c:	55                   	push   %ebp
c002730d:	89 e5                	mov    %esp,%ebp
c002730f:	83 ec 08             	sub    $0x8,%esp
c0027312:	e8 fd a9 ff ff       	call   c0021d14 <intr_get_level>
c0027317:	85 c0                	test   %eax,%eax
c0027319:	74 1e                	je     c0027339 <input_full+0x2d>
c002731b:	83 ec 0c             	sub    $0xc,%esp
c002731e:	68 fc 45 03 c0       	push   $0xc00345fc
c0027323:	68 1a 46 03 c0       	push   $0xc003461a
c0027328:	68 68 46 03 c0       	push   $0xc0034668
c002732d:	6a 32                	push   $0x32
c002732f:	68 31 46 03 c0       	push   $0xc0034631
c0027334:	e8 f1 31 00 00       	call   c002a52a <debug_panic>
c0027339:	83 ec 0c             	sub    $0xc,%esp
c002733c:	68 00 db 03 c0       	push   $0xc003db00
c0027341:	e8 89 00 00 00       	call   c00273cf <intq_full>
c0027346:	83 c4 10             	add    $0x10,%esp
c0027349:	c9                   	leave  
c002734a:	c3                   	ret    

c002734b <intq_init>:
c002734b:	55                   	push   %ebp
c002734c:	89 e5                	mov    %esp,%ebp
c002734e:	83 ec 08             	sub    $0x8,%esp
c0027351:	8b 45 08             	mov    0x8(%ebp),%eax
c0027354:	83 ec 0c             	sub    $0xc,%esp
c0027357:	50                   	push   %eax
c0027358:	e8 21 c1 ff ff       	call   c002347e <lock_init>
c002735d:	83 c4 10             	add    $0x10,%esp
c0027360:	8b 45 08             	mov    0x8(%ebp),%eax
c0027363:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c002736a:	8b 45 08             	mov    0x8(%ebp),%eax
c002736d:	8b 50 28             	mov    0x28(%eax),%edx
c0027370:	8b 45 08             	mov    0x8(%ebp),%eax
c0027373:	89 50 24             	mov    %edx,0x24(%eax)
c0027376:	8b 45 08             	mov    0x8(%ebp),%eax
c0027379:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
c0027380:	8b 45 08             	mov    0x8(%ebp),%eax
c0027383:	8b 50 70             	mov    0x70(%eax),%edx
c0027386:	8b 45 08             	mov    0x8(%ebp),%eax
c0027389:	89 50 6c             	mov    %edx,0x6c(%eax)
c002738c:	90                   	nop
c002738d:	c9                   	leave  
c002738e:	c3                   	ret    

c002738f <intq_empty>:
c002738f:	55                   	push   %ebp
c0027390:	89 e5                	mov    %esp,%ebp
c0027392:	83 ec 08             	sub    $0x8,%esp
c0027395:	e8 7a a9 ff ff       	call   c0021d14 <intr_get_level>
c002739a:	85 c0                	test   %eax,%eax
c002739c:	74 1e                	je     c00273bc <intq_empty+0x2d>
c002739e:	83 ec 0c             	sub    $0xc,%esp
c00273a1:	68 74 46 03 c0       	push   $0xc0034674
c00273a6:	68 92 46 03 c0       	push   $0xc0034692
c00273ab:	68 88 47 03 c0       	push   $0xc0034788
c00273b0:	6a 16                	push   $0x16
c00273b2:	68 a9 46 03 c0       	push   $0xc00346a9
c00273b7:	e8 6e 31 00 00       	call   c002a52a <debug_panic>
c00273bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00273bf:	8b 50 6c             	mov    0x6c(%eax),%edx
c00273c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00273c5:	8b 40 70             	mov    0x70(%eax),%eax
c00273c8:	39 c2                	cmp    %eax,%edx
c00273ca:	0f 94 c0             	sete   %al
c00273cd:	c9                   	leave  
c00273ce:	c3                   	ret    

c00273cf <intq_full>:
c00273cf:	55                   	push   %ebp
c00273d0:	89 e5                	mov    %esp,%ebp
c00273d2:	83 ec 08             	sub    $0x8,%esp
c00273d5:	e8 3a a9 ff ff       	call   c0021d14 <intr_get_level>
c00273da:	85 c0                	test   %eax,%eax
c00273dc:	74 1e                	je     c00273fc <intq_full+0x2d>
c00273de:	83 ec 0c             	sub    $0xc,%esp
c00273e1:	68 74 46 03 c0       	push   $0xc0034674
c00273e6:	68 92 46 03 c0       	push   $0xc0034692
c00273eb:	68 94 47 03 c0       	push   $0xc0034794
c00273f0:	6a 1e                	push   $0x1e
c00273f2:	68 a9 46 03 c0       	push   $0xc00346a9
c00273f7:	e8 2e 31 00 00       	call   c002a52a <debug_panic>
c00273fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00273ff:	8b 40 6c             	mov    0x6c(%eax),%eax
c0027402:	83 ec 0c             	sub    $0xc,%esp
c0027405:	50                   	push   %eax
c0027406:	e8 d9 01 00 00       	call   c00275e4 <next>
c002740b:	83 c4 10             	add    $0x10,%esp
c002740e:	89 c2                	mov    %eax,%edx
c0027410:	8b 45 08             	mov    0x8(%ebp),%eax
c0027413:	8b 40 70             	mov    0x70(%eax),%eax
c0027416:	39 c2                	cmp    %eax,%edx
c0027418:	0f 94 c0             	sete   %al
c002741b:	c9                   	leave  
c002741c:	c3                   	ret    

c002741d <intq_getc>:
c002741d:	55                   	push   %ebp
c002741e:	89 e5                	mov    %esp,%ebp
c0027420:	83 ec 18             	sub    $0x18,%esp
c0027423:	e8 ec a8 ff ff       	call   c0021d14 <intr_get_level>
c0027428:	85 c0                	test   %eax,%eax
c002742a:	74 7b                	je     c00274a7 <intq_getc+0x8a>
c002742c:	83 ec 0c             	sub    $0xc,%esp
c002742f:	68 74 46 03 c0       	push   $0xc0034674
c0027434:	68 92 46 03 c0       	push   $0xc0034692
c0027439:	68 a0 47 03 c0       	push   $0xc00347a0
c002743e:	6a 2a                	push   $0x2a
c0027440:	68 a9 46 03 c0       	push   $0xc00346a9
c0027445:	e8 e0 30 00 00       	call   c002a52a <debug_panic>
c002744a:	e8 09 ac ff ff       	call   c0022058 <intr_context>
c002744f:	83 f0 01             	xor    $0x1,%eax
c0027452:	84 c0                	test   %al,%al
c0027454:	75 1e                	jne    c0027474 <intq_getc+0x57>
c0027456:	83 ec 0c             	sub    $0xc,%esp
c0027459:	68 be 46 03 c0       	push   $0xc00346be
c002745e:	68 92 46 03 c0       	push   $0xc0034692
c0027463:	68 a0 47 03 c0       	push   $0xc00347a0
c0027468:	6a 2d                	push   $0x2d
c002746a:	68 a9 46 03 c0       	push   $0xc00346a9
c002746f:	e8 b6 30 00 00       	call   c002a52a <debug_panic>
c0027474:	8b 45 08             	mov    0x8(%ebp),%eax
c0027477:	83 ec 0c             	sub    $0xc,%esp
c002747a:	50                   	push   %eax
c002747b:	e8 4b c0 ff ff       	call   c00234cb <lock_acquire>
c0027480:	83 c4 10             	add    $0x10,%esp
c0027483:	8b 45 08             	mov    0x8(%ebp),%eax
c0027486:	83 c0 28             	add    $0x28,%eax
c0027489:	83 ec 08             	sub    $0x8,%esp
c002748c:	50                   	push   %eax
c002748d:	ff 75 08             	pushl  0x8(%ebp)
c0027490:	e8 6b 01 00 00       	call   c0027600 <wait>
c0027495:	83 c4 10             	add    $0x10,%esp
c0027498:	8b 45 08             	mov    0x8(%ebp),%eax
c002749b:	83 ec 0c             	sub    $0xc,%esp
c002749e:	50                   	push   %eax
c002749f:	e8 66 c2 ff ff       	call   c002370a <lock_release>
c00274a4:	83 c4 10             	add    $0x10,%esp
c00274a7:	83 ec 0c             	sub    $0xc,%esp
c00274aa:	ff 75 08             	pushl  0x8(%ebp)
c00274ad:	e8 dd fe ff ff       	call   c002738f <intq_empty>
c00274b2:	83 c4 10             	add    $0x10,%esp
c00274b5:	84 c0                	test   %al,%al
c00274b7:	75 91                	jne    c002744a <intq_getc+0x2d>
c00274b9:	8b 45 08             	mov    0x8(%ebp),%eax
c00274bc:	8b 40 70             	mov    0x70(%eax),%eax
c00274bf:	8b 55 08             	mov    0x8(%ebp),%edx
c00274c2:	0f b6 44 02 2c       	movzbl 0x2c(%edx,%eax,1),%eax
c00274c7:	88 45 f7             	mov    %al,-0x9(%ebp)
c00274ca:	8b 45 08             	mov    0x8(%ebp),%eax
c00274cd:	8b 40 70             	mov    0x70(%eax),%eax
c00274d0:	83 ec 0c             	sub    $0xc,%esp
c00274d3:	50                   	push   %eax
c00274d4:	e8 0b 01 00 00       	call   c00275e4 <next>
c00274d9:	83 c4 10             	add    $0x10,%esp
c00274dc:	89 c2                	mov    %eax,%edx
c00274de:	8b 45 08             	mov    0x8(%ebp),%eax
c00274e1:	89 50 70             	mov    %edx,0x70(%eax)
c00274e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00274e7:	83 c0 24             	add    $0x24,%eax
c00274ea:	83 ec 08             	sub    $0x8,%esp
c00274ed:	50                   	push   %eax
c00274ee:	ff 75 08             	pushl  0x8(%ebp)
c00274f1:	e8 cd 01 00 00       	call   c00276c3 <signal>
c00274f6:	83 c4 10             	add    $0x10,%esp
c00274f9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00274fd:	c9                   	leave  
c00274fe:	c3                   	ret    

c00274ff <intq_putc>:
c00274ff:	55                   	push   %ebp
c0027500:	89 e5                	mov    %esp,%ebp
c0027502:	83 ec 18             	sub    $0x18,%esp
c0027505:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027508:	88 45 f4             	mov    %al,-0xc(%ebp)
c002750b:	e8 04 a8 ff ff       	call   c0021d14 <intr_get_level>
c0027510:	85 c0                	test   %eax,%eax
c0027512:	74 7b                	je     c002758f <intq_putc+0x90>
c0027514:	83 ec 0c             	sub    $0xc,%esp
c0027517:	68 74 46 03 c0       	push   $0xc0034674
c002751c:	68 92 46 03 c0       	push   $0xc0034692
c0027521:	68 ac 47 03 c0       	push   $0xc00347ac
c0027526:	6a 3f                	push   $0x3f
c0027528:	68 a9 46 03 c0       	push   $0xc00346a9
c002752d:	e8 f8 2f 00 00       	call   c002a52a <debug_panic>
c0027532:	e8 21 ab ff ff       	call   c0022058 <intr_context>
c0027537:	83 f0 01             	xor    $0x1,%eax
c002753a:	84 c0                	test   %al,%al
c002753c:	75 1e                	jne    c002755c <intq_putc+0x5d>
c002753e:	83 ec 0c             	sub    $0xc,%esp
c0027541:	68 be 46 03 c0       	push   $0xc00346be
c0027546:	68 92 46 03 c0       	push   $0xc0034692
c002754b:	68 ac 47 03 c0       	push   $0xc00347ac
c0027550:	6a 42                	push   $0x42
c0027552:	68 a9 46 03 c0       	push   $0xc00346a9
c0027557:	e8 ce 2f 00 00       	call   c002a52a <debug_panic>
c002755c:	8b 45 08             	mov    0x8(%ebp),%eax
c002755f:	83 ec 0c             	sub    $0xc,%esp
c0027562:	50                   	push   %eax
c0027563:	e8 63 bf ff ff       	call   c00234cb <lock_acquire>
c0027568:	83 c4 10             	add    $0x10,%esp
c002756b:	8b 45 08             	mov    0x8(%ebp),%eax
c002756e:	83 c0 24             	add    $0x24,%eax
c0027571:	83 ec 08             	sub    $0x8,%esp
c0027574:	50                   	push   %eax
c0027575:	ff 75 08             	pushl  0x8(%ebp)
c0027578:	e8 83 00 00 00       	call   c0027600 <wait>
c002757d:	83 c4 10             	add    $0x10,%esp
c0027580:	8b 45 08             	mov    0x8(%ebp),%eax
c0027583:	83 ec 0c             	sub    $0xc,%esp
c0027586:	50                   	push   %eax
c0027587:	e8 7e c1 ff ff       	call   c002370a <lock_release>
c002758c:	83 c4 10             	add    $0x10,%esp
c002758f:	83 ec 0c             	sub    $0xc,%esp
c0027592:	ff 75 08             	pushl  0x8(%ebp)
c0027595:	e8 35 fe ff ff       	call   c00273cf <intq_full>
c002759a:	83 c4 10             	add    $0x10,%esp
c002759d:	84 c0                	test   %al,%al
c002759f:	75 91                	jne    c0027532 <intq_putc+0x33>
c00275a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00275a4:	8b 40 6c             	mov    0x6c(%eax),%eax
c00275a7:	8b 55 08             	mov    0x8(%ebp),%edx
c00275aa:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c00275ae:	88 4c 02 2c          	mov    %cl,0x2c(%edx,%eax,1)
c00275b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00275b5:	8b 40 6c             	mov    0x6c(%eax),%eax
c00275b8:	83 ec 0c             	sub    $0xc,%esp
c00275bb:	50                   	push   %eax
c00275bc:	e8 23 00 00 00       	call   c00275e4 <next>
c00275c1:	83 c4 10             	add    $0x10,%esp
c00275c4:	89 c2                	mov    %eax,%edx
c00275c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00275c9:	89 50 6c             	mov    %edx,0x6c(%eax)
c00275cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00275cf:	83 c0 28             	add    $0x28,%eax
c00275d2:	83 ec 08             	sub    $0x8,%esp
c00275d5:	50                   	push   %eax
c00275d6:	ff 75 08             	pushl  0x8(%ebp)
c00275d9:	e8 e5 00 00 00       	call   c00276c3 <signal>
c00275de:	83 c4 10             	add    $0x10,%esp
c00275e1:	90                   	nop
c00275e2:	c9                   	leave  
c00275e3:	c3                   	ret    

c00275e4 <next>:
c00275e4:	55                   	push   %ebp
c00275e5:	89 e5                	mov    %esp,%ebp
c00275e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00275ea:	8d 50 01             	lea    0x1(%eax),%edx
c00275ed:	89 d0                	mov    %edx,%eax
c00275ef:	c1 f8 1f             	sar    $0x1f,%eax
c00275f2:	c1 e8 1a             	shr    $0x1a,%eax
c00275f5:	01 c2                	add    %eax,%edx
c00275f7:	83 e2 3f             	and    $0x3f,%edx
c00275fa:	29 c2                	sub    %eax,%edx
c00275fc:	89 d0                	mov    %edx,%eax
c00275fe:	5d                   	pop    %ebp
c00275ff:	c3                   	ret    

c0027600 <wait>:
c0027600:	55                   	push   %ebp
c0027601:	89 e5                	mov    %esp,%ebp
c0027603:	83 ec 08             	sub    $0x8,%esp
c0027606:	e8 4d aa ff ff       	call   c0022058 <intr_context>
c002760b:	83 f0 01             	xor    $0x1,%eax
c002760e:	84 c0                	test   %al,%al
c0027610:	75 1e                	jne    c0027630 <wait+0x30>
c0027612:	83 ec 0c             	sub    $0xc,%esp
c0027615:	68 be 46 03 c0       	push   $0xc00346be
c002761a:	68 92 46 03 c0       	push   $0xc0034692
c002761f:	68 b8 47 03 c0       	push   $0xc00347b8
c0027624:	6a 59                	push   $0x59
c0027626:	68 a9 46 03 c0       	push   $0xc00346a9
c002762b:	e8 fa 2e 00 00       	call   c002a52a <debug_panic>
c0027630:	e8 df a6 ff ff       	call   c0021d14 <intr_get_level>
c0027635:	85 c0                	test   %eax,%eax
c0027637:	74 1e                	je     c0027657 <wait+0x57>
c0027639:	83 ec 0c             	sub    $0xc,%esp
c002763c:	68 74 46 03 c0       	push   $0xc0034674
c0027641:	68 92 46 03 c0       	push   $0xc0034692
c0027646:	68 b8 47 03 c0       	push   $0xc00347b8
c002764b:	6a 5a                	push   $0x5a
c002764d:	68 a9 46 03 c0       	push   $0xc00346a9
c0027652:	e8 d3 2e 00 00       	call   c002a52a <debug_panic>
c0027657:	8b 45 08             	mov    0x8(%ebp),%eax
c002765a:	83 c0 28             	add    $0x28,%eax
c002765d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0027660:	75 12                	jne    c0027674 <wait+0x74>
c0027662:	83 ec 0c             	sub    $0xc,%esp
c0027665:	ff 75 08             	pushl  0x8(%ebp)
c0027668:	e8 22 fd ff ff       	call   c002738f <intq_empty>
c002766d:	83 c4 10             	add    $0x10,%esp
c0027670:	84 c0                	test   %al,%al
c0027672:	75 3b                	jne    c00276af <wait+0xaf>
c0027674:	8b 45 08             	mov    0x8(%ebp),%eax
c0027677:	83 c0 24             	add    $0x24,%eax
c002767a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002767d:	75 12                	jne    c0027691 <wait+0x91>
c002767f:	83 ec 0c             	sub    $0xc,%esp
c0027682:	ff 75 08             	pushl  0x8(%ebp)
c0027685:	e8 45 fd ff ff       	call   c00273cf <intq_full>
c002768a:	83 c4 10             	add    $0x10,%esp
c002768d:	84 c0                	test   %al,%al
c002768f:	75 1e                	jne    c00276af <wait+0xaf>
c0027691:	83 ec 0c             	sub    $0xc,%esp
c0027694:	68 d0 46 03 c0       	push   $0xc00346d0
c0027699:	68 92 46 03 c0       	push   $0xc0034692
c002769e:	68 b8 47 03 c0       	push   $0xc00347b8
c00276a3:	6a 5c                	push   $0x5c
c00276a5:	68 a9 46 03 c0       	push   $0xc00346a9
c00276aa:	e8 7b 2e 00 00       	call   c002a52a <debug_panic>
c00276af:	e8 f4 97 ff ff       	call   c0020ea8 <thread_current>
c00276b4:	89 c2                	mov    %eax,%edx
c00276b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00276b9:	89 10                	mov    %edx,(%eax)
c00276bb:	e8 c4 96 ff ff       	call   c0020d84 <thread_block>
c00276c0:	90                   	nop
c00276c1:	c9                   	leave  
c00276c2:	c3                   	ret    

c00276c3 <signal>:
c00276c3:	55                   	push   %ebp
c00276c4:	89 e5                	mov    %esp,%ebp
c00276c6:	83 ec 08             	sub    $0x8,%esp
c00276c9:	e8 46 a6 ff ff       	call   c0021d14 <intr_get_level>
c00276ce:	85 c0                	test   %eax,%eax
c00276d0:	74 1e                	je     c00276f0 <signal+0x2d>
c00276d2:	83 ec 0c             	sub    $0xc,%esp
c00276d5:	68 74 46 03 c0       	push   $0xc0034674
c00276da:	68 92 46 03 c0       	push   $0xc0034692
c00276df:	68 c0 47 03 c0       	push   $0xc00347c0
c00276e4:	6a 69                	push   $0x69
c00276e6:	68 a9 46 03 c0       	push   $0xc00346a9
c00276eb:	e8 3a 2e 00 00       	call   c002a52a <debug_panic>
c00276f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00276f3:	83 c0 28             	add    $0x28,%eax
c00276f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00276f9:	75 15                	jne    c0027710 <signal+0x4d>
c00276fb:	83 ec 0c             	sub    $0xc,%esp
c00276fe:	ff 75 08             	pushl  0x8(%ebp)
c0027701:	e8 89 fc ff ff       	call   c002738f <intq_empty>
c0027706:	83 c4 10             	add    $0x10,%esp
c0027709:	83 f0 01             	xor    $0x1,%eax
c002770c:	84 c0                	test   %al,%al
c002770e:	75 3e                	jne    c002774e <signal+0x8b>
c0027710:	8b 45 08             	mov    0x8(%ebp),%eax
c0027713:	83 c0 24             	add    $0x24,%eax
c0027716:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0027719:	75 15                	jne    c0027730 <signal+0x6d>
c002771b:	83 ec 0c             	sub    $0xc,%esp
c002771e:	ff 75 08             	pushl  0x8(%ebp)
c0027721:	e8 a9 fc ff ff       	call   c00273cf <intq_full>
c0027726:	83 c4 10             	add    $0x10,%esp
c0027729:	83 f0 01             	xor    $0x1,%eax
c002772c:	84 c0                	test   %al,%al
c002772e:	75 1e                	jne    c002774e <signal+0x8b>
c0027730:	83 ec 0c             	sub    $0xc,%esp
c0027733:	68 2c 47 03 c0       	push   $0xc003472c
c0027738:	68 92 46 03 c0       	push   $0xc0034692
c002773d:	68 c0 47 03 c0       	push   $0xc00347c0
c0027742:	6a 6b                	push   $0x6b
c0027744:	68 a9 46 03 c0       	push   $0xc00346a9
c0027749:	e8 dc 2d 00 00       	call   c002a52a <debug_panic>
c002774e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027751:	8b 00                	mov    (%eax),%eax
c0027753:	85 c0                	test   %eax,%eax
c0027755:	74 1a                	je     c0027771 <signal+0xae>
c0027757:	8b 45 0c             	mov    0xc(%ebp),%eax
c002775a:	8b 00                	mov    (%eax),%eax
c002775c:	83 ec 0c             	sub    $0xc,%esp
c002775f:	50                   	push   %eax
c0027760:	e8 90 96 ff ff       	call   c0020df5 <thread_unblock>
c0027765:	83 c4 10             	add    $0x10,%esp
c0027768:	8b 45 0c             	mov    0xc(%ebp),%eax
c002776b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0027771:	90                   	nop
c0027772:	c9                   	leave  
c0027773:	c3                   	ret    

c0027774 <inb>:
c0027774:	55                   	push   %ebp
c0027775:	89 e5                	mov    %esp,%ebp
c0027777:	83 ec 14             	sub    $0x14,%esp
c002777a:	8b 45 08             	mov    0x8(%ebp),%eax
c002777d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0027781:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0027785:	89 c2                	mov    %eax,%edx
c0027787:	ec                   	in     (%dx),%al
c0027788:	88 45 ff             	mov    %al,-0x1(%ebp)
c002778b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c002778f:	c9                   	leave  
c0027790:	c3                   	ret    

c0027791 <outb>:
c0027791:	55                   	push   %ebp
c0027792:	89 e5                	mov    %esp,%ebp
c0027794:	83 ec 08             	sub    $0x8,%esp
c0027797:	8b 55 08             	mov    0x8(%ebp),%edx
c002779a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002779d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00277a1:	88 45 f8             	mov    %al,-0x8(%ebp)
c00277a4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00277a8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00277ac:	ee                   	out    %al,(%dx)
c00277ad:	90                   	nop
c00277ae:	c9                   	leave  
c00277af:	c3                   	ret    

c00277b0 <rtc_get_time>:
c00277b0:	55                   	push   %ebp
c00277b1:	89 e5                	mov    %esp,%ebp
c00277b3:	83 ec 28             	sub    $0x28,%esp
c00277b6:	83 ec 0c             	sub    $0xc,%esp
c00277b9:	6a 00                	push   $0x0
c00277bb:	e8 ae 01 00 00       	call   c002796e <cmos_read>
c00277c0:	83 c4 10             	add    $0x10,%esp
c00277c3:	0f b6 c0             	movzbl %al,%eax
c00277c6:	83 ec 0c             	sub    $0xc,%esp
c00277c9:	50                   	push   %eax
c00277ca:	e8 73 01 00 00       	call   c0027942 <bcd_to_bin>
c00277cf:	83 c4 10             	add    $0x10,%esp
c00277d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00277d5:	83 ec 0c             	sub    $0xc,%esp
c00277d8:	6a 02                	push   $0x2
c00277da:	e8 8f 01 00 00       	call   c002796e <cmos_read>
c00277df:	83 c4 10             	add    $0x10,%esp
c00277e2:	0f b6 c0             	movzbl %al,%eax
c00277e5:	83 ec 0c             	sub    $0xc,%esp
c00277e8:	50                   	push   %eax
c00277e9:	e8 54 01 00 00       	call   c0027942 <bcd_to_bin>
c00277ee:	83 c4 10             	add    $0x10,%esp
c00277f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00277f4:	83 ec 0c             	sub    $0xc,%esp
c00277f7:	6a 04                	push   $0x4
c00277f9:	e8 70 01 00 00       	call   c002796e <cmos_read>
c00277fe:	83 c4 10             	add    $0x10,%esp
c0027801:	0f b6 c0             	movzbl %al,%eax
c0027804:	83 ec 0c             	sub    $0xc,%esp
c0027807:	50                   	push   %eax
c0027808:	e8 35 01 00 00       	call   c0027942 <bcd_to_bin>
c002780d:	83 c4 10             	add    $0x10,%esp
c0027810:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0027813:	83 ec 0c             	sub    $0xc,%esp
c0027816:	6a 07                	push   $0x7
c0027818:	e8 51 01 00 00       	call   c002796e <cmos_read>
c002781d:	83 c4 10             	add    $0x10,%esp
c0027820:	0f b6 c0             	movzbl %al,%eax
c0027823:	83 ec 0c             	sub    $0xc,%esp
c0027826:	50                   	push   %eax
c0027827:	e8 16 01 00 00       	call   c0027942 <bcd_to_bin>
c002782c:	83 c4 10             	add    $0x10,%esp
c002782f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0027832:	83 ec 0c             	sub    $0xc,%esp
c0027835:	6a 08                	push   $0x8
c0027837:	e8 32 01 00 00       	call   c002796e <cmos_read>
c002783c:	83 c4 10             	add    $0x10,%esp
c002783f:	0f b6 c0             	movzbl %al,%eax
c0027842:	83 ec 0c             	sub    $0xc,%esp
c0027845:	50                   	push   %eax
c0027846:	e8 f7 00 00 00       	call   c0027942 <bcd_to_bin>
c002784b:	83 c4 10             	add    $0x10,%esp
c002784e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0027851:	83 ec 0c             	sub    $0xc,%esp
c0027854:	6a 09                	push   $0x9
c0027856:	e8 13 01 00 00       	call   c002796e <cmos_read>
c002785b:	83 c4 10             	add    $0x10,%esp
c002785e:	0f b6 c0             	movzbl %al,%eax
c0027861:	83 ec 0c             	sub    $0xc,%esp
c0027864:	50                   	push   %eax
c0027865:	e8 d8 00 00 00       	call   c0027942 <bcd_to_bin>
c002786a:	83 c4 10             	add    $0x10,%esp
c002786d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027870:	83 ec 0c             	sub    $0xc,%esp
c0027873:	6a 00                	push   $0x0
c0027875:	e8 f4 00 00 00       	call   c002796e <cmos_read>
c002787a:	83 c4 10             	add    $0x10,%esp
c002787d:	0f b6 c0             	movzbl %al,%eax
c0027880:	83 ec 0c             	sub    $0xc,%esp
c0027883:	50                   	push   %eax
c0027884:	e8 b9 00 00 00       	call   c0027942 <bcd_to_bin>
c0027889:	83 c4 10             	add    $0x10,%esp
c002788c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c002788f:	0f 85 21 ff ff ff    	jne    c00277b6 <rtc_get_time+0x6>
c0027895:	83 7d f4 45          	cmpl   $0x45,-0xc(%ebp)
c0027899:	7f 04                	jg     c002789f <rtc_get_time+0xef>
c002789b:	83 45 f4 64          	addl   $0x64,-0xc(%ebp)
c002789f:	83 6d f4 46          	subl   $0x46,-0xc(%ebp)
c00278a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00278a6:	69 d0 6d 01 00 00    	imul   $0x16d,%eax,%edx
c00278ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00278af:	83 e8 01             	sub    $0x1,%eax
c00278b2:	8d 48 03             	lea    0x3(%eax),%ecx
c00278b5:	85 c0                	test   %eax,%eax
c00278b7:	0f 48 c1             	cmovs  %ecx,%eax
c00278ba:	c1 f8 02             	sar    $0x2,%eax
c00278bd:	01 d0                	add    %edx,%eax
c00278bf:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c00278c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00278c8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c00278cf:	eb 1a                	jmp    c00278eb <rtc_get_time+0x13b>
c00278d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00278d4:	83 e8 01             	sub    $0x1,%eax
c00278d7:	8b 04 85 e0 47 03 c0 	mov    -0x3ffcb820(,%eax,4),%eax
c00278de:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c00278e4:	01 45 f0             	add    %eax,-0x10(%ebp)
c00278e7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c00278eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00278ee:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c00278f1:	7e de                	jle    c00278d1 <rtc_get_time+0x121>
c00278f3:	83 7d d8 02          	cmpl   $0x2,-0x28(%ebp)
c00278f7:	7e 11                	jle    c002790a <rtc_get_time+0x15a>
c00278f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00278fc:	83 e0 03             	and    $0x3,%eax
c00278ff:	85 c0                	test   %eax,%eax
c0027901:	75 07                	jne    c002790a <rtc_get_time+0x15a>
c0027903:	81 45 f0 80 51 01 00 	addl   $0x15180,-0x10(%ebp)
c002790a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002790d:	83 e8 01             	sub    $0x1,%eax
c0027910:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c0027916:	01 45 f0             	add    %eax,-0x10(%ebp)
c0027919:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002791c:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
c0027922:	01 45 f0             	add    %eax,-0x10(%ebp)
c0027925:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0027928:	c1 e0 02             	shl    $0x2,%eax
c002792b:	89 c2                	mov    %eax,%edx
c002792d:	c1 e2 04             	shl    $0x4,%edx
c0027930:	29 c2                	sub    %eax,%edx
c0027932:	89 d0                	mov    %edx,%eax
c0027934:	01 45 f0             	add    %eax,-0x10(%ebp)
c0027937:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002793a:	01 45 f0             	add    %eax,-0x10(%ebp)
c002793d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0027940:	c9                   	leave  
c0027941:	c3                   	ret    

c0027942 <bcd_to_bin>:
c0027942:	55                   	push   %ebp
c0027943:	89 e5                	mov    %esp,%ebp
c0027945:	83 ec 04             	sub    $0x4,%esp
c0027948:	8b 45 08             	mov    0x8(%ebp),%eax
c002794b:	88 45 fc             	mov    %al,-0x4(%ebp)
c002794e:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0027952:	83 e0 0f             	and    $0xf,%eax
c0027955:	89 c1                	mov    %eax,%ecx
c0027957:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c002795b:	c0 e8 04             	shr    $0x4,%al
c002795e:	0f b6 d0             	movzbl %al,%edx
c0027961:	89 d0                	mov    %edx,%eax
c0027963:	c1 e0 02             	shl    $0x2,%eax
c0027966:	01 d0                	add    %edx,%eax
c0027968:	01 c0                	add    %eax,%eax
c002796a:	01 c8                	add    %ecx,%eax
c002796c:	c9                   	leave  
c002796d:	c3                   	ret    

c002796e <cmos_read>:
c002796e:	55                   	push   %ebp
c002796f:	89 e5                	mov    %esp,%ebp
c0027971:	83 ec 04             	sub    $0x4,%esp
c0027974:	8b 45 08             	mov    0x8(%ebp),%eax
c0027977:	88 45 fc             	mov    %al,-0x4(%ebp)
c002797a:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c002797e:	50                   	push   %eax
c002797f:	6a 70                	push   $0x70
c0027981:	e8 0b fe ff ff       	call   c0027791 <outb>
c0027986:	83 c4 08             	add    $0x8,%esp
c0027989:	6a 71                	push   $0x71
c002798b:	e8 e4 fd ff ff       	call   c0027774 <inb>
c0027990:	83 c4 04             	add    $0x4,%esp
c0027993:	c9                   	leave  
c0027994:	c3                   	ret    

c0027995 <inb>:
c0027995:	55                   	push   %ebp
c0027996:	89 e5                	mov    %esp,%ebp
c0027998:	83 ec 14             	sub    $0x14,%esp
c002799b:	8b 45 08             	mov    0x8(%ebp),%eax
c002799e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c00279a2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00279a6:	89 c2                	mov    %eax,%edx
c00279a8:	ec                   	in     (%dx),%al
c00279a9:	88 45 ff             	mov    %al,-0x1(%ebp)
c00279ac:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00279b0:	c9                   	leave  
c00279b1:	c3                   	ret    

c00279b2 <outb>:
c00279b2:	55                   	push   %ebp
c00279b3:	89 e5                	mov    %esp,%ebp
c00279b5:	83 ec 08             	sub    $0x8,%esp
c00279b8:	8b 55 08             	mov    0x8(%ebp),%edx
c00279bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00279be:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00279c2:	88 45 f8             	mov    %al,-0x8(%ebp)
c00279c5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00279c9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00279cd:	ee                   	out    %al,(%dx)
c00279ce:	90                   	nop
c00279cf:	c9                   	leave  
c00279d0:	c3                   	ret    

c00279d1 <outw>:
c00279d1:	55                   	push   %ebp
c00279d2:	89 e5                	mov    %esp,%ebp
c00279d4:	83 ec 08             	sub    $0x8,%esp
c00279d7:	8b 55 08             	mov    0x8(%ebp),%edx
c00279da:	8b 45 0c             	mov    0xc(%ebp),%eax
c00279dd:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00279e1:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c00279e5:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c00279e9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00279ed:	66 ef                	out    %ax,(%dx)
c00279ef:	90                   	nop
c00279f0:	c9                   	leave  
c00279f1:	c3                   	ret    

c00279f2 <shutdown>:
c00279f2:	55                   	push   %ebp
c00279f3:	89 e5                	mov    %esp,%ebp
c00279f5:	83 ec 08             	sub    $0x8,%esp
c00279f8:	a1 74 db 03 c0       	mov    0xc003db74,%eax
c00279fd:	83 f8 01             	cmp    $0x1,%eax
c0027a00:	74 07                	je     c0027a09 <shutdown+0x17>
c0027a02:	83 f8 02             	cmp    $0x2,%eax
c0027a05:	74 07                	je     c0027a0e <shutdown+0x1c>
c0027a07:	eb 0a                	jmp    c0027a13 <shutdown+0x21>
c0027a09:	e8 9d 00 00 00       	call   c0027aab <shutdown_power_off>
c0027a0e:	e8 11 00 00 00       	call   c0027a24 <shutdown_reboot>
c0027a13:	90                   	nop
c0027a14:	c9                   	leave  
c0027a15:	c3                   	ret    

c0027a16 <shutdown_configure>:
c0027a16:	55                   	push   %ebp
c0027a17:	89 e5                	mov    %esp,%ebp
c0027a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0027a1c:	a3 74 db 03 c0       	mov    %eax,0xc003db74
c0027a21:	90                   	nop
c0027a22:	5d                   	pop    %ebp
c0027a23:	c3                   	ret    

c0027a24 <shutdown_reboot>:
c0027a24:	55                   	push   %ebp
c0027a25:	89 e5                	mov    %esp,%ebp
c0027a27:	83 ec 18             	sub    $0x18,%esp
c0027a2a:	83 ec 0c             	sub    $0xc,%esp
c0027a2d:	68 10 48 03 c0       	push   $0xc0034810
c0027a32:	e8 ba 4d 00 00       	call   c002c7f1 <puts>
c0027a37:	83 c4 10             	add    $0x10,%esp
c0027a3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0027a41:	eb 2a                	jmp    c0027a6d <shutdown_reboot+0x49>
c0027a43:	83 ec 0c             	sub    $0xc,%esp
c0027a46:	6a 64                	push   $0x64
c0027a48:	e8 48 ff ff ff       	call   c0027995 <inb>
c0027a4d:	83 c4 10             	add    $0x10,%esp
c0027a50:	0f b6 c0             	movzbl %al,%eax
c0027a53:	83 e0 02             	and    $0x2,%eax
c0027a56:	85 c0                	test   %eax,%eax
c0027a58:	74 1e                	je     c0027a78 <shutdown_reboot+0x54>
c0027a5a:	83 ec 08             	sub    $0x8,%esp
c0027a5d:	6a 00                	push   $0x0
c0027a5f:	6a 02                	push   $0x2
c0027a61:	e8 a0 d0 ff ff       	call   c0024b06 <timer_udelay>
c0027a66:	83 c4 10             	add    $0x10,%esp
c0027a69:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0027a6d:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c0027a74:	7e cd                	jle    c0027a43 <shutdown_reboot+0x1f>
c0027a76:	eb 01                	jmp    c0027a79 <shutdown_reboot+0x55>
c0027a78:	90                   	nop
c0027a79:	83 ec 08             	sub    $0x8,%esp
c0027a7c:	6a 00                	push   $0x0
c0027a7e:	6a 32                	push   $0x32
c0027a80:	e8 81 d0 ff ff       	call   c0024b06 <timer_udelay>
c0027a85:	83 c4 10             	add    $0x10,%esp
c0027a88:	83 ec 08             	sub    $0x8,%esp
c0027a8b:	68 fe 00 00 00       	push   $0xfe
c0027a90:	6a 64                	push   $0x64
c0027a92:	e8 1b ff ff ff       	call   c00279b2 <outb>
c0027a97:	83 c4 10             	add    $0x10,%esp
c0027a9a:	83 ec 08             	sub    $0x8,%esp
c0027a9d:	6a 00                	push   $0x0
c0027a9f:	6a 32                	push   $0x32
c0027aa1:	e8 60 d0 ff ff       	call   c0024b06 <timer_udelay>
c0027aa6:	83 c4 10             	add    $0x10,%esp
c0027aa9:	eb 8f                	jmp    c0027a3a <shutdown_reboot+0x16>

c0027aab <shutdown_power_off>:
c0027aab:	55                   	push   %ebp
c0027aac:	89 e5                	mov    %esp,%ebp
c0027aae:	83 ec 18             	sub    $0x18,%esp
c0027ab1:	c7 45 eb 53 68 75 74 	movl   $0x74756853,-0x15(%ebp)
c0027ab8:	c7 45 ef 64 6f 77 6e 	movl   $0x6e776f64,-0x11(%ebp)
c0027abf:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
c0027ac3:	e8 95 7d 00 00       	call   c002f85d <filesys_done>
c0027ac8:	e8 80 00 00 00       	call   c0027b4d <print_stats>
c0027acd:	83 ec 0c             	sub    $0xc,%esp
c0027ad0:	68 1d 48 03 c0       	push   $0xc003481d
c0027ad5:	e8 17 4d 00 00       	call   c002c7f1 <puts>
c0027ada:	83 c4 10             	add    $0x10,%esp
c0027add:	e8 6d dd ff ff       	call   c002584f <serial_flush>
c0027ae2:	83 ec 08             	sub    $0x8,%esp
c0027ae5:	68 00 20 00 00       	push   $0x2000
c0027aea:	68 04 b0 00 00       	push   $0xb004
c0027aef:	e8 dd fe ff ff       	call   c00279d1 <outw>
c0027af4:	83 c4 10             	add    $0x10,%esp
c0027af7:	8d 45 eb             	lea    -0x15(%ebp),%eax
c0027afa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027afd:	eb 1e                	jmp    c0027b1d <shutdown_power_off+0x72>
c0027aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027b02:	0f b6 00             	movzbl (%eax),%eax
c0027b05:	0f b6 c0             	movzbl %al,%eax
c0027b08:	83 ec 08             	sub    $0x8,%esp
c0027b0b:	50                   	push   %eax
c0027b0c:	68 00 89 00 00       	push   $0x8900
c0027b11:	e8 9c fe ff ff       	call   c00279b2 <outb>
c0027b16:	83 c4 10             	add    $0x10,%esp
c0027b19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0027b1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027b20:	0f b6 00             	movzbl (%eax),%eax
c0027b23:	84 c0                	test   %al,%al
c0027b25:	75 d8                	jne    c0027aff <shutdown_power_off+0x54>
c0027b27:	83 ec 08             	sub    $0x8,%esp
c0027b2a:	6a 31                	push   $0x31
c0027b2c:	68 01 05 00 00       	push   $0x501
c0027b31:	e8 7c fe ff ff       	call   c00279b2 <outb>
c0027b36:	83 c4 10             	add    $0x10,%esp
c0027b39:	fa                   	cli    
c0027b3a:	f4                   	hlt    
c0027b3b:	83 ec 0c             	sub    $0xc,%esp
c0027b3e:	68 2d 48 03 c0       	push   $0xc003482d
c0027b43:	e8 a9 4c 00 00       	call   c002c7f1 <puts>
c0027b48:	83 c4 10             	add    $0x10,%esp
c0027b4b:	eb fe                	jmp    c0027b4b <shutdown_power_off+0xa0>

c0027b4d <print_stats>:
c0027b4d:	55                   	push   %ebp
c0027b4e:	89 e5                	mov    %esp,%ebp
c0027b50:	83 ec 08             	sub    $0x8,%esp
c0027b53:	e8 04 d0 ff ff       	call   c0024b5c <timer_print_stats>
c0027b58:	e8 d1 90 ff ff       	call   c0020c2e <thread_print_stats>
c0027b5d:	e8 5a e2 ff ff       	call   c0025dbc <block_print_stats>
c0027b62:	e8 54 4b 00 00       	call   c002c6bb <console_print_stats>
c0027b67:	e8 eb d3 ff ff       	call   c0024f57 <kbd_print_stats>
c0027b6c:	e8 49 65 00 00       	call   c002e0ba <exception_print_stats>
c0027b71:	90                   	nop
c0027b72:	c9                   	leave  
c0027b73:	c3                   	ret    

c0027b74 <inb>:
c0027b74:	55                   	push   %ebp
c0027b75:	89 e5                	mov    %esp,%ebp
c0027b77:	83 ec 14             	sub    $0x14,%esp
c0027b7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0027b7d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c0027b81:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0027b85:	89 c2                	mov    %eax,%edx
c0027b87:	ec                   	in     (%dx),%al
c0027b88:	88 45 ff             	mov    %al,-0x1(%ebp)
c0027b8b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0027b8f:	c9                   	leave  
c0027b90:	c3                   	ret    

c0027b91 <outb>:
c0027b91:	55                   	push   %ebp
c0027b92:	89 e5                	mov    %esp,%ebp
c0027b94:	83 ec 08             	sub    $0x8,%esp
c0027b97:	8b 55 08             	mov    0x8(%ebp),%edx
c0027b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027b9d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0027ba1:	88 45 f8             	mov    %al,-0x8(%ebp)
c0027ba4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0027ba8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0027bac:	ee                   	out    %al,(%dx)
c0027bad:	90                   	nop
c0027bae:	c9                   	leave  
c0027baf:	c3                   	ret    

c0027bb0 <speaker_on>:
c0027bb0:	55                   	push   %ebp
c0027bb1:	89 e5                	mov    %esp,%ebp
c0027bb3:	83 ec 18             	sub    $0x18,%esp
c0027bb6:	83 7d 08 13          	cmpl   $0x13,0x8(%ebp)
c0027bba:	7e 54                	jle    c0027c10 <speaker_on+0x60>
c0027bbc:	81 7d 08 20 4e 00 00 	cmpl   $0x4e20,0x8(%ebp)
c0027bc3:	7f 4b                	jg     c0027c10 <speaker_on+0x60>
c0027bc5:	e8 bf a1 ff ff       	call   c0021d89 <intr_disable>
c0027bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027bcd:	83 ec 04             	sub    $0x4,%esp
c0027bd0:	ff 75 08             	pushl  0x8(%ebp)
c0027bd3:	6a 03                	push   $0x3
c0027bd5:	6a 02                	push   $0x2
c0027bd7:	e8 0b cb ff ff       	call   c00246e7 <pit_configure_channel>
c0027bdc:	83 c4 10             	add    $0x10,%esp
c0027bdf:	83 ec 0c             	sub    $0xc,%esp
c0027be2:	6a 61                	push   $0x61
c0027be4:	e8 8b ff ff ff       	call   c0027b74 <inb>
c0027be9:	83 c4 10             	add    $0x10,%esp
c0027bec:	83 c8 03             	or     $0x3,%eax
c0027bef:	0f b6 c0             	movzbl %al,%eax
c0027bf2:	83 ec 08             	sub    $0x8,%esp
c0027bf5:	50                   	push   %eax
c0027bf6:	6a 61                	push   $0x61
c0027bf8:	e8 94 ff ff ff       	call   c0027b91 <outb>
c0027bfd:	83 c4 10             	add    $0x10,%esp
c0027c00:	83 ec 0c             	sub    $0xc,%esp
c0027c03:	ff 75 f4             	pushl  -0xc(%ebp)
c0027c06:	e8 26 a1 ff ff       	call   c0021d31 <intr_set_level>
c0027c0b:	83 c4 10             	add    $0x10,%esp
c0027c0e:	eb 05                	jmp    c0027c15 <speaker_on+0x65>
c0027c10:	e8 03 00 00 00       	call   c0027c18 <speaker_off>
c0027c15:	90                   	nop
c0027c16:	c9                   	leave  
c0027c17:	c3                   	ret    

c0027c18 <speaker_off>:
c0027c18:	55                   	push   %ebp
c0027c19:	89 e5                	mov    %esp,%ebp
c0027c1b:	83 ec 18             	sub    $0x18,%esp
c0027c1e:	e8 66 a1 ff ff       	call   c0021d89 <intr_disable>
c0027c23:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027c26:	83 ec 0c             	sub    $0xc,%esp
c0027c29:	6a 61                	push   $0x61
c0027c2b:	e8 44 ff ff ff       	call   c0027b74 <inb>
c0027c30:	83 c4 10             	add    $0x10,%esp
c0027c33:	0f b6 c0             	movzbl %al,%eax
c0027c36:	25 fc 00 00 00       	and    $0xfc,%eax
c0027c3b:	83 ec 08             	sub    $0x8,%esp
c0027c3e:	50                   	push   %eax
c0027c3f:	6a 61                	push   $0x61
c0027c41:	e8 4b ff ff ff       	call   c0027b91 <outb>
c0027c46:	83 c4 10             	add    $0x10,%esp
c0027c49:	83 ec 0c             	sub    $0xc,%esp
c0027c4c:	ff 75 f4             	pushl  -0xc(%ebp)
c0027c4f:	e8 dd a0 ff ff       	call   c0021d31 <intr_set_level>
c0027c54:	83 c4 10             	add    $0x10,%esp
c0027c57:	90                   	nop
c0027c58:	c9                   	leave  
c0027c59:	c3                   	ret    

c0027c5a <speaker_beep>:
c0027c5a:	55                   	push   %ebp
c0027c5b:	89 e5                	mov    %esp,%ebp
c0027c5d:	83 ec 08             	sub    $0x8,%esp
c0027c60:	e8 af a0 ff ff       	call   c0021d14 <intr_get_level>
c0027c65:	83 f8 01             	cmp    $0x1,%eax
c0027c68:	75 27                	jne    c0027c91 <speaker_beep+0x37>
c0027c6a:	83 ec 0c             	sub    $0xc,%esp
c0027c6d:	68 b8 01 00 00       	push   $0x1b8
c0027c72:	e8 39 ff ff ff       	call   c0027bb0 <speaker_on>
c0027c77:	83 c4 10             	add    $0x10,%esp
c0027c7a:	83 ec 08             	sub    $0x8,%esp
c0027c7d:	6a 00                	push   $0x0
c0027c7f:	68 fa 00 00 00       	push   $0xfa
c0027c84:	e8 d1 cd ff ff       	call   c0024a5a <timer_msleep>
c0027c89:	83 c4 10             	add    $0x10,%esp
c0027c8c:	e8 87 ff ff ff       	call   c0027c18 <speaker_off>
c0027c91:	90                   	nop
c0027c92:	c9                   	leave  
c0027c93:	c3                   	ret    

c0027c94 <debug_backtrace>:
c0027c94:	55                   	push   %ebp
c0027c95:	89 e5                	mov    %esp,%ebp
c0027c97:	83 ec 18             	sub    $0x18,%esp
c0027c9a:	8b 45 04             	mov    0x4(%ebp),%eax
c0027c9d:	83 ec 08             	sub    $0x8,%esp
c0027ca0:	50                   	push   %eax
c0027ca1:	68 40 48 03 c0       	push   $0xc0034840
c0027ca6:	e8 1e 03 00 00       	call   c0027fc9 <printf>
c0027cab:	83 c4 10             	add    $0x10,%esp
c0027cae:	8b 45 00             	mov    0x0(%ebp),%eax
c0027cb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027cb4:	eb 21                	jmp    c0027cd7 <debug_backtrace+0x43>
c0027cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027cb9:	83 c0 04             	add    $0x4,%eax
c0027cbc:	8b 00                	mov    (%eax),%eax
c0027cbe:	83 ec 08             	sub    $0x8,%esp
c0027cc1:	50                   	push   %eax
c0027cc2:	68 4f 48 03 c0       	push   $0xc003484f
c0027cc7:	e8 fd 02 00 00       	call   c0027fc9 <printf>
c0027ccc:	83 c4 10             	add    $0x10,%esp
c0027ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027cd2:	8b 00                	mov    (%eax),%eax
c0027cd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027cda:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0027cdf:	76 09                	jbe    c0027cea <debug_backtrace+0x56>
c0027ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027ce4:	8b 00                	mov    (%eax),%eax
c0027ce6:	85 c0                	test   %eax,%eax
c0027ce8:	75 cc                	jne    c0027cb6 <debug_backtrace+0x22>
c0027cea:	83 ec 0c             	sub    $0xc,%esp
c0027ced:	68 53 48 03 c0       	push   $0xc0034853
c0027cf2:	e8 fa 4a 00 00       	call   c002c7f1 <puts>
c0027cf7:	83 c4 10             	add    $0x10,%esp
c0027cfa:	0f b6 05 78 db 03 c0 	movzbl 0xc003db78,%eax
c0027d01:	83 f0 01             	xor    $0x1,%eax
c0027d04:	84 c0                	test   %al,%al
c0027d06:	74 17                	je     c0027d1f <debug_backtrace+0x8b>
c0027d08:	c6 05 78 db 03 c0 01 	movb   $0x1,0xc003db78
c0027d0f:	83 ec 0c             	sub    $0xc,%esp
c0027d12:	68 58 48 03 c0       	push   $0xc0034858
c0027d17:	e8 d5 4a 00 00       	call   c002c7f1 <puts>
c0027d1c:	83 c4 10             	add    $0x10,%esp
c0027d1f:	90                   	nop
c0027d20:	c9                   	leave  
c0027d21:	c3                   	ret    

c0027d22 <swap_byte>:
c0027d22:	55                   	push   %ebp
c0027d23:	89 e5                	mov    %esp,%ebp
c0027d25:	83 ec 10             	sub    $0x10,%esp
c0027d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0027d2b:	0f b6 00             	movzbl (%eax),%eax
c0027d2e:	88 45 ff             	mov    %al,-0x1(%ebp)
c0027d31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027d34:	0f b6 10             	movzbl (%eax),%edx
c0027d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0027d3a:	88 10                	mov    %dl,(%eax)
c0027d3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027d3f:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0027d43:	88 10                	mov    %dl,(%eax)
c0027d45:	90                   	nop
c0027d46:	c9                   	leave  
c0027d47:	c3                   	ret    

c0027d48 <random_init>:
c0027d48:	55                   	push   %ebp
c0027d49:	89 e5                	mov    %esp,%ebp
c0027d4b:	83 ec 10             	sub    $0x10,%esp
c0027d4e:	8d 45 08             	lea    0x8(%ebp),%eax
c0027d51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027d54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0027d5b:	eb 13                	jmp    c0027d70 <random_init+0x28>
c0027d5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027d60:	89 c2                	mov    %eax,%edx
c0027d62:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027d65:	05 80 db 03 c0       	add    $0xc003db80,%eax
c0027d6a:	88 10                	mov    %dl,(%eax)
c0027d6c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0027d70:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c0027d77:	7e e4                	jle    c0027d5d <random_init+0x15>
c0027d79:	c6 45 fb 00          	movb   $0x0,-0x5(%ebp)
c0027d7d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0027d84:	eb 40                	jmp    c0027dc6 <random_init+0x7e>
c0027d86:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027d89:	05 80 db 03 c0       	add    $0xc003db80,%eax
c0027d8e:	0f b6 10             	movzbl (%eax),%edx
c0027d91:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027d94:	83 e0 03             	and    $0x3,%eax
c0027d97:	89 c1                	mov    %eax,%ecx
c0027d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027d9c:	01 c8                	add    %ecx,%eax
c0027d9e:	0f b6 00             	movzbl (%eax),%eax
c0027da1:	01 d0                	add    %edx,%eax
c0027da3:	00 45 fb             	add    %al,-0x5(%ebp)
c0027da6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0027daa:	8d 90 80 db 03 c0    	lea    -0x3ffc2480(%eax),%edx
c0027db0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027db3:	05 80 db 03 c0       	add    $0xc003db80,%eax
c0027db8:	52                   	push   %edx
c0027db9:	50                   	push   %eax
c0027dba:	e8 63 ff ff ff       	call   c0027d22 <swap_byte>
c0027dbf:	83 c4 08             	add    $0x8,%esp
c0027dc2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0027dc6:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c0027dcd:	7e b7                	jle    c0027d86 <random_init+0x3e>
c0027dcf:	c6 05 81 dc 03 c0 00 	movb   $0x0,0xc003dc81
c0027dd6:	0f b6 05 81 dc 03 c0 	movzbl 0xc003dc81,%eax
c0027ddd:	a2 80 dc 03 c0       	mov    %al,0xc003dc80
c0027de2:	c6 05 82 dc 03 c0 01 	movb   $0x1,0xc003dc82
c0027de9:	90                   	nop
c0027dea:	c9                   	leave  
c0027deb:	c3                   	ret    

c0027dec <random_bytes>:
c0027dec:	55                   	push   %ebp
c0027ded:	89 e5                	mov    %esp,%ebp
c0027def:	83 ec 10             	sub    $0x10,%esp
c0027df2:	0f b6 05 82 dc 03 c0 	movzbl 0xc003dc82,%eax
c0027df9:	83 f0 01             	xor    $0x1,%eax
c0027dfc:	84 c0                	test   %al,%al
c0027dfe:	74 0a                	je     c0027e0a <random_bytes+0x1e>
c0027e00:	6a 00                	push   $0x0
c0027e02:	e8 41 ff ff ff       	call   c0027d48 <random_init>
c0027e07:	83 c4 04             	add    $0x4,%esp
c0027e0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0027e0d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0027e10:	e9 92 00 00 00       	jmp    c0027ea7 <random_bytes+0xbb>
c0027e15:	0f b6 05 80 dc 03 c0 	movzbl 0xc003dc80,%eax
c0027e1c:	83 c0 01             	add    $0x1,%eax
c0027e1f:	a2 80 dc 03 c0       	mov    %al,0xc003dc80
c0027e24:	0f b6 05 80 dc 03 c0 	movzbl 0xc003dc80,%eax
c0027e2b:	0f b6 c0             	movzbl %al,%eax
c0027e2e:	0f b6 90 80 db 03 c0 	movzbl -0x3ffc2480(%eax),%edx
c0027e35:	0f b6 05 81 dc 03 c0 	movzbl 0xc003dc81,%eax
c0027e3c:	01 d0                	add    %edx,%eax
c0027e3e:	a2 81 dc 03 c0       	mov    %al,0xc003dc81
c0027e43:	0f b6 05 81 dc 03 c0 	movzbl 0xc003dc81,%eax
c0027e4a:	0f b6 c0             	movzbl %al,%eax
c0027e4d:	8d 90 80 db 03 c0    	lea    -0x3ffc2480(%eax),%edx
c0027e53:	0f b6 05 80 dc 03 c0 	movzbl 0xc003dc80,%eax
c0027e5a:	0f b6 c0             	movzbl %al,%eax
c0027e5d:	05 80 db 03 c0       	add    $0xc003db80,%eax
c0027e62:	52                   	push   %edx
c0027e63:	50                   	push   %eax
c0027e64:	e8 b9 fe ff ff       	call   c0027d22 <swap_byte>
c0027e69:	83 c4 08             	add    $0x8,%esp
c0027e6c:	0f b6 05 80 dc 03 c0 	movzbl 0xc003dc80,%eax
c0027e73:	0f b6 c0             	movzbl %al,%eax
c0027e76:	0f b6 90 80 db 03 c0 	movzbl -0x3ffc2480(%eax),%edx
c0027e7d:	0f b6 05 81 dc 03 c0 	movzbl 0xc003dc81,%eax
c0027e84:	0f b6 c0             	movzbl %al,%eax
c0027e87:	0f b6 80 80 db 03 c0 	movzbl -0x3ffc2480(%eax),%eax
c0027e8e:	01 d0                	add    %edx,%eax
c0027e90:	88 45 fb             	mov    %al,-0x5(%ebp)
c0027e93:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0027e97:	0f b6 90 80 db 03 c0 	movzbl -0x3ffc2480(%eax),%edx
c0027e9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027ea1:	88 10                	mov    %dl,(%eax)
c0027ea3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0027ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027eaa:	8d 50 ff             	lea    -0x1(%eax),%edx
c0027ead:	89 55 0c             	mov    %edx,0xc(%ebp)
c0027eb0:	85 c0                	test   %eax,%eax
c0027eb2:	0f 85 5d ff ff ff    	jne    c0027e15 <random_bytes+0x29>
c0027eb8:	90                   	nop
c0027eb9:	c9                   	leave  
c0027eba:	c3                   	ret    

c0027ebb <random_ulong>:
c0027ebb:	55                   	push   %ebp
c0027ebc:	89 e5                	mov    %esp,%ebp
c0027ebe:	83 ec 10             	sub    $0x10,%esp
c0027ec1:	6a 04                	push   $0x4
c0027ec3:	8d 45 fc             	lea    -0x4(%ebp),%eax
c0027ec6:	50                   	push   %eax
c0027ec7:	e8 20 ff ff ff       	call   c0027dec <random_bytes>
c0027ecc:	83 c4 08             	add    $0x8,%esp
c0027ecf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027ed2:	c9                   	leave  
c0027ed3:	c3                   	ret    

c0027ed4 <isdigit>:
c0027ed4:	55                   	push   %ebp
c0027ed5:	89 e5                	mov    %esp,%ebp
c0027ed7:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0027edb:	7e 0d                	jle    c0027eea <isdigit+0x16>
c0027edd:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0027ee1:	7f 07                	jg     c0027eea <isdigit+0x16>
c0027ee3:	b8 01 00 00 00       	mov    $0x1,%eax
c0027ee8:	eb 05                	jmp    c0027eef <isdigit+0x1b>
c0027eea:	b8 00 00 00 00       	mov    $0x0,%eax
c0027eef:	5d                   	pop    %ebp
c0027ef0:	c3                   	ret    

c0027ef1 <isprint>:
c0027ef1:	55                   	push   %ebp
c0027ef2:	89 e5                	mov    %esp,%ebp
c0027ef4:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0027ef8:	7e 0d                	jle    c0027f07 <isprint+0x16>
c0027efa:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c0027efe:	7f 07                	jg     c0027f07 <isprint+0x16>
c0027f00:	b8 01 00 00 00       	mov    $0x1,%eax
c0027f05:	eb 05                	jmp    c0027f0c <isprint+0x1b>
c0027f07:	b8 00 00 00 00       	mov    $0x0,%eax
c0027f0c:	5d                   	pop    %ebp
c0027f0d:	c3                   	ret    

c0027f0e <vsnprintf>:
c0027f0e:	55                   	push   %ebp
c0027f0f:	89 e5                	mov    %esp,%ebp
c0027f11:	83 ec 18             	sub    $0x18,%esp
c0027f14:	8b 45 08             	mov    0x8(%ebp),%eax
c0027f17:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0027f1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0027f21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0027f25:	74 08                	je     c0027f2f <vsnprintf+0x21>
c0027f27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027f2a:	83 e8 01             	sub    $0x1,%eax
c0027f2d:	eb 05                	jmp    c0027f34 <vsnprintf+0x26>
c0027f2f:	b8 00 00 00 00       	mov    $0x0,%eax
c0027f34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027f37:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0027f3a:	50                   	push   %eax
c0027f3b:	68 5f 7f 02 c0       	push   $0xc0027f5f
c0027f40:	ff 75 14             	pushl  0x14(%ebp)
c0027f43:	ff 75 10             	pushl  0x10(%ebp)
c0027f46:	e8 a4 00 00 00       	call   c0027fef <__vprintf>
c0027f4b:	83 c4 10             	add    $0x10,%esp
c0027f4e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0027f52:	74 06                	je     c0027f5a <vsnprintf+0x4c>
c0027f54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0027f57:	c6 00 00             	movb   $0x0,(%eax)
c0027f5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0027f5d:	c9                   	leave  
c0027f5e:	c3                   	ret    

c0027f5f <vsnprintf_helper>:
c0027f5f:	55                   	push   %ebp
c0027f60:	89 e5                	mov    %esp,%ebp
c0027f62:	83 ec 14             	sub    $0x14,%esp
c0027f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0027f68:	88 45 ec             	mov    %al,-0x14(%ebp)
c0027f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0027f6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0027f71:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027f74:	8b 40 04             	mov    0x4(%eax),%eax
c0027f77:	8d 48 01             	lea    0x1(%eax),%ecx
c0027f7a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0027f7d:	89 4a 04             	mov    %ecx,0x4(%edx)
c0027f80:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0027f83:	8b 52 08             	mov    0x8(%edx),%edx
c0027f86:	39 d0                	cmp    %edx,%eax
c0027f88:	7d 13                	jge    c0027f9d <vsnprintf_helper+0x3e>
c0027f8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0027f8d:	8b 00                	mov    (%eax),%eax
c0027f8f:	8d 48 01             	lea    0x1(%eax),%ecx
c0027f92:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0027f95:	89 0a                	mov    %ecx,(%edx)
c0027f97:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
c0027f9b:	88 10                	mov    %dl,(%eax)
c0027f9d:	90                   	nop
c0027f9e:	c9                   	leave  
c0027f9f:	c3                   	ret    

c0027fa0 <snprintf>:
c0027fa0:	55                   	push   %ebp
c0027fa1:	89 e5                	mov    %esp,%ebp
c0027fa3:	83 ec 18             	sub    $0x18,%esp
c0027fa6:	8d 45 14             	lea    0x14(%ebp),%eax
c0027fa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0027fac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0027faf:	50                   	push   %eax
c0027fb0:	ff 75 10             	pushl  0x10(%ebp)
c0027fb3:	ff 75 0c             	pushl  0xc(%ebp)
c0027fb6:	ff 75 08             	pushl  0x8(%ebp)
c0027fb9:	e8 50 ff ff ff       	call   c0027f0e <vsnprintf>
c0027fbe:	83 c4 10             	add    $0x10,%esp
c0027fc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027fc7:	c9                   	leave  
c0027fc8:	c3                   	ret    

c0027fc9 <printf>:
c0027fc9:	55                   	push   %ebp
c0027fca:	89 e5                	mov    %esp,%ebp
c0027fcc:	83 ec 18             	sub    $0x18,%esp
c0027fcf:	8d 45 0c             	lea    0xc(%ebp),%eax
c0027fd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0027fd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0027fd8:	83 ec 08             	sub    $0x8,%esp
c0027fdb:	50                   	push   %eax
c0027fdc:	ff 75 08             	pushl  0x8(%ebp)
c0027fdf:	e8 da 47 00 00       	call   c002c7be <vprintf>
c0027fe4:	83 c4 10             	add    $0x10,%esp
c0027fe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0027fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0027fed:	c9                   	leave  
c0027fee:	c3                   	ret    

c0027fef <__vprintf>:
c0027fef:	55                   	push   %ebp
c0027ff0:	89 e5                	mov    %esp,%ebp
c0027ff2:	57                   	push   %edi
c0027ff3:	56                   	push   %esi
c0027ff4:	53                   	push   %ebx
c0027ff5:	83 ec 3c             	sub    $0x3c,%esp
c0027ff8:	e9 45 04 00 00       	jmp    c0028442 <__vprintf+0x453>
c0027ffd:	8b 45 08             	mov    0x8(%ebp),%eax
c0028000:	0f b6 00             	movzbl (%eax),%eax
c0028003:	3c 25                	cmp    $0x25,%al
c0028005:	74 1d                	je     c0028024 <__vprintf+0x35>
c0028007:	8b 45 08             	mov    0x8(%ebp),%eax
c002800a:	0f b6 00             	movzbl (%eax),%eax
c002800d:	0f be c0             	movsbl %al,%eax
c0028010:	83 ec 08             	sub    $0x8,%esp
c0028013:	ff 75 14             	pushl  0x14(%ebp)
c0028016:	50                   	push   %eax
c0028017:	8b 45 10             	mov    0x10(%ebp),%eax
c002801a:	ff d0                	call   *%eax
c002801c:	83 c4 10             	add    $0x10,%esp
c002801f:	e9 1a 04 00 00       	jmp    c002843e <__vprintf+0x44f>
c0028024:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028028:	8b 45 08             	mov    0x8(%ebp),%eax
c002802b:	0f b6 00             	movzbl (%eax),%eax
c002802e:	3c 25                	cmp    $0x25,%al
c0028030:	75 15                	jne    c0028047 <__vprintf+0x58>
c0028032:	83 ec 08             	sub    $0x8,%esp
c0028035:	ff 75 14             	pushl  0x14(%ebp)
c0028038:	6a 25                	push   $0x25
c002803a:	8b 45 10             	mov    0x10(%ebp),%eax
c002803d:	ff d0                	call   *%eax
c002803f:	83 c4 10             	add    $0x10,%esp
c0028042:	e9 f7 03 00 00       	jmp    c002843e <__vprintf+0x44f>
c0028047:	83 ec 04             	sub    $0x4,%esp
c002804a:	8d 45 0c             	lea    0xc(%ebp),%eax
c002804d:	50                   	push   %eax
c002804e:	8d 45 bc             	lea    -0x44(%ebp),%eax
c0028051:	50                   	push   %eax
c0028052:	ff 75 08             	pushl  0x8(%ebp)
c0028055:	e8 ff 03 00 00       	call   c0028459 <parse_conversion>
c002805a:	83 c4 10             	add    $0x10,%esp
c002805d:	89 45 08             	mov    %eax,0x8(%ebp)
c0028060:	8b 45 08             	mov    0x8(%ebp),%eax
c0028063:	0f b6 00             	movzbl (%eax),%eax
c0028066:	0f be c0             	movsbl %al,%eax
c0028069:	83 e8 45             	sub    $0x45,%eax
c002806c:	83 f8 33             	cmp    $0x33,%eax
c002806f:	0f 87 ab 03 00 00    	ja     c0028420 <__vprintf+0x431>
c0028075:	8b 04 85 dc 49 03 c0 	mov    -0x3ffcb624(,%eax,4),%eax
c002807c:	ff e0                	jmp    *%eax
c002807e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0028081:	83 f8 08             	cmp    $0x8,%eax
c0028084:	0f 87 dd 00 00 00    	ja     c0028167 <__vprintf+0x178>
c002808a:	8b 04 85 ac 4a 03 c0 	mov    -0x3ffcb554(,%eax,4),%eax
c0028091:	ff e0                	jmp    *%eax
c0028093:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028096:	8d 50 04             	lea    0x4(%eax),%edx
c0028099:	89 55 0c             	mov    %edx,0xc(%ebp)
c002809c:	8b 00                	mov    (%eax),%eax
c002809e:	0f be c0             	movsbl %al,%eax
c00280a1:	99                   	cltd   
c00280a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00280a5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00280a8:	e9 d4 00 00 00       	jmp    c0028181 <__vprintf+0x192>
c00280ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c00280b0:	8d 50 04             	lea    0x4(%eax),%edx
c00280b3:	89 55 0c             	mov    %edx,0xc(%ebp)
c00280b6:	8b 00                	mov    (%eax),%eax
c00280b8:	98                   	cwtl   
c00280b9:	99                   	cltd   
c00280ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00280bd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00280c0:	e9 bc 00 00 00       	jmp    c0028181 <__vprintf+0x192>
c00280c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00280c8:	8d 50 04             	lea    0x4(%eax),%edx
c00280cb:	89 55 0c             	mov    %edx,0xc(%ebp)
c00280ce:	8b 00                	mov    (%eax),%eax
c00280d0:	99                   	cltd   
c00280d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00280d4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00280d7:	e9 a5 00 00 00       	jmp    c0028181 <__vprintf+0x192>
c00280dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c00280df:	8d 50 08             	lea    0x8(%eax),%edx
c00280e2:	89 55 0c             	mov    %edx,0xc(%ebp)
c00280e5:	8b 50 04             	mov    0x4(%eax),%edx
c00280e8:	8b 00                	mov    (%eax),%eax
c00280ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00280ed:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00280f0:	e9 8c 00 00 00       	jmp    c0028181 <__vprintf+0x192>
c00280f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00280f8:	8d 50 04             	lea    0x4(%eax),%edx
c00280fb:	89 55 0c             	mov    %edx,0xc(%ebp)
c00280fe:	8b 00                	mov    (%eax),%eax
c0028100:	99                   	cltd   
c0028101:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028104:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028107:	eb 78                	jmp    c0028181 <__vprintf+0x192>
c0028109:	8b 45 0c             	mov    0xc(%ebp),%eax
c002810c:	8d 50 08             	lea    0x8(%eax),%edx
c002810f:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028112:	8b 50 04             	mov    0x4(%eax),%edx
c0028115:	8b 00                	mov    (%eax),%eax
c0028117:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002811a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002811d:	eb 62                	jmp    c0028181 <__vprintf+0x192>
c002811f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028122:	8d 50 04             	lea    0x4(%eax),%edx
c0028125:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028128:	8b 00                	mov    (%eax),%eax
c002812a:	99                   	cltd   
c002812b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002812e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028131:	eb 4e                	jmp    c0028181 <__vprintf+0x192>
c0028133:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028136:	8d 50 04             	lea    0x4(%eax),%edx
c0028139:	89 55 0c             	mov    %edx,0xc(%ebp)
c002813c:	8b 00                	mov    (%eax),%eax
c002813e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028141:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0028148:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c002814c:	78 32                	js     c0028180 <__vprintf+0x191>
c002814e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0028152:	7f 09                	jg     c002815d <__vprintf+0x16e>
c0028154:	81 7d e0 ff ff ff 7f 	cmpl   $0x7fffffff,-0x20(%ebp)
c002815b:	76 23                	jbe    c0028180 <__vprintf+0x191>
c002815d:	83 45 e0 00          	addl   $0x0,-0x20(%ebp)
c0028161:	83 55 e4 ff          	adcl   $0xffffffff,-0x1c(%ebp)
c0028165:	eb 19                	jmp    c0028180 <__vprintf+0x191>
c0028167:	68 74 49 03 c0       	push   $0xc0034974
c002816c:	68 a8 4b 03 c0       	push   $0xc0034ba8
c0028171:	68 dc 00 00 00       	push   $0xdc
c0028176:	68 96 49 03 c0       	push   $0xc0034996
c002817b:	e8 aa 23 00 00       	call   c002a52a <debug_panic>
c0028180:	90                   	nop
c0028181:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0028184:	c1 e8 1f             	shr    $0x1f,%eax
c0028187:	0f b6 c8             	movzbl %al,%ecx
c002818a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002818d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0028190:	89 d2                	mov    %edx,%edx
c0028192:	c1 fa 1f             	sar    $0x1f,%edx
c0028195:	89 d0                	mov    %edx,%eax
c0028197:	89 c7                	mov    %eax,%edi
c0028199:	33 7d e0             	xor    -0x20(%ebp),%edi
c002819c:	89 fb                	mov    %edi,%ebx
c002819e:	89 d7                	mov    %edx,%edi
c00281a0:	33 7d e4             	xor    -0x1c(%ebp),%edi
c00281a3:	89 fe                	mov    %edi,%esi
c00281a5:	29 c3                	sub    %eax,%ebx
c00281a7:	19 d6                	sbb    %edx,%esi
c00281a9:	89 d8                	mov    %ebx,%eax
c00281ab:	89 f2                	mov    %esi,%edx
c00281ad:	ff 75 14             	pushl  0x14(%ebp)
c00281b0:	ff 75 10             	pushl  0x10(%ebp)
c00281b3:	8d 7d bc             	lea    -0x44(%ebp),%edi
c00281b6:	57                   	push   %edi
c00281b7:	68 00 49 03 c0       	push   $0xc0034900
c00281bc:	51                   	push   %ecx
c00281bd:	6a 01                	push   $0x1
c00281bf:	52                   	push   %edx
c00281c0:	50                   	push   %eax
c00281c1:	e8 5b 05 00 00       	call   c0028721 <format_integer>
c00281c6:	83 c4 20             	add    $0x20,%esp
c00281c9:	e9 70 02 00 00       	jmp    c002843e <__vprintf+0x44f>
c00281ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00281d1:	83 f8 08             	cmp    $0x8,%eax
c00281d4:	0f 87 d3 00 00 00    	ja     c00282ad <__vprintf+0x2be>
c00281da:	8b 04 85 d0 4a 03 c0 	mov    -0x3ffcb530(,%eax,4),%eax
c00281e1:	ff e0                	jmp    *%eax
c00281e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00281e6:	8d 50 04             	lea    0x4(%eax),%edx
c00281e9:	89 55 0c             	mov    %edx,0xc(%ebp)
c00281ec:	8b 00                	mov    (%eax),%eax
c00281ee:	0f b6 c0             	movzbl %al,%eax
c00281f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00281f4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c00281fb:	e9 c6 00 00 00       	jmp    c00282c6 <__vprintf+0x2d7>
c0028200:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028203:	8d 50 04             	lea    0x4(%eax),%edx
c0028206:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028209:	8b 00                	mov    (%eax),%eax
c002820b:	0f b7 c0             	movzwl %ax,%eax
c002820e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0028211:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0028218:	e9 a9 00 00 00       	jmp    c00282c6 <__vprintf+0x2d7>
c002821d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028220:	8d 50 04             	lea    0x4(%eax),%edx
c0028223:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028226:	8b 00                	mov    (%eax),%eax
c0028228:	89 45 d8             	mov    %eax,-0x28(%ebp)
c002822b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0028232:	e9 8f 00 00 00       	jmp    c00282c6 <__vprintf+0x2d7>
c0028237:	8b 45 0c             	mov    0xc(%ebp),%eax
c002823a:	8d 50 08             	lea    0x8(%eax),%edx
c002823d:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028240:	8b 50 04             	mov    0x4(%eax),%edx
c0028243:	8b 00                	mov    (%eax),%eax
c0028245:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0028248:	89 55 dc             	mov    %edx,-0x24(%ebp)
c002824b:	eb 79                	jmp    c00282c6 <__vprintf+0x2d7>
c002824d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028250:	8d 50 04             	lea    0x4(%eax),%edx
c0028253:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028256:	8b 00                	mov    (%eax),%eax
c0028258:	89 45 d8             	mov    %eax,-0x28(%ebp)
c002825b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0028262:	eb 62                	jmp    c00282c6 <__vprintf+0x2d7>
c0028264:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028267:	8d 50 08             	lea    0x8(%eax),%edx
c002826a:	89 55 0c             	mov    %edx,0xc(%ebp)
c002826d:	8b 50 04             	mov    0x4(%eax),%edx
c0028270:	8b 00                	mov    (%eax),%eax
c0028272:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0028275:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0028278:	eb 4c                	jmp    c00282c6 <__vprintf+0x2d7>
c002827a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002827d:	8d 50 04             	lea    0x4(%eax),%edx
c0028280:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028283:	8b 00                	mov    (%eax),%eax
c0028285:	99                   	cltd   
c0028286:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0028289:	89 55 dc             	mov    %edx,-0x24(%ebp)
c002828c:	83 65 d8 ff          	andl   $0xffffffff,-0x28(%ebp)
c0028290:	83 65 dc 00          	andl   $0x0,-0x24(%ebp)
c0028294:	eb 30                	jmp    c00282c6 <__vprintf+0x2d7>
c0028296:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028299:	8d 50 04             	lea    0x4(%eax),%edx
c002829c:	89 55 0c             	mov    %edx,0xc(%ebp)
c002829f:	8b 00                	mov    (%eax),%eax
c00282a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c00282a4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c00282ab:	eb 19                	jmp    c00282c6 <__vprintf+0x2d7>
c00282ad:	68 74 49 03 c0       	push   $0xc0034974
c00282b2:	68 a8 4b 03 c0       	push   $0xc0034ba8
c00282b7:	68 0b 01 00 00       	push   $0x10b
c00282bc:	68 96 49 03 c0       	push   $0xc0034996
c00282c1:	e8 64 22 00 00       	call   c002a52a <debug_panic>
c00282c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00282c9:	0f b6 00             	movzbl (%eax),%eax
c00282cc:	0f be c0             	movsbl %al,%eax
c00282cf:	83 f8 6f             	cmp    $0x6f,%eax
c00282d2:	74 18                	je     c00282ec <__vprintf+0x2fd>
c00282d4:	83 f8 6f             	cmp    $0x6f,%eax
c00282d7:	7f 07                	jg     c00282e0 <__vprintf+0x2f1>
c00282d9:	83 f8 58             	cmp    $0x58,%eax
c00282dc:	74 29                	je     c0028307 <__vprintf+0x318>
c00282de:	eb 30                	jmp    c0028310 <__vprintf+0x321>
c00282e0:	83 f8 75             	cmp    $0x75,%eax
c00282e3:	74 10                	je     c00282f5 <__vprintf+0x306>
c00282e5:	83 f8 78             	cmp    $0x78,%eax
c00282e8:	74 14                	je     c00282fe <__vprintf+0x30f>
c00282ea:	eb 24                	jmp    c0028310 <__vprintf+0x321>
c00282ec:	c7 45 d4 1c 49 03 c0 	movl   $0xc003491c,-0x2c(%ebp)
c00282f3:	eb 34                	jmp    c0028329 <__vprintf+0x33a>
c00282f5:	c7 45 d4 00 49 03 c0 	movl   $0xc0034900,-0x2c(%ebp)
c00282fc:	eb 2b                	jmp    c0028329 <__vprintf+0x33a>
c00282fe:	c7 45 d4 40 49 03 c0 	movl   $0xc0034940,-0x2c(%ebp)
c0028305:	eb 22                	jmp    c0028329 <__vprintf+0x33a>
c0028307:	c7 45 d4 64 49 03 c0 	movl   $0xc0034964,-0x2c(%ebp)
c002830e:	eb 19                	jmp    c0028329 <__vprintf+0x33a>
c0028310:	68 74 49 03 c0       	push   $0xc0034974
c0028315:	68 a8 4b 03 c0       	push   $0xc0034ba8
c002831a:	68 14 01 00 00       	push   $0x114
c002831f:	68 96 49 03 c0       	push   $0xc0034996
c0028324:	e8 01 22 00 00       	call   c002a52a <debug_panic>
c0028329:	ff 75 14             	pushl  0x14(%ebp)
c002832c:	ff 75 10             	pushl  0x10(%ebp)
c002832f:	8d 45 bc             	lea    -0x44(%ebp),%eax
c0028332:	50                   	push   %eax
c0028333:	ff 75 d4             	pushl  -0x2c(%ebp)
c0028336:	6a 00                	push   $0x0
c0028338:	6a 00                	push   $0x0
c002833a:	ff 75 dc             	pushl  -0x24(%ebp)
c002833d:	ff 75 d8             	pushl  -0x28(%ebp)
c0028340:	e8 dc 03 00 00       	call   c0028721 <format_integer>
c0028345:	83 c4 20             	add    $0x20,%esp
c0028348:	e9 f1 00 00 00       	jmp    c002843e <__vprintf+0x44f>
c002834d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028350:	8d 50 04             	lea    0x4(%eax),%edx
c0028353:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028356:	8b 00                	mov    (%eax),%eax
c0028358:	88 45 bb             	mov    %al,-0x45(%ebp)
c002835b:	83 ec 0c             	sub    $0xc,%esp
c002835e:	ff 75 14             	pushl  0x14(%ebp)
c0028361:	ff 75 10             	pushl  0x10(%ebp)
c0028364:	8d 45 bc             	lea    -0x44(%ebp),%eax
c0028367:	50                   	push   %eax
c0028368:	6a 01                	push   $0x1
c002836a:	8d 45 bb             	lea    -0x45(%ebp),%eax
c002836d:	50                   	push   %eax
c002836e:	e8 d0 06 00 00       	call   c0028a43 <format_string>
c0028373:	83 c4 20             	add    $0x20,%esp
c0028376:	e9 c3 00 00 00       	jmp    c002843e <__vprintf+0x44f>
c002837b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002837e:	8d 50 04             	lea    0x4(%eax),%edx
c0028381:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028384:	8b 00                	mov    (%eax),%eax
c0028386:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0028389:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c002838d:	75 07                	jne    c0028396 <__vprintf+0x3a7>
c002838f:	c7 45 d0 a8 49 03 c0 	movl   $0xc00349a8,-0x30(%ebp)
c0028396:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0028399:	83 ec 08             	sub    $0x8,%esp
c002839c:	50                   	push   %eax
c002839d:	ff 75 d0             	pushl  -0x30(%ebp)
c00283a0:	e8 f3 14 00 00       	call   c0029898 <strnlen>
c00283a5:	83 c4 10             	add    $0x10,%esp
c00283a8:	89 c2                	mov    %eax,%edx
c00283aa:	83 ec 0c             	sub    $0xc,%esp
c00283ad:	ff 75 14             	pushl  0x14(%ebp)
c00283b0:	ff 75 10             	pushl  0x10(%ebp)
c00283b3:	8d 45 bc             	lea    -0x44(%ebp),%eax
c00283b6:	50                   	push   %eax
c00283b7:	52                   	push   %edx
c00283b8:	ff 75 d0             	pushl  -0x30(%ebp)
c00283bb:	e8 83 06 00 00       	call   c0028a43 <format_string>
c00283c0:	83 c4 20             	add    $0x20,%esp
c00283c3:	eb 79                	jmp    c002843e <__vprintf+0x44f>
c00283c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00283c8:	8d 50 04             	lea    0x4(%eax),%edx
c00283cb:	89 55 0c             	mov    %edx,0xc(%ebp)
c00283ce:	8b 00                	mov    (%eax),%eax
c00283d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
c00283d3:	c7 45 bc 08 00 00 00 	movl   $0x8,-0x44(%ebp)
c00283da:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00283dd:	ba 00 00 00 00       	mov    $0x0,%edx
c00283e2:	ff 75 14             	pushl  0x14(%ebp)
c00283e5:	ff 75 10             	pushl  0x10(%ebp)
c00283e8:	8d 4d bc             	lea    -0x44(%ebp),%ecx
c00283eb:	51                   	push   %ecx
c00283ec:	68 40 49 03 c0       	push   $0xc0034940
c00283f1:	6a 00                	push   $0x0
c00283f3:	6a 00                	push   $0x0
c00283f5:	52                   	push   %edx
c00283f6:	50                   	push   %eax
c00283f7:	e8 25 03 00 00       	call   c0028721 <format_integer>
c00283fc:	83 c4 20             	add    $0x20,%esp
c00283ff:	eb 3d                	jmp    c002843e <__vprintf+0x44f>
c0028401:	8b 45 08             	mov    0x8(%ebp),%eax
c0028404:	0f b6 00             	movzbl (%eax),%eax
c0028407:	0f be c0             	movsbl %al,%eax
c002840a:	50                   	push   %eax
c002840b:	ff 75 14             	pushl  0x14(%ebp)
c002840e:	ff 75 10             	pushl  0x10(%ebp)
c0028411:	68 af 49 03 c0       	push   $0xc00349af
c0028416:	e8 c5 06 00 00       	call   c0028ae0 <__printf>
c002841b:	83 c4 10             	add    $0x10,%esp
c002841e:	eb 1e                	jmp    c002843e <__vprintf+0x44f>
c0028420:	8b 45 08             	mov    0x8(%ebp),%eax
c0028423:	0f b6 00             	movzbl (%eax),%eax
c0028426:	0f be c0             	movsbl %al,%eax
c0028429:	50                   	push   %eax
c002842a:	ff 75 14             	pushl  0x14(%ebp)
c002842d:	ff 75 10             	pushl  0x10(%ebp)
c0028430:	68 c5 49 03 c0       	push   $0xc00349c5
c0028435:	e8 a6 06 00 00       	call   c0028ae0 <__printf>
c002843a:	83 c4 10             	add    $0x10,%esp
c002843d:	90                   	nop
c002843e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028442:	8b 45 08             	mov    0x8(%ebp),%eax
c0028445:	0f b6 00             	movzbl (%eax),%eax
c0028448:	84 c0                	test   %al,%al
c002844a:	0f 85 ad fb ff ff    	jne    c0027ffd <__vprintf+0xe>
c0028450:	90                   	nop
c0028451:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0028454:	5b                   	pop    %ebx
c0028455:	5e                   	pop    %esi
c0028456:	5f                   	pop    %edi
c0028457:	5d                   	pop    %ebp
c0028458:	c3                   	ret    

c0028459 <parse_conversion>:
c0028459:	55                   	push   %ebp
c002845a:	89 e5                	mov    %esp,%ebp
c002845c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002845f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0028465:	8b 45 08             	mov    0x8(%ebp),%eax
c0028468:	8d 50 01             	lea    0x1(%eax),%edx
c002846b:	89 55 08             	mov    %edx,0x8(%ebp)
c002846e:	0f b6 00             	movzbl (%eax),%eax
c0028471:	0f be c0             	movsbl %al,%eax
c0028474:	83 e8 20             	sub    $0x20,%eax
c0028477:	83 f8 10             	cmp    $0x10,%eax
c002847a:	77 6f                	ja     c00284eb <parse_conversion+0x92>
c002847c:	8b 04 85 f4 4a 03 c0 	mov    -0x3ffcb50c(,%eax,4),%eax
c0028483:	ff e0                	jmp    *%eax
c0028485:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028488:	8b 00                	mov    (%eax),%eax
c002848a:	83 c8 01             	or     $0x1,%eax
c002848d:	89 c2                	mov    %eax,%edx
c002848f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028492:	89 10                	mov    %edx,(%eax)
c0028494:	eb 68                	jmp    c00284fe <parse_conversion+0xa5>
c0028496:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028499:	8b 00                	mov    (%eax),%eax
c002849b:	83 c8 02             	or     $0x2,%eax
c002849e:	89 c2                	mov    %eax,%edx
c00284a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284a3:	89 10                	mov    %edx,(%eax)
c00284a5:	eb 57                	jmp    c00284fe <parse_conversion+0xa5>
c00284a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284aa:	8b 00                	mov    (%eax),%eax
c00284ac:	83 c8 04             	or     $0x4,%eax
c00284af:	89 c2                	mov    %eax,%edx
c00284b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284b4:	89 10                	mov    %edx,(%eax)
c00284b6:	eb 46                	jmp    c00284fe <parse_conversion+0xa5>
c00284b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284bb:	8b 00                	mov    (%eax),%eax
c00284bd:	83 c8 08             	or     $0x8,%eax
c00284c0:	89 c2                	mov    %eax,%edx
c00284c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284c5:	89 10                	mov    %edx,(%eax)
c00284c7:	eb 35                	jmp    c00284fe <parse_conversion+0xa5>
c00284c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284cc:	8b 00                	mov    (%eax),%eax
c00284ce:	83 c8 10             	or     $0x10,%eax
c00284d1:	89 c2                	mov    %eax,%edx
c00284d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284d6:	89 10                	mov    %edx,(%eax)
c00284d8:	eb 24                	jmp    c00284fe <parse_conversion+0xa5>
c00284da:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284dd:	8b 00                	mov    (%eax),%eax
c00284df:	83 c8 20             	or     $0x20,%eax
c00284e2:	89 c2                	mov    %eax,%edx
c00284e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284e7:	89 10                	mov    %edx,(%eax)
c00284e9:	eb 13                	jmp    c00284fe <parse_conversion+0xa5>
c00284eb:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c00284ef:	90                   	nop
c00284f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c00284f3:	8b 00                	mov    (%eax),%eax
c00284f5:	83 e0 01             	and    $0x1,%eax
c00284f8:	85 c0                	test   %eax,%eax
c00284fa:	74 16                	je     c0028512 <parse_conversion+0xb9>
c00284fc:	eb 05                	jmp    c0028503 <parse_conversion+0xaa>
c00284fe:	e9 62 ff ff ff       	jmp    c0028465 <parse_conversion+0xc>
c0028503:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028506:	8b 00                	mov    (%eax),%eax
c0028508:	83 e0 ef             	and    $0xffffffef,%eax
c002850b:	89 c2                	mov    %eax,%edx
c002850d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028510:	89 10                	mov    %edx,(%eax)
c0028512:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028515:	8b 00                	mov    (%eax),%eax
c0028517:	83 e0 02             	and    $0x2,%eax
c002851a:	85 c0                	test   %eax,%eax
c002851c:	74 0f                	je     c002852d <parse_conversion+0xd4>
c002851e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028521:	8b 00                	mov    (%eax),%eax
c0028523:	83 e0 fb             	and    $0xfffffffb,%eax
c0028526:	89 c2                	mov    %eax,%edx
c0028528:	8b 45 0c             	mov    0xc(%ebp),%eax
c002852b:	89 10                	mov    %edx,(%eax)
c002852d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028530:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0028537:	8b 45 08             	mov    0x8(%ebp),%eax
c002853a:	0f b6 00             	movzbl (%eax),%eax
c002853d:	3c 2a                	cmp    $0x2a,%al
c002853f:	75 44                	jne    c0028585 <parse_conversion+0x12c>
c0028541:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028545:	8b 45 10             	mov    0x10(%ebp),%eax
c0028548:	8b 00                	mov    (%eax),%eax
c002854a:	8d 48 04             	lea    0x4(%eax),%ecx
c002854d:	8b 55 10             	mov    0x10(%ebp),%edx
c0028550:	89 0a                	mov    %ecx,(%edx)
c0028552:	8b 10                	mov    (%eax),%edx
c0028554:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028557:	89 50 04             	mov    %edx,0x4(%eax)
c002855a:	eb 3f                	jmp    c002859b <parse_conversion+0x142>
c002855c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002855f:	8b 50 04             	mov    0x4(%eax),%edx
c0028562:	89 d0                	mov    %edx,%eax
c0028564:	c1 e0 02             	shl    $0x2,%eax
c0028567:	01 d0                	add    %edx,%eax
c0028569:	01 c0                	add    %eax,%eax
c002856b:	89 c2                	mov    %eax,%edx
c002856d:	8b 45 08             	mov    0x8(%ebp),%eax
c0028570:	0f b6 00             	movzbl (%eax),%eax
c0028573:	0f be c0             	movsbl %al,%eax
c0028576:	01 d0                	add    %edx,%eax
c0028578:	8d 50 d0             	lea    -0x30(%eax),%edx
c002857b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002857e:	89 50 04             	mov    %edx,0x4(%eax)
c0028581:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028585:	8b 45 08             	mov    0x8(%ebp),%eax
c0028588:	0f b6 00             	movzbl (%eax),%eax
c002858b:	0f be c0             	movsbl %al,%eax
c002858e:	50                   	push   %eax
c002858f:	e8 40 f9 ff ff       	call   c0027ed4 <isdigit>
c0028594:	83 c4 04             	add    $0x4,%esp
c0028597:	85 c0                	test   %eax,%eax
c0028599:	75 c1                	jne    c002855c <parse_conversion+0x103>
c002859b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002859e:	8b 40 04             	mov    0x4(%eax),%eax
c00285a1:	85 c0                	test   %eax,%eax
c00285a3:	79 1f                	jns    c00285c4 <parse_conversion+0x16b>
c00285a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285a8:	8b 40 04             	mov    0x4(%eax),%eax
c00285ab:	f7 d8                	neg    %eax
c00285ad:	89 c2                	mov    %eax,%edx
c00285af:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285b2:	89 50 04             	mov    %edx,0x4(%eax)
c00285b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285b8:	8b 00                	mov    (%eax),%eax
c00285ba:	83 c8 01             	or     $0x1,%eax
c00285bd:	89 c2                	mov    %eax,%edx
c00285bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285c2:	89 10                	mov    %edx,(%eax)
c00285c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00285c7:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%eax)
c00285ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00285d1:	0f b6 00             	movzbl (%eax),%eax
c00285d4:	3c 2e                	cmp    $0x2e,%al
c00285d6:	0f 85 88 00 00 00    	jne    c0028664 <parse_conversion+0x20b>
c00285dc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00285e0:	8b 45 08             	mov    0x8(%ebp),%eax
c00285e3:	0f b6 00             	movzbl (%eax),%eax
c00285e6:	3c 2a                	cmp    $0x2a,%al
c00285e8:	75 1b                	jne    c0028605 <parse_conversion+0x1ac>
c00285ea:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00285ee:	8b 45 10             	mov    0x10(%ebp),%eax
c00285f1:	8b 00                	mov    (%eax),%eax
c00285f3:	8d 48 04             	lea    0x4(%eax),%ecx
c00285f6:	8b 55 10             	mov    0x10(%ebp),%edx
c00285f9:	89 0a                	mov    %ecx,(%edx)
c00285fb:	8b 10                	mov    (%eax),%edx
c00285fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028600:	89 50 08             	mov    %edx,0x8(%eax)
c0028603:	eb 4b                	jmp    c0028650 <parse_conversion+0x1f7>
c0028605:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028608:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c002860f:	eb 29                	jmp    c002863a <parse_conversion+0x1e1>
c0028611:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028614:	8b 50 08             	mov    0x8(%eax),%edx
c0028617:	89 d0                	mov    %edx,%eax
c0028619:	c1 e0 02             	shl    $0x2,%eax
c002861c:	01 d0                	add    %edx,%eax
c002861e:	01 c0                	add    %eax,%eax
c0028620:	89 c2                	mov    %eax,%edx
c0028622:	8b 45 08             	mov    0x8(%ebp),%eax
c0028625:	0f b6 00             	movzbl (%eax),%eax
c0028628:	0f be c0             	movsbl %al,%eax
c002862b:	01 d0                	add    %edx,%eax
c002862d:	8d 50 d0             	lea    -0x30(%eax),%edx
c0028630:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028633:	89 50 08             	mov    %edx,0x8(%eax)
c0028636:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c002863a:	8b 45 08             	mov    0x8(%ebp),%eax
c002863d:	0f b6 00             	movzbl (%eax),%eax
c0028640:	0f be c0             	movsbl %al,%eax
c0028643:	50                   	push   %eax
c0028644:	e8 8b f8 ff ff       	call   c0027ed4 <isdigit>
c0028649:	83 c4 04             	add    $0x4,%esp
c002864c:	85 c0                	test   %eax,%eax
c002864e:	75 c1                	jne    c0028611 <parse_conversion+0x1b8>
c0028650:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028653:	8b 40 08             	mov    0x8(%eax),%eax
c0028656:	85 c0                	test   %eax,%eax
c0028658:	79 0a                	jns    c0028664 <parse_conversion+0x20b>
c002865a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002865d:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%eax)
c0028664:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028667:	8b 40 08             	mov    0x8(%eax),%eax
c002866a:	85 c0                	test   %eax,%eax
c002866c:	78 0f                	js     c002867d <parse_conversion+0x224>
c002866e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028671:	8b 00                	mov    (%eax),%eax
c0028673:	83 e0 ef             	and    $0xffffffef,%eax
c0028676:	89 c2                	mov    %eax,%edx
c0028678:	8b 45 0c             	mov    0xc(%ebp),%eax
c002867b:	89 10                	mov    %edx,(%eax)
c002867d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028680:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
c0028687:	8b 45 08             	mov    0x8(%ebp),%eax
c002868a:	8d 50 01             	lea    0x1(%eax),%edx
c002868d:	89 55 08             	mov    %edx,0x8(%ebp)
c0028690:	0f b6 00             	movzbl (%eax),%eax
c0028693:	0f be c0             	movsbl %al,%eax
c0028696:	83 e8 68             	sub    $0x68,%eax
c0028699:	83 f8 12             	cmp    $0x12,%eax
c002869c:	77 79                	ja     c0028717 <parse_conversion+0x2be>
c002869e:	8b 04 85 38 4b 03 c0 	mov    -0x3ffcb4c8(,%eax,4),%eax
c00286a5:	ff e0                	jmp    *%eax
c00286a7:	8b 45 08             	mov    0x8(%ebp),%eax
c00286aa:	0f b6 00             	movzbl (%eax),%eax
c00286ad:	3c 68                	cmp    $0x68,%al
c00286af:	75 10                	jne    c00286c1 <parse_conversion+0x268>
c00286b1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00286b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286b8:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
c00286bf:	eb 5b                	jmp    c002871c <parse_conversion+0x2c3>
c00286c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286c4:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
c00286cb:	eb 4f                	jmp    c002871c <parse_conversion+0x2c3>
c00286cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286d0:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
c00286d7:	eb 43                	jmp    c002871c <parse_conversion+0x2c3>
c00286d9:	8b 45 08             	mov    0x8(%ebp),%eax
c00286dc:	0f b6 00             	movzbl (%eax),%eax
c00286df:	3c 6c                	cmp    $0x6c,%al
c00286e1:	75 10                	jne    c00286f3 <parse_conversion+0x29a>
c00286e3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00286e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286ea:	c7 40 0c 06 00 00 00 	movl   $0x6,0xc(%eax)
c00286f1:	eb 29                	jmp    c002871c <parse_conversion+0x2c3>
c00286f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00286f6:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
c00286fd:	eb 1d                	jmp    c002871c <parse_conversion+0x2c3>
c00286ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028702:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
c0028709:	eb 11                	jmp    c002871c <parse_conversion+0x2c3>
c002870b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002870e:	c7 40 0c 08 00 00 00 	movl   $0x8,0xc(%eax)
c0028715:	eb 05                	jmp    c002871c <parse_conversion+0x2c3>
c0028717:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c002871b:	90                   	nop
c002871c:	8b 45 08             	mov    0x8(%ebp),%eax
c002871f:	c9                   	leave  
c0028720:	c3                   	ret    

c0028721 <format_integer>:
c0028721:	55                   	push   %ebp
c0028722:	89 e5                	mov    %esp,%ebp
c0028724:	57                   	push   %edi
c0028725:	56                   	push   %esi
c0028726:	53                   	push   %ebx
c0028727:	83 ec 7c             	sub    $0x7c,%esp
c002872a:	8b 55 10             	mov    0x10(%ebp),%edx
c002872d:	8b 45 14             	mov    0x14(%ebp),%eax
c0028730:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0028733:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c0028736:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0028739:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c002873c:	88 95 7c ff ff ff    	mov    %dl,-0x84(%ebp)
c0028742:	88 85 78 ff ff ff    	mov    %al,-0x88(%ebp)
c0028748:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c002874f:	80 bd 7c ff ff ff 00 	cmpb   $0x0,-0x84(%ebp)
c0028756:	74 5c                	je     c00287b4 <format_integer+0x93>
c0028758:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002875b:	8b 00                	mov    (%eax),%eax
c002875d:	83 e0 02             	and    $0x2,%eax
c0028760:	85 c0                	test   %eax,%eax
c0028762:	74 1a                	je     c002877e <format_integer+0x5d>
c0028764:	80 bd 78 ff ff ff 00 	cmpb   $0x0,-0x88(%ebp)
c002876b:	74 07                	je     c0028774 <format_integer+0x53>
c002876d:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0028772:	eb 05                	jmp    c0028779 <format_integer+0x58>
c0028774:	b8 2b 00 00 00       	mov    $0x2b,%eax
c0028779:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002877c:	eb 36                	jmp    c00287b4 <format_integer+0x93>
c002877e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0028781:	8b 00                	mov    (%eax),%eax
c0028783:	83 e0 04             	and    $0x4,%eax
c0028786:	85 c0                	test   %eax,%eax
c0028788:	74 1a                	je     c00287a4 <format_integer+0x83>
c002878a:	80 bd 78 ff ff ff 00 	cmpb   $0x0,-0x88(%ebp)
c0028791:	74 07                	je     c002879a <format_integer+0x79>
c0028793:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0028798:	eb 05                	jmp    c002879f <format_integer+0x7e>
c002879a:	b8 20 00 00 00       	mov    $0x20,%eax
c002879f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00287a2:	eb 10                	jmp    c00287b4 <format_integer+0x93>
c00287a4:	80 bd 78 ff ff ff 00 	cmpb   $0x0,-0x88(%ebp)
c00287ab:	74 07                	je     c00287b4 <format_integer+0x93>
c00287ad:	c7 45 e0 2d 00 00 00 	movl   $0x2d,-0x20(%ebp)
c00287b4:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00287b7:	8b 00                	mov    (%eax),%eax
c00287b9:	83 e0 08             	and    $0x8,%eax
c00287bc:	85 c0                	test   %eax,%eax
c00287be:	74 12                	je     c00287d2 <format_integer+0xb1>
c00287c0:	8b 45 84             	mov    -0x7c(%ebp),%eax
c00287c3:	0b 45 80             	or     -0x80(%ebp),%eax
c00287c6:	85 c0                	test   %eax,%eax
c00287c8:	74 08                	je     c00287d2 <format_integer+0xb1>
c00287ca:	8b 45 18             	mov    0x18(%ebp),%eax
c00287cd:	8b 40 08             	mov    0x8(%eax),%eax
c00287d0:	eb 05                	jmp    c00287d7 <format_integer+0xb6>
c00287d2:	b8 00 00 00 00       	mov    $0x0,%eax
c00287d7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c00287da:	8d 45 90             	lea    -0x70(%ebp),%eax
c00287dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00287e0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c00287e7:	e9 84 00 00 00       	jmp    c0028870 <format_integer+0x14f>
c00287ec:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00287ef:	8b 00                	mov    (%eax),%eax
c00287f1:	83 e0 20             	and    $0x20,%eax
c00287f4:	85 c0                	test   %eax,%eax
c00287f6:	74 24                	je     c002881c <format_integer+0xfb>
c00287f8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c00287fc:	7e 1e                	jle    c002881c <format_integer+0xfb>
c00287fe:	8b 45 18             	mov    0x18(%ebp),%eax
c0028801:	8b 48 0c             	mov    0xc(%eax),%ecx
c0028804:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0028807:	99                   	cltd   
c0028808:	f7 f9                	idiv   %ecx
c002880a:	89 d0                	mov    %edx,%eax
c002880c:	85 c0                	test   %eax,%eax
c002880e:	75 0c                	jne    c002881c <format_integer+0xfb>
c0028810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0028813:	8d 50 01             	lea    0x1(%eax),%edx
c0028816:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028819:	c6 00 2c             	movb   $0x2c,(%eax)
c002881c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c002881f:	8d 46 01             	lea    0x1(%esi),%eax
c0028822:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0028825:	8b 45 18             	mov    0x18(%ebp),%eax
c0028828:	8b 78 04             	mov    0x4(%eax),%edi
c002882b:	8b 45 18             	mov    0x18(%ebp),%eax
c002882e:	8b 00                	mov    (%eax),%eax
c0028830:	89 c1                	mov    %eax,%ecx
c0028832:	89 c3                	mov    %eax,%ebx
c0028834:	c1 fb 1f             	sar    $0x1f,%ebx
c0028837:	8b 45 80             	mov    -0x80(%ebp),%eax
c002883a:	8b 55 84             	mov    -0x7c(%ebp),%edx
c002883d:	53                   	push   %ebx
c002883e:	51                   	push   %ecx
c002883f:	52                   	push   %edx
c0028840:	50                   	push   %eax
c0028841:	e8 2d 16 00 00       	call   c0029e73 <__umoddi3>
c0028846:	83 c4 10             	add    $0x10,%esp
c0028849:	01 f8                	add    %edi,%eax
c002884b:	0f b6 00             	movzbl (%eax),%eax
c002884e:	88 06                	mov    %al,(%esi)
c0028850:	8b 45 18             	mov    0x18(%ebp),%eax
c0028853:	8b 00                	mov    (%eax),%eax
c0028855:	99                   	cltd   
c0028856:	52                   	push   %edx
c0028857:	50                   	push   %eax
c0028858:	ff 75 84             	pushl  -0x7c(%ebp)
c002885b:	ff 75 80             	pushl  -0x80(%ebp)
c002885e:	e8 dc 15 00 00       	call   c0029e3f <__udivdi3>
c0028863:	83 c4 10             	add    $0x10,%esp
c0028866:	89 45 80             	mov    %eax,-0x80(%ebp)
c0028869:	89 55 84             	mov    %edx,-0x7c(%ebp)
c002886c:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
c0028870:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0028873:	0b 45 80             	or     -0x80(%ebp),%eax
c0028876:	85 c0                	test   %eax,%eax
c0028878:	0f 85 6e ff ff ff    	jne    c00287ec <format_integer+0xcb>
c002887e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0028881:	8b 40 08             	mov    0x8(%eax),%eax
c0028884:	85 c0                	test   %eax,%eax
c0028886:	78 08                	js     c0028890 <format_integer+0x16f>
c0028888:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002888b:	8b 40 08             	mov    0x8(%eax),%eax
c002888e:	eb 05                	jmp    c0028895 <format_integer+0x174>
c0028890:	b8 01 00 00 00       	mov    $0x1,%eax
c0028895:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0028898:	eb 0c                	jmp    c00288a6 <format_integer+0x185>
c002889a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002889d:	8d 50 01             	lea    0x1(%eax),%edx
c00288a0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00288a3:	c6 00 30             	movb   $0x30,(%eax)
c00288a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00288a9:	8d 45 90             	lea    -0x70(%ebp),%eax
c00288ac:	29 c2                	sub    %eax,%edx
c00288ae:	89 d0                	mov    %edx,%eax
c00288b0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c00288b3:	7d 0b                	jge    c00288c0 <format_integer+0x19f>
c00288b5:	8d 45 90             	lea    -0x70(%ebp),%eax
c00288b8:	83 c0 3f             	add    $0x3f,%eax
c00288bb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c00288be:	77 da                	ja     c002889a <format_integer+0x179>
c00288c0:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00288c3:	8b 00                	mov    (%eax),%eax
c00288c5:	83 e0 08             	and    $0x8,%eax
c00288c8:	85 c0                	test   %eax,%eax
c00288ca:	74 2b                	je     c00288f7 <format_integer+0x1d6>
c00288cc:	8b 45 18             	mov    0x18(%ebp),%eax
c00288cf:	8b 00                	mov    (%eax),%eax
c00288d1:	83 f8 08             	cmp    $0x8,%eax
c00288d4:	75 21                	jne    c00288f7 <format_integer+0x1d6>
c00288d6:	8d 45 90             	lea    -0x70(%ebp),%eax
c00288d9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c00288dc:	74 0d                	je     c00288eb <format_integer+0x1ca>
c00288de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00288e1:	83 e8 01             	sub    $0x1,%eax
c00288e4:	0f b6 00             	movzbl (%eax),%eax
c00288e7:	3c 30                	cmp    $0x30,%al
c00288e9:	74 0c                	je     c00288f7 <format_integer+0x1d6>
c00288eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00288ee:	8d 50 01             	lea    0x1(%eax),%edx
c00288f1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00288f4:	c6 00 30             	movb   $0x30,(%eax)
c00288f7:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00288fa:	8b 40 04             	mov    0x4(%eax),%eax
c00288fd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0028900:	8d 55 90             	lea    -0x70(%ebp),%edx
c0028903:	29 d1                	sub    %edx,%ecx
c0028905:	89 ca                	mov    %ecx,%edx
c0028907:	29 d0                	sub    %edx,%eax
c0028909:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c002890d:	74 07                	je     c0028916 <format_integer+0x1f5>
c002890f:	ba 02 00 00 00       	mov    $0x2,%edx
c0028914:	eb 05                	jmp    c002891b <format_integer+0x1fa>
c0028916:	ba 00 00 00 00       	mov    $0x0,%edx
c002891b:	29 d0                	sub    %edx,%eax
c002891d:	89 c2                	mov    %eax,%edx
c002891f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0028923:	0f 95 c0             	setne  %al
c0028926:	0f b6 c0             	movzbl %al,%eax
c0028929:	29 c2                	sub    %eax,%edx
c002892b:	89 d0                	mov    %edx,%eax
c002892d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0028930:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0028934:	79 07                	jns    c002893d <format_integer+0x21c>
c0028936:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c002893d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0028940:	8b 00                	mov    (%eax),%eax
c0028942:	83 e0 11             	and    $0x11,%eax
c0028945:	85 c0                	test   %eax,%eax
c0028947:	75 14                	jne    c002895d <format_integer+0x23c>
c0028949:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002894c:	ff 75 24             	pushl  0x24(%ebp)
c002894f:	ff 75 20             	pushl  0x20(%ebp)
c0028952:	50                   	push   %eax
c0028953:	6a 20                	push   $0x20
c0028955:	e8 b8 00 00 00       	call   c0028a12 <output_dup>
c002895a:	83 c4 10             	add    $0x10,%esp
c002895d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0028961:	74 15                	je     c0028978 <format_integer+0x257>
c0028963:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028966:	0f be c0             	movsbl %al,%eax
c0028969:	83 ec 08             	sub    $0x8,%esp
c002896c:	ff 75 24             	pushl  0x24(%ebp)
c002896f:	50                   	push   %eax
c0028970:	8b 45 20             	mov    0x20(%ebp),%eax
c0028973:	ff d0                	call   *%eax
c0028975:	83 c4 10             	add    $0x10,%esp
c0028978:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c002897c:	74 25                	je     c00289a3 <format_integer+0x282>
c002897e:	83 ec 08             	sub    $0x8,%esp
c0028981:	ff 75 24             	pushl  0x24(%ebp)
c0028984:	6a 30                	push   $0x30
c0028986:	8b 45 20             	mov    0x20(%ebp),%eax
c0028989:	ff d0                	call   *%eax
c002898b:	83 c4 10             	add    $0x10,%esp
c002898e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0028991:	0f be c0             	movsbl %al,%eax
c0028994:	83 ec 08             	sub    $0x8,%esp
c0028997:	ff 75 24             	pushl  0x24(%ebp)
c002899a:	50                   	push   %eax
c002899b:	8b 45 20             	mov    0x20(%ebp),%eax
c002899e:	ff d0                	call   *%eax
c00289a0:	83 c4 10             	add    $0x10,%esp
c00289a3:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00289a6:	8b 00                	mov    (%eax),%eax
c00289a8:	83 e0 10             	and    $0x10,%eax
c00289ab:	85 c0                	test   %eax,%eax
c00289ad:	74 32                	je     c00289e1 <format_integer+0x2c0>
c00289af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00289b2:	ff 75 24             	pushl  0x24(%ebp)
c00289b5:	ff 75 20             	pushl  0x20(%ebp)
c00289b8:	50                   	push   %eax
c00289b9:	6a 30                	push   $0x30
c00289bb:	e8 52 00 00 00       	call   c0028a12 <output_dup>
c00289c0:	83 c4 10             	add    $0x10,%esp
c00289c3:	eb 1c                	jmp    c00289e1 <format_integer+0x2c0>
c00289c5:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c00289c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00289cc:	0f b6 00             	movzbl (%eax),%eax
c00289cf:	0f be c0             	movsbl %al,%eax
c00289d2:	83 ec 08             	sub    $0x8,%esp
c00289d5:	ff 75 24             	pushl  0x24(%ebp)
c00289d8:	50                   	push   %eax
c00289d9:	8b 45 20             	mov    0x20(%ebp),%eax
c00289dc:	ff d0                	call   *%eax
c00289de:	83 c4 10             	add    $0x10,%esp
c00289e1:	8d 45 90             	lea    -0x70(%ebp),%eax
c00289e4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c00289e7:	77 dc                	ja     c00289c5 <format_integer+0x2a4>
c00289e9:	8b 45 1c             	mov    0x1c(%ebp),%eax
c00289ec:	8b 00                	mov    (%eax),%eax
c00289ee:	83 e0 01             	and    $0x1,%eax
c00289f1:	85 c0                	test   %eax,%eax
c00289f3:	74 14                	je     c0028a09 <format_integer+0x2e8>
c00289f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00289f8:	ff 75 24             	pushl  0x24(%ebp)
c00289fb:	ff 75 20             	pushl  0x20(%ebp)
c00289fe:	50                   	push   %eax
c00289ff:	6a 20                	push   $0x20
c0028a01:	e8 0c 00 00 00       	call   c0028a12 <output_dup>
c0028a06:	83 c4 10             	add    $0x10,%esp
c0028a09:	90                   	nop
c0028a0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0028a0d:	5b                   	pop    %ebx
c0028a0e:	5e                   	pop    %esi
c0028a0f:	5f                   	pop    %edi
c0028a10:	5d                   	pop    %ebp
c0028a11:	c3                   	ret    

c0028a12 <output_dup>:
c0028a12:	55                   	push   %ebp
c0028a13:	89 e5                	mov    %esp,%ebp
c0028a15:	83 ec 18             	sub    $0x18,%esp
c0028a18:	8b 45 08             	mov    0x8(%ebp),%eax
c0028a1b:	88 45 f4             	mov    %al,-0xc(%ebp)
c0028a1e:	eb 13                	jmp    c0028a33 <output_dup+0x21>
c0028a20:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
c0028a24:	83 ec 08             	sub    $0x8,%esp
c0028a27:	ff 75 14             	pushl  0x14(%ebp)
c0028a2a:	50                   	push   %eax
c0028a2b:	8b 45 10             	mov    0x10(%ebp),%eax
c0028a2e:	ff d0                	call   *%eax
c0028a30:	83 c4 10             	add    $0x10,%esp
c0028a33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028a36:	8d 50 ff             	lea    -0x1(%eax),%edx
c0028a39:	89 55 0c             	mov    %edx,0xc(%ebp)
c0028a3c:	85 c0                	test   %eax,%eax
c0028a3e:	75 e0                	jne    c0028a20 <output_dup+0xe>
c0028a40:	90                   	nop
c0028a41:	c9                   	leave  
c0028a42:	c3                   	ret    

c0028a43 <format_string>:
c0028a43:	55                   	push   %ebp
c0028a44:	89 e5                	mov    %esp,%ebp
c0028a46:	83 ec 18             	sub    $0x18,%esp
c0028a49:	8b 45 10             	mov    0x10(%ebp),%eax
c0028a4c:	8b 40 04             	mov    0x4(%eax),%eax
c0028a4f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0028a52:	7e 26                	jle    c0028a7a <format_string+0x37>
c0028a54:	8b 45 10             	mov    0x10(%ebp),%eax
c0028a57:	8b 00                	mov    (%eax),%eax
c0028a59:	83 e0 01             	and    $0x1,%eax
c0028a5c:	85 c0                	test   %eax,%eax
c0028a5e:	75 1a                	jne    c0028a7a <format_string+0x37>
c0028a60:	8b 45 10             	mov    0x10(%ebp),%eax
c0028a63:	8b 40 04             	mov    0x4(%eax),%eax
c0028a66:	2b 45 0c             	sub    0xc(%ebp),%eax
c0028a69:	ff 75 18             	pushl  0x18(%ebp)
c0028a6c:	ff 75 14             	pushl  0x14(%ebp)
c0028a6f:	50                   	push   %eax
c0028a70:	6a 20                	push   $0x20
c0028a72:	e8 9b ff ff ff       	call   c0028a12 <output_dup>
c0028a77:	83 c4 10             	add    $0x10,%esp
c0028a7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0028a81:	eb 21                	jmp    c0028aa4 <format_string+0x61>
c0028a83:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0028a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0028a89:	01 d0                	add    %edx,%eax
c0028a8b:	0f b6 00             	movzbl (%eax),%eax
c0028a8e:	0f be c0             	movsbl %al,%eax
c0028a91:	83 ec 08             	sub    $0x8,%esp
c0028a94:	ff 75 18             	pushl  0x18(%ebp)
c0028a97:	50                   	push   %eax
c0028a98:	8b 45 14             	mov    0x14(%ebp),%eax
c0028a9b:	ff d0                	call   *%eax
c0028a9d:	83 c4 10             	add    $0x10,%esp
c0028aa0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0028aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028aa7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0028aaa:	7c d7                	jl     c0028a83 <format_string+0x40>
c0028aac:	8b 45 10             	mov    0x10(%ebp),%eax
c0028aaf:	8b 40 04             	mov    0x4(%eax),%eax
c0028ab2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0028ab5:	7e 26                	jle    c0028add <format_string+0x9a>
c0028ab7:	8b 45 10             	mov    0x10(%ebp),%eax
c0028aba:	8b 00                	mov    (%eax),%eax
c0028abc:	83 e0 01             	and    $0x1,%eax
c0028abf:	85 c0                	test   %eax,%eax
c0028ac1:	74 1a                	je     c0028add <format_string+0x9a>
c0028ac3:	8b 45 10             	mov    0x10(%ebp),%eax
c0028ac6:	8b 40 04             	mov    0x4(%eax),%eax
c0028ac9:	2b 45 0c             	sub    0xc(%ebp),%eax
c0028acc:	ff 75 18             	pushl  0x18(%ebp)
c0028acf:	ff 75 14             	pushl  0x14(%ebp)
c0028ad2:	50                   	push   %eax
c0028ad3:	6a 20                	push   $0x20
c0028ad5:	e8 38 ff ff ff       	call   c0028a12 <output_dup>
c0028ada:	83 c4 10             	add    $0x10,%esp
c0028add:	90                   	nop
c0028ade:	c9                   	leave  
c0028adf:	c3                   	ret    

c0028ae0 <__printf>:
c0028ae0:	55                   	push   %ebp
c0028ae1:	89 e5                	mov    %esp,%ebp
c0028ae3:	83 ec 18             	sub    $0x18,%esp
c0028ae6:	8d 45 14             	lea    0x14(%ebp),%eax
c0028ae9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028aef:	ff 75 10             	pushl  0x10(%ebp)
c0028af2:	ff 75 0c             	pushl  0xc(%ebp)
c0028af5:	50                   	push   %eax
c0028af6:	ff 75 08             	pushl  0x8(%ebp)
c0028af9:	e8 f1 f4 ff ff       	call   c0027fef <__vprintf>
c0028afe:	83 c4 10             	add    $0x10,%esp
c0028b01:	90                   	nop
c0028b02:	c9                   	leave  
c0028b03:	c3                   	ret    

c0028b04 <hex_dump>:
c0028b04:	55                   	push   %ebp
c0028b05:	89 e5                	mov    %esp,%ebp
c0028b07:	83 ec 38             	sub    $0x38,%esp
c0028b0a:	8b 45 14             	mov    0x14(%ebp),%eax
c0028b0d:	88 45 d4             	mov    %al,-0x2c(%ebp)
c0028b10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028b13:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028b16:	c7 45 e8 10 00 00 00 	movl   $0x10,-0x18(%ebp)
c0028b1d:	e9 bf 01 00 00       	jmp    c0028ce1 <hex_dump+0x1dd>
c0028b22:	8b 45 08             	mov    0x8(%ebp),%eax
c0028b25:	ba 00 00 00 00       	mov    $0x0,%edx
c0028b2a:	f7 75 e8             	divl   -0x18(%ebp)
c0028b2d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028b30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0028b33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028b36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028b39:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028b3c:	3b 45 10             	cmp    0x10(%ebp),%eax
c0028b3f:	76 0b                	jbe    c0028b4c <hex_dump+0x48>
c0028b41:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0028b44:	8b 45 10             	mov    0x10(%ebp),%eax
c0028b47:	01 d0                	add    %edx,%eax
c0028b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028b4f:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028b52:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028b55:	8b 45 08             	mov    0x8(%ebp),%eax
c0028b58:	ba 00 00 00 00       	mov    $0x0,%edx
c0028b5d:	f7 75 e8             	divl   -0x18(%ebp)
c0028b60:	0f af 45 e8          	imul   -0x18(%ebp),%eax
c0028b64:	ba 00 00 00 00       	mov    $0x0,%edx
c0028b69:	83 ec 04             	sub    $0x4,%esp
c0028b6c:	52                   	push   %edx
c0028b6d:	50                   	push   %eax
c0028b6e:	68 84 4b 03 c0       	push   $0xc0034b84
c0028b73:	e8 51 f4 ff ff       	call   c0027fc9 <printf>
c0028b78:	83 c4 10             	add    $0x10,%esp
c0028b7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0028b82:	eb 14                	jmp    c0028b98 <hex_dump+0x94>
c0028b84:	83 ec 0c             	sub    $0xc,%esp
c0028b87:	68 8c 4b 03 c0       	push   $0xc0034b8c
c0028b8c:	e8 38 f4 ff ff       	call   c0027fc9 <printf>
c0028b91:	83 c4 10             	add    $0x10,%esp
c0028b94:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028b98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028b9b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0028b9e:	72 e4                	jb     c0028b84 <hex_dump+0x80>
c0028ba0:	eb 42                	jmp    c0028be4 <hex_dump+0xe0>
c0028ba2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0028ba5:	d1 e8                	shr    %eax
c0028ba7:	83 e8 01             	sub    $0x1,%eax
c0028baa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0028bad:	75 07                	jne    c0028bb6 <hex_dump+0xb2>
c0028baf:	b9 2d 00 00 00       	mov    $0x2d,%ecx
c0028bb4:	eb 05                	jmp    c0028bbb <hex_dump+0xb7>
c0028bb6:	b9 20 00 00 00       	mov    $0x20,%ecx
c0028bbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028bbe:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028bc1:	89 c2                	mov    %eax,%edx
c0028bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028bc6:	01 d0                	add    %edx,%eax
c0028bc8:	0f b6 00             	movzbl (%eax),%eax
c0028bcb:	0f b6 c0             	movzbl %al,%eax
c0028bce:	83 ec 04             	sub    $0x4,%esp
c0028bd1:	51                   	push   %ecx
c0028bd2:	50                   	push   %eax
c0028bd3:	68 90 4b 03 c0       	push   $0xc0034b90
c0028bd8:	e8 ec f3 ff ff       	call   c0027fc9 <printf>
c0028bdd:	83 c4 10             	add    $0x10,%esp
c0028be0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028be4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028be7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0028bea:	72 b6                	jb     c0028ba2 <hex_dump+0x9e>
c0028bec:	80 7d d4 00          	cmpb   $0x0,-0x2c(%ebp)
c0028bf0:	0f 84 cc 00 00 00    	je     c0028cc2 <hex_dump+0x1be>
c0028bf6:	eb 14                	jmp    c0028c0c <hex_dump+0x108>
c0028bf8:	83 ec 0c             	sub    $0xc,%esp
c0028bfb:	68 8c 4b 03 c0       	push   $0xc0034b8c
c0028c00:	e8 c4 f3 ff ff       	call   c0027fc9 <printf>
c0028c05:	83 c4 10             	add    $0x10,%esp
c0028c08:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028c0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c0f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0028c12:	72 e4                	jb     c0028bf8 <hex_dump+0xf4>
c0028c14:	83 ec 0c             	sub    $0xc,%esp
c0028c17:	6a 7c                	push   $0x7c
c0028c19:	e8 5b 3c 00 00       	call   c002c879 <putchar>
c0028c1e:	83 c4 10             	add    $0x10,%esp
c0028c21:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0028c28:	eb 11                	jmp    c0028c3b <hex_dump+0x137>
c0028c2a:	83 ec 0c             	sub    $0xc,%esp
c0028c2d:	6a 20                	push   $0x20
c0028c2f:	e8 45 3c 00 00       	call   c002c879 <putchar>
c0028c34:	83 c4 10             	add    $0x10,%esp
c0028c37:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028c3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c3e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0028c41:	72 e7                	jb     c0028c2a <hex_dump+0x126>
c0028c43:	eb 4d                	jmp    c0028c92 <hex_dump+0x18e>
c0028c45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c48:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028c4b:	89 c2                	mov    %eax,%edx
c0028c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028c50:	01 d0                	add    %edx,%eax
c0028c52:	0f b6 00             	movzbl (%eax),%eax
c0028c55:	0f b6 c0             	movzbl %al,%eax
c0028c58:	83 ec 0c             	sub    $0xc,%esp
c0028c5b:	50                   	push   %eax
c0028c5c:	e8 90 f2 ff ff       	call   c0027ef1 <isprint>
c0028c61:	83 c4 10             	add    $0x10,%esp
c0028c64:	85 c0                	test   %eax,%eax
c0028c66:	74 15                	je     c0028c7d <hex_dump+0x179>
c0028c68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c6b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0028c6e:	89 c2                	mov    %eax,%edx
c0028c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028c73:	01 d0                	add    %edx,%eax
c0028c75:	0f b6 00             	movzbl (%eax),%eax
c0028c78:	0f b6 c0             	movzbl %al,%eax
c0028c7b:	eb 05                	jmp    c0028c82 <hex_dump+0x17e>
c0028c7d:	b8 2e 00 00 00       	mov    $0x2e,%eax
c0028c82:	83 ec 0c             	sub    $0xc,%esp
c0028c85:	50                   	push   %eax
c0028c86:	e8 ee 3b 00 00       	call   c002c879 <putchar>
c0028c8b:	83 c4 10             	add    $0x10,%esp
c0028c8e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028c92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028c95:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0028c98:	72 ab                	jb     c0028c45 <hex_dump+0x141>
c0028c9a:	eb 11                	jmp    c0028cad <hex_dump+0x1a9>
c0028c9c:	83 ec 0c             	sub    $0xc,%esp
c0028c9f:	6a 20                	push   $0x20
c0028ca1:	e8 d3 3b 00 00       	call   c002c879 <putchar>
c0028ca6:	83 c4 10             	add    $0x10,%esp
c0028ca9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0028cad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028cb0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0028cb3:	72 e7                	jb     c0028c9c <hex_dump+0x198>
c0028cb5:	83 ec 0c             	sub    $0xc,%esp
c0028cb8:	6a 7c                	push   $0x7c
c0028cba:	e8 ba 3b 00 00       	call   c002c879 <putchar>
c0028cbf:	83 c4 10             	add    $0x10,%esp
c0028cc2:	83 ec 0c             	sub    $0xc,%esp
c0028cc5:	6a 0a                	push   $0xa
c0028cc7:	e8 ad 3b 00 00       	call   c002c879 <putchar>
c0028ccc:	83 c4 10             	add    $0x10,%esp
c0028ccf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028cd2:	01 45 08             	add    %eax,0x8(%ebp)
c0028cd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028cd8:	01 45 f4             	add    %eax,-0xc(%ebp)
c0028cdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028cde:	29 45 10             	sub    %eax,0x10(%ebp)
c0028ce1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0028ce5:	0f 85 37 fe ff ff    	jne    c0028b22 <hex_dump+0x1e>
c0028ceb:	90                   	nop
c0028cec:	c9                   	leave  
c0028ced:	c3                   	ret    

c0028cee <print_human_readable_size>:
c0028cee:	55                   	push   %ebp
c0028cef:	89 e5                	mov    %esp,%ebp
c0028cf1:	83 ec 28             	sub    $0x28,%esp
c0028cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0028cf7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028cfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028cfd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0028d00:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028d03:	83 f0 01             	xor    $0x1,%eax
c0028d06:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0028d09:	85 c0                	test   %eax,%eax
c0028d0b:	75 12                	jne    c0028d1f <print_human_readable_size+0x31>
c0028d0d:	83 ec 0c             	sub    $0xc,%esp
c0028d10:	68 99 4b 03 c0       	push   $0xc0034b99
c0028d15:	e8 af f2 ff ff       	call   c0027fc9 <printf>
c0028d1a:	83 c4 10             	add    $0x10,%esp
c0028d1d:	eb 5a                	jmp    c0028d79 <print_human_readable_size+0x8b>
c0028d1f:	c7 45 f4 08 c0 03 c0 	movl   $0xc003c008,-0xc(%ebp)
c0028d26:	eb 17                	jmp    c0028d3f <print_human_readable_size+0x51>
c0028d28:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0028d2b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0028d2e:	0f ac d0 0a          	shrd   $0xa,%edx,%eax
c0028d32:	c1 ea 0a             	shr    $0xa,%edx
c0028d35:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0028d38:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0028d3b:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
c0028d3f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0028d43:	72 1b                	jb     c0028d60 <print_human_readable_size+0x72>
c0028d45:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0028d49:	77 09                	ja     c0028d54 <print_human_readable_size+0x66>
c0028d4b:	81 7d e0 ff 03 00 00 	cmpl   $0x3ff,-0x20(%ebp)
c0028d52:	76 0c                	jbe    c0028d60 <print_human_readable_size+0x72>
c0028d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028d57:	83 c0 04             	add    $0x4,%eax
c0028d5a:	8b 00                	mov    (%eax),%eax
c0028d5c:	85 c0                	test   %eax,%eax
c0028d5e:	75 c8                	jne    c0028d28 <print_human_readable_size+0x3a>
c0028d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028d63:	8b 00                	mov    (%eax),%eax
c0028d65:	50                   	push   %eax
c0028d66:	ff 75 e4             	pushl  -0x1c(%ebp)
c0028d69:	ff 75 e0             	pushl  -0x20(%ebp)
c0028d6c:	68 a0 4b 03 c0       	push   $0xc0034ba0
c0028d71:	e8 53 f2 ff ff       	call   c0027fc9 <printf>
c0028d76:	83 c4 10             	add    $0x10,%esp
c0028d79:	90                   	nop
c0028d7a:	c9                   	leave  
c0028d7b:	c3                   	ret    

c0028d7c <isdigit>:
c0028d7c:	55                   	push   %ebp
c0028d7d:	89 e5                	mov    %esp,%ebp
c0028d7f:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0028d83:	7e 0d                	jle    c0028d92 <isdigit+0x16>
c0028d85:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0028d89:	7f 07                	jg     c0028d92 <isdigit+0x16>
c0028d8b:	b8 01 00 00 00       	mov    $0x1,%eax
c0028d90:	eb 05                	jmp    c0028d97 <isdigit+0x1b>
c0028d92:	b8 00 00 00 00       	mov    $0x0,%eax
c0028d97:	5d                   	pop    %ebp
c0028d98:	c3                   	ret    

c0028d99 <isspace>:
c0028d99:	55                   	push   %ebp
c0028d9a:	89 e5                	mov    %esp,%ebp
c0028d9c:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c0028da0:	74 1e                	je     c0028dc0 <isspace+0x27>
c0028da2:	83 7d 08 0c          	cmpl   $0xc,0x8(%ebp)
c0028da6:	74 18                	je     c0028dc0 <isspace+0x27>
c0028da8:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c0028dac:	74 12                	je     c0028dc0 <isspace+0x27>
c0028dae:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
c0028db2:	74 0c                	je     c0028dc0 <isspace+0x27>
c0028db4:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c0028db8:	74 06                	je     c0028dc0 <isspace+0x27>
c0028dba:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
c0028dbe:	75 07                	jne    c0028dc7 <isspace+0x2e>
c0028dc0:	b8 01 00 00 00       	mov    $0x1,%eax
c0028dc5:	eb 05                	jmp    c0028dcc <isspace+0x33>
c0028dc7:	b8 00 00 00 00       	mov    $0x0,%eax
c0028dcc:	5d                   	pop    %ebp
c0028dcd:	c3                   	ret    

c0028dce <atoi>:
c0028dce:	55                   	push   %ebp
c0028dcf:	89 e5                	mov    %esp,%ebp
c0028dd1:	83 ec 18             	sub    $0x18,%esp
c0028dd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0028dd8:	75 22                	jne    c0028dfc <atoi+0x2e>
c0028dda:	83 ec 0c             	sub    $0xc,%esp
c0028ddd:	68 c4 4b 03 c0       	push   $0xc0034bc4
c0028de2:	68 ce 4b 03 c0       	push   $0xc0034bce
c0028de7:	68 2c 4c 03 c0       	push   $0xc0034c2c
c0028dec:	6a 0f                	push   $0xf
c0028dee:	68 e5 4b 03 c0       	push   $0xc0034be5
c0028df3:	e8 32 17 00 00       	call   c002a52a <debug_panic>
c0028df8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028dfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0028dff:	0f b6 00             	movzbl (%eax),%eax
c0028e02:	0f b6 c0             	movzbl %al,%eax
c0028e05:	83 ec 0c             	sub    $0xc,%esp
c0028e08:	50                   	push   %eax
c0028e09:	e8 8b ff ff ff       	call   c0028d99 <isspace>
c0028e0e:	83 c4 10             	add    $0x10,%esp
c0028e11:	85 c0                	test   %eax,%eax
c0028e13:	75 e3                	jne    c0028df8 <atoi+0x2a>
c0028e15:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0028e19:	8b 45 08             	mov    0x8(%ebp),%eax
c0028e1c:	0f b6 00             	movzbl (%eax),%eax
c0028e1f:	3c 2b                	cmp    $0x2b,%al
c0028e21:	75 06                	jne    c0028e29 <atoi+0x5b>
c0028e23:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028e27:	eb 12                	jmp    c0028e3b <atoi+0x6d>
c0028e29:	8b 45 08             	mov    0x8(%ebp),%eax
c0028e2c:	0f b6 00             	movzbl (%eax),%eax
c0028e2f:	3c 2d                	cmp    $0x2d,%al
c0028e31:	75 08                	jne    c0028e3b <atoi+0x6d>
c0028e33:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c0028e37:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028e3b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0028e42:	eb 25                	jmp    c0028e69 <atoi+0x9b>
c0028e44:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0028e47:	89 d0                	mov    %edx,%eax
c0028e49:	c1 e0 02             	shl    $0x2,%eax
c0028e4c:	01 d0                	add    %edx,%eax
c0028e4e:	01 c0                	add    %eax,%eax
c0028e50:	89 c2                	mov    %eax,%edx
c0028e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0028e55:	0f b6 00             	movzbl (%eax),%eax
c0028e58:	0f be c0             	movsbl %al,%eax
c0028e5b:	83 e8 30             	sub    $0x30,%eax
c0028e5e:	29 c2                	sub    %eax,%edx
c0028e60:	89 d0                	mov    %edx,%eax
c0028e62:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028e65:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0028e69:	8b 45 08             	mov    0x8(%ebp),%eax
c0028e6c:	0f b6 00             	movzbl (%eax),%eax
c0028e6f:	0f be c0             	movsbl %al,%eax
c0028e72:	83 ec 0c             	sub    $0xc,%esp
c0028e75:	50                   	push   %eax
c0028e76:	e8 01 ff ff ff       	call   c0028d7c <isdigit>
c0028e7b:	83 c4 10             	add    $0x10,%esp
c0028e7e:	85 c0                	test   %eax,%eax
c0028e80:	75 c2                	jne    c0028e44 <atoi+0x76>
c0028e82:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0028e86:	83 f0 01             	xor    $0x1,%eax
c0028e89:	84 c0                	test   %al,%al
c0028e8b:	74 03                	je     c0028e90 <atoi+0xc2>
c0028e8d:	f7 5d f0             	negl   -0x10(%ebp)
c0028e90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028e93:	c9                   	leave  
c0028e94:	c3                   	ret    

c0028e95 <compare_thunk>:
c0028e95:	55                   	push   %ebp
c0028e96:	89 e5                	mov    %esp,%ebp
c0028e98:	83 ec 18             	sub    $0x18,%esp
c0028e9b:	8b 45 10             	mov    0x10(%ebp),%eax
c0028e9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0028ea4:	8b 00                	mov    (%eax),%eax
c0028ea6:	83 ec 08             	sub    $0x8,%esp
c0028ea9:	ff 75 0c             	pushl  0xc(%ebp)
c0028eac:	ff 75 08             	pushl  0x8(%ebp)
c0028eaf:	ff d0                	call   *%eax
c0028eb1:	83 c4 10             	add    $0x10,%esp
c0028eb4:	c9                   	leave  
c0028eb5:	c3                   	ret    

c0028eb6 <qsort>:
c0028eb6:	55                   	push   %ebp
c0028eb7:	89 e5                	mov    %esp,%ebp
c0028eb9:	83 ec 08             	sub    $0x8,%esp
c0028ebc:	83 ec 0c             	sub    $0xc,%esp
c0028ebf:	8d 45 14             	lea    0x14(%ebp),%eax
c0028ec2:	50                   	push   %eax
c0028ec3:	68 95 8e 02 c0       	push   $0xc0028e95
c0028ec8:	ff 75 10             	pushl  0x10(%ebp)
c0028ecb:	ff 75 0c             	pushl  0xc(%ebp)
c0028ece:	ff 75 08             	pushl  0x8(%ebp)
c0028ed1:	e8 5f 01 00 00       	call   c0029035 <sort>
c0028ed6:	83 c4 20             	add    $0x20,%esp
c0028ed9:	90                   	nop
c0028eda:	c9                   	leave  
c0028edb:	c3                   	ret    

c0028edc <do_swap>:
c0028edc:	55                   	push   %ebp
c0028edd:	89 e5                	mov    %esp,%ebp
c0028edf:	83 ec 10             	sub    $0x10,%esp
c0028ee2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028ee5:	83 e8 01             	sub    $0x1,%eax
c0028ee8:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028eec:	89 c2                	mov    %eax,%edx
c0028eee:	8b 45 08             	mov    0x8(%ebp),%eax
c0028ef1:	01 d0                	add    %edx,%eax
c0028ef3:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0028ef6:	8b 45 10             	mov    0x10(%ebp),%eax
c0028ef9:	83 e8 01             	sub    $0x1,%eax
c0028efc:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028f00:	89 c2                	mov    %eax,%edx
c0028f02:	8b 45 08             	mov    0x8(%ebp),%eax
c0028f05:	01 d0                	add    %edx,%eax
c0028f07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028f0a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0028f11:	eb 35                	jmp    c0028f48 <do_swap+0x6c>
c0028f13:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0028f16:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f19:	01 d0                	add    %edx,%eax
c0028f1b:	0f b6 00             	movzbl (%eax),%eax
c0028f1e:	88 45 f3             	mov    %al,-0xd(%ebp)
c0028f21:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0028f24:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f27:	01 c2                	add    %eax,%edx
c0028f29:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0028f2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f2f:	01 c8                	add    %ecx,%eax
c0028f31:	0f b6 00             	movzbl (%eax),%eax
c0028f34:	88 02                	mov    %al,(%edx)
c0028f36:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0028f39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f3c:	01 c2                	add    %eax,%edx
c0028f3e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0028f42:	88 02                	mov    %al,(%edx)
c0028f44:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0028f48:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0028f4b:	3b 45 14             	cmp    0x14(%ebp),%eax
c0028f4e:	72 c3                	jb     c0028f13 <do_swap+0x37>
c0028f50:	90                   	nop
c0028f51:	c9                   	leave  
c0028f52:	c3                   	ret    

c0028f53 <do_compare>:
c0028f53:	55                   	push   %ebp
c0028f54:	89 e5                	mov    %esp,%ebp
c0028f56:	83 ec 08             	sub    $0x8,%esp
c0028f59:	8b 45 10             	mov    0x10(%ebp),%eax
c0028f5c:	83 e8 01             	sub    $0x1,%eax
c0028f5f:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028f63:	89 c2                	mov    %eax,%edx
c0028f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0028f68:	01 c2                	add    %eax,%edx
c0028f6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028f6d:	83 e8 01             	sub    $0x1,%eax
c0028f70:	0f af 45 14          	imul   0x14(%ebp),%eax
c0028f74:	89 c1                	mov    %eax,%ecx
c0028f76:	8b 45 08             	mov    0x8(%ebp),%eax
c0028f79:	01 c8                	add    %ecx,%eax
c0028f7b:	83 ec 04             	sub    $0x4,%esp
c0028f7e:	ff 75 1c             	pushl  0x1c(%ebp)
c0028f81:	52                   	push   %edx
c0028f82:	50                   	push   %eax
c0028f83:	8b 45 18             	mov    0x18(%ebp),%eax
c0028f86:	ff d0                	call   *%eax
c0028f88:	83 c4 10             	add    $0x10,%esp
c0028f8b:	c9                   	leave  
c0028f8c:	c3                   	ret    

c0028f8d <heapify>:
c0028f8d:	55                   	push   %ebp
c0028f8e:	89 e5                	mov    %esp,%ebp
c0028f90:	83 ec 18             	sub    $0x18,%esp
c0028f93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028f96:	01 c0                	add    %eax,%eax
c0028f98:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0028f9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028f9e:	01 c0                	add    %eax,%eax
c0028fa0:	83 c0 01             	add    $0x1,%eax
c0028fa3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0028fa6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0028fa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028fac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028faf:	3b 45 10             	cmp    0x10(%ebp),%eax
c0028fb2:	77 27                	ja     c0028fdb <heapify+0x4e>
c0028fb4:	83 ec 08             	sub    $0x8,%esp
c0028fb7:	ff 75 1c             	pushl  0x1c(%ebp)
c0028fba:	ff 75 18             	pushl  0x18(%ebp)
c0028fbd:	ff 75 14             	pushl  0x14(%ebp)
c0028fc0:	ff 75 f4             	pushl  -0xc(%ebp)
c0028fc3:	ff 75 f0             	pushl  -0x10(%ebp)
c0028fc6:	ff 75 08             	pushl  0x8(%ebp)
c0028fc9:	e8 85 ff ff ff       	call   c0028f53 <do_compare>
c0028fce:	83 c4 20             	add    $0x20,%esp
c0028fd1:	85 c0                	test   %eax,%eax
c0028fd3:	7e 06                	jle    c0028fdb <heapify+0x4e>
c0028fd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0028fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0028fdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0028fde:	3b 45 10             	cmp    0x10(%ebp),%eax
c0028fe1:	77 27                	ja     c002900a <heapify+0x7d>
c0028fe3:	83 ec 08             	sub    $0x8,%esp
c0028fe6:	ff 75 1c             	pushl  0x1c(%ebp)
c0028fe9:	ff 75 18             	pushl  0x18(%ebp)
c0028fec:	ff 75 14             	pushl  0x14(%ebp)
c0028fef:	ff 75 f4             	pushl  -0xc(%ebp)
c0028ff2:	ff 75 ec             	pushl  -0x14(%ebp)
c0028ff5:	ff 75 08             	pushl  0x8(%ebp)
c0028ff8:	e8 56 ff ff ff       	call   c0028f53 <do_compare>
c0028ffd:	83 c4 20             	add    $0x20,%esp
c0029000:	85 c0                	test   %eax,%eax
c0029002:	7e 06                	jle    c002900a <heapify+0x7d>
c0029004:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0029007:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002900a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002900d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0029010:	74 1f                	je     c0029031 <heapify+0xa4>
c0029012:	ff 75 14             	pushl  0x14(%ebp)
c0029015:	ff 75 f4             	pushl  -0xc(%ebp)
c0029018:	ff 75 0c             	pushl  0xc(%ebp)
c002901b:	ff 75 08             	pushl  0x8(%ebp)
c002901e:	e8 b9 fe ff ff       	call   c0028edc <do_swap>
c0029023:	83 c4 10             	add    $0x10,%esp
c0029026:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029029:	89 45 0c             	mov    %eax,0xc(%ebp)
c002902c:	e9 62 ff ff ff       	jmp    c0028f93 <heapify+0x6>
c0029031:	90                   	nop
c0029032:	90                   	nop
c0029033:	c9                   	leave  
c0029034:	c3                   	ret    

c0029035 <sort>:
c0029035:	55                   	push   %ebp
c0029036:	89 e5                	mov    %esp,%ebp
c0029038:	83 ec 18             	sub    $0x18,%esp
c002903b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002903f:	75 27                	jne    c0029068 <sort+0x33>
c0029041:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0029045:	74 21                	je     c0029068 <sort+0x33>
c0029047:	83 ec 0c             	sub    $0xc,%esp
c002904a:	68 f8 4b 03 c0       	push   $0xc0034bf8
c002904f:	68 ce 4b 03 c0       	push   $0xc0034bce
c0029054:	68 34 4c 03 c0       	push   $0xc0034c34
c0029059:	68 8a 00 00 00       	push   $0x8a
c002905e:	68 e5 4b 03 c0       	push   $0xc0034be5
c0029063:	e8 c2 14 00 00       	call   c002a52a <debug_panic>
c0029068:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c002906c:	75 21                	jne    c002908f <sort+0x5a>
c002906e:	83 ec 0c             	sub    $0xc,%esp
c0029071:	68 12 4c 03 c0       	push   $0xc0034c12
c0029076:	68 ce 4b 03 c0       	push   $0xc0034bce
c002907b:	68 34 4c 03 c0       	push   $0xc0034c34
c0029080:	68 8b 00 00 00       	push   $0x8b
c0029085:	68 e5 4b 03 c0       	push   $0xc0034be5
c002908a:	e8 9b 14 00 00       	call   c002a52a <debug_panic>
c002908f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029093:	75 21                	jne    c00290b6 <sort+0x81>
c0029095:	83 ec 0c             	sub    $0xc,%esp
c0029098:	68 22 4c 03 c0       	push   $0xc0034c22
c002909d:	68 ce 4b 03 c0       	push   $0xc0034bce
c00290a2:	68 34 4c 03 c0       	push   $0xc0034c34
c00290a7:	68 8c 00 00 00       	push   $0x8c
c00290ac:	68 e5 4b 03 c0       	push   $0xc0034be5
c00290b1:	e8 74 14 00 00       	call   c002a52a <debug_panic>
c00290b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00290b9:	d1 e8                	shr    %eax
c00290bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00290be:	eb 21                	jmp    c00290e1 <sort+0xac>
c00290c0:	83 ec 08             	sub    $0x8,%esp
c00290c3:	ff 75 18             	pushl  0x18(%ebp)
c00290c6:	ff 75 14             	pushl  0x14(%ebp)
c00290c9:	ff 75 10             	pushl  0x10(%ebp)
c00290cc:	ff 75 0c             	pushl  0xc(%ebp)
c00290cf:	ff 75 f4             	pushl  -0xc(%ebp)
c00290d2:	ff 75 08             	pushl  0x8(%ebp)
c00290d5:	e8 b3 fe ff ff       	call   c0028f8d <heapify>
c00290da:	83 c4 20             	add    $0x20,%esp
c00290dd:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c00290e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00290e5:	75 d9                	jne    c00290c0 <sort+0x8b>
c00290e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00290ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00290ed:	eb 37                	jmp    c0029126 <sort+0xf1>
c00290ef:	ff 75 10             	pushl  0x10(%ebp)
c00290f2:	ff 75 f4             	pushl  -0xc(%ebp)
c00290f5:	6a 01                	push   $0x1
c00290f7:	ff 75 08             	pushl  0x8(%ebp)
c00290fa:	e8 dd fd ff ff       	call   c0028edc <do_swap>
c00290ff:	83 c4 10             	add    $0x10,%esp
c0029102:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029105:	83 e8 01             	sub    $0x1,%eax
c0029108:	83 ec 08             	sub    $0x8,%esp
c002910b:	ff 75 18             	pushl  0x18(%ebp)
c002910e:	ff 75 14             	pushl  0x14(%ebp)
c0029111:	ff 75 10             	pushl  0x10(%ebp)
c0029114:	50                   	push   %eax
c0029115:	6a 01                	push   $0x1
c0029117:	ff 75 08             	pushl  0x8(%ebp)
c002911a:	e8 6e fe ff ff       	call   c0028f8d <heapify>
c002911f:	83 c4 20             	add    $0x20,%esp
c0029122:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0029126:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c002912a:	77 c3                	ja     c00290ef <sort+0xba>
c002912c:	90                   	nop
c002912d:	c9                   	leave  
c002912e:	c3                   	ret    

c002912f <bsearch>:
c002912f:	55                   	push   %ebp
c0029130:	89 e5                	mov    %esp,%ebp
c0029132:	83 ec 08             	sub    $0x8,%esp
c0029135:	83 ec 08             	sub    $0x8,%esp
c0029138:	8d 45 18             	lea    0x18(%ebp),%eax
c002913b:	50                   	push   %eax
c002913c:	68 95 8e 02 c0       	push   $0xc0028e95
c0029141:	ff 75 14             	pushl  0x14(%ebp)
c0029144:	ff 75 10             	pushl  0x10(%ebp)
c0029147:	ff 75 0c             	pushl  0xc(%ebp)
c002914a:	ff 75 08             	pushl  0x8(%ebp)
c002914d:	e8 05 00 00 00       	call   c0029157 <binary_search>
c0029152:	83 c4 20             	add    $0x20,%esp
c0029155:	c9                   	leave  
c0029156:	c3                   	ret    

c0029157 <binary_search>:
c0029157:	55                   	push   %ebp
c0029158:	89 e5                	mov    %esp,%ebp
c002915a:	83 ec 28             	sub    $0x28,%esp
c002915d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029160:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029163:	8b 45 14             	mov    0x14(%ebp),%eax
c0029166:	0f af 45 10          	imul   0x10(%ebp),%eax
c002916a:	89 c2                	mov    %eax,%edx
c002916c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002916f:	01 d0                	add    %edx,%eax
c0029171:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029174:	eb 65                	jmp    c00291db <binary_search+0x84>
c0029176:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0029179:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002917c:	29 c2                	sub    %eax,%edx
c002917e:	89 d0                	mov    %edx,%eax
c0029180:	ba 00 00 00 00       	mov    $0x0,%edx
c0029185:	f7 75 14             	divl   0x14(%ebp)
c0029188:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002918b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002918e:	d1 e8                	shr    %eax
c0029190:	0f af 45 14          	imul   0x14(%ebp),%eax
c0029194:	89 c2                	mov    %eax,%edx
c0029196:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029199:	01 d0                	add    %edx,%eax
c002919b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002919e:	83 ec 04             	sub    $0x4,%esp
c00291a1:	ff 75 1c             	pushl  0x1c(%ebp)
c00291a4:	ff 75 e8             	pushl  -0x18(%ebp)
c00291a7:	ff 75 08             	pushl  0x8(%ebp)
c00291aa:	8b 45 18             	mov    0x18(%ebp),%eax
c00291ad:	ff d0                	call   *%eax
c00291af:	83 c4 10             	add    $0x10,%esp
c00291b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00291b5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00291b9:	79 08                	jns    c00291c3 <binary_search+0x6c>
c00291bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00291be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00291c1:	eb 18                	jmp    c00291db <binary_search+0x84>
c00291c3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00291c7:	7e 0d                	jle    c00291d6 <binary_search+0x7f>
c00291c9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00291cc:	8b 45 14             	mov    0x14(%ebp),%eax
c00291cf:	01 d0                	add    %edx,%eax
c00291d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00291d4:	eb 05                	jmp    c00291db <binary_search+0x84>
c00291d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00291d9:	eb 0d                	jmp    c00291e8 <binary_search+0x91>
c00291db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00291de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c00291e1:	72 93                	jb     c0029176 <binary_search+0x1f>
c00291e3:	b8 00 00 00 00       	mov    $0x0,%eax
c00291e8:	c9                   	leave  
c00291e9:	c3                   	ret    

c00291ea <memcpy>:
c00291ea:	55                   	push   %ebp
c00291eb:	89 e5                	mov    %esp,%ebp
c00291ed:	83 ec 18             	sub    $0x18,%esp
c00291f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00291f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00291f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00291f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00291fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0029200:	75 24                	jne    c0029226 <memcpy+0x3c>
c0029202:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029206:	74 1e                	je     c0029226 <memcpy+0x3c>
c0029208:	83 ec 0c             	sub    $0xc,%esp
c002920b:	68 3c 4c 03 c0       	push   $0xc0034c3c
c0029210:	68 55 4c 03 c0       	push   $0xc0034c55
c0029215:	68 4c 4d 03 c0       	push   $0xc0034d4c
c002921a:	6a 0c                	push   $0xc
c002921c:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029221:	e8 04 13 00 00       	call   c002a52a <debug_panic>
c0029226:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002922a:	75 3b                	jne    c0029267 <memcpy+0x7d>
c002922c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029230:	74 35                	je     c0029267 <memcpy+0x7d>
c0029232:	83 ec 0c             	sub    $0xc,%esp
c0029235:	68 7f 4c 03 c0       	push   $0xc0034c7f
c002923a:	68 55 4c 03 c0       	push   $0xc0034c55
c002923f:	68 4c 4d 03 c0       	push   $0xc0034d4c
c0029244:	6a 0d                	push   $0xd
c0029246:	68 6c 4c 03 c0       	push   $0xc0034c6c
c002924b:	e8 da 12 00 00       	call   c002a52a <debug_panic>
c0029250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029253:	8d 50 01             	lea    0x1(%eax),%edx
c0029256:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029259:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002925c:	8d 4a 01             	lea    0x1(%edx),%ecx
c002925f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0029262:	0f b6 12             	movzbl (%edx),%edx
c0029265:	88 10                	mov    %dl,(%eax)
c0029267:	8b 45 10             	mov    0x10(%ebp),%eax
c002926a:	8d 50 ff             	lea    -0x1(%eax),%edx
c002926d:	89 55 10             	mov    %edx,0x10(%ebp)
c0029270:	85 c0                	test   %eax,%eax
c0029272:	75 dc                	jne    c0029250 <memcpy+0x66>
c0029274:	8b 45 08             	mov    0x8(%ebp),%eax
c0029277:	c9                   	leave  
c0029278:	c3                   	ret    

c0029279 <memmove>:
c0029279:	55                   	push   %ebp
c002927a:	89 e5                	mov    %esp,%ebp
c002927c:	83 ec 18             	sub    $0x18,%esp
c002927f:	8b 45 08             	mov    0x8(%ebp),%eax
c0029282:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029285:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029288:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002928b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002928f:	75 24                	jne    c00292b5 <memmove+0x3c>
c0029291:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029295:	74 1e                	je     c00292b5 <memmove+0x3c>
c0029297:	83 ec 0c             	sub    $0xc,%esp
c002929a:	68 3c 4c 03 c0       	push   $0xc0034c3c
c002929f:	68 55 4c 03 c0       	push   $0xc0034c55
c00292a4:	68 54 4d 03 c0       	push   $0xc0034d54
c00292a9:	6a 1d                	push   $0x1d
c00292ab:	68 6c 4c 03 c0       	push   $0xc0034c6c
c00292b0:	e8 75 12 00 00       	call   c002a52a <debug_panic>
c00292b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00292b9:	75 24                	jne    c00292df <memmove+0x66>
c00292bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00292bf:	74 1e                	je     c00292df <memmove+0x66>
c00292c1:	83 ec 0c             	sub    $0xc,%esp
c00292c4:	68 7f 4c 03 c0       	push   $0xc0034c7f
c00292c9:	68 55 4c 03 c0       	push   $0xc0034c55
c00292ce:	68 54 4d 03 c0       	push   $0xc0034d54
c00292d3:	6a 1e                	push   $0x1e
c00292d5:	68 6c 4c 03 c0       	push   $0xc0034c6c
c00292da:	e8 4b 12 00 00       	call   c002a52a <debug_panic>
c00292df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00292e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c00292e5:	73 28                	jae    c002930f <memmove+0x96>
c00292e7:	eb 17                	jmp    c0029300 <memmove+0x87>
c00292e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00292ec:	8d 50 01             	lea    0x1(%eax),%edx
c00292ef:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00292f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00292f5:	8d 4a 01             	lea    0x1(%edx),%ecx
c00292f8:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c00292fb:	0f b6 12             	movzbl (%edx),%edx
c00292fe:	88 10                	mov    %dl,(%eax)
c0029300:	8b 45 10             	mov    0x10(%ebp),%eax
c0029303:	8d 50 ff             	lea    -0x1(%eax),%edx
c0029306:	89 55 10             	mov    %edx,0x10(%ebp)
c0029309:	85 c0                	test   %eax,%eax
c002930b:	75 dc                	jne    c00292e9 <memmove+0x70>
c002930d:	eb 2e                	jmp    c002933d <memmove+0xc4>
c002930f:	8b 45 10             	mov    0x10(%ebp),%eax
c0029312:	01 45 f4             	add    %eax,-0xc(%ebp)
c0029315:	8b 45 10             	mov    0x10(%ebp),%eax
c0029318:	01 45 f0             	add    %eax,-0x10(%ebp)
c002931b:	eb 13                	jmp    c0029330 <memmove+0xb7>
c002931d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0029321:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
c0029325:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029328:	0f b6 10             	movzbl (%eax),%edx
c002932b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002932e:	88 10                	mov    %dl,(%eax)
c0029330:	8b 45 10             	mov    0x10(%ebp),%eax
c0029333:	8d 50 ff             	lea    -0x1(%eax),%edx
c0029336:	89 55 10             	mov    %edx,0x10(%ebp)
c0029339:	85 c0                	test   %eax,%eax
c002933b:	75 e0                	jne    c002931d <memmove+0xa4>
c002933d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029340:	c9                   	leave  
c0029341:	c3                   	ret    

c0029342 <memcmp>:
c0029342:	55                   	push   %ebp
c0029343:	89 e5                	mov    %esp,%ebp
c0029345:	83 ec 18             	sub    $0x18,%esp
c0029348:	8b 45 08             	mov    0x8(%ebp),%eax
c002934b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002934e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029351:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029354:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0029358:	75 24                	jne    c002937e <memcmp+0x3c>
c002935a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002935e:	74 1e                	je     c002937e <memcmp+0x3c>
c0029360:	83 ec 0c             	sub    $0xc,%esp
c0029363:	68 98 4c 03 c0       	push   $0xc0034c98
c0029368:	68 55 4c 03 c0       	push   $0xc0034c55
c002936d:	68 5c 4d 03 c0       	push   $0xc0034d5c
c0029372:	6a 3a                	push   $0x3a
c0029374:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029379:	e8 ac 11 00 00       	call   c002a52a <debug_panic>
c002937e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0029382:	75 5a                	jne    c00293de <memcmp+0x9c>
c0029384:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029388:	74 54                	je     c00293de <memcmp+0x9c>
c002938a:	83 ec 0c             	sub    $0xc,%esp
c002938d:	68 af 4c 03 c0       	push   $0xc0034caf
c0029392:	68 55 4c 03 c0       	push   $0xc0034c55
c0029397:	68 5c 4d 03 c0       	push   $0xc0034d5c
c002939c:	6a 3b                	push   $0x3b
c002939e:	68 6c 4c 03 c0       	push   $0xc0034c6c
c00293a3:	e8 82 11 00 00       	call   c002a52a <debug_panic>
c00293a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00293ab:	0f b6 10             	movzbl (%eax),%edx
c00293ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00293b1:	0f b6 00             	movzbl (%eax),%eax
c00293b4:	38 c2                	cmp    %al,%dl
c00293b6:	74 1e                	je     c00293d6 <memcmp+0x94>
c00293b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00293bb:	0f b6 10             	movzbl (%eax),%edx
c00293be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00293c1:	0f b6 00             	movzbl (%eax),%eax
c00293c4:	38 c2                	cmp    %al,%dl
c00293c6:	76 07                	jbe    c00293cf <memcmp+0x8d>
c00293c8:	b8 01 00 00 00       	mov    $0x1,%eax
c00293cd:	eb 21                	jmp    c00293f0 <memcmp+0xae>
c00293cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00293d4:	eb 1a                	jmp    c00293f0 <memcmp+0xae>
c00293d6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00293da:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c00293de:	8b 45 10             	mov    0x10(%ebp),%eax
c00293e1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00293e4:	89 55 10             	mov    %edx,0x10(%ebp)
c00293e7:	85 c0                	test   %eax,%eax
c00293e9:	75 bd                	jne    c00293a8 <memcmp+0x66>
c00293eb:	b8 00 00 00 00       	mov    $0x0,%eax
c00293f0:	c9                   	leave  
c00293f1:	c3                   	ret    

c00293f2 <strcmp>:
c00293f2:	55                   	push   %ebp
c00293f3:	89 e5                	mov    %esp,%ebp
c00293f5:	83 ec 18             	sub    $0x18,%esp
c00293f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00293fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00293fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029401:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029404:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0029408:	75 1e                	jne    c0029428 <strcmp+0x36>
c002940a:	83 ec 0c             	sub    $0xc,%esp
c002940d:	68 c6 4c 03 c0       	push   $0xc0034cc6
c0029412:	68 55 4c 03 c0       	push   $0xc0034c55
c0029417:	68 64 4d 03 c0       	push   $0xc0034d64
c002941c:	6a 4e                	push   $0x4e
c002941e:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029423:	e8 02 11 00 00       	call   c002a52a <debug_panic>
c0029428:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002942c:	75 26                	jne    c0029454 <strcmp+0x62>
c002942e:	83 ec 0c             	sub    $0xc,%esp
c0029431:	68 d0 4c 03 c0       	push   $0xc0034cd0
c0029436:	68 55 4c 03 c0       	push   $0xc0034c55
c002943b:	68 64 4d 03 c0       	push   $0xc0034d64
c0029440:	6a 4f                	push   $0x4f
c0029442:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029447:	e8 de 10 00 00       	call   c002a52a <debug_panic>
c002944c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0029450:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0029454:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029457:	0f b6 00             	movzbl (%eax),%eax
c002945a:	84 c0                	test   %al,%al
c002945c:	74 10                	je     c002946e <strcmp+0x7c>
c002945e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029461:	0f b6 10             	movzbl (%eax),%edx
c0029464:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029467:	0f b6 00             	movzbl (%eax),%eax
c002946a:	38 c2                	cmp    %al,%dl
c002946c:	74 de                	je     c002944c <strcmp+0x5a>
c002946e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029471:	0f b6 10             	movzbl (%eax),%edx
c0029474:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029477:	0f b6 00             	movzbl (%eax),%eax
c002947a:	38 c2                	cmp    %al,%dl
c002947c:	72 16                	jb     c0029494 <strcmp+0xa2>
c002947e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029481:	0f b6 10             	movzbl (%eax),%edx
c0029484:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029487:	0f b6 00             	movzbl (%eax),%eax
c002948a:	38 c2                	cmp    %al,%dl
c002948c:	0f 97 c0             	seta   %al
c002948f:	0f b6 c0             	movzbl %al,%eax
c0029492:	eb 05                	jmp    c0029499 <strcmp+0xa7>
c0029494:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0029499:	c9                   	leave  
c002949a:	c3                   	ret    

c002949b <memchr>:
c002949b:	55                   	push   %ebp
c002949c:	89 e5                	mov    %esp,%ebp
c002949e:	83 ec 18             	sub    $0x18,%esp
c00294a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00294a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00294a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00294aa:	88 45 f3             	mov    %al,-0xd(%ebp)
c00294ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00294b1:	75 38                	jne    c00294eb <memchr+0x50>
c00294b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00294b7:	74 32                	je     c00294eb <memchr+0x50>
c00294b9:	83 ec 0c             	sub    $0xc,%esp
c00294bc:	68 da 4c 03 c0       	push   $0xc0034cda
c00294c1:	68 55 4c 03 c0       	push   $0xc0034c55
c00294c6:	68 6c 4d 03 c0       	push   $0xc0034d6c
c00294cb:	6a 63                	push   $0x63
c00294cd:	68 6c 4c 03 c0       	push   $0xc0034c6c
c00294d2:	e8 53 10 00 00       	call   c002a52a <debug_panic>
c00294d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00294da:	0f b6 00             	movzbl (%eax),%eax
c00294dd:	3a 45 f3             	cmp    -0xd(%ebp),%al
c00294e0:	75 05                	jne    c00294e7 <memchr+0x4c>
c00294e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00294e5:	eb 16                	jmp    c00294fd <memchr+0x62>
c00294e7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00294eb:	8b 45 10             	mov    0x10(%ebp),%eax
c00294ee:	8d 50 ff             	lea    -0x1(%eax),%edx
c00294f1:	89 55 10             	mov    %edx,0x10(%ebp)
c00294f4:	85 c0                	test   %eax,%eax
c00294f6:	75 df                	jne    c00294d7 <memchr+0x3c>
c00294f8:	b8 00 00 00 00       	mov    $0x0,%eax
c00294fd:	c9                   	leave  
c00294fe:	c3                   	ret    

c00294ff <strchr>:
c00294ff:	55                   	push   %ebp
c0029500:	89 e5                	mov    %esp,%ebp
c0029502:	83 ec 18             	sub    $0x18,%esp
c0029505:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029508:	88 45 f7             	mov    %al,-0x9(%ebp)
c002950b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002950f:	75 1e                	jne    c002952f <strchr+0x30>
c0029511:	83 ec 0c             	sub    $0xc,%esp
c0029514:	68 f5 4c 03 c0       	push   $0xc0034cf5
c0029519:	68 55 4c 03 c0       	push   $0xc0034c55
c002951e:	68 74 4d 03 c0       	push   $0xc0034d74
c0029523:	6a 75                	push   $0x75
c0029525:	68 6c 4c 03 c0       	push   $0xc0034c6c
c002952a:	e8 fb 0f 00 00       	call   c002a52a <debug_panic>
c002952f:	8b 45 08             	mov    0x8(%ebp),%eax
c0029532:	0f b6 00             	movzbl (%eax),%eax
c0029535:	3a 45 f7             	cmp    -0x9(%ebp),%al
c0029538:	75 05                	jne    c002953f <strchr+0x40>
c002953a:	8b 45 08             	mov    0x8(%ebp),%eax
c002953d:	eb 17                	jmp    c0029556 <strchr+0x57>
c002953f:	8b 45 08             	mov    0x8(%ebp),%eax
c0029542:	0f b6 00             	movzbl (%eax),%eax
c0029545:	84 c0                	test   %al,%al
c0029547:	75 07                	jne    c0029550 <strchr+0x51>
c0029549:	b8 00 00 00 00       	mov    $0x0,%eax
c002954e:	eb 06                	jmp    c0029556 <strchr+0x57>
c0029550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0029554:	eb d9                	jmp    c002952f <strchr+0x30>
c0029556:	c9                   	leave  
c0029557:	c3                   	ret    

c0029558 <strcspn>:
c0029558:	55                   	push   %ebp
c0029559:	89 e5                	mov    %esp,%ebp
c002955b:	83 ec 18             	sub    $0x18,%esp
c002955e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0029565:	eb 25                	jmp    c002958c <strcspn+0x34>
c0029567:	8b 55 08             	mov    0x8(%ebp),%edx
c002956a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002956d:	01 d0                	add    %edx,%eax
c002956f:	0f b6 00             	movzbl (%eax),%eax
c0029572:	0f be c0             	movsbl %al,%eax
c0029575:	83 ec 08             	sub    $0x8,%esp
c0029578:	50                   	push   %eax
c0029579:	ff 75 0c             	pushl  0xc(%ebp)
c002957c:	e8 7e ff ff ff       	call   c00294ff <strchr>
c0029581:	83 c4 10             	add    $0x10,%esp
c0029584:	85 c0                	test   %eax,%eax
c0029586:	75 15                	jne    c002959d <strcspn+0x45>
c0029588:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002958c:	8b 55 08             	mov    0x8(%ebp),%edx
c002958f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029592:	01 d0                	add    %edx,%eax
c0029594:	0f b6 00             	movzbl (%eax),%eax
c0029597:	84 c0                	test   %al,%al
c0029599:	75 cc                	jne    c0029567 <strcspn+0xf>
c002959b:	eb 01                	jmp    c002959e <strcspn+0x46>
c002959d:	90                   	nop
c002959e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00295a1:	c9                   	leave  
c00295a2:	c3                   	ret    

c00295a3 <strpbrk>:
c00295a3:	55                   	push   %ebp
c00295a4:	89 e5                	mov    %esp,%ebp
c00295a6:	83 ec 08             	sub    $0x8,%esp
c00295a9:	eb 25                	jmp    c00295d0 <strpbrk+0x2d>
c00295ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00295ae:	0f b6 00             	movzbl (%eax),%eax
c00295b1:	0f be c0             	movsbl %al,%eax
c00295b4:	83 ec 08             	sub    $0x8,%esp
c00295b7:	50                   	push   %eax
c00295b8:	ff 75 0c             	pushl  0xc(%ebp)
c00295bb:	e8 3f ff ff ff       	call   c00294ff <strchr>
c00295c0:	83 c4 10             	add    $0x10,%esp
c00295c3:	85 c0                	test   %eax,%eax
c00295c5:	74 05                	je     c00295cc <strpbrk+0x29>
c00295c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00295ca:	eb 13                	jmp    c00295df <strpbrk+0x3c>
c00295cc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00295d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00295d3:	0f b6 00             	movzbl (%eax),%eax
c00295d6:	84 c0                	test   %al,%al
c00295d8:	75 d1                	jne    c00295ab <strpbrk+0x8>
c00295da:	b8 00 00 00 00       	mov    $0x0,%eax
c00295df:	c9                   	leave  
c00295e0:	c3                   	ret    

c00295e1 <strrchr>:
c00295e1:	55                   	push   %ebp
c00295e2:	89 e5                	mov    %esp,%ebp
c00295e4:	83 ec 10             	sub    $0x10,%esp
c00295e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00295ea:	88 45 fb             	mov    %al,-0x5(%ebp)
c00295ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c00295f4:	eb 15                	jmp    c002960b <strrchr+0x2a>
c00295f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00295f9:	0f b6 00             	movzbl (%eax),%eax
c00295fc:	3a 45 fb             	cmp    -0x5(%ebp),%al
c00295ff:	75 06                	jne    c0029607 <strrchr+0x26>
c0029601:	8b 45 08             	mov    0x8(%ebp),%eax
c0029604:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029607:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c002960b:	8b 45 08             	mov    0x8(%ebp),%eax
c002960e:	0f b6 00             	movzbl (%eax),%eax
c0029611:	84 c0                	test   %al,%al
c0029613:	75 e1                	jne    c00295f6 <strrchr+0x15>
c0029615:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0029618:	c9                   	leave  
c0029619:	c3                   	ret    

c002961a <strspn>:
c002961a:	55                   	push   %ebp
c002961b:	89 e5                	mov    %esp,%ebp
c002961d:	83 ec 18             	sub    $0x18,%esp
c0029620:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0029627:	eb 25                	jmp    c002964e <strspn+0x34>
c0029629:	8b 55 08             	mov    0x8(%ebp),%edx
c002962c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002962f:	01 d0                	add    %edx,%eax
c0029631:	0f b6 00             	movzbl (%eax),%eax
c0029634:	0f be c0             	movsbl %al,%eax
c0029637:	83 ec 08             	sub    $0x8,%esp
c002963a:	50                   	push   %eax
c002963b:	ff 75 0c             	pushl  0xc(%ebp)
c002963e:	e8 bc fe ff ff       	call   c00294ff <strchr>
c0029643:	83 c4 10             	add    $0x10,%esp
c0029646:	85 c0                	test   %eax,%eax
c0029648:	74 15                	je     c002965f <strspn+0x45>
c002964a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002964e:	8b 55 08             	mov    0x8(%ebp),%edx
c0029651:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029654:	01 d0                	add    %edx,%eax
c0029656:	0f b6 00             	movzbl (%eax),%eax
c0029659:	84 c0                	test   %al,%al
c002965b:	75 cc                	jne    c0029629 <strspn+0xf>
c002965d:	eb 01                	jmp    c0029660 <strspn+0x46>
c002965f:	90                   	nop
c0029660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029663:	c9                   	leave  
c0029664:	c3                   	ret    

c0029665 <strstr>:
c0029665:	55                   	push   %ebp
c0029666:	89 e5                	mov    %esp,%ebp
c0029668:	83 ec 18             	sub    $0x18,%esp
c002966b:	83 ec 0c             	sub    $0xc,%esp
c002966e:	ff 75 08             	pushl  0x8(%ebp)
c0029671:	e8 d3 01 00 00       	call   c0029849 <strlen>
c0029676:	83 c4 10             	add    $0x10,%esp
c0029679:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002967c:	83 ec 0c             	sub    $0xc,%esp
c002967f:	ff 75 0c             	pushl  0xc(%ebp)
c0029682:	e8 c2 01 00 00       	call   c0029849 <strlen>
c0029687:	83 c4 10             	add    $0x10,%esp
c002968a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002968d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029690:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0029693:	72 40                	jb     c00296d5 <strstr+0x70>
c0029695:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002969c:	eb 2c                	jmp    c00296ca <strstr+0x65>
c002969e:	8b 55 08             	mov    0x8(%ebp),%edx
c00296a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00296a4:	01 d0                	add    %edx,%eax
c00296a6:	83 ec 04             	sub    $0x4,%esp
c00296a9:	ff 75 ec             	pushl  -0x14(%ebp)
c00296ac:	ff 75 0c             	pushl  0xc(%ebp)
c00296af:	50                   	push   %eax
c00296b0:	e8 8d fc ff ff       	call   c0029342 <memcmp>
c00296b5:	83 c4 10             	add    $0x10,%esp
c00296b8:	85 c0                	test   %eax,%eax
c00296ba:	75 0a                	jne    c00296c6 <strstr+0x61>
c00296bc:	8b 55 08             	mov    0x8(%ebp),%edx
c00296bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00296c2:	01 d0                	add    %edx,%eax
c00296c4:	eb 14                	jmp    c00296da <strstr+0x75>
c00296c6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00296ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00296cd:	2b 45 ec             	sub    -0x14(%ebp),%eax
c00296d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00296d3:	73 c9                	jae    c002969e <strstr+0x39>
c00296d5:	b8 00 00 00 00       	mov    $0x0,%eax
c00296da:	c9                   	leave  
c00296db:	c3                   	ret    

c00296dc <strtok_r>:
c00296dc:	55                   	push   %ebp
c00296dd:	89 e5                	mov    %esp,%ebp
c00296df:	83 ec 18             	sub    $0x18,%esp
c00296e2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00296e6:	75 21                	jne    c0029709 <strtok_r+0x2d>
c00296e8:	83 ec 0c             	sub    $0xc,%esp
c00296eb:	68 04 4d 03 c0       	push   $0xc0034d04
c00296f0:	68 55 4c 03 c0       	push   $0xc0034c55
c00296f5:	68 7c 4d 03 c0       	push   $0xc0034d7c
c00296fa:	68 ef 00 00 00       	push   $0xef
c00296ff:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029704:	e8 21 0e 00 00       	call   c002a52a <debug_panic>
c0029709:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002970d:	75 21                	jne    c0029730 <strtok_r+0x54>
c002970f:	83 ec 0c             	sub    $0xc,%esp
c0029712:	68 17 4d 03 c0       	push   $0xc0034d17
c0029717:	68 55 4c 03 c0       	push   $0xc0034c55
c002971c:	68 7c 4d 03 c0       	push   $0xc0034d7c
c0029721:	68 f0 00 00 00       	push   $0xf0
c0029726:	68 6c 4c 03 c0       	push   $0xc0034c6c
c002972b:	e8 fa 0d 00 00       	call   c002a52a <debug_panic>
c0029730:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0029734:	75 08                	jne    c002973e <strtok_r+0x62>
c0029736:	8b 45 10             	mov    0x10(%ebp),%eax
c0029739:	8b 00                	mov    (%eax),%eax
c002973b:	89 45 08             	mov    %eax,0x8(%ebp)
c002973e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0029742:	75 3e                	jne    c0029782 <strtok_r+0xa6>
c0029744:	83 ec 0c             	sub    $0xc,%esp
c0029747:	68 28 4d 03 c0       	push   $0xc0034d28
c002974c:	68 55 4c 03 c0       	push   $0xc0034c55
c0029751:	68 7c 4d 03 c0       	push   $0xc0034d7c
c0029756:	68 f6 00 00 00       	push   $0xf6
c002975b:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029760:	e8 c5 0d 00 00       	call   c002a52a <debug_panic>
c0029765:	8b 45 08             	mov    0x8(%ebp),%eax
c0029768:	0f b6 00             	movzbl (%eax),%eax
c002976b:	84 c0                	test   %al,%al
c002976d:	75 0f                	jne    c002977e <strtok_r+0xa2>
c002976f:	8b 45 10             	mov    0x10(%ebp),%eax
c0029772:	8b 55 08             	mov    0x8(%ebp),%edx
c0029775:	89 10                	mov    %edx,(%eax)
c0029777:	b8 00 00 00 00       	mov    $0x0,%eax
c002977c:	eb 70                	jmp    c00297ee <strtok_r+0x112>
c002977e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0029782:	8b 45 08             	mov    0x8(%ebp),%eax
c0029785:	0f b6 00             	movzbl (%eax),%eax
c0029788:	0f be c0             	movsbl %al,%eax
c002978b:	83 ec 08             	sub    $0x8,%esp
c002978e:	50                   	push   %eax
c002978f:	ff 75 0c             	pushl  0xc(%ebp)
c0029792:	e8 68 fd ff ff       	call   c00294ff <strchr>
c0029797:	83 c4 10             	add    $0x10,%esp
c002979a:	85 c0                	test   %eax,%eax
c002979c:	75 c7                	jne    c0029765 <strtok_r+0x89>
c002979e:	8b 45 08             	mov    0x8(%ebp),%eax
c00297a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00297a4:	eb 04                	jmp    c00297aa <strtok_r+0xce>
c00297a6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00297aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00297ad:	0f b6 00             	movzbl (%eax),%eax
c00297b0:	0f be c0             	movsbl %al,%eax
c00297b3:	83 ec 08             	sub    $0x8,%esp
c00297b6:	50                   	push   %eax
c00297b7:	ff 75 0c             	pushl  0xc(%ebp)
c00297ba:	e8 40 fd ff ff       	call   c00294ff <strchr>
c00297bf:	83 c4 10             	add    $0x10,%esp
c00297c2:	85 c0                	test   %eax,%eax
c00297c4:	74 e0                	je     c00297a6 <strtok_r+0xca>
c00297c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00297c9:	0f b6 00             	movzbl (%eax),%eax
c00297cc:	84 c0                	test   %al,%al
c00297ce:	74 13                	je     c00297e3 <strtok_r+0x107>
c00297d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00297d3:	c6 00 00             	movb   $0x0,(%eax)
c00297d6:	8b 45 08             	mov    0x8(%ebp),%eax
c00297d9:	8d 50 01             	lea    0x1(%eax),%edx
c00297dc:	8b 45 10             	mov    0x10(%ebp),%eax
c00297df:	89 10                	mov    %edx,(%eax)
c00297e1:	eb 08                	jmp    c00297eb <strtok_r+0x10f>
c00297e3:	8b 45 10             	mov    0x10(%ebp),%eax
c00297e6:	8b 55 08             	mov    0x8(%ebp),%edx
c00297e9:	89 10                	mov    %edx,(%eax)
c00297eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00297ee:	c9                   	leave  
c00297ef:	c3                   	ret    

c00297f0 <memset>:
c00297f0:	55                   	push   %ebp
c00297f1:	89 e5                	mov    %esp,%ebp
c00297f3:	83 ec 18             	sub    $0x18,%esp
c00297f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00297f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00297fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0029800:	75 35                	jne    c0029837 <memset+0x47>
c0029802:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029806:	74 2f                	je     c0029837 <memset+0x47>
c0029808:	83 ec 0c             	sub    $0xc,%esp
c002980b:	68 3c 4c 03 c0       	push   $0xc0034c3c
c0029810:	68 55 4c 03 c0       	push   $0xc0034c55
c0029815:	68 88 4d 03 c0       	push   $0xc0034d88
c002981a:	68 1b 01 00 00       	push   $0x11b
c002981f:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029824:	e8 01 0d 00 00       	call   c002a52a <debug_panic>
c0029829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002982c:	8d 50 01             	lea    0x1(%eax),%edx
c002982f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029832:	8b 55 0c             	mov    0xc(%ebp),%edx
c0029835:	88 10                	mov    %dl,(%eax)
c0029837:	8b 45 10             	mov    0x10(%ebp),%eax
c002983a:	8d 50 ff             	lea    -0x1(%eax),%edx
c002983d:	89 55 10             	mov    %edx,0x10(%ebp)
c0029840:	85 c0                	test   %eax,%eax
c0029842:	75 e5                	jne    c0029829 <memset+0x39>
c0029844:	8b 45 08             	mov    0x8(%ebp),%eax
c0029847:	c9                   	leave  
c0029848:	c3                   	ret    

c0029849 <strlen>:
c0029849:	55                   	push   %ebp
c002984a:	89 e5                	mov    %esp,%ebp
c002984c:	83 ec 18             	sub    $0x18,%esp
c002984f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0029853:	75 21                	jne    c0029876 <strlen+0x2d>
c0029855:	83 ec 0c             	sub    $0xc,%esp
c0029858:	68 f5 4c 03 c0       	push   $0xc0034cf5
c002985d:	68 55 4c 03 c0       	push   $0xc0034c55
c0029862:	68 90 4d 03 c0       	push   $0xc0034d90
c0029867:	68 29 01 00 00       	push   $0x129
c002986c:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029871:	e8 b4 0c 00 00       	call   c002a52a <debug_panic>
c0029876:	8b 45 08             	mov    0x8(%ebp),%eax
c0029879:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002987c:	eb 04                	jmp    c0029882 <strlen+0x39>
c002987e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0029882:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029885:	0f b6 00             	movzbl (%eax),%eax
c0029888:	84 c0                	test   %al,%al
c002988a:	75 f2                	jne    c002987e <strlen+0x35>
c002988c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002988f:	8b 45 08             	mov    0x8(%ebp),%eax
c0029892:	29 c2                	sub    %eax,%edx
c0029894:	89 d0                	mov    %edx,%eax
c0029896:	c9                   	leave  
c0029897:	c3                   	ret    

c0029898 <strnlen>:
c0029898:	55                   	push   %ebp
c0029899:	89 e5                	mov    %esp,%ebp
c002989b:	83 ec 10             	sub    $0x10,%esp
c002989e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c00298a5:	eb 04                	jmp    c00298ab <strnlen+0x13>
c00298a7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c00298ab:	8b 55 08             	mov    0x8(%ebp),%edx
c00298ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00298b1:	01 d0                	add    %edx,%eax
c00298b3:	0f b6 00             	movzbl (%eax),%eax
c00298b6:	84 c0                	test   %al,%al
c00298b8:	74 08                	je     c00298c2 <strnlen+0x2a>
c00298ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00298bd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00298c0:	72 e5                	jb     c00298a7 <strnlen+0xf>
c00298c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00298c5:	c9                   	leave  
c00298c6:	c3                   	ret    

c00298c7 <strlcpy>:
c00298c7:	55                   	push   %ebp
c00298c8:	89 e5                	mov    %esp,%ebp
c00298ca:	83 ec 18             	sub    $0x18,%esp
c00298cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00298d1:	75 21                	jne    c00298f4 <strlcpy+0x2d>
c00298d3:	83 ec 0c             	sub    $0xc,%esp
c00298d6:	68 32 4d 03 c0       	push   $0xc0034d32
c00298db:	68 55 4c 03 c0       	push   $0xc0034c55
c00298e0:	68 98 4d 03 c0       	push   $0xc0034d98
c00298e5:	68 4a 01 00 00       	push   $0x14a
c00298ea:	68 6c 4c 03 c0       	push   $0xc0034c6c
c00298ef:	e8 36 0c 00 00       	call   c002a52a <debug_panic>
c00298f4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00298f8:	75 21                	jne    c002991b <strlcpy+0x54>
c00298fa:	83 ec 0c             	sub    $0xc,%esp
c00298fd:	68 3e 4d 03 c0       	push   $0xc0034d3e
c0029902:	68 55 4c 03 c0       	push   $0xc0034c55
c0029907:	68 98 4d 03 c0       	push   $0xc0034d98
c002990c:	68 4b 01 00 00       	push   $0x14b
c0029911:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029916:	e8 0f 0c 00 00       	call   c002a52a <debug_panic>
c002991b:	83 ec 0c             	sub    $0xc,%esp
c002991e:	ff 75 0c             	pushl  0xc(%ebp)
c0029921:	e8 23 ff ff ff       	call   c0029849 <strlen>
c0029926:	83 c4 10             	add    $0x10,%esp
c0029929:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002992c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0029930:	74 36                	je     c0029968 <strlcpy+0xa1>
c0029932:	8b 45 10             	mov    0x10(%ebp),%eax
c0029935:	83 e8 01             	sub    $0x1,%eax
c0029938:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002993b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002993e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0029941:	73 06                	jae    c0029949 <strlcpy+0x82>
c0029943:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029946:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029949:	83 ec 04             	sub    $0x4,%esp
c002994c:	ff 75 f4             	pushl  -0xc(%ebp)
c002994f:	ff 75 0c             	pushl  0xc(%ebp)
c0029952:	ff 75 08             	pushl  0x8(%ebp)
c0029955:	e8 90 f8 ff ff       	call   c00291ea <memcpy>
c002995a:	83 c4 10             	add    $0x10,%esp
c002995d:	8b 55 08             	mov    0x8(%ebp),%edx
c0029960:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029963:	01 d0                	add    %edx,%eax
c0029965:	c6 00 00             	movb   $0x0,(%eax)
c0029968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002996b:	c9                   	leave  
c002996c:	c3                   	ret    

c002996d <strlcat>:
c002996d:	55                   	push   %ebp
c002996e:	89 e5                	mov    %esp,%ebp
c0029970:	83 ec 18             	sub    $0x18,%esp
c0029973:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0029977:	75 21                	jne    c002999a <strlcat+0x2d>
c0029979:	83 ec 0c             	sub    $0xc,%esp
c002997c:	68 32 4d 03 c0       	push   $0xc0034d32
c0029981:	68 55 4c 03 c0       	push   $0xc0034c55
c0029986:	68 a0 4d 03 c0       	push   $0xc0034da0
c002998b:	68 68 01 00 00       	push   $0x168
c0029990:	68 6c 4c 03 c0       	push   $0xc0034c6c
c0029995:	e8 90 0b 00 00       	call   c002a52a <debug_panic>
c002999a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002999e:	75 21                	jne    c00299c1 <strlcat+0x54>
c00299a0:	83 ec 0c             	sub    $0xc,%esp
c00299a3:	68 3e 4d 03 c0       	push   $0xc0034d3e
c00299a8:	68 55 4c 03 c0       	push   $0xc0034c55
c00299ad:	68 a0 4d 03 c0       	push   $0xc0034da0
c00299b2:	68 69 01 00 00       	push   $0x169
c00299b7:	68 6c 4c 03 c0       	push   $0xc0034c6c
c00299bc:	e8 69 0b 00 00       	call   c002a52a <debug_panic>
c00299c1:	83 ec 0c             	sub    $0xc,%esp
c00299c4:	ff 75 0c             	pushl  0xc(%ebp)
c00299c7:	e8 7d fe ff ff       	call   c0029849 <strlen>
c00299cc:	83 c4 10             	add    $0x10,%esp
c00299cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00299d2:	83 ec 0c             	sub    $0xc,%esp
c00299d5:	ff 75 08             	pushl  0x8(%ebp)
c00299d8:	e8 6c fe ff ff       	call   c0029849 <strlen>
c00299dd:	83 c4 10             	add    $0x10,%esp
c00299e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00299e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00299e7:	74 4c                	je     c0029a35 <strlcat+0xc8>
c00299e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00299ec:	3b 45 10             	cmp    0x10(%ebp),%eax
c00299ef:	73 44                	jae    c0029a35 <strlcat+0xc8>
c00299f1:	8b 45 10             	mov    0x10(%ebp),%eax
c00299f4:	2b 45 ec             	sub    -0x14(%ebp),%eax
c00299f7:	83 e8 01             	sub    $0x1,%eax
c00299fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00299fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029a00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0029a03:	73 06                	jae    c0029a0b <strlcat+0x9e>
c0029a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029a08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029a0b:	8b 55 08             	mov    0x8(%ebp),%edx
c0029a0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0029a11:	01 d0                	add    %edx,%eax
c0029a13:	83 ec 04             	sub    $0x4,%esp
c0029a16:	ff 75 f4             	pushl  -0xc(%ebp)
c0029a19:	ff 75 0c             	pushl  0xc(%ebp)
c0029a1c:	50                   	push   %eax
c0029a1d:	e8 c8 f7 ff ff       	call   c00291ea <memcpy>
c0029a22:	83 c4 10             	add    $0x10,%esp
c0029a25:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0029a2b:	01 c2                	add    %eax,%edx
c0029a2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0029a30:	01 d0                	add    %edx,%eax
c0029a32:	c6 00 00             	movb   $0x0,(%eax)
c0029a35:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0029a38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0029a3b:	01 d0                	add    %edx,%eax
c0029a3d:	c9                   	leave  
c0029a3e:	c3                   	ret    

c0029a3f <divl>:
c0029a3f:	55                   	push   %ebp
c0029a40:	89 e5                	mov    %esp,%ebp
c0029a42:	83 ec 18             	sub    $0x18,%esp
c0029a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0029a48:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029a4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029a4e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029a51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029a54:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029a57:	89 d0                	mov    %edx,%eax
c0029a59:	31 d2                	xor    %edx,%edx
c0029a5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029a5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029a61:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029a64:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0029a67:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029a6a:	f7 75 10             	divl   0x10(%ebp)
c0029a6d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029a76:	c9                   	leave  
c0029a77:	c3                   	ret    

c0029a78 <nlz>:
c0029a78:	55                   	push   %ebp
c0029a79:	89 e5                	mov    %esp,%ebp
c0029a7b:	83 ec 10             	sub    $0x10,%esp
c0029a7e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0029a85:	81 7d 08 ff ff 00 00 	cmpl   $0xffff,0x8(%ebp)
c0029a8c:	77 08                	ja     c0029a96 <nlz+0x1e>
c0029a8e:	83 45 fc 10          	addl   $0x10,-0x4(%ebp)
c0029a92:	c1 65 08 10          	shll   $0x10,0x8(%ebp)
c0029a96:	81 7d 08 ff ff ff 00 	cmpl   $0xffffff,0x8(%ebp)
c0029a9d:	77 08                	ja     c0029aa7 <nlz+0x2f>
c0029a9f:	83 45 fc 08          	addl   $0x8,-0x4(%ebp)
c0029aa3:	c1 65 08 08          	shll   $0x8,0x8(%ebp)
c0029aa7:	81 7d 08 ff ff ff 0f 	cmpl   $0xfffffff,0x8(%ebp)
c0029aae:	77 08                	ja     c0029ab8 <nlz+0x40>
c0029ab0:	83 45 fc 04          	addl   $0x4,-0x4(%ebp)
c0029ab4:	c1 65 08 04          	shll   $0x4,0x8(%ebp)
c0029ab8:	81 7d 08 ff ff ff 3f 	cmpl   $0x3fffffff,0x8(%ebp)
c0029abf:	77 08                	ja     c0029ac9 <nlz+0x51>
c0029ac1:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
c0029ac5:	c1 65 08 02          	shll   $0x2,0x8(%ebp)
c0029ac9:	8b 45 08             	mov    0x8(%ebp),%eax
c0029acc:	85 c0                	test   %eax,%eax
c0029ace:	78 04                	js     c0029ad4 <nlz+0x5c>
c0029ad0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0029ad4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0029ad7:	c9                   	leave  
c0029ad8:	c3                   	ret    

c0029ad9 <udiv64>:
c0029ad9:	55                   	push   %ebp
c0029ada:	89 e5                	mov    %esp,%ebp
c0029adc:	57                   	push   %edi
c0029add:	56                   	push   %esi
c0029ade:	53                   	push   %ebx
c0029adf:	83 ec 44             	sub    $0x44,%esp
c0029ae2:	8b 45 08             	mov    0x8(%ebp),%eax
c0029ae5:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0029ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029aeb:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0029aee:	8b 45 10             	mov    0x10(%ebp),%eax
c0029af1:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0029af4:	8b 45 14             	mov    0x14(%ebp),%eax
c0029af7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0029afa:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029afd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0029b00:	89 d0                	mov    %edx,%eax
c0029b02:	31 d2                	xor    %edx,%edx
c0029b04:	09 d0                	or     %edx,%eax
c0029b06:	85 c0                	test   %eax,%eax
c0029b08:	0f 85 a3 00 00 00    	jne    c0029bb1 <udiv64+0xd8>
c0029b0e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0029b15:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0029b1c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029b1f:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0029b22:	89 d0                	mov    %edx,%eax
c0029b24:	31 d2                	xor    %edx,%edx
c0029b26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0029b29:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029b2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0029b2f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029b32:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0029b35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0029b38:	ba 00 00 00 00       	mov    $0x0,%edx
c0029b3d:	f7 75 dc             	divl   -0x24(%ebp)
c0029b40:	89 d0                	mov    %edx,%eax
c0029b42:	ba 00 00 00 00       	mov    $0x0,%edx
c0029b47:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0029b4a:	89 cb                	mov    %ecx,%ebx
c0029b4c:	0f af da             	imul   %edx,%ebx
c0029b4f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0029b52:	0f af c8             	imul   %eax,%ecx
c0029b55:	01 d9                	add    %ebx,%ecx
c0029b57:	f7 65 e8             	mull   -0x18(%ebp)
c0029b5a:	01 d1                	add    %edx,%ecx
c0029b5c:	89 ca                	mov    %ecx,%edx
c0029b5e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0029b61:	bb 00 00 00 00       	mov    $0x0,%ebx
c0029b66:	01 c8                	add    %ecx,%eax
c0029b68:	11 da                	adc    %ebx,%edx
c0029b6a:	83 ec 04             	sub    $0x4,%esp
c0029b6d:	ff 75 dc             	pushl  -0x24(%ebp)
c0029b70:	52                   	push   %edx
c0029b71:	50                   	push   %eax
c0029b72:	e8 c8 fe ff ff       	call   c0029a3f <divl>
c0029b77:	83 c4 10             	add    $0x10,%esp
c0029b7a:	89 c6                	mov    %eax,%esi
c0029b7c:	bf 00 00 00 00       	mov    $0x0,%edi
c0029b81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0029b84:	ba 00 00 00 00       	mov    $0x0,%edx
c0029b89:	f7 75 dc             	divl   -0x24(%ebp)
c0029b8c:	ba 00 00 00 00       	mov    $0x0,%edx
c0029b91:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0029b94:	89 cb                	mov    %ecx,%ebx
c0029b96:	0f af da             	imul   %edx,%ebx
c0029b99:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0029b9c:	0f af c8             	imul   %eax,%ecx
c0029b9f:	01 d9                	add    %ebx,%ecx
c0029ba1:	f7 65 e8             	mull   -0x18(%ebp)
c0029ba4:	01 d1                	add    %edx,%ecx
c0029ba6:	89 ca                	mov    %ecx,%edx
c0029ba8:	01 f0                	add    %esi,%eax
c0029baa:	11 fa                	adc    %edi,%edx
c0029bac:	e9 e8 00 00 00       	jmp    c0029c99 <udiv64+0x1c0>
c0029bb1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029bb4:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0029bb7:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029bba:	77 19                	ja     c0029bd5 <udiv64+0xfc>
c0029bbc:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029bbf:	72 05                	jb     c0029bc6 <udiv64+0xed>
c0029bc1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0029bc4:	73 0f                	jae    c0029bd5 <udiv64+0xfc>
c0029bc6:	b8 00 00 00 00       	mov    $0x0,%eax
c0029bcb:	ba 00 00 00 00       	mov    $0x0,%edx
c0029bd0:	e9 c4 00 00 00       	jmp    c0029c99 <udiv64+0x1c0>
c0029bd5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029bd8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0029bdb:	89 d0                	mov    %edx,%eax
c0029bdd:	31 d2                	xor    %edx,%edx
c0029bdf:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0029be2:	83 ec 04             	sub    $0x4,%esp
c0029be5:	ff 75 d8             	pushl  -0x28(%ebp)
c0029be8:	e8 8b fe ff ff       	call   c0029a78 <nlz>
c0029bed:	83 c4 08             	add    $0x8,%esp
c0029bf0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0029bf3:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0029bf6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0029bf9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0029bfc:	0f a5 c2             	shld   %cl,%eax,%edx
c0029bff:	d3 e0                	shl    %cl,%eax
c0029c01:	f6 c1 20             	test   $0x20,%cl
c0029c04:	74 04                	je     c0029c0a <udiv64+0x131>
c0029c06:	89 c2                	mov    %eax,%edx
c0029c08:	31 c0                	xor    %eax,%eax
c0029c0a:	89 d0                	mov    %edx,%eax
c0029c0c:	31 d2                	xor    %edx,%edx
c0029c0e:	89 c1                	mov    %eax,%ecx
c0029c10:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0029c13:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0029c16:	0f ac d0 01          	shrd   $0x1,%edx,%eax
c0029c1a:	d1 ea                	shr    %edx
c0029c1c:	83 ec 04             	sub    $0x4,%esp
c0029c1f:	51                   	push   %ecx
c0029c20:	52                   	push   %edx
c0029c21:	50                   	push   %eax
c0029c22:	e8 18 fe ff ff       	call   c0029a3f <divl>
c0029c27:	83 c4 10             	add    $0x10,%esp
c0029c2a:	89 c2                	mov    %eax,%edx
c0029c2c:	b8 1f 00 00 00       	mov    $0x1f,%eax
c0029c31:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0029c34:	89 c1                	mov    %eax,%ecx
c0029c36:	d3 ea                	shr    %cl,%edx
c0029c38:	89 d0                	mov    %edx,%eax
c0029c3a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0029c3d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c0029c44:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0029c47:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0029c4a:	83 c0 ff             	add    $0xffffffff,%eax
c0029c4d:	83 d2 ff             	adc    $0xffffffff,%edx
c0029c50:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0029c53:	89 cb                	mov    %ecx,%ebx
c0029c55:	0f af da             	imul   %edx,%ebx
c0029c58:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c0029c5b:	0f af c8             	imul   %eax,%ecx
c0029c5e:	01 d9                	add    %ebx,%ecx
c0029c60:	f7 65 b0             	mull   -0x50(%ebp)
c0029c63:	01 d1                	add    %edx,%ecx
c0029c65:	89 ca                	mov    %ecx,%edx
c0029c67:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0029c6a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
c0029c6d:	29 c1                	sub    %eax,%ecx
c0029c6f:	19 d3                	sbb    %edx,%ebx
c0029c71:	89 c8                	mov    %ecx,%eax
c0029c73:	89 da                	mov    %ebx,%edx
c0029c75:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029c78:	77 18                	ja     c0029c92 <udiv64+0x1b9>
c0029c7a:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0029c7d:	72 05                	jb     c0029c84 <udiv64+0x1ab>
c0029c7f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0029c82:	73 0e                	jae    c0029c92 <udiv64+0x1b9>
c0029c84:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0029c87:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0029c8a:	83 c0 ff             	add    $0xffffffff,%eax
c0029c8d:	83 d2 ff             	adc    $0xffffffff,%edx
c0029c90:	eb 06                	jmp    c0029c98 <udiv64+0x1bf>
c0029c92:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0029c95:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0029c98:	90                   	nop
c0029c99:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0029c9c:	5b                   	pop    %ebx
c0029c9d:	5e                   	pop    %esi
c0029c9e:	5f                   	pop    %edi
c0029c9f:	5d                   	pop    %ebp
c0029ca0:	c3                   	ret    

c0029ca1 <umod64>:
c0029ca1:	55                   	push   %ebp
c0029ca2:	89 e5                	mov    %esp,%ebp
c0029ca4:	53                   	push   %ebx
c0029ca5:	83 ec 14             	sub    $0x14,%esp
c0029ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0029cab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029cae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029cb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029cb4:	8b 45 10             	mov    0x10(%ebp),%eax
c0029cb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029cba:	8b 45 14             	mov    0x14(%ebp),%eax
c0029cbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029cc0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0029cc3:	ff 75 ec             	pushl  -0x14(%ebp)
c0029cc6:	ff 75 e8             	pushl  -0x18(%ebp)
c0029cc9:	ff 75 f4             	pushl  -0xc(%ebp)
c0029ccc:	ff 75 f0             	pushl  -0x10(%ebp)
c0029ccf:	e8 05 fe ff ff       	call   c0029ad9 <udiv64>
c0029cd4:	83 c4 10             	add    $0x10,%esp
c0029cd7:	89 c2                	mov    %eax,%edx
c0029cd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029cdc:	0f af c2             	imul   %edx,%eax
c0029cdf:	29 c3                	sub    %eax,%ebx
c0029ce1:	89 d8                	mov    %ebx,%eax
c0029ce3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0029ce6:	c9                   	leave  
c0029ce7:	c3                   	ret    

c0029ce8 <sdiv64>:
c0029ce8:	55                   	push   %ebp
c0029ce9:	89 e5                	mov    %esp,%ebp
c0029ceb:	83 ec 30             	sub    $0x30,%esp
c0029cee:	8b 45 08             	mov    0x8(%ebp),%eax
c0029cf1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0029cf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029cf7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0029cfa:	8b 45 10             	mov    0x10(%ebp),%eax
c0029cfd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0029d00:	8b 45 14             	mov    0x14(%ebp),%eax
c0029d03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0029d06:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0029d0a:	79 0f                	jns    c0029d1b <sdiv64+0x33>
c0029d0c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0029d0f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0029d12:	f7 d8                	neg    %eax
c0029d14:	83 d2 00             	adc    $0x0,%edx
c0029d17:	f7 da                	neg    %edx
c0029d19:	eb 06                	jmp    c0029d21 <sdiv64+0x39>
c0029d1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0029d1e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0029d21:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029d24:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0029d27:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0029d2b:	79 0f                	jns    c0029d3c <sdiv64+0x54>
c0029d2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0029d30:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0029d33:	f7 d8                	neg    %eax
c0029d35:	83 d2 00             	adc    $0x0,%edx
c0029d38:	f7 da                	neg    %edx
c0029d3a:	eb 06                	jmp    c0029d42 <sdiv64+0x5a>
c0029d3c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0029d3f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0029d42:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029d45:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0029d48:	ff 75 f4             	pushl  -0xc(%ebp)
c0029d4b:	ff 75 f0             	pushl  -0x10(%ebp)
c0029d4e:	ff 75 fc             	pushl  -0x4(%ebp)
c0029d51:	ff 75 f8             	pushl  -0x8(%ebp)
c0029d54:	e8 80 fd ff ff       	call   c0029ad9 <udiv64>
c0029d59:	83 c4 10             	add    $0x10,%esp
c0029d5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029d5f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0029d62:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0029d65:	f7 d0                	not    %eax
c0029d67:	c1 e8 1f             	shr    $0x1f,%eax
c0029d6a:	89 c2                	mov    %eax,%edx
c0029d6c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0029d6f:	c1 e8 1f             	shr    $0x1f,%eax
c0029d72:	31 d0                	xor    %edx,%eax
c0029d74:	84 c0                	test   %al,%al
c0029d76:	74 08                	je     c0029d80 <sdiv64+0x98>
c0029d78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029d7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029d7e:	eb 0d                	jmp    c0029d8d <sdiv64+0xa5>
c0029d80:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029d83:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0029d86:	f7 d8                	neg    %eax
c0029d88:	83 d2 00             	adc    $0x0,%edx
c0029d8b:	f7 da                	neg    %edx
c0029d8d:	c9                   	leave  
c0029d8e:	c3                   	ret    

c0029d8f <smod64>:
c0029d8f:	55                   	push   %ebp
c0029d90:	89 e5                	mov    %esp,%ebp
c0029d92:	53                   	push   %ebx
c0029d93:	83 ec 14             	sub    $0x14,%esp
c0029d96:	8b 45 08             	mov    0x8(%ebp),%eax
c0029d99:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029d9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029da2:	8b 45 10             	mov    0x10(%ebp),%eax
c0029da5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0029da8:	8b 45 14             	mov    0x14(%ebp),%eax
c0029dab:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029dae:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0029db1:	ff 75 ec             	pushl  -0x14(%ebp)
c0029db4:	ff 75 e8             	pushl  -0x18(%ebp)
c0029db7:	ff 75 f4             	pushl  -0xc(%ebp)
c0029dba:	ff 75 f0             	pushl  -0x10(%ebp)
c0029dbd:	e8 26 ff ff ff       	call   c0029ce8 <sdiv64>
c0029dc2:	83 c4 10             	add    $0x10,%esp
c0029dc5:	89 c2                	mov    %eax,%edx
c0029dc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0029dca:	0f af c2             	imul   %edx,%eax
c0029dcd:	29 c3                	sub    %eax,%ebx
c0029dcf:	89 d8                	mov    %ebx,%eax
c0029dd1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0029dd4:	c9                   	leave  
c0029dd5:	c3                   	ret    

c0029dd6 <__divdi3>:
c0029dd6:	55                   	push   %ebp
c0029dd7:	89 e5                	mov    %esp,%ebp
c0029dd9:	83 ec 10             	sub    $0x10,%esp
c0029ddc:	8b 45 08             	mov    0x8(%ebp),%eax
c0029ddf:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029de2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029de5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029de8:	8b 45 10             	mov    0x10(%ebp),%eax
c0029deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029dee:	8b 45 14             	mov    0x14(%ebp),%eax
c0029df1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029df4:	ff 75 f4             	pushl  -0xc(%ebp)
c0029df7:	ff 75 f0             	pushl  -0x10(%ebp)
c0029dfa:	ff 75 fc             	pushl  -0x4(%ebp)
c0029dfd:	ff 75 f8             	pushl  -0x8(%ebp)
c0029e00:	e8 e3 fe ff ff       	call   c0029ce8 <sdiv64>
c0029e05:	83 c4 10             	add    $0x10,%esp
c0029e08:	c9                   	leave  
c0029e09:	c3                   	ret    

c0029e0a <__moddi3>:
c0029e0a:	55                   	push   %ebp
c0029e0b:	89 e5                	mov    %esp,%ebp
c0029e0d:	83 ec 10             	sub    $0x10,%esp
c0029e10:	8b 45 08             	mov    0x8(%ebp),%eax
c0029e13:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029e16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029e19:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029e1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0029e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029e22:	8b 45 14             	mov    0x14(%ebp),%eax
c0029e25:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029e28:	ff 75 f4             	pushl  -0xc(%ebp)
c0029e2b:	ff 75 f0             	pushl  -0x10(%ebp)
c0029e2e:	ff 75 fc             	pushl  -0x4(%ebp)
c0029e31:	ff 75 f8             	pushl  -0x8(%ebp)
c0029e34:	e8 56 ff ff ff       	call   c0029d8f <smod64>
c0029e39:	83 c4 10             	add    $0x10,%esp
c0029e3c:	99                   	cltd   
c0029e3d:	c9                   	leave  
c0029e3e:	c3                   	ret    

c0029e3f <__udivdi3>:
c0029e3f:	55                   	push   %ebp
c0029e40:	89 e5                	mov    %esp,%ebp
c0029e42:	83 ec 10             	sub    $0x10,%esp
c0029e45:	8b 45 08             	mov    0x8(%ebp),%eax
c0029e48:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029e4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029e51:	8b 45 10             	mov    0x10(%ebp),%eax
c0029e54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029e57:	8b 45 14             	mov    0x14(%ebp),%eax
c0029e5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029e5d:	ff 75 f4             	pushl  -0xc(%ebp)
c0029e60:	ff 75 f0             	pushl  -0x10(%ebp)
c0029e63:	ff 75 fc             	pushl  -0x4(%ebp)
c0029e66:	ff 75 f8             	pushl  -0x8(%ebp)
c0029e69:	e8 6b fc ff ff       	call   c0029ad9 <udiv64>
c0029e6e:	83 c4 10             	add    $0x10,%esp
c0029e71:	c9                   	leave  
c0029e72:	c3                   	ret    

c0029e73 <__umoddi3>:
c0029e73:	55                   	push   %ebp
c0029e74:	89 e5                	mov    %esp,%ebp
c0029e76:	83 ec 10             	sub    $0x10,%esp
c0029e79:	8b 45 08             	mov    0x8(%ebp),%eax
c0029e7c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0029e7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0029e82:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0029e85:	8b 45 10             	mov    0x10(%ebp),%eax
c0029e88:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0029e8b:	8b 45 14             	mov    0x14(%ebp),%eax
c0029e8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029e91:	ff 75 f4             	pushl  -0xc(%ebp)
c0029e94:	ff 75 f0             	pushl  -0x10(%ebp)
c0029e97:	ff 75 fc             	pushl  -0x4(%ebp)
c0029e9a:	ff 75 f8             	pushl  -0x8(%ebp)
c0029e9d:	e8 ff fd ff ff       	call   c0029ca1 <umod64>
c0029ea2:	83 c4 10             	add    $0x10,%esp
c0029ea5:	ba 00 00 00 00       	mov    $0x0,%edx
c0029eaa:	c9                   	leave  
c0029eab:	c3                   	ret    

c0029eac <calculate_chksum>:
c0029eac:	55                   	push   %ebp
c0029ead:	89 e5                	mov    %esp,%ebp
c0029eaf:	83 ec 20             	sub    $0x20,%esp
c0029eb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0029eb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029eb8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0029ebf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0029ec6:	eb 5a                	jmp    c0029f22 <calculate_chksum+0x76>
c0029ec8:	c7 45 f0 94 00 00 00 	movl   $0x94,-0x10(%ebp)
c0029ecf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0029ed2:	83 c0 08             	add    $0x8,%eax
c0029ed5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0029ed8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029edb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0029ede:	72 0f                	jb     c0029eef <calculate_chksum+0x43>
c0029ee0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029ee3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0029ee6:	73 07                	jae    c0029eef <calculate_chksum+0x43>
c0029ee8:	b8 01 00 00 00       	mov    $0x1,%eax
c0029eed:	eb 05                	jmp    c0029ef4 <calculate_chksum+0x48>
c0029eef:	b8 00 00 00 00       	mov    $0x0,%eax
c0029ef4:	88 45 eb             	mov    %al,-0x15(%ebp)
c0029ef7:	80 65 eb 01          	andb   $0x1,-0x15(%ebp)
c0029efb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0029eff:	83 f0 01             	xor    $0x1,%eax
c0029f02:	84 c0                	test   %al,%al
c0029f04:	74 10                	je     c0029f16 <calculate_chksum+0x6a>
c0029f06:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0029f09:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0029f0c:	01 d0                	add    %edx,%eax
c0029f0e:	0f b6 00             	movzbl (%eax),%eax
c0029f11:	0f b6 c0             	movzbl %al,%eax
c0029f14:	eb 05                	jmp    c0029f1b <calculate_chksum+0x6f>
c0029f16:	b8 20 00 00 00       	mov    $0x20,%eax
c0029f1b:	01 45 fc             	add    %eax,-0x4(%ebp)
c0029f1e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0029f22:	81 7d f8 ff 01 00 00 	cmpl   $0x1ff,-0x8(%ebp)
c0029f29:	76 9d                	jbe    c0029ec8 <calculate_chksum+0x1c>
c0029f2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0029f2e:	c9                   	leave  
c0029f2f:	c3                   	ret    

c0029f30 <strip_antisocial_prefixes>:
c0029f30:	55                   	push   %ebp
c0029f31:	89 e5                	mov    %esp,%ebp
c0029f33:	83 ec 08             	sub    $0x8,%esp
c0029f36:	eb 16                	jmp    c0029f4e <strip_antisocial_prefixes+0x1e>
c0029f38:	83 ec 08             	sub    $0x8,%esp
c0029f3b:	6a 2f                	push   $0x2f
c0029f3d:	ff 75 08             	pushl  0x8(%ebp)
c0029f40:	e8 ba f5 ff ff       	call   c00294ff <strchr>
c0029f45:	83 c4 10             	add    $0x10,%esp
c0029f48:	83 c0 01             	add    $0x1,%eax
c0029f4b:	89 45 08             	mov    %eax,0x8(%ebp)
c0029f4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0029f51:	0f b6 00             	movzbl (%eax),%eax
c0029f54:	3c 2f                	cmp    $0x2f,%al
c0029f56:	74 e0                	je     c0029f38 <strip_antisocial_prefixes+0x8>
c0029f58:	83 ec 04             	sub    $0x4,%esp
c0029f5b:	6a 02                	push   $0x2
c0029f5d:	68 a8 4d 03 c0       	push   $0xc0034da8
c0029f62:	ff 75 08             	pushl  0x8(%ebp)
c0029f65:	e8 d8 f3 ff ff       	call   c0029342 <memcmp>
c0029f6a:	83 c4 10             	add    $0x10,%esp
c0029f6d:	85 c0                	test   %eax,%eax
c0029f6f:	74 c7                	je     c0029f38 <strip_antisocial_prefixes+0x8>
c0029f71:	83 ec 04             	sub    $0x4,%esp
c0029f74:	6a 03                	push   $0x3
c0029f76:	68 ab 4d 03 c0       	push   $0xc0034dab
c0029f7b:	ff 75 08             	pushl  0x8(%ebp)
c0029f7e:	e8 bf f3 ff ff       	call   c0029342 <memcmp>
c0029f83:	83 c4 10             	add    $0x10,%esp
c0029f86:	85 c0                	test   %eax,%eax
c0029f88:	74 ae                	je     c0029f38 <strip_antisocial_prefixes+0x8>
c0029f8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0029f8d:	0f b6 00             	movzbl (%eax),%eax
c0029f90:	84 c0                	test   %al,%al
c0029f92:	74 1c                	je     c0029fb0 <strip_antisocial_prefixes+0x80>
c0029f94:	83 ec 08             	sub    $0x8,%esp
c0029f97:	68 af 4d 03 c0       	push   $0xc0034daf
c0029f9c:	ff 75 08             	pushl  0x8(%ebp)
c0029f9f:	e8 4e f4 ff ff       	call   c00293f2 <strcmp>
c0029fa4:	83 c4 10             	add    $0x10,%esp
c0029fa7:	85 c0                	test   %eax,%eax
c0029fa9:	74 05                	je     c0029fb0 <strip_antisocial_prefixes+0x80>
c0029fab:	8b 45 08             	mov    0x8(%ebp),%eax
c0029fae:	eb 05                	jmp    c0029fb5 <strip_antisocial_prefixes+0x85>
c0029fb0:	b8 b2 4d 03 c0       	mov    $0xc0034db2,%eax
c0029fb5:	c9                   	leave  
c0029fb6:	c3                   	ret    

c0029fb7 <ustar_make_header>:
c0029fb7:	55                   	push   %ebp
c0029fb8:	89 e5                	mov    %esp,%ebp
c0029fba:	83 ec 18             	sub    $0x18,%esp
c0029fbd:	8b 45 14             	mov    0x14(%ebp),%eax
c0029fc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0029fc3:	83 7d 0c 30          	cmpl   $0x30,0xc(%ebp)
c0029fc7:	74 24                	je     c0029fed <ustar_make_header+0x36>
c0029fc9:	83 7d 0c 35          	cmpl   $0x35,0xc(%ebp)
c0029fcd:	74 1e                	je     c0029fed <ustar_make_header+0x36>
c0029fcf:	83 ec 0c             	sub    $0xc,%esp
c0029fd2:	68 b4 4d 03 c0       	push   $0xc0034db4
c0029fd7:	68 e5 4d 03 c0       	push   $0xc0034de5
c0029fdc:	68 e8 4e 03 c0       	push   $0xc0034ee8
c0029fe1:	6a 59                	push   $0x59
c0029fe3:	68 fc 4d 03 c0       	push   $0xc0034dfc
c0029fe8:	e8 3d 05 00 00       	call   c002a52a <debug_panic>
c0029fed:	83 ec 0c             	sub    $0xc,%esp
c0029ff0:	ff 75 08             	pushl  0x8(%ebp)
c0029ff3:	e8 38 ff ff ff       	call   c0029f30 <strip_antisocial_prefixes>
c0029ff8:	83 c4 10             	add    $0x10,%esp
c0029ffb:	89 45 08             	mov    %eax,0x8(%ebp)
c0029ffe:	83 ec 0c             	sub    $0xc,%esp
c002a001:	ff 75 08             	pushl  0x8(%ebp)
c002a004:	e8 40 f8 ff ff       	call   c0029849 <strlen>
c002a009:	83 c4 10             	add    $0x10,%esp
c002a00c:	83 f8 63             	cmp    $0x63,%eax
c002a00f:	76 1d                	jbe    c002a02e <ustar_make_header+0x77>
c002a011:	83 ec 08             	sub    $0x8,%esp
c002a014:	ff 75 08             	pushl  0x8(%ebp)
c002a017:	68 0e 4e 03 c0       	push   $0xc0034e0e
c002a01c:	e8 a8 df ff ff       	call   c0027fc9 <printf>
c002a021:	83 c4 10             	add    $0x10,%esp
c002a024:	b8 00 00 00 00       	mov    $0x0,%eax
c002a029:	e9 64 01 00 00       	jmp    c002a192 <ustar_make_header+0x1db>
c002a02e:	83 ec 04             	sub    $0x4,%esp
c002a031:	68 00 02 00 00       	push   $0x200
c002a036:	6a 00                	push   $0x0
c002a038:	ff 75 f4             	pushl  -0xc(%ebp)
c002a03b:	e8 b0 f7 ff ff       	call   c00297f0 <memset>
c002a040:	83 c4 10             	add    $0x10,%esp
c002a043:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a046:	83 ec 04             	sub    $0x4,%esp
c002a049:	6a 64                	push   $0x64
c002a04b:	ff 75 08             	pushl  0x8(%ebp)
c002a04e:	50                   	push   %eax
c002a04f:	e8 73 f8 ff ff       	call   c00298c7 <strlcpy>
c002a054:	83 c4 10             	add    $0x10,%esp
c002a057:	83 7d 0c 30          	cmpl   $0x30,0xc(%ebp)
c002a05b:	75 07                	jne    c002a064 <ustar_make_header+0xad>
c002a05d:	ba a4 01 00 00       	mov    $0x1a4,%edx
c002a062:	eb 05                	jmp    c002a069 <ustar_make_header+0xb2>
c002a064:	ba ed 01 00 00       	mov    $0x1ed,%edx
c002a069:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a06c:	83 c0 64             	add    $0x64,%eax
c002a06f:	52                   	push   %edx
c002a070:	68 26 4e 03 c0       	push   $0xc0034e26
c002a075:	6a 08                	push   $0x8
c002a077:	50                   	push   %eax
c002a078:	e8 23 df ff ff       	call   c0027fa0 <snprintf>
c002a07d:	83 c4 10             	add    $0x10,%esp
c002a080:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a083:	83 c0 6c             	add    $0x6c,%eax
c002a086:	83 ec 04             	sub    $0x4,%esp
c002a089:	6a 08                	push   $0x8
c002a08b:	68 2b 4e 03 c0       	push   $0xc0034e2b
c002a090:	50                   	push   %eax
c002a091:	e8 31 f8 ff ff       	call   c00298c7 <strlcpy>
c002a096:	83 c4 10             	add    $0x10,%esp
c002a099:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a09c:	83 c0 74             	add    $0x74,%eax
c002a09f:	83 ec 04             	sub    $0x4,%esp
c002a0a2:	6a 08                	push   $0x8
c002a0a4:	68 2b 4e 03 c0       	push   $0xc0034e2b
c002a0a9:	50                   	push   %eax
c002a0aa:	e8 18 f8 ff ff       	call   c00298c7 <strlcpy>
c002a0af:	83 c4 10             	add    $0x10,%esp
c002a0b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a0b5:	83 c0 7c             	add    $0x7c,%eax
c002a0b8:	ff 75 10             	pushl  0x10(%ebp)
c002a0bb:	68 33 4e 03 c0       	push   $0xc0034e33
c002a0c0:	6a 0c                	push   $0xc
c002a0c2:	50                   	push   %eax
c002a0c3:	e8 d8 de ff ff       	call   c0027fa0 <snprintf>
c002a0c8:	83 c4 10             	add    $0x10,%esp
c002a0cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a0ce:	05 88 00 00 00       	add    $0x88,%eax
c002a0d3:	68 00 8c b7 43       	push   $0x43b78c00
c002a0d8:	68 33 4e 03 c0       	push   $0xc0034e33
c002a0dd:	6a 0c                	push   $0xc
c002a0df:	50                   	push   %eax
c002a0e0:	e8 bb de ff ff       	call   c0027fa0 <snprintf>
c002a0e5:	83 c4 10             	add    $0x10,%esp
c002a0e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a0eb:	89 c2                	mov    %eax,%edx
c002a0ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a0f0:	88 90 9c 00 00 00    	mov    %dl,0x9c(%eax)
c002a0f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a0f9:	05 01 01 00 00       	add    $0x101,%eax
c002a0fe:	83 ec 04             	sub    $0x4,%esp
c002a101:	6a 06                	push   $0x6
c002a103:	68 39 4e 03 c0       	push   $0xc0034e39
c002a108:	50                   	push   %eax
c002a109:	e8 b9 f7 ff ff       	call   c00298c7 <strlcpy>
c002a10e:	83 c4 10             	add    $0x10,%esp
c002a111:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a114:	c6 80 08 01 00 00 30 	movb   $0x30,0x108(%eax)
c002a11b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a11e:	0f b6 90 08 01 00 00 	movzbl 0x108(%eax),%edx
c002a125:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a128:	88 90 07 01 00 00    	mov    %dl,0x107(%eax)
c002a12e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a131:	05 29 01 00 00       	add    $0x129,%eax
c002a136:	83 ec 04             	sub    $0x4,%esp
c002a139:	6a 20                	push   $0x20
c002a13b:	68 3f 4e 03 c0       	push   $0xc0034e3f
c002a140:	50                   	push   %eax
c002a141:	e8 81 f7 ff ff       	call   c00298c7 <strlcpy>
c002a146:	83 c4 10             	add    $0x10,%esp
c002a149:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a14c:	05 09 01 00 00       	add    $0x109,%eax
c002a151:	83 ec 04             	sub    $0x4,%esp
c002a154:	6a 20                	push   $0x20
c002a156:	68 3f 4e 03 c0       	push   $0xc0034e3f
c002a15b:	50                   	push   %eax
c002a15c:	e8 66 f7 ff ff       	call   c00298c7 <strlcpy>
c002a161:	83 c4 10             	add    $0x10,%esp
c002a164:	83 ec 0c             	sub    $0xc,%esp
c002a167:	ff 75 f4             	pushl  -0xc(%ebp)
c002a16a:	e8 3d fd ff ff       	call   c0029eac <calculate_chksum>
c002a16f:	83 c4 10             	add    $0x10,%esp
c002a172:	89 c2                	mov    %eax,%edx
c002a174:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a177:	05 94 00 00 00       	add    $0x94,%eax
c002a17c:	52                   	push   %edx
c002a17d:	68 26 4e 03 c0       	push   $0xc0034e26
c002a182:	6a 08                	push   $0x8
c002a184:	50                   	push   %eax
c002a185:	e8 16 de ff ff       	call   c0027fa0 <snprintf>
c002a18a:	83 c4 10             	add    $0x10,%esp
c002a18d:	b8 01 00 00 00       	mov    $0x1,%eax
c002a192:	c9                   	leave  
c002a193:	c3                   	ret    

c002a194 <parse_octal_field>:
c002a194:	55                   	push   %ebp
c002a195:	89 e5                	mov    %esp,%ebp
c002a197:	83 ec 10             	sub    $0x10,%esp
c002a19a:	8b 45 10             	mov    0x10(%ebp),%eax
c002a19d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a1a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c002a1aa:	eb 65                	jmp    c002a211 <parse_octal_field+0x7d>
c002a1ac:	8b 55 08             	mov    0x8(%ebp),%edx
c002a1af:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002a1b2:	01 d0                	add    %edx,%eax
c002a1b4:	0f b6 00             	movzbl (%eax),%eax
c002a1b7:	88 45 fb             	mov    %al,-0x5(%ebp)
c002a1ba:	80 7d fb 2f          	cmpb   $0x2f,-0x5(%ebp)
c002a1be:	7e 35                	jle    c002a1f5 <parse_octal_field+0x61>
c002a1c0:	80 7d fb 37          	cmpb   $0x37,-0x5(%ebp)
c002a1c4:	7f 2f                	jg     c002a1f5 <parse_octal_field+0x61>
c002a1c6:	8b 45 10             	mov    0x10(%ebp),%eax
c002a1c9:	8b 00                	mov    (%eax),%eax
c002a1cb:	3d ff ff ff 1f       	cmp    $0x1fffffff,%eax
c002a1d0:	76 07                	jbe    c002a1d9 <parse_octal_field+0x45>
c002a1d2:	b8 00 00 00 00       	mov    $0x0,%eax
c002a1d7:	eb 45                	jmp    c002a21e <parse_octal_field+0x8a>
c002a1d9:	0f be 55 fb          	movsbl -0x5(%ebp),%edx
c002a1dd:	8b 45 10             	mov    0x10(%ebp),%eax
c002a1e0:	8b 00                	mov    (%eax),%eax
c002a1e2:	c1 e0 03             	shl    $0x3,%eax
c002a1e5:	01 d0                	add    %edx,%eax
c002a1e7:	8d 50 d0             	lea    -0x30(%eax),%edx
c002a1ea:	8b 45 10             	mov    0x10(%ebp),%eax
c002a1ed:	89 10                	mov    %edx,(%eax)
c002a1ef:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c002a1f3:	eb 1c                	jmp    c002a211 <parse_octal_field+0x7d>
c002a1f5:	80 7d fb 20          	cmpb   $0x20,-0x5(%ebp)
c002a1f9:	74 06                	je     c002a201 <parse_octal_field+0x6d>
c002a1fb:	80 7d fb 00          	cmpb   $0x0,-0x5(%ebp)
c002a1ff:	75 09                	jne    c002a20a <parse_octal_field+0x76>
c002a201:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c002a205:	0f 95 c0             	setne  %al
c002a208:	eb 14                	jmp    c002a21e <parse_octal_field+0x8a>
c002a20a:	b8 00 00 00 00       	mov    $0x0,%eax
c002a20f:	eb 0d                	jmp    c002a21e <parse_octal_field+0x8a>
c002a211:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002a214:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002a217:	72 93                	jb     c002a1ac <parse_octal_field+0x18>
c002a219:	b8 00 00 00 00       	mov    $0x0,%eax
c002a21e:	c9                   	leave  
c002a21f:	c3                   	ret    

c002a220 <is_all_zeros>:
c002a220:	55                   	push   %ebp
c002a221:	89 e5                	mov    %esp,%ebp
c002a223:	eb 17                	jmp    c002a23c <is_all_zeros+0x1c>
c002a225:	8b 45 08             	mov    0x8(%ebp),%eax
c002a228:	8d 50 01             	lea    0x1(%eax),%edx
c002a22b:	89 55 08             	mov    %edx,0x8(%ebp)
c002a22e:	0f b6 00             	movzbl (%eax),%eax
c002a231:	84 c0                	test   %al,%al
c002a233:	74 07                	je     c002a23c <is_all_zeros+0x1c>
c002a235:	b8 00 00 00 00       	mov    $0x0,%eax
c002a23a:	eb 12                	jmp    c002a24e <is_all_zeros+0x2e>
c002a23c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a23f:	8d 50 ff             	lea    -0x1(%eax),%edx
c002a242:	89 55 0c             	mov    %edx,0xc(%ebp)
c002a245:	85 c0                	test   %eax,%eax
c002a247:	75 dc                	jne    c002a225 <is_all_zeros+0x5>
c002a249:	b8 01 00 00 00       	mov    $0x1,%eax
c002a24e:	5d                   	pop    %ebp
c002a24f:	c3                   	ret    

c002a250 <ustar_parse_header>:
c002a250:	55                   	push   %ebp
c002a251:	89 e5                	mov    %esp,%ebp
c002a253:	83 ec 18             	sub    $0x18,%esp
c002a256:	8b 45 08             	mov    0x8(%ebp),%eax
c002a259:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a25c:	68 00 02 00 00       	push   $0x200
c002a261:	ff 75 08             	pushl  0x8(%ebp)
c002a264:	e8 b7 ff ff ff       	call   c002a220 <is_all_zeros>
c002a269:	83 c4 08             	add    $0x8,%esp
c002a26c:	84 c0                	test   %al,%al
c002a26e:	74 25                	je     c002a295 <ustar_parse_header+0x45>
c002a270:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a273:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a279:	8b 45 10             	mov    0x10(%ebp),%eax
c002a27c:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
c002a282:	8b 45 14             	mov    0x14(%ebp),%eax
c002a285:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a28b:	b8 00 00 00 00       	mov    $0x0,%eax
c002a290:	e9 65 01 00 00       	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a295:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a298:	05 01 01 00 00       	add    $0x101,%eax
c002a29d:	83 ec 04             	sub    $0x4,%esp
c002a2a0:	6a 06                	push   $0x6
c002a2a2:	68 39 4e 03 c0       	push   $0xc0034e39
c002a2a7:	50                   	push   %eax
c002a2a8:	e8 95 f0 ff ff       	call   c0029342 <memcmp>
c002a2ad:	83 c4 10             	add    $0x10,%esp
c002a2b0:	85 c0                	test   %eax,%eax
c002a2b2:	74 0a                	je     c002a2be <ustar_parse_header+0x6e>
c002a2b4:	b8 44 4e 03 c0       	mov    $0xc0034e44,%eax
c002a2b9:	e9 3c 01 00 00       	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a2be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a2c1:	0f b6 80 07 01 00 00 	movzbl 0x107(%eax),%eax
c002a2c8:	3c 30                	cmp    $0x30,%al
c002a2ca:	75 0e                	jne    c002a2da <ustar_parse_header+0x8a>
c002a2cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a2cf:	0f b6 80 08 01 00 00 	movzbl 0x108(%eax),%eax
c002a2d6:	3c 30                	cmp    $0x30,%al
c002a2d8:	74 0a                	je     c002a2e4 <ustar_parse_header+0x94>
c002a2da:	b8 58 4e 03 c0       	mov    $0xc0034e58,%eax
c002a2df:	e9 16 01 00 00       	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a2e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a2e7:	8d 90 94 00 00 00    	lea    0x94(%eax),%edx
c002a2ed:	83 ec 04             	sub    $0x4,%esp
c002a2f0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c002a2f3:	50                   	push   %eax
c002a2f4:	6a 08                	push   $0x8
c002a2f6:	52                   	push   %edx
c002a2f7:	e8 98 fe ff ff       	call   c002a194 <parse_octal_field>
c002a2fc:	83 c4 10             	add    $0x10,%esp
c002a2ff:	83 f0 01             	xor    $0x1,%eax
c002a302:	84 c0                	test   %al,%al
c002a304:	74 0a                	je     c002a310 <ustar_parse_header+0xc0>
c002a306:	b8 6e 4e 03 c0       	mov    $0xc0034e6e,%eax
c002a30b:	e9 ea 00 00 00       	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a310:	83 ec 0c             	sub    $0xc,%esp
c002a313:	ff 75 f4             	pushl  -0xc(%ebp)
c002a316:	e8 91 fb ff ff       	call   c0029eac <calculate_chksum>
c002a31b:	83 c4 10             	add    $0x10,%esp
c002a31e:	89 c2                	mov    %eax,%edx
c002a320:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a323:	39 c2                	cmp    %eax,%edx
c002a325:	74 0a                	je     c002a331 <ustar_parse_header+0xe1>
c002a327:	b8 83 4e 03 c0       	mov    $0xc0034e83,%eax
c002a32c:	e9 c9 00 00 00       	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a331:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a334:	0f b6 40 63          	movzbl 0x63(%eax),%eax
c002a338:	84 c0                	test   %al,%al
c002a33a:	75 0e                	jne    c002a34a <ustar_parse_header+0xfa>
c002a33c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a33f:	0f b6 80 59 01 00 00 	movzbl 0x159(%eax),%eax
c002a346:	84 c0                	test   %al,%al
c002a348:	74 0a                	je     c002a354 <ustar_parse_header+0x104>
c002a34a:	b8 95 4e 03 c0       	mov    $0xc0034e95,%eax
c002a34f:	e9 a6 00 00 00       	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a354:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a357:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a35e:	3c 30                	cmp    $0x30,%al
c002a360:	74 18                	je     c002a37a <ustar_parse_header+0x12a>
c002a362:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a365:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a36c:	3c 35                	cmp    $0x35,%al
c002a36e:	74 0a                	je     c002a37a <ustar_parse_header+0x12a>
c002a370:	b8 a8 4e 03 c0       	mov    $0xc0034ea8,%eax
c002a375:	e9 80 00 00 00       	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a37a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a37d:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a384:	3c 30                	cmp    $0x30,%al
c002a386:	75 34                	jne    c002a3bc <ustar_parse_header+0x16c>
c002a388:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a38b:	8d 50 7c             	lea    0x7c(%eax),%edx
c002a38e:	83 ec 04             	sub    $0x4,%esp
c002a391:	8d 45 ec             	lea    -0x14(%ebp),%eax
c002a394:	50                   	push   %eax
c002a395:	6a 0c                	push   $0xc
c002a397:	52                   	push   %edx
c002a398:	e8 f7 fd ff ff       	call   c002a194 <parse_octal_field>
c002a39d:	83 c4 10             	add    $0x10,%esp
c002a3a0:	83 f0 01             	xor    $0x1,%eax
c002a3a3:	84 c0                	test   %al,%al
c002a3a5:	74 07                	je     c002a3ae <ustar_parse_header+0x15e>
c002a3a7:	b8 c0 4e 03 c0       	mov    $0xc0034ec0,%eax
c002a3ac:	eb 4c                	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a3ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002a3b1:	85 c0                	test   %eax,%eax
c002a3b3:	79 0e                	jns    c002a3c3 <ustar_parse_header+0x173>
c002a3b5:	b8 d8 4e 03 c0       	mov    $0xc0034ed8,%eax
c002a3ba:	eb 3e                	jmp    c002a3fa <ustar_parse_header+0x1aa>
c002a3bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c002a3c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a3c6:	83 ec 0c             	sub    $0xc,%esp
c002a3c9:	50                   	push   %eax
c002a3ca:	e8 61 fb ff ff       	call   c0029f30 <strip_antisocial_prefixes>
c002a3cf:	83 c4 10             	add    $0x10,%esp
c002a3d2:	89 c2                	mov    %eax,%edx
c002a3d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a3d7:	89 10                	mov    %edx,(%eax)
c002a3d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a3dc:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%eax),%eax
c002a3e3:	0f be d0             	movsbl %al,%edx
c002a3e6:	8b 45 10             	mov    0x10(%ebp),%eax
c002a3e9:	89 10                	mov    %edx,(%eax)
c002a3eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002a3ee:	89 c2                	mov    %eax,%edx
c002a3f0:	8b 45 14             	mov    0x14(%ebp),%eax
c002a3f3:	89 10                	mov    %edx,(%eax)
c002a3f5:	b8 00 00 00 00       	mov    $0x0,%eax
c002a3fa:	c9                   	leave  
c002a3fb:	c3                   	ret    

c002a3fc <convert_to_fixed_point>:
c002a3fc:	55                   	push   %ebp
c002a3fd:	89 e5                	mov    %esp,%ebp
c002a3ff:	8b 45 08             	mov    0x8(%ebp),%eax
c002a402:	c1 e0 10             	shl    $0x10,%eax
c002a405:	5d                   	pop    %ebp
c002a406:	c3                   	ret    

c002a407 <convert_to_int_tozero>:
c002a407:	55                   	push   %ebp
c002a408:	89 e5                	mov    %esp,%ebp
c002a40a:	8b 45 08             	mov    0x8(%ebp),%eax
c002a40d:	8d 90 ff ff 00 00    	lea    0xffff(%eax),%edx
c002a413:	85 c0                	test   %eax,%eax
c002a415:	0f 48 c2             	cmovs  %edx,%eax
c002a418:	c1 f8 10             	sar    $0x10,%eax
c002a41b:	5d                   	pop    %ebp
c002a41c:	c3                   	ret    

c002a41d <convert_to_int_round>:
c002a41d:	55                   	push   %ebp
c002a41e:	89 e5                	mov    %esp,%ebp
c002a420:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a424:	78 18                	js     c002a43e <convert_to_int_round+0x21>
c002a426:	8b 45 08             	mov    0x8(%ebp),%eax
c002a429:	05 00 80 00 00       	add    $0x8000,%eax
c002a42e:	8d 90 ff ff 00 00    	lea    0xffff(%eax),%edx
c002a434:	85 c0                	test   %eax,%eax
c002a436:	0f 48 c2             	cmovs  %edx,%eax
c002a439:	c1 f8 10             	sar    $0x10,%eax
c002a43c:	eb 16                	jmp    c002a454 <convert_to_int_round+0x37>
c002a43e:	8b 45 08             	mov    0x8(%ebp),%eax
c002a441:	2d 00 80 00 00       	sub    $0x8000,%eax
c002a446:	8d 90 ff ff 00 00    	lea    0xffff(%eax),%edx
c002a44c:	85 c0                	test   %eax,%eax
c002a44e:	0f 48 c2             	cmovs  %edx,%eax
c002a451:	c1 f8 10             	sar    $0x10,%eax
c002a454:	5d                   	pop    %ebp
c002a455:	c3                   	ret    

c002a456 <ff_add>:
c002a456:	55                   	push   %ebp
c002a457:	89 e5                	mov    %esp,%ebp
c002a459:	8b 55 08             	mov    0x8(%ebp),%edx
c002a45c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a45f:	01 d0                	add    %edx,%eax
c002a461:	5d                   	pop    %ebp
c002a462:	c3                   	ret    

c002a463 <ff_sub>:
c002a463:	55                   	push   %ebp
c002a464:	89 e5                	mov    %esp,%ebp
c002a466:	8b 45 08             	mov    0x8(%ebp),%eax
c002a469:	2b 45 0c             	sub    0xc(%ebp),%eax
c002a46c:	5d                   	pop    %ebp
c002a46d:	c3                   	ret    

c002a46e <ff_add_with_int>:
c002a46e:	55                   	push   %ebp
c002a46f:	89 e5                	mov    %esp,%ebp
c002a471:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a474:	c1 e0 10             	shl    $0x10,%eax
c002a477:	89 c2                	mov    %eax,%edx
c002a479:	8b 45 08             	mov    0x8(%ebp),%eax
c002a47c:	01 d0                	add    %edx,%eax
c002a47e:	5d                   	pop    %ebp
c002a47f:	c3                   	ret    

c002a480 <ff_sub_with_int>:
c002a480:	55                   	push   %ebp
c002a481:	89 e5                	mov    %esp,%ebp
c002a483:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a486:	c1 e0 10             	shl    $0x10,%eax
c002a489:	89 c2                	mov    %eax,%edx
c002a48b:	8b 45 08             	mov    0x8(%ebp),%eax
c002a48e:	29 d0                	sub    %edx,%eax
c002a490:	5d                   	pop    %ebp
c002a491:	c3                   	ret    

c002a492 <ff_mul>:
c002a492:	55                   	push   %ebp
c002a493:	89 e5                	mov    %esp,%ebp
c002a495:	57                   	push   %edi
c002a496:	56                   	push   %esi
c002a497:	53                   	push   %ebx
c002a498:	83 ec 0c             	sub    $0xc,%esp
c002a49b:	8b 45 08             	mov    0x8(%ebp),%eax
c002a49e:	89 c1                	mov    %eax,%ecx
c002a4a0:	89 c3                	mov    %eax,%ebx
c002a4a2:	c1 fb 1f             	sar    $0x1f,%ebx
c002a4a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c002a4a8:	99                   	cltd   
c002a4a9:	89 df                	mov    %ebx,%edi
c002a4ab:	0f af f8             	imul   %eax,%edi
c002a4ae:	89 d6                	mov    %edx,%esi
c002a4b0:	0f af f1             	imul   %ecx,%esi
c002a4b3:	01 f7                	add    %esi,%edi
c002a4b5:	f7 e1                	mul    %ecx
c002a4b7:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
c002a4ba:	89 ca                	mov    %ecx,%edx
c002a4bc:	89 d1                	mov    %edx,%ecx
c002a4be:	c1 f9 1f             	sar    $0x1f,%ecx
c002a4c1:	89 cb                	mov    %ecx,%ebx
c002a4c3:	c1 fb 1f             	sar    $0x1f,%ebx
c002a4c6:	0f b7 f1             	movzwl %cx,%esi
c002a4c9:	89 75 e8             	mov    %esi,-0x18(%ebp)
c002a4cc:	83 e3 00             	and    $0x0,%ebx
c002a4cf:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c002a4d2:	03 45 e8             	add    -0x18(%ebp),%eax
c002a4d5:	13 55 ec             	adc    -0x14(%ebp),%edx
c002a4d8:	0f ac d0 10          	shrd   $0x10,%edx,%eax
c002a4dc:	c1 fa 10             	sar    $0x10,%edx
c002a4df:	83 c4 0c             	add    $0xc,%esp
c002a4e2:	5b                   	pop    %ebx
c002a4e3:	5e                   	pop    %esi
c002a4e4:	5f                   	pop    %edi
c002a4e5:	5d                   	pop    %ebp
c002a4e6:	c3                   	ret    

c002a4e7 <ff_mul_with_int>:
c002a4e7:	55                   	push   %ebp
c002a4e8:	89 e5                	mov    %esp,%ebp
c002a4ea:	8b 45 08             	mov    0x8(%ebp),%eax
c002a4ed:	0f af 45 0c          	imul   0xc(%ebp),%eax
c002a4f1:	5d                   	pop    %ebp
c002a4f2:	c3                   	ret    

c002a4f3 <ff_div>:
c002a4f3:	55                   	push   %ebp
c002a4f4:	89 e5                	mov    %esp,%ebp
c002a4f6:	53                   	push   %ebx
c002a4f7:	83 ec 04             	sub    $0x4,%esp
c002a4fa:	8b 45 08             	mov    0x8(%ebp),%eax
c002a4fd:	99                   	cltd   
c002a4fe:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c002a502:	c1 e0 10             	shl    $0x10,%eax
c002a505:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c002a508:	89 cb                	mov    %ecx,%ebx
c002a50a:	c1 fb 1f             	sar    $0x1f,%ebx
c002a50d:	53                   	push   %ebx
c002a50e:	51                   	push   %ecx
c002a50f:	52                   	push   %edx
c002a510:	50                   	push   %eax
c002a511:	e8 c0 f8 ff ff       	call   c0029dd6 <__divdi3>
c002a516:	83 c4 10             	add    $0x10,%esp
c002a519:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002a51c:	c9                   	leave  
c002a51d:	c3                   	ret    

c002a51e <ff_div_with_int>:
c002a51e:	55                   	push   %ebp
c002a51f:	89 e5                	mov    %esp,%ebp
c002a521:	8b 45 08             	mov    0x8(%ebp),%eax
c002a524:	99                   	cltd   
c002a525:	f7 7d 0c             	idivl  0xc(%ebp)
c002a528:	5d                   	pop    %ebp
c002a529:	c3                   	ret    

c002a52a <debug_panic>:
c002a52a:	55                   	push   %ebp
c002a52b:	89 e5                	mov    %esp,%ebp
c002a52d:	83 ec 18             	sub    $0x18,%esp
c002a530:	e8 54 78 ff ff       	call   c0021d89 <intr_disable>
c002a535:	e8 74 21 00 00       	call   c002c6ae <console_panic>
c002a53a:	a1 84 dc 03 c0       	mov    0xc003dc84,%eax
c002a53f:	83 c0 01             	add    $0x1,%eax
c002a542:	a3 84 dc 03 c0       	mov    %eax,0xc003dc84
c002a547:	a1 84 dc 03 c0       	mov    0xc003dc84,%eax
c002a54c:	83 f8 01             	cmp    $0x1,%eax
c002a54f:	75 42                	jne    c002a593 <debug_panic+0x69>
c002a551:	ff 75 10             	pushl  0x10(%ebp)
c002a554:	ff 75 0c             	pushl  0xc(%ebp)
c002a557:	ff 75 08             	pushl  0x8(%ebp)
c002a55a:	68 fc 4e 03 c0       	push   $0xc0034efc
c002a55f:	e8 65 da ff ff       	call   c0027fc9 <printf>
c002a564:	83 c4 10             	add    $0x10,%esp
c002a567:	8d 45 18             	lea    0x18(%ebp),%eax
c002a56a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a56d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002a570:	83 ec 08             	sub    $0x8,%esp
c002a573:	50                   	push   %eax
c002a574:	ff 75 14             	pushl  0x14(%ebp)
c002a577:	e8 42 22 00 00       	call   c002c7be <vprintf>
c002a57c:	83 c4 10             	add    $0x10,%esp
c002a57f:	83 ec 0c             	sub    $0xc,%esp
c002a582:	6a 0a                	push   $0xa
c002a584:	e8 f0 22 00 00       	call   c002c879 <putchar>
c002a589:	83 c4 10             	add    $0x10,%esp
c002a58c:	e8 03 d7 ff ff       	call   c0027c94 <debug_backtrace>
c002a591:	eb 20                	jmp    c002a5b3 <debug_panic+0x89>
c002a593:	a1 84 dc 03 c0       	mov    0xc003dc84,%eax
c002a598:	83 f8 02             	cmp    $0x2,%eax
c002a59b:	75 16                	jne    c002a5b3 <debug_panic+0x89>
c002a59d:	ff 75 10             	pushl  0x10(%ebp)
c002a5a0:	ff 75 0c             	pushl  0xc(%ebp)
c002a5a3:	ff 75 08             	pushl  0x8(%ebp)
c002a5a6:	68 1c 4f 03 c0       	push   $0xc0034f1c
c002a5ab:	e8 19 da ff ff       	call   c0027fc9 <printf>
c002a5b0:	83 c4 10             	add    $0x10,%esp
c002a5b3:	e8 97 b2 ff ff       	call   c002584f <serial_flush>
c002a5b8:	e8 35 d4 ff ff       	call   c00279f2 <shutdown>
c002a5bd:	eb fe                	jmp    c002a5bd <debug_panic+0x93>

c002a5bf <print_stacktrace>:
c002a5bf:	55                   	push   %ebp
c002a5c0:	89 e5                	mov    %esp,%ebp
c002a5c2:	83 ec 18             	sub    $0x18,%esp
c002a5c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002a5cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002a5d3:	c7 45 ec 46 4f 03 c0 	movl   $0xc0034f46,-0x14(%ebp)
c002a5da:	8b 45 08             	mov    0x8(%ebp),%eax
c002a5dd:	8b 40 04             	mov    0x4(%eax),%eax
c002a5e0:	83 f8 01             	cmp    $0x1,%eax
c002a5e3:	74 15                	je     c002a5fa <print_stacktrace+0x3b>
c002a5e5:	83 f8 01             	cmp    $0x1,%eax
c002a5e8:	72 07                	jb     c002a5f1 <print_stacktrace+0x32>
c002a5ea:	83 f8 02             	cmp    $0x2,%eax
c002a5ed:	74 14                	je     c002a603 <print_stacktrace+0x44>
c002a5ef:	eb 1a                	jmp    c002a60b <print_stacktrace+0x4c>
c002a5f1:	c7 45 ec 4e 4f 03 c0 	movl   $0xc0034f4e,-0x14(%ebp)
c002a5f8:	eb 11                	jmp    c002a60b <print_stacktrace+0x4c>
c002a5fa:	c7 45 ec 56 4f 03 c0 	movl   $0xc0034f56,-0x14(%ebp)
c002a601:	eb 08                	jmp    c002a60b <print_stacktrace+0x4c>
c002a603:	c7 45 ec 5c 4f 03 c0 	movl   $0xc0034f5c,-0x14(%ebp)
c002a60a:	90                   	nop
c002a60b:	8b 45 08             	mov    0x8(%ebp),%eax
c002a60e:	83 c0 08             	add    $0x8,%eax
c002a611:	83 ec 04             	sub    $0x4,%esp
c002a614:	ff 75 ec             	pushl  -0x14(%ebp)
c002a617:	50                   	push   %eax
c002a618:	68 64 4f 03 c0       	push   $0xc0034f64
c002a61d:	e8 a7 d9 ff ff       	call   c0027fc9 <printf>
c002a622:	83 c4 10             	add    $0x10,%esp
c002a625:	e8 7e 68 ff ff       	call   c0020ea8 <thread_current>
c002a62a:	3b 45 08             	cmp    0x8(%ebp),%eax
c002a62d:	75 0e                	jne    c002a63d <print_stacktrace+0x7e>
c002a62f:	8b 45 00             	mov    0x0(%ebp),%eax
c002a632:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002a635:	8b 45 04             	mov    0x4(%ebp),%eax
c002a638:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a63b:	eb 4d                	jmp    c002a68a <print_stacktrace+0xcb>
c002a63d:	8b 45 08             	mov    0x8(%ebp),%eax
c002a640:	8b 40 18             	mov    0x18(%eax),%eax
c002a643:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002a646:	8b 45 08             	mov    0x8(%ebp),%eax
c002a649:	8b 40 18             	mov    0x18(%eax),%eax
c002a64c:	8b 55 08             	mov    0x8(%ebp),%edx
c002a64f:	81 c2 00 10 00 00    	add    $0x1000,%edx
c002a655:	39 d0                	cmp    %edx,%eax
c002a657:	74 0d                	je     c002a666 <print_stacktrace+0xa7>
c002a659:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002a65c:	8b 40 10             	mov    0x10(%eax),%eax
c002a65f:	3d e8 1c 02 c0       	cmp    $0xc0021ce8,%eax
c002a664:	75 12                	jne    c002a678 <print_stacktrace+0xb9>
c002a666:	83 ec 0c             	sub    $0xc,%esp
c002a669:	68 8b 4f 03 c0       	push   $0xc0034f8b
c002a66e:	e8 7e 21 00 00       	call   c002c7f1 <puts>
c002a673:	83 c4 10             	add    $0x10,%esp
c002a676:	eb 6b                	jmp    c002a6e3 <print_stacktrace+0x124>
c002a678:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002a67b:	8b 40 08             	mov    0x8(%eax),%eax
c002a67e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002a681:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002a684:	8b 40 10             	mov    0x10(%eax),%eax
c002a687:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a68a:	83 ec 08             	sub    $0x8,%esp
c002a68d:	ff 75 f4             	pushl  -0xc(%ebp)
c002a690:	68 a8 4f 03 c0       	push   $0xc0034fa8
c002a695:	e8 2f d9 ff ff       	call   c0027fc9 <printf>
c002a69a:	83 c4 10             	add    $0x10,%esp
c002a69d:	eb 21                	jmp    c002a6c0 <print_stacktrace+0x101>
c002a69f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a6a2:	83 c0 04             	add    $0x4,%eax
c002a6a5:	8b 00                	mov    (%eax),%eax
c002a6a7:	83 ec 08             	sub    $0x8,%esp
c002a6aa:	50                   	push   %eax
c002a6ab:	68 a8 4f 03 c0       	push   $0xc0034fa8
c002a6b0:	e8 14 d9 ff ff       	call   c0027fc9 <printf>
c002a6b5:	83 c4 10             	add    $0x10,%esp
c002a6b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a6bb:	8b 00                	mov    (%eax),%eax
c002a6bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002a6c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a6c3:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c002a6c8:	76 09                	jbe    c002a6d3 <print_stacktrace+0x114>
c002a6ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002a6cd:	8b 00                	mov    (%eax),%eax
c002a6cf:	85 c0                	test   %eax,%eax
c002a6d1:	75 cc                	jne    c002a69f <print_stacktrace+0xe0>
c002a6d3:	83 ec 0c             	sub    $0xc,%esp
c002a6d6:	68 ac 4f 03 c0       	push   $0xc0034fac
c002a6db:	e8 11 21 00 00       	call   c002c7f1 <puts>
c002a6e0:	83 c4 10             	add    $0x10,%esp
c002a6e3:	c9                   	leave  
c002a6e4:	c3                   	ret    

c002a6e5 <debug_backtrace_all>:
c002a6e5:	55                   	push   %ebp
c002a6e6:	89 e5                	mov    %esp,%ebp
c002a6e8:	83 ec 18             	sub    $0x18,%esp
c002a6eb:	e8 99 76 ff ff       	call   c0021d89 <intr_disable>
c002a6f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002a6f3:	83 ec 08             	sub    $0x8,%esp
c002a6f6:	6a 00                	push   $0x0
c002a6f8:	68 bf a5 02 c0       	push   $0xc002a5bf
c002a6fd:	e8 29 69 ff ff       	call   c002102b <thread_foreach>
c002a702:	83 c4 10             	add    $0x10,%esp
c002a705:	83 ec 0c             	sub    $0xc,%esp
c002a708:	ff 75 f4             	pushl  -0xc(%ebp)
c002a70b:	e8 21 76 ff ff       	call   c0021d31 <intr_set_level>
c002a710:	83 c4 10             	add    $0x10,%esp
c002a713:	90                   	nop
c002a714:	c9                   	leave  
c002a715:	c3                   	ret    

c002a716 <is_head>:
c002a716:	55                   	push   %ebp
c002a717:	89 e5                	mov    %esp,%ebp
c002a719:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a71d:	74 1a                	je     c002a739 <is_head+0x23>
c002a71f:	8b 45 08             	mov    0x8(%ebp),%eax
c002a722:	8b 00                	mov    (%eax),%eax
c002a724:	85 c0                	test   %eax,%eax
c002a726:	75 11                	jne    c002a739 <is_head+0x23>
c002a728:	8b 45 08             	mov    0x8(%ebp),%eax
c002a72b:	8b 40 04             	mov    0x4(%eax),%eax
c002a72e:	85 c0                	test   %eax,%eax
c002a730:	74 07                	je     c002a739 <is_head+0x23>
c002a732:	b8 01 00 00 00       	mov    $0x1,%eax
c002a737:	eb 05                	jmp    c002a73e <is_head+0x28>
c002a739:	b8 00 00 00 00       	mov    $0x0,%eax
c002a73e:	83 e0 01             	and    $0x1,%eax
c002a741:	5d                   	pop    %ebp
c002a742:	c3                   	ret    

c002a743 <is_interior>:
c002a743:	55                   	push   %ebp
c002a744:	89 e5                	mov    %esp,%ebp
c002a746:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a74a:	74 1a                	je     c002a766 <is_interior+0x23>
c002a74c:	8b 45 08             	mov    0x8(%ebp),%eax
c002a74f:	8b 00                	mov    (%eax),%eax
c002a751:	85 c0                	test   %eax,%eax
c002a753:	74 11                	je     c002a766 <is_interior+0x23>
c002a755:	8b 45 08             	mov    0x8(%ebp),%eax
c002a758:	8b 40 04             	mov    0x4(%eax),%eax
c002a75b:	85 c0                	test   %eax,%eax
c002a75d:	74 07                	je     c002a766 <is_interior+0x23>
c002a75f:	b8 01 00 00 00       	mov    $0x1,%eax
c002a764:	eb 05                	jmp    c002a76b <is_interior+0x28>
c002a766:	b8 00 00 00 00       	mov    $0x0,%eax
c002a76b:	83 e0 01             	and    $0x1,%eax
c002a76e:	5d                   	pop    %ebp
c002a76f:	c3                   	ret    

c002a770 <is_tail>:
c002a770:	55                   	push   %ebp
c002a771:	89 e5                	mov    %esp,%ebp
c002a773:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a777:	74 1a                	je     c002a793 <is_tail+0x23>
c002a779:	8b 45 08             	mov    0x8(%ebp),%eax
c002a77c:	8b 00                	mov    (%eax),%eax
c002a77e:	85 c0                	test   %eax,%eax
c002a780:	74 11                	je     c002a793 <is_tail+0x23>
c002a782:	8b 45 08             	mov    0x8(%ebp),%eax
c002a785:	8b 40 04             	mov    0x4(%eax),%eax
c002a788:	85 c0                	test   %eax,%eax
c002a78a:	75 07                	jne    c002a793 <is_tail+0x23>
c002a78c:	b8 01 00 00 00       	mov    $0x1,%eax
c002a791:	eb 05                	jmp    c002a798 <is_tail+0x28>
c002a793:	b8 00 00 00 00       	mov    $0x0,%eax
c002a798:	83 e0 01             	and    $0x1,%eax
c002a79b:	5d                   	pop    %ebp
c002a79c:	c3                   	ret    

c002a79d <list_init>:
c002a79d:	55                   	push   %ebp
c002a79e:	89 e5                	mov    %esp,%ebp
c002a7a0:	83 ec 08             	sub    $0x8,%esp
c002a7a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a7a7:	75 1e                	jne    c002a7c7 <list_init+0x2a>
c002a7a9:	83 ec 0c             	sub    $0xc,%esp
c002a7ac:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002a7b1:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a7b6:	68 88 51 03 c0       	push   $0xc0035188
c002a7bb:	6a 3f                	push   $0x3f
c002a7bd:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a7c2:	e8 63 fd ff ff       	call   c002a52a <debug_panic>
c002a7c7:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002a7d0:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7d3:	8d 50 08             	lea    0x8(%eax),%edx
c002a7d6:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7d9:	89 50 04             	mov    %edx,0x4(%eax)
c002a7dc:	8b 55 08             	mov    0x8(%ebp),%edx
c002a7df:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7e2:	89 50 08             	mov    %edx,0x8(%eax)
c002a7e5:	8b 45 08             	mov    0x8(%ebp),%eax
c002a7e8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
c002a7ef:	90                   	nop
c002a7f0:	c9                   	leave  
c002a7f1:	c3                   	ret    

c002a7f2 <list_begin>:
c002a7f2:	55                   	push   %ebp
c002a7f3:	89 e5                	mov    %esp,%ebp
c002a7f5:	83 ec 08             	sub    $0x8,%esp
c002a7f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a7fc:	75 1e                	jne    c002a81c <list_begin+0x2a>
c002a7fe:	83 ec 0c             	sub    $0xc,%esp
c002a801:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002a806:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a80b:	68 94 51 03 c0       	push   $0xc0035194
c002a810:	6a 4a                	push   $0x4a
c002a812:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a817:	e8 0e fd ff ff       	call   c002a52a <debug_panic>
c002a81c:	8b 45 08             	mov    0x8(%ebp),%eax
c002a81f:	8b 40 04             	mov    0x4(%eax),%eax
c002a822:	c9                   	leave  
c002a823:	c3                   	ret    

c002a824 <list_next>:
c002a824:	55                   	push   %ebp
c002a825:	89 e5                	mov    %esp,%ebp
c002a827:	83 ec 08             	sub    $0x8,%esp
c002a82a:	ff 75 08             	pushl  0x8(%ebp)
c002a82d:	e8 e4 fe ff ff       	call   c002a716 <is_head>
c002a832:	83 c4 04             	add    $0x4,%esp
c002a835:	84 c0                	test   %al,%al
c002a837:	75 2d                	jne    c002a866 <list_next+0x42>
c002a839:	ff 75 08             	pushl  0x8(%ebp)
c002a83c:	e8 02 ff ff ff       	call   c002a743 <is_interior>
c002a841:	83 c4 04             	add    $0x4,%esp
c002a844:	84 c0                	test   %al,%al
c002a846:	75 1e                	jne    c002a866 <list_next+0x42>
c002a848:	83 ec 0c             	sub    $0xc,%esp
c002a84b:	68 ec 4f 03 c0       	push   $0xc0034fec
c002a850:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a855:	68 a0 51 03 c0       	push   $0xc00351a0
c002a85a:	6a 54                	push   $0x54
c002a85c:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a861:	e8 c4 fc ff ff       	call   c002a52a <debug_panic>
c002a866:	8b 45 08             	mov    0x8(%ebp),%eax
c002a869:	8b 40 04             	mov    0x4(%eax),%eax
c002a86c:	c9                   	leave  
c002a86d:	c3                   	ret    

c002a86e <list_end>:
c002a86e:	55                   	push   %ebp
c002a86f:	89 e5                	mov    %esp,%ebp
c002a871:	83 ec 08             	sub    $0x8,%esp
c002a874:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a878:	75 1e                	jne    c002a898 <list_end+0x2a>
c002a87a:	83 ec 0c             	sub    $0xc,%esp
c002a87d:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002a882:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a887:	68 ac 51 03 c0       	push   $0xc00351ac
c002a88c:	6a 60                	push   $0x60
c002a88e:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a893:	e8 92 fc ff ff       	call   c002a52a <debug_panic>
c002a898:	8b 45 08             	mov    0x8(%ebp),%eax
c002a89b:	83 c0 08             	add    $0x8,%eax
c002a89e:	c9                   	leave  
c002a89f:	c3                   	ret    

c002a8a0 <list_rbegin>:
c002a8a0:	55                   	push   %ebp
c002a8a1:	89 e5                	mov    %esp,%ebp
c002a8a3:	83 ec 08             	sub    $0x8,%esp
c002a8a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a8aa:	75 1e                	jne    c002a8ca <list_rbegin+0x2a>
c002a8ac:	83 ec 0c             	sub    $0xc,%esp
c002a8af:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002a8b4:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a8b9:	68 b8 51 03 c0       	push   $0xc00351b8
c002a8be:	6a 69                	push   $0x69
c002a8c0:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a8c5:	e8 60 fc ff ff       	call   c002a52a <debug_panic>
c002a8ca:	8b 45 08             	mov    0x8(%ebp),%eax
c002a8cd:	8b 40 08             	mov    0x8(%eax),%eax
c002a8d0:	c9                   	leave  
c002a8d1:	c3                   	ret    

c002a8d2 <list_prev>:
c002a8d2:	55                   	push   %ebp
c002a8d3:	89 e5                	mov    %esp,%ebp
c002a8d5:	83 ec 08             	sub    $0x8,%esp
c002a8d8:	ff 75 08             	pushl  0x8(%ebp)
c002a8db:	e8 63 fe ff ff       	call   c002a743 <is_interior>
c002a8e0:	83 c4 04             	add    $0x4,%esp
c002a8e3:	84 c0                	test   %al,%al
c002a8e5:	75 2d                	jne    c002a914 <list_prev+0x42>
c002a8e7:	ff 75 08             	pushl  0x8(%ebp)
c002a8ea:	e8 81 fe ff ff       	call   c002a770 <is_tail>
c002a8ef:	83 c4 04             	add    $0x4,%esp
c002a8f2:	84 c0                	test   %al,%al
c002a8f4:	75 1e                	jne    c002a914 <list_prev+0x42>
c002a8f6:	83 ec 0c             	sub    $0xc,%esp
c002a8f9:	68 14 50 03 c0       	push   $0xc0035014
c002a8fe:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a903:	68 c4 51 03 c0       	push   $0xc00351c4
c002a908:	6a 73                	push   $0x73
c002a90a:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a90f:	e8 16 fc ff ff       	call   c002a52a <debug_panic>
c002a914:	8b 45 08             	mov    0x8(%ebp),%eax
c002a917:	8b 00                	mov    (%eax),%eax
c002a919:	c9                   	leave  
c002a91a:	c3                   	ret    

c002a91b <list_rend>:
c002a91b:	55                   	push   %ebp
c002a91c:	89 e5                	mov    %esp,%ebp
c002a91e:	83 ec 08             	sub    $0x8,%esp
c002a921:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a925:	75 21                	jne    c002a948 <list_rend+0x2d>
c002a927:	83 ec 0c             	sub    $0xc,%esp
c002a92a:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002a92f:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a934:	68 d0 51 03 c0       	push   $0xc00351d0
c002a939:	68 87 00 00 00       	push   $0x87
c002a93e:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a943:	e8 e2 fb ff ff       	call   c002a52a <debug_panic>
c002a948:	8b 45 08             	mov    0x8(%ebp),%eax
c002a94b:	c9                   	leave  
c002a94c:	c3                   	ret    

c002a94d <list_head>:
c002a94d:	55                   	push   %ebp
c002a94e:	89 e5                	mov    %esp,%ebp
c002a950:	83 ec 08             	sub    $0x8,%esp
c002a953:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a957:	75 21                	jne    c002a97a <list_head+0x2d>
c002a959:	83 ec 0c             	sub    $0xc,%esp
c002a95c:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002a961:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a966:	68 dc 51 03 c0       	push   $0xc00351dc
c002a96b:	68 99 00 00 00       	push   $0x99
c002a970:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a975:	e8 b0 fb ff ff       	call   c002a52a <debug_panic>
c002a97a:	8b 45 08             	mov    0x8(%ebp),%eax
c002a97d:	c9                   	leave  
c002a97e:	c3                   	ret    

c002a97f <list_tail>:
c002a97f:	55                   	push   %ebp
c002a980:	89 e5                	mov    %esp,%ebp
c002a982:	83 ec 08             	sub    $0x8,%esp
c002a985:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002a989:	75 21                	jne    c002a9ac <list_tail+0x2d>
c002a98b:	83 ec 0c             	sub    $0xc,%esp
c002a98e:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002a993:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a998:	68 e8 51 03 c0       	push   $0xc00351e8
c002a99d:	68 a1 00 00 00       	push   $0xa1
c002a9a2:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a9a7:	e8 7e fb ff ff       	call   c002a52a <debug_panic>
c002a9ac:	8b 45 08             	mov    0x8(%ebp),%eax
c002a9af:	83 c0 08             	add    $0x8,%eax
c002a9b2:	c9                   	leave  
c002a9b3:	c3                   	ret    

c002a9b4 <list_insert>:
c002a9b4:	55                   	push   %ebp
c002a9b5:	89 e5                	mov    %esp,%ebp
c002a9b7:	83 ec 08             	sub    $0x8,%esp
c002a9ba:	ff 75 08             	pushl  0x8(%ebp)
c002a9bd:	e8 81 fd ff ff       	call   c002a743 <is_interior>
c002a9c2:	83 c4 04             	add    $0x4,%esp
c002a9c5:	84 c0                	test   %al,%al
c002a9c7:	75 30                	jne    c002a9f9 <list_insert+0x45>
c002a9c9:	ff 75 08             	pushl  0x8(%ebp)
c002a9cc:	e8 9f fd ff ff       	call   c002a770 <is_tail>
c002a9d1:	83 c4 04             	add    $0x4,%esp
c002a9d4:	84 c0                	test   %al,%al
c002a9d6:	75 21                	jne    c002a9f9 <list_insert+0x45>
c002a9d8:	83 ec 0c             	sub    $0xc,%esp
c002a9db:	68 3c 50 03 c0       	push   $0xc003503c
c002a9e0:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002a9e5:	68 f4 51 03 c0       	push   $0xc00351f4
c002a9ea:	68 ab 00 00 00       	push   $0xab
c002a9ef:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002a9f4:	e8 31 fb ff ff       	call   c002a52a <debug_panic>
c002a9f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002a9fd:	75 21                	jne    c002aa20 <list_insert+0x6c>
c002a9ff:	83 ec 0c             	sub    $0xc,%esp
c002aa02:	68 65 50 03 c0       	push   $0xc0035065
c002aa07:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002aa0c:	68 f4 51 03 c0       	push   $0xc00351f4
c002aa11:	68 ac 00 00 00       	push   $0xac
c002aa16:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002aa1b:	e8 0a fb ff ff       	call   c002a52a <debug_panic>
c002aa20:	8b 45 08             	mov    0x8(%ebp),%eax
c002aa23:	8b 10                	mov    (%eax),%edx
c002aa25:	8b 45 0c             	mov    0xc(%ebp),%eax
c002aa28:	89 10                	mov    %edx,(%eax)
c002aa2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c002aa2d:	8b 55 08             	mov    0x8(%ebp),%edx
c002aa30:	89 50 04             	mov    %edx,0x4(%eax)
c002aa33:	8b 45 08             	mov    0x8(%ebp),%eax
c002aa36:	8b 00                	mov    (%eax),%eax
c002aa38:	8b 55 0c             	mov    0xc(%ebp),%edx
c002aa3b:	89 50 04             	mov    %edx,0x4(%eax)
c002aa3e:	8b 45 08             	mov    0x8(%ebp),%eax
c002aa41:	8b 55 0c             	mov    0xc(%ebp),%edx
c002aa44:	89 10                	mov    %edx,(%eax)
c002aa46:	90                   	nop
c002aa47:	c9                   	leave  
c002aa48:	c3                   	ret    

c002aa49 <list_splice>:
c002aa49:	55                   	push   %ebp
c002aa4a:	89 e5                	mov    %esp,%ebp
c002aa4c:	83 ec 08             	sub    $0x8,%esp
c002aa4f:	ff 75 08             	pushl  0x8(%ebp)
c002aa52:	e8 ec fc ff ff       	call   c002a743 <is_interior>
c002aa57:	83 c4 04             	add    $0x4,%esp
c002aa5a:	84 c0                	test   %al,%al
c002aa5c:	75 30                	jne    c002aa8e <list_splice+0x45>
c002aa5e:	ff 75 08             	pushl  0x8(%ebp)
c002aa61:	e8 0a fd ff ff       	call   c002a770 <is_tail>
c002aa66:	83 c4 04             	add    $0x4,%esp
c002aa69:	84 c0                	test   %al,%al
c002aa6b:	75 21                	jne    c002aa8e <list_splice+0x45>
c002aa6d:	83 ec 0c             	sub    $0xc,%esp
c002aa70:	68 3c 50 03 c0       	push   $0xc003503c
c002aa75:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002aa7a:	68 00 52 03 c0       	push   $0xc0035200
c002aa7f:	68 bb 00 00 00       	push   $0xbb
c002aa84:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002aa89:	e8 9c fa ff ff       	call   c002a52a <debug_panic>
c002aa8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c002aa91:	3b 45 10             	cmp    0x10(%ebp),%eax
c002aa94:	0f 84 ba 00 00 00    	je     c002ab54 <list_splice+0x10b>
c002aa9a:	83 ec 0c             	sub    $0xc,%esp
c002aa9d:	ff 75 10             	pushl  0x10(%ebp)
c002aaa0:	e8 2d fe ff ff       	call   c002a8d2 <list_prev>
c002aaa5:	83 c4 10             	add    $0x10,%esp
c002aaa8:	89 45 10             	mov    %eax,0x10(%ebp)
c002aaab:	83 ec 0c             	sub    $0xc,%esp
c002aaae:	ff 75 0c             	pushl  0xc(%ebp)
c002aab1:	e8 8d fc ff ff       	call   c002a743 <is_interior>
c002aab6:	83 c4 10             	add    $0x10,%esp
c002aab9:	84 c0                	test   %al,%al
c002aabb:	75 21                	jne    c002aade <list_splice+0x95>
c002aabd:	83 ec 0c             	sub    $0xc,%esp
c002aac0:	68 72 50 03 c0       	push   $0xc0035072
c002aac5:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002aaca:	68 00 52 03 c0       	push   $0xc0035200
c002aacf:	68 c0 00 00 00       	push   $0xc0
c002aad4:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002aad9:	e8 4c fa ff ff       	call   c002a52a <debug_panic>
c002aade:	83 ec 0c             	sub    $0xc,%esp
c002aae1:	ff 75 10             	pushl  0x10(%ebp)
c002aae4:	e8 5a fc ff ff       	call   c002a743 <is_interior>
c002aae9:	83 c4 10             	add    $0x10,%esp
c002aaec:	84 c0                	test   %al,%al
c002aaee:	75 21                	jne    c002ab11 <list_splice+0xc8>
c002aaf0:	83 ec 0c             	sub    $0xc,%esp
c002aaf3:	68 86 50 03 c0       	push   $0xc0035086
c002aaf8:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002aafd:	68 00 52 03 c0       	push   $0xc0035200
c002ab02:	68 c1 00 00 00       	push   $0xc1
c002ab07:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002ab0c:	e8 19 fa ff ff       	call   c002a52a <debug_panic>
c002ab11:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ab14:	8b 00                	mov    (%eax),%eax
c002ab16:	8b 55 10             	mov    0x10(%ebp),%edx
c002ab19:	8b 52 04             	mov    0x4(%edx),%edx
c002ab1c:	89 50 04             	mov    %edx,0x4(%eax)
c002ab1f:	8b 45 10             	mov    0x10(%ebp),%eax
c002ab22:	8b 40 04             	mov    0x4(%eax),%eax
c002ab25:	8b 55 0c             	mov    0xc(%ebp),%edx
c002ab28:	8b 12                	mov    (%edx),%edx
c002ab2a:	89 10                	mov    %edx,(%eax)
c002ab2c:	8b 45 08             	mov    0x8(%ebp),%eax
c002ab2f:	8b 10                	mov    (%eax),%edx
c002ab31:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ab34:	89 10                	mov    %edx,(%eax)
c002ab36:	8b 45 10             	mov    0x10(%ebp),%eax
c002ab39:	8b 55 08             	mov    0x8(%ebp),%edx
c002ab3c:	89 50 04             	mov    %edx,0x4(%eax)
c002ab3f:	8b 45 08             	mov    0x8(%ebp),%eax
c002ab42:	8b 00                	mov    (%eax),%eax
c002ab44:	8b 55 0c             	mov    0xc(%ebp),%edx
c002ab47:	89 50 04             	mov    %edx,0x4(%eax)
c002ab4a:	8b 45 08             	mov    0x8(%ebp),%eax
c002ab4d:	8b 55 10             	mov    0x10(%ebp),%edx
c002ab50:	89 10                	mov    %edx,(%eax)
c002ab52:	eb 01                	jmp    c002ab55 <list_splice+0x10c>
c002ab54:	90                   	nop
c002ab55:	c9                   	leave  
c002ab56:	c3                   	ret    

c002ab57 <list_push_front>:
c002ab57:	55                   	push   %ebp
c002ab58:	89 e5                	mov    %esp,%ebp
c002ab5a:	83 ec 08             	sub    $0x8,%esp
c002ab5d:	83 ec 0c             	sub    $0xc,%esp
c002ab60:	ff 75 08             	pushl  0x8(%ebp)
c002ab63:	e8 8a fc ff ff       	call   c002a7f2 <list_begin>
c002ab68:	83 c4 10             	add    $0x10,%esp
c002ab6b:	83 ec 08             	sub    $0x8,%esp
c002ab6e:	ff 75 0c             	pushl  0xc(%ebp)
c002ab71:	50                   	push   %eax
c002ab72:	e8 3d fe ff ff       	call   c002a9b4 <list_insert>
c002ab77:	83 c4 10             	add    $0x10,%esp
c002ab7a:	90                   	nop
c002ab7b:	c9                   	leave  
c002ab7c:	c3                   	ret    

c002ab7d <list_push_back>:
c002ab7d:	55                   	push   %ebp
c002ab7e:	89 e5                	mov    %esp,%ebp
c002ab80:	83 ec 08             	sub    $0x8,%esp
c002ab83:	83 ec 0c             	sub    $0xc,%esp
c002ab86:	ff 75 08             	pushl  0x8(%ebp)
c002ab89:	e8 e0 fc ff ff       	call   c002a86e <list_end>
c002ab8e:	83 c4 10             	add    $0x10,%esp
c002ab91:	83 ec 08             	sub    $0x8,%esp
c002ab94:	ff 75 0c             	pushl  0xc(%ebp)
c002ab97:	50                   	push   %eax
c002ab98:	e8 17 fe ff ff       	call   c002a9b4 <list_insert>
c002ab9d:	83 c4 10             	add    $0x10,%esp
c002aba0:	90                   	nop
c002aba1:	c9                   	leave  
c002aba2:	c3                   	ret    

c002aba3 <list_remove>:
c002aba3:	55                   	push   %ebp
c002aba4:	89 e5                	mov    %esp,%ebp
c002aba6:	83 ec 08             	sub    $0x8,%esp
c002aba9:	ff 75 08             	pushl  0x8(%ebp)
c002abac:	e8 92 fb ff ff       	call   c002a743 <is_interior>
c002abb1:	83 c4 04             	add    $0x4,%esp
c002abb4:	84 c0                	test   %al,%al
c002abb6:	75 21                	jne    c002abd9 <list_remove+0x36>
c002abb8:	83 ec 0c             	sub    $0xc,%esp
c002abbb:	68 99 50 03 c0       	push   $0xc0035099
c002abc0:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002abc5:	68 0c 52 03 c0       	push   $0xc003520c
c002abca:	68 fb 00 00 00       	push   $0xfb
c002abcf:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002abd4:	e8 51 f9 ff ff       	call   c002a52a <debug_panic>
c002abd9:	8b 45 08             	mov    0x8(%ebp),%eax
c002abdc:	8b 00                	mov    (%eax),%eax
c002abde:	8b 55 08             	mov    0x8(%ebp),%edx
c002abe1:	8b 52 04             	mov    0x4(%edx),%edx
c002abe4:	89 50 04             	mov    %edx,0x4(%eax)
c002abe7:	8b 45 08             	mov    0x8(%ebp),%eax
c002abea:	8b 40 04             	mov    0x4(%eax),%eax
c002abed:	8b 55 08             	mov    0x8(%ebp),%edx
c002abf0:	8b 12                	mov    (%edx),%edx
c002abf2:	89 10                	mov    %edx,(%eax)
c002abf4:	8b 45 08             	mov    0x8(%ebp),%eax
c002abf7:	8b 40 04             	mov    0x4(%eax),%eax
c002abfa:	c9                   	leave  
c002abfb:	c3                   	ret    

c002abfc <list_pop_front>:
c002abfc:	55                   	push   %ebp
c002abfd:	89 e5                	mov    %esp,%ebp
c002abff:	83 ec 18             	sub    $0x18,%esp
c002ac02:	83 ec 0c             	sub    $0xc,%esp
c002ac05:	ff 75 08             	pushl  0x8(%ebp)
c002ac08:	e8 43 00 00 00       	call   c002ac50 <list_front>
c002ac0d:	83 c4 10             	add    $0x10,%esp
c002ac10:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ac13:	83 ec 0c             	sub    $0xc,%esp
c002ac16:	ff 75 f4             	pushl  -0xc(%ebp)
c002ac19:	e8 85 ff ff ff       	call   c002aba3 <list_remove>
c002ac1e:	83 c4 10             	add    $0x10,%esp
c002ac21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ac24:	c9                   	leave  
c002ac25:	c3                   	ret    

c002ac26 <list_pop_back>:
c002ac26:	55                   	push   %ebp
c002ac27:	89 e5                	mov    %esp,%ebp
c002ac29:	83 ec 18             	sub    $0x18,%esp
c002ac2c:	83 ec 0c             	sub    $0xc,%esp
c002ac2f:	ff 75 08             	pushl  0x8(%ebp)
c002ac32:	e8 5d 00 00 00       	call   c002ac94 <list_back>
c002ac37:	83 c4 10             	add    $0x10,%esp
c002ac3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ac3d:	83 ec 0c             	sub    $0xc,%esp
c002ac40:	ff 75 f4             	pushl  -0xc(%ebp)
c002ac43:	e8 5b ff ff ff       	call   c002aba3 <list_remove>
c002ac48:	83 c4 10             	add    $0x10,%esp
c002ac4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ac4e:	c9                   	leave  
c002ac4f:	c3                   	ret    

c002ac50 <list_front>:
c002ac50:	55                   	push   %ebp
c002ac51:	89 e5                	mov    %esp,%ebp
c002ac53:	83 ec 08             	sub    $0x8,%esp
c002ac56:	83 ec 0c             	sub    $0xc,%esp
c002ac59:	ff 75 08             	pushl  0x8(%ebp)
c002ac5c:	e8 c4 00 00 00       	call   c002ad25 <list_empty>
c002ac61:	83 c4 10             	add    $0x10,%esp
c002ac64:	83 f0 01             	xor    $0x1,%eax
c002ac67:	84 c0                	test   %al,%al
c002ac69:	75 21                	jne    c002ac8c <list_front+0x3c>
c002ac6b:	83 ec 0c             	sub    $0xc,%esp
c002ac6e:	68 ac 50 03 c0       	push   $0xc00350ac
c002ac73:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002ac78:	68 18 52 03 c0       	push   $0xc0035218
c002ac7d:	68 1a 01 00 00       	push   $0x11a
c002ac82:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002ac87:	e8 9e f8 ff ff       	call   c002a52a <debug_panic>
c002ac8c:	8b 45 08             	mov    0x8(%ebp),%eax
c002ac8f:	8b 40 04             	mov    0x4(%eax),%eax
c002ac92:	c9                   	leave  
c002ac93:	c3                   	ret    

c002ac94 <list_back>:
c002ac94:	55                   	push   %ebp
c002ac95:	89 e5                	mov    %esp,%ebp
c002ac97:	83 ec 08             	sub    $0x8,%esp
c002ac9a:	83 ec 0c             	sub    $0xc,%esp
c002ac9d:	ff 75 08             	pushl  0x8(%ebp)
c002aca0:	e8 80 00 00 00       	call   c002ad25 <list_empty>
c002aca5:	83 c4 10             	add    $0x10,%esp
c002aca8:	83 f0 01             	xor    $0x1,%eax
c002acab:	84 c0                	test   %al,%al
c002acad:	75 21                	jne    c002acd0 <list_back+0x3c>
c002acaf:	83 ec 0c             	sub    $0xc,%esp
c002acb2:	68 ac 50 03 c0       	push   $0xc00350ac
c002acb7:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002acbc:	68 24 52 03 c0       	push   $0xc0035224
c002acc1:	68 23 01 00 00       	push   $0x123
c002acc6:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002accb:	e8 5a f8 ff ff       	call   c002a52a <debug_panic>
c002acd0:	8b 45 08             	mov    0x8(%ebp),%eax
c002acd3:	8b 40 08             	mov    0x8(%eax),%eax
c002acd6:	c9                   	leave  
c002acd7:	c3                   	ret    

c002acd8 <list_size>:
c002acd8:	55                   	push   %ebp
c002acd9:	89 e5                	mov    %esp,%ebp
c002acdb:	83 ec 18             	sub    $0x18,%esp
c002acde:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002ace5:	83 ec 0c             	sub    $0xc,%esp
c002ace8:	ff 75 08             	pushl  0x8(%ebp)
c002aceb:	e8 02 fb ff ff       	call   c002a7f2 <list_begin>
c002acf0:	83 c4 10             	add    $0x10,%esp
c002acf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002acf6:	eb 15                	jmp    c002ad0d <list_size+0x35>
c002acf8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002acfc:	83 ec 0c             	sub    $0xc,%esp
c002acff:	ff 75 f4             	pushl  -0xc(%ebp)
c002ad02:	e8 1d fb ff ff       	call   c002a824 <list_next>
c002ad07:	83 c4 10             	add    $0x10,%esp
c002ad0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ad0d:	83 ec 0c             	sub    $0xc,%esp
c002ad10:	ff 75 08             	pushl  0x8(%ebp)
c002ad13:	e8 56 fb ff ff       	call   c002a86e <list_end>
c002ad18:	83 c4 10             	add    $0x10,%esp
c002ad1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002ad1e:	75 d8                	jne    c002acf8 <list_size+0x20>
c002ad20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ad23:	c9                   	leave  
c002ad24:	c3                   	ret    

c002ad25 <list_empty>:
c002ad25:	55                   	push   %ebp
c002ad26:	89 e5                	mov    %esp,%ebp
c002ad28:	53                   	push   %ebx
c002ad29:	83 ec 04             	sub    $0x4,%esp
c002ad2c:	83 ec 0c             	sub    $0xc,%esp
c002ad2f:	ff 75 08             	pushl  0x8(%ebp)
c002ad32:	e8 bb fa ff ff       	call   c002a7f2 <list_begin>
c002ad37:	83 c4 10             	add    $0x10,%esp
c002ad3a:	89 c3                	mov    %eax,%ebx
c002ad3c:	83 ec 0c             	sub    $0xc,%esp
c002ad3f:	ff 75 08             	pushl  0x8(%ebp)
c002ad42:	e8 27 fb ff ff       	call   c002a86e <list_end>
c002ad47:	83 c4 10             	add    $0x10,%esp
c002ad4a:	39 c3                	cmp    %eax,%ebx
c002ad4c:	0f 94 c0             	sete   %al
c002ad4f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002ad52:	c9                   	leave  
c002ad53:	c3                   	ret    

c002ad54 <swap>:
c002ad54:	55                   	push   %ebp
c002ad55:	89 e5                	mov    %esp,%ebp
c002ad57:	83 ec 10             	sub    $0x10,%esp
c002ad5a:	8b 45 08             	mov    0x8(%ebp),%eax
c002ad5d:	8b 00                	mov    (%eax),%eax
c002ad5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002ad62:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ad65:	8b 10                	mov    (%eax),%edx
c002ad67:	8b 45 08             	mov    0x8(%ebp),%eax
c002ad6a:	89 10                	mov    %edx,(%eax)
c002ad6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ad6f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002ad72:	89 10                	mov    %edx,(%eax)
c002ad74:	90                   	nop
c002ad75:	c9                   	leave  
c002ad76:	c3                   	ret    

c002ad77 <list_reverse>:
c002ad77:	55                   	push   %ebp
c002ad78:	89 e5                	mov    %esp,%ebp
c002ad7a:	83 ec 18             	sub    $0x18,%esp
c002ad7d:	83 ec 0c             	sub    $0xc,%esp
c002ad80:	ff 75 08             	pushl  0x8(%ebp)
c002ad83:	e8 9d ff ff ff       	call   c002ad25 <list_empty>
c002ad88:	83 c4 10             	add    $0x10,%esp
c002ad8b:	83 f0 01             	xor    $0x1,%eax
c002ad8e:	84 c0                	test   %al,%al
c002ad90:	74 79                	je     c002ae0b <list_reverse+0x94>
c002ad92:	83 ec 0c             	sub    $0xc,%esp
c002ad95:	ff 75 08             	pushl  0x8(%ebp)
c002ad98:	e8 55 fa ff ff       	call   c002a7f2 <list_begin>
c002ad9d:	83 c4 10             	add    $0x10,%esp
c002ada0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ada3:	eb 1e                	jmp    c002adc3 <list_reverse+0x4c>
c002ada5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ada8:	8d 50 04             	lea    0x4(%eax),%edx
c002adab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002adae:	83 ec 08             	sub    $0x8,%esp
c002adb1:	52                   	push   %edx
c002adb2:	50                   	push   %eax
c002adb3:	e8 9c ff ff ff       	call   c002ad54 <swap>
c002adb8:	83 c4 10             	add    $0x10,%esp
c002adbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002adbe:	8b 00                	mov    (%eax),%eax
c002adc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002adc3:	83 ec 0c             	sub    $0xc,%esp
c002adc6:	ff 75 08             	pushl  0x8(%ebp)
c002adc9:	e8 a0 fa ff ff       	call   c002a86e <list_end>
c002adce:	83 c4 10             	add    $0x10,%esp
c002add1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002add4:	75 cf                	jne    c002ada5 <list_reverse+0x2e>
c002add6:	8b 45 08             	mov    0x8(%ebp),%eax
c002add9:	8d 50 08             	lea    0x8(%eax),%edx
c002addc:	8b 45 08             	mov    0x8(%ebp),%eax
c002addf:	83 c0 04             	add    $0x4,%eax
c002ade2:	83 ec 08             	sub    $0x8,%esp
c002ade5:	52                   	push   %edx
c002ade6:	50                   	push   %eax
c002ade7:	e8 68 ff ff ff       	call   c002ad54 <swap>
c002adec:	83 c4 10             	add    $0x10,%esp
c002adef:	8b 45 08             	mov    0x8(%ebp),%eax
c002adf2:	8b 40 08             	mov    0x8(%eax),%eax
c002adf5:	8d 50 04             	lea    0x4(%eax),%edx
c002adf8:	8b 45 08             	mov    0x8(%ebp),%eax
c002adfb:	8b 40 04             	mov    0x4(%eax),%eax
c002adfe:	83 ec 08             	sub    $0x8,%esp
c002ae01:	52                   	push   %edx
c002ae02:	50                   	push   %eax
c002ae03:	e8 4c ff ff ff       	call   c002ad54 <swap>
c002ae08:	83 c4 10             	add    $0x10,%esp
c002ae0b:	90                   	nop
c002ae0c:	c9                   	leave  
c002ae0d:	c3                   	ret    

c002ae0e <is_sorted>:
c002ae0e:	55                   	push   %ebp
c002ae0f:	89 e5                	mov    %esp,%ebp
c002ae11:	83 ec 08             	sub    $0x8,%esp
c002ae14:	8b 45 08             	mov    0x8(%ebp),%eax
c002ae17:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002ae1a:	74 46                	je     c002ae62 <is_sorted+0x54>
c002ae1c:	eb 2b                	jmp    c002ae49 <is_sorted+0x3b>
c002ae1e:	83 ec 0c             	sub    $0xc,%esp
c002ae21:	ff 75 08             	pushl  0x8(%ebp)
c002ae24:	e8 a9 fa ff ff       	call   c002a8d2 <list_prev>
c002ae29:	83 c4 10             	add    $0x10,%esp
c002ae2c:	83 ec 04             	sub    $0x4,%esp
c002ae2f:	ff 75 14             	pushl  0x14(%ebp)
c002ae32:	50                   	push   %eax
c002ae33:	ff 75 08             	pushl  0x8(%ebp)
c002ae36:	8b 45 10             	mov    0x10(%ebp),%eax
c002ae39:	ff d0                	call   *%eax
c002ae3b:	83 c4 10             	add    $0x10,%esp
c002ae3e:	84 c0                	test   %al,%al
c002ae40:	74 07                	je     c002ae49 <is_sorted+0x3b>
c002ae42:	b8 00 00 00 00       	mov    $0x0,%eax
c002ae47:	eb 1e                	jmp    c002ae67 <is_sorted+0x59>
c002ae49:	83 ec 0c             	sub    $0xc,%esp
c002ae4c:	ff 75 08             	pushl  0x8(%ebp)
c002ae4f:	e8 d0 f9 ff ff       	call   c002a824 <list_next>
c002ae54:	83 c4 10             	add    $0x10,%esp
c002ae57:	89 45 08             	mov    %eax,0x8(%ebp)
c002ae5a:	8b 45 08             	mov    0x8(%ebp),%eax
c002ae5d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002ae60:	75 bc                	jne    c002ae1e <is_sorted+0x10>
c002ae62:	b8 01 00 00 00       	mov    $0x1,%eax
c002ae67:	c9                   	leave  
c002ae68:	c3                   	ret    

c002ae69 <find_end_of_run>:
c002ae69:	55                   	push   %ebp
c002ae6a:	89 e5                	mov    %esp,%ebp
c002ae6c:	83 ec 08             	sub    $0x8,%esp
c002ae6f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002ae73:	75 21                	jne    c002ae96 <find_end_of_run+0x2d>
c002ae75:	83 ec 0c             	sub    $0xc,%esp
c002ae78:	68 bf 50 03 c0       	push   $0xc00350bf
c002ae7d:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002ae82:	68 30 52 03 c0       	push   $0xc0035230
c002ae87:	68 69 01 00 00       	push   $0x169
c002ae8c:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002ae91:	e8 94 f6 ff ff       	call   c002a52a <debug_panic>
c002ae96:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002ae9a:	75 21                	jne    c002aebd <find_end_of_run+0x54>
c002ae9c:	83 ec 0c             	sub    $0xc,%esp
c002ae9f:	68 c9 50 03 c0       	push   $0xc00350c9
c002aea4:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002aea9:	68 30 52 03 c0       	push   $0xc0035230
c002aeae:	68 6a 01 00 00       	push   $0x16a
c002aeb3:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002aeb8:	e8 6d f6 ff ff       	call   c002a52a <debug_panic>
c002aebd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002aec1:	75 21                	jne    c002aee4 <find_end_of_run+0x7b>
c002aec3:	83 ec 0c             	sub    $0xc,%esp
c002aec6:	68 d3 50 03 c0       	push   $0xc00350d3
c002aecb:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002aed0:	68 30 52 03 c0       	push   $0xc0035230
c002aed5:	68 6b 01 00 00       	push   $0x16b
c002aeda:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002aedf:	e8 46 f6 ff ff       	call   c002a52a <debug_panic>
c002aee4:	8b 45 08             	mov    0x8(%ebp),%eax
c002aee7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002aeea:	75 21                	jne    c002af0d <find_end_of_run+0xa4>
c002aeec:	83 ec 0c             	sub    $0xc,%esp
c002aeef:	68 e0 50 03 c0       	push   $0xc00350e0
c002aef4:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002aef9:	68 30 52 03 c0       	push   $0xc0035230
c002aefe:	68 6c 01 00 00       	push   $0x16c
c002af03:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002af08:	e8 1d f6 ff ff       	call   c002a52a <debug_panic>
c002af0d:	83 ec 0c             	sub    $0xc,%esp
c002af10:	ff 75 08             	pushl  0x8(%ebp)
c002af13:	e8 0c f9 ff ff       	call   c002a824 <list_next>
c002af18:	83 c4 10             	add    $0x10,%esp
c002af1b:	89 45 08             	mov    %eax,0x8(%ebp)
c002af1e:	8b 45 08             	mov    0x8(%ebp),%eax
c002af21:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002af24:	74 27                	je     c002af4d <find_end_of_run+0xe4>
c002af26:	83 ec 0c             	sub    $0xc,%esp
c002af29:	ff 75 08             	pushl  0x8(%ebp)
c002af2c:	e8 a1 f9 ff ff       	call   c002a8d2 <list_prev>
c002af31:	83 c4 10             	add    $0x10,%esp
c002af34:	83 ec 04             	sub    $0x4,%esp
c002af37:	ff 75 14             	pushl  0x14(%ebp)
c002af3a:	50                   	push   %eax
c002af3b:	ff 75 08             	pushl  0x8(%ebp)
c002af3e:	8b 45 10             	mov    0x10(%ebp),%eax
c002af41:	ff d0                	call   *%eax
c002af43:	83 c4 10             	add    $0x10,%esp
c002af46:	83 f0 01             	xor    $0x1,%eax
c002af49:	84 c0                	test   %al,%al
c002af4b:	75 c0                	jne    c002af0d <find_end_of_run+0xa4>
c002af4d:	8b 45 08             	mov    0x8(%ebp),%eax
c002af50:	c9                   	leave  
c002af51:	c3                   	ret    

c002af52 <inplace_merge>:
c002af52:	55                   	push   %ebp
c002af53:	89 e5                	mov    %esp,%ebp
c002af55:	83 ec 08             	sub    $0x8,%esp
c002af58:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002af5c:	75 21                	jne    c002af7f <inplace_merge+0x2d>
c002af5e:	83 ec 0c             	sub    $0xc,%esp
c002af61:	68 e7 50 03 c0       	push   $0xc00350e7
c002af66:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002af6b:	68 40 52 03 c0       	push   $0xc0035240
c002af70:	68 80 01 00 00       	push   $0x180
c002af75:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002af7a:	e8 ab f5 ff ff       	call   c002a52a <debug_panic>
c002af7f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002af83:	75 21                	jne    c002afa6 <inplace_merge+0x54>
c002af85:	83 ec 0c             	sub    $0xc,%esp
c002af88:	68 f2 50 03 c0       	push   $0xc00350f2
c002af8d:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002af92:	68 40 52 03 c0       	push   $0xc0035240
c002af97:	68 81 01 00 00       	push   $0x181
c002af9c:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002afa1:	e8 84 f5 ff ff       	call   c002a52a <debug_panic>
c002afa6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002afaa:	75 21                	jne    c002afcd <inplace_merge+0x7b>
c002afac:	83 ec 0c             	sub    $0xc,%esp
c002afaf:	68 ff 50 03 c0       	push   $0xc00350ff
c002afb4:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002afb9:	68 40 52 03 c0       	push   $0xc0035240
c002afbe:	68 82 01 00 00       	push   $0x182
c002afc3:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002afc8:	e8 5d f5 ff ff       	call   c002a52a <debug_panic>
c002afcd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c002afd1:	75 21                	jne    c002aff4 <inplace_merge+0xa2>
c002afd3:	83 ec 0c             	sub    $0xc,%esp
c002afd6:	68 d3 50 03 c0       	push   $0xc00350d3
c002afdb:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002afe0:	68 40 52 03 c0       	push   $0xc0035240
c002afe5:	68 83 01 00 00       	push   $0x183
c002afea:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002afef:	e8 36 f5 ff ff       	call   c002a52a <debug_panic>
c002aff4:	ff 75 18             	pushl  0x18(%ebp)
c002aff7:	ff 75 14             	pushl  0x14(%ebp)
c002affa:	ff 75 0c             	pushl  0xc(%ebp)
c002affd:	ff 75 08             	pushl  0x8(%ebp)
c002b000:	e8 09 fe ff ff       	call   c002ae0e <is_sorted>
c002b005:	83 c4 10             	add    $0x10,%esp
c002b008:	84 c0                	test   %al,%al
c002b00a:	75 21                	jne    c002b02d <inplace_merge+0xdb>
c002b00c:	83 ec 0c             	sub    $0xc,%esp
c002b00f:	68 0c 51 03 c0       	push   $0xc003510c
c002b014:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b019:	68 40 52 03 c0       	push   $0xc0035240
c002b01e:	68 84 01 00 00       	push   $0x184
c002b023:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b028:	e8 fd f4 ff ff       	call   c002a52a <debug_panic>
c002b02d:	ff 75 18             	pushl  0x18(%ebp)
c002b030:	ff 75 14             	pushl  0x14(%ebp)
c002b033:	ff 75 10             	pushl  0x10(%ebp)
c002b036:	ff 75 0c             	pushl  0xc(%ebp)
c002b039:	e8 d0 fd ff ff       	call   c002ae0e <is_sorted>
c002b03e:	83 c4 10             	add    $0x10,%esp
c002b041:	84 c0                	test   %al,%al
c002b043:	0f 85 80 00 00 00    	jne    c002b0c9 <inplace_merge+0x177>
c002b049:	83 ec 0c             	sub    $0xc,%esp
c002b04c:	68 2c 51 03 c0       	push   $0xc003512c
c002b051:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b056:	68 40 52 03 c0       	push   $0xc0035240
c002b05b:	68 85 01 00 00       	push   $0x185
c002b060:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b065:	e8 c0 f4 ff ff       	call   c002a52a <debug_panic>
c002b06a:	83 ec 04             	sub    $0x4,%esp
c002b06d:	ff 75 18             	pushl  0x18(%ebp)
c002b070:	ff 75 08             	pushl  0x8(%ebp)
c002b073:	ff 75 0c             	pushl  0xc(%ebp)
c002b076:	8b 45 14             	mov    0x14(%ebp),%eax
c002b079:	ff d0                	call   *%eax
c002b07b:	83 c4 10             	add    $0x10,%esp
c002b07e:	83 f0 01             	xor    $0x1,%eax
c002b081:	84 c0                	test   %al,%al
c002b083:	74 13                	je     c002b098 <inplace_merge+0x146>
c002b085:	83 ec 0c             	sub    $0xc,%esp
c002b088:	ff 75 08             	pushl  0x8(%ebp)
c002b08b:	e8 94 f7 ff ff       	call   c002a824 <list_next>
c002b090:	83 c4 10             	add    $0x10,%esp
c002b093:	89 45 08             	mov    %eax,0x8(%ebp)
c002b096:	eb 31                	jmp    c002b0c9 <inplace_merge+0x177>
c002b098:	83 ec 0c             	sub    $0xc,%esp
c002b09b:	ff 75 0c             	pushl  0xc(%ebp)
c002b09e:	e8 81 f7 ff ff       	call   c002a824 <list_next>
c002b0a3:	83 c4 10             	add    $0x10,%esp
c002b0a6:	89 45 0c             	mov    %eax,0xc(%ebp)
c002b0a9:	83 ec 0c             	sub    $0xc,%esp
c002b0ac:	ff 75 0c             	pushl  0xc(%ebp)
c002b0af:	e8 1e f8 ff ff       	call   c002a8d2 <list_prev>
c002b0b4:	83 c4 10             	add    $0x10,%esp
c002b0b7:	83 ec 04             	sub    $0x4,%esp
c002b0ba:	ff 75 0c             	pushl  0xc(%ebp)
c002b0bd:	50                   	push   %eax
c002b0be:	ff 75 08             	pushl  0x8(%ebp)
c002b0c1:	e8 83 f9 ff ff       	call   c002aa49 <list_splice>
c002b0c6:	83 c4 10             	add    $0x10,%esp
c002b0c9:	8b 45 08             	mov    0x8(%ebp),%eax
c002b0cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b0cf:	74 08                	je     c002b0d9 <inplace_merge+0x187>
c002b0d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b0d4:	3b 45 10             	cmp    0x10(%ebp),%eax
c002b0d7:	75 91                	jne    c002b06a <inplace_merge+0x118>
c002b0d9:	90                   	nop
c002b0da:	c9                   	leave  
c002b0db:	c3                   	ret    

c002b0dc <list_sort>:
c002b0dc:	55                   	push   %ebp
c002b0dd:	89 e5                	mov    %esp,%ebp
c002b0df:	53                   	push   %ebx
c002b0e0:	83 ec 14             	sub    $0x14,%esp
c002b0e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b0e7:	75 21                	jne    c002b10a <list_sort+0x2e>
c002b0e9:	83 ec 0c             	sub    $0xc,%esp
c002b0ec:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002b0f1:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b0f6:	68 50 52 03 c0       	push   $0xc0035250
c002b0fb:	68 99 01 00 00       	push   $0x199
c002b100:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b105:	e8 20 f4 ff ff       	call   c002a52a <debug_panic>
c002b10a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002b10e:	75 21                	jne    c002b131 <list_sort+0x55>
c002b110:	83 ec 0c             	sub    $0xc,%esp
c002b113:	68 d3 50 03 c0       	push   $0xc00350d3
c002b118:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b11d:	68 50 52 03 c0       	push   $0xc0035250
c002b122:	68 9a 01 00 00       	push   $0x19a
c002b127:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b12c:	e8 f9 f3 ff ff       	call   c002a52a <debug_panic>
c002b131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002b138:	83 ec 0c             	sub    $0xc,%esp
c002b13b:	ff 75 08             	pushl  0x8(%ebp)
c002b13e:	e8 af f6 ff ff       	call   c002a7f2 <list_begin>
c002b143:	83 c4 10             	add    $0x10,%esp
c002b146:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b149:	eb 7d                	jmp    c002b1c8 <list_sort+0xec>
c002b14b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002b14f:	83 ec 0c             	sub    $0xc,%esp
c002b152:	ff 75 08             	pushl  0x8(%ebp)
c002b155:	e8 14 f7 ff ff       	call   c002a86e <list_end>
c002b15a:	83 c4 10             	add    $0x10,%esp
c002b15d:	ff 75 10             	pushl  0x10(%ebp)
c002b160:	ff 75 0c             	pushl  0xc(%ebp)
c002b163:	50                   	push   %eax
c002b164:	ff 75 f0             	pushl  -0x10(%ebp)
c002b167:	e8 fd fc ff ff       	call   c002ae69 <find_end_of_run>
c002b16c:	83 c4 10             	add    $0x10,%esp
c002b16f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002b172:	83 ec 0c             	sub    $0xc,%esp
c002b175:	ff 75 08             	pushl  0x8(%ebp)
c002b178:	e8 f1 f6 ff ff       	call   c002a86e <list_end>
c002b17d:	83 c4 10             	add    $0x10,%esp
c002b180:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002b183:	74 5c                	je     c002b1e1 <list_sort+0x105>
c002b185:	83 ec 0c             	sub    $0xc,%esp
c002b188:	ff 75 08             	pushl  0x8(%ebp)
c002b18b:	e8 de f6 ff ff       	call   c002a86e <list_end>
c002b190:	83 c4 10             	add    $0x10,%esp
c002b193:	ff 75 10             	pushl  0x10(%ebp)
c002b196:	ff 75 0c             	pushl  0xc(%ebp)
c002b199:	50                   	push   %eax
c002b19a:	ff 75 ec             	pushl  -0x14(%ebp)
c002b19d:	e8 c7 fc ff ff       	call   c002ae69 <find_end_of_run>
c002b1a2:	83 c4 10             	add    $0x10,%esp
c002b1a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002b1a8:	83 ec 0c             	sub    $0xc,%esp
c002b1ab:	ff 75 10             	pushl  0x10(%ebp)
c002b1ae:	ff 75 0c             	pushl  0xc(%ebp)
c002b1b1:	ff 75 e8             	pushl  -0x18(%ebp)
c002b1b4:	ff 75 ec             	pushl  -0x14(%ebp)
c002b1b7:	ff 75 f0             	pushl  -0x10(%ebp)
c002b1ba:	e8 93 fd ff ff       	call   c002af52 <inplace_merge>
c002b1bf:	83 c4 20             	add    $0x20,%esp
c002b1c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002b1c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b1c8:	83 ec 0c             	sub    $0xc,%esp
c002b1cb:	ff 75 08             	pushl  0x8(%ebp)
c002b1ce:	e8 9b f6 ff ff       	call   c002a86e <list_end>
c002b1d3:	83 c4 10             	add    $0x10,%esp
c002b1d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002b1d9:	0f 85 6c ff ff ff    	jne    c002b14b <list_sort+0x6f>
c002b1df:	eb 01                	jmp    c002b1e2 <list_sort+0x106>
c002b1e1:	90                   	nop
c002b1e2:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c002b1e6:	0f 87 45 ff ff ff    	ja     c002b131 <list_sort+0x55>
c002b1ec:	83 ec 0c             	sub    $0xc,%esp
c002b1ef:	ff 75 08             	pushl  0x8(%ebp)
c002b1f2:	e8 77 f6 ff ff       	call   c002a86e <list_end>
c002b1f7:	83 c4 10             	add    $0x10,%esp
c002b1fa:	89 c3                	mov    %eax,%ebx
c002b1fc:	83 ec 0c             	sub    $0xc,%esp
c002b1ff:	ff 75 08             	pushl  0x8(%ebp)
c002b202:	e8 eb f5 ff ff       	call   c002a7f2 <list_begin>
c002b207:	83 c4 10             	add    $0x10,%esp
c002b20a:	ff 75 10             	pushl  0x10(%ebp)
c002b20d:	ff 75 0c             	pushl  0xc(%ebp)
c002b210:	53                   	push   %ebx
c002b211:	50                   	push   %eax
c002b212:	e8 f7 fb ff ff       	call   c002ae0e <is_sorted>
c002b217:	83 c4 10             	add    $0x10,%esp
c002b21a:	84 c0                	test   %al,%al
c002b21c:	75 21                	jne    c002b23f <list_sort+0x163>
c002b21e:	83 ec 0c             	sub    $0xc,%esp
c002b221:	68 4c 51 03 c0       	push   $0xc003514c
c002b226:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b22b:	68 50 52 03 c0       	push   $0xc0035250
c002b230:	68 b7 01 00 00       	push   $0x1b7
c002b235:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b23a:	e8 eb f2 ff ff       	call   c002a52a <debug_panic>
c002b23f:	90                   	nop
c002b240:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002b243:	c9                   	leave  
c002b244:	c3                   	ret    

c002b245 <list_insert_ordered>:
c002b245:	55                   	push   %ebp
c002b246:	89 e5                	mov    %esp,%ebp
c002b248:	83 ec 18             	sub    $0x18,%esp
c002b24b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b24f:	75 21                	jne    c002b272 <list_insert_ordered+0x2d>
c002b251:	83 ec 0c             	sub    $0xc,%esp
c002b254:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002b259:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b25e:	68 5c 52 03 c0       	push   $0xc003525c
c002b263:	68 c3 01 00 00       	push   $0x1c3
c002b268:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b26d:	e8 b8 f2 ff ff       	call   c002a52a <debug_panic>
c002b272:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002b276:	75 21                	jne    c002b299 <list_insert_ordered+0x54>
c002b278:	83 ec 0c             	sub    $0xc,%esp
c002b27b:	68 65 50 03 c0       	push   $0xc0035065
c002b280:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b285:	68 5c 52 03 c0       	push   $0xc003525c
c002b28a:	68 c4 01 00 00       	push   $0x1c4
c002b28f:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b294:	e8 91 f2 ff ff       	call   c002a52a <debug_panic>
c002b299:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002b29d:	75 21                	jne    c002b2c0 <list_insert_ordered+0x7b>
c002b29f:	83 ec 0c             	sub    $0xc,%esp
c002b2a2:	68 d3 50 03 c0       	push   $0xc00350d3
c002b2a7:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b2ac:	68 5c 52 03 c0       	push   $0xc003525c
c002b2b1:	68 c5 01 00 00       	push   $0x1c5
c002b2b6:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b2bb:	e8 6a f2 ff ff       	call   c002a52a <debug_panic>
c002b2c0:	83 ec 0c             	sub    $0xc,%esp
c002b2c3:	ff 75 08             	pushl  0x8(%ebp)
c002b2c6:	e8 27 f5 ff ff       	call   c002a7f2 <list_begin>
c002b2cb:	83 c4 10             	add    $0x10,%esp
c002b2ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b2d1:	eb 29                	jmp    c002b2fc <list_insert_ordered+0xb7>
c002b2d3:	83 ec 04             	sub    $0x4,%esp
c002b2d6:	ff 75 14             	pushl  0x14(%ebp)
c002b2d9:	ff 75 f4             	pushl  -0xc(%ebp)
c002b2dc:	ff 75 0c             	pushl  0xc(%ebp)
c002b2df:	8b 45 10             	mov    0x10(%ebp),%eax
c002b2e2:	ff d0                	call   *%eax
c002b2e4:	83 c4 10             	add    $0x10,%esp
c002b2e7:	84 c0                	test   %al,%al
c002b2e9:	75 26                	jne    c002b311 <list_insert_ordered+0xcc>
c002b2eb:	83 ec 0c             	sub    $0xc,%esp
c002b2ee:	ff 75 f4             	pushl  -0xc(%ebp)
c002b2f1:	e8 2e f5 ff ff       	call   c002a824 <list_next>
c002b2f6:	83 c4 10             	add    $0x10,%esp
c002b2f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b2fc:	83 ec 0c             	sub    $0xc,%esp
c002b2ff:	ff 75 08             	pushl  0x8(%ebp)
c002b302:	e8 67 f5 ff ff       	call   c002a86e <list_end>
c002b307:	83 c4 10             	add    $0x10,%esp
c002b30a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002b30d:	75 c4                	jne    c002b2d3 <list_insert_ordered+0x8e>
c002b30f:	eb 01                	jmp    c002b312 <list_insert_ordered+0xcd>
c002b311:	90                   	nop
c002b312:	83 ec 08             	sub    $0x8,%esp
c002b315:	ff 75 0c             	pushl  0xc(%ebp)
c002b318:	ff 75 f4             	pushl  -0xc(%ebp)
c002b31b:	e8 94 f6 ff ff       	call   c002a9b4 <list_insert>
c002b320:	83 c4 10             	add    $0x10,%esp
c002b323:	c9                   	leave  
c002b324:	c3                   	ret    

c002b325 <list_unique>:
c002b325:	55                   	push   %ebp
c002b326:	89 e5                	mov    %esp,%ebp
c002b328:	83 ec 18             	sub    $0x18,%esp
c002b32b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b32f:	75 21                	jne    c002b352 <list_unique+0x2d>
c002b331:	83 ec 0c             	sub    $0xc,%esp
c002b334:	68 b0 4f 03 c0       	push   $0xc0034fb0
c002b339:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b33e:	68 70 52 03 c0       	push   $0xc0035270
c002b343:	68 d7 01 00 00       	push   $0x1d7
c002b348:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b34d:	e8 d8 f1 ff ff       	call   c002a52a <debug_panic>
c002b352:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002b356:	75 21                	jne    c002b379 <list_unique+0x54>
c002b358:	83 ec 0c             	sub    $0xc,%esp
c002b35b:	68 d3 50 03 c0       	push   $0xc00350d3
c002b360:	68 bd 4f 03 c0       	push   $0xc0034fbd
c002b365:	68 70 52 03 c0       	push   $0xc0035270
c002b36a:	68 d8 01 00 00       	push   $0x1d8
c002b36f:	68 d4 4f 03 c0       	push   $0xc0034fd4
c002b374:	e8 b1 f1 ff ff       	call   c002a52a <debug_panic>
c002b379:	83 ec 0c             	sub    $0xc,%esp
c002b37c:	ff 75 08             	pushl  0x8(%ebp)
c002b37f:	e8 a1 f9 ff ff       	call   c002ad25 <list_empty>
c002b384:	83 c4 10             	add    $0x10,%esp
c002b387:	84 c0                	test   %al,%al
c002b389:	0f 85 a0 00 00 00    	jne    c002b42f <list_unique+0x10a>
c002b38f:	83 ec 0c             	sub    $0xc,%esp
c002b392:	ff 75 08             	pushl  0x8(%ebp)
c002b395:	e8 58 f4 ff ff       	call   c002a7f2 <list_begin>
c002b39a:	83 c4 10             	add    $0x10,%esp
c002b39d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b3a0:	eb 63                	jmp    c002b405 <list_unique+0xe0>
c002b3a2:	83 ec 04             	sub    $0x4,%esp
c002b3a5:	ff 75 14             	pushl  0x14(%ebp)
c002b3a8:	ff 75 f0             	pushl  -0x10(%ebp)
c002b3ab:	ff 75 f4             	pushl  -0xc(%ebp)
c002b3ae:	8b 45 10             	mov    0x10(%ebp),%eax
c002b3b1:	ff d0                	call   *%eax
c002b3b3:	83 c4 10             	add    $0x10,%esp
c002b3b6:	83 f0 01             	xor    $0x1,%eax
c002b3b9:	84 c0                	test   %al,%al
c002b3bb:	74 42                	je     c002b3ff <list_unique+0xda>
c002b3bd:	83 ec 04             	sub    $0x4,%esp
c002b3c0:	ff 75 14             	pushl  0x14(%ebp)
c002b3c3:	ff 75 f4             	pushl  -0xc(%ebp)
c002b3c6:	ff 75 f0             	pushl  -0x10(%ebp)
c002b3c9:	8b 45 10             	mov    0x10(%ebp),%eax
c002b3cc:	ff d0                	call   *%eax
c002b3ce:	83 c4 10             	add    $0x10,%esp
c002b3d1:	83 f0 01             	xor    $0x1,%eax
c002b3d4:	84 c0                	test   %al,%al
c002b3d6:	74 27                	je     c002b3ff <list_unique+0xda>
c002b3d8:	83 ec 0c             	sub    $0xc,%esp
c002b3db:	ff 75 f0             	pushl  -0x10(%ebp)
c002b3de:	e8 c0 f7 ff ff       	call   c002aba3 <list_remove>
c002b3e3:	83 c4 10             	add    $0x10,%esp
c002b3e6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002b3ea:	74 19                	je     c002b405 <list_unique+0xe0>
c002b3ec:	83 ec 08             	sub    $0x8,%esp
c002b3ef:	ff 75 f0             	pushl  -0x10(%ebp)
c002b3f2:	ff 75 0c             	pushl  0xc(%ebp)
c002b3f5:	e8 83 f7 ff ff       	call   c002ab7d <list_push_back>
c002b3fa:	83 c4 10             	add    $0x10,%esp
c002b3fd:	eb 06                	jmp    c002b405 <list_unique+0xe0>
c002b3ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002b402:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b405:	83 ec 0c             	sub    $0xc,%esp
c002b408:	ff 75 f4             	pushl  -0xc(%ebp)
c002b40b:	e8 14 f4 ff ff       	call   c002a824 <list_next>
c002b410:	83 c4 10             	add    $0x10,%esp
c002b413:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b416:	83 ec 0c             	sub    $0xc,%esp
c002b419:	ff 75 08             	pushl  0x8(%ebp)
c002b41c:	e8 4d f4 ff ff       	call   c002a86e <list_end>
c002b421:	83 c4 10             	add    $0x10,%esp
c002b424:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c002b427:	0f 85 75 ff ff ff    	jne    c002b3a2 <list_unique+0x7d>
c002b42d:	eb 01                	jmp    c002b430 <list_unique+0x10b>
c002b42f:	90                   	nop
c002b430:	c9                   	leave  
c002b431:	c3                   	ret    

c002b432 <list_max>:
c002b432:	55                   	push   %ebp
c002b433:	89 e5                	mov    %esp,%ebp
c002b435:	83 ec 18             	sub    $0x18,%esp
c002b438:	83 ec 0c             	sub    $0xc,%esp
c002b43b:	ff 75 08             	pushl  0x8(%ebp)
c002b43e:	e8 af f3 ff ff       	call   c002a7f2 <list_begin>
c002b443:	83 c4 10             	add    $0x10,%esp
c002b446:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b449:	83 ec 0c             	sub    $0xc,%esp
c002b44c:	ff 75 08             	pushl  0x8(%ebp)
c002b44f:	e8 1a f4 ff ff       	call   c002a86e <list_end>
c002b454:	83 c4 10             	add    $0x10,%esp
c002b457:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002b45a:	74 55                	je     c002b4b1 <list_max+0x7f>
c002b45c:	83 ec 0c             	sub    $0xc,%esp
c002b45f:	ff 75 f4             	pushl  -0xc(%ebp)
c002b462:	e8 bd f3 ff ff       	call   c002a824 <list_next>
c002b467:	83 c4 10             	add    $0x10,%esp
c002b46a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b46d:	eb 2f                	jmp    c002b49e <list_max+0x6c>
c002b46f:	83 ec 04             	sub    $0x4,%esp
c002b472:	ff 75 10             	pushl  0x10(%ebp)
c002b475:	ff 75 f0             	pushl  -0x10(%ebp)
c002b478:	ff 75 f4             	pushl  -0xc(%ebp)
c002b47b:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b47e:	ff d0                	call   *%eax
c002b480:	83 c4 10             	add    $0x10,%esp
c002b483:	84 c0                	test   %al,%al
c002b485:	74 06                	je     c002b48d <list_max+0x5b>
c002b487:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002b48a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b48d:	83 ec 0c             	sub    $0xc,%esp
c002b490:	ff 75 f0             	pushl  -0x10(%ebp)
c002b493:	e8 8c f3 ff ff       	call   c002a824 <list_next>
c002b498:	83 c4 10             	add    $0x10,%esp
c002b49b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b49e:	83 ec 0c             	sub    $0xc,%esp
c002b4a1:	ff 75 08             	pushl  0x8(%ebp)
c002b4a4:	e8 c5 f3 ff ff       	call   c002a86e <list_end>
c002b4a9:	83 c4 10             	add    $0x10,%esp
c002b4ac:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002b4af:	75 be                	jne    c002b46f <list_max+0x3d>
c002b4b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b4b4:	c9                   	leave  
c002b4b5:	c3                   	ret    

c002b4b6 <list_min>:
c002b4b6:	55                   	push   %ebp
c002b4b7:	89 e5                	mov    %esp,%ebp
c002b4b9:	83 ec 18             	sub    $0x18,%esp
c002b4bc:	83 ec 0c             	sub    $0xc,%esp
c002b4bf:	ff 75 08             	pushl  0x8(%ebp)
c002b4c2:	e8 2b f3 ff ff       	call   c002a7f2 <list_begin>
c002b4c7:	83 c4 10             	add    $0x10,%esp
c002b4ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b4cd:	83 ec 0c             	sub    $0xc,%esp
c002b4d0:	ff 75 08             	pushl  0x8(%ebp)
c002b4d3:	e8 96 f3 ff ff       	call   c002a86e <list_end>
c002b4d8:	83 c4 10             	add    $0x10,%esp
c002b4db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002b4de:	74 55                	je     c002b535 <list_min+0x7f>
c002b4e0:	83 ec 0c             	sub    $0xc,%esp
c002b4e3:	ff 75 f4             	pushl  -0xc(%ebp)
c002b4e6:	e8 39 f3 ff ff       	call   c002a824 <list_next>
c002b4eb:	83 c4 10             	add    $0x10,%esp
c002b4ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b4f1:	eb 2f                	jmp    c002b522 <list_min+0x6c>
c002b4f3:	83 ec 04             	sub    $0x4,%esp
c002b4f6:	ff 75 10             	pushl  0x10(%ebp)
c002b4f9:	ff 75 f4             	pushl  -0xc(%ebp)
c002b4fc:	ff 75 f0             	pushl  -0x10(%ebp)
c002b4ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b502:	ff d0                	call   *%eax
c002b504:	83 c4 10             	add    $0x10,%esp
c002b507:	84 c0                	test   %al,%al
c002b509:	74 06                	je     c002b511 <list_min+0x5b>
c002b50b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002b50e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b511:	83 ec 0c             	sub    $0xc,%esp
c002b514:	ff 75 f0             	pushl  -0x10(%ebp)
c002b517:	e8 08 f3 ff ff       	call   c002a824 <list_next>
c002b51c:	83 c4 10             	add    $0x10,%esp
c002b51f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002b522:	83 ec 0c             	sub    $0xc,%esp
c002b525:	ff 75 08             	pushl  0x8(%ebp)
c002b528:	e8 41 f3 ff ff       	call   c002a86e <list_end>
c002b52d:	83 c4 10             	add    $0x10,%esp
c002b530:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002b533:	75 be                	jne    c002b4f3 <list_min+0x3d>
c002b535:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b538:	c9                   	leave  
c002b539:	c3                   	ret    

c002b53a <elem_idx>:
c002b53a:	55                   	push   %ebp
c002b53b:	89 e5                	mov    %esp,%ebp
c002b53d:	8b 45 08             	mov    0x8(%ebp),%eax
c002b540:	c1 e8 05             	shr    $0x5,%eax
c002b543:	5d                   	pop    %ebp
c002b544:	c3                   	ret    

c002b545 <bit_mask>:
c002b545:	55                   	push   %ebp
c002b546:	89 e5                	mov    %esp,%ebp
c002b548:	8b 45 08             	mov    0x8(%ebp),%eax
c002b54b:	83 e0 1f             	and    $0x1f,%eax
c002b54e:	ba 01 00 00 00       	mov    $0x1,%edx
c002b553:	89 c1                	mov    %eax,%ecx
c002b555:	d3 e2                	shl    %cl,%edx
c002b557:	89 d0                	mov    %edx,%eax
c002b559:	5d                   	pop    %ebp
c002b55a:	c3                   	ret    

c002b55b <elem_cnt>:
c002b55b:	55                   	push   %ebp
c002b55c:	89 e5                	mov    %esp,%ebp
c002b55e:	8b 45 08             	mov    0x8(%ebp),%eax
c002b561:	83 c0 1f             	add    $0x1f,%eax
c002b564:	c1 e8 05             	shr    $0x5,%eax
c002b567:	5d                   	pop    %ebp
c002b568:	c3                   	ret    

c002b569 <byte_cnt>:
c002b569:	55                   	push   %ebp
c002b56a:	89 e5                	mov    %esp,%ebp
c002b56c:	ff 75 08             	pushl  0x8(%ebp)
c002b56f:	e8 e7 ff ff ff       	call   c002b55b <elem_cnt>
c002b574:	83 c4 04             	add    $0x4,%esp
c002b577:	c1 e0 02             	shl    $0x2,%eax
c002b57a:	c9                   	leave  
c002b57b:	c3                   	ret    

c002b57c <last_mask>:
c002b57c:	55                   	push   %ebp
c002b57d:	89 e5                	mov    %esp,%ebp
c002b57f:	83 ec 10             	sub    $0x10,%esp
c002b582:	8b 45 08             	mov    0x8(%ebp),%eax
c002b585:	8b 00                	mov    (%eax),%eax
c002b587:	83 e0 1f             	and    $0x1f,%eax
c002b58a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b58d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c002b591:	74 13                	je     c002b5a6 <last_mask+0x2a>
c002b593:	8b 45 fc             	mov    -0x4(%ebp),%eax
c002b596:	ba 01 00 00 00       	mov    $0x1,%edx
c002b59b:	89 c1                	mov    %eax,%ecx
c002b59d:	d3 e2                	shl    %cl,%edx
c002b59f:	89 d0                	mov    %edx,%eax
c002b5a1:	83 e8 01             	sub    $0x1,%eax
c002b5a4:	eb 05                	jmp    c002b5ab <last_mask+0x2f>
c002b5a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002b5ab:	c9                   	leave  
c002b5ac:	c3                   	ret    

c002b5ad <bitmap_create>:
c002b5ad:	55                   	push   %ebp
c002b5ae:	89 e5                	mov    %esp,%ebp
c002b5b0:	83 ec 18             	sub    $0x18,%esp
c002b5b3:	83 ec 0c             	sub    $0xc,%esp
c002b5b6:	6a 08                	push   $0x8
c002b5b8:	e8 31 8b ff ff       	call   c00240ee <malloc>
c002b5bd:	83 c4 10             	add    $0x10,%esp
c002b5c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b5c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002b5c7:	74 5d                	je     c002b626 <bitmap_create+0x79>
c002b5c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b5cc:	8b 55 08             	mov    0x8(%ebp),%edx
c002b5cf:	89 10                	mov    %edx,(%eax)
c002b5d1:	83 ec 0c             	sub    $0xc,%esp
c002b5d4:	ff 75 08             	pushl  0x8(%ebp)
c002b5d7:	e8 8d ff ff ff       	call   c002b569 <byte_cnt>
c002b5dc:	83 c4 10             	add    $0x10,%esp
c002b5df:	83 ec 0c             	sub    $0xc,%esp
c002b5e2:	50                   	push   %eax
c002b5e3:	e8 06 8b ff ff       	call   c00240ee <malloc>
c002b5e8:	83 c4 10             	add    $0x10,%esp
c002b5eb:	89 c2                	mov    %eax,%edx
c002b5ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b5f0:	89 50 04             	mov    %edx,0x4(%eax)
c002b5f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b5f6:	8b 40 04             	mov    0x4(%eax),%eax
c002b5f9:	85 c0                	test   %eax,%eax
c002b5fb:	75 06                	jne    c002b603 <bitmap_create+0x56>
c002b5fd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b601:	75 15                	jne    c002b618 <bitmap_create+0x6b>
c002b603:	83 ec 08             	sub    $0x8,%esp
c002b606:	6a 00                	push   $0x0
c002b608:	ff 75 f4             	pushl  -0xc(%ebp)
c002b60b:	e8 92 02 00 00       	call   c002b8a2 <bitmap_set_all>
c002b610:	83 c4 10             	add    $0x10,%esp
c002b613:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b616:	eb 13                	jmp    c002b62b <bitmap_create+0x7e>
c002b618:	83 ec 0c             	sub    $0xc,%esp
c002b61b:	ff 75 f4             	pushl  -0xc(%ebp)
c002b61e:	e8 c8 8d ff ff       	call   c00243eb <free>
c002b623:	83 c4 10             	add    $0x10,%esp
c002b626:	b8 00 00 00 00       	mov    $0x0,%eax
c002b62b:	c9                   	leave  
c002b62c:	c3                   	ret    

c002b62d <bitmap_create_in_buf>:
c002b62d:	55                   	push   %ebp
c002b62e:	89 e5                	mov    %esp,%ebp
c002b630:	83 ec 18             	sub    $0x18,%esp
c002b633:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b636:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002b639:	83 ec 0c             	sub    $0xc,%esp
c002b63c:	ff 75 08             	pushl  0x8(%ebp)
c002b63f:	e8 4f 00 00 00       	call   c002b693 <bitmap_buf_size>
c002b644:	83 c4 10             	add    $0x10,%esp
c002b647:	3b 45 10             	cmp    0x10(%ebp),%eax
c002b64a:	76 1e                	jbe    c002b66a <bitmap_create_in_buf+0x3d>
c002b64c:	83 ec 0c             	sub    $0xc,%esp
c002b64f:	68 7c 52 03 c0       	push   $0xc003527c
c002b654:	68 a4 52 03 c0       	push   $0xc00352a4
c002b659:	68 20 53 03 c0       	push   $0xc0035320
c002b65e:	6a 68                	push   $0x68
c002b660:	68 bb 52 03 c0       	push   $0xc00352bb
c002b665:	e8 c0 ee ff ff       	call   c002a52a <debug_panic>
c002b66a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b66d:	8b 55 08             	mov    0x8(%ebp),%edx
c002b670:	89 10                	mov    %edx,(%eax)
c002b672:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b675:	8d 50 08             	lea    0x8(%eax),%edx
c002b678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b67b:	89 50 04             	mov    %edx,0x4(%eax)
c002b67e:	83 ec 08             	sub    $0x8,%esp
c002b681:	6a 00                	push   $0x0
c002b683:	ff 75 f4             	pushl  -0xc(%ebp)
c002b686:	e8 17 02 00 00       	call   c002b8a2 <bitmap_set_all>
c002b68b:	83 c4 10             	add    $0x10,%esp
c002b68e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b691:	c9                   	leave  
c002b692:	c3                   	ret    

c002b693 <bitmap_buf_size>:
c002b693:	55                   	push   %ebp
c002b694:	89 e5                	mov    %esp,%ebp
c002b696:	ff 75 08             	pushl  0x8(%ebp)
c002b699:	e8 cb fe ff ff       	call   c002b569 <byte_cnt>
c002b69e:	83 c4 04             	add    $0x4,%esp
c002b6a1:	83 c0 08             	add    $0x8,%eax
c002b6a4:	c9                   	leave  
c002b6a5:	c3                   	ret    

c002b6a6 <bitmap_destroy>:
c002b6a6:	55                   	push   %ebp
c002b6a7:	89 e5                	mov    %esp,%ebp
c002b6a9:	83 ec 08             	sub    $0x8,%esp
c002b6ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b6b0:	74 20                	je     c002b6d2 <bitmap_destroy+0x2c>
c002b6b2:	8b 45 08             	mov    0x8(%ebp),%eax
c002b6b5:	8b 40 04             	mov    0x4(%eax),%eax
c002b6b8:	83 ec 0c             	sub    $0xc,%esp
c002b6bb:	50                   	push   %eax
c002b6bc:	e8 2a 8d ff ff       	call   c00243eb <free>
c002b6c1:	83 c4 10             	add    $0x10,%esp
c002b6c4:	83 ec 0c             	sub    $0xc,%esp
c002b6c7:	ff 75 08             	pushl  0x8(%ebp)
c002b6ca:	e8 1c 8d ff ff       	call   c00243eb <free>
c002b6cf:	83 c4 10             	add    $0x10,%esp
c002b6d2:	90                   	nop
c002b6d3:	c9                   	leave  
c002b6d4:	c3                   	ret    

c002b6d5 <bitmap_size>:
c002b6d5:	55                   	push   %ebp
c002b6d6:	89 e5                	mov    %esp,%ebp
c002b6d8:	8b 45 08             	mov    0x8(%ebp),%eax
c002b6db:	8b 00                	mov    (%eax),%eax
c002b6dd:	5d                   	pop    %ebp
c002b6de:	c3                   	ret    

c002b6df <bitmap_set>:
c002b6df:	55                   	push   %ebp
c002b6e0:	89 e5                	mov    %esp,%ebp
c002b6e2:	83 ec 18             	sub    $0x18,%esp
c002b6e5:	8b 45 10             	mov    0x10(%ebp),%eax
c002b6e8:	88 45 f4             	mov    %al,-0xc(%ebp)
c002b6eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b6ef:	75 21                	jne    c002b712 <bitmap_set+0x33>
c002b6f1:	83 ec 0c             	sub    $0xc,%esp
c002b6f4:	68 d5 52 03 c0       	push   $0xc00352d5
c002b6f9:	68 a4 52 03 c0       	push   $0xc00352a4
c002b6fe:	68 38 53 03 c0       	push   $0xc0035338
c002b703:	68 93 00 00 00       	push   $0x93
c002b708:	68 bb 52 03 c0       	push   $0xc00352bb
c002b70d:	e8 18 ee ff ff       	call   c002a52a <debug_panic>
c002b712:	8b 45 08             	mov    0x8(%ebp),%eax
c002b715:	8b 00                	mov    (%eax),%eax
c002b717:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b71a:	77 21                	ja     c002b73d <bitmap_set+0x5e>
c002b71c:	83 ec 0c             	sub    $0xc,%esp
c002b71f:	68 df 52 03 c0       	push   $0xc00352df
c002b724:	68 a4 52 03 c0       	push   $0xc00352a4
c002b729:	68 38 53 03 c0       	push   $0xc0035338
c002b72e:	68 94 00 00 00       	push   $0x94
c002b733:	68 bb 52 03 c0       	push   $0xc00352bb
c002b738:	e8 ed ed ff ff       	call   c002a52a <debug_panic>
c002b73d:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c002b741:	74 13                	je     c002b756 <bitmap_set+0x77>
c002b743:	83 ec 08             	sub    $0x8,%esp
c002b746:	ff 75 0c             	pushl  0xc(%ebp)
c002b749:	ff 75 08             	pushl  0x8(%ebp)
c002b74c:	e8 19 00 00 00       	call   c002b76a <bitmap_mark>
c002b751:	83 c4 10             	add    $0x10,%esp
c002b754:	eb 11                	jmp    c002b767 <bitmap_set+0x88>
c002b756:	83 ec 08             	sub    $0x8,%esp
c002b759:	ff 75 0c             	pushl  0xc(%ebp)
c002b75c:	ff 75 08             	pushl  0x8(%ebp)
c002b75f:	e8 3e 00 00 00       	call   c002b7a2 <bitmap_reset>
c002b764:	83 c4 10             	add    $0x10,%esp
c002b767:	90                   	nop
c002b768:	c9                   	leave  
c002b769:	c3                   	ret    

c002b76a <bitmap_mark>:
c002b76a:	55                   	push   %ebp
c002b76b:	89 e5                	mov    %esp,%ebp
c002b76d:	83 ec 10             	sub    $0x10,%esp
c002b770:	ff 75 0c             	pushl  0xc(%ebp)
c002b773:	e8 c2 fd ff ff       	call   c002b53a <elem_idx>
c002b778:	83 c4 04             	add    $0x4,%esp
c002b77b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b77e:	ff 75 0c             	pushl  0xc(%ebp)
c002b781:	e8 bf fd ff ff       	call   c002b545 <bit_mask>
c002b786:	83 c4 04             	add    $0x4,%esp
c002b789:	89 45 f8             	mov    %eax,-0x8(%ebp)
c002b78c:	8b 45 08             	mov    0x8(%ebp),%eax
c002b78f:	8b 40 04             	mov    0x4(%eax),%eax
c002b792:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002b795:	c1 e2 02             	shl    $0x2,%edx
c002b798:	01 c2                	add    %eax,%edx
c002b79a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c002b79d:	09 02                	or     %eax,(%edx)
c002b79f:	90                   	nop
c002b7a0:	c9                   	leave  
c002b7a1:	c3                   	ret    

c002b7a2 <bitmap_reset>:
c002b7a2:	55                   	push   %ebp
c002b7a3:	89 e5                	mov    %esp,%ebp
c002b7a5:	83 ec 10             	sub    $0x10,%esp
c002b7a8:	ff 75 0c             	pushl  0xc(%ebp)
c002b7ab:	e8 8a fd ff ff       	call   c002b53a <elem_idx>
c002b7b0:	83 c4 04             	add    $0x4,%esp
c002b7b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b7b6:	ff 75 0c             	pushl  0xc(%ebp)
c002b7b9:	e8 87 fd ff ff       	call   c002b545 <bit_mask>
c002b7be:	83 c4 04             	add    $0x4,%esp
c002b7c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
c002b7c4:	8b 45 08             	mov    0x8(%ebp),%eax
c002b7c7:	8b 40 04             	mov    0x4(%eax),%eax
c002b7ca:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002b7cd:	c1 e2 02             	shl    $0x2,%edx
c002b7d0:	01 d0                	add    %edx,%eax
c002b7d2:	8b 55 f8             	mov    -0x8(%ebp),%edx
c002b7d5:	f7 d2                	not    %edx
c002b7d7:	21 10                	and    %edx,(%eax)
c002b7d9:	90                   	nop
c002b7da:	c9                   	leave  
c002b7db:	c3                   	ret    

c002b7dc <bitmap_flip>:
c002b7dc:	55                   	push   %ebp
c002b7dd:	89 e5                	mov    %esp,%ebp
c002b7df:	83 ec 10             	sub    $0x10,%esp
c002b7e2:	ff 75 0c             	pushl  0xc(%ebp)
c002b7e5:	e8 50 fd ff ff       	call   c002b53a <elem_idx>
c002b7ea:	83 c4 04             	add    $0x4,%esp
c002b7ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
c002b7f0:	ff 75 0c             	pushl  0xc(%ebp)
c002b7f3:	e8 4d fd ff ff       	call   c002b545 <bit_mask>
c002b7f8:	83 c4 04             	add    $0x4,%esp
c002b7fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
c002b7fe:	8b 45 08             	mov    0x8(%ebp),%eax
c002b801:	8b 40 04             	mov    0x4(%eax),%eax
c002b804:	8b 55 fc             	mov    -0x4(%ebp),%edx
c002b807:	c1 e2 02             	shl    $0x2,%edx
c002b80a:	01 c2                	add    %eax,%edx
c002b80c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c002b80f:	31 02                	xor    %eax,(%edx)
c002b811:	90                   	nop
c002b812:	c9                   	leave  
c002b813:	c3                   	ret    

c002b814 <bitmap_test>:
c002b814:	55                   	push   %ebp
c002b815:	89 e5                	mov    %esp,%ebp
c002b817:	53                   	push   %ebx
c002b818:	83 ec 04             	sub    $0x4,%esp
c002b81b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b81f:	75 21                	jne    c002b842 <bitmap_test+0x2e>
c002b821:	83 ec 0c             	sub    $0xc,%esp
c002b824:	68 d5 52 03 c0       	push   $0xc00352d5
c002b829:	68 a4 52 03 c0       	push   $0xc00352a4
c002b82e:	68 44 53 03 c0       	push   $0xc0035344
c002b833:	68 c8 00 00 00       	push   $0xc8
c002b838:	68 bb 52 03 c0       	push   $0xc00352bb
c002b83d:	e8 e8 ec ff ff       	call   c002a52a <debug_panic>
c002b842:	8b 45 08             	mov    0x8(%ebp),%eax
c002b845:	8b 00                	mov    (%eax),%eax
c002b847:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b84a:	77 21                	ja     c002b86d <bitmap_test+0x59>
c002b84c:	83 ec 0c             	sub    $0xc,%esp
c002b84f:	68 df 52 03 c0       	push   $0xc00352df
c002b854:	68 a4 52 03 c0       	push   $0xc00352a4
c002b859:	68 44 53 03 c0       	push   $0xc0035344
c002b85e:	68 c9 00 00 00       	push   $0xc9
c002b863:	68 bb 52 03 c0       	push   $0xc00352bb
c002b868:	e8 bd ec ff ff       	call   c002a52a <debug_panic>
c002b86d:	8b 45 08             	mov    0x8(%ebp),%eax
c002b870:	8b 58 04             	mov    0x4(%eax),%ebx
c002b873:	83 ec 0c             	sub    $0xc,%esp
c002b876:	ff 75 0c             	pushl  0xc(%ebp)
c002b879:	e8 bc fc ff ff       	call   c002b53a <elem_idx>
c002b87e:	83 c4 10             	add    $0x10,%esp
c002b881:	c1 e0 02             	shl    $0x2,%eax
c002b884:	01 d8                	add    %ebx,%eax
c002b886:	8b 18                	mov    (%eax),%ebx
c002b888:	83 ec 0c             	sub    $0xc,%esp
c002b88b:	ff 75 0c             	pushl  0xc(%ebp)
c002b88e:	e8 b2 fc ff ff       	call   c002b545 <bit_mask>
c002b893:	83 c4 10             	add    $0x10,%esp
c002b896:	21 d8                	and    %ebx,%eax
c002b898:	85 c0                	test   %eax,%eax
c002b89a:	0f 95 c0             	setne  %al
c002b89d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002b8a0:	c9                   	leave  
c002b8a1:	c3                   	ret    

c002b8a2 <bitmap_set_all>:
c002b8a2:	55                   	push   %ebp
c002b8a3:	89 e5                	mov    %esp,%ebp
c002b8a5:	53                   	push   %ebx
c002b8a6:	83 ec 14             	sub    $0x14,%esp
c002b8a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c002b8ac:	88 45 f4             	mov    %al,-0xc(%ebp)
c002b8af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b8b3:	75 21                	jne    c002b8d6 <bitmap_set_all+0x34>
c002b8b5:	83 ec 0c             	sub    $0xc,%esp
c002b8b8:	68 d5 52 03 c0       	push   $0xc00352d5
c002b8bd:	68 a4 52 03 c0       	push   $0xc00352a4
c002b8c2:	68 50 53 03 c0       	push   $0xc0035350
c002b8c7:	68 d3 00 00 00       	push   $0xd3
c002b8cc:	68 bb 52 03 c0       	push   $0xc00352bb
c002b8d1:	e8 54 ec ff ff       	call   c002a52a <debug_panic>
c002b8d6:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
c002b8da:	83 ec 0c             	sub    $0xc,%esp
c002b8dd:	ff 75 08             	pushl  0x8(%ebp)
c002b8e0:	e8 f0 fd ff ff       	call   c002b6d5 <bitmap_size>
c002b8e5:	83 c4 10             	add    $0x10,%esp
c002b8e8:	53                   	push   %ebx
c002b8e9:	50                   	push   %eax
c002b8ea:	6a 00                	push   $0x0
c002b8ec:	ff 75 08             	pushl  0x8(%ebp)
c002b8ef:	e8 09 00 00 00       	call   c002b8fd <bitmap_set_multiple>
c002b8f4:	83 c4 10             	add    $0x10,%esp
c002b8f7:	90                   	nop
c002b8f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002b8fb:	c9                   	leave  
c002b8fc:	c3                   	ret    

c002b8fd <bitmap_set_multiple>:
c002b8fd:	55                   	push   %ebp
c002b8fe:	89 e5                	mov    %esp,%ebp
c002b900:	83 ec 28             	sub    $0x28,%esp
c002b903:	8b 45 14             	mov    0x14(%ebp),%eax
c002b906:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002b909:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b90d:	75 21                	jne    c002b930 <bitmap_set_multiple+0x33>
c002b90f:	83 ec 0c             	sub    $0xc,%esp
c002b912:	68 d5 52 03 c0       	push   $0xc00352d5
c002b917:	68 a4 52 03 c0       	push   $0xc00352a4
c002b91c:	68 60 53 03 c0       	push   $0xc0035360
c002b921:	68 de 00 00 00       	push   $0xde
c002b926:	68 bb 52 03 c0       	push   $0xc00352bb
c002b92b:	e8 fa eb ff ff       	call   c002a52a <debug_panic>
c002b930:	8b 45 08             	mov    0x8(%ebp),%eax
c002b933:	8b 00                	mov    (%eax),%eax
c002b935:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b938:	73 21                	jae    c002b95b <bitmap_set_multiple+0x5e>
c002b93a:	83 ec 0c             	sub    $0xc,%esp
c002b93d:	68 f0 52 03 c0       	push   $0xc00352f0
c002b942:	68 a4 52 03 c0       	push   $0xc00352a4
c002b947:	68 60 53 03 c0       	push   $0xc0035360
c002b94c:	68 df 00 00 00       	push   $0xdf
c002b951:	68 bb 52 03 c0       	push   $0xc00352bb
c002b956:	e8 cf eb ff ff       	call   c002a52a <debug_panic>
c002b95b:	8b 55 0c             	mov    0xc(%ebp),%edx
c002b95e:	8b 45 10             	mov    0x10(%ebp),%eax
c002b961:	01 c2                	add    %eax,%edx
c002b963:	8b 45 08             	mov    0x8(%ebp),%eax
c002b966:	8b 00                	mov    (%eax),%eax
c002b968:	39 c2                	cmp    %eax,%edx
c002b96a:	76 21                	jbe    c002b98d <bitmap_set_multiple+0x90>
c002b96c:	83 ec 0c             	sub    $0xc,%esp
c002b96f:	68 04 53 03 c0       	push   $0xc0035304
c002b974:	68 a4 52 03 c0       	push   $0xc00352a4
c002b979:	68 60 53 03 c0       	push   $0xc0035360
c002b97e:	68 e0 00 00 00       	push   $0xe0
c002b983:	68 bb 52 03 c0       	push   $0xc00352bb
c002b988:	e8 9d eb ff ff       	call   c002a52a <debug_panic>
c002b98d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002b994:	eb 20                	jmp    c002b9b6 <bitmap_set_multiple+0xb9>
c002b996:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002b99a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c002b99d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002b9a0:	01 ca                	add    %ecx,%edx
c002b9a2:	83 ec 04             	sub    $0x4,%esp
c002b9a5:	50                   	push   %eax
c002b9a6:	52                   	push   %edx
c002b9a7:	ff 75 08             	pushl  0x8(%ebp)
c002b9aa:	e8 30 fd ff ff       	call   c002b6df <bitmap_set>
c002b9af:	83 c4 10             	add    $0x10,%esp
c002b9b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002b9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002b9b9:	3b 45 10             	cmp    0x10(%ebp),%eax
c002b9bc:	72 d8                	jb     c002b996 <bitmap_set_multiple+0x99>
c002b9be:	90                   	nop
c002b9bf:	c9                   	leave  
c002b9c0:	c3                   	ret    

c002b9c1 <bitmap_count>:
c002b9c1:	55                   	push   %ebp
c002b9c2:	89 e5                	mov    %esp,%ebp
c002b9c4:	83 ec 28             	sub    $0x28,%esp
c002b9c7:	8b 45 14             	mov    0x14(%ebp),%eax
c002b9ca:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002b9cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002b9d1:	75 21                	jne    c002b9f4 <bitmap_count+0x33>
c002b9d3:	83 ec 0c             	sub    $0xc,%esp
c002b9d6:	68 d5 52 03 c0       	push   $0xc00352d5
c002b9db:	68 a4 52 03 c0       	push   $0xc00352a4
c002b9e0:	68 74 53 03 c0       	push   $0xc0035374
c002b9e5:	68 ed 00 00 00       	push   $0xed
c002b9ea:	68 bb 52 03 c0       	push   $0xc00352bb
c002b9ef:	e8 36 eb ff ff       	call   c002a52a <debug_panic>
c002b9f4:	8b 45 08             	mov    0x8(%ebp),%eax
c002b9f7:	8b 00                	mov    (%eax),%eax
c002b9f9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002b9fc:	73 21                	jae    c002ba1f <bitmap_count+0x5e>
c002b9fe:	83 ec 0c             	sub    $0xc,%esp
c002ba01:	68 f0 52 03 c0       	push   $0xc00352f0
c002ba06:	68 a4 52 03 c0       	push   $0xc00352a4
c002ba0b:	68 74 53 03 c0       	push   $0xc0035374
c002ba10:	68 ee 00 00 00       	push   $0xee
c002ba15:	68 bb 52 03 c0       	push   $0xc00352bb
c002ba1a:	e8 0b eb ff ff       	call   c002a52a <debug_panic>
c002ba1f:	8b 55 0c             	mov    0xc(%ebp),%edx
c002ba22:	8b 45 10             	mov    0x10(%ebp),%eax
c002ba25:	01 c2                	add    %eax,%edx
c002ba27:	8b 45 08             	mov    0x8(%ebp),%eax
c002ba2a:	8b 00                	mov    (%eax),%eax
c002ba2c:	39 c2                	cmp    %eax,%edx
c002ba2e:	76 21                	jbe    c002ba51 <bitmap_count+0x90>
c002ba30:	83 ec 0c             	sub    $0xc,%esp
c002ba33:	68 04 53 03 c0       	push   $0xc0035304
c002ba38:	68 a4 52 03 c0       	push   $0xc00352a4
c002ba3d:	68 74 53 03 c0       	push   $0xc0035374
c002ba42:	68 ef 00 00 00       	push   $0xef
c002ba47:	68 bb 52 03 c0       	push   $0xc00352bb
c002ba4c:	e8 d9 ea ff ff       	call   c002a52a <debug_panic>
c002ba51:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002ba58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002ba5f:	eb 24                	jmp    c002ba85 <bitmap_count+0xc4>
c002ba61:	8b 55 0c             	mov    0xc(%ebp),%edx
c002ba64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ba67:	01 d0                	add    %edx,%eax
c002ba69:	83 ec 08             	sub    $0x8,%esp
c002ba6c:	50                   	push   %eax
c002ba6d:	ff 75 08             	pushl  0x8(%ebp)
c002ba70:	e8 9f fd ff ff       	call   c002b814 <bitmap_test>
c002ba75:	83 c4 10             	add    $0x10,%esp
c002ba78:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c002ba7b:	75 04                	jne    c002ba81 <bitmap_count+0xc0>
c002ba7d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002ba81:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002ba85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ba88:	3b 45 10             	cmp    0x10(%ebp),%eax
c002ba8b:	72 d4                	jb     c002ba61 <bitmap_count+0xa0>
c002ba8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ba90:	c9                   	leave  
c002ba91:	c3                   	ret    

c002ba92 <bitmap_contains>:
c002ba92:	55                   	push   %ebp
c002ba93:	89 e5                	mov    %esp,%ebp
c002ba95:	83 ec 28             	sub    $0x28,%esp
c002ba98:	8b 45 14             	mov    0x14(%ebp),%eax
c002ba9b:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002ba9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002baa2:	75 21                	jne    c002bac5 <bitmap_contains+0x33>
c002baa4:	83 ec 0c             	sub    $0xc,%esp
c002baa7:	68 d5 52 03 c0       	push   $0xc00352d5
c002baac:	68 a4 52 03 c0       	push   $0xc00352a4
c002bab1:	68 84 53 03 c0       	push   $0xc0035384
c002bab6:	68 ff 00 00 00       	push   $0xff
c002babb:	68 bb 52 03 c0       	push   $0xc00352bb
c002bac0:	e8 65 ea ff ff       	call   c002a52a <debug_panic>
c002bac5:	8b 45 08             	mov    0x8(%ebp),%eax
c002bac8:	8b 00                	mov    (%eax),%eax
c002baca:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002bacd:	73 21                	jae    c002baf0 <bitmap_contains+0x5e>
c002bacf:	83 ec 0c             	sub    $0xc,%esp
c002bad2:	68 f0 52 03 c0       	push   $0xc00352f0
c002bad7:	68 a4 52 03 c0       	push   $0xc00352a4
c002badc:	68 84 53 03 c0       	push   $0xc0035384
c002bae1:	68 00 01 00 00       	push   $0x100
c002bae6:	68 bb 52 03 c0       	push   $0xc00352bb
c002baeb:	e8 3a ea ff ff       	call   c002a52a <debug_panic>
c002baf0:	8b 55 0c             	mov    0xc(%ebp),%edx
c002baf3:	8b 45 10             	mov    0x10(%ebp),%eax
c002baf6:	01 c2                	add    %eax,%edx
c002baf8:	8b 45 08             	mov    0x8(%ebp),%eax
c002bafb:	8b 00                	mov    (%eax),%eax
c002bafd:	39 c2                	cmp    %eax,%edx
c002baff:	76 21                	jbe    c002bb22 <bitmap_contains+0x90>
c002bb01:	83 ec 0c             	sub    $0xc,%esp
c002bb04:	68 04 53 03 c0       	push   $0xc0035304
c002bb09:	68 a4 52 03 c0       	push   $0xc00352a4
c002bb0e:	68 84 53 03 c0       	push   $0xc0035384
c002bb13:	68 01 01 00 00       	push   $0x101
c002bb18:	68 bb 52 03 c0       	push   $0xc00352bb
c002bb1d:	e8 08 ea ff ff       	call   c002a52a <debug_panic>
c002bb22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002bb29:	eb 27                	jmp    c002bb52 <bitmap_contains+0xc0>
c002bb2b:	8b 55 0c             	mov    0xc(%ebp),%edx
c002bb2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bb31:	01 d0                	add    %edx,%eax
c002bb33:	83 ec 08             	sub    $0x8,%esp
c002bb36:	50                   	push   %eax
c002bb37:	ff 75 08             	pushl  0x8(%ebp)
c002bb3a:	e8 d5 fc ff ff       	call   c002b814 <bitmap_test>
c002bb3f:	83 c4 10             	add    $0x10,%esp
c002bb42:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c002bb45:	75 07                	jne    c002bb4e <bitmap_contains+0xbc>
c002bb47:	b8 01 00 00 00       	mov    $0x1,%eax
c002bb4c:	eb 11                	jmp    c002bb5f <bitmap_contains+0xcd>
c002bb4e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002bb52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bb55:	3b 45 10             	cmp    0x10(%ebp),%eax
c002bb58:	72 d1                	jb     c002bb2b <bitmap_contains+0x99>
c002bb5a:	b8 00 00 00 00       	mov    $0x0,%eax
c002bb5f:	c9                   	leave  
c002bb60:	c3                   	ret    

c002bb61 <bitmap_any>:
c002bb61:	55                   	push   %ebp
c002bb62:	89 e5                	mov    %esp,%ebp
c002bb64:	83 ec 08             	sub    $0x8,%esp
c002bb67:	6a 01                	push   $0x1
c002bb69:	ff 75 10             	pushl  0x10(%ebp)
c002bb6c:	ff 75 0c             	pushl  0xc(%ebp)
c002bb6f:	ff 75 08             	pushl  0x8(%ebp)
c002bb72:	e8 1b ff ff ff       	call   c002ba92 <bitmap_contains>
c002bb77:	83 c4 10             	add    $0x10,%esp
c002bb7a:	c9                   	leave  
c002bb7b:	c3                   	ret    

c002bb7c <bitmap_none>:
c002bb7c:	55                   	push   %ebp
c002bb7d:	89 e5                	mov    %esp,%ebp
c002bb7f:	83 ec 08             	sub    $0x8,%esp
c002bb82:	6a 01                	push   $0x1
c002bb84:	ff 75 10             	pushl  0x10(%ebp)
c002bb87:	ff 75 0c             	pushl  0xc(%ebp)
c002bb8a:	ff 75 08             	pushl  0x8(%ebp)
c002bb8d:	e8 00 ff ff ff       	call   c002ba92 <bitmap_contains>
c002bb92:	83 c4 10             	add    $0x10,%esp
c002bb95:	0f b6 c0             	movzbl %al,%eax
c002bb98:	85 c0                	test   %eax,%eax
c002bb9a:	0f 95 c0             	setne  %al
c002bb9d:	83 f0 01             	xor    $0x1,%eax
c002bba0:	0f b6 c0             	movzbl %al,%eax
c002bba3:	83 e0 01             	and    $0x1,%eax
c002bba6:	c9                   	leave  
c002bba7:	c3                   	ret    

c002bba8 <bitmap_all>:
c002bba8:	55                   	push   %ebp
c002bba9:	89 e5                	mov    %esp,%ebp
c002bbab:	83 ec 08             	sub    $0x8,%esp
c002bbae:	6a 00                	push   $0x0
c002bbb0:	ff 75 10             	pushl  0x10(%ebp)
c002bbb3:	ff 75 0c             	pushl  0xc(%ebp)
c002bbb6:	ff 75 08             	pushl  0x8(%ebp)
c002bbb9:	e8 d4 fe ff ff       	call   c002ba92 <bitmap_contains>
c002bbbe:	83 c4 10             	add    $0x10,%esp
c002bbc1:	0f b6 c0             	movzbl %al,%eax
c002bbc4:	85 c0                	test   %eax,%eax
c002bbc6:	0f 95 c0             	setne  %al
c002bbc9:	83 f0 01             	xor    $0x1,%eax
c002bbcc:	0f b6 c0             	movzbl %al,%eax
c002bbcf:	83 e0 01             	and    $0x1,%eax
c002bbd2:	c9                   	leave  
c002bbd3:	c3                   	ret    

c002bbd4 <bitmap_scan>:
c002bbd4:	55                   	push   %ebp
c002bbd5:	89 e5                	mov    %esp,%ebp
c002bbd7:	83 ec 28             	sub    $0x28,%esp
c002bbda:	8b 45 14             	mov    0x14(%ebp),%eax
c002bbdd:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002bbe0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002bbe4:	75 21                	jne    c002bc07 <bitmap_scan+0x33>
c002bbe6:	83 ec 0c             	sub    $0xc,%esp
c002bbe9:	68 d5 52 03 c0       	push   $0xc00352d5
c002bbee:	68 a4 52 03 c0       	push   $0xc00352a4
c002bbf3:	68 94 53 03 c0       	push   $0xc0035394
c002bbf8:	68 2a 01 00 00       	push   $0x12a
c002bbfd:	68 bb 52 03 c0       	push   $0xc00352bb
c002bc02:	e8 23 e9 ff ff       	call   c002a52a <debug_panic>
c002bc07:	8b 45 08             	mov    0x8(%ebp),%eax
c002bc0a:	8b 00                	mov    (%eax),%eax
c002bc0c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002bc0f:	73 21                	jae    c002bc32 <bitmap_scan+0x5e>
c002bc11:	83 ec 0c             	sub    $0xc,%esp
c002bc14:	68 f0 52 03 c0       	push   $0xc00352f0
c002bc19:	68 a4 52 03 c0       	push   $0xc00352a4
c002bc1e:	68 94 53 03 c0       	push   $0xc0035394
c002bc23:	68 2b 01 00 00       	push   $0x12b
c002bc28:	68 bb 52 03 c0       	push   $0xc00352bb
c002bc2d:	e8 f8 e8 ff ff       	call   c002a52a <debug_panic>
c002bc32:	8b 45 08             	mov    0x8(%ebp),%eax
c002bc35:	8b 00                	mov    (%eax),%eax
c002bc37:	3b 45 10             	cmp    0x10(%ebp),%eax
c002bc3a:	72 47                	jb     c002bc83 <bitmap_scan+0xaf>
c002bc3c:	8b 45 08             	mov    0x8(%ebp),%eax
c002bc3f:	8b 00                	mov    (%eax),%eax
c002bc41:	2b 45 10             	sub    0x10(%ebp),%eax
c002bc44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bc47:	8b 45 0c             	mov    0xc(%ebp),%eax
c002bc4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bc4d:	eb 2c                	jmp    c002bc7b <bitmap_scan+0xa7>
c002bc4f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002bc53:	83 f0 01             	xor    $0x1,%eax
c002bc56:	0f b6 c0             	movzbl %al,%eax
c002bc59:	50                   	push   %eax
c002bc5a:	ff 75 10             	pushl  0x10(%ebp)
c002bc5d:	ff 75 f4             	pushl  -0xc(%ebp)
c002bc60:	ff 75 08             	pushl  0x8(%ebp)
c002bc63:	e8 2a fe ff ff       	call   c002ba92 <bitmap_contains>
c002bc68:	83 c4 10             	add    $0x10,%esp
c002bc6b:	83 f0 01             	xor    $0x1,%eax
c002bc6e:	84 c0                	test   %al,%al
c002bc70:	74 05                	je     c002bc77 <bitmap_scan+0xa3>
c002bc72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bc75:	eb 11                	jmp    c002bc88 <bitmap_scan+0xb4>
c002bc77:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002bc7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bc7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002bc81:	76 cc                	jbe    c002bc4f <bitmap_scan+0x7b>
c002bc83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002bc88:	c9                   	leave  
c002bc89:	c3                   	ret    

c002bc8a <bitmap_scan_and_flip>:
c002bc8a:	55                   	push   %ebp
c002bc8b:	89 e5                	mov    %esp,%ebp
c002bc8d:	83 ec 28             	sub    $0x28,%esp
c002bc90:	8b 45 14             	mov    0x14(%ebp),%eax
c002bc93:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002bc96:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002bc9a:	50                   	push   %eax
c002bc9b:	ff 75 10             	pushl  0x10(%ebp)
c002bc9e:	ff 75 0c             	pushl  0xc(%ebp)
c002bca1:	ff 75 08             	pushl  0x8(%ebp)
c002bca4:	e8 2b ff ff ff       	call   c002bbd4 <bitmap_scan>
c002bca9:	83 c4 10             	add    $0x10,%esp
c002bcac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bcaf:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c002bcb3:	74 1c                	je     c002bcd1 <bitmap_scan_and_flip+0x47>
c002bcb5:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002bcb9:	83 f0 01             	xor    $0x1,%eax
c002bcbc:	0f b6 c0             	movzbl %al,%eax
c002bcbf:	50                   	push   %eax
c002bcc0:	ff 75 10             	pushl  0x10(%ebp)
c002bcc3:	ff 75 f4             	pushl  -0xc(%ebp)
c002bcc6:	ff 75 08             	pushl  0x8(%ebp)
c002bcc9:	e8 2f fc ff ff       	call   c002b8fd <bitmap_set_multiple>
c002bcce:	83 c4 10             	add    $0x10,%esp
c002bcd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002bcd4:	c9                   	leave  
c002bcd5:	c3                   	ret    

c002bcd6 <bitmap_file_size>:
c002bcd6:	55                   	push   %ebp
c002bcd7:	89 e5                	mov    %esp,%ebp
c002bcd9:	8b 45 08             	mov    0x8(%ebp),%eax
c002bcdc:	8b 00                	mov    (%eax),%eax
c002bcde:	50                   	push   %eax
c002bcdf:	e8 85 f8 ff ff       	call   c002b569 <byte_cnt>
c002bce4:	83 c4 04             	add    $0x4,%esp
c002bce7:	c9                   	leave  
c002bce8:	c3                   	ret    

c002bce9 <bitmap_read>:
c002bce9:	55                   	push   %ebp
c002bcea:	89 e5                	mov    %esp,%ebp
c002bcec:	56                   	push   %esi
c002bced:	53                   	push   %ebx
c002bcee:	83 ec 10             	sub    $0x10,%esp
c002bcf1:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c002bcf5:	8b 45 08             	mov    0x8(%ebp),%eax
c002bcf8:	8b 00                	mov    (%eax),%eax
c002bcfa:	85 c0                	test   %eax,%eax
c002bcfc:	74 7a                	je     c002bd78 <bitmap_read+0x8f>
c002bcfe:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd01:	8b 00                	mov    (%eax),%eax
c002bd03:	50                   	push   %eax
c002bd04:	e8 60 f8 ff ff       	call   c002b569 <byte_cnt>
c002bd09:	83 c4 04             	add    $0x4,%esp
c002bd0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bd0f:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd12:	8b 40 04             	mov    0x4(%eax),%eax
c002bd15:	6a 00                	push   $0x0
c002bd17:	ff 75 f0             	pushl  -0x10(%ebp)
c002bd1a:	50                   	push   %eax
c002bd1b:	ff 75 0c             	pushl  0xc(%ebp)
c002bd1e:	e8 d8 42 00 00       	call   c002fffb <file_read_at>
c002bd23:	83 c4 10             	add    $0x10,%esp
c002bd26:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002bd29:	0f 94 c0             	sete   %al
c002bd2c:	88 45 f7             	mov    %al,-0x9(%ebp)
c002bd2f:	83 ec 0c             	sub    $0xc,%esp
c002bd32:	ff 75 08             	pushl  0x8(%ebp)
c002bd35:	e8 42 f8 ff ff       	call   c002b57c <last_mask>
c002bd3a:	83 c4 10             	add    $0x10,%esp
c002bd3d:	89 c6                	mov    %eax,%esi
c002bd3f:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd42:	8b 58 04             	mov    0x4(%eax),%ebx
c002bd45:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd48:	8b 00                	mov    (%eax),%eax
c002bd4a:	83 ec 0c             	sub    $0xc,%esp
c002bd4d:	50                   	push   %eax
c002bd4e:	e8 08 f8 ff ff       	call   c002b55b <elem_cnt>
c002bd53:	83 c4 10             	add    $0x10,%esp
c002bd56:	8d 90 ff ff ff 3f    	lea    0x3fffffff(%eax),%edx
c002bd5c:	c1 e2 02             	shl    $0x2,%edx
c002bd5f:	8d 0c 13             	lea    (%ebx,%edx,1),%ecx
c002bd62:	8b 55 08             	mov    0x8(%ebp),%edx
c002bd65:	8b 52 04             	mov    0x4(%edx),%edx
c002bd68:	05 ff ff ff 3f       	add    $0x3fffffff,%eax
c002bd6d:	c1 e0 02             	shl    $0x2,%eax
c002bd70:	01 d0                	add    %edx,%eax
c002bd72:	8b 00                	mov    (%eax),%eax
c002bd74:	21 f0                	and    %esi,%eax
c002bd76:	89 01                	mov    %eax,(%ecx)
c002bd78:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c002bd7c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c002bd7f:	5b                   	pop    %ebx
c002bd80:	5e                   	pop    %esi
c002bd81:	5d                   	pop    %ebp
c002bd82:	c3                   	ret    

c002bd83 <bitmap_write>:
c002bd83:	55                   	push   %ebp
c002bd84:	89 e5                	mov    %esp,%ebp
c002bd86:	83 ec 18             	sub    $0x18,%esp
c002bd89:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd8c:	8b 00                	mov    (%eax),%eax
c002bd8e:	50                   	push   %eax
c002bd8f:	e8 d5 f7 ff ff       	call   c002b569 <byte_cnt>
c002bd94:	83 c4 04             	add    $0x4,%esp
c002bd97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bd9a:	8b 45 08             	mov    0x8(%ebp),%eax
c002bd9d:	8b 40 04             	mov    0x4(%eax),%eax
c002bda0:	6a 00                	push   $0x0
c002bda2:	ff 75 f4             	pushl  -0xc(%ebp)
c002bda5:	50                   	push   %eax
c002bda6:	ff 75 0c             	pushl  0xc(%ebp)
c002bda9:	e8 a6 42 00 00       	call   c0030054 <file_write_at>
c002bdae:	83 c4 10             	add    $0x10,%esp
c002bdb1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002bdb4:	0f 94 c0             	sete   %al
c002bdb7:	c9                   	leave  
c002bdb8:	c3                   	ret    

c002bdb9 <bitmap_dump>:
c002bdb9:	55                   	push   %ebp
c002bdba:	89 e5                	mov    %esp,%ebp
c002bdbc:	83 ec 08             	sub    $0x8,%esp
c002bdbf:	8b 45 08             	mov    0x8(%ebp),%eax
c002bdc2:	8b 00                	mov    (%eax),%eax
c002bdc4:	50                   	push   %eax
c002bdc5:	e8 9f f7 ff ff       	call   c002b569 <byte_cnt>
c002bdca:	83 c4 04             	add    $0x4,%esp
c002bdcd:	89 c2                	mov    %eax,%edx
c002bdcf:	8b 45 08             	mov    0x8(%ebp),%eax
c002bdd2:	8b 40 04             	mov    0x4(%eax),%eax
c002bdd5:	6a 00                	push   $0x0
c002bdd7:	52                   	push   %edx
c002bdd8:	50                   	push   %eax
c002bdd9:	6a 00                	push   $0x0
c002bddb:	e8 24 cd ff ff       	call   c0028b04 <hex_dump>
c002bde0:	83 c4 10             	add    $0x10,%esp
c002bde3:	90                   	nop
c002bde4:	c9                   	leave  
c002bde5:	c3                   	ret    

c002bde6 <hash_init>:
c002bde6:	55                   	push   %ebp
c002bde7:	89 e5                	mov    %esp,%ebp
c002bde9:	83 ec 08             	sub    $0x8,%esp
c002bdec:	8b 45 08             	mov    0x8(%ebp),%eax
c002bdef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002bdf5:	8b 45 08             	mov    0x8(%ebp),%eax
c002bdf8:	c7 40 04 04 00 00 00 	movl   $0x4,0x4(%eax)
c002bdff:	8b 45 08             	mov    0x8(%ebp),%eax
c002be02:	8b 40 04             	mov    0x4(%eax),%eax
c002be05:	c1 e0 04             	shl    $0x4,%eax
c002be08:	83 ec 0c             	sub    $0xc,%esp
c002be0b:	50                   	push   %eax
c002be0c:	e8 dd 82 ff ff       	call   c00240ee <malloc>
c002be11:	83 c4 10             	add    $0x10,%esp
c002be14:	89 c2                	mov    %eax,%edx
c002be16:	8b 45 08             	mov    0x8(%ebp),%eax
c002be19:	89 50 08             	mov    %edx,0x8(%eax)
c002be1c:	8b 45 08             	mov    0x8(%ebp),%eax
c002be1f:	8b 55 0c             	mov    0xc(%ebp),%edx
c002be22:	89 50 0c             	mov    %edx,0xc(%eax)
c002be25:	8b 45 08             	mov    0x8(%ebp),%eax
c002be28:	8b 55 10             	mov    0x10(%ebp),%edx
c002be2b:	89 50 10             	mov    %edx,0x10(%eax)
c002be2e:	8b 45 08             	mov    0x8(%ebp),%eax
c002be31:	8b 55 14             	mov    0x14(%ebp),%edx
c002be34:	89 50 14             	mov    %edx,0x14(%eax)
c002be37:	8b 45 08             	mov    0x8(%ebp),%eax
c002be3a:	8b 40 08             	mov    0x8(%eax),%eax
c002be3d:	85 c0                	test   %eax,%eax
c002be3f:	74 17                	je     c002be58 <hash_init+0x72>
c002be41:	83 ec 08             	sub    $0x8,%esp
c002be44:	6a 00                	push   $0x0
c002be46:	ff 75 08             	pushl  0x8(%ebp)
c002be49:	e8 11 00 00 00       	call   c002be5f <hash_clear>
c002be4e:	83 c4 10             	add    $0x10,%esp
c002be51:	b8 01 00 00 00       	mov    $0x1,%eax
c002be56:	eb 05                	jmp    c002be5d <hash_init+0x77>
c002be58:	b8 00 00 00 00       	mov    $0x0,%eax
c002be5d:	c9                   	leave  
c002be5e:	c3                   	ret    

c002be5f <hash_clear>:
c002be5f:	55                   	push   %ebp
c002be60:	89 e5                	mov    %esp,%ebp
c002be62:	83 ec 18             	sub    $0x18,%esp
c002be65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002be6c:	eb 72                	jmp    c002bee0 <hash_clear+0x81>
c002be6e:	8b 45 08             	mov    0x8(%ebp),%eax
c002be71:	8b 40 08             	mov    0x8(%eax),%eax
c002be74:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002be77:	c1 e2 04             	shl    $0x4,%edx
c002be7a:	01 d0                	add    %edx,%eax
c002be7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002be7f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002be83:	74 49                	je     c002bece <hash_clear+0x6f>
c002be85:	eb 32                	jmp    c002beb9 <hash_clear+0x5a>
c002be87:	83 ec 0c             	sub    $0xc,%esp
c002be8a:	ff 75 f0             	pushl  -0x10(%ebp)
c002be8d:	e8 6a ed ff ff       	call   c002abfc <list_pop_front>
c002be92:	83 c4 10             	add    $0x10,%esp
c002be95:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002be98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002be9b:	83 c0 04             	add    $0x4,%eax
c002be9e:	83 e8 04             	sub    $0x4,%eax
c002bea1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002bea4:	8b 45 08             	mov    0x8(%ebp),%eax
c002bea7:	8b 40 14             	mov    0x14(%eax),%eax
c002beaa:	83 ec 08             	sub    $0x8,%esp
c002bead:	50                   	push   %eax
c002beae:	ff 75 e8             	pushl  -0x18(%ebp)
c002beb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c002beb4:	ff d0                	call   *%eax
c002beb6:	83 c4 10             	add    $0x10,%esp
c002beb9:	83 ec 0c             	sub    $0xc,%esp
c002bebc:	ff 75 f0             	pushl  -0x10(%ebp)
c002bebf:	e8 61 ee ff ff       	call   c002ad25 <list_empty>
c002bec4:	83 c4 10             	add    $0x10,%esp
c002bec7:	83 f0 01             	xor    $0x1,%eax
c002beca:	84 c0                	test   %al,%al
c002becc:	75 b9                	jne    c002be87 <hash_clear+0x28>
c002bece:	83 ec 0c             	sub    $0xc,%esp
c002bed1:	ff 75 f0             	pushl  -0x10(%ebp)
c002bed4:	e8 c4 e8 ff ff       	call   c002a79d <list_init>
c002bed9:	83 c4 10             	add    $0x10,%esp
c002bedc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002bee0:	8b 45 08             	mov    0x8(%ebp),%eax
c002bee3:	8b 40 04             	mov    0x4(%eax),%eax
c002bee6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002bee9:	77 83                	ja     c002be6e <hash_clear+0xf>
c002beeb:	8b 45 08             	mov    0x8(%ebp),%eax
c002beee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c002bef4:	90                   	nop
c002bef5:	c9                   	leave  
c002bef6:	c3                   	ret    

c002bef7 <hash_destroy>:
c002bef7:	55                   	push   %ebp
c002bef8:	89 e5                	mov    %esp,%ebp
c002befa:	83 ec 08             	sub    $0x8,%esp
c002befd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002bf01:	74 11                	je     c002bf14 <hash_destroy+0x1d>
c002bf03:	83 ec 08             	sub    $0x8,%esp
c002bf06:	ff 75 0c             	pushl  0xc(%ebp)
c002bf09:	ff 75 08             	pushl  0x8(%ebp)
c002bf0c:	e8 4e ff ff ff       	call   c002be5f <hash_clear>
c002bf11:	83 c4 10             	add    $0x10,%esp
c002bf14:	8b 45 08             	mov    0x8(%ebp),%eax
c002bf17:	8b 40 08             	mov    0x8(%eax),%eax
c002bf1a:	83 ec 0c             	sub    $0xc,%esp
c002bf1d:	50                   	push   %eax
c002bf1e:	e8 c8 84 ff ff       	call   c00243eb <free>
c002bf23:	83 c4 10             	add    $0x10,%esp
c002bf26:	90                   	nop
c002bf27:	c9                   	leave  
c002bf28:	c3                   	ret    

c002bf29 <hash_insert>:
c002bf29:	55                   	push   %ebp
c002bf2a:	89 e5                	mov    %esp,%ebp
c002bf2c:	83 ec 18             	sub    $0x18,%esp
c002bf2f:	83 ec 08             	sub    $0x8,%esp
c002bf32:	ff 75 0c             	pushl  0xc(%ebp)
c002bf35:	ff 75 08             	pushl  0x8(%ebp)
c002bf38:	e8 5a 04 00 00       	call   c002c397 <find_bucket>
c002bf3d:	83 c4 10             	add    $0x10,%esp
c002bf40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bf43:	83 ec 04             	sub    $0x4,%esp
c002bf46:	ff 75 0c             	pushl  0xc(%ebp)
c002bf49:	ff 75 f4             	pushl  -0xc(%ebp)
c002bf4c:	ff 75 08             	pushl  0x8(%ebp)
c002bf4f:	e8 81 04 00 00       	call   c002c3d5 <find_elem>
c002bf54:	83 c4 10             	add    $0x10,%esp
c002bf57:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bf5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002bf5e:	75 14                	jne    c002bf74 <hash_insert+0x4b>
c002bf60:	83 ec 04             	sub    $0x4,%esp
c002bf63:	ff 75 0c             	pushl  0xc(%ebp)
c002bf66:	ff 75 f4             	pushl  -0xc(%ebp)
c002bf69:	ff 75 08             	pushl  0x8(%ebp)
c002bf6c:	e8 d0 06 00 00       	call   c002c641 <insert_elem>
c002bf71:	83 c4 10             	add    $0x10,%esp
c002bf74:	83 ec 0c             	sub    $0xc,%esp
c002bf77:	ff 75 08             	pushl  0x8(%ebp)
c002bf7a:	e8 23 05 00 00       	call   c002c4a2 <rehash>
c002bf7f:	83 c4 10             	add    $0x10,%esp
c002bf82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002bf85:	c9                   	leave  
c002bf86:	c3                   	ret    

c002bf87 <hash_replace>:
c002bf87:	55                   	push   %ebp
c002bf88:	89 e5                	mov    %esp,%ebp
c002bf8a:	83 ec 18             	sub    $0x18,%esp
c002bf8d:	83 ec 08             	sub    $0x8,%esp
c002bf90:	ff 75 0c             	pushl  0xc(%ebp)
c002bf93:	ff 75 08             	pushl  0x8(%ebp)
c002bf96:	e8 fc 03 00 00       	call   c002c397 <find_bucket>
c002bf9b:	83 c4 10             	add    $0x10,%esp
c002bf9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002bfa1:	83 ec 04             	sub    $0x4,%esp
c002bfa4:	ff 75 0c             	pushl  0xc(%ebp)
c002bfa7:	ff 75 f4             	pushl  -0xc(%ebp)
c002bfaa:	ff 75 08             	pushl  0x8(%ebp)
c002bfad:	e8 23 04 00 00       	call   c002c3d5 <find_elem>
c002bfb2:	83 c4 10             	add    $0x10,%esp
c002bfb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002bfb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002bfbc:	74 11                	je     c002bfcf <hash_replace+0x48>
c002bfbe:	83 ec 08             	sub    $0x8,%esp
c002bfc1:	ff 75 f0             	pushl  -0x10(%ebp)
c002bfc4:	ff 75 08             	pushl  0x8(%ebp)
c002bfc7:	e8 9d 06 00 00       	call   c002c669 <remove_elem>
c002bfcc:	83 c4 10             	add    $0x10,%esp
c002bfcf:	83 ec 04             	sub    $0x4,%esp
c002bfd2:	ff 75 0c             	pushl  0xc(%ebp)
c002bfd5:	ff 75 f4             	pushl  -0xc(%ebp)
c002bfd8:	ff 75 08             	pushl  0x8(%ebp)
c002bfdb:	e8 61 06 00 00       	call   c002c641 <insert_elem>
c002bfe0:	83 c4 10             	add    $0x10,%esp
c002bfe3:	83 ec 0c             	sub    $0xc,%esp
c002bfe6:	ff 75 08             	pushl  0x8(%ebp)
c002bfe9:	e8 b4 04 00 00       	call   c002c4a2 <rehash>
c002bfee:	83 c4 10             	add    $0x10,%esp
c002bff1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002bff4:	c9                   	leave  
c002bff5:	c3                   	ret    

c002bff6 <hash_find>:
c002bff6:	55                   	push   %ebp
c002bff7:	89 e5                	mov    %esp,%ebp
c002bff9:	83 ec 08             	sub    $0x8,%esp
c002bffc:	83 ec 08             	sub    $0x8,%esp
c002bfff:	ff 75 0c             	pushl  0xc(%ebp)
c002c002:	ff 75 08             	pushl  0x8(%ebp)
c002c005:	e8 8d 03 00 00       	call   c002c397 <find_bucket>
c002c00a:	83 c4 10             	add    $0x10,%esp
c002c00d:	83 ec 04             	sub    $0x4,%esp
c002c010:	ff 75 0c             	pushl  0xc(%ebp)
c002c013:	50                   	push   %eax
c002c014:	ff 75 08             	pushl  0x8(%ebp)
c002c017:	e8 b9 03 00 00       	call   c002c3d5 <find_elem>
c002c01c:	83 c4 10             	add    $0x10,%esp
c002c01f:	c9                   	leave  
c002c020:	c3                   	ret    

c002c021 <hash_delete>:
c002c021:	55                   	push   %ebp
c002c022:	89 e5                	mov    %esp,%ebp
c002c024:	83 ec 18             	sub    $0x18,%esp
c002c027:	83 ec 08             	sub    $0x8,%esp
c002c02a:	ff 75 0c             	pushl  0xc(%ebp)
c002c02d:	ff 75 08             	pushl  0x8(%ebp)
c002c030:	e8 62 03 00 00       	call   c002c397 <find_bucket>
c002c035:	83 c4 10             	add    $0x10,%esp
c002c038:	83 ec 04             	sub    $0x4,%esp
c002c03b:	ff 75 0c             	pushl  0xc(%ebp)
c002c03e:	50                   	push   %eax
c002c03f:	ff 75 08             	pushl  0x8(%ebp)
c002c042:	e8 8e 03 00 00       	call   c002c3d5 <find_elem>
c002c047:	83 c4 10             	add    $0x10,%esp
c002c04a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c04d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c051:	74 1f                	je     c002c072 <hash_delete+0x51>
c002c053:	83 ec 08             	sub    $0x8,%esp
c002c056:	ff 75 f4             	pushl  -0xc(%ebp)
c002c059:	ff 75 08             	pushl  0x8(%ebp)
c002c05c:	e8 08 06 00 00       	call   c002c669 <remove_elem>
c002c061:	83 c4 10             	add    $0x10,%esp
c002c064:	83 ec 0c             	sub    $0xc,%esp
c002c067:	ff 75 08             	pushl  0x8(%ebp)
c002c06a:	e8 33 04 00 00       	call   c002c4a2 <rehash>
c002c06f:	83 c4 10             	add    $0x10,%esp
c002c072:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c075:	c9                   	leave  
c002c076:	c3                   	ret    

c002c077 <hash_apply>:
c002c077:	55                   	push   %ebp
c002c078:	89 e5                	mov    %esp,%ebp
c002c07a:	83 ec 18             	sub    $0x18,%esp
c002c07d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002c081:	75 21                	jne    c002c0a4 <hash_apply+0x2d>
c002c083:	83 ec 0c             	sub    $0xc,%esp
c002c086:	68 a0 53 03 c0       	push   $0xc00353a0
c002c08b:	68 af 53 03 c0       	push   $0xc00353af
c002c090:	68 08 54 03 c0       	push   $0xc0035408
c002c095:	68 a7 00 00 00       	push   $0xa7
c002c09a:	68 c6 53 03 c0       	push   $0xc00353c6
c002c09f:	e8 86 e4 ff ff       	call   c002a52a <debug_panic>
c002c0a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002c0ab:	eb 6e                	jmp    c002c11b <hash_apply+0xa4>
c002c0ad:	8b 45 08             	mov    0x8(%ebp),%eax
c002c0b0:	8b 40 08             	mov    0x8(%eax),%eax
c002c0b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002c0b6:	c1 e2 04             	shl    $0x4,%edx
c002c0b9:	01 d0                	add    %edx,%eax
c002c0bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002c0be:	83 ec 0c             	sub    $0xc,%esp
c002c0c1:	ff 75 ec             	pushl  -0x14(%ebp)
c002c0c4:	e8 29 e7 ff ff       	call   c002a7f2 <list_begin>
c002c0c9:	83 c4 10             	add    $0x10,%esp
c002c0cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c0cf:	eb 33                	jmp    c002c104 <hash_apply+0x8d>
c002c0d1:	83 ec 0c             	sub    $0xc,%esp
c002c0d4:	ff 75 f0             	pushl  -0x10(%ebp)
c002c0d7:	e8 48 e7 ff ff       	call   c002a824 <list_next>
c002c0dc:	83 c4 10             	add    $0x10,%esp
c002c0df:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002c0e2:	8b 45 08             	mov    0x8(%ebp),%eax
c002c0e5:	8b 40 14             	mov    0x14(%eax),%eax
c002c0e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002c0eb:	83 c2 04             	add    $0x4,%edx
c002c0ee:	83 ea 04             	sub    $0x4,%edx
c002c0f1:	83 ec 08             	sub    $0x8,%esp
c002c0f4:	50                   	push   %eax
c002c0f5:	52                   	push   %edx
c002c0f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c0f9:	ff d0                	call   *%eax
c002c0fb:	83 c4 10             	add    $0x10,%esp
c002c0fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002c101:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c104:	83 ec 0c             	sub    $0xc,%esp
c002c107:	ff 75 ec             	pushl  -0x14(%ebp)
c002c10a:	e8 5f e7 ff ff       	call   c002a86e <list_end>
c002c10f:	83 c4 10             	add    $0x10,%esp
c002c112:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002c115:	75 ba                	jne    c002c0d1 <hash_apply+0x5a>
c002c117:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c002c11b:	8b 45 08             	mov    0x8(%ebp),%eax
c002c11e:	8b 40 04             	mov    0x4(%eax),%eax
c002c121:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002c124:	77 87                	ja     c002c0ad <hash_apply+0x36>
c002c126:	90                   	nop
c002c127:	c9                   	leave  
c002c128:	c3                   	ret    

c002c129 <hash_first>:
c002c129:	55                   	push   %ebp
c002c12a:	89 e5                	mov    %esp,%ebp
c002c12c:	83 ec 08             	sub    $0x8,%esp
c002c12f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c133:	75 21                	jne    c002c156 <hash_first+0x2d>
c002c135:	83 ec 0c             	sub    $0xc,%esp
c002c138:	68 de 53 03 c0       	push   $0xc00353de
c002c13d:	68 af 53 03 c0       	push   $0xc00353af
c002c142:	68 14 54 03 c0       	push   $0xc0035414
c002c147:	68 ca 00 00 00       	push   $0xca
c002c14c:	68 c6 53 03 c0       	push   $0xc00353c6
c002c151:	e8 d4 e3 ff ff       	call   c002a52a <debug_panic>
c002c156:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c002c15a:	75 21                	jne    c002c17d <hash_first+0x54>
c002c15c:	83 ec 0c             	sub    $0xc,%esp
c002c15f:	68 e8 53 03 c0       	push   $0xc00353e8
c002c164:	68 af 53 03 c0       	push   $0xc00353af
c002c169:	68 14 54 03 c0       	push   $0xc0035414
c002c16e:	68 cb 00 00 00       	push   $0xcb
c002c173:	68 c6 53 03 c0       	push   $0xc00353c6
c002c178:	e8 ad e3 ff ff       	call   c002a52a <debug_panic>
c002c17d:	8b 45 08             	mov    0x8(%ebp),%eax
c002c180:	8b 55 0c             	mov    0xc(%ebp),%edx
c002c183:	89 10                	mov    %edx,(%eax)
c002c185:	8b 45 08             	mov    0x8(%ebp),%eax
c002c188:	8b 00                	mov    (%eax),%eax
c002c18a:	8b 50 08             	mov    0x8(%eax),%edx
c002c18d:	8b 45 08             	mov    0x8(%ebp),%eax
c002c190:	89 50 04             	mov    %edx,0x4(%eax)
c002c193:	8b 45 08             	mov    0x8(%ebp),%eax
c002c196:	8b 40 04             	mov    0x4(%eax),%eax
c002c199:	83 ec 0c             	sub    $0xc,%esp
c002c19c:	50                   	push   %eax
c002c19d:	e8 ab e7 ff ff       	call   c002a94d <list_head>
c002c1a2:	83 c4 10             	add    $0x10,%esp
c002c1a5:	83 c0 04             	add    $0x4,%eax
c002c1a8:	8d 50 fc             	lea    -0x4(%eax),%edx
c002c1ab:	8b 45 08             	mov    0x8(%ebp),%eax
c002c1ae:	89 50 08             	mov    %edx,0x8(%eax)
c002c1b1:	90                   	nop
c002c1b2:	c9                   	leave  
c002c1b3:	c3                   	ret    

c002c1b4 <hash_next>:
c002c1b4:	55                   	push   %ebp
c002c1b5:	89 e5                	mov    %esp,%ebp
c002c1b7:	53                   	push   %ebx
c002c1b8:	83 ec 04             	sub    $0x4,%esp
c002c1bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c1bf:	75 21                	jne    c002c1e2 <hash_next+0x2e>
c002c1c1:	83 ec 0c             	sub    $0xc,%esp
c002c1c4:	68 de 53 03 c0       	push   $0xc00353de
c002c1c9:	68 af 53 03 c0       	push   $0xc00353af
c002c1ce:	68 20 54 03 c0       	push   $0xc0035420
c002c1d3:	68 dd 00 00 00       	push   $0xdd
c002c1d8:	68 c6 53 03 c0       	push   $0xc00353c6
c002c1dd:	e8 48 e3 ff ff       	call   c002a52a <debug_panic>
c002c1e2:	8b 45 08             	mov    0x8(%ebp),%eax
c002c1e5:	8b 40 08             	mov    0x8(%eax),%eax
c002c1e8:	83 ec 0c             	sub    $0xc,%esp
c002c1eb:	50                   	push   %eax
c002c1ec:	e8 33 e6 ff ff       	call   c002a824 <list_next>
c002c1f1:	83 c4 10             	add    $0x10,%esp
c002c1f4:	83 c0 04             	add    $0x4,%eax
c002c1f7:	8d 50 fc             	lea    -0x4(%eax),%edx
c002c1fa:	8b 45 08             	mov    0x8(%ebp),%eax
c002c1fd:	89 50 08             	mov    %edx,0x8(%eax)
c002c200:	eb 58                	jmp    c002c25a <hash_next+0xa6>
c002c202:	8b 45 08             	mov    0x8(%ebp),%eax
c002c205:	8b 40 04             	mov    0x4(%eax),%eax
c002c208:	8d 50 10             	lea    0x10(%eax),%edx
c002c20b:	8b 45 08             	mov    0x8(%ebp),%eax
c002c20e:	89 50 04             	mov    %edx,0x4(%eax)
c002c211:	8b 45 08             	mov    0x8(%ebp),%eax
c002c214:	8b 50 04             	mov    0x4(%eax),%edx
c002c217:	8b 45 08             	mov    0x8(%ebp),%eax
c002c21a:	8b 00                	mov    (%eax),%eax
c002c21c:	8b 48 08             	mov    0x8(%eax),%ecx
c002c21f:	8b 45 08             	mov    0x8(%ebp),%eax
c002c222:	8b 00                	mov    (%eax),%eax
c002c224:	8b 40 04             	mov    0x4(%eax),%eax
c002c227:	c1 e0 04             	shl    $0x4,%eax
c002c22a:	01 c8                	add    %ecx,%eax
c002c22c:	39 c2                	cmp    %eax,%edx
c002c22e:	72 0c                	jb     c002c23c <hash_next+0x88>
c002c230:	8b 45 08             	mov    0x8(%ebp),%eax
c002c233:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c002c23a:	eb 40                	jmp    c002c27c <hash_next+0xc8>
c002c23c:	8b 45 08             	mov    0x8(%ebp),%eax
c002c23f:	8b 40 04             	mov    0x4(%eax),%eax
c002c242:	83 ec 0c             	sub    $0xc,%esp
c002c245:	50                   	push   %eax
c002c246:	e8 a7 e5 ff ff       	call   c002a7f2 <list_begin>
c002c24b:	83 c4 10             	add    $0x10,%esp
c002c24e:	83 c0 04             	add    $0x4,%eax
c002c251:	8d 50 fc             	lea    -0x4(%eax),%edx
c002c254:	8b 45 08             	mov    0x8(%ebp),%eax
c002c257:	89 50 08             	mov    %edx,0x8(%eax)
c002c25a:	8b 45 08             	mov    0x8(%ebp),%eax
c002c25d:	8b 58 08             	mov    0x8(%eax),%ebx
c002c260:	8b 45 08             	mov    0x8(%ebp),%eax
c002c263:	8b 40 04             	mov    0x4(%eax),%eax
c002c266:	83 ec 0c             	sub    $0xc,%esp
c002c269:	50                   	push   %eax
c002c26a:	e8 ff e5 ff ff       	call   c002a86e <list_end>
c002c26f:	83 c4 10             	add    $0x10,%esp
c002c272:	83 c0 04             	add    $0x4,%eax
c002c275:	83 e8 04             	sub    $0x4,%eax
c002c278:	39 c3                	cmp    %eax,%ebx
c002c27a:	74 86                	je     c002c202 <hash_next+0x4e>
c002c27c:	8b 45 08             	mov    0x8(%ebp),%eax
c002c27f:	8b 40 08             	mov    0x8(%eax),%eax
c002c282:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002c285:	c9                   	leave  
c002c286:	c3                   	ret    

c002c287 <hash_cur>:
c002c287:	55                   	push   %ebp
c002c288:	89 e5                	mov    %esp,%ebp
c002c28a:	8b 45 08             	mov    0x8(%ebp),%eax
c002c28d:	8b 40 08             	mov    0x8(%eax),%eax
c002c290:	5d                   	pop    %ebp
c002c291:	c3                   	ret    

c002c292 <hash_size>:
c002c292:	55                   	push   %ebp
c002c293:	89 e5                	mov    %esp,%ebp
c002c295:	8b 45 08             	mov    0x8(%ebp),%eax
c002c298:	8b 00                	mov    (%eax),%eax
c002c29a:	5d                   	pop    %ebp
c002c29b:	c3                   	ret    

c002c29c <hash_empty>:
c002c29c:	55                   	push   %ebp
c002c29d:	89 e5                	mov    %esp,%ebp
c002c29f:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2a2:	8b 00                	mov    (%eax),%eax
c002c2a4:	85 c0                	test   %eax,%eax
c002c2a6:	0f 94 c0             	sete   %al
c002c2a9:	5d                   	pop    %ebp
c002c2aa:	c3                   	ret    

c002c2ab <hash_bytes>:
c002c2ab:	55                   	push   %ebp
c002c2ac:	89 e5                	mov    %esp,%ebp
c002c2ae:	83 ec 18             	sub    $0x18,%esp
c002c2b1:	8b 45 08             	mov    0x8(%ebp),%eax
c002c2b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c2b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c2bb:	75 21                	jne    c002c2de <hash_bytes+0x33>
c002c2bd:	83 ec 0c             	sub    $0xc,%esp
c002c2c0:	68 f2 53 03 c0       	push   $0xc00353f2
c002c2c5:	68 af 53 03 c0       	push   $0xc00353af
c002c2ca:	68 2c 54 03 c0       	push   $0xc003542c
c002c2cf:	68 10 01 00 00       	push   $0x110
c002c2d4:	68 c6 53 03 c0       	push   $0xc00353c6
c002c2d9:	e8 4c e2 ff ff       	call   c002a52a <debug_panic>
c002c2de:	c7 45 f0 c5 9d 1c 81 	movl   $0x811c9dc5,-0x10(%ebp)
c002c2e5:	eb 1d                	jmp    c002c304 <hash_bytes+0x59>
c002c2e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c2ea:	69 c8 93 01 00 01    	imul   $0x1000193,%eax,%ecx
c002c2f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c2f3:	8d 50 01             	lea    0x1(%eax),%edx
c002c2f6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002c2f9:	0f b6 00             	movzbl (%eax),%eax
c002c2fc:	0f b6 c0             	movzbl %al,%eax
c002c2ff:	31 c8                	xor    %ecx,%eax
c002c301:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c304:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c307:	8d 50 ff             	lea    -0x1(%eax),%edx
c002c30a:	89 55 0c             	mov    %edx,0xc(%ebp)
c002c30d:	85 c0                	test   %eax,%eax
c002c30f:	75 d6                	jne    c002c2e7 <hash_bytes+0x3c>
c002c311:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c314:	c9                   	leave  
c002c315:	c3                   	ret    

c002c316 <hash_string>:
c002c316:	55                   	push   %ebp
c002c317:	89 e5                	mov    %esp,%ebp
c002c319:	83 ec 18             	sub    $0x18,%esp
c002c31c:	8b 45 08             	mov    0x8(%ebp),%eax
c002c31f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c322:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c326:	75 21                	jne    c002c349 <hash_string+0x33>
c002c328:	83 ec 0c             	sub    $0xc,%esp
c002c32b:	68 fe 53 03 c0       	push   $0xc00353fe
c002c330:	68 af 53 03 c0       	push   $0xc00353af
c002c335:	68 38 54 03 c0       	push   $0xc0035438
c002c33a:	68 20 01 00 00       	push   $0x120
c002c33f:	68 c6 53 03 c0       	push   $0xc00353c6
c002c344:	e8 e1 e1 ff ff       	call   c002a52a <debug_panic>
c002c349:	c7 45 f0 c5 9d 1c 81 	movl   $0x811c9dc5,-0x10(%ebp)
c002c350:	eb 1d                	jmp    c002c36f <hash_string+0x59>
c002c352:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c355:	69 c8 93 01 00 01    	imul   $0x1000193,%eax,%ecx
c002c35b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c35e:	8d 50 01             	lea    0x1(%eax),%edx
c002c361:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002c364:	0f b6 00             	movzbl (%eax),%eax
c002c367:	0f b6 c0             	movzbl %al,%eax
c002c36a:	31 c8                	xor    %ecx,%eax
c002c36c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c36f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c372:	0f b6 00             	movzbl (%eax),%eax
c002c375:	84 c0                	test   %al,%al
c002c377:	75 d9                	jne    c002c352 <hash_string+0x3c>
c002c379:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c37c:	c9                   	leave  
c002c37d:	c3                   	ret    

c002c37e <hash_int>:
c002c37e:	55                   	push   %ebp
c002c37f:	89 e5                	mov    %esp,%ebp
c002c381:	83 ec 08             	sub    $0x8,%esp
c002c384:	83 ec 08             	sub    $0x8,%esp
c002c387:	6a 04                	push   $0x4
c002c389:	8d 45 08             	lea    0x8(%ebp),%eax
c002c38c:	50                   	push   %eax
c002c38d:	e8 19 ff ff ff       	call   c002c2ab <hash_bytes>
c002c392:	83 c4 10             	add    $0x10,%esp
c002c395:	c9                   	leave  
c002c396:	c3                   	ret    

c002c397 <find_bucket>:
c002c397:	55                   	push   %ebp
c002c398:	89 e5                	mov    %esp,%ebp
c002c39a:	83 ec 18             	sub    $0x18,%esp
c002c39d:	8b 45 08             	mov    0x8(%ebp),%eax
c002c3a0:	8b 40 0c             	mov    0xc(%eax),%eax
c002c3a3:	8b 55 08             	mov    0x8(%ebp),%edx
c002c3a6:	8b 52 14             	mov    0x14(%edx),%edx
c002c3a9:	83 ec 08             	sub    $0x8,%esp
c002c3ac:	52                   	push   %edx
c002c3ad:	ff 75 0c             	pushl  0xc(%ebp)
c002c3b0:	ff d0                	call   *%eax
c002c3b2:	83 c4 10             	add    $0x10,%esp
c002c3b5:	89 c2                	mov    %eax,%edx
c002c3b7:	8b 45 08             	mov    0x8(%ebp),%eax
c002c3ba:	8b 40 04             	mov    0x4(%eax),%eax
c002c3bd:	83 e8 01             	sub    $0x1,%eax
c002c3c0:	21 d0                	and    %edx,%eax
c002c3c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c3c5:	8b 45 08             	mov    0x8(%ebp),%eax
c002c3c8:	8b 40 08             	mov    0x8(%eax),%eax
c002c3cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002c3ce:	c1 e2 04             	shl    $0x4,%edx
c002c3d1:	01 d0                	add    %edx,%eax
c002c3d3:	c9                   	leave  
c002c3d4:	c3                   	ret    

c002c3d5 <find_elem>:
c002c3d5:	55                   	push   %ebp
c002c3d6:	89 e5                	mov    %esp,%ebp
c002c3d8:	83 ec 18             	sub    $0x18,%esp
c002c3db:	83 ec 0c             	sub    $0xc,%esp
c002c3de:	ff 75 0c             	pushl  0xc(%ebp)
c002c3e1:	e8 0c e4 ff ff       	call   c002a7f2 <list_begin>
c002c3e6:	83 c4 10             	add    $0x10,%esp
c002c3e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c3ec:	eb 66                	jmp    c002c454 <find_elem+0x7f>
c002c3ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c3f1:	83 c0 04             	add    $0x4,%eax
c002c3f4:	83 e8 04             	sub    $0x4,%eax
c002c3f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002c3fa:	8b 45 08             	mov    0x8(%ebp),%eax
c002c3fd:	8b 40 10             	mov    0x10(%eax),%eax
c002c400:	8b 55 08             	mov    0x8(%ebp),%edx
c002c403:	8b 52 14             	mov    0x14(%edx),%edx
c002c406:	83 ec 04             	sub    $0x4,%esp
c002c409:	52                   	push   %edx
c002c40a:	ff 75 10             	pushl  0x10(%ebp)
c002c40d:	ff 75 f0             	pushl  -0x10(%ebp)
c002c410:	ff d0                	call   *%eax
c002c412:	83 c4 10             	add    $0x10,%esp
c002c415:	83 f0 01             	xor    $0x1,%eax
c002c418:	84 c0                	test   %al,%al
c002c41a:	74 27                	je     c002c443 <find_elem+0x6e>
c002c41c:	8b 45 08             	mov    0x8(%ebp),%eax
c002c41f:	8b 40 10             	mov    0x10(%eax),%eax
c002c422:	8b 55 08             	mov    0x8(%ebp),%edx
c002c425:	8b 52 14             	mov    0x14(%edx),%edx
c002c428:	83 ec 04             	sub    $0x4,%esp
c002c42b:	52                   	push   %edx
c002c42c:	ff 75 f0             	pushl  -0x10(%ebp)
c002c42f:	ff 75 10             	pushl  0x10(%ebp)
c002c432:	ff d0                	call   *%eax
c002c434:	83 c4 10             	add    $0x10,%esp
c002c437:	83 f0 01             	xor    $0x1,%eax
c002c43a:	84 c0                	test   %al,%al
c002c43c:	74 05                	je     c002c443 <find_elem+0x6e>
c002c43e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c441:	eb 29                	jmp    c002c46c <find_elem+0x97>
c002c443:	83 ec 0c             	sub    $0xc,%esp
c002c446:	ff 75 f4             	pushl  -0xc(%ebp)
c002c449:	e8 d6 e3 ff ff       	call   c002a824 <list_next>
c002c44e:	83 c4 10             	add    $0x10,%esp
c002c451:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c454:	83 ec 0c             	sub    $0xc,%esp
c002c457:	ff 75 0c             	pushl  0xc(%ebp)
c002c45a:	e8 0f e4 ff ff       	call   c002a86e <list_end>
c002c45f:	83 c4 10             	add    $0x10,%esp
c002c462:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002c465:	75 87                	jne    c002c3ee <find_elem+0x19>
c002c467:	b8 00 00 00 00       	mov    $0x0,%eax
c002c46c:	c9                   	leave  
c002c46d:	c3                   	ret    

c002c46e <turn_off_least_1bit>:
c002c46e:	55                   	push   %ebp
c002c46f:	89 e5                	mov    %esp,%ebp
c002c471:	8b 45 08             	mov    0x8(%ebp),%eax
c002c474:	83 e8 01             	sub    $0x1,%eax
c002c477:	23 45 08             	and    0x8(%ebp),%eax
c002c47a:	5d                   	pop    %ebp
c002c47b:	c3                   	ret    

c002c47c <is_power_of_2>:
c002c47c:	55                   	push   %ebp
c002c47d:	89 e5                	mov    %esp,%ebp
c002c47f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c483:	74 16                	je     c002c49b <is_power_of_2+0x1f>
c002c485:	ff 75 08             	pushl  0x8(%ebp)
c002c488:	e8 e1 ff ff ff       	call   c002c46e <turn_off_least_1bit>
c002c48d:	83 c4 04             	add    $0x4,%esp
c002c490:	85 c0                	test   %eax,%eax
c002c492:	75 07                	jne    c002c49b <is_power_of_2+0x1f>
c002c494:	b8 01 00 00 00       	mov    $0x1,%eax
c002c499:	eb 05                	jmp    c002c4a0 <is_power_of_2+0x24>
c002c49b:	b8 00 00 00 00       	mov    $0x0,%eax
c002c4a0:	c9                   	leave  
c002c4a1:	c3                   	ret    

c002c4a2 <rehash>:
c002c4a2:	55                   	push   %ebp
c002c4a3:	89 e5                	mov    %esp,%ebp
c002c4a5:	83 ec 38             	sub    $0x38,%esp
c002c4a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002c4ac:	75 21                	jne    c002c4cf <rehash+0x2d>
c002c4ae:	83 ec 0c             	sub    $0xc,%esp
c002c4b1:	68 e8 53 03 c0       	push   $0xc00353e8
c002c4b6:	68 af 53 03 c0       	push   $0xc00353af
c002c4bb:	68 44 54 03 c0       	push   $0xc0035444
c002c4c0:	68 66 01 00 00       	push   $0x166
c002c4c5:	68 c6 53 03 c0       	push   $0xc00353c6
c002c4ca:	e8 5b e0 ff ff       	call   c002a52a <debug_panic>
c002c4cf:	8b 45 08             	mov    0x8(%ebp),%eax
c002c4d2:	8b 40 08             	mov    0x8(%eax),%eax
c002c4d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002c4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c002c4db:	8b 40 04             	mov    0x4(%eax),%eax
c002c4de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002c4e1:	8b 45 08             	mov    0x8(%ebp),%eax
c002c4e4:	8b 00                	mov    (%eax),%eax
c002c4e6:	d1 e8                	shr    %eax
c002c4e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c4eb:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c002c4ef:	77 1a                	ja     c002c50b <rehash+0x69>
c002c4f1:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c002c4f8:	eb 11                	jmp    c002c50b <rehash+0x69>
c002c4fa:	83 ec 0c             	sub    $0xc,%esp
c002c4fd:	ff 75 f4             	pushl  -0xc(%ebp)
c002c500:	e8 69 ff ff ff       	call   c002c46e <turn_off_least_1bit>
c002c505:	83 c4 10             	add    $0x10,%esp
c002c508:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c50b:	83 ec 0c             	sub    $0xc,%esp
c002c50e:	ff 75 f4             	pushl  -0xc(%ebp)
c002c511:	e8 66 ff ff ff       	call   c002c47c <is_power_of_2>
c002c516:	83 c4 10             	add    $0x10,%esp
c002c519:	85 c0                	test   %eax,%eax
c002c51b:	74 dd                	je     c002c4fa <rehash+0x58>
c002c51d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c520:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c002c523:	0f 84 12 01 00 00    	je     c002c63b <rehash+0x199>
c002c529:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c52c:	c1 e0 04             	shl    $0x4,%eax
c002c52f:	83 ec 0c             	sub    $0xc,%esp
c002c532:	50                   	push   %eax
c002c533:	e8 b6 7b ff ff       	call   c00240ee <malloc>
c002c538:	83 c4 10             	add    $0x10,%esp
c002c53b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002c53e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002c542:	0f 84 f6 00 00 00    	je     c002c63e <rehash+0x19c>
c002c548:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002c54f:	eb 1d                	jmp    c002c56e <rehash+0xcc>
c002c551:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c554:	c1 e0 04             	shl    $0x4,%eax
c002c557:	89 c2                	mov    %eax,%edx
c002c559:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002c55c:	01 d0                	add    %edx,%eax
c002c55e:	83 ec 0c             	sub    $0xc,%esp
c002c561:	50                   	push   %eax
c002c562:	e8 36 e2 ff ff       	call   c002a79d <list_init>
c002c567:	83 c4 10             	add    $0x10,%esp
c002c56a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002c56e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c571:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002c574:	72 db                	jb     c002c551 <rehash+0xaf>
c002c576:	8b 45 08             	mov    0x8(%ebp),%eax
c002c579:	8b 55 e0             	mov    -0x20(%ebp),%edx
c002c57c:	89 50 08             	mov    %edx,0x8(%eax)
c002c57f:	8b 45 08             	mov    0x8(%ebp),%eax
c002c582:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002c585:	89 50 04             	mov    %edx,0x4(%eax)
c002c588:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002c58f:	e9 8b 00 00 00       	jmp    c002c61f <rehash+0x17d>
c002c594:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c597:	c1 e0 04             	shl    $0x4,%eax
c002c59a:	89 c2                	mov    %eax,%edx
c002c59c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002c59f:	01 d0                	add    %edx,%eax
c002c5a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c002c5a4:	83 ec 0c             	sub    $0xc,%esp
c002c5a7:	ff 75 dc             	pushl  -0x24(%ebp)
c002c5aa:	e8 43 e2 ff ff       	call   c002a7f2 <list_begin>
c002c5af:	83 c4 10             	add    $0x10,%esp
c002c5b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002c5b5:	eb 51                	jmp    c002c608 <rehash+0x166>
c002c5b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002c5ba:	83 c0 04             	add    $0x4,%eax
c002c5bd:	83 e8 04             	sub    $0x4,%eax
c002c5c0:	83 ec 08             	sub    $0x8,%esp
c002c5c3:	50                   	push   %eax
c002c5c4:	ff 75 08             	pushl  0x8(%ebp)
c002c5c7:	e8 cb fd ff ff       	call   c002c397 <find_bucket>
c002c5cc:	83 c4 10             	add    $0x10,%esp
c002c5cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
c002c5d2:	83 ec 0c             	sub    $0xc,%esp
c002c5d5:	ff 75 ec             	pushl  -0x14(%ebp)
c002c5d8:	e8 47 e2 ff ff       	call   c002a824 <list_next>
c002c5dd:	83 c4 10             	add    $0x10,%esp
c002c5e0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c002c5e3:	83 ec 0c             	sub    $0xc,%esp
c002c5e6:	ff 75 ec             	pushl  -0x14(%ebp)
c002c5e9:	e8 b5 e5 ff ff       	call   c002aba3 <list_remove>
c002c5ee:	83 c4 10             	add    $0x10,%esp
c002c5f1:	83 ec 08             	sub    $0x8,%esp
c002c5f4:	ff 75 ec             	pushl  -0x14(%ebp)
c002c5f7:	ff 75 d8             	pushl  -0x28(%ebp)
c002c5fa:	e8 58 e5 ff ff       	call   c002ab57 <list_push_front>
c002c5ff:	83 c4 10             	add    $0x10,%esp
c002c602:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002c605:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002c608:	83 ec 0c             	sub    $0xc,%esp
c002c60b:	ff 75 dc             	pushl  -0x24(%ebp)
c002c60e:	e8 5b e2 ff ff       	call   c002a86e <list_end>
c002c613:	83 c4 10             	add    $0x10,%esp
c002c616:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002c619:	75 9c                	jne    c002c5b7 <rehash+0x115>
c002c61b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c002c61f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002c622:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c002c625:	0f 82 69 ff ff ff    	jb     c002c594 <rehash+0xf2>
c002c62b:	83 ec 0c             	sub    $0xc,%esp
c002c62e:	ff 75 e8             	pushl  -0x18(%ebp)
c002c631:	e8 b5 7d ff ff       	call   c00243eb <free>
c002c636:	83 c4 10             	add    $0x10,%esp
c002c639:	eb 04                	jmp    c002c63f <rehash+0x19d>
c002c63b:	90                   	nop
c002c63c:	eb 01                	jmp    c002c63f <rehash+0x19d>
c002c63e:	90                   	nop
c002c63f:	c9                   	leave  
c002c640:	c3                   	ret    

c002c641 <insert_elem>:
c002c641:	55                   	push   %ebp
c002c642:	89 e5                	mov    %esp,%ebp
c002c644:	83 ec 08             	sub    $0x8,%esp
c002c647:	8b 45 08             	mov    0x8(%ebp),%eax
c002c64a:	8b 00                	mov    (%eax),%eax
c002c64c:	8d 50 01             	lea    0x1(%eax),%edx
c002c64f:	8b 45 08             	mov    0x8(%ebp),%eax
c002c652:	89 10                	mov    %edx,(%eax)
c002c654:	8b 45 10             	mov    0x10(%ebp),%eax
c002c657:	83 ec 08             	sub    $0x8,%esp
c002c65a:	50                   	push   %eax
c002c65b:	ff 75 0c             	pushl  0xc(%ebp)
c002c65e:	e8 f4 e4 ff ff       	call   c002ab57 <list_push_front>
c002c663:	83 c4 10             	add    $0x10,%esp
c002c666:	90                   	nop
c002c667:	c9                   	leave  
c002c668:	c3                   	ret    

c002c669 <remove_elem>:
c002c669:	55                   	push   %ebp
c002c66a:	89 e5                	mov    %esp,%ebp
c002c66c:	83 ec 08             	sub    $0x8,%esp
c002c66f:	8b 45 08             	mov    0x8(%ebp),%eax
c002c672:	8b 00                	mov    (%eax),%eax
c002c674:	8d 50 ff             	lea    -0x1(%eax),%edx
c002c677:	8b 45 08             	mov    0x8(%ebp),%eax
c002c67a:	89 10                	mov    %edx,(%eax)
c002c67c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c67f:	83 ec 0c             	sub    $0xc,%esp
c002c682:	50                   	push   %eax
c002c683:	e8 1b e5 ff ff       	call   c002aba3 <list_remove>
c002c688:	83 c4 10             	add    $0x10,%esp
c002c68b:	90                   	nop
c002c68c:	c9                   	leave  
c002c68d:	c3                   	ret    

c002c68e <console_init>:
c002c68e:	55                   	push   %ebp
c002c68f:	89 e5                	mov    %esp,%ebp
c002c691:	83 ec 08             	sub    $0x8,%esp
c002c694:	83 ec 0c             	sub    $0xc,%esp
c002c697:	68 a0 dc 03 c0       	push   $0xc003dca0
c002c69c:	e8 dd 6d ff ff       	call   c002347e <lock_init>
c002c6a1:	83 c4 10             	add    $0x10,%esp
c002c6a4:	c6 05 c4 dc 03 c0 01 	movb   $0x1,0xc003dcc4
c002c6ab:	90                   	nop
c002c6ac:	c9                   	leave  
c002c6ad:	c3                   	ret    

c002c6ae <console_panic>:
c002c6ae:	55                   	push   %ebp
c002c6af:	89 e5                	mov    %esp,%ebp
c002c6b1:	c6 05 c4 dc 03 c0 00 	movb   $0x0,0xc003dcc4
c002c6b8:	90                   	nop
c002c6b9:	5d                   	pop    %ebp
c002c6ba:	c3                   	ret    

c002c6bb <console_print_stats>:
c002c6bb:	55                   	push   %ebp
c002c6bc:	89 e5                	mov    %esp,%ebp
c002c6be:	83 ec 08             	sub    $0x8,%esp
c002c6c1:	a1 d0 dc 03 c0       	mov    0xc003dcd0,%eax
c002c6c6:	8b 15 d4 dc 03 c0    	mov    0xc003dcd4,%edx
c002c6cc:	83 ec 04             	sub    $0x4,%esp
c002c6cf:	52                   	push   %edx
c002c6d0:	50                   	push   %eax
c002c6d1:	68 4c 54 03 c0       	push   $0xc003544c
c002c6d6:	e8 ee b8 ff ff       	call   c0027fc9 <printf>
c002c6db:	83 c4 10             	add    $0x10,%esp
c002c6de:	90                   	nop
c002c6df:	c9                   	leave  
c002c6e0:	c3                   	ret    

c002c6e1 <acquire_console>:
c002c6e1:	55                   	push   %ebp
c002c6e2:	89 e5                	mov    %esp,%ebp
c002c6e4:	83 ec 08             	sub    $0x8,%esp
c002c6e7:	e8 6c 59 ff ff       	call   c0022058 <intr_context>
c002c6ec:	83 f0 01             	xor    $0x1,%eax
c002c6ef:	84 c0                	test   %al,%al
c002c6f1:	74 3e                	je     c002c731 <acquire_console+0x50>
c002c6f3:	0f b6 05 c4 dc 03 c0 	movzbl 0xc003dcc4,%eax
c002c6fa:	84 c0                	test   %al,%al
c002c6fc:	74 33                	je     c002c731 <acquire_console+0x50>
c002c6fe:	83 ec 0c             	sub    $0xc,%esp
c002c701:	68 a0 dc 03 c0       	push   $0xc003dca0
c002c706:	e8 c0 70 ff ff       	call   c00237cb <lock_held_by_current_thread>
c002c70b:	83 c4 10             	add    $0x10,%esp
c002c70e:	84 c0                	test   %al,%al
c002c710:	74 0f                	je     c002c721 <acquire_console+0x40>
c002c712:	a1 c8 dc 03 c0       	mov    0xc003dcc8,%eax
c002c717:	83 c0 01             	add    $0x1,%eax
c002c71a:	a3 c8 dc 03 c0       	mov    %eax,0xc003dcc8
c002c71f:	eb 10                	jmp    c002c731 <acquire_console+0x50>
c002c721:	83 ec 0c             	sub    $0xc,%esp
c002c724:	68 a0 dc 03 c0       	push   $0xc003dca0
c002c729:	e8 9d 6d ff ff       	call   c00234cb <lock_acquire>
c002c72e:	83 c4 10             	add    $0x10,%esp
c002c731:	90                   	nop
c002c732:	c9                   	leave  
c002c733:	c3                   	ret    

c002c734 <release_console>:
c002c734:	55                   	push   %ebp
c002c735:	89 e5                	mov    %esp,%ebp
c002c737:	83 ec 08             	sub    $0x8,%esp
c002c73a:	e8 19 59 ff ff       	call   c0022058 <intr_context>
c002c73f:	83 f0 01             	xor    $0x1,%eax
c002c742:	84 c0                	test   %al,%al
c002c744:	74 33                	je     c002c779 <release_console+0x45>
c002c746:	0f b6 05 c4 dc 03 c0 	movzbl 0xc003dcc4,%eax
c002c74d:	84 c0                	test   %al,%al
c002c74f:	74 28                	je     c002c779 <release_console+0x45>
c002c751:	a1 c8 dc 03 c0       	mov    0xc003dcc8,%eax
c002c756:	85 c0                	test   %eax,%eax
c002c758:	7e 0f                	jle    c002c769 <release_console+0x35>
c002c75a:	a1 c8 dc 03 c0       	mov    0xc003dcc8,%eax
c002c75f:	83 e8 01             	sub    $0x1,%eax
c002c762:	a3 c8 dc 03 c0       	mov    %eax,0xc003dcc8
c002c767:	eb 10                	jmp    c002c779 <release_console+0x45>
c002c769:	83 ec 0c             	sub    $0xc,%esp
c002c76c:	68 a0 dc 03 c0       	push   $0xc003dca0
c002c771:	e8 94 6f ff ff       	call   c002370a <lock_release>
c002c776:	83 c4 10             	add    $0x10,%esp
c002c779:	90                   	nop
c002c77a:	c9                   	leave  
c002c77b:	c3                   	ret    

c002c77c <console_locked_by_current_thread>:
c002c77c:	55                   	push   %ebp
c002c77d:	89 e5                	mov    %esp,%ebp
c002c77f:	83 ec 08             	sub    $0x8,%esp
c002c782:	e8 d1 58 ff ff       	call   c0022058 <intr_context>
c002c787:	84 c0                	test   %al,%al
c002c789:	75 22                	jne    c002c7ad <console_locked_by_current_thread+0x31>
c002c78b:	0f b6 05 c4 dc 03 c0 	movzbl 0xc003dcc4,%eax
c002c792:	83 f0 01             	xor    $0x1,%eax
c002c795:	84 c0                	test   %al,%al
c002c797:	75 14                	jne    c002c7ad <console_locked_by_current_thread+0x31>
c002c799:	83 ec 0c             	sub    $0xc,%esp
c002c79c:	68 a0 dc 03 c0       	push   $0xc003dca0
c002c7a1:	e8 25 70 ff ff       	call   c00237cb <lock_held_by_current_thread>
c002c7a6:	83 c4 10             	add    $0x10,%esp
c002c7a9:	84 c0                	test   %al,%al
c002c7ab:	74 07                	je     c002c7b4 <console_locked_by_current_thread+0x38>
c002c7ad:	b8 01 00 00 00       	mov    $0x1,%eax
c002c7b2:	eb 05                	jmp    c002c7b9 <console_locked_by_current_thread+0x3d>
c002c7b4:	b8 00 00 00 00       	mov    $0x0,%eax
c002c7b9:	83 e0 01             	and    $0x1,%eax
c002c7bc:	c9                   	leave  
c002c7bd:	c3                   	ret    

c002c7be <vprintf>:
c002c7be:	55                   	push   %ebp
c002c7bf:	89 e5                	mov    %esp,%ebp
c002c7c1:	83 ec 18             	sub    $0x18,%esp
c002c7c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002c7cb:	e8 11 ff ff ff       	call   c002c6e1 <acquire_console>
c002c7d0:	8d 45 f4             	lea    -0xc(%ebp),%eax
c002c7d3:	50                   	push   %eax
c002c7d4:	68 a0 c8 02 c0       	push   $0xc002c8a0
c002c7d9:	ff 75 0c             	pushl  0xc(%ebp)
c002c7dc:	ff 75 08             	pushl  0x8(%ebp)
c002c7df:	e8 0b b8 ff ff       	call   c0027fef <__vprintf>
c002c7e4:	83 c4 10             	add    $0x10,%esp
c002c7e7:	e8 48 ff ff ff       	call   c002c734 <release_console>
c002c7ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c7ef:	c9                   	leave  
c002c7f0:	c3                   	ret    

c002c7f1 <puts>:
c002c7f1:	55                   	push   %ebp
c002c7f2:	89 e5                	mov    %esp,%ebp
c002c7f4:	83 ec 08             	sub    $0x8,%esp
c002c7f7:	e8 e5 fe ff ff       	call   c002c6e1 <acquire_console>
c002c7fc:	eb 1b                	jmp    c002c819 <puts+0x28>
c002c7fe:	8b 45 08             	mov    0x8(%ebp),%eax
c002c801:	8d 50 01             	lea    0x1(%eax),%edx
c002c804:	89 55 08             	mov    %edx,0x8(%ebp)
c002c807:	0f b6 00             	movzbl (%eax),%eax
c002c80a:	0f b6 c0             	movzbl %al,%eax
c002c80d:	83 ec 0c             	sub    $0xc,%esp
c002c810:	50                   	push   %eax
c002c811:	e8 bf 00 00 00       	call   c002c8d5 <putchar_have_lock>
c002c816:	83 c4 10             	add    $0x10,%esp
c002c819:	8b 45 08             	mov    0x8(%ebp),%eax
c002c81c:	0f b6 00             	movzbl (%eax),%eax
c002c81f:	84 c0                	test   %al,%al
c002c821:	75 db                	jne    c002c7fe <puts+0xd>
c002c823:	83 ec 0c             	sub    $0xc,%esp
c002c826:	6a 0a                	push   $0xa
c002c828:	e8 a8 00 00 00       	call   c002c8d5 <putchar_have_lock>
c002c82d:	83 c4 10             	add    $0x10,%esp
c002c830:	e8 ff fe ff ff       	call   c002c734 <release_console>
c002c835:	b8 00 00 00 00       	mov    $0x0,%eax
c002c83a:	c9                   	leave  
c002c83b:	c3                   	ret    

c002c83c <putbuf>:
c002c83c:	55                   	push   %ebp
c002c83d:	89 e5                	mov    %esp,%ebp
c002c83f:	83 ec 08             	sub    $0x8,%esp
c002c842:	e8 9a fe ff ff       	call   c002c6e1 <acquire_console>
c002c847:	eb 1b                	jmp    c002c864 <putbuf+0x28>
c002c849:	8b 45 08             	mov    0x8(%ebp),%eax
c002c84c:	8d 50 01             	lea    0x1(%eax),%edx
c002c84f:	89 55 08             	mov    %edx,0x8(%ebp)
c002c852:	0f b6 00             	movzbl (%eax),%eax
c002c855:	0f b6 c0             	movzbl %al,%eax
c002c858:	83 ec 0c             	sub    $0xc,%esp
c002c85b:	50                   	push   %eax
c002c85c:	e8 74 00 00 00       	call   c002c8d5 <putchar_have_lock>
c002c861:	83 c4 10             	add    $0x10,%esp
c002c864:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c867:	8d 50 ff             	lea    -0x1(%eax),%edx
c002c86a:	89 55 0c             	mov    %edx,0xc(%ebp)
c002c86d:	85 c0                	test   %eax,%eax
c002c86f:	75 d8                	jne    c002c849 <putbuf+0xd>
c002c871:	e8 be fe ff ff       	call   c002c734 <release_console>
c002c876:	90                   	nop
c002c877:	c9                   	leave  
c002c878:	c3                   	ret    

c002c879 <putchar>:
c002c879:	55                   	push   %ebp
c002c87a:	89 e5                	mov    %esp,%ebp
c002c87c:	83 ec 08             	sub    $0x8,%esp
c002c87f:	e8 5d fe ff ff       	call   c002c6e1 <acquire_console>
c002c884:	8b 45 08             	mov    0x8(%ebp),%eax
c002c887:	0f b6 c0             	movzbl %al,%eax
c002c88a:	83 ec 0c             	sub    $0xc,%esp
c002c88d:	50                   	push   %eax
c002c88e:	e8 42 00 00 00       	call   c002c8d5 <putchar_have_lock>
c002c893:	83 c4 10             	add    $0x10,%esp
c002c896:	e8 99 fe ff ff       	call   c002c734 <release_console>
c002c89b:	8b 45 08             	mov    0x8(%ebp),%eax
c002c89e:	c9                   	leave  
c002c89f:	c3                   	ret    

c002c8a0 <vprintf_helper>:
c002c8a0:	55                   	push   %ebp
c002c8a1:	89 e5                	mov    %esp,%ebp
c002c8a3:	83 ec 28             	sub    $0x28,%esp
c002c8a6:	8b 45 08             	mov    0x8(%ebp),%eax
c002c8a9:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002c8ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c002c8af:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002c8b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c8b5:	8b 00                	mov    (%eax),%eax
c002c8b7:	8d 50 01             	lea    0x1(%eax),%edx
c002c8ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002c8bd:	89 10                	mov    %edx,(%eax)
c002c8bf:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002c8c3:	0f b6 c0             	movzbl %al,%eax
c002c8c6:	83 ec 0c             	sub    $0xc,%esp
c002c8c9:	50                   	push   %eax
c002c8ca:	e8 06 00 00 00       	call   c002c8d5 <putchar_have_lock>
c002c8cf:	83 c4 10             	add    $0x10,%esp
c002c8d2:	90                   	nop
c002c8d3:	c9                   	leave  
c002c8d4:	c3                   	ret    

c002c8d5 <putchar_have_lock>:
c002c8d5:	55                   	push   %ebp
c002c8d6:	89 e5                	mov    %esp,%ebp
c002c8d8:	83 ec 18             	sub    $0x18,%esp
c002c8db:	8b 45 08             	mov    0x8(%ebp),%eax
c002c8de:	88 45 f4             	mov    %al,-0xc(%ebp)
c002c8e1:	e8 96 fe ff ff       	call   c002c77c <console_locked_by_current_thread>
c002c8e6:	84 c0                	test   %al,%al
c002c8e8:	75 21                	jne    c002c90b <putchar_have_lock+0x36>
c002c8ea:	83 ec 0c             	sub    $0xc,%esp
c002c8ed:	68 70 54 03 c0       	push   $0xc0035470
c002c8f2:	68 94 54 03 c0       	push   $0xc0035494
c002c8f7:	68 c8 54 03 c0       	push   $0xc00354c8
c002c8fc:	68 bb 00 00 00       	push   $0xbb
c002c901:	68 ab 54 03 c0       	push   $0xc00354ab
c002c906:	e8 1f dc ff ff       	call   c002a52a <debug_panic>
c002c90b:	a1 d0 dc 03 c0       	mov    0xc003dcd0,%eax
c002c910:	8b 15 d4 dc 03 c0    	mov    0xc003dcd4,%edx
c002c916:	83 c0 01             	add    $0x1,%eax
c002c919:	83 d2 00             	adc    $0x0,%edx
c002c91c:	a3 d0 dc 03 c0       	mov    %eax,0xc003dcd0
c002c921:	89 15 d4 dc 03 c0    	mov    %edx,0xc003dcd4
c002c927:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002c92b:	83 ec 0c             	sub    $0xc,%esp
c002c92e:	50                   	push   %eax
c002c92f:	e8 79 8e ff ff       	call   c00257ad <serial_putc>
c002c934:	83 c4 10             	add    $0x10,%esp
c002c937:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002c93b:	83 ec 0c             	sub    $0xc,%esp
c002c93e:	50                   	push   %eax
c002c93f:	e8 fb 89 ff ff       	call   c002533f <vga_putc>
c002c944:	83 c4 10             	add    $0x10,%esp
c002c947:	90                   	nop
c002c948:	c9                   	leave  
c002c949:	c3                   	ret    

c002c94a <pg_ofs>:
static inline unsigned pg_ofs (const void *va) {
c002c94a:	55                   	push   %ebp
c002c94b:	89 e5                	mov    %esp,%ebp
  return (uintptr_t) va & PGMASK;
c002c94d:	8b 45 08             	mov    0x8(%ebp),%eax
c002c950:	25 ff 0f 00 00       	and    $0xfff,%eax
}
c002c955:	5d                   	pop    %ebp
c002c956:	c3                   	ret    

c002c957 <is_user_vaddr>:
{
c002c957:	55                   	push   %ebp
c002c958:	89 e5                	mov    %esp,%ebp
  return vaddr < PHYS_BASE;
c002c95a:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002c961:	0f 96 c0             	setbe  %al
}
c002c964:	5d                   	pop    %ebp
c002c965:	c3                   	ret    

c002c966 <process_execute>:
   before process_execute() returns.  Returns the new process's
   thread id, or TID_ERROR if the thread cannot be created. */
tid_t
// int
process_execute (const char *file_name)
{
c002c966:	55                   	push   %ebp
c002c967:	89 e5                	mov    %esp,%ebp
c002c969:	53                   	push   %ebx
c002c96a:	83 ec 24             	sub    $0x24,%esp
  char *fn_copy=NULL, *executing_name = NULL;
c002c96d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002c974:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  tid_t tid;

  struct process_control_block *pcb = NULL;
c002c97b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  /* Make a copy of FILE_NAME.
     Otherwise there's a race between the caller and load(). */
  fn_copy = palloc_get_page (0);
c002c982:	83 ec 0c             	sub    $0xc,%esp
c002c985:	6a 00                	push   $0x0
c002c987:	e8 17 74 ff ff       	call   c0023da3 <palloc_get_page>
c002c98c:	83 c4 10             	add    $0x10,%esp
c002c98f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fn_copy == NULL)
c002c992:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c996:	75 0a                	jne    c002c9a2 <process_execute+0x3c>
    return TID_ERROR;
c002c998:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002c99d:	e9 f1 01 00 00       	jmp    c002cb93 <process_execute+0x22d>
  strlcpy (fn_copy, file_name, PGSIZE);
c002c9a2:	83 ec 04             	sub    $0x4,%esp
c002c9a5:	68 00 10 00 00       	push   $0x1000
c002c9aa:	ff 75 08             	pushl  0x8(%ebp)
c002c9ad:	ff 75 f4             	pushl  -0xc(%ebp)
c002c9b0:	e8 12 cf ff ff       	call   c00298c7 <strlcpy>
c002c9b5:	83 c4 10             	add    $0x10,%esp
  executing_name = palloc_get_page(0);
c002c9b8:	83 ec 0c             	sub    $0xc,%esp
c002c9bb:	6a 00                	push   $0x0
c002c9bd:	e8 e1 73 ff ff       	call   c0023da3 <palloc_get_page>
c002c9c2:	83 c4 10             	add    $0x10,%esp
c002c9c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(executing_name == NULL){
c002c9c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002c9cc:	75 1e                	jne    c002c9ec <process_execute+0x86>
      if(fn_copy)
c002c9ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002c9d2:	74 0e                	je     c002c9e2 <process_execute+0x7c>
          palloc_free_page(fn_copy);
c002c9d4:	83 ec 0c             	sub    $0xc,%esp
c002c9d7:	ff 75 f4             	pushl  -0xc(%ebp)
c002c9da:	e8 1c 75 ff ff       	call   c0023efb <palloc_free_page>
c002c9df:	83 c4 10             	add    $0x10,%esp
      return TID_ERROR;
c002c9e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002c9e7:	e9 a7 01 00 00       	jmp    c002cb93 <process_execute+0x22d>
  }
  strlcpy(executing_name, file_name, PGSIZE);
c002c9ec:	83 ec 04             	sub    $0x4,%esp
c002c9ef:	68 00 10 00 00       	push   $0x1000
c002c9f4:	ff 75 08             	pushl  0x8(%ebp)
c002c9f7:	ff 75 f0             	pushl  -0x10(%ebp)
c002c9fa:	e8 c8 ce ff ff       	call   c00298c7 <strlcpy>
c002c9ff:	83 c4 10             	add    $0x10,%esp
  char *args;
  executing_name = strtok_r(executing_name, " ", &args);
c002ca02:	83 ec 04             	sub    $0x4,%esp
c002ca05:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c002ca08:	50                   	push   %eax
c002ca09:	68 dc 54 03 c0       	push   $0xc00354dc
c002ca0e:	ff 75 f0             	pushl  -0x10(%ebp)
c002ca11:	e8 c6 cc ff ff       	call   c00296dc <strtok_r>
c002ca16:	83 c4 10             	add    $0x10,%esp
c002ca19:	89 45 f0             	mov    %eax,-0x10(%ebp)
  pcb = palloc_get_page(0);
c002ca1c:	83 ec 0c             	sub    $0xc,%esp
c002ca1f:	6a 00                	push   $0x0
c002ca21:	e8 7d 73 ff ff       	call   c0023da3 <palloc_get_page>
c002ca26:	83 c4 10             	add    $0x10,%esp
c002ca29:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (pcb == NULL) {
c002ca2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002ca30:	75 32                	jne    c002ca64 <process_execute+0xfe>
      if (fn_copy)
c002ca32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002ca36:	74 0e                	je     c002ca46 <process_execute+0xe0>
          palloc_free_page(fn_copy);
c002ca38:	83 ec 0c             	sub    $0xc,%esp
c002ca3b:	ff 75 f4             	pushl  -0xc(%ebp)
c002ca3e:	e8 b8 74 ff ff       	call   c0023efb <palloc_free_page>
c002ca43:	83 c4 10             	add    $0x10,%esp
      if (executing_name)
c002ca46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002ca4a:	74 0e                	je     c002ca5a <process_execute+0xf4>
          palloc_free_page(executing_name);
c002ca4c:	83 ec 0c             	sub    $0xc,%esp
c002ca4f:	ff 75 f0             	pushl  -0x10(%ebp)
c002ca52:	e8 a4 74 ff ff       	call   c0023efb <palloc_free_page>
c002ca57:	83 c4 10             	add    $0x10,%esp
      return TID_ERROR;
c002ca5a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002ca5f:	e9 2f 01 00 00       	jmp    c002cb93 <process_execute+0x22d>
  }
  pcb->args = args;
c002ca64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002ca67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ca6a:	89 50 04             	mov    %edx,0x4(%eax)
  pcb->tid = TID_ERROR;
c002ca6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ca70:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
  pcb->related_thread = thread_current();
c002ca76:	e8 2d 44 ff ff       	call   c0020ea8 <thread_current>
c002ca7b:	89 c2                	mov    %eax,%edx
c002ca7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ca80:	89 50 10             	mov    %edx,0x10(%eax)
  pcb->waitingBy = false;
c002ca83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ca86:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
  pcb->exited = false;
c002ca8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ca8d:	c6 40 0e 00          	movb   $0x0,0xe(%eax)
  pcb->orphan = false;
c002ca91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ca94:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
  pcb->child_fail_load = false;
c002ca98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ca9b:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
  pcb->retVal = -1;
c002ca9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002caa2:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%eax)
  sema_init(&pcb->sema_waiting, 0);
c002caa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002caac:	83 c0 14             	add    $0x14,%eax
c002caaf:	83 ec 08             	sub    $0x8,%esp
c002cab2:	6a 00                	push   $0x0
c002cab4:	50                   	push   %eax
c002cab5:	e8 db 66 ff ff       	call   c0023195 <sema_init>
c002caba:	83 c4 10             	add    $0x10,%esp
  sema_init(&pcb->sema_syncPaSon, 0);
c002cabd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cac0:	83 c0 28             	add    $0x28,%eax
c002cac3:	83 ec 08             	sub    $0x8,%esp
c002cac6:	6a 00                	push   $0x0
c002cac8:	50                   	push   %eax
c002cac9:	e8 c7 66 ff ff       	call   c0023195 <sema_init>
c002cace:	83 c4 10             	add    $0x10,%esp
  // highlight: advised by pintos manual to call strtok_r,
  //            split 'echo x' into 'echo' ' x'
  //                  'echo x y' into 'echo' ' x y'
  /* Create a new thread to execute FILE_NAME. */
  // tid = thread_create (file_name, PRI_DEFAULT, start_process, fn_copy);
  tid = thread_create (executing_name, PRI_DEFAULT, start_process, pcb);
c002cad1:	ff 75 ec             	pushl  -0x14(%ebp)
c002cad4:	68 98 cb 02 c0       	push   $0xc002cb98
c002cad9:	6a 1f                	push   $0x1f
c002cadb:	ff 75 f0             	pushl  -0x10(%ebp)
c002cade:	e8 96 41 ff ff       	call   c0020c79 <thread_create>
c002cae3:	83 c4 10             	add    $0x10,%esp
c002cae6:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (tid == TID_ERROR){
c002cae9:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c002caed:	75 43                	jne    c002cb32 <process_execute+0x1cc>
    if (fn_copy)
c002caef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002caf3:	74 0e                	je     c002cb03 <process_execute+0x19d>
      palloc_free_page(fn_copy);
c002caf5:	83 ec 0c             	sub    $0xc,%esp
c002caf8:	ff 75 f4             	pushl  -0xc(%ebp)
c002cafb:	e8 fb 73 ff ff       	call   c0023efb <palloc_free_page>
c002cb00:	83 c4 10             	add    $0x10,%esp
    if(executing_name)
c002cb03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002cb07:	74 0e                	je     c002cb17 <process_execute+0x1b1>
      palloc_free_page(executing_name);
c002cb09:	83 ec 0c             	sub    $0xc,%esp
c002cb0c:	ff 75 f0             	pushl  -0x10(%ebp)
c002cb0f:	e8 e7 73 ff ff       	call   c0023efb <palloc_free_page>
c002cb14:	83 c4 10             	add    $0x10,%esp
    if (pcb)
c002cb17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002cb1b:	74 0e                	je     c002cb2b <process_execute+0x1c5>
      palloc_free_page(pcb);
c002cb1d:	83 ec 0c             	sub    $0xc,%esp
c002cb20:	ff 75 ec             	pushl  -0x14(%ebp)
c002cb23:	e8 d3 73 ff ff       	call   c0023efb <palloc_free_page>
c002cb28:	83 c4 10             	add    $0x10,%esp
    return TID_ERROR;
c002cb2b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002cb30:	eb 61                	jmp    c002cb93 <process_execute+0x22d>
  }
  sema_down(&pcb->sema_syncPaSon);
c002cb32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb35:	83 c0 28             	add    $0x28,%eax
c002cb38:	83 ec 0c             	sub    $0xc,%esp
c002cb3b:	50                   	push   %eax
c002cb3c:	e8 9b 66 ff ff       	call   c00231dc <sema_down>
c002cb41:	83 c4 10             	add    $0x10,%esp
  if(fn_copy)
c002cb44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002cb48:	74 0e                	je     c002cb58 <process_execute+0x1f2>
    palloc_free_page(fn_copy);
c002cb4a:	83 ec 0c             	sub    $0xc,%esp
c002cb4d:	ff 75 f4             	pushl  -0xc(%ebp)
c002cb50:	e8 a6 73 ff ff       	call   c0023efb <palloc_free_page>
c002cb55:	83 c4 10             	add    $0x10,%esp
  if (!pcb->child_fail_load) // child thread success
c002cb58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb5b:	8a 40 0c             	mov    0xc(%eax),%al
c002cb5e:	83 f0 01             	xor    $0x1,%eax
c002cb61:	84 c0                	test   %al,%al
c002cb63:	74 1b                	je     c002cb80 <process_execute+0x21a>
    list_push_back(&thread_current()->child_threads, &pcb->child_elem);
c002cb65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb68:	8d 58 3c             	lea    0x3c(%eax),%ebx
c002cb6b:	e8 38 43 ff ff       	call   c0020ea8 <thread_current>
c002cb70:	83 c0 34             	add    $0x34,%eax
c002cb73:	83 ec 08             	sub    $0x8,%esp
c002cb76:	53                   	push   %ebx
c002cb77:	50                   	push   %eax
c002cb78:	e8 00 e0 ff ff       	call   c002ab7d <list_push_back>
c002cb7d:	83 c4 10             	add    $0x10,%esp
  palloc_free_page(executing_name);
c002cb80:	83 ec 0c             	sub    $0xc,%esp
c002cb83:	ff 75 f0             	pushl  -0x10(%ebp)
c002cb86:	e8 70 73 ff ff       	call   c0023efb <palloc_free_page>
c002cb8b:	83 c4 10             	add    $0x10,%esp
  _DEBUG_PRINTF("want to execute: %s at %d\n", file_name, tid);
  return pcb->tid;
c002cb8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cb91:	8b 00                	mov    (%eax),%eax
}
c002cb93:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002cb96:	c9                   	leave  
c002cb97:	c3                   	ret    

c002cb98 <start_process>:

/* A thread function that loads a user process and starts it
   running. */
static void
start_process (void *_pcb)
{
c002cb98:	55                   	push   %ebp
c002cb99:	89 e5                	mov    %esp,%ebp
c002cb9b:	53                   	push   %ebx
c002cb9c:	81 ec 74 01 00 00    	sub    $0x174,%esp
  struct process_control_block* pcb = _pcb;
c002cba2:	8b 45 08             	mov    0x8(%ebp),%eax
c002cba5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  char *file_name = (char*)pcb->args;
c002cba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cbab:	8b 40 04             	mov    0x4(%eax),%eax
c002cbae:	89 45 e8             	mov    %eax,-0x18(%ebp)
  /* If load failed, quit. */
  // split args, still don't know why it fails to assign tokens in setup_stac,k
  char *args = file_name;
c002cbb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002cbb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  char * tokens[64];
  int argc = 0;
c002cbb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  tokens[argc++] = thread_current()->name;
c002cbbe:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c002cbc1:	8d 43 01             	lea    0x1(%ebx),%eax
c002cbc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002cbc7:	e8 dc 42 ff ff       	call   c0020ea8 <thread_current>
c002cbcc:	83 c0 08             	add    $0x8,%eax
c002cbcf:	89 84 9d e0 fe ff ff 	mov    %eax,-0x120(%ebp,%ebx,4)
  char *token, *save_ptr;
  // arg tokens
  for ( token = strtok_r(args, " ", &save_ptr);
c002cbd6:	83 ec 04             	sub    $0x4,%esp
c002cbd9:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c002cbdf:	50                   	push   %eax
c002cbe0:	68 dc 54 03 c0       	push   $0xc00354dc
c002cbe5:	ff 75 e4             	pushl  -0x1c(%ebp)
c002cbe8:	e8 ef ca ff ff       	call   c00296dc <strtok_r>
c002cbed:	83 c4 10             	add    $0x10,%esp
c002cbf0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002cbf3:	eb 2f                	jmp    c002cc24 <start_process+0x8c>
        token != NULL;
        token = strtok_r(NULL, " ", &save_ptr))
  {
    tokens[argc++] = token;
c002cbf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cbf8:	8d 50 01             	lea    0x1(%eax),%edx
c002cbfb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002cbfe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002cc01:	89 94 85 e0 fe ff ff 	mov    %edx,-0x120(%ebp,%eax,4)
        token = strtok_r(NULL, " ", &save_ptr))
c002cc08:	83 ec 04             	sub    $0x4,%esp
c002cc0b:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c002cc11:	50                   	push   %eax
c002cc12:	68 dc 54 03 c0       	push   $0xc00354dc
c002cc17:	6a 00                	push   $0x0
c002cc19:	e8 be ca ff ff       	call   c00296dc <strtok_r>
c002cc1e:	83 c4 10             	add    $0x10,%esp
c002cc21:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for ( token = strtok_r(args, " ", &save_ptr);
c002cc24:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002cc28:	75 cb                	jne    c002cbf5 <start_process+0x5d>
  }
    struct intr_frame if_;
    bool success=false;
c002cc2a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)

    /* Initialize interrupt frame and load executable. */
    memset (&if_, 0, sizeof if_);
c002cc2e:	83 ec 04             	sub    $0x4,%esp
c002cc31:	6a 50                	push   $0x50
c002cc33:	6a 00                	push   $0x0
c002cc35:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cc3b:	50                   	push   %eax
c002cc3c:	e8 af cb ff ff       	call   c00297f0 <memset>
c002cc41:	83 c4 10             	add    $0x10,%esp
    if_.gs = if_.fs = if_.es = if_.ds = if_.ss = SEL_UDSEG;
c002cc44:	66 c7 85 d8 fe ff ff 	movw   $0x23,-0x128(%ebp)
c002cc4b:	23 00 
c002cc4d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
c002cc53:	66 89 85 b8 fe ff ff 	mov    %ax,-0x148(%ebp)
c002cc5a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
c002cc60:	66 89 85 b4 fe ff ff 	mov    %ax,-0x14c(%ebp)
c002cc67:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
c002cc6d:	66 89 85 b0 fe ff ff 	mov    %ax,-0x150(%ebp)
c002cc74:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
c002cc7a:	66 89 85 ac fe ff ff 	mov    %ax,-0x154(%ebp)
    if_.cs = SEL_UCSEG;
c002cc81:	66 c7 85 cc fe ff ff 	movw   $0x1b,-0x134(%ebp)
c002cc88:	1b 00 
    if_.eflags = FLAG_IF | FLAG_MBS;
c002cc8a:	c7 85 d0 fe ff ff 02 	movl   $0x202,-0x130(%ebp)
c002cc91:	02 00 00 
    success = load (file_name, &if_.eip, &if_.esp);
c002cc94:	83 ec 04             	sub    $0x4,%esp
c002cc97:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cc9d:	83 c0 48             	add    $0x48,%eax
c002cca0:	50                   	push   %eax
c002cca1:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cca7:	83 c0 3c             	add    $0x3c,%eax
c002ccaa:	50                   	push   %eax
c002ccab:	ff 75 e8             	pushl  -0x18(%ebp)
c002ccae:	e8 27 03 00 00       	call   c002cfda <load>
c002ccb3:	83 c4 10             	add    $0x10,%esp
c002ccb6:	88 45 e3             	mov    %al,-0x1d(%ebp)
//  if (argc > 32)
//    success = false;
  if (success)
c002ccb9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
c002ccbd:	74 1f                	je     c002ccde <start_process+0x146>
    push_args(&if_.esp, argc, tokens);
c002ccbf:	83 ec 04             	sub    $0x4,%esp
c002ccc2:	8d 85 e0 fe ff ff    	lea    -0x120(%ebp),%eax
c002ccc8:	50                   	push   %eax
c002ccc9:	ff 75 f4             	pushl  -0xc(%ebp)
c002cccc:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002ccd2:	83 c0 48             	add    $0x48,%eax
c002ccd5:	50                   	push   %eax
c002ccd6:	e8 1e 08 00 00       	call   c002d4f9 <push_args>
c002ccdb:	83 c4 10             	add    $0x10,%esp
  thread_current()->pcb = pcb;
c002ccde:	e8 c5 41 ff ff       	call   c0020ea8 <thread_current>
c002cce3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002cce6:	89 50 58             	mov    %edx,0x58(%eax)
  pcb->tid = (success) ? thread_current()->tid : TID_ERROR;
c002cce9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
c002cced:	74 09                	je     c002ccf8 <start_process+0x160>
c002ccef:	e8 b4 41 ff ff       	call   c0020ea8 <thread_current>
c002ccf4:	8b 00                	mov    (%eax),%eax
c002ccf6:	eb 05                	jmp    c002ccfd <start_process+0x165>
c002ccf8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002ccfd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002cd00:	89 02                	mov    %eax,(%edx)
  pcb->child_fail_load = (success) ? false : true;
c002cd02:	8a 45 e3             	mov    -0x1d(%ebp),%al
c002cd05:	83 f0 01             	xor    $0x1,%eax
c002cd08:	88 c2                	mov    %al,%dl
c002cd0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cd0d:	88 50 0c             	mov    %dl,0xc(%eax)
  pcb->related_thread = thread_current();
c002cd10:	e8 93 41 ff ff       	call   c0020ea8 <thread_current>
c002cd15:	89 c2                	mov    %eax,%edx
c002cd17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cd1a:	89 50 10             	mov    %edx,0x10(%eax)

  sema_up(&(pcb->sema_syncPaSon));
c002cd1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cd20:	83 c0 28             	add    $0x28,%eax
c002cd23:	83 ec 0c             	sub    $0xc,%esp
c002cd26:	50                   	push   %eax
c002cd27:	e8 bf 65 ff ff       	call   c00232eb <sema_up>
c002cd2c:	83 c4 10             	add    $0x10,%esp
  // palloc_free_page(tokens);
  if (!success)  {
c002cd2f:	8a 45 e3             	mov    -0x1d(%ebp),%al
c002cd32:	83 f0 01             	xor    $0x1,%eax
c002cd35:	84 c0                	test   %al,%al
c002cd37:	74 0d                	je     c002cd46 <start_process+0x1ae>
    _DEBUG_PRINTF("%d call exit\n", pcb->tid);
    sys_exit(-1);
c002cd39:	83 ec 0c             	sub    $0xc,%esp
c002cd3c:	6a ff                	push   $0xffffffff
c002cd3e:	e8 87 1b 00 00       	call   c002e8ca <sys_exit>
c002cd43:	83 c4 10             	add    $0x10,%esp
     interrupt, implemented by intr_exit (in
     threads/intr-stubs.S).  Because intr_exit takes all of its
     arguments on the stack in the form of a `struct intr_frame',
     we just point the stack pointer (%esp) to our stack frame
     and jump to it. */
  asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (&if_) : "memory");
c002cd46:	8d 85 8c fe ff ff    	lea    -0x174(%ebp),%eax
c002cd4c:	89 c4                	mov    %eax,%esp
c002cd4e:	e9 ac 58 ff ff       	jmp    c00225ff <intr_exit>
  NOT_REACHED ();
c002cd53:	68 e0 54 03 c0       	push   $0xc00354e0
c002cd58:	68 dc 55 03 c0       	push   $0xc00355dc
c002cd5d:	68 ae 00 00 00       	push   $0xae
c002cd62:	68 02 55 03 c0       	push   $0xc0035502
c002cd67:	e8 be d7 ff ff       	call   c002a52a <debug_panic>

c002cd6c <process_wait>:
   immediately, without waiting.
   This function will be implemented in problem 2-2.  For now, it
   does nothing. */
int
process_wait (tid_t child_tid /*UNUSED*/) 
{
c002cd6c:	55                   	push   %ebp
c002cd6d:	89 e5                	mov    %esp,%ebp
c002cd6f:	83 ec 18             	sub    $0x18,%esp
  struct thread *cur_thread = thread_current ();
c002cd72:	e8 31 41 ff ff       	call   c0020ea8 <thread_current>
c002cd77:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct list *child_threads = &(cur_thread->child_threads);
c002cd7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cd7d:	83 c0 34             	add    $0x34,%eax
c002cd80:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct process_control_block *child_thread = get_child_thread(cur_thread, child_tid);
c002cd83:	83 ec 08             	sub    $0x8,%esp
c002cd86:	ff 75 08             	pushl  0x8(%ebp)
c002cd89:	ff 75 f4             	pushl  -0xc(%ebp)
c002cd8c:	e8 d4 4d ff ff       	call   c0021b65 <get_child_thread>
c002cd91:	83 c4 10             	add    $0x10,%esp
c002cd94:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (child_thread == NULL || child_thread->waitingBy) {  // already waiting, wait twice
c002cd97:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002cd9b:	74 0a                	je     c002cda7 <process_wait+0x3b>
c002cd9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cda0:	8a 40 0d             	mov    0xd(%eax),%al
c002cda3:	84 c0                	test   %al,%al
c002cda5:	74 07                	je     c002cdae <process_wait+0x42>
    return -1;
c002cda7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002cdac:	eb 7d                	jmp    c002ce2b <process_wait+0xbf>
  }
  else
    child_thread->waitingBy = true;
c002cdae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cdb1:	c6 40 0d 01          	movb   $0x1,0xd(%eax)

  // wait(block) until child terminates
  if (! child_thread->exited){
c002cdb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cdb8:	8a 40 0e             	mov    0xe(%eax),%al
c002cdbb:	83 f0 01             	xor    $0x1,%eax
c002cdbe:	84 c0                	test   %al,%al
c002cdc0:	74 12                	je     c002cdd4 <process_wait+0x68>
    _DEBUG_PRINTF("[DEBUG] %s %d waiting, %d\n", cur_thread->name, cur_thread->tid, child_thread->tid);
    sema_down(& (child_thread->sema_waiting));
c002cdc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cdc5:	83 c0 14             	add    $0x14,%eax
c002cdc8:	83 ec 0c             	sub    $0xc,%esp
c002cdcb:	50                   	push   %eax
c002cdcc:	e8 0b 64 ff ff       	call   c00231dc <sema_down>
c002cdd1:	83 c4 10             	add    $0x10,%esp
  }
  ASSERT (child_thread->exited);
c002cdd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002cdd7:	8a 40 0e             	mov    0xe(%eax),%al
c002cdda:	84 c0                	test   %al,%al
c002cddc:	75 21                	jne    c002cdff <process_wait+0x93>
c002cdde:	83 ec 0c             	sub    $0xc,%esp
c002cde1:	68 1b 55 03 c0       	push   $0xc003551b
c002cde6:	68 30 55 03 c0       	push   $0xc0035530
c002cdeb:	68 ec 55 03 c0       	push   $0xc00355ec
c002cdf0:	68 ca 00 00 00       	push   $0xca
c002cdf5:	68 02 55 03 c0       	push   $0xc0035502
c002cdfa:	e8 2b d7 ff ff       	call   c002a52a <debug_panic>
  // return the exit code of the child process
  int retcode = child_thread->retVal;
c002cdff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce02:	8b 40 08             	mov    0x8(%eax),%eax
c002ce05:	89 45 e8             	mov    %eax,-0x18(%ebp)

  list_remove(&child_thread->child_elem); // delte child
c002ce08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce0b:	83 c0 3c             	add    $0x3c,%eax
c002ce0e:	83 ec 0c             	sub    $0xc,%esp
c002ce11:	50                   	push   %eax
c002ce12:	e8 8c dd ff ff       	call   c002aba3 <list_remove>
c002ce17:	83 c4 10             	add    $0x10,%esp
  palloc_free_page(child_thread);
c002ce1a:	83 ec 0c             	sub    $0xc,%esp
c002ce1d:	ff 75 ec             	pushl  -0x14(%ebp)
c002ce20:	e8 d6 70 ff ff       	call   c0023efb <palloc_free_page>
c002ce25:	83 c4 10             	add    $0x10,%esp
  // printf("[DEBUG] %s wait end\n", cur_thread->name);
  return retcode;
c002ce28:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c002ce2b:	c9                   	leave  
c002ce2c:	c3                   	ret    

c002ce2d <process_exit>:

/* Free the current process's resources. */
void
process_exit (void)
{
c002ce2d:	55                   	push   %ebp
c002ce2e:	89 e5                	mov    %esp,%ebp
c002ce30:	83 ec 38             	sub    $0x38,%esp
  struct thread *cur = thread_current ();
c002ce33:	e8 70 40 ff ff       	call   c0020ea8 <thread_current>
c002ce38:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t *pd;

  // free resources, file structrue
  struct list *opend_files = &cur->opened_files;
c002ce3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ce3e:	83 c0 44             	add    $0x44,%eax
c002ce41:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (!list_empty(opend_files)) {
c002ce44:	eb 3d                	jmp    c002ce83 <process_exit+0x56>
    struct list_elem *elem = list_pop_front(opend_files);
c002ce46:	83 ec 0c             	sub    $0xc,%esp
c002ce49:	ff 75 f0             	pushl  -0x10(%ebp)
c002ce4c:	e8 ab dd ff ff       	call   c002abfc <list_pop_front>
c002ce51:	83 c4 10             	add    $0x10,%esp
c002ce54:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct file_descriptor *fileD = list_entry(elem, struct file_descriptor, elem);
c002ce57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ce5a:	83 c0 04             	add    $0x4,%eax
c002ce5d:	83 e8 0c             	sub    $0xc,%eax
c002ce60:	89 45 e8             	mov    %eax,-0x18(%ebp)
    file_close(fileD->file);
c002ce63:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002ce66:	8b 40 04             	mov    0x4(%eax),%eax
c002ce69:	83 ec 0c             	sub    $0xc,%esp
c002ce6c:	50                   	push   %eax
c002ce6d:	e8 09 31 00 00       	call   c002ff7b <file_close>
c002ce72:	83 c4 10             	add    $0x10,%esp
    palloc_free_page(fileD);
c002ce75:	83 ec 0c             	sub    $0xc,%esp
c002ce78:	ff 75 e8             	pushl  -0x18(%ebp)
c002ce7b:	e8 7b 70 ff ff       	call   c0023efb <palloc_free_page>
c002ce80:	83 c4 10             	add    $0x10,%esp
  while (!list_empty(opend_files)) {
c002ce83:	83 ec 0c             	sub    $0xc,%esp
c002ce86:	ff 75 f0             	pushl  -0x10(%ebp)
c002ce89:	e8 97 de ff ff       	call   c002ad25 <list_empty>
c002ce8e:	83 c4 10             	add    $0x10,%esp
c002ce91:	83 f0 01             	xor    $0x1,%eax
c002ce94:	84 c0                	test   %al,%al
c002ce96:	75 ae                	jne    c002ce46 <process_exit+0x19>
      ASSERT( sys_munmap(desc->id) == true);
  }
 #endif

  // free child_thread list
  struct list *child_threads = &cur->child_threads;
c002ce98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ce9b:	83 c0 34             	add    $0x34,%eax
c002ce9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  struct process_control_block *child_thread = NULL;
c002cea1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  while (!list_empty(child_threads)) {
c002cea8:	eb 4b                	jmp    c002cef5 <process_exit+0xc8>
    struct list_elem *elem = list_pop_front (child_threads);
c002ceaa:	83 ec 0c             	sub    $0xc,%esp
c002cead:	ff 75 e4             	pushl  -0x1c(%ebp)
c002ceb0:	e8 47 dd ff ff       	call   c002abfc <list_pop_front>
c002ceb5:	83 c4 10             	add    $0x10,%esp
c002ceb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    child_thread = list_entry(elem, struct process_control_block, child_elem);
c002cebb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002cebe:	83 c0 04             	add    $0x4,%eax
c002cec1:	83 e8 40             	sub    $0x40,%eax
c002cec4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (child_thread->exited)
c002cec7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002ceca:	8a 40 0e             	mov    0xe(%eax),%al
c002cecd:	84 c0                	test   %al,%al
c002cecf:	74 10                	je     c002cee1 <process_exit+0xb4>
      palloc_free_page(child_thread);
c002ced1:	83 ec 0c             	sub    $0xc,%esp
c002ced4:	ff 75 e0             	pushl  -0x20(%ebp)
c002ced7:	e8 1f 70 ff ff       	call   c0023efb <palloc_free_page>
c002cedc:	83 c4 10             	add    $0x10,%esp
c002cedf:	eb 14                	jmp    c002cef5 <process_exit+0xc8>
    else {
      child_thread->related_thread->parentThread = NULL;
c002cee1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002cee4:	8b 40 10             	mov    0x10(%eax),%eax
c002cee7:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
      child_thread->orphan = true;
c002ceee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002cef1:	c6 40 0f 01          	movb   $0x1,0xf(%eax)
  while (!list_empty(child_threads)) {
c002cef5:	83 ec 0c             	sub    $0xc,%esp
c002cef8:	ff 75 e4             	pushl  -0x1c(%ebp)
c002cefb:	e8 25 de ff ff       	call   c002ad25 <list_empty>
c002cf00:	83 c4 10             	add    $0x10,%esp
c002cf03:	83 f0 01             	xor    $0x1,%eax
c002cf06:	84 c0                	test   %al,%al
c002cf08:	75 a0                	jne    c002ceaa <process_exit+0x7d>
    }
  }

  // free executing_file
  if (cur->executing_file) {
c002cf0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf0d:	8b 40 54             	mov    0x54(%eax),%eax
c002cf10:	85 c0                	test   %eax,%eax
c002cf12:	74 24                	je     c002cf38 <process_exit+0x10b>
    file_allow_write(cur->executing_file);
c002cf14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf17:	8b 40 54             	mov    0x54(%eax),%eax
c002cf1a:	83 ec 0c             	sub    $0xc,%esp
c002cf1d:	50                   	push   %eax
c002cf1e:	e8 a3 31 00 00       	call   c00300c6 <file_allow_write>
c002cf23:	83 c4 10             	add    $0x10,%esp
    file_close(cur->executing_file);
c002cf26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf29:	8b 40 54             	mov    0x54(%eax),%eax
c002cf2c:	83 ec 0c             	sub    $0xc,%esp
c002cf2f:	50                   	push   %eax
c002cf30:	e8 46 30 00 00       	call   c002ff7b <file_close>
c002cf35:	83 c4 10             	add    $0x10,%esp
  }

  cur->pcb->exited = true;
c002cf38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf3b:	8b 40 58             	mov    0x58(%eax),%eax
c002cf3e:	c6 40 0e 01          	movb   $0x1,0xe(%eax)
  _DEBUG_PRINTF("process %d exiting\n", cur->tid);
  _DEBUG_PRINTF("[DEBUG] %s, %d sema_waiting up\n", cur->name, cur->tid);
  bool temp_orphan = cur->pcb->orphan; // father may 
c002cf42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf45:	8b 40 58             	mov    0x58(%eax),%eax
c002cf48:	8a 40 0f             	mov    0xf(%eax),%al
c002cf4b:	88 45 db             	mov    %al,-0x25(%ebp)
  sema_up (&cur->pcb->sema_waiting);
c002cf4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf51:	8b 40 58             	mov    0x58(%eax),%eax
c002cf54:	83 c0 14             	add    $0x14,%eax
c002cf57:	83 ec 0c             	sub    $0xc,%esp
c002cf5a:	50                   	push   %eax
c002cf5b:	e8 8b 63 ff ff       	call   c00232eb <sema_up>
c002cf60:	83 c4 10             	add    $0x10,%esp

  if (temp_orphan)
c002cf63:	80 7d db 00          	cmpb   $0x0,-0x25(%ebp)
c002cf67:	74 12                	je     c002cf7b <process_exit+0x14e>
    palloc_free_page(&cur->pcb);
c002cf69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf6c:	83 c0 58             	add    $0x58,%eax
c002cf6f:	83 ec 0c             	sub    $0xc,%esp
c002cf72:	50                   	push   %eax
c002cf73:	e8 83 6f ff ff       	call   c0023efb <palloc_free_page>
c002cf78:	83 c4 10             	add    $0x10,%esp
    cur->supt = NULL;
  #endif

  /* Destroy the current process's page directory and switch back
     to the kernel-only page directory. */
  pd = cur->pagedir;
c002cf7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf7e:	8b 40 30             	mov    0x30(%eax),%eax
c002cf81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  if (pd != NULL) // Highlight: means user processe
c002cf84:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c002cf88:	74 25                	je     c002cfaf <process_exit+0x182>
         process page directory.  We must activate the base page
         directory before destroying the process's page
         directory, or our active page directory will be one
         that's been freed (and cleared). */
      // printf("%s: exit(%d)\n", cur_thread->name, retVal);
      cur->pagedir = NULL;
c002cf8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cf8d:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
      pagedir_activate (NULL);
c002cf94:	83 ec 0c             	sub    $0xc,%esp
c002cf97:	6a 00                	push   $0x0
c002cf99:	e8 4f 0f 00 00       	call   c002deed <pagedir_activate>
c002cf9e:	83 c4 10             	add    $0x10,%esp
      pagedir_destroy (pd);
c002cfa1:	83 ec 0c             	sub    $0xc,%esp
c002cfa4:	ff 75 d4             	pushl  -0x2c(%ebp)
c002cfa7:	e8 6f 09 00 00       	call   c002d91b <pagedir_destroy>
c002cfac:	83 c4 10             	add    $0x10,%esp
    }
  // printf("[DEBUG] %s exit end\n", cur->name);
}
c002cfaf:	90                   	nop
c002cfb0:	c9                   	leave  
c002cfb1:	c3                   	ret    

c002cfb2 <process_activate>:
/* Sets up the CPU for running user code in the current
   thread.
   This function is called on every context switch. */
void
process_activate (void)
{
c002cfb2:	55                   	push   %ebp
c002cfb3:	89 e5                	mov    %esp,%ebp
c002cfb5:	83 ec 18             	sub    $0x18,%esp
  struct thread *t = thread_current ();
c002cfb8:	e8 eb 3e ff ff       	call   c0020ea8 <thread_current>
c002cfbd:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Activate thread's page tables. */
  pagedir_activate (t->pagedir);
c002cfc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002cfc3:	8b 40 30             	mov    0x30(%eax),%eax
c002cfc6:	83 ec 0c             	sub    $0xc,%esp
c002cfc9:	50                   	push   %eax
c002cfca:	e8 1e 0f 00 00       	call   c002deed <pagedir_activate>
c002cfcf:	83 c4 10             	add    $0x10,%esp

  /* Set thread's kernel stack for use in processing
     interrupts. */
  tss_update ();
c002cfd2:	e8 e0 27 00 00       	call   c002f7b7 <tss_update>
}
c002cfd7:	90                   	nop
c002cfd8:	c9                   	leave  
c002cfd9:	c3                   	ret    

c002cfda <load>:
   and its initial stack pointer into *ESP.
   Returns true if successful, false otherwise. */
bool
// load (const char *file_name, void (**eip) (void), void **esp) 
load (const char *args, void (**eip) (void), void **esp) 
{
c002cfda:	55                   	push   %ebp
c002cfdb:	89 e5                	mov    %esp,%ebp
c002cfdd:	81 ec 88 00 00 00    	sub    $0x88,%esp
  struct thread *t = thread_current ();
c002cfe3:	e8 c0 3e ff ff       	call   c0020ea8 <thread_current>
c002cfe8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  struct Elf32_Ehdr ehdr;
  struct file *file = NULL;
c002cfeb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  off_t file_ofs;
  bool success = false;
c002cff2:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
  int i;

  /* Allocate and activate page directory. */
  t->pagedir = pagedir_create ();
c002cff6:	e8 e6 08 00 00       	call   c002d8e1 <pagedir_create>
c002cffb:	89 c2                	mov    %eax,%edx
c002cffd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d000:	89 50 30             	mov    %edx,0x30(%eax)
#ifdef VM
  t->supt = vm_supt_create();
#endif
  if (t->pagedir == NULL) 
c002d003:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d006:	8b 40 30             	mov    0x30(%eax),%eax
c002d009:	85 c0                	test   %eax,%eax
c002d00b:	0f 84 66 02 00 00    	je     c002d277 <load+0x29d>
    goto done;
  process_activate ();
c002d011:	e8 9c ff ff ff       	call   c002cfb2 <process_activate>

  /* Open executable file. */
  // file = filesys_open (file_name); 
  _DEBUG_PRINTF("open %s:\n", t->name);
  file = filesys_open (t->name);   // we put the executable name at thread->name
c002d016:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d019:	83 c0 08             	add    $0x8,%eax
c002d01c:	83 ec 0c             	sub    $0xc,%esp
c002d01f:	50                   	push   %eax
c002d020:	e8 92 29 00 00       	call   c002f9b7 <filesys_open>
c002d025:	83 c4 10             	add    $0x10,%esp
c002d028:	89 45 dc             	mov    %eax,-0x24(%ebp)
  if (file == NULL) 
c002d02b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c002d02f:	75 20                	jne    c002d051 <load+0x77>
    {
      // printf("at %s\n",t->name);
      printf ("load: %s: open failed\n", t->name);
c002d031:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d034:	83 c0 08             	add    $0x8,%eax
c002d037:	83 ec 08             	sub    $0x8,%esp
c002d03a:	50                   	push   %eax
c002d03b:	68 47 55 03 c0       	push   $0xc0035547
c002d040:	e8 84 af ff ff       	call   c0027fc9 <printf>
c002d045:	83 c4 10             	add    $0x10,%esp
      success = false;
c002d048:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
      goto done; 
c002d04c:	e9 36 02 00 00       	jmp    c002d287 <load+0x2ad>
    }

  /* Read and verify executable header. */
  if (file_read (file, &ehdr, sizeof ehdr) != sizeof ehdr
c002d051:	83 ec 04             	sub    $0x4,%esp
c002d054:	6a 34                	push   $0x34
c002d056:	8d 45 98             	lea    -0x68(%ebp),%eax
c002d059:	50                   	push   %eax
c002d05a:	ff 75 dc             	pushl  -0x24(%ebp)
c002d05d:	e8 5f 2f 00 00       	call   c002ffc1 <file_read>
c002d062:	83 c4 10             	add    $0x10,%esp
c002d065:	83 f8 34             	cmp    $0x34,%eax
c002d068:	75 48                	jne    c002d0b2 <load+0xd8>
      || memcmp (ehdr.e_ident, "\177ELF\1\1\1", 7)
c002d06a:	83 ec 04             	sub    $0x4,%esp
c002d06d:	6a 07                	push   $0x7
c002d06f:	68 5e 55 03 c0       	push   $0xc003555e
c002d074:	8d 45 98             	lea    -0x68(%ebp),%eax
c002d077:	50                   	push   %eax
c002d078:	e8 c5 c2 ff ff       	call   c0029342 <memcmp>
c002d07d:	83 c4 10             	add    $0x10,%esp
c002d080:	85 c0                	test   %eax,%eax
c002d082:	75 2e                	jne    c002d0b2 <load+0xd8>
      || ehdr.e_type != 2
c002d084:	8b 45 a8             	mov    -0x58(%ebp),%eax
c002d087:	66 83 f8 02          	cmp    $0x2,%ax
c002d08b:	75 25                	jne    c002d0b2 <load+0xd8>
      || ehdr.e_machine != 3
c002d08d:	66 8b 45 aa          	mov    -0x56(%ebp),%ax
c002d091:	66 83 f8 03          	cmp    $0x3,%ax
c002d095:	75 1b                	jne    c002d0b2 <load+0xd8>
      || ehdr.e_version != 1
c002d097:	8b 45 ac             	mov    -0x54(%ebp),%eax
c002d09a:	83 f8 01             	cmp    $0x1,%eax
c002d09d:	75 13                	jne    c002d0b2 <load+0xd8>
      || ehdr.e_phentsize != sizeof (struct Elf32_Phdr)
c002d09f:	66 8b 45 c2          	mov    -0x3e(%ebp),%ax
c002d0a3:	66 83 f8 20          	cmp    $0x20,%ax
c002d0a7:	75 09                	jne    c002d0b2 <load+0xd8>
      || ehdr.e_phnum > 1024) 
c002d0a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c002d0ac:	66 3d 00 04          	cmp    $0x400,%ax
c002d0b0:	76 1c                	jbe    c002d0ce <load+0xf4>
    {
      printf ("load: %s: error loading executable\n", t->name);
c002d0b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002d0b5:	83 c0 08             	add    $0x8,%eax
c002d0b8:	83 ec 08             	sub    $0x8,%esp
c002d0bb:	50                   	push   %eax
c002d0bc:	68 68 55 03 c0       	push   $0xc0035568
c002d0c1:	e8 03 af ff ff       	call   c0027fc9 <printf>
c002d0c6:	83 c4 10             	add    $0x10,%esp
      goto done; 
c002d0c9:	e9 b9 01 00 00       	jmp    c002d287 <load+0x2ad>
    }

  /* Read program headers. */
  file_ofs = ehdr.e_phoff;
c002d0ce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c002d0d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (i = 0; i < ehdr.e_phnum; i++) 
c002d0d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c002d0db:	e9 4a 01 00 00       	jmp    c002d22a <load+0x250>
    {
      struct Elf32_Phdr phdr;

      if (file_ofs < 0 || file_ofs > file_length (file))
c002d0e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002d0e4:	0f 88 9d 01 00 00    	js     c002d287 <load+0x2ad>
c002d0ea:	83 ec 0c             	sub    $0xc,%esp
c002d0ed:	ff 75 dc             	pushl  -0x24(%ebp)
c002d0f0:	e8 24 30 00 00       	call   c0030119 <file_length>
c002d0f5:	83 c4 10             	add    $0x10,%esp
c002d0f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002d0fb:	0f 8c 86 01 00 00    	jl     c002d287 <load+0x2ad>
        goto done;
      file_seek (file, file_ofs);
c002d101:	83 ec 08             	sub    $0x8,%esp
c002d104:	ff 75 f4             	pushl  -0xc(%ebp)
c002d107:	ff 75 dc             	pushl  -0x24(%ebp)
c002d10a:	e8 4a 30 00 00       	call   c0030159 <file_seek>
c002d10f:	83 c4 10             	add    $0x10,%esp

      if (file_read (file, &phdr, sizeof phdr) != sizeof phdr)
c002d112:	83 ec 04             	sub    $0x4,%esp
c002d115:	6a 20                	push   $0x20
c002d117:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
c002d11d:	50                   	push   %eax
c002d11e:	ff 75 dc             	pushl  -0x24(%ebp)
c002d121:	e8 9b 2e 00 00       	call   c002ffc1 <file_read>
c002d126:	83 c4 10             	add    $0x10,%esp
c002d129:	83 f8 20             	cmp    $0x20,%eax
c002d12c:	0f 85 48 01 00 00    	jne    c002d27a <load+0x2a0>
        goto done;
      file_ofs += sizeof phdr;
c002d132:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d135:	83 c0 20             	add    $0x20,%eax
c002d138:	89 45 f4             	mov    %eax,-0xc(%ebp)
      switch (phdr.p_type) 
c002d13b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c002d141:	83 f8 03             	cmp    $0x3,%eax
c002d144:	77 13                	ja     c002d159 <load+0x17f>
c002d146:	83 f8 02             	cmp    $0x2,%eax
c002d149:	0f 83 2e 01 00 00    	jae    c002d27d <load+0x2a3>
c002d14f:	83 f8 01             	cmp    $0x1,%eax
c002d152:	74 13                	je     c002d167 <load+0x18d>
        case PT_NOTE:
        case PT_PHDR:
        case PT_STACK:
        default:
          /* Ignore this segment. */
          break;
c002d154:	e9 ce 00 00 00       	jmp    c002d227 <load+0x24d>
      switch (phdr.p_type) 
c002d159:	83 f8 05             	cmp    $0x5,%eax
c002d15c:	0f 84 1b 01 00 00    	je     c002d27d <load+0x2a3>
          break;
c002d162:	e9 c0 00 00 00       	jmp    c002d227 <load+0x24d>
        case PT_DYNAMIC:
        case PT_INTERP:
        case PT_SHLIB:
          goto done;
        case PT_LOAD:
          if (validate_segment (&phdr, file)) 
c002d167:	83 ec 08             	sub    $0x8,%esp
c002d16a:	ff 75 dc             	pushl  -0x24(%ebp)
c002d16d:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
c002d173:	50                   	push   %eax
c002d174:	e8 13 01 00 00       	call   c002d28c <validate_segment>
c002d179:	83 c4 10             	add    $0x10,%esp
c002d17c:	84 c0                	test   %al,%al
c002d17e:	0f 84 fc 00 00 00    	je     c002d280 <load+0x2a6>
            {
              bool writable = (phdr.p_flags & PF_W) != 0;
c002d184:	8b 45 90             	mov    -0x70(%ebp),%eax
c002d187:	83 e0 02             	and    $0x2,%eax
c002d18a:	85 c0                	test   %eax,%eax
c002d18c:	0f 95 c0             	setne  %al
c002d18f:	88 45 db             	mov    %al,-0x25(%ebp)
              uint32_t file_page = phdr.p_offset & ~PGMASK;
c002d192:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c002d198:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d19d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
              uint32_t mem_page = phdr.p_vaddr & ~PGMASK;
c002d1a0:	8b 45 80             	mov    -0x80(%ebp),%eax
c002d1a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d1a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
              uint32_t page_offset = phdr.p_vaddr & PGMASK;
c002d1ab:	8b 45 80             	mov    -0x80(%ebp),%eax
c002d1ae:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d1b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
              uint32_t read_bytes, zero_bytes;
              if (phdr.p_filesz > 0)
c002d1b6:	8b 45 88             	mov    -0x78(%ebp),%eax
c002d1b9:	85 c0                	test   %eax,%eax
c002d1bb:	74 25                	je     c002d1e2 <load+0x208>
                {
                  /* Normal segment.
                     Read initial part from disk and zero the rest. */
                  read_bytes = page_offset + phdr.p_filesz;
c002d1bd:	8b 55 88             	mov    -0x78(%ebp),%edx
c002d1c0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002d1c3:	01 d0                	add    %edx,%eax
c002d1c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
                  zero_bytes = (ROUND_UP (page_offset + phdr.p_memsz, PGSIZE)
c002d1c8:	8b 55 8c             	mov    -0x74(%ebp),%edx
c002d1cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002d1ce:	01 d0                	add    %edx,%eax
c002d1d0:	05 ff 0f 00 00       	add    $0xfff,%eax
c002d1d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d1da:	2b 45 e8             	sub    -0x18(%ebp),%eax
c002d1dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002d1e0:	eb 1c                	jmp    c002d1fe <load+0x224>
                }
              else 
                {
                  /* Entirely zero.
                     Don't read anything from disk. */
                  read_bytes = 0;
c002d1e2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
                  zero_bytes = ROUND_UP (page_offset + phdr.p_memsz, PGSIZE);
c002d1e9:	8b 55 8c             	mov    -0x74(%ebp),%edx
c002d1ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002d1ef:	01 d0                	add    %edx,%eax
c002d1f1:	05 ff 0f 00 00       	add    $0xfff,%eax
c002d1f6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d1fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                }
              if (!load_segment (file, file_page, (void *) mem_page,
c002d1fe:	0f b6 4d db          	movzbl -0x25(%ebp),%ecx
c002d202:	8b 55 d0             	mov    -0x30(%ebp),%edx
c002d205:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002d208:	83 ec 08             	sub    $0x8,%esp
c002d20b:	51                   	push   %ecx
c002d20c:	ff 75 e4             	pushl  -0x1c(%ebp)
c002d20f:	ff 75 e8             	pushl  -0x18(%ebp)
c002d212:	52                   	push   %edx
c002d213:	50                   	push   %eax
c002d214:	ff 75 dc             	pushl  -0x24(%ebp)
c002d217:	e8 4c 01 00 00       	call   c002d368 <load_segment>
c002d21c:	83 c4 20             	add    $0x20,%esp
c002d21f:	83 f0 01             	xor    $0x1,%eax
c002d222:	84 c0                	test   %al,%al
c002d224:	75 5d                	jne    c002d283 <load+0x2a9>
                                 read_bytes, zero_bytes, writable))
                goto done;
            }
          else
            goto done;
          break;
c002d226:	90                   	nop
  for (i = 0; i < ehdr.e_phnum; i++) 
c002d227:	ff 45 ec             	incl   -0x14(%ebp)
c002d22a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c002d22d:	0f b7 c0             	movzwl %ax,%eax
c002d230:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c002d233:	0f 8f a7 fe ff ff    	jg     c002d0e0 <load+0x106>
        }
    }

  /* Set up stack. */
  if (!setup_stack (esp))
c002d239:	83 ec 0c             	sub    $0xc,%esp
c002d23c:	ff 75 10             	pushl  0x10(%ebp)
c002d23f:	e8 ed 03 00 00       	call   c002d631 <setup_stack>
c002d244:	83 c4 10             	add    $0x10,%esp
c002d247:	83 f0 01             	xor    $0x1,%eax
c002d24a:	84 c0                	test   %al,%al
c002d24c:	75 38                	jne    c002d286 <load+0x2ac>
    goto done;

  /* Start address. */
  *eip = (void (*) (void)) ehdr.e_entry;
c002d24e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c002d251:	89 c2                	mov    %eax,%edx
c002d253:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d256:	89 10                	mov    %edx,(%eax)

  // executing file
  file_deny_write(file);
c002d258:	83 ec 0c             	sub    $0xc,%esp
c002d25b:	ff 75 dc             	pushl  -0x24(%ebp)
c002d25e:	e8 10 2e 00 00       	call   c0030073 <file_deny_write>
c002d263:	83 c4 10             	add    $0x10,%esp
  thread_current()->executing_file = file;
c002d266:	e8 3d 3c ff ff       	call   c0020ea8 <thread_current>
c002d26b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c002d26e:	89 50 54             	mov    %edx,0x54(%eax)
  success = true;
c002d271:	c6 45 f3 01          	movb   $0x1,-0xd(%ebp)
c002d275:	eb 10                	jmp    c002d287 <load+0x2ad>
    goto done;
c002d277:	90                   	nop
c002d278:	eb 0d                	jmp    c002d287 <load+0x2ad>
        goto done;
c002d27a:	90                   	nop
c002d27b:	eb 0a                	jmp    c002d287 <load+0x2ad>
          goto done;
c002d27d:	90                   	nop
c002d27e:	eb 07                	jmp    c002d287 <load+0x2ad>
            goto done;
c002d280:	90                   	nop
c002d281:	eb 04                	jmp    c002d287 <load+0x2ad>
                goto done;
c002d283:	90                   	nop
c002d284:	eb 01                	jmp    c002d287 <load+0x2ad>
    goto done;
c002d286:	90                   	nop

done:
  /* We arrive here whether the load is successful or not. */
  // if (!success)
  //   file_close (file);
  return success;
c002d287:	8a 45 f3             	mov    -0xd(%ebp),%al
}
c002d28a:	c9                   	leave  
c002d28b:	c3                   	ret    

c002d28c <validate_segment>:

/* Checks whether PHDR describes a valid, loadable segment in
   FILE and returns true if so, false otherwise. */
static bool
validate_segment (const struct Elf32_Phdr *phdr, struct file *file) 
{
c002d28c:	55                   	push   %ebp
c002d28d:	89 e5                	mov    %esp,%ebp
c002d28f:	53                   	push   %ebx
c002d290:	83 ec 04             	sub    $0x4,%esp
  /* p_offset and p_vaddr must have the same page offset. */
  if ((phdr->p_offset & PGMASK) != (phdr->p_vaddr & PGMASK)) 
c002d293:	8b 45 08             	mov    0x8(%ebp),%eax
c002d296:	8b 50 04             	mov    0x4(%eax),%edx
c002d299:	8b 45 08             	mov    0x8(%ebp),%eax
c002d29c:	8b 40 08             	mov    0x8(%eax),%eax
c002d29f:	31 d0                	xor    %edx,%eax
c002d2a1:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d2a6:	85 c0                	test   %eax,%eax
c002d2a8:	74 07                	je     c002d2b1 <validate_segment+0x25>
    return false; 
c002d2aa:	b0 00                	mov    $0x0,%al
c002d2ac:	e9 b2 00 00 00       	jmp    c002d363 <validate_segment+0xd7>

  /* p_offset must point within FILE. */
  if (phdr->p_offset > (Elf32_Off) file_length (file)) 
c002d2b1:	8b 45 08             	mov    0x8(%ebp),%eax
c002d2b4:	8b 58 04             	mov    0x4(%eax),%ebx
c002d2b7:	83 ec 0c             	sub    $0xc,%esp
c002d2ba:	ff 75 0c             	pushl  0xc(%ebp)
c002d2bd:	e8 57 2e 00 00       	call   c0030119 <file_length>
c002d2c2:	83 c4 10             	add    $0x10,%esp
c002d2c5:	39 c3                	cmp    %eax,%ebx
c002d2c7:	76 07                	jbe    c002d2d0 <validate_segment+0x44>
    return false;
c002d2c9:	b0 00                	mov    $0x0,%al
c002d2cb:	e9 93 00 00 00       	jmp    c002d363 <validate_segment+0xd7>

  /* p_memsz must be at least as big as p_filesz. */
  if (phdr->p_memsz < phdr->p_filesz) 
c002d2d0:	8b 45 08             	mov    0x8(%ebp),%eax
c002d2d3:	8b 50 14             	mov    0x14(%eax),%edx
c002d2d6:	8b 45 08             	mov    0x8(%ebp),%eax
c002d2d9:	8b 40 10             	mov    0x10(%eax),%eax
c002d2dc:	39 c2                	cmp    %eax,%edx
c002d2de:	73 04                	jae    c002d2e4 <validate_segment+0x58>
    return false; 
c002d2e0:	b0 00                	mov    $0x0,%al
c002d2e2:	eb 7f                	jmp    c002d363 <validate_segment+0xd7>

  /* The segment must not be empty. */
  if (phdr->p_memsz == 0)
c002d2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c002d2e7:	8b 40 14             	mov    0x14(%eax),%eax
c002d2ea:	85 c0                	test   %eax,%eax
c002d2ec:	75 04                	jne    c002d2f2 <validate_segment+0x66>
    return false;
c002d2ee:	b0 00                	mov    $0x0,%al
c002d2f0:	eb 71                	jmp    c002d363 <validate_segment+0xd7>
  
  /* The virtual memory region must both start and end within the
     user address space range. */
  if (!is_user_vaddr ((void *) phdr->p_vaddr))
c002d2f2:	8b 45 08             	mov    0x8(%ebp),%eax
c002d2f5:	8b 40 08             	mov    0x8(%eax),%eax
c002d2f8:	83 ec 0c             	sub    $0xc,%esp
c002d2fb:	50                   	push   %eax
c002d2fc:	e8 56 f6 ff ff       	call   c002c957 <is_user_vaddr>
c002d301:	83 c4 10             	add    $0x10,%esp
c002d304:	83 f0 01             	xor    $0x1,%eax
c002d307:	84 c0                	test   %al,%al
c002d309:	74 04                	je     c002d30f <validate_segment+0x83>
    return false;
c002d30b:	b0 00                	mov    $0x0,%al
c002d30d:	eb 54                	jmp    c002d363 <validate_segment+0xd7>
  if (!is_user_vaddr ((void *) (phdr->p_vaddr + phdr->p_memsz)))
c002d30f:	8b 45 08             	mov    0x8(%ebp),%eax
c002d312:	8b 50 08             	mov    0x8(%eax),%edx
c002d315:	8b 45 08             	mov    0x8(%ebp),%eax
c002d318:	8b 40 14             	mov    0x14(%eax),%eax
c002d31b:	01 d0                	add    %edx,%eax
c002d31d:	83 ec 0c             	sub    $0xc,%esp
c002d320:	50                   	push   %eax
c002d321:	e8 31 f6 ff ff       	call   c002c957 <is_user_vaddr>
c002d326:	83 c4 10             	add    $0x10,%esp
c002d329:	83 f0 01             	xor    $0x1,%eax
c002d32c:	84 c0                	test   %al,%al
c002d32e:	74 04                	je     c002d334 <validate_segment+0xa8>
    return false;
c002d330:	b0 00                	mov    $0x0,%al
c002d332:	eb 2f                	jmp    c002d363 <validate_segment+0xd7>

  /* The region cannot "wrap around" across the kernel virtual
     address space. */
  if (phdr->p_vaddr + phdr->p_memsz < phdr->p_vaddr)
c002d334:	8b 45 08             	mov    0x8(%ebp),%eax
c002d337:	8b 50 08             	mov    0x8(%eax),%edx
c002d33a:	8b 45 08             	mov    0x8(%ebp),%eax
c002d33d:	8b 40 14             	mov    0x14(%eax),%eax
c002d340:	01 c2                	add    %eax,%edx
c002d342:	8b 45 08             	mov    0x8(%ebp),%eax
c002d345:	8b 40 08             	mov    0x8(%eax),%eax
c002d348:	39 c2                	cmp    %eax,%edx
c002d34a:	73 04                	jae    c002d350 <validate_segment+0xc4>
    return false;
c002d34c:	b0 00                	mov    $0x0,%al
c002d34e:	eb 13                	jmp    c002d363 <validate_segment+0xd7>
  /* Disallow mapping page 0.
     Not only is it a bad idea to map page 0, but if we allowed
     it then user code that passed a null pointer to system calls
     could quite likely panic the kernel by way of null pointer
     assertions in memcpy(), etc. */
  if (phdr->p_vaddr < PGSIZE)
c002d350:	8b 45 08             	mov    0x8(%ebp),%eax
c002d353:	8b 40 08             	mov    0x8(%eax),%eax
c002d356:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c002d35b:	77 04                	ja     c002d361 <validate_segment+0xd5>
    return false;
c002d35d:	b0 00                	mov    $0x0,%al
c002d35f:	eb 02                	jmp    c002d363 <validate_segment+0xd7>

  /* It's okay. */
  return true;
c002d361:	b0 01                	mov    $0x1,%al
}
c002d363:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002d366:	c9                   	leave  
c002d367:	c3                   	ret    

c002d368 <load_segment>:
   Return true if successful, false if a memory allocation error
   or disk read error occurs. */
static bool
load_segment (struct file *file, off_t ofs, uint8_t *upage,
              uint32_t read_bytes, uint32_t zero_bytes, bool writable) 
{
c002d368:	55                   	push   %ebp
c002d369:	89 e5                	mov    %esp,%ebp
c002d36b:	83 ec 28             	sub    $0x28,%esp
c002d36e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002d371:	88 45 e4             	mov    %al,-0x1c(%ebp)
  ASSERT ((read_bytes + zero_bytes) % PGSIZE == 0);
c002d374:	8b 55 14             	mov    0x14(%ebp),%edx
c002d377:	8b 45 18             	mov    0x18(%ebp),%eax
c002d37a:	01 d0                	add    %edx,%eax
c002d37c:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d381:	85 c0                	test   %eax,%eax
c002d383:	74 21                	je     c002d3a6 <load_segment+0x3e>
c002d385:	83 ec 0c             	sub    $0xc,%esp
c002d388:	68 8c 55 03 c0       	push   $0xc003558c
c002d38d:	68 30 55 03 c0       	push   $0xc0035530
c002d392:	68 fc 55 03 c0       	push   $0xc00355fc
c002d397:	68 38 02 00 00       	push   $0x238
c002d39c:	68 02 55 03 c0       	push   $0xc0035502
c002d3a1:	e8 84 d1 ff ff       	call   c002a52a <debug_panic>
  ASSERT (pg_ofs (upage) == 0);
c002d3a6:	83 ec 0c             	sub    $0xc,%esp
c002d3a9:	ff 75 10             	pushl  0x10(%ebp)
c002d3ac:	e8 99 f5 ff ff       	call   c002c94a <pg_ofs>
c002d3b1:	83 c4 10             	add    $0x10,%esp
c002d3b4:	85 c0                	test   %eax,%eax
c002d3b6:	74 21                	je     c002d3d9 <load_segment+0x71>
c002d3b8:	83 ec 0c             	sub    $0xc,%esp
c002d3bb:	68 b4 55 03 c0       	push   $0xc00355b4
c002d3c0:	68 30 55 03 c0       	push   $0xc0035530
c002d3c5:	68 fc 55 03 c0       	push   $0xc00355fc
c002d3ca:	68 39 02 00 00       	push   $0x239
c002d3cf:	68 02 55 03 c0       	push   $0xc0035502
c002d3d4:	e8 51 d1 ff ff       	call   c002a52a <debug_panic>
  ASSERT (ofs % PGSIZE == 0);
c002d3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d3dc:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d3e1:	85 c0                	test   %eax,%eax
c002d3e3:	74 21                	je     c002d406 <load_segment+0x9e>
c002d3e5:	83 ec 0c             	sub    $0xc,%esp
c002d3e8:	68 c8 55 03 c0       	push   $0xc00355c8
c002d3ed:	68 30 55 03 c0       	push   $0xc0035530
c002d3f2:	68 fc 55 03 c0       	push   $0xc00355fc
c002d3f7:	68 3a 02 00 00       	push   $0x23a
c002d3fc:	68 02 55 03 c0       	push   $0xc0035502
c002d401:	e8 24 d1 ff ff       	call   c002a52a <debug_panic>

  file_seek (file, ofs);
c002d406:	83 ec 08             	sub    $0x8,%esp
c002d409:	ff 75 0c             	pushl  0xc(%ebp)
c002d40c:	ff 75 08             	pushl  0x8(%ebp)
c002d40f:	e8 45 2d 00 00       	call   c0030159 <file_seek>
c002d414:	83 c4 10             	add    $0x10,%esp
  while (read_bytes > 0 || zero_bytes > 0) 
c002d417:	e9 c5 00 00 00       	jmp    c002d4e1 <load_segment+0x179>
    {
      /* Calculate how to fill this page.
         We will read PAGE_READ_BYTES bytes from FILE
         and zero the final PAGE_ZERO_BYTES bytes. */
      size_t page_read_bytes = read_bytes < PGSIZE ? read_bytes : PGSIZE;
c002d41c:	8b 45 14             	mov    0x14(%ebp),%eax
c002d41f:	3d 00 10 00 00       	cmp    $0x1000,%eax
c002d424:	76 05                	jbe    c002d42b <load_segment+0xc3>
c002d426:	b8 00 10 00 00       	mov    $0x1000,%eax
c002d42b:	89 45 f4             	mov    %eax,-0xc(%ebp)
      size_t page_zero_bytes = PGSIZE - page_read_bytes;
c002d42e:	b8 00 10 00 00       	mov    $0x1000,%eax
c002d433:	2b 45 f4             	sub    -0xc(%ebp),%eax
c002d436:	89 45 f0             	mov    %eax,-0x10(%ebp)

      if(!vm_supt_install_filesys(cur_thread->supt, upage, file, ofs, page_read_bytes, page_zero_bytes, writable))
          return false;
#else
      /* Get a page of memory. */
      uint8_t *kpage = vm_frame_allocate(PAL_USER, upage);
c002d439:	83 ec 0c             	sub    $0xc,%esp
c002d43c:	6a 04                	push   $0x4
c002d43e:	e8 60 69 ff ff       	call   c0023da3 <palloc_get_page>
c002d443:	83 c4 10             	add    $0x10,%esp
c002d446:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if (kpage == NULL)
c002d449:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002d44d:	75 07                	jne    c002d456 <load_segment+0xee>
        return false;
c002d44f:	b0 00                	mov    $0x0,%al
c002d451:	e9 a1 00 00 00       	jmp    c002d4f7 <load_segment+0x18f>

      /* Load this page. */
      if (file_read (file, kpage, page_read_bytes) != (int) page_read_bytes)
c002d456:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d459:	83 ec 04             	sub    $0x4,%esp
c002d45c:	50                   	push   %eax
c002d45d:	ff 75 ec             	pushl  -0x14(%ebp)
c002d460:	ff 75 08             	pushl  0x8(%ebp)
c002d463:	e8 59 2b 00 00       	call   c002ffc1 <file_read>
c002d468:	83 c4 10             	add    $0x10,%esp
c002d46b:	89 c2                	mov    %eax,%edx
c002d46d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d470:	39 c2                	cmp    %eax,%edx
c002d472:	74 12                	je     c002d486 <load_segment+0x11e>
        {
          palloc_free_page (kpage);
c002d474:	83 ec 0c             	sub    $0xc,%esp
c002d477:	ff 75 ec             	pushl  -0x14(%ebp)
c002d47a:	e8 7c 6a ff ff       	call   c0023efb <palloc_free_page>
c002d47f:	83 c4 10             	add    $0x10,%esp
          return false; 
c002d482:	b0 00                	mov    $0x0,%al
c002d484:	eb 71                	jmp    c002d4f7 <load_segment+0x18f>
        }
      memset (kpage + page_read_bytes, 0, page_zero_bytes);
c002d486:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002d489:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d48c:	01 d0                	add    %edx,%eax
c002d48e:	83 ec 04             	sub    $0x4,%esp
c002d491:	ff 75 f0             	pushl  -0x10(%ebp)
c002d494:	6a 00                	push   $0x0
c002d496:	50                   	push   %eax
c002d497:	e8 54 c3 ff ff       	call   c00297f0 <memset>
c002d49c:	83 c4 10             	add    $0x10,%esp

      /* Add the page to the process's address space. */
      if (!install_page (upage, kpage, writable)) 
c002d49f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002d4a3:	83 ec 04             	sub    $0x4,%esp
c002d4a6:	50                   	push   %eax
c002d4a7:	ff 75 ec             	pushl  -0x14(%ebp)
c002d4aa:	ff 75 10             	pushl  0x10(%ebp)
c002d4ad:	e8 db 01 00 00       	call   c002d68d <install_page>
c002d4b2:	83 c4 10             	add    $0x10,%esp
c002d4b5:	83 f0 01             	xor    $0x1,%eax
c002d4b8:	84 c0                	test   %al,%al
c002d4ba:	74 12                	je     c002d4ce <load_segment+0x166>
        {
          palloc_free_page (kpage);
c002d4bc:	83 ec 0c             	sub    $0xc,%esp
c002d4bf:	ff 75 ec             	pushl  -0x14(%ebp)
c002d4c2:	e8 34 6a ff ff       	call   c0023efb <palloc_free_page>
c002d4c7:	83 c4 10             	add    $0x10,%esp
          return false; 
c002d4ca:	b0 00                	mov    $0x0,%al
c002d4cc:	eb 29                	jmp    c002d4f7 <load_segment+0x18f>
        }
#endif
      /* Advance. */
      read_bytes -= page_read_bytes;
c002d4ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d4d1:	29 45 14             	sub    %eax,0x14(%ebp)
      zero_bytes -= page_zero_bytes;
c002d4d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002d4d7:	29 45 18             	sub    %eax,0x18(%ebp)
      upage += PGSIZE;
c002d4da:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  while (read_bytes > 0 || zero_bytes > 0) 
c002d4e1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c002d4e5:	0f 85 31 ff ff ff    	jne    c002d41c <load_segment+0xb4>
c002d4eb:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c002d4ef:	0f 85 27 ff ff ff    	jne    c002d41c <load_segment+0xb4>
#ifdef VM
      ofs += PGSIZE;
#endif
    }
  return true;
c002d4f5:	b0 01                	mov    $0x1,%al
}
c002d4f7:	c9                   	leave  
c002d4f8:	c3                   	ret    

c002d4f9 <push_args>:

static 
void push_args(void** esp, const int argc, const char *argv[]) {
c002d4f9:	55                   	push   %ebp
c002d4fa:	89 e5                	mov    %esp,%ebp
c002d4fc:	81 ec 18 01 00 00    	sub    $0x118,%esp
  // highlight: Do the argument setup described in 4.5.1, 
  //            push arg string, split arg , push arg pointers, fake return address pointer
  //      note: the stack should be pushed from top to bottom because of the layout
  // push tokens from back and get pointers
  uint32_t *argv_ptrs[64];
  int i = 0, strlength = 0;
c002d502:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002d509:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  for (i = 0; i < argc; i++) {
c002d510:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002d517:	eb 6b                	jmp    c002d584 <push_args+0x8b>
    strlength = strlen(argv[i]) + 1;
c002d519:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d51c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002d523:	8b 45 10             	mov    0x10(%ebp),%eax
c002d526:	01 d0                	add    %edx,%eax
c002d528:	8b 00                	mov    (%eax),%eax
c002d52a:	83 ec 0c             	sub    $0xc,%esp
c002d52d:	50                   	push   %eax
c002d52e:	e8 16 c3 ff ff       	call   c0029849 <strlen>
c002d533:	83 c4 10             	add    $0x10,%esp
c002d536:	40                   	inc    %eax
c002d537:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *esp -= strlength;
c002d53a:	8b 45 08             	mov    0x8(%ebp),%eax
c002d53d:	8b 00                	mov    (%eax),%eax
c002d53f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002d542:	f7 da                	neg    %edx
c002d544:	01 c2                	add    %eax,%edx
c002d546:	8b 45 08             	mov    0x8(%ebp),%eax
c002d549:	89 10                	mov    %edx,(%eax)
    memcpy(*esp, argv[i], strlength);
c002d54b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c002d54e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d551:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002d558:	8b 45 10             	mov    0x10(%ebp),%eax
c002d55b:	01 d0                	add    %edx,%eax
c002d55d:	8b 10                	mov    (%eax),%edx
c002d55f:	8b 45 08             	mov    0x8(%ebp),%eax
c002d562:	8b 00                	mov    (%eax),%eax
c002d564:	83 ec 04             	sub    $0x4,%esp
c002d567:	51                   	push   %ecx
c002d568:	52                   	push   %edx
c002d569:	50                   	push   %eax
c002d56a:	e8 7b bc ff ff       	call   c00291ea <memcpy>
c002d56f:	83 c4 10             	add    $0x10,%esp
    argv_ptrs[i] = *esp;
c002d572:	8b 45 08             	mov    0x8(%ebp),%eax
c002d575:	8b 10                	mov    (%eax),%edx
c002d577:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d57a:	89 94 85 f0 fe ff ff 	mov    %edx,-0x110(%ebp,%eax,4)
  for (i = 0; i < argc; i++) {
c002d581:	ff 45 f4             	incl   -0xc(%ebp)
c002d584:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d587:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002d58a:	7c 8d                	jl     c002d519 <push_args+0x20>
  }
  // align
  //*esp -= 4 - (strlength % 4);
  *esp=(void*)((unsigned int)(*esp)&0xfffffffc);
c002d58c:	8b 45 08             	mov    0x8(%ebp),%eax
c002d58f:	8b 00                	mov    (%eax),%eax
c002d591:	83 e0 fc             	and    $0xfffffffc,%eax
c002d594:	89 c2                	mov    %eax,%edx
c002d596:	8b 45 08             	mov    0x8(%ebp),%eax
c002d599:	89 10                	mov    %edx,(%eax)
  // push pointers from back
  // push NULL pointer for argv[argc]
  *esp -= 4;
c002d59b:	8b 45 08             	mov    0x8(%ebp),%eax
c002d59e:	8b 00                	mov    (%eax),%eax
c002d5a0:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d5a3:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5a6:	89 10                	mov    %edx,(%eax)
  *(uint32_t *) *esp = (uint32_t) NULL;
c002d5a8:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5ab:	8b 00                	mov    (%eax),%eax
c002d5ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  // push argvs
  for (i = argc - 1; i >= 0; i--) {
c002d5b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d5b6:	48                   	dec    %eax
c002d5b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002d5ba:	eb 21                	jmp    c002d5dd <push_args+0xe4>
    *esp -= 4;
c002d5bc:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5bf:	8b 00                	mov    (%eax),%eax
c002d5c1:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d5c4:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5c7:	89 10                	mov    %edx,(%eax)
    *(uint32_t *) *esp = (uint32_t *) argv_ptrs[i];
c002d5c9:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5cc:	8b 00                	mov    (%eax),%eax
c002d5ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002d5d1:	8b 94 95 f0 fe ff ff 	mov    -0x110(%ebp,%edx,4),%edx
c002d5d8:	89 10                	mov    %edx,(%eax)
  for (i = argc - 1; i >= 0; i--) {
c002d5da:	ff 4d f4             	decl   -0xc(%ebp)
c002d5dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002d5e1:	79 d9                	jns    c002d5bc <push_args+0xc3>
  }
  // push argv
  // * (uint32_t *) (*esp - 4) = *(uint32_t *) esp;
  // *esp -= 4;
  *esp -= 4;
c002d5e3:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5e6:	8b 00                	mov    (%eax),%eax
c002d5e8:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d5eb:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5ee:	89 10                	mov    %edx,(%eax)
  *((void**) *esp) = (*esp + 4);
c002d5f0:	8b 45 08             	mov    0x8(%ebp),%eax
c002d5f3:	8b 00                	mov    (%eax),%eax
c002d5f5:	8b 55 08             	mov    0x8(%ebp),%edx
c002d5f8:	8b 12                	mov    (%edx),%edx
c002d5fa:	83 c2 04             	add    $0x4,%edx
c002d5fd:	89 10                	mov    %edx,(%eax)
  
  // push argc
  *esp -= 4;
c002d5ff:	8b 45 08             	mov    0x8(%ebp),%eax
c002d602:	8b 00                	mov    (%eax),%eax
c002d604:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d607:	8b 45 08             	mov    0x8(%ebp),%eax
c002d60a:	89 10                	mov    %edx,(%eax)
  * (int *) *esp = argc;
c002d60c:	8b 45 08             	mov    0x8(%ebp),%eax
c002d60f:	8b 00                	mov    (%eax),%eax
c002d611:	8b 55 0c             	mov    0xc(%ebp),%edx
c002d614:	89 10                	mov    %edx,(%eax)
  // push return addr
  *esp -= 4;
c002d616:	8b 45 08             	mov    0x8(%ebp),%eax
c002d619:	8b 00                	mov    (%eax),%eax
c002d61b:	8d 50 fc             	lea    -0x4(%eax),%edx
c002d61e:	8b 45 08             	mov    0x8(%ebp),%eax
c002d621:	89 10                	mov    %edx,(%eax)
  *((uint32_t*) *esp) = (uint32_t) NULL;
c002d623:	8b 45 08             	mov    0x8(%ebp),%eax
c002d626:	8b 00                	mov    (%eax),%eax
c002d628:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c002d62e:	90                   	nop
c002d62f:	c9                   	leave  
c002d630:	c3                   	ret    

c002d631 <setup_stack>:

/* Create a minimal stack by mapping a zeroed page at the top of
   user virtual memory. */
static bool
setup_stack (void **esp) 
{
c002d631:	55                   	push   %ebp
c002d632:	89 e5                	mov    %esp,%ebp
c002d634:	83 ec 18             	sub    $0x18,%esp
  uint8_t *kpage;
  bool success = false;
c002d637:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

  kpage = vm_frame_allocate (PAL_USER | PAL_ZERO, PHYS_BASE-PGSIZE);  // get the page for stack
c002d63b:	83 ec 0c             	sub    $0xc,%esp
c002d63e:	6a 06                	push   $0x6
c002d640:	e8 5e 67 ff ff       	call   c0023da3 <palloc_get_page>
c002d645:	83 c4 10             	add    $0x10,%esp
c002d648:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (kpage != NULL) 
c002d64b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002d64f:	74 37                	je     c002d688 <setup_stack+0x57>
    {
      success = install_page (((uint8_t *) PHYS_BASE) - PGSIZE, kpage, true); // map the page
c002d651:	83 ec 04             	sub    $0x4,%esp
c002d654:	6a 01                	push   $0x1
c002d656:	ff 75 f0             	pushl  -0x10(%ebp)
c002d659:	68 00 f0 ff bf       	push   $0xbffff000
c002d65e:	e8 2a 00 00 00       	call   c002d68d <install_page>
c002d663:	83 c4 10             	add    $0x10,%esp
c002d666:	88 45 f7             	mov    %al,-0x9(%ebp)
      if (success) {
c002d669:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c002d66d:	74 0b                	je     c002d67a <setup_stack+0x49>
        *esp = PHYS_BASE;     // stack top
c002d66f:	8b 45 08             	mov    0x8(%ebp),%eax
c002d672:	c7 00 00 00 00 c0    	movl   $0xc0000000,(%eax)
c002d678:	eb 0e                	jmp    c002d688 <setup_stack+0x57>
      }
      else
        palloc_free_page (kpage);
c002d67a:	83 ec 0c             	sub    $0xc,%esp
c002d67d:	ff 75 f0             	pushl  -0x10(%ebp)
c002d680:	e8 76 68 ff ff       	call   c0023efb <palloc_free_page>
c002d685:	83 c4 10             	add    $0x10,%esp
    }
  return success;
c002d688:	8a 45 f7             	mov    -0x9(%ebp),%al
}
c002d68b:	c9                   	leave  
c002d68c:	c3                   	ret    

c002d68d <install_page>:
   with palloc_get_page().
   Returns true on success, false if UPAGE is already mapped or
   if memory allocation fails. */
static bool
install_page (void *upage, void *kpage, bool writable)
{
c002d68d:	55                   	push   %ebp
c002d68e:	89 e5                	mov    %esp,%ebp
c002d690:	83 ec 28             	sub    $0x28,%esp
c002d693:	8b 45 10             	mov    0x10(%ebp),%eax
c002d696:	88 45 e4             	mov    %al,-0x1c(%ebp)
  struct thread *t = thread_current ();
c002d699:	e8 0a 38 ff ff       	call   c0020ea8 <thread_current>
c002d69e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bool success = (pagedir_get_page (t->pagedir, upage) == NULL);
c002d6a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d6a4:	8b 40 30             	mov    0x30(%eax),%eax
c002d6a7:	83 ec 08             	sub    $0x8,%esp
c002d6aa:	ff 75 08             	pushl  0x8(%ebp)
c002d6ad:	50                   	push   %eax
c002d6ae:	e8 bf 05 00 00       	call   c002dc72 <pagedir_get_page>
c002d6b3:	83 c4 10             	add    $0x10,%esp
c002d6b6:	85 c0                	test   %eax,%eax
c002d6b8:	0f 94 c0             	sete   %al
c002d6bb:	88 45 f3             	mov    %al,-0xd(%ebp)
  success = success && (pagedir_set_page (t->pagedir, upage, kpage, writable));
c002d6be:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c002d6c2:	74 25                	je     c002d6e9 <install_page+0x5c>
c002d6c4:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c002d6c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d6cb:	8b 40 30             	mov    0x30(%eax),%eax
c002d6ce:	52                   	push   %edx
c002d6cf:	ff 75 0c             	pushl  0xc(%ebp)
c002d6d2:	ff 75 08             	pushl  0x8(%ebp)
c002d6d5:	50                   	push   %eax
c002d6d6:	e8 2e 04 00 00       	call   c002db09 <pagedir_set_page>
c002d6db:	83 c4 10             	add    $0x10,%esp
c002d6de:	84 c0                	test   %al,%al
c002d6e0:	74 07                	je     c002d6e9 <install_page+0x5c>
c002d6e2:	b8 01 00 00 00       	mov    $0x1,%eax
c002d6e7:	eb 05                	jmp    c002d6ee <install_page+0x61>
c002d6e9:	b8 00 00 00 00       	mov    $0x0,%eax
c002d6ee:	88 45 f3             	mov    %al,-0xd(%ebp)
c002d6f1:	80 65 f3 01          	andb   $0x1,-0xd(%ebp)
     address, then map our page there. */
#ifdef VM
  success = success && vm_supt_install_frame(t->supt, upage, kpage);
  if(success) vm_frame_unpin(kpage);
#endif
  return success;
c002d6f5:	8a 45 f3             	mov    -0xd(%ebp),%al
c002d6f8:	c9                   	leave  
c002d6f9:	c3                   	ret    

c002d6fa <pg_ofs>:
c002d6fa:	55                   	push   %ebp
c002d6fb:	89 e5                	mov    %esp,%ebp
c002d6fd:	8b 45 08             	mov    0x8(%ebp),%eax
c002d700:	25 ff 0f 00 00       	and    $0xfff,%eax
c002d705:	5d                   	pop    %ebp
c002d706:	c3                   	ret    

c002d707 <is_user_vaddr>:
c002d707:	55                   	push   %ebp
c002d708:	89 e5                	mov    %esp,%ebp
c002d70a:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002d711:	0f 96 c0             	setbe  %al
c002d714:	5d                   	pop    %ebp
c002d715:	c3                   	ret    

c002d716 <is_kernel_vaddr>:
c002d716:	55                   	push   %ebp
c002d717:	89 e5                	mov    %esp,%ebp
c002d719:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002d720:	0f 97 c0             	seta   %al
c002d723:	5d                   	pop    %ebp
c002d724:	c3                   	ret    

c002d725 <ptov>:
c002d725:	55                   	push   %ebp
c002d726:	89 e5                	mov    %esp,%ebp
c002d728:	83 ec 08             	sub    $0x8,%esp
c002d72b:	8b 45 08             	mov    0x8(%ebp),%eax
c002d72e:	3d ff ff ff bf       	cmp    $0xbfffffff,%eax
c002d733:	76 1e                	jbe    c002d753 <ptov+0x2e>
c002d735:	83 ec 0c             	sub    $0xc,%esp
c002d738:	68 0c 56 03 c0       	push   $0xc003560c
c002d73d:	68 27 56 03 c0       	push   $0xc0035627
c002d742:	68 b8 57 03 c0       	push   $0xc00357b8
c002d747:	6a 4a                	push   $0x4a
c002d749:	68 3e 56 03 c0       	push   $0xc003563e
c002d74e:	e8 d7 cd ff ff       	call   c002a52a <debug_panic>
c002d753:	8b 45 08             	mov    0x8(%ebp),%eax
c002d756:	2d 00 00 00 40       	sub    $0x40000000,%eax
c002d75b:	c9                   	leave  
c002d75c:	c3                   	ret    

c002d75d <vtop>:
c002d75d:	55                   	push   %ebp
c002d75e:	89 e5                	mov    %esp,%ebp
c002d760:	83 ec 08             	sub    $0x8,%esp
c002d763:	ff 75 08             	pushl  0x8(%ebp)
c002d766:	e8 ab ff ff ff       	call   c002d716 <is_kernel_vaddr>
c002d76b:	83 c4 04             	add    $0x4,%esp
c002d76e:	84 c0                	test   %al,%al
c002d770:	75 1e                	jne    c002d790 <vtop+0x33>
c002d772:	83 ec 0c             	sub    $0xc,%esp
c002d775:	68 54 56 03 c0       	push   $0xc0035654
c002d77a:	68 27 56 03 c0       	push   $0xc0035627
c002d77f:	68 d8 57 03 c0       	push   $0xc00357d8
c002d784:	6a 54                	push   $0x54
c002d786:	68 3e 56 03 c0       	push   $0xc003563e
c002d78b:	e8 9a cd ff ff       	call   c002a52a <debug_panic>
c002d790:	8b 45 08             	mov    0x8(%ebp),%eax
c002d793:	05 00 00 00 40       	add    $0x40000000,%eax
c002d798:	c9                   	leave  
c002d799:	c3                   	ret    

c002d79a <pt_no>:
c002d79a:	55                   	push   %ebp
c002d79b:	89 e5                	mov    %esp,%ebp
c002d79d:	8b 45 08             	mov    0x8(%ebp),%eax
c002d7a0:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c002d7a5:	c1 e8 0c             	shr    $0xc,%eax
c002d7a8:	5d                   	pop    %ebp
c002d7a9:	c3                   	ret    

c002d7aa <pd_no>:
c002d7aa:	55                   	push   %ebp
c002d7ab:	89 e5                	mov    %esp,%ebp
c002d7ad:	8b 45 08             	mov    0x8(%ebp),%eax
c002d7b0:	c1 e8 16             	shr    $0x16,%eax
c002d7b3:	5d                   	pop    %ebp
c002d7b4:	c3                   	ret    

c002d7b5 <pde_create>:
c002d7b5:	55                   	push   %ebp
c002d7b6:	89 e5                	mov    %esp,%ebp
c002d7b8:	83 ec 08             	sub    $0x8,%esp
c002d7bb:	ff 75 08             	pushl  0x8(%ebp)
c002d7be:	e8 37 ff ff ff       	call   c002d6fa <pg_ofs>
c002d7c3:	83 c4 04             	add    $0x4,%esp
c002d7c6:	85 c0                	test   %eax,%eax
c002d7c8:	74 1e                	je     c002d7e8 <pde_create+0x33>
c002d7ca:	83 ec 0c             	sub    $0xc,%esp
c002d7cd:	68 6c 56 03 c0       	push   $0xc003566c
c002d7d2:	68 27 56 03 c0       	push   $0xc0035627
c002d7d7:	68 cc 57 03 c0       	push   $0xc00357cc
c002d7dc:	6a 48                	push   $0x48
c002d7de:	68 7d 56 03 c0       	push   $0xc003567d
c002d7e3:	e8 42 cd ff ff       	call   c002a52a <debug_panic>
c002d7e8:	83 ec 0c             	sub    $0xc,%esp
c002d7eb:	ff 75 08             	pushl  0x8(%ebp)
c002d7ee:	e8 6a ff ff ff       	call   c002d75d <vtop>
c002d7f3:	83 c4 10             	add    $0x10,%esp
c002d7f6:	83 c8 07             	or     $0x7,%eax
c002d7f9:	c9                   	leave  
c002d7fa:	c3                   	ret    

c002d7fb <pde_get_pt>:
c002d7fb:	55                   	push   %ebp
c002d7fc:	89 e5                	mov    %esp,%ebp
c002d7fe:	83 ec 08             	sub    $0x8,%esp
c002d801:	8b 45 08             	mov    0x8(%ebp),%eax
c002d804:	83 e0 01             	and    $0x1,%eax
c002d807:	85 c0                	test   %eax,%eax
c002d809:	75 1e                	jne    c002d829 <pde_get_pt+0x2e>
c002d80b:	83 ec 0c             	sub    $0xc,%esp
c002d80e:	68 91 56 03 c0       	push   $0xc0035691
c002d813:	68 27 56 03 c0       	push   $0xc0035627
c002d818:	68 ac 57 03 c0       	push   $0xc00357ac
c002d81d:	6a 4f                	push   $0x4f
c002d81f:	68 7d 56 03 c0       	push   $0xc003567d
c002d824:	e8 01 cd ff ff       	call   c002a52a <debug_panic>
c002d829:	8b 45 08             	mov    0x8(%ebp),%eax
c002d82c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d831:	83 ec 0c             	sub    $0xc,%esp
c002d834:	50                   	push   %eax
c002d835:	e8 eb fe ff ff       	call   c002d725 <ptov>
c002d83a:	83 c4 10             	add    $0x10,%esp
c002d83d:	c9                   	leave  
c002d83e:	c3                   	ret    

c002d83f <pte_create_kernel>:
c002d83f:	55                   	push   %ebp
c002d840:	89 e5                	mov    %esp,%ebp
c002d842:	83 ec 18             	sub    $0x18,%esp
c002d845:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d848:	88 45 f4             	mov    %al,-0xc(%ebp)
c002d84b:	ff 75 08             	pushl  0x8(%ebp)
c002d84e:	e8 a7 fe ff ff       	call   c002d6fa <pg_ofs>
c002d853:	83 c4 04             	add    $0x4,%esp
c002d856:	85 c0                	test   %eax,%eax
c002d858:	74 1e                	je     c002d878 <pte_create_kernel+0x39>
c002d85a:	83 ec 0c             	sub    $0xc,%esp
c002d85d:	68 9d 56 03 c0       	push   $0xc003569d
c002d862:	68 27 56 03 c0       	push   $0xc0035627
c002d867:	68 f4 57 03 c0       	push   $0xc00357f4
c002d86c:	6a 58                	push   $0x58
c002d86e:	68 7d 56 03 c0       	push   $0xc003567d
c002d873:	e8 b2 cc ff ff       	call   c002a52a <debug_panic>
c002d878:	83 ec 0c             	sub    $0xc,%esp
c002d87b:	ff 75 08             	pushl  0x8(%ebp)
c002d87e:	e8 da fe ff ff       	call   c002d75d <vtop>
c002d883:	83 c4 10             	add    $0x10,%esp
c002d886:	89 c2                	mov    %eax,%edx
c002d888:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c002d88c:	74 07                	je     c002d895 <pte_create_kernel+0x56>
c002d88e:	b8 02 00 00 00       	mov    $0x2,%eax
c002d893:	eb 05                	jmp    c002d89a <pte_create_kernel+0x5b>
c002d895:	b8 00 00 00 00       	mov    $0x0,%eax
c002d89a:	09 d0                	or     %edx,%eax
c002d89c:	83 c8 01             	or     $0x1,%eax
c002d89f:	c9                   	leave  
c002d8a0:	c3                   	ret    

c002d8a1 <pte_create_user>:
c002d8a1:	55                   	push   %ebp
c002d8a2:	89 e5                	mov    %esp,%ebp
c002d8a4:	83 ec 18             	sub    $0x18,%esp
c002d8a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c002d8aa:	88 45 f4             	mov    %al,-0xc(%ebp)
c002d8ad:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c002d8b1:	83 ec 08             	sub    $0x8,%esp
c002d8b4:	50                   	push   %eax
c002d8b5:	ff 75 08             	pushl  0x8(%ebp)
c002d8b8:	e8 82 ff ff ff       	call   c002d83f <pte_create_kernel>
c002d8bd:	83 c4 10             	add    $0x10,%esp
c002d8c0:	83 c8 04             	or     $0x4,%eax
c002d8c3:	c9                   	leave  
c002d8c4:	c3                   	ret    

c002d8c5 <pte_get_page>:
c002d8c5:	55                   	push   %ebp
c002d8c6:	89 e5                	mov    %esp,%ebp
c002d8c8:	83 ec 08             	sub    $0x8,%esp
c002d8cb:	8b 45 08             	mov    0x8(%ebp),%eax
c002d8ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c002d8d3:	83 ec 0c             	sub    $0xc,%esp
c002d8d6:	50                   	push   %eax
c002d8d7:	e8 49 fe ff ff       	call   c002d725 <ptov>
c002d8dc:	83 c4 10             	add    $0x10,%esp
c002d8df:	c9                   	leave  
c002d8e0:	c3                   	ret    

c002d8e1 <pagedir_create>:
c002d8e1:	55                   	push   %ebp
c002d8e2:	89 e5                	mov    %esp,%ebp
c002d8e4:	83 ec 18             	sub    $0x18,%esp
c002d8e7:	83 ec 0c             	sub    $0xc,%esp
c002d8ea:	6a 00                	push   $0x0
c002d8ec:	e8 b2 64 ff ff       	call   c0023da3 <palloc_get_page>
c002d8f1:	83 c4 10             	add    $0x10,%esp
c002d8f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002d8f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002d8fb:	74 19                	je     c002d916 <pagedir_create+0x35>
c002d8fd:	a1 78 61 04 c0       	mov    0xc0046178,%eax
c002d902:	83 ec 04             	sub    $0x4,%esp
c002d905:	68 00 10 00 00       	push   $0x1000
c002d90a:	50                   	push   %eax
c002d90b:	ff 75 f4             	pushl  -0xc(%ebp)
c002d90e:	e8 d7 b8 ff ff       	call   c00291ea <memcpy>
c002d913:	83 c4 10             	add    $0x10,%esp
c002d916:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d919:	c9                   	leave  
c002d91a:	c3                   	ret    

c002d91b <pagedir_destroy>:
c002d91b:	55                   	push   %ebp
c002d91c:	89 e5                	mov    %esp,%ebp
c002d91e:	83 ec 18             	sub    $0x18,%esp
c002d921:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002d925:	0f 84 d9 00 00 00    	je     c002da04 <pagedir_destroy+0xe9>
c002d92b:	a1 78 61 04 c0       	mov    0xc0046178,%eax
c002d930:	39 45 08             	cmp    %eax,0x8(%ebp)
c002d933:	75 1e                	jne    c002d953 <pagedir_destroy+0x38>
c002d935:	83 ec 0c             	sub    $0xc,%esp
c002d938:	68 b0 56 03 c0       	push   $0xc00356b0
c002d93d:	68 27 56 03 c0       	push   $0xc0035627
c002d942:	68 9c 57 03 c0       	push   $0xc003579c
c002d947:	6a 23                	push   $0x23
c002d949:	68 c4 56 03 c0       	push   $0xc00356c4
c002d94e:	e8 d7 cb ff ff       	call   c002a52a <debug_panic>
c002d953:	8b 45 08             	mov    0x8(%ebp),%eax
c002d956:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002d959:	eb 74                	jmp    c002d9cf <pagedir_destroy+0xb4>
c002d95b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d95e:	8b 00                	mov    (%eax),%eax
c002d960:	83 e0 01             	and    $0x1,%eax
c002d963:	85 c0                	test   %eax,%eax
c002d965:	74 64                	je     c002d9cb <pagedir_destroy+0xb0>
c002d967:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002d96a:	8b 00                	mov    (%eax),%eax
c002d96c:	83 ec 0c             	sub    $0xc,%esp
c002d96f:	50                   	push   %eax
c002d970:	e8 86 fe ff ff       	call   c002d7fb <pde_get_pt>
c002d975:	83 c4 10             	add    $0x10,%esp
c002d978:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002d97b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002d97e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002d981:	eb 2d                	jmp    c002d9b0 <pagedir_destroy+0x95>
c002d983:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002d986:	8b 00                	mov    (%eax),%eax
c002d988:	83 e0 01             	and    $0x1,%eax
c002d98b:	85 c0                	test   %eax,%eax
c002d98d:	74 1d                	je     c002d9ac <pagedir_destroy+0x91>
c002d98f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002d992:	8b 00                	mov    (%eax),%eax
c002d994:	83 ec 0c             	sub    $0xc,%esp
c002d997:	50                   	push   %eax
c002d998:	e8 28 ff ff ff       	call   c002d8c5 <pte_get_page>
c002d99d:	83 c4 10             	add    $0x10,%esp
c002d9a0:	83 ec 0c             	sub    $0xc,%esp
c002d9a3:	50                   	push   %eax
c002d9a4:	e8 52 65 ff ff       	call   c0023efb <palloc_free_page>
c002d9a9:	83 c4 10             	add    $0x10,%esp
c002d9ac:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
c002d9b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002d9b3:	05 00 10 00 00       	add    $0x1000,%eax
c002d9b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c002d9bb:	77 c6                	ja     c002d983 <pagedir_destroy+0x68>
c002d9bd:	83 ec 0c             	sub    $0xc,%esp
c002d9c0:	ff 75 ec             	pushl  -0x14(%ebp)
c002d9c3:	e8 33 65 ff ff       	call   c0023efb <palloc_free_page>
c002d9c8:	83 c4 10             	add    $0x10,%esp
c002d9cb:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
c002d9cf:	83 ec 0c             	sub    $0xc,%esp
c002d9d2:	68 00 00 00 c0       	push   $0xc0000000
c002d9d7:	e8 ce fd ff ff       	call   c002d7aa <pd_no>
c002d9dc:	83 c4 10             	add    $0x10,%esp
c002d9df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002d9e6:	8b 45 08             	mov    0x8(%ebp),%eax
c002d9e9:	01 d0                	add    %edx,%eax
c002d9eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002d9ee:	0f 87 67 ff ff ff    	ja     c002d95b <pagedir_destroy+0x40>
c002d9f4:	83 ec 0c             	sub    $0xc,%esp
c002d9f7:	ff 75 08             	pushl  0x8(%ebp)
c002d9fa:	e8 fc 64 ff ff       	call   c0023efb <palloc_free_page>
c002d9ff:	83 c4 10             	add    $0x10,%esp
c002da02:	eb 01                	jmp    c002da05 <pagedir_destroy+0xea>
c002da04:	90                   	nop
c002da05:	c9                   	leave  
c002da06:	c3                   	ret    

c002da07 <lookup_page>:
c002da07:	55                   	push   %ebp
c002da08:	89 e5                	mov    %esp,%ebp
c002da0a:	83 ec 28             	sub    $0x28,%esp
c002da0d:	8b 45 10             	mov    0x10(%ebp),%eax
c002da10:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002da13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002da17:	75 1e                	jne    c002da37 <lookup_page+0x30>
c002da19:	83 ec 0c             	sub    $0xc,%esp
c002da1c:	68 dd 56 03 c0       	push   $0xc00356dd
c002da21:	68 27 56 03 c0       	push   $0xc0035627
c002da26:	68 c0 57 03 c0       	push   $0xc00357c0
c002da2b:	6a 3d                	push   $0x3d
c002da2d:	68 c4 56 03 c0       	push   $0xc00356c4
c002da32:	e8 f3 ca ff ff       	call   c002a52a <debug_panic>
c002da37:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002da3b:	83 f0 01             	xor    $0x1,%eax
c002da3e:	84 c0                	test   %al,%al
c002da40:	75 30                	jne    c002da72 <lookup_page+0x6b>
c002da42:	83 ec 0c             	sub    $0xc,%esp
c002da45:	ff 75 0c             	pushl  0xc(%ebp)
c002da48:	e8 ba fc ff ff       	call   c002d707 <is_user_vaddr>
c002da4d:	83 c4 10             	add    $0x10,%esp
c002da50:	84 c0                	test   %al,%al
c002da52:	75 1e                	jne    c002da72 <lookup_page+0x6b>
c002da54:	83 ec 0c             	sub    $0xc,%esp
c002da57:	68 e8 56 03 c0       	push   $0xc00356e8
c002da5c:	68 27 56 03 c0       	push   $0xc0035627
c002da61:	68 c0 57 03 c0       	push   $0xc00357c0
c002da66:	6a 40                	push   $0x40
c002da68:	68 c4 56 03 c0       	push   $0xc00356c4
c002da6d:	e8 b8 ca ff ff       	call   c002a52a <debug_panic>
c002da72:	83 ec 0c             	sub    $0xc,%esp
c002da75:	ff 75 0c             	pushl  0xc(%ebp)
c002da78:	e8 2d fd ff ff       	call   c002d7aa <pd_no>
c002da7d:	83 c4 10             	add    $0x10,%esp
c002da80:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002da87:	8b 45 08             	mov    0x8(%ebp),%eax
c002da8a:	01 d0                	add    %edx,%eax
c002da8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002da8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002da92:	8b 00                	mov    (%eax),%eax
c002da94:	85 c0                	test   %eax,%eax
c002da96:	75 41                	jne    c002dad9 <lookup_page+0xd2>
c002da98:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c002da9c:	74 34                	je     c002dad2 <lookup_page+0xcb>
c002da9e:	83 ec 0c             	sub    $0xc,%esp
c002daa1:	6a 02                	push   $0x2
c002daa3:	e8 fb 62 ff ff       	call   c0023da3 <palloc_get_page>
c002daa8:	83 c4 10             	add    $0x10,%esp
c002daab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002daae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002dab2:	75 07                	jne    c002dabb <lookup_page+0xb4>
c002dab4:	b8 00 00 00 00       	mov    $0x0,%eax
c002dab9:	eb 4c                	jmp    c002db07 <lookup_page+0x100>
c002dabb:	83 ec 0c             	sub    $0xc,%esp
c002dabe:	ff 75 f0             	pushl  -0x10(%ebp)
c002dac1:	e8 ef fc ff ff       	call   c002d7b5 <pde_create>
c002dac6:	83 c4 10             	add    $0x10,%esp
c002dac9:	89 c2                	mov    %eax,%edx
c002dacb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dace:	89 10                	mov    %edx,(%eax)
c002dad0:	eb 07                	jmp    c002dad9 <lookup_page+0xd2>
c002dad2:	b8 00 00 00 00       	mov    $0x0,%eax
c002dad7:	eb 2e                	jmp    c002db07 <lookup_page+0x100>
c002dad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dadc:	8b 00                	mov    (%eax),%eax
c002dade:	83 ec 0c             	sub    $0xc,%esp
c002dae1:	50                   	push   %eax
c002dae2:	e8 14 fd ff ff       	call   c002d7fb <pde_get_pt>
c002dae7:	83 c4 10             	add    $0x10,%esp
c002daea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002daed:	83 ec 0c             	sub    $0xc,%esp
c002daf0:	ff 75 0c             	pushl  0xc(%ebp)
c002daf3:	e8 a2 fc ff ff       	call   c002d79a <pt_no>
c002daf8:	83 c4 10             	add    $0x10,%esp
c002dafb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c002db02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002db05:	01 d0                	add    %edx,%eax
c002db07:	c9                   	leave  
c002db08:	c3                   	ret    

c002db09 <pagedir_set_page>:
c002db09:	55                   	push   %ebp
c002db0a:	89 e5                	mov    %esp,%ebp
c002db0c:	83 ec 28             	sub    $0x28,%esp
c002db0f:	8b 45 14             	mov    0x14(%ebp),%eax
c002db12:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002db15:	ff 75 0c             	pushl  0xc(%ebp)
c002db18:	e8 dd fb ff ff       	call   c002d6fa <pg_ofs>
c002db1d:	83 c4 04             	add    $0x4,%esp
c002db20:	85 c0                	test   %eax,%eax
c002db22:	74 1e                	je     c002db42 <pagedir_set_page+0x39>
c002db24:	83 ec 0c             	sub    $0xc,%esp
c002db27:	68 09 57 03 c0       	push   $0xc0035709
c002db2c:	68 27 56 03 c0       	push   $0xc0035627
c002db31:	68 e0 57 03 c0       	push   $0xc00357e0
c002db36:	6a 67                	push   $0x67
c002db38:	68 c4 56 03 c0       	push   $0xc00356c4
c002db3d:	e8 e8 c9 ff ff       	call   c002a52a <debug_panic>
c002db42:	83 ec 0c             	sub    $0xc,%esp
c002db45:	ff 75 10             	pushl  0x10(%ebp)
c002db48:	e8 ad fb ff ff       	call   c002d6fa <pg_ofs>
c002db4d:	83 c4 10             	add    $0x10,%esp
c002db50:	85 c0                	test   %eax,%eax
c002db52:	74 1e                	je     c002db72 <pagedir_set_page+0x69>
c002db54:	83 ec 0c             	sub    $0xc,%esp
c002db57:	68 1d 57 03 c0       	push   $0xc003571d
c002db5c:	68 27 56 03 c0       	push   $0xc0035627
c002db61:	68 e0 57 03 c0       	push   $0xc00357e0
c002db66:	6a 68                	push   $0x68
c002db68:	68 c4 56 03 c0       	push   $0xc00356c4
c002db6d:	e8 b8 c9 ff ff       	call   c002a52a <debug_panic>
c002db72:	83 ec 0c             	sub    $0xc,%esp
c002db75:	ff 75 0c             	pushl  0xc(%ebp)
c002db78:	e8 8a fb ff ff       	call   c002d707 <is_user_vaddr>
c002db7d:	83 c4 10             	add    $0x10,%esp
c002db80:	84 c0                	test   %al,%al
c002db82:	75 1e                	jne    c002dba2 <pagedir_set_page+0x99>
c002db84:	83 ec 0c             	sub    $0xc,%esp
c002db87:	68 31 57 03 c0       	push   $0xc0035731
c002db8c:	68 27 56 03 c0       	push   $0xc0035627
c002db91:	68 e0 57 03 c0       	push   $0xc00357e0
c002db96:	6a 69                	push   $0x69
c002db98:	68 c4 56 03 c0       	push   $0xc00356c4
c002db9d:	e8 88 c9 ff ff       	call   c002a52a <debug_panic>
c002dba2:	83 ec 0c             	sub    $0xc,%esp
c002dba5:	ff 75 10             	pushl  0x10(%ebp)
c002dba8:	e8 b0 fb ff ff       	call   c002d75d <vtop>
c002dbad:	83 c4 10             	add    $0x10,%esp
c002dbb0:	c1 e8 0c             	shr    $0xc,%eax
c002dbb3:	89 c2                	mov    %eax,%edx
c002dbb5:	a1 7e 01 02 c0       	mov    0xc002017e,%eax
c002dbba:	39 c2                	cmp    %eax,%edx
c002dbbc:	72 1e                	jb     c002dbdc <pagedir_set_page+0xd3>
c002dbbe:	83 ec 0c             	sub    $0xc,%esp
c002dbc1:	68 48 57 03 c0       	push   $0xc0035748
c002dbc6:	68 27 56 03 c0       	push   $0xc0035627
c002dbcb:	68 e0 57 03 c0       	push   $0xc00357e0
c002dbd0:	6a 6a                	push   $0x6a
c002dbd2:	68 c4 56 03 c0       	push   $0xc00356c4
c002dbd7:	e8 4e c9 ff ff       	call   c002a52a <debug_panic>
c002dbdc:	a1 78 61 04 c0       	mov    0xc0046178,%eax
c002dbe1:	39 45 08             	cmp    %eax,0x8(%ebp)
c002dbe4:	75 1e                	jne    c002dc04 <pagedir_set_page+0xfb>
c002dbe6:	83 ec 0c             	sub    $0xc,%esp
c002dbe9:	68 b0 56 03 c0       	push   $0xc00356b0
c002dbee:	68 27 56 03 c0       	push   $0xc0035627
c002dbf3:	68 e0 57 03 c0       	push   $0xc00357e0
c002dbf8:	6a 6b                	push   $0x6b
c002dbfa:	68 c4 56 03 c0       	push   $0xc00356c4
c002dbff:	e8 26 c9 ff ff       	call   c002a52a <debug_panic>
c002dc04:	83 ec 04             	sub    $0x4,%esp
c002dc07:	6a 01                	push   $0x1
c002dc09:	ff 75 0c             	pushl  0xc(%ebp)
c002dc0c:	ff 75 08             	pushl  0x8(%ebp)
c002dc0f:	e8 f3 fd ff ff       	call   c002da07 <lookup_page>
c002dc14:	83 c4 10             	add    $0x10,%esp
c002dc17:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002dc1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002dc1e:	74 4b                	je     c002dc6b <pagedir_set_page+0x162>
c002dc20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dc23:	8b 00                	mov    (%eax),%eax
c002dc25:	83 e0 01             	and    $0x1,%eax
c002dc28:	85 c0                	test   %eax,%eax
c002dc2a:	74 1e                	je     c002dc4a <pagedir_set_page+0x141>
c002dc2c:	83 ec 0c             	sub    $0xc,%esp
c002dc2f:	68 71 57 03 c0       	push   $0xc0035771
c002dc34:	68 27 56 03 c0       	push   $0xc0035627
c002dc39:	68 e0 57 03 c0       	push   $0xc00357e0
c002dc3e:	6a 71                	push   $0x71
c002dc40:	68 c4 56 03 c0       	push   $0xc00356c4
c002dc45:	e8 e0 c8 ff ff       	call   c002a52a <debug_panic>
c002dc4a:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c002dc4e:	83 ec 08             	sub    $0x8,%esp
c002dc51:	50                   	push   %eax
c002dc52:	ff 75 10             	pushl  0x10(%ebp)
c002dc55:	e8 47 fc ff ff       	call   c002d8a1 <pte_create_user>
c002dc5a:	83 c4 10             	add    $0x10,%esp
c002dc5d:	89 c2                	mov    %eax,%edx
c002dc5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dc62:	89 10                	mov    %edx,(%eax)
c002dc64:	b8 01 00 00 00       	mov    $0x1,%eax
c002dc69:	eb 05                	jmp    c002dc70 <pagedir_set_page+0x167>
c002dc6b:	b8 00 00 00 00       	mov    $0x0,%eax
c002dc70:	c9                   	leave  
c002dc71:	c3                   	ret    

c002dc72 <pagedir_get_page>:
c002dc72:	55                   	push   %ebp
c002dc73:	89 e5                	mov    %esp,%ebp
c002dc75:	53                   	push   %ebx
c002dc76:	83 ec 14             	sub    $0x14,%esp
c002dc79:	ff 75 0c             	pushl  0xc(%ebp)
c002dc7c:	e8 86 fa ff ff       	call   c002d707 <is_user_vaddr>
c002dc81:	83 c4 04             	add    $0x4,%esp
c002dc84:	84 c0                	test   %al,%al
c002dc86:	75 21                	jne    c002dca9 <pagedir_get_page+0x37>
c002dc88:	83 ec 0c             	sub    $0xc,%esp
c002dc8b:	68 85 57 03 c0       	push   $0xc0035785
c002dc90:	68 27 56 03 c0       	push   $0xc0035627
c002dc95:	68 08 58 03 c0       	push   $0xc0035808
c002dc9a:	68 82 00 00 00       	push   $0x82
c002dc9f:	68 c4 56 03 c0       	push   $0xc00356c4
c002dca4:	e8 81 c8 ff ff       	call   c002a52a <debug_panic>
c002dca9:	83 ec 04             	sub    $0x4,%esp
c002dcac:	6a 00                	push   $0x0
c002dcae:	ff 75 0c             	pushl  0xc(%ebp)
c002dcb1:	ff 75 08             	pushl  0x8(%ebp)
c002dcb4:	e8 4e fd ff ff       	call   c002da07 <lookup_page>
c002dcb9:	83 c4 10             	add    $0x10,%esp
c002dcbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002dcbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002dcc3:	74 31                	je     c002dcf6 <pagedir_get_page+0x84>
c002dcc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dcc8:	8b 00                	mov    (%eax),%eax
c002dcca:	83 e0 01             	and    $0x1,%eax
c002dccd:	85 c0                	test   %eax,%eax
c002dccf:	74 25                	je     c002dcf6 <pagedir_get_page+0x84>
c002dcd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dcd4:	8b 00                	mov    (%eax),%eax
c002dcd6:	83 ec 0c             	sub    $0xc,%esp
c002dcd9:	50                   	push   %eax
c002dcda:	e8 e6 fb ff ff       	call   c002d8c5 <pte_get_page>
c002dcdf:	83 c4 10             	add    $0x10,%esp
c002dce2:	89 c3                	mov    %eax,%ebx
c002dce4:	83 ec 0c             	sub    $0xc,%esp
c002dce7:	ff 75 0c             	pushl  0xc(%ebp)
c002dcea:	e8 0b fa ff ff       	call   c002d6fa <pg_ofs>
c002dcef:	83 c4 10             	add    $0x10,%esp
c002dcf2:	01 d8                	add    %ebx,%eax
c002dcf4:	eb 05                	jmp    c002dcfb <pagedir_get_page+0x89>
c002dcf6:	b8 00 00 00 00       	mov    $0x0,%eax
c002dcfb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002dcfe:	c9                   	leave  
c002dcff:	c3                   	ret    

c002dd00 <pagedir_clear_page>:
c002dd00:	55                   	push   %ebp
c002dd01:	89 e5                	mov    %esp,%ebp
c002dd03:	83 ec 18             	sub    $0x18,%esp
c002dd06:	ff 75 0c             	pushl  0xc(%ebp)
c002dd09:	e8 ec f9 ff ff       	call   c002d6fa <pg_ofs>
c002dd0e:	83 c4 04             	add    $0x4,%esp
c002dd11:	85 c0                	test   %eax,%eax
c002dd13:	74 21                	je     c002dd36 <pagedir_clear_page+0x36>
c002dd15:	83 ec 0c             	sub    $0xc,%esp
c002dd18:	68 09 57 03 c0       	push   $0xc0035709
c002dd1d:	68 27 56 03 c0       	push   $0xc0035627
c002dd22:	68 1c 58 03 c0       	push   $0xc003581c
c002dd27:	68 94 00 00 00       	push   $0x94
c002dd2c:	68 c4 56 03 c0       	push   $0xc00356c4
c002dd31:	e8 f4 c7 ff ff       	call   c002a52a <debug_panic>
c002dd36:	83 ec 0c             	sub    $0xc,%esp
c002dd39:	ff 75 0c             	pushl  0xc(%ebp)
c002dd3c:	e8 c6 f9 ff ff       	call   c002d707 <is_user_vaddr>
c002dd41:	83 c4 10             	add    $0x10,%esp
c002dd44:	84 c0                	test   %al,%al
c002dd46:	75 21                	jne    c002dd69 <pagedir_clear_page+0x69>
c002dd48:	83 ec 0c             	sub    $0xc,%esp
c002dd4b:	68 31 57 03 c0       	push   $0xc0035731
c002dd50:	68 27 56 03 c0       	push   $0xc0035627
c002dd55:	68 1c 58 03 c0       	push   $0xc003581c
c002dd5a:	68 95 00 00 00       	push   $0x95
c002dd5f:	68 c4 56 03 c0       	push   $0xc00356c4
c002dd64:	e8 c1 c7 ff ff       	call   c002a52a <debug_panic>
c002dd69:	83 ec 04             	sub    $0x4,%esp
c002dd6c:	6a 00                	push   $0x0
c002dd6e:	ff 75 0c             	pushl  0xc(%ebp)
c002dd71:	ff 75 08             	pushl  0x8(%ebp)
c002dd74:	e8 8e fc ff ff       	call   c002da07 <lookup_page>
c002dd79:	83 c4 10             	add    $0x10,%esp
c002dd7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002dd7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002dd83:	74 29                	je     c002ddae <pagedir_clear_page+0xae>
c002dd85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dd88:	8b 00                	mov    (%eax),%eax
c002dd8a:	83 e0 01             	and    $0x1,%eax
c002dd8d:	85 c0                	test   %eax,%eax
c002dd8f:	74 1d                	je     c002ddae <pagedir_clear_page+0xae>
c002dd91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dd94:	8b 00                	mov    (%eax),%eax
c002dd96:	83 e0 fe             	and    $0xfffffffe,%eax
c002dd99:	89 c2                	mov    %eax,%edx
c002dd9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dd9e:	89 10                	mov    %edx,(%eax)
c002dda0:	83 ec 0c             	sub    $0xc,%esp
c002dda3:	ff 75 08             	pushl  0x8(%ebp)
c002dda6:	e8 86 01 00 00       	call   c002df31 <invalidate_pagedir>
c002ddab:	83 c4 10             	add    $0x10,%esp
c002ddae:	90                   	nop
c002ddaf:	c9                   	leave  
c002ddb0:	c3                   	ret    

c002ddb1 <pagedir_is_dirty>:
c002ddb1:	55                   	push   %ebp
c002ddb2:	89 e5                	mov    %esp,%ebp
c002ddb4:	83 ec 18             	sub    $0x18,%esp
c002ddb7:	83 ec 04             	sub    $0x4,%esp
c002ddba:	6a 00                	push   $0x0
c002ddbc:	ff 75 0c             	pushl  0xc(%ebp)
c002ddbf:	ff 75 08             	pushl  0x8(%ebp)
c002ddc2:	e8 40 fc ff ff       	call   c002da07 <lookup_page>
c002ddc7:	83 c4 10             	add    $0x10,%esp
c002ddca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ddcd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002ddd1:	74 13                	je     c002dde6 <pagedir_is_dirty+0x35>
c002ddd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ddd6:	8b 00                	mov    (%eax),%eax
c002ddd8:	83 e0 40             	and    $0x40,%eax
c002dddb:	85 c0                	test   %eax,%eax
c002dddd:	74 07                	je     c002dde6 <pagedir_is_dirty+0x35>
c002dddf:	b8 01 00 00 00       	mov    $0x1,%eax
c002dde4:	eb 05                	jmp    c002ddeb <pagedir_is_dirty+0x3a>
c002dde6:	b8 00 00 00 00       	mov    $0x0,%eax
c002ddeb:	83 e0 01             	and    $0x1,%eax
c002ddee:	c9                   	leave  
c002ddef:	c3                   	ret    

c002ddf0 <pagedir_set_dirty>:
c002ddf0:	55                   	push   %ebp
c002ddf1:	89 e5                	mov    %esp,%ebp
c002ddf3:	83 ec 28             	sub    $0x28,%esp
c002ddf6:	8b 45 10             	mov    0x10(%ebp),%eax
c002ddf9:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002ddfc:	83 ec 04             	sub    $0x4,%esp
c002ddff:	6a 00                	push   $0x0
c002de01:	ff 75 0c             	pushl  0xc(%ebp)
c002de04:	ff 75 08             	pushl  0x8(%ebp)
c002de07:	e8 fb fb ff ff       	call   c002da07 <lookup_page>
c002de0c:	83 c4 10             	add    $0x10,%esp
c002de0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002de12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002de16:	74 34                	je     c002de4c <pagedir_set_dirty+0x5c>
c002de18:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c002de1c:	74 11                	je     c002de2f <pagedir_set_dirty+0x3f>
c002de1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002de21:	8b 00                	mov    (%eax),%eax
c002de23:	83 c8 40             	or     $0x40,%eax
c002de26:	89 c2                	mov    %eax,%edx
c002de28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002de2b:	89 10                	mov    %edx,(%eax)
c002de2d:	eb 1d                	jmp    c002de4c <pagedir_set_dirty+0x5c>
c002de2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002de32:	8b 00                	mov    (%eax),%eax
c002de34:	83 e0 bf             	and    $0xffffffbf,%eax
c002de37:	89 c2                	mov    %eax,%edx
c002de39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002de3c:	89 10                	mov    %edx,(%eax)
c002de3e:	83 ec 0c             	sub    $0xc,%esp
c002de41:	ff 75 08             	pushl  0x8(%ebp)
c002de44:	e8 e8 00 00 00       	call   c002df31 <invalidate_pagedir>
c002de49:	83 c4 10             	add    $0x10,%esp
c002de4c:	90                   	nop
c002de4d:	c9                   	leave  
c002de4e:	c3                   	ret    

c002de4f <pagedir_is_accessed>:
c002de4f:	55                   	push   %ebp
c002de50:	89 e5                	mov    %esp,%ebp
c002de52:	83 ec 18             	sub    $0x18,%esp
c002de55:	83 ec 04             	sub    $0x4,%esp
c002de58:	6a 00                	push   $0x0
c002de5a:	ff 75 0c             	pushl  0xc(%ebp)
c002de5d:	ff 75 08             	pushl  0x8(%ebp)
c002de60:	e8 a2 fb ff ff       	call   c002da07 <lookup_page>
c002de65:	83 c4 10             	add    $0x10,%esp
c002de68:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002de6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002de6f:	74 13                	je     c002de84 <pagedir_is_accessed+0x35>
c002de71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002de74:	8b 00                	mov    (%eax),%eax
c002de76:	83 e0 20             	and    $0x20,%eax
c002de79:	85 c0                	test   %eax,%eax
c002de7b:	74 07                	je     c002de84 <pagedir_is_accessed+0x35>
c002de7d:	b8 01 00 00 00       	mov    $0x1,%eax
c002de82:	eb 05                	jmp    c002de89 <pagedir_is_accessed+0x3a>
c002de84:	b8 00 00 00 00       	mov    $0x0,%eax
c002de89:	83 e0 01             	and    $0x1,%eax
c002de8c:	c9                   	leave  
c002de8d:	c3                   	ret    

c002de8e <pagedir_set_accessed>:
c002de8e:	55                   	push   %ebp
c002de8f:	89 e5                	mov    %esp,%ebp
c002de91:	83 ec 28             	sub    $0x28,%esp
c002de94:	8b 45 10             	mov    0x10(%ebp),%eax
c002de97:	88 45 e4             	mov    %al,-0x1c(%ebp)
c002de9a:	83 ec 04             	sub    $0x4,%esp
c002de9d:	6a 00                	push   $0x0
c002de9f:	ff 75 0c             	pushl  0xc(%ebp)
c002dea2:	ff 75 08             	pushl  0x8(%ebp)
c002dea5:	e8 5d fb ff ff       	call   c002da07 <lookup_page>
c002deaa:	83 c4 10             	add    $0x10,%esp
c002dead:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002deb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002deb4:	74 34                	je     c002deea <pagedir_set_accessed+0x5c>
c002deb6:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c002deba:	74 11                	je     c002decd <pagedir_set_accessed+0x3f>
c002debc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002debf:	8b 00                	mov    (%eax),%eax
c002dec1:	83 c8 20             	or     $0x20,%eax
c002dec4:	89 c2                	mov    %eax,%edx
c002dec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002dec9:	89 10                	mov    %edx,(%eax)
c002decb:	eb 1d                	jmp    c002deea <pagedir_set_accessed+0x5c>
c002decd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ded0:	8b 00                	mov    (%eax),%eax
c002ded2:	83 e0 df             	and    $0xffffffdf,%eax
c002ded5:	89 c2                	mov    %eax,%edx
c002ded7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002deda:	89 10                	mov    %edx,(%eax)
c002dedc:	83 ec 0c             	sub    $0xc,%esp
c002dedf:	ff 75 08             	pushl  0x8(%ebp)
c002dee2:	e8 4a 00 00 00       	call   c002df31 <invalidate_pagedir>
c002dee7:	83 c4 10             	add    $0x10,%esp
c002deea:	90                   	nop
c002deeb:	c9                   	leave  
c002deec:	c3                   	ret    

c002deed <pagedir_activate>:
c002deed:	55                   	push   %ebp
c002deee:	89 e5                	mov    %esp,%ebp
c002def0:	83 ec 08             	sub    $0x8,%esp
c002def3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002def7:	75 08                	jne    c002df01 <pagedir_activate+0x14>
c002def9:	a1 78 61 04 c0       	mov    0xc0046178,%eax
c002defe:	89 45 08             	mov    %eax,0x8(%ebp)
c002df01:	83 ec 0c             	sub    $0xc,%esp
c002df04:	ff 75 08             	pushl  0x8(%ebp)
c002df07:	e8 51 f8 ff ff       	call   c002d75d <vtop>
c002df0c:	83 c4 10             	add    $0x10,%esp
c002df0f:	0f 22 d8             	mov    %eax,%cr3
c002df12:	90                   	nop
c002df13:	c9                   	leave  
c002df14:	c3                   	ret    

c002df15 <active_pd>:
c002df15:	55                   	push   %ebp
c002df16:	89 e5                	mov    %esp,%ebp
c002df18:	83 ec 18             	sub    $0x18,%esp
c002df1b:	0f 20 d8             	mov    %cr3,%eax
c002df1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002df21:	83 ec 0c             	sub    $0xc,%esp
c002df24:	ff 75 f4             	pushl  -0xc(%ebp)
c002df27:	e8 f9 f7 ff ff       	call   c002d725 <ptov>
c002df2c:	83 c4 10             	add    $0x10,%esp
c002df2f:	c9                   	leave  
c002df30:	c3                   	ret    

c002df31 <invalidate_pagedir>:
c002df31:	55                   	push   %ebp
c002df32:	89 e5                	mov    %esp,%ebp
c002df34:	83 ec 08             	sub    $0x8,%esp
c002df37:	e8 d9 ff ff ff       	call   c002df15 <active_pd>
c002df3c:	3b 45 08             	cmp    0x8(%ebp),%eax
c002df3f:	75 0e                	jne    c002df4f <invalidate_pagedir+0x1e>
c002df41:	83 ec 0c             	sub    $0xc,%esp
c002df44:	ff 75 08             	pushl  0x8(%ebp)
c002df47:	e8 a1 ff ff ff       	call   c002deed <pagedir_activate>
c002df4c:	83 c4 10             	add    $0x10,%esp
c002df4f:	90                   	nop
c002df50:	c9                   	leave  
c002df51:	c3                   	ret    

c002df52 <exception_init>:

   Refer to [IA32-v3a] section 5.15 "Exception and Interrupt
   Reference" for a description of each of these exceptions. */
void
exception_init (void) 
{
c002df52:	55                   	push   %ebp
c002df53:	89 e5                	mov    %esp,%ebp
c002df55:	83 ec 08             	sub    $0x8,%esp
  /* These exceptions can be raised explicitly by a user program,
     e.g. via the INT, INT3, INTO, and BOUND instructions.  Thus,
     we set DPL==3, meaning that user programs are allowed to
     invoke them via these instructions. */
  intr_register_int (3, 3, INTR_ON, kill, "#BP Breakpoint Exception");
c002df58:	83 ec 0c             	sub    $0xc,%esp
c002df5b:	68 30 58 03 c0       	push   $0xc0035830
c002df60:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002df65:	6a 01                	push   $0x1
c002df67:	6a 03                	push   $0x3
c002df69:	6a 03                	push   $0x3
c002df6b:	e8 90 40 ff ff       	call   c0022000 <intr_register_int>
c002df70:	83 c4 20             	add    $0x20,%esp
  intr_register_int (4, 3, INTR_ON, kill, "#OF Overflow Exception");
c002df73:	83 ec 0c             	sub    $0xc,%esp
c002df76:	68 49 58 03 c0       	push   $0xc0035849
c002df7b:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002df80:	6a 01                	push   $0x1
c002df82:	6a 03                	push   $0x3
c002df84:	6a 04                	push   $0x4
c002df86:	e8 75 40 ff ff       	call   c0022000 <intr_register_int>
c002df8b:	83 c4 20             	add    $0x20,%esp
  intr_register_int (5, 3, INTR_ON, kill,
c002df8e:	83 ec 0c             	sub    $0xc,%esp
c002df91:	68 60 58 03 c0       	push   $0xc0035860
c002df96:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002df9b:	6a 01                	push   $0x1
c002df9d:	6a 03                	push   $0x3
c002df9f:	6a 05                	push   $0x5
c002dfa1:	e8 5a 40 ff ff       	call   c0022000 <intr_register_int>
c002dfa6:	83 c4 20             	add    $0x20,%esp

  /* These exceptions have DPL==0, preventing user processes from
     invoking them via the INT instruction.  They can still be
     caused indirectly, e.g. #DE can be caused by dividing by
     0.  */
  intr_register_int (0, 0, INTR_ON, kill, "#DE Divide Error");
c002dfa9:	83 ec 0c             	sub    $0xc,%esp
c002dfac:	68 83 58 03 c0       	push   $0xc0035883
c002dfb1:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002dfb6:	6a 01                	push   $0x1
c002dfb8:	6a 00                	push   $0x0
c002dfba:	6a 00                	push   $0x0
c002dfbc:	e8 3f 40 ff ff       	call   c0022000 <intr_register_int>
c002dfc1:	83 c4 20             	add    $0x20,%esp
  intr_register_int (1, 0, INTR_ON, kill, "#DB Debug Exception");
c002dfc4:	83 ec 0c             	sub    $0xc,%esp
c002dfc7:	68 94 58 03 c0       	push   $0xc0035894
c002dfcc:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002dfd1:	6a 01                	push   $0x1
c002dfd3:	6a 00                	push   $0x0
c002dfd5:	6a 01                	push   $0x1
c002dfd7:	e8 24 40 ff ff       	call   c0022000 <intr_register_int>
c002dfdc:	83 c4 20             	add    $0x20,%esp
  intr_register_int (6, 0, INTR_ON, kill, "#UD Invalid Opcode Exception");
c002dfdf:	83 ec 0c             	sub    $0xc,%esp
c002dfe2:	68 a8 58 03 c0       	push   $0xc00358a8
c002dfe7:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002dfec:	6a 01                	push   $0x1
c002dfee:	6a 00                	push   $0x0
c002dff0:	6a 06                	push   $0x6
c002dff2:	e8 09 40 ff ff       	call   c0022000 <intr_register_int>
c002dff7:	83 c4 20             	add    $0x20,%esp
  intr_register_int (7, 0, INTR_ON, kill,
c002dffa:	83 ec 0c             	sub    $0xc,%esp
c002dffd:	68 c8 58 03 c0       	push   $0xc00358c8
c002e002:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002e007:	6a 01                	push   $0x1
c002e009:	6a 00                	push   $0x0
c002e00b:	6a 07                	push   $0x7
c002e00d:	e8 ee 3f ff ff       	call   c0022000 <intr_register_int>
c002e012:	83 c4 20             	add    $0x20,%esp
                     "#NM Device Not Available Exception");
  intr_register_int (11, 0, INTR_ON, kill, "#NP Segment Not Present");
c002e015:	83 ec 0c             	sub    $0xc,%esp
c002e018:	68 eb 58 03 c0       	push   $0xc00358eb
c002e01d:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002e022:	6a 01                	push   $0x1
c002e024:	6a 00                	push   $0x0
c002e026:	6a 0b                	push   $0xb
c002e028:	e8 d3 3f ff ff       	call   c0022000 <intr_register_int>
c002e02d:	83 c4 20             	add    $0x20,%esp
  intr_register_int (12, 0, INTR_ON, kill, "#SS Stack Fault Exception");
c002e030:	83 ec 0c             	sub    $0xc,%esp
c002e033:	68 03 59 03 c0       	push   $0xc0035903
c002e038:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002e03d:	6a 01                	push   $0x1
c002e03f:	6a 00                	push   $0x0
c002e041:	6a 0c                	push   $0xc
c002e043:	e8 b8 3f ff ff       	call   c0022000 <intr_register_int>
c002e048:	83 c4 20             	add    $0x20,%esp
  intr_register_int (13, 0, INTR_ON, kill, "#GP General Protection Exception");
c002e04b:	83 ec 0c             	sub    $0xc,%esp
c002e04e:	68 20 59 03 c0       	push   $0xc0035920
c002e053:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002e058:	6a 01                	push   $0x1
c002e05a:	6a 00                	push   $0x0
c002e05c:	6a 0d                	push   $0xd
c002e05e:	e8 9d 3f ff ff       	call   c0022000 <intr_register_int>
c002e063:	83 c4 20             	add    $0x20,%esp
  intr_register_int (16, 0, INTR_ON, kill, "#MF x87 FPU Floating-Point Error");
c002e066:	83 ec 0c             	sub    $0xc,%esp
c002e069:	68 44 59 03 c0       	push   $0xc0035944
c002e06e:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002e073:	6a 01                	push   $0x1
c002e075:	6a 00                	push   $0x0
c002e077:	6a 10                	push   $0x10
c002e079:	e8 82 3f ff ff       	call   c0022000 <intr_register_int>
c002e07e:	83 c4 20             	add    $0x20,%esp
  intr_register_int (19, 0, INTR_ON, kill,
c002e081:	83 ec 0c             	sub    $0xc,%esp
c002e084:	68 68 59 03 c0       	push   $0xc0035968
c002e089:	68 e0 e0 02 c0       	push   $0xc002e0e0
c002e08e:	6a 01                	push   $0x1
c002e090:	6a 00                	push   $0x0
c002e092:	6a 13                	push   $0x13
c002e094:	e8 67 3f ff ff       	call   c0022000 <intr_register_int>
c002e099:	83 c4 20             	add    $0x20,%esp
                     "#XF SIMD Floating-Point Exception");

  /* Most exceptions can be handled with interrupts turned on.
     We need to disable interrupts for page faults because the
     fault address is stored in CR2 and needs to be preserved. */
  intr_register_int (14, 0, INTR_OFF, page_fault, "#PF Page-Fault Exception");
c002e09c:	83 ec 0c             	sub    $0xc,%esp
c002e09f:	68 8a 59 03 c0       	push   $0xc003598a
c002e0a4:	68 b4 e1 02 c0       	push   $0xc002e1b4
c002e0a9:	6a 00                	push   $0x0
c002e0ab:	6a 00                	push   $0x0
c002e0ad:	6a 0e                	push   $0xe
c002e0af:	e8 4c 3f ff ff       	call   c0022000 <intr_register_int>
c002e0b4:	83 c4 20             	add    $0x20,%esp
}
c002e0b7:	90                   	nop
c002e0b8:	c9                   	leave  
c002e0b9:	c3                   	ret    

c002e0ba <exception_print_stats>:

/* Prints exception statistics. */
void
exception_print_stats (void) 
{
c002e0ba:	55                   	push   %ebp
c002e0bb:	89 e5                	mov    %esp,%ebp
c002e0bd:	83 ec 08             	sub    $0x8,%esp
  printf ("Exception: %lld page faults\n", page_fault_cnt);
c002e0c0:	a1 d8 dc 03 c0       	mov    0xc003dcd8,%eax
c002e0c5:	8b 15 dc dc 03 c0    	mov    0xc003dcdc,%edx
c002e0cb:	83 ec 04             	sub    $0x4,%esp
c002e0ce:	52                   	push   %edx
c002e0cf:	50                   	push   %eax
c002e0d0:	68 a3 59 03 c0       	push   $0xc00359a3
c002e0d5:	e8 ef 9e ff ff       	call   c0027fc9 <printf>
c002e0da:	83 c4 10             	add    $0x10,%esp
}
c002e0dd:	90                   	nop
c002e0de:	c9                   	leave  
c002e0df:	c3                   	ret    

c002e0e0 <kill>:

/* Handler for an exception (probably) caused by a user process. */
static void
kill (struct intr_frame *f) 
{
c002e0e0:	55                   	push   %ebp
c002e0e1:	89 e5                	mov    %esp,%ebp
c002e0e3:	56                   	push   %esi
c002e0e4:	53                   	push   %ebx
     exceptions back to the process via signals, but we don't
     implement them. */
     
  /* The interrupt frame's code segment value tells us where the
     exception originated. */
  switch (f->cs)
c002e0e5:	8b 45 08             	mov    0x8(%ebp),%eax
c002e0e8:	8b 40 40             	mov    0x40(%eax),%eax
c002e0eb:	0f b7 c0             	movzwl %ax,%eax
c002e0ee:	83 f8 08             	cmp    $0x8,%eax
c002e0f1:	74 52                	je     c002e145 <kill+0x65>
c002e0f3:	83 f8 1b             	cmp    $0x1b,%eax
c002e0f6:	75 71                	jne    c002e169 <kill+0x89>
    {
    case SEL_UCSEG:
      /* User's code segment, so it's a user exception, as we
         expected.  Kill the user process.  */
      printf ("%s: dying due to interrupt %#04x (%s).\n",
              thread_name (), f->vec_no, intr_name (f->vec_no));
c002e0f8:	8b 45 08             	mov    0x8(%ebp),%eax
c002e0fb:	8b 40 30             	mov    0x30(%eax),%eax
      printf ("%s: dying due to interrupt %#04x (%s).\n",
c002e0fe:	0f b6 c0             	movzbl %al,%eax
c002e101:	83 ec 0c             	sub    $0xc,%esp
c002e104:	50                   	push   %eax
c002e105:	e8 be 44 ff ff       	call   c00225c8 <intr_name>
c002e10a:	83 c4 10             	add    $0x10,%esp
c002e10d:	89 c6                	mov    %eax,%esi
c002e10f:	8b 45 08             	mov    0x8(%ebp),%eax
c002e112:	8b 58 30             	mov    0x30(%eax),%ebx
c002e115:	e8 7e 2d ff ff       	call   c0020e98 <thread_name>
c002e11a:	56                   	push   %esi
c002e11b:	53                   	push   %ebx
c002e11c:	50                   	push   %eax
c002e11d:	68 c0 59 03 c0       	push   $0xc00359c0
c002e122:	e8 a2 9e ff ff       	call   c0027fc9 <printf>
c002e127:	83 c4 10             	add    $0x10,%esp
      intr_dump_frame (f);
c002e12a:	83 ec 0c             	sub    $0xc,%esp
c002e12d:	ff 75 08             	pushl  0x8(%ebp)
c002e130:	e8 a8 43 ff ff       	call   c00224dd <intr_dump_frame>
c002e135:	83 c4 10             	add    $0x10,%esp
      sys_exit(-1);
c002e138:	83 ec 0c             	sub    $0xc,%esp
c002e13b:	6a ff                	push   $0xffffffff
c002e13d:	e8 88 07 00 00       	call   c002e8ca <sys_exit>
c002e142:	83 c4 10             	add    $0x10,%esp
    case SEL_KCSEG:
      /* Kernel's code segment, which indicates a kernel bug.
         Kernel code shouldn't throw exceptions.  (Page faults
         may cause kernel exceptions--but they shouldn't arrive
         here.)  Panic the kernel to make the point.  */
      intr_dump_frame (f);
c002e145:	83 ec 0c             	sub    $0xc,%esp
c002e148:	ff 75 08             	pushl  0x8(%ebp)
c002e14b:	e8 8d 43 ff ff       	call   c00224dd <intr_dump_frame>
c002e150:	83 c4 10             	add    $0x10,%esp
      PANIC ("Kernel bug - unexpected interrupt in kernel"); 
c002e153:	68 e8 59 03 c0       	push   $0xc00359e8
c002e158:	68 cc 5a 03 c0       	push   $0xc0035acc
c002e15d:	6a 6f                	push   $0x6f
c002e15f:	68 14 5a 03 c0       	push   $0xc0035a14
c002e164:	e8 c1 c3 ff ff       	call   c002a52a <debug_panic>

    default:
      /* Some other code segment?  Shouldn't happen.  Panic the
         kernel. */
      printf ("Interrupt %#04x (%s) in unknown segment %04x\n",
             f->vec_no, intr_name (f->vec_no), f->cs);
c002e169:	8b 45 08             	mov    0x8(%ebp),%eax
c002e16c:	8b 40 40             	mov    0x40(%eax),%eax
      printf ("Interrupt %#04x (%s) in unknown segment %04x\n",
c002e16f:	0f b7 d8             	movzwl %ax,%ebx
             f->vec_no, intr_name (f->vec_no), f->cs);
c002e172:	8b 45 08             	mov    0x8(%ebp),%eax
c002e175:	8b 40 30             	mov    0x30(%eax),%eax
      printf ("Interrupt %#04x (%s) in unknown segment %04x\n",
c002e178:	0f b6 c0             	movzbl %al,%eax
c002e17b:	83 ec 0c             	sub    $0xc,%esp
c002e17e:	50                   	push   %eax
c002e17f:	e8 44 44 ff ff       	call   c00225c8 <intr_name>
c002e184:	83 c4 10             	add    $0x10,%esp
c002e187:	89 c2                	mov    %eax,%edx
c002e189:	8b 45 08             	mov    0x8(%ebp),%eax
c002e18c:	8b 40 30             	mov    0x30(%eax),%eax
c002e18f:	53                   	push   %ebx
c002e190:	52                   	push   %edx
c002e191:	50                   	push   %eax
c002e192:	68 30 5a 03 c0       	push   $0xc0035a30
c002e197:	e8 2d 9e ff ff       	call   c0027fc9 <printf>
c002e19c:	83 c4 10             	add    $0x10,%esp
      sys_exit(-1);
c002e19f:	83 ec 0c             	sub    $0xc,%esp
c002e1a2:	6a ff                	push   $0xffffffff
c002e1a4:	e8 21 07 00 00       	call   c002e8ca <sys_exit>
c002e1a9:	83 c4 10             	add    $0x10,%esp
    }
}
c002e1ac:	90                   	nop
c002e1ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
c002e1b0:	5b                   	pop    %ebx
c002e1b1:	5e                   	pop    %esi
c002e1b2:	5d                   	pop    %ebp
c002e1b3:	c3                   	ret    

c002e1b4 <page_fault>:
   can find more information about both of these in the
   description of "Interrupt 14--Page Fault Exception (#PF)" in
   [IA32-v3a] section 5.15 "Exception and Interrupt Reference". */
static void
page_fault (struct intr_frame *f) 
{
c002e1b4:	55                   	push   %ebp
c002e1b5:	89 e5                	mov    %esp,%ebp
c002e1b7:	83 ec 18             	sub    $0x18,%esp
     data.  It is not necessarily the address of the instruction
     that caused the fault (that's f->eip).
     See [IA32-v2a] "MOV--Move to/from Control Registers" and
     [IA32-v3a] 5.15 "Interrupt 14--Page Fault Exception
     (#PF)". */
  asm ("movl %%cr2, %0" : "=r" (fault_addr));
c002e1ba:	0f 20 d0             	mov    %cr2,%eax
c002e1bd:	89 45 f4             	mov    %eax,-0xc(%ebp)

  /* Turn interrupts back on (they were only off so that we could
     be assured of reading CR2 before it changed). */
  intr_enable ();
c002e1c0:	e8 86 3b ff ff       	call   c0021d4b <intr_enable>

  /* Count page faults. */
  page_fault_cnt++;
c002e1c5:	a1 d8 dc 03 c0       	mov    0xc003dcd8,%eax
c002e1ca:	8b 15 dc dc 03 c0    	mov    0xc003dcdc,%edx
c002e1d0:	83 c0 01             	add    $0x1,%eax
c002e1d3:	83 d2 00             	adc    $0x0,%edx
c002e1d6:	a3 d8 dc 03 c0       	mov    %eax,0xc003dcd8
c002e1db:	89 15 dc dc 03 c0    	mov    %edx,0xc003dcdc

  /* Determine cause. */
  not_present = (f->error_code & PF_P) == 0;
c002e1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c002e1e4:	8b 40 34             	mov    0x34(%eax),%eax
c002e1e7:	83 e0 01             	and    $0x1,%eax
c002e1ea:	85 c0                	test   %eax,%eax
c002e1ec:	0f 94 c0             	sete   %al
c002e1ef:	88 45 f3             	mov    %al,-0xd(%ebp)
  write = (f->error_code & PF_W) != 0;
c002e1f2:	8b 45 08             	mov    0x8(%ebp),%eax
c002e1f5:	8b 40 34             	mov    0x34(%eax),%eax
c002e1f8:	83 e0 02             	and    $0x2,%eax
c002e1fb:	85 c0                	test   %eax,%eax
c002e1fd:	0f 95 c0             	setne  %al
c002e200:	88 45 f2             	mov    %al,-0xe(%ebp)
  user = (f->error_code & PF_U) != 0;
c002e203:	8b 45 08             	mov    0x8(%ebp),%eax
c002e206:	8b 40 34             	mov    0x34(%eax),%eax
c002e209:	83 e0 04             	and    $0x4,%eax
c002e20c:	85 c0                	test   %eax,%eax
c002e20e:	0f 95 c0             	setne  %al
c002e211:	88 45 f1             	mov    %al,-0xf(%ebp)
      if(vm_load_page(cur_thread->supt, cur_thread->pagedir, fault_page))
          return;
  }

#endif
   if(!user) { // as described in pintos book
c002e214:	8a 45 f1             	mov    -0xf(%ebp),%al
c002e217:	83 f0 01             	xor    $0x1,%eax
c002e21a:	84 c0                	test   %al,%al
c002e21c:	74 1a                	je     c002e238 <page_fault+0x84>
      f->eip = (void *) f->eax;
c002e21e:	8b 45 08             	mov    0x8(%ebp),%eax
c002e221:	8b 40 1c             	mov    0x1c(%eax),%eax
c002e224:	89 c2                	mov    %eax,%edx
c002e226:	8b 45 08             	mov    0x8(%ebp),%eax
c002e229:	89 50 3c             	mov    %edx,0x3c(%eax)
      f->eax = 0xffffffff;
c002e22c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e22f:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
      return;
c002e236:	eb 5a                	jmp    c002e292 <page_fault+0xde>
//    set_exit_status(-1);

  /* To implement virtual memory, delete the rest of the function
     body, and replace it with code that brings in the page to
     which fault_addr refers. */
  printf ("Page fault at %p: %s error %s page in %s context.\n",
c002e238:	80 7d f1 00          	cmpb   $0x0,-0xf(%ebp)
c002e23c:	74 07                	je     c002e245 <page_fault+0x91>
c002e23e:	b9 5e 5a 03 c0       	mov    $0xc0035a5e,%ecx
c002e243:	eb 05                	jmp    c002e24a <page_fault+0x96>
c002e245:	b9 63 5a 03 c0       	mov    $0xc0035a63,%ecx
c002e24a:	80 7d f2 00          	cmpb   $0x0,-0xe(%ebp)
c002e24e:	74 07                	je     c002e257 <page_fault+0xa3>
c002e250:	ba 6a 5a 03 c0       	mov    $0xc0035a6a,%edx
c002e255:	eb 05                	jmp    c002e25c <page_fault+0xa8>
c002e257:	ba 72 5a 03 c0       	mov    $0xc0035a72,%edx
c002e25c:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c002e260:	74 07                	je     c002e269 <page_fault+0xb5>
c002e262:	b8 7a 5a 03 c0       	mov    $0xc0035a7a,%eax
c002e267:	eb 05                	jmp    c002e26e <page_fault+0xba>
c002e269:	b8 86 5a 03 c0       	mov    $0xc0035a86,%eax
c002e26e:	83 ec 0c             	sub    $0xc,%esp
c002e271:	51                   	push   %ecx
c002e272:	52                   	push   %edx
c002e273:	50                   	push   %eax
c002e274:	ff 75 f4             	pushl  -0xc(%ebp)
c002e277:	68 98 5a 03 c0       	push   $0xc0035a98
c002e27c:	e8 48 9d ff ff       	call   c0027fc9 <printf>
c002e281:	83 c4 20             	add    $0x20,%esp
          fault_addr,
          not_present ? "not present" : "rights violation",
          write ? "writing" : "reading",
          user ? "user" : "kernel");
  kill (f);
c002e284:	83 ec 0c             	sub    $0xc,%esp
c002e287:	ff 75 08             	pushl  0x8(%ebp)
c002e28a:	e8 51 fe ff ff       	call   c002e0e0 <kill>
c002e28f:	83 c4 10             	add    $0x10,%esp
}
c002e292:	c9                   	leave  
c002e293:	c3                   	ret    

c002e294 <is_user_vaddr>:
{
c002e294:	55                   	push   %ebp
c002e295:	89 e5                	mov    %esp,%ebp
  return vaddr < PHYS_BASE;
c002e297:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c002e29e:	0f 96 c0             	setbe  %al
}
c002e2a1:	5d                   	pop    %ebp
c002e2a2:	c3                   	ret    

c002e2a3 <get_file_descriptor>:
static struct file_descriptor* get_file_descriptor(struct thread* cur, int fd, int type);
//type = 0 for all  1 for file 2 for directory

struct lock fileSys_lock;

static struct file_descriptor* get_file_descriptor(struct thread* cur, int fd, int type){
c002e2a3:	55                   	push   %ebp
c002e2a4:	89 e5                	mov    %esp,%ebp
c002e2a6:	83 ec 18             	sub    $0x18,%esp
  if (fd < 3) 
c002e2a9:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
c002e2ad:	7f 0a                	jg     c002e2b9 <get_file_descriptor+0x16>
    return NULL; // should not happen
c002e2af:	b8 00 00 00 00       	mov    $0x0,%eax
c002e2b4:	e9 af 00 00 00       	jmp    c002e368 <get_file_descriptor+0xc5>
  struct list_elem *elem = NULL;
c002e2b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  if (! list_empty(&cur->opened_files)) {
c002e2c0:	8b 45 08             	mov    0x8(%ebp),%eax
c002e2c3:	83 c0 44             	add    $0x44,%eax
c002e2c6:	83 ec 0c             	sub    $0xc,%esp
c002e2c9:	50                   	push   %eax
c002e2ca:	e8 56 ca ff ff       	call   c002ad25 <list_empty>
c002e2cf:	83 c4 10             	add    $0x10,%esp
c002e2d2:	83 f0 01             	xor    $0x1,%eax
c002e2d5:	84 c0                	test   %al,%al
c002e2d7:	0f 84 86 00 00 00    	je     c002e363 <get_file_descriptor+0xc0>
    for ( elem = list_begin(&cur->opened_files); 
c002e2dd:	8b 45 08             	mov    0x8(%ebp),%eax
c002e2e0:	83 c0 44             	add    $0x44,%eax
c002e2e3:	83 ec 0c             	sub    $0xc,%esp
c002e2e6:	50                   	push   %eax
c002e2e7:	e8 06 c5 ff ff       	call   c002a7f2 <list_begin>
c002e2ec:	83 c4 10             	add    $0x10,%esp
c002e2ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002e2f2:	eb 58                	jmp    c002e34c <get_file_descriptor+0xa9>
          elem != list_end(&cur->opened_files); 
          elem = list_next(elem)) 
    {
      struct file_descriptor *fileD = 
      list_entry(elem, struct file_descriptor, elem);
c002e2f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e2f7:	83 c0 04             	add    $0x4,%eax
      struct file_descriptor *fileD = 
c002e2fa:	83 e8 0c             	sub    $0xc,%eax
c002e2fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(fileD->fdID == fd) {
c002e300:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e303:	8b 00                	mov    (%eax),%eax
c002e305:	3b 45 0c             	cmp    0xc(%ebp),%eax
c002e308:	75 31                	jne    c002e33b <get_file_descriptor+0x98>
        if (fileD->dir != NULL && type != 1) 
c002e30a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e30d:	8b 40 10             	mov    0x10(%eax),%eax
c002e310:	85 c0                	test   %eax,%eax
c002e312:	74 0b                	je     c002e31f <get_file_descriptor+0x7c>
c002e314:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c002e318:	74 05                	je     c002e31f <get_file_descriptor+0x7c>
          return fileD;
c002e31a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e31d:	eb 49                	jmp    c002e368 <get_file_descriptor+0xc5>
        else if (fileD->dir == NULL && type != 2)
c002e31f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e322:	8b 40 10             	mov    0x10(%eax),%eax
c002e325:	85 c0                	test   %eax,%eax
c002e327:	75 0b                	jne    c002e334 <get_file_descriptor+0x91>
c002e329:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
c002e32d:	74 05                	je     c002e334 <get_file_descriptor+0x91>
          return fileD;
c002e32f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002e332:	eb 34                	jmp    c002e368 <get_file_descriptor+0xc5>
        return NULL;
c002e334:	b8 00 00 00 00       	mov    $0x0,%eax
c002e339:	eb 2d                	jmp    c002e368 <get_file_descriptor+0xc5>
          elem = list_next(elem)) 
c002e33b:	83 ec 0c             	sub    $0xc,%esp
c002e33e:	ff 75 f4             	pushl  -0xc(%ebp)
c002e341:	e8 de c4 ff ff       	call   c002a824 <list_next>
c002e346:	83 c4 10             	add    $0x10,%esp
c002e349:	89 45 f4             	mov    %eax,-0xc(%ebp)
          elem != list_end(&cur->opened_files); 
c002e34c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e34f:	83 c0 44             	add    $0x44,%eax
c002e352:	83 ec 0c             	sub    $0xc,%esp
c002e355:	50                   	push   %eax
c002e356:	e8 13 c5 ff ff       	call   c002a86e <list_end>
c002e35b:	83 c4 10             	add    $0x10,%esp
    for ( elem = list_begin(&cur->opened_files); 
c002e35e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c002e361:	75 91                	jne    c002e2f4 <get_file_descriptor+0x51>
      }
    } 
  }
  return NULL;
c002e363:	b8 00 00 00 00       	mov    $0x0,%eax
}
c002e368:	c9                   	leave  
c002e369:	c3                   	ret    

c002e36a <syscall_init>:

void
syscall_init (void) 
{
c002e36a:	55                   	push   %ebp
c002e36b:	89 e5                	mov    %esp,%ebp
c002e36d:	83 ec 08             	sub    $0x8,%esp
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
c002e370:	83 ec 0c             	sub    $0xc,%esp
c002e373:	68 d4 5a 03 c0       	push   $0xc0035ad4
c002e378:	68 9e e3 02 c0       	push   $0xc002e39e
c002e37d:	6a 01                	push   $0x1
c002e37f:	6a 03                	push   $0x3
c002e381:	6a 30                	push   $0x30
c002e383:	e8 78 3c ff ff       	call   c0022000 <intr_register_int>
c002e388:	83 c4 20             	add    $0x20,%esp
  lock_init(&fileSys_lock);
c002e38b:	83 ec 0c             	sub    $0xc,%esp
c002e38e:	68 a0 61 04 c0       	push   $0xc00461a0
c002e393:	e8 e6 50 ff ff       	call   c002347e <lock_init>
c002e398:	83 c4 10             	add    $0x10,%esp
}
c002e39b:	90                   	nop
c002e39c:	c9                   	leave  
c002e39d:	c3                   	ret    

c002e39e <syscall_handler>:

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
c002e39e:	55                   	push   %ebp
c002e39f:	89 e5                	mov    %esp,%ebp
c002e3a1:	81 ec 98 00 00 00    	sub    $0x98,%esp
  int syscall_num;
  mem_read(f->esp, &syscall_num, sizeof(int));
c002e3a7:	8b 45 08             	mov    0x8(%ebp),%eax
c002e3aa:	8b 40 48             	mov    0x48(%eax),%eax
c002e3ad:	83 ec 04             	sub    $0x4,%esp
c002e3b0:	6a 04                	push   $0x4
c002e3b2:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c002e3b5:	52                   	push   %edx
c002e3b6:	50                   	push   %eax
c002e3b7:	e8 c9 0b 00 00       	call   c002ef85 <mem_read>
c002e3bc:	83 c4 10             	add    $0x10,%esp
  thread_current()->cur_esp = f->esp;
c002e3bf:	e8 e4 2a ff ff       	call   c0020ea8 <thread_current>
c002e3c4:	8b 55 08             	mov    0x8(%ebp),%edx
c002e3c7:	8b 52 48             	mov    0x48(%edx),%edx
c002e3ca:	89 50 60             	mov    %edx,0x60(%eax)
  switch (syscall_num) {
c002e3cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c002e3d0:	83 f8 13             	cmp    $0x13,%eax
c002e3d3:	0f 87 c2 04 00 00    	ja     c002e89b <syscall_handler+0x4fd>
c002e3d9:	8b 04 85 fc 5a 03 c0 	mov    -0x3ffca504(,%eax,4),%eax
c002e3e0:	ff e0                	jmp    *%eax
    case SYS_HALT:
    {
      sys_halt();
c002e3e2:	e8 d5 04 00 00       	call   c002e8bc <sys_halt>
      break;
c002e3e7:	e9 cd 04 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    }

    case SYS_EXIT:
    {
      int retVal;
      mem_read(f->esp + 4, &retVal, sizeof(int)); // 1 arg
c002e3ec:	8b 45 08             	mov    0x8(%ebp),%eax
c002e3ef:	8b 40 48             	mov    0x48(%eax),%eax
c002e3f2:	8d 50 04             	lea    0x4(%eax),%edx
c002e3f5:	83 ec 04             	sub    $0x4,%esp
c002e3f8:	6a 04                	push   $0x4
c002e3fa:	8d 45 d0             	lea    -0x30(%ebp),%eax
c002e3fd:	50                   	push   %eax
c002e3fe:	52                   	push   %edx
c002e3ff:	e8 81 0b 00 00       	call   c002ef85 <mem_read>
c002e404:	83 c4 10             	add    $0x10,%esp
      sys_exit(retVal);
c002e407:	8b 45 d0             	mov    -0x30(%ebp),%eax
c002e40a:	83 ec 0c             	sub    $0xc,%esp
c002e40d:	50                   	push   %eax
c002e40e:	e8 b7 04 00 00       	call   c002e8ca <sys_exit>
c002e413:	83 c4 10             	add    $0x10,%esp
      break;
c002e416:	90                   	nop
c002e417:	e9 9d 04 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    }

    case SYS_EXEC:
    {
      char* cmd_line;
      mem_read(f->esp + 4, &cmd_line, sizeof(cmd_line)); // 1 arg
c002e41c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e41f:	8b 40 48             	mov    0x48(%eax),%eax
c002e422:	8d 50 04             	lea    0x4(%eax),%edx
c002e425:	83 ec 04             	sub    $0x4,%esp
c002e428:	6a 04                	push   $0x4
c002e42a:	8d 45 cc             	lea    -0x34(%ebp),%eax
c002e42d:	50                   	push   %eax
c002e42e:	52                   	push   %edx
c002e42f:	e8 51 0b 00 00       	call   c002ef85 <mem_read>
c002e434:	83 c4 10             	add    $0x10,%esp

      int res = sys_exec((const char*) cmd_line);
c002e437:	8b 45 cc             	mov    -0x34(%ebp),%eax
c002e43a:	83 ec 0c             	sub    $0xc,%esp
c002e43d:	50                   	push   %eax
c002e43e:	e8 c0 04 00 00       	call   c002e903 <sys_exec>
c002e443:	83 c4 10             	add    $0x10,%esp
c002e446:	89 45 f4             	mov    %eax,-0xc(%ebp)
      f->eax = res; // set ret value
c002e449:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002e44c:	8b 45 08             	mov    0x8(%ebp),%eax
c002e44f:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e452:	90                   	nop
c002e453:	e9 61 04 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    
    case SYS_WAIT:
    {
      // pid_t pid;
      int pid;
      mem_read(f->esp + 4, &pid, sizeof(pid));
c002e458:	8b 45 08             	mov    0x8(%ebp),%eax
c002e45b:	8b 40 48             	mov    0x48(%eax),%eax
c002e45e:	8d 50 04             	lea    0x4(%eax),%edx
c002e461:	83 ec 04             	sub    $0x4,%esp
c002e464:	6a 04                	push   $0x4
c002e466:	8d 45 c8             	lea    -0x38(%ebp),%eax
c002e469:	50                   	push   %eax
c002e46a:	52                   	push   %edx
c002e46b:	e8 15 0b 00 00       	call   c002ef85 <mem_read>
c002e470:	83 c4 10             	add    $0x10,%esp

      int res = sys_wait(pid);
c002e473:	8b 45 c8             	mov    -0x38(%ebp),%eax
c002e476:	83 ec 0c             	sub    $0xc,%esp
c002e479:	50                   	push   %eax
c002e47a:	e8 07 06 00 00       	call   c002ea86 <sys_wait>
c002e47f:	83 c4 10             	add    $0x10,%esp
c002e482:	89 45 f0             	mov    %eax,-0x10(%ebp)
      f->eax = res;
c002e485:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002e488:	8b 45 08             	mov    0x8(%ebp),%eax
c002e48b:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e48e:	90                   	nop
c002e48f:	e9 25 04 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    {
      char* file;
      unsigned initial_size;
      bool res;

      mem_read(f->esp + 4, &file, sizeof(file));
c002e494:	8b 45 08             	mov    0x8(%ebp),%eax
c002e497:	8b 40 48             	mov    0x48(%eax),%eax
c002e49a:	8d 50 04             	lea    0x4(%eax),%edx
c002e49d:	83 ec 04             	sub    $0x4,%esp
c002e4a0:	6a 04                	push   $0x4
c002e4a2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c002e4a5:	50                   	push   %eax
c002e4a6:	52                   	push   %edx
c002e4a7:	e8 d9 0a 00 00       	call   c002ef85 <mem_read>
c002e4ac:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &initial_size, sizeof(initial_size));
c002e4af:	8b 45 08             	mov    0x8(%ebp),%eax
c002e4b2:	8b 40 48             	mov    0x48(%eax),%eax
c002e4b5:	8d 50 08             	lea    0x8(%eax),%edx
c002e4b8:	83 ec 04             	sub    $0x4,%esp
c002e4bb:	6a 04                	push   $0x4
c002e4bd:	8d 45 c0             	lea    -0x40(%ebp),%eax
c002e4c0:	50                   	push   %eax
c002e4c1:	52                   	push   %edx
c002e4c2:	e8 be 0a 00 00       	call   c002ef85 <mem_read>
c002e4c7:	83 c4 10             	add    $0x10,%esp

      res = sys_create(file, initial_size);
c002e4ca:	8b 55 c0             	mov    -0x40(%ebp),%edx
c002e4cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c002e4d0:	83 ec 08             	sub    $0x8,%esp
c002e4d3:	52                   	push   %edx
c002e4d4:	50                   	push   %eax
c002e4d5:	e8 5e 05 00 00       	call   c002ea38 <sys_create>
c002e4da:	83 c4 10             	add    $0x10,%esp
c002e4dd:	88 45 ef             	mov    %al,-0x11(%ebp)
      f->eax = res;
c002e4e0:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c002e4e4:	8b 45 08             	mov    0x8(%ebp),%eax
c002e4e7:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e4ea:	90                   	nop
c002e4eb:	e9 c9 03 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>

    case SYS_REMOVE:
    {
      char* file;
      bool res;
      mem_read(f->esp+4, &file, sizeof(file));
c002e4f0:	8b 45 08             	mov    0x8(%ebp),%eax
c002e4f3:	8b 40 48             	mov    0x48(%eax),%eax
c002e4f6:	8d 50 04             	lea    0x4(%eax),%edx
c002e4f9:	83 ec 04             	sub    $0x4,%esp
c002e4fc:	6a 04                	push   $0x4
c002e4fe:	8d 45 bc             	lea    -0x44(%ebp),%eax
c002e501:	50                   	push   %eax
c002e502:	52                   	push   %edx
c002e503:	e8 7d 0a 00 00       	call   c002ef85 <mem_read>
c002e508:	83 c4 10             	add    $0x10,%esp
      res = sys_remove(file);
c002e50b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c002e50e:	83 ec 0c             	sub    $0xc,%esp
c002e511:	50                   	push   %eax
c002e512:	e8 85 05 00 00       	call   c002ea9c <sys_remove>
c002e517:	83 c4 10             	add    $0x10,%esp
c002e51a:	88 45 ee             	mov    %al,-0x12(%ebp)
      f->eax = res;
c002e51d:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
c002e521:	8b 45 08             	mov    0x8(%ebp),%eax
c002e524:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e527:	90                   	nop
c002e528:	e9 8c 03 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>

    case SYS_OPEN:
    {
      char* file;
      int res;
      mem_read(f->esp+4, &file, sizeof(file));
c002e52d:	8b 45 08             	mov    0x8(%ebp),%eax
c002e530:	8b 40 48             	mov    0x48(%eax),%eax
c002e533:	8d 50 04             	lea    0x4(%eax),%edx
c002e536:	83 ec 04             	sub    $0x4,%esp
c002e539:	6a 04                	push   $0x4
c002e53b:	8d 45 b8             	lea    -0x48(%ebp),%eax
c002e53e:	50                   	push   %eax
c002e53f:	52                   	push   %edx
c002e540:	e8 40 0a 00 00       	call   c002ef85 <mem_read>
c002e545:	83 c4 10             	add    $0x10,%esp
      res = sys_open(file);
c002e548:	8b 45 b8             	mov    -0x48(%ebp),%eax
c002e54b:	83 ec 0c             	sub    $0xc,%esp
c002e54e:	50                   	push   %eax
c002e54f:	e8 92 05 00 00       	call   c002eae6 <sys_open>
c002e554:	83 c4 10             	add    $0x10,%esp
c002e557:	89 45 e8             	mov    %eax,-0x18(%ebp)
      f->eax = res;
c002e55a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c002e55d:	8b 45 08             	mov    0x8(%ebp),%eax
c002e560:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e563:	90                   	nop
c002e564:	e9 50 03 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>

    case SYS_FILESIZE:
    {
      int fd;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e569:	8b 45 08             	mov    0x8(%ebp),%eax
c002e56c:	8b 40 48             	mov    0x48(%eax),%eax
c002e56f:	8d 50 04             	lea    0x4(%eax),%edx
c002e572:	83 ec 04             	sub    $0x4,%esp
c002e575:	6a 04                	push   $0x4
c002e577:	8d 45 b4             	lea    -0x4c(%ebp),%eax
c002e57a:	50                   	push   %eax
c002e57b:	52                   	push   %edx
c002e57c:	e8 04 0a 00 00       	call   c002ef85 <mem_read>
c002e581:	83 c4 10             	add    $0x10,%esp
      res = sys_filesize(fd);
c002e584:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c002e587:	83 ec 0c             	sub    $0xc,%esp
c002e58a:	50                   	push   %eax
c002e58b:	e8 ba 06 00 00       	call   c002ec4a <sys_filesize>
c002e590:	83 c4 10             	add    $0x10,%esp
c002e593:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      f->eax = res;
c002e596:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002e599:	8b 45 08             	mov    0x8(%ebp),%eax
c002e59c:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e59f:	90                   	nop
c002e5a0:	e9 14 03 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    {
      int fd;
      void *buffer;
      unsigned size;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e5a5:	8b 45 08             	mov    0x8(%ebp),%eax
c002e5a8:	8b 40 48             	mov    0x48(%eax),%eax
c002e5ab:	8d 50 04             	lea    0x4(%eax),%edx
c002e5ae:	83 ec 04             	sub    $0x4,%esp
c002e5b1:	6a 04                	push   $0x4
c002e5b3:	8d 45 b0             	lea    -0x50(%ebp),%eax
c002e5b6:	50                   	push   %eax
c002e5b7:	52                   	push   %edx
c002e5b8:	e8 c8 09 00 00       	call   c002ef85 <mem_read>
c002e5bd:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &buffer, sizeof(buffer));
c002e5c0:	8b 45 08             	mov    0x8(%ebp),%eax
c002e5c3:	8b 40 48             	mov    0x48(%eax),%eax
c002e5c6:	8d 50 08             	lea    0x8(%eax),%edx
c002e5c9:	83 ec 04             	sub    $0x4,%esp
c002e5cc:	6a 04                	push   $0x4
c002e5ce:	8d 45 ac             	lea    -0x54(%ebp),%eax
c002e5d1:	50                   	push   %eax
c002e5d2:	52                   	push   %edx
c002e5d3:	e8 ad 09 00 00       	call   c002ef85 <mem_read>
c002e5d8:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 12, &size, sizeof(size));
c002e5db:	8b 45 08             	mov    0x8(%ebp),%eax
c002e5de:	8b 40 48             	mov    0x48(%eax),%eax
c002e5e1:	8d 50 0c             	lea    0xc(%eax),%edx
c002e5e4:	83 ec 04             	sub    $0x4,%esp
c002e5e7:	6a 04                	push   $0x4
c002e5e9:	8d 45 a8             	lea    -0x58(%ebp),%eax
c002e5ec:	50                   	push   %eax
c002e5ed:	52                   	push   %edx
c002e5ee:	e8 92 09 00 00       	call   c002ef85 <mem_read>
c002e5f3:	83 c4 10             	add    $0x10,%esp
      res = sys_read(fd, buffer, size);
c002e5f6:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c002e5f9:	8b 55 ac             	mov    -0x54(%ebp),%edx
c002e5fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c002e5ff:	83 ec 04             	sub    $0x4,%esp
c002e602:	51                   	push   %ecx
c002e603:	52                   	push   %edx
c002e604:	50                   	push   %eax
c002e605:	e8 a6 06 00 00       	call   c002ecb0 <sys_read>
c002e60a:	83 c4 10             	add    $0x10,%esp
c002e60d:	89 45 e0             	mov    %eax,-0x20(%ebp)
      f->eax = res;
c002e610:	8b 55 e0             	mov    -0x20(%ebp),%edx
c002e613:	8b 45 08             	mov    0x8(%ebp),%eax
c002e616:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e619:	90                   	nop
c002e61a:	e9 9a 02 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    {
      int fd;
      void *buffer;
      unsigned size;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e61f:	8b 45 08             	mov    0x8(%ebp),%eax
c002e622:	8b 40 48             	mov    0x48(%eax),%eax
c002e625:	8d 50 04             	lea    0x4(%eax),%edx
c002e628:	83 ec 04             	sub    $0x4,%esp
c002e62b:	6a 04                	push   $0x4
c002e62d:	8d 45 a4             	lea    -0x5c(%ebp),%eax
c002e630:	50                   	push   %eax
c002e631:	52                   	push   %edx
c002e632:	e8 4e 09 00 00       	call   c002ef85 <mem_read>
c002e637:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &buffer, sizeof(buffer));
c002e63a:	8b 45 08             	mov    0x8(%ebp),%eax
c002e63d:	8b 40 48             	mov    0x48(%eax),%eax
c002e640:	8d 50 08             	lea    0x8(%eax),%edx
c002e643:	83 ec 04             	sub    $0x4,%esp
c002e646:	6a 04                	push   $0x4
c002e648:	8d 45 a0             	lea    -0x60(%ebp),%eax
c002e64b:	50                   	push   %eax
c002e64c:	52                   	push   %edx
c002e64d:	e8 33 09 00 00       	call   c002ef85 <mem_read>
c002e652:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 12, &size, sizeof(size));
c002e655:	8b 45 08             	mov    0x8(%ebp),%eax
c002e658:	8b 40 48             	mov    0x48(%eax),%eax
c002e65b:	8d 50 0c             	lea    0xc(%eax),%edx
c002e65e:	83 ec 04             	sub    $0x4,%esp
c002e661:	6a 04                	push   $0x4
c002e663:	8d 45 9c             	lea    -0x64(%ebp),%eax
c002e666:	50                   	push   %eax
c002e667:	52                   	push   %edx
c002e668:	e8 18 09 00 00       	call   c002ef85 <mem_read>
c002e66d:	83 c4 10             	add    $0x10,%esp
      res = sys_write(fd, buffer, size);
c002e670:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c002e673:	8b 55 a0             	mov    -0x60(%ebp),%edx
c002e676:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c002e679:	83 ec 04             	sub    $0x4,%esp
c002e67c:	51                   	push   %ecx
c002e67d:	52                   	push   %edx
c002e67e:	50                   	push   %eax
c002e67f:	e8 f9 02 00 00       	call   c002e97d <sys_write>
c002e684:	83 c4 10             	add    $0x10,%esp
c002e687:	89 45 dc             	mov    %eax,-0x24(%ebp)
      f->eax = res;
c002e68a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c002e68d:	8b 45 08             	mov    0x8(%ebp),%eax
c002e690:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e693:	90                   	nop
c002e694:	e9 20 02 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>

    case SYS_SEEK:
    {
      int fd;
      unsigned position;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e699:	8b 45 08             	mov    0x8(%ebp),%eax
c002e69c:	8b 40 48             	mov    0x48(%eax),%eax
c002e69f:	8d 50 04             	lea    0x4(%eax),%edx
c002e6a2:	83 ec 04             	sub    $0x4,%esp
c002e6a5:	6a 04                	push   $0x4
c002e6a7:	8d 45 98             	lea    -0x68(%ebp),%eax
c002e6aa:	50                   	push   %eax
c002e6ab:	52                   	push   %edx
c002e6ac:	e8 d4 08 00 00       	call   c002ef85 <mem_read>
c002e6b1:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &position, sizeof(position));
c002e6b4:	8b 45 08             	mov    0x8(%ebp),%eax
c002e6b7:	8b 40 48             	mov    0x48(%eax),%eax
c002e6ba:	8d 50 08             	lea    0x8(%eax),%edx
c002e6bd:	83 ec 04             	sub    $0x4,%esp
c002e6c0:	6a 04                	push   $0x4
c002e6c2:	8d 45 94             	lea    -0x6c(%ebp),%eax
c002e6c5:	50                   	push   %eax
c002e6c6:	52                   	push   %edx
c002e6c7:	e8 b9 08 00 00       	call   c002ef85 <mem_read>
c002e6cc:	83 c4 10             	add    $0x10,%esp
      sys_seek(fd, position);
c002e6cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
c002e6d2:	8b 45 98             	mov    -0x68(%ebp),%eax
c002e6d5:	83 ec 08             	sub    $0x8,%esp
c002e6d8:	52                   	push   %edx
c002e6d9:	50                   	push   %eax
c002e6da:	e8 d9 06 00 00       	call   c002edb8 <sys_seek>
c002e6df:	83 c4 10             	add    $0x10,%esp
      break;
c002e6e2:	90                   	nop
c002e6e3:	e9 d1 01 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>

    case SYS_TELL:
    {
      int fd;
      int res;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e6e8:	8b 45 08             	mov    0x8(%ebp),%eax
c002e6eb:	8b 40 48             	mov    0x48(%eax),%eax
c002e6ee:	8d 50 04             	lea    0x4(%eax),%edx
c002e6f1:	83 ec 04             	sub    $0x4,%esp
c002e6f4:	6a 04                	push   $0x4
c002e6f6:	8d 45 90             	lea    -0x70(%ebp),%eax
c002e6f9:	50                   	push   %eax
c002e6fa:	52                   	push   %edx
c002e6fb:	e8 85 08 00 00       	call   c002ef85 <mem_read>
c002e700:	83 c4 10             	add    $0x10,%esp
      res = sys_tell(fd);
c002e703:	8b 45 90             	mov    -0x70(%ebp),%eax
c002e706:	83 ec 0c             	sub    $0xc,%esp
c002e709:	50                   	push   %eax
c002e70a:	e8 30 07 00 00       	call   c002ee3f <sys_tell>
c002e70f:	83 c4 10             	add    $0x10,%esp
c002e712:	89 45 d8             	mov    %eax,-0x28(%ebp)
      f->eax = res;
c002e715:	8b 55 d8             	mov    -0x28(%ebp),%edx
c002e718:	8b 45 08             	mov    0x8(%ebp),%eax
c002e71b:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e71e:	90                   	nop
c002e71f:	e9 95 01 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    }

    case SYS_CLOSE:
    {
      int fd;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e724:	8b 45 08             	mov    0x8(%ebp),%eax
c002e727:	8b 40 48             	mov    0x48(%eax),%eax
c002e72a:	8d 50 04             	lea    0x4(%eax),%edx
c002e72d:	83 ec 04             	sub    $0x4,%esp
c002e730:	6a 04                	push   $0x4
c002e732:	8d 45 8c             	lea    -0x74(%ebp),%eax
c002e735:	50                   	push   %eax
c002e736:	52                   	push   %edx
c002e737:	e8 49 08 00 00       	call   c002ef85 <mem_read>
c002e73c:	83 c4 10             	add    $0x10,%esp
      sys_close(fd);
c002e73f:	8b 45 8c             	mov    -0x74(%ebp),%eax
c002e742:	83 ec 0c             	sub    $0xc,%esp
c002e745:	50                   	push   %eax
c002e746:	e8 64 07 00 00       	call   c002eeaf <sys_close>
c002e74b:	83 c4 10             	add    $0x10,%esp
      break;
c002e74e:	90                   	nop
c002e74f:	e9 65 01 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
#endif
#ifdef FILESYS
    case SYS_CHDIR:
    {
      const char *name;
      mem_read(f->esp + 4, &name, sizeof(name));
c002e754:	8b 45 08             	mov    0x8(%ebp),%eax
c002e757:	8b 40 48             	mov    0x48(%eax),%eax
c002e75a:	8d 50 04             	lea    0x4(%eax),%edx
c002e75d:	83 ec 04             	sub    $0x4,%esp
c002e760:	6a 04                	push   $0x4
c002e762:	8d 45 88             	lea    -0x78(%ebp),%eax
c002e765:	50                   	push   %eax
c002e766:	52                   	push   %edx
c002e767:	e8 19 08 00 00       	call   c002ef85 <mem_read>
c002e76c:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_chdir(name);
c002e76f:	8b 45 88             	mov    -0x78(%ebp),%eax
c002e772:	83 ec 0c             	sub    $0xc,%esp
c002e775:	50                   	push   %eax
c002e776:	e8 cd 08 00 00       	call   c002f048 <sys_chdir>
c002e77b:	83 c4 10             	add    $0x10,%esp
c002e77e:	0f b6 d0             	movzbl %al,%edx
c002e781:	8b 45 08             	mov    0x8(%ebp),%eax
c002e784:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e787:	90                   	nop
c002e788:	e9 2c 01 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    }
    case SYS_MKDIR:
    {
      const char *name;
      mem_read(f->esp + 4, &name, sizeof(name));
c002e78d:	8b 45 08             	mov    0x8(%ebp),%eax
c002e790:	8b 40 48             	mov    0x48(%eax),%eax
c002e793:	8d 50 04             	lea    0x4(%eax),%edx
c002e796:	83 ec 04             	sub    $0x4,%esp
c002e799:	6a 04                	push   $0x4
c002e79b:	8d 45 84             	lea    -0x7c(%ebp),%eax
c002e79e:	50                   	push   %eax
c002e79f:	52                   	push   %edx
c002e7a0:	e8 e0 07 00 00       	call   c002ef85 <mem_read>
c002e7a5:	83 c4 10             	add    $0x10,%esp
     // printf("---SYS_MKDIR---%s\n", name);
      f->eax = sys_mkdir(name);
c002e7a8:	8b 45 84             	mov    -0x7c(%ebp),%eax
c002e7ab:	83 ec 0c             	sub    $0xc,%esp
c002e7ae:	50                   	push   %eax
c002e7af:	e8 12 09 00 00       	call   c002f0c6 <sys_mkdir>
c002e7b4:	83 c4 10             	add    $0x10,%esp
c002e7b7:	0f b6 d0             	movzbl %al,%edx
c002e7ba:	8b 45 08             	mov    0x8(%ebp),%eax
c002e7bd:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e7c0:	90                   	nop
c002e7c1:	e9 f3 00 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    }
    case SYS_READDIR:
    {
      int fd;
      char *name;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e7c6:	8b 45 08             	mov    0x8(%ebp),%eax
c002e7c9:	8b 40 48             	mov    0x48(%eax),%eax
c002e7cc:	8d 50 04             	lea    0x4(%eax),%edx
c002e7cf:	83 ec 04             	sub    $0x4,%esp
c002e7d2:	6a 04                	push   $0x4
c002e7d4:	8d 45 80             	lea    -0x80(%ebp),%eax
c002e7d7:	50                   	push   %eax
c002e7d8:	52                   	push   %edx
c002e7d9:	e8 a7 07 00 00       	call   c002ef85 <mem_read>
c002e7de:	83 c4 10             	add    $0x10,%esp
      mem_read(f->esp + 8, &name, sizeof(name));
c002e7e1:	8b 45 08             	mov    0x8(%ebp),%eax
c002e7e4:	8b 40 48             	mov    0x48(%eax),%eax
c002e7e7:	8d 50 08             	lea    0x8(%eax),%edx
c002e7ea:	83 ec 04             	sub    $0x4,%esp
c002e7ed:	6a 04                	push   $0x4
c002e7ef:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
c002e7f5:	50                   	push   %eax
c002e7f6:	52                   	push   %edx
c002e7f7:	e8 89 07 00 00       	call   c002ef85 <mem_read>
c002e7fc:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_readdir(fd, name);
c002e7ff:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c002e805:	8b 45 80             	mov    -0x80(%ebp),%eax
c002e808:	83 ec 08             	sub    $0x8,%esp
c002e80b:	52                   	push   %edx
c002e80c:	50                   	push   %eax
c002e80d:	e8 40 0a 00 00       	call   c002f252 <sys_readdir>
c002e812:	83 c4 10             	add    $0x10,%esp
c002e815:	0f b6 d0             	movzbl %al,%edx
c002e818:	8b 45 08             	mov    0x8(%ebp),%eax
c002e81b:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e81e:	90                   	nop
c002e81f:	e9 95 00 00 00       	jmp    c002e8b9 <syscall_handler+0x51b>
    }
    case SYS_ISDIR:
    {
      int fd;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e824:	8b 45 08             	mov    0x8(%ebp),%eax
c002e827:	8b 40 48             	mov    0x48(%eax),%eax
c002e82a:	8d 50 04             	lea    0x4(%eax),%edx
c002e82d:	83 ec 04             	sub    $0x4,%esp
c002e830:	6a 04                	push   $0x4
c002e832:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
c002e838:	50                   	push   %eax
c002e839:	52                   	push   %edx
c002e83a:	e8 46 07 00 00       	call   c002ef85 <mem_read>
c002e83f:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_isdir(fd);
c002e842:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c002e848:	83 ec 0c             	sub    $0xc,%esp
c002e84b:	50                   	push   %eax
c002e84c:	e8 fb 0a 00 00       	call   c002f34c <sys_isdir>
c002e851:	83 c4 10             	add    $0x10,%esp
c002e854:	0f b6 d0             	movzbl %al,%edx
c002e857:	8b 45 08             	mov    0x8(%ebp),%eax
c002e85a:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e85d:	90                   	nop
c002e85e:	eb 59                	jmp    c002e8b9 <syscall_handler+0x51b>
    }
    case SYS_INUMBER:
    {
      int fd;
      mem_read(f->esp + 4, &fd, sizeof(fd));
c002e860:	8b 45 08             	mov    0x8(%ebp),%eax
c002e863:	8b 40 48             	mov    0x48(%eax),%eax
c002e866:	8d 50 04             	lea    0x4(%eax),%edx
c002e869:	83 ec 04             	sub    $0x4,%esp
c002e86c:	6a 04                	push   $0x4
c002e86e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
c002e874:	50                   	push   %eax
c002e875:	52                   	push   %edx
c002e876:	e8 0a 07 00 00       	call   c002ef85 <mem_read>
c002e87b:	83 c4 10             	add    $0x10,%esp
      f->eax = sys_inumber(fd);
c002e87e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c002e884:	83 ec 0c             	sub    $0xc,%esp
c002e887:	50                   	push   %eax
c002e888:	e8 5c 0b 00 00       	call   c002f3e9 <sys_inumber>
c002e88d:	83 c4 10             	add    $0x10,%esp
c002e890:	89 c2                	mov    %eax,%edx
c002e892:	8b 45 08             	mov    0x8(%ebp),%eax
c002e895:	89 50 1c             	mov    %edx,0x1c(%eax)
      break;
c002e898:	90                   	nop
c002e899:	eb 1e                	jmp    c002e8b9 <syscall_handler+0x51b>
    }
#endif
    default:
      printf("[ERROR], forget add something!\n");
c002e89b:	83 ec 0c             	sub    $0xc,%esp
c002e89e:	68 dc 5a 03 c0       	push   $0xc0035adc
c002e8a3:	e8 49 df ff ff       	call   c002c7f1 <puts>
c002e8a8:	83 c4 10             	add    $0x10,%esp
      sys_exit(-1);
c002e8ab:	83 ec 0c             	sub    $0xc,%esp
c002e8ae:	6a ff                	push   $0xffffffff
c002e8b0:	e8 15 00 00 00       	call   c002e8ca <sys_exit>
c002e8b5:	83 c4 10             	add    $0x10,%esp
      break;
c002e8b8:	90                   	nop
  }
}
c002e8b9:	90                   	nop
c002e8ba:	c9                   	leave  
c002e8bb:	c3                   	ret    

c002e8bc <sys_halt>:

static void
sys_halt() {
c002e8bc:	55                   	push   %ebp
c002e8bd:	89 e5                	mov    %esp,%ebp
c002e8bf:	83 ec 08             	sub    $0x8,%esp
  shutdown_power_off();
c002e8c2:	e8 e4 91 ff ff       	call   c0027aab <shutdown_power_off>
}
c002e8c7:	90                   	nop
c002e8c8:	c9                   	leave  
c002e8c9:	c3                   	ret    

c002e8ca <sys_exit>:

void
sys_exit(int retVal) {
c002e8ca:	55                   	push   %ebp
c002e8cb:	89 e5                	mov    %esp,%ebp
c002e8cd:	83 ec 18             	sub    $0x18,%esp
  struct thread * cur_thread = thread_current();
c002e8d0:	e8 d3 25 ff ff       	call   c0020ea8 <thread_current>
c002e8d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  printf("%s: exit(%d)\n", cur_thread->name, retVal);
c002e8d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e8db:	83 c0 08             	add    $0x8,%eax
c002e8de:	83 ec 04             	sub    $0x4,%esp
c002e8e1:	ff 75 08             	pushl  0x8(%ebp)
c002e8e4:	50                   	push   %eax
c002e8e5:	68 4c 5b 03 c0       	push   $0xc0035b4c
c002e8ea:	e8 da 96 ff ff       	call   c0027fc9 <printf>
c002e8ef:	83 c4 10             	add    $0x10,%esp
  cur_thread->pcb->retVal = retVal;
c002e8f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e8f5:	8b 40 58             	mov    0x58(%eax),%eax
c002e8f8:	8b 55 08             	mov    0x8(%ebp),%edx
c002e8fb:	89 50 08             	mov    %edx,0x8(%eax)
  thread_exit ();
c002e8fe:	e8 25 26 ff ff       	call   c0020f28 <thread_exit>

c002e903 <sys_exec>:
  return -1;
}

static pid_t
sys_exec(const char *cmd_line){
c002e903:	55                   	push   %ebp
c002e904:	89 e5                	mov    %esp,%ebp
c002e906:	83 ec 18             	sub    $0x18,%esp
  // tid_t tid;
  check_valid_ptr((const uint8_t*) cmd_line);
c002e909:	83 ec 0c             	sub    $0xc,%esp
c002e90c:	ff 75 08             	pushl  0x8(%ebp)
c002e90f:	e8 31 06 00 00       	call   c002ef45 <check_valid_ptr>
c002e914:	83 c4 10             	add    $0x10,%esp
  char* ptr = cmd_line;
c002e917:	8b 45 08             	mov    0x8(%ebp),%eax
c002e91a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (*ptr != '\0') { 
c002e91d:	eb 11                	jmp    c002e930 <sys_exec+0x2d>
    ptr++;
c002e91f:	ff 45 f4             	incl   -0xc(%ebp)
    check_valid_ptr(ptr);
c002e922:	83 ec 0c             	sub    $0xc,%esp
c002e925:	ff 75 f4             	pushl  -0xc(%ebp)
c002e928:	e8 18 06 00 00       	call   c002ef45 <check_valid_ptr>
c002e92d:	83 c4 10             	add    $0x10,%esp
  while (*ptr != '\0') { 
c002e930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002e933:	8a 00                	mov    (%eax),%al
c002e935:	84 c0                	test   %al,%al
c002e937:	75 e6                	jne    c002e91f <sys_exec+0x1c>
  }
  check_valid_ptr(ptr);
c002e939:	83 ec 0c             	sub    $0xc,%esp
c002e93c:	ff 75 f4             	pushl  -0xc(%ebp)
c002e93f:	e8 01 06 00 00       	call   c002ef45 <check_valid_ptr>
c002e944:	83 c4 10             	add    $0x10,%esp
  // if (!is_user_vaddr(cmd_line))
  //   sys_exit(-1);
  lock_acquire(&fileSys_lock);
c002e947:	83 ec 0c             	sub    $0xc,%esp
c002e94a:	68 a0 61 04 c0       	push   $0xc00461a0
c002e94f:	e8 77 4b ff ff       	call   c00234cb <lock_acquire>
c002e954:	83 c4 10             	add    $0x10,%esp
  pid_t pid = process_execute(cmd_line);
c002e957:	83 ec 0c             	sub    $0xc,%esp
c002e95a:	ff 75 08             	pushl  0x8(%ebp)
c002e95d:	e8 04 e0 ff ff       	call   c002c966 <process_execute>
c002e962:	83 c4 10             	add    $0x10,%esp
c002e965:	89 45 f0             	mov    %eax,-0x10(%ebp)
  lock_release(&fileSys_lock);
c002e968:	83 ec 0c             	sub    $0xc,%esp
c002e96b:	68 a0 61 04 c0       	push   $0xc00461a0
c002e970:	e8 95 4d ff ff       	call   c002370a <lock_release>
c002e975:	83 c4 10             	add    $0x10,%esp
  return pid;
c002e978:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c002e97b:	c9                   	leave  
c002e97c:	c3                   	ret    

c002e97d <sys_write>:

static int 
sys_write(int fd, const void *buffer, unsigned size) {
c002e97d:	55                   	push   %ebp
c002e97e:	89 e5                	mov    %esp,%ebp
c002e980:	83 ec 18             	sub    $0x18,%esp
  check_valid_ptr((const uint8_t*) buffer);
c002e983:	83 ec 0c             	sub    $0xc,%esp
c002e986:	ff 75 0c             	pushl  0xc(%ebp)
c002e989:	e8 b7 05 00 00       	call   c002ef45 <check_valid_ptr>
c002e98e:	83 c4 10             	add    $0x10,%esp
  check_valid_ptr((const uint8_t*) buffer + size - 1);
c002e991:	8b 45 10             	mov    0x10(%ebp),%eax
c002e994:	8d 50 ff             	lea    -0x1(%eax),%edx
c002e997:	8b 45 0c             	mov    0xc(%ebp),%eax
c002e99a:	01 d0                	add    %edx,%eax
c002e99c:	83 ec 0c             	sub    $0xc,%esp
c002e99f:	50                   	push   %eax
c002e9a0:	e8 a0 05 00 00       	call   c002ef45 <check_valid_ptr>
c002e9a5:	83 c4 10             	add    $0x10,%esp

  lock_acquire (&fileSys_lock);
c002e9a8:	83 ec 0c             	sub    $0xc,%esp
c002e9ab:	68 a0 61 04 c0       	push   $0xc00461a0
c002e9b0:	e8 16 4b ff ff       	call   c00234cb <lock_acquire>
c002e9b5:	83 c4 10             	add    $0x10,%esp
  int res = -1;
c002e9b8:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if(fd == 1) { // stdout
c002e9bf:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c002e9c3:	75 19                	jne    c002e9de <sys_write+0x61>
    putbuf(buffer, size);
c002e9c5:	83 ec 08             	sub    $0x8,%esp
c002e9c8:	ff 75 10             	pushl  0x10(%ebp)
c002e9cb:	ff 75 0c             	pushl  0xc(%ebp)
c002e9ce:	e8 69 de ff ff       	call   c002c83c <putbuf>
c002e9d3:	83 c4 10             	add    $0x10,%esp
    res = size;
c002e9d6:	8b 45 10             	mov    0x10(%ebp),%eax
c002e9d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002e9dc:	eb 45                	jmp    c002ea23 <sys_write+0xa6>
  }
  else { // file
    struct file_descriptor* file = get_file_descriptor(thread_current(), fd, 1);
c002e9de:	e8 c5 24 ff ff       	call   c0020ea8 <thread_current>
c002e9e3:	83 ec 04             	sub    $0x4,%esp
c002e9e6:	6a 01                	push   $0x1
c002e9e8:	ff 75 08             	pushl  0x8(%ebp)
c002e9eb:	50                   	push   %eax
c002e9ec:	e8 b2 f8 ff ff       	call   c002e2a3 <get_file_descriptor>
c002e9f1:	83 c4 10             	add    $0x10,%esp
c002e9f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (file && file->file) //file should be opened by cur thread
c002e9f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002e9fb:	74 26                	je     c002ea23 <sys_write+0xa6>
c002e9fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ea00:	8b 40 04             	mov    0x4(%eax),%eax
c002ea03:	85 c0                	test   %eax,%eax
c002ea05:	74 1c                	je     c002ea23 <sys_write+0xa6>
    {
#ifdef VM
        preload_pin_pages(buffer, size);
#endif
        res = file_write(file->file, buffer, size);
c002ea07:	8b 55 10             	mov    0x10(%ebp),%edx
c002ea0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ea0d:	8b 40 04             	mov    0x4(%eax),%eax
c002ea10:	83 ec 04             	sub    $0x4,%esp
c002ea13:	52                   	push   %edx
c002ea14:	ff 75 0c             	pushl  0xc(%ebp)
c002ea17:	50                   	push   %eax
c002ea18:	e8 fd 15 00 00       	call   c003001a <file_write>
c002ea1d:	83 c4 10             	add    $0x10,%esp
c002ea20:	89 45 f4             	mov    %eax,-0xc(%ebp)
#ifdef VM
        preload_unpin_pages(buffer, size);
#endif
    }
  }
  lock_release (&fileSys_lock);
c002ea23:	83 ec 0c             	sub    $0xc,%esp
c002ea26:	68 a0 61 04 c0       	push   $0xc00461a0
c002ea2b:	e8 da 4c ff ff       	call   c002370a <lock_release>
c002ea30:	83 c4 10             	add    $0x10,%esp
  return res;
c002ea33:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002ea36:	c9                   	leave  
c002ea37:	c3                   	ret    

c002ea38 <sys_create>:

static bool
sys_create (const char *file, unsigned initial_size)
{
c002ea38:	55                   	push   %ebp
c002ea39:	89 e5                	mov    %esp,%ebp
c002ea3b:	83 ec 18             	sub    $0x18,%esp
  check_valid_ptr(file);
c002ea3e:	83 ec 0c             	sub    $0xc,%esp
c002ea41:	ff 75 08             	pushl  0x8(%ebp)
c002ea44:	e8 fc 04 00 00       	call   c002ef45 <check_valid_ptr>
c002ea49:	83 c4 10             	add    $0x10,%esp
  lock_acquire(&fileSys_lock);
c002ea4c:	83 ec 0c             	sub    $0xc,%esp
c002ea4f:	68 a0 61 04 c0       	push   $0xc00461a0
c002ea54:	e8 72 4a ff ff       	call   c00234cb <lock_acquire>
c002ea59:	83 c4 10             	add    $0x10,%esp
  bool res = filesys_create(file, initial_size);
c002ea5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c002ea5f:	83 ec 08             	sub    $0x8,%esp
c002ea62:	50                   	push   %eax
c002ea63:	ff 75 08             	pushl  0x8(%ebp)
c002ea66:	e8 05 0e 00 00       	call   c002f870 <filesys_create>
c002ea6b:	83 c4 10             	add    $0x10,%esp
c002ea6e:	88 45 f7             	mov    %al,-0x9(%ebp)
  lock_release(&fileSys_lock);
c002ea71:	83 ec 0c             	sub    $0xc,%esp
c002ea74:	68 a0 61 04 c0       	push   $0xc00461a0
c002ea79:	e8 8c 4c ff ff       	call   c002370a <lock_release>
c002ea7e:	83 c4 10             	add    $0x10,%esp
  return res;
c002ea81:	8a 45 f7             	mov    -0x9(%ebp),%al
}
c002ea84:	c9                   	leave  
c002ea85:	c3                   	ret    

c002ea86 <sys_wait>:


static int 
sys_wait (pid_t pid) {
c002ea86:	55                   	push   %ebp
c002ea87:	89 e5                	mov    %esp,%ebp
c002ea89:	83 ec 08             	sub    $0x8,%esp
  return process_wait(pid);
c002ea8c:	83 ec 0c             	sub    $0xc,%esp
c002ea8f:	ff 75 08             	pushl  0x8(%ebp)
c002ea92:	e8 d5 e2 ff ff       	call   c002cd6c <process_wait>
c002ea97:	83 c4 10             	add    $0x10,%esp
}
c002ea9a:	c9                   	leave  
c002ea9b:	c3                   	ret    

c002ea9c <sys_remove>:

static bool 
sys_remove(const char* file) {
c002ea9c:	55                   	push   %ebp
c002ea9d:	89 e5                	mov    %esp,%ebp
c002ea9f:	83 ec 18             	sub    $0x18,%esp
  check_valid_ptr(file);
c002eaa2:	83 ec 0c             	sub    $0xc,%esp
c002eaa5:	ff 75 08             	pushl  0x8(%ebp)
c002eaa8:	e8 98 04 00 00       	call   c002ef45 <check_valid_ptr>
c002eaad:	83 c4 10             	add    $0x10,%esp
  lock_acquire(&fileSys_lock);
c002eab0:	83 ec 0c             	sub    $0xc,%esp
c002eab3:	68 a0 61 04 c0       	push   $0xc00461a0
c002eab8:	e8 0e 4a ff ff       	call   c00234cb <lock_acquire>
c002eabd:	83 c4 10             	add    $0x10,%esp
  bool res = filesys_remove(file);
c002eac0:	83 ec 0c             	sub    $0xc,%esp
c002eac3:	ff 75 08             	pushl  0x8(%ebp)
c002eac6:	e8 2e 10 00 00       	call   c002faf9 <filesys_remove>
c002eacb:	83 c4 10             	add    $0x10,%esp
c002eace:	88 45 f7             	mov    %al,-0x9(%ebp)
  lock_release(&fileSys_lock);
c002ead1:	83 ec 0c             	sub    $0xc,%esp
c002ead4:	68 a0 61 04 c0       	push   $0xc00461a0
c002ead9:	e8 2c 4c ff ff       	call   c002370a <lock_release>
c002eade:	83 c4 10             	add    $0x10,%esp
  return res;
c002eae1:	8a 45 f7             	mov    -0x9(%ebp),%al
}
c002eae4:	c9                   	leave  
c002eae5:	c3                   	ret    

c002eae6 <sys_open>:

static int 
sys_open(const char* file) {
c002eae6:	55                   	push   %ebp
c002eae7:	89 e5                	mov    %esp,%ebp
c002eae9:	83 ec 28             	sub    $0x28,%esp
  check_valid_ptr(file);
c002eaec:	83 ec 0c             	sub    $0xc,%esp
c002eaef:	ff 75 08             	pushl  0x8(%ebp)
c002eaf2:	e8 4e 04 00 00       	call   c002ef45 <check_valid_ptr>
c002eaf7:	83 c4 10             	add    $0x10,%esp
  int res = -1;
c002eafa:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  struct file_descriptor* file_desc = palloc_get_page(0);
c002eb01:	83 ec 0c             	sub    $0xc,%esp
c002eb04:	6a 00                	push   $0x0
c002eb06:	e8 98 52 ff ff       	call   c0023da3 <palloc_get_page>
c002eb0b:	83 c4 10             	add    $0x10,%esp
c002eb0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  if (file_desc == NULL) // not enough space
c002eb11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002eb15:	75 0a                	jne    c002eb21 <sys_open+0x3b>
    return -1;
c002eb17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002eb1c:	e9 27 01 00 00       	jmp    c002ec48 <sys_open+0x162>

  lock_acquire (&fileSys_lock);
c002eb21:	83 ec 0c             	sub    $0xc,%esp
c002eb24:	68 a0 61 04 c0       	push   $0xc00461a0
c002eb29:	e8 9d 49 ff ff       	call   c00234cb <lock_acquire>
c002eb2e:	83 c4 10             	add    $0x10,%esp
  struct file* File;
  File = filesys_open(file);
c002eb31:	83 ec 0c             	sub    $0xc,%esp
c002eb34:	ff 75 08             	pushl  0x8(%ebp)
c002eb37:	e8 7b 0e 00 00       	call   c002f9b7 <filesys_open>
c002eb3c:	83 c4 10             	add    $0x10,%esp
c002eb3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!File) { // open failure
c002eb42:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002eb46:	75 1a                	jne    c002eb62 <sys_open+0x7c>
    palloc_free_page (file_desc);
c002eb48:	83 ec 0c             	sub    $0xc,%esp
c002eb4b:	ff 75 f0             	pushl  -0x10(%ebp)
c002eb4e:	e8 a8 53 ff ff       	call   c0023efb <palloc_free_page>
c002eb53:	83 c4 10             	add    $0x10,%esp
    res = -1;
c002eb56:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
    goto done;
c002eb5d:	e9 d3 00 00 00       	jmp    c002ec35 <sys_open+0x14f>
  }
  // set file_descriptor
  file_desc->file = File;
c002eb62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002eb65:	8b 55 ec             	mov    -0x14(%ebp),%edx
c002eb68:	89 50 04             	mov    %edx,0x4(%eax)

  //judge whether a directory
  struct inode *inode = file_get_inode(file_desc->file);
c002eb6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002eb6e:	8b 40 04             	mov    0x4(%eax),%eax
c002eb71:	83 ec 0c             	sub    $0xc,%esp
c002eb74:	50                   	push   %eax
c002eb75:	e8 3d 14 00 00       	call   c002ffb7 <file_get_inode>
c002eb7a:	83 c4 10             	add    $0x10,%esp
c002eb7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (inode != NULL && inode_dir(inode)) 
c002eb80:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c002eb84:	74 36                	je     c002ebbc <sys_open+0xd6>
c002eb86:	83 ec 0c             	sub    $0xc,%esp
c002eb89:	ff 75 e8             	pushl  -0x18(%ebp)
c002eb8c:	e8 88 31 00 00       	call   c0031d19 <inode_dir>
c002eb91:	83 c4 10             	add    $0x10,%esp
c002eb94:	85 c0                	test   %eax,%eax
c002eb96:	74 24                	je     c002ebbc <sys_open+0xd6>
    file_desc -> dir = dir_open(inode_reopen(inode));
c002eb98:	83 ec 0c             	sub    $0xc,%esp
c002eb9b:	ff 75 e8             	pushl  -0x18(%ebp)
c002eb9e:	e8 bb 2a 00 00       	call   c003165e <inode_reopen>
c002eba3:	83 c4 10             	add    $0x10,%esp
c002eba6:	83 ec 0c             	sub    $0xc,%esp
c002eba9:	50                   	push   %eax
c002ebaa:	e8 50 1c 00 00       	call   c00307ff <dir_open>
c002ebaf:	83 c4 10             	add    $0x10,%esp
c002ebb2:	89 c2                	mov    %eax,%edx
c002ebb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ebb7:	89 50 10             	mov    %edx,0x10(%eax)
c002ebba:	eb 0a                	jmp    c002ebc6 <sys_open+0xe0>
  else 
    file_desc -> dir = NULL;
c002ebbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ebbf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

  struct list* opened_files = &thread_current()->opened_files;
c002ebc6:	e8 dd 22 ff ff       	call   c0020ea8 <thread_current>
c002ebcb:	83 c0 44             	add    $0x44,%eax
c002ebce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (list_empty(opened_files)) // first opened file
c002ebd1:	83 ec 0c             	sub    $0xc,%esp
c002ebd4:	ff 75 e4             	pushl  -0x1c(%ebp)
c002ebd7:	e8 49 c1 ff ff       	call   c002ad25 <list_empty>
c002ebdc:	83 c4 10             	add    $0x10,%esp
c002ebdf:	84 c0                	test   %al,%al
c002ebe1:	74 0b                	je     c002ebee <sys_open+0x108>
    file_desc->fdID = 3; // 0, 1, 2 reserved
c002ebe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ebe6:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
c002ebec:	eb 2a                	jmp    c002ec18 <sys_open+0x132>
  else {
    struct list_elem* last_opened_elem = list_back(opened_files);
c002ebee:	83 ec 0c             	sub    $0xc,%esp
c002ebf1:	ff 75 e4             	pushl  -0x1c(%ebp)
c002ebf4:	e8 9b c0 ff ff       	call   c002ac94 <list_back>
c002ebf9:	83 c4 10             	add    $0x10,%esp
c002ebfc:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct file_descriptor* last_opend = list_entry(last_opened_elem, struct file_descriptor, elem);
c002ebff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002ec02:	83 c0 04             	add    $0x4,%eax
c002ec05:	83 e8 0c             	sub    $0xc,%eax
c002ec08:	89 45 dc             	mov    %eax,-0x24(%ebp)
    file_desc->fdID = last_opend->fdID + 1;
c002ec0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002ec0e:	8b 00                	mov    (%eax),%eax
c002ec10:	8d 50 01             	lea    0x1(%eax),%edx
c002ec13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ec16:	89 10                	mov    %edx,(%eax)
  }    
  res = file_desc->fdID;
c002ec18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ec1b:	8b 00                	mov    (%eax),%eax
c002ec1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  // push to opend files
  list_push_back(opened_files, &(file_desc->elem));
c002ec20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ec23:	83 c0 08             	add    $0x8,%eax
c002ec26:	83 ec 08             	sub    $0x8,%esp
c002ec29:	50                   	push   %eax
c002ec2a:	ff 75 e4             	pushl  -0x1c(%ebp)
c002ec2d:	e8 4b bf ff ff       	call   c002ab7d <list_push_back>
c002ec32:	83 c4 10             	add    $0x10,%esp
done:
  lock_release (&fileSys_lock);
c002ec35:	83 ec 0c             	sub    $0xc,%esp
c002ec38:	68 a0 61 04 c0       	push   $0xc00461a0
c002ec3d:	e8 c8 4a ff ff       	call   c002370a <lock_release>
c002ec42:	83 c4 10             	add    $0x10,%esp
  return res;
c002ec45:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002ec48:	c9                   	leave  
c002ec49:	c3                   	ret    

c002ec4a <sys_filesize>:

static int 
sys_filesize(int fd) { // fd should be opend by cur thread
c002ec4a:	55                   	push   %ebp
c002ec4b:	89 e5                	mov    %esp,%ebp
c002ec4d:	83 ec 18             	sub    $0x18,%esp
  lock_acquire (&fileSys_lock);
c002ec50:	83 ec 0c             	sub    $0xc,%esp
c002ec53:	68 a0 61 04 c0       	push   $0xc00461a0
c002ec58:	e8 6e 48 ff ff       	call   c00234cb <lock_acquire>
c002ec5d:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* file = get_file_descriptor(thread_current(), fd, 0);
c002ec60:	e8 43 22 ff ff       	call   c0020ea8 <thread_current>
c002ec65:	83 ec 04             	sub    $0x4,%esp
c002ec68:	6a 00                	push   $0x0
c002ec6a:	ff 75 08             	pushl  0x8(%ebp)
c002ec6d:	50                   	push   %eax
c002ec6e:	e8 30 f6 ff ff       	call   c002e2a3 <get_file_descriptor>
c002ec73:	83 c4 10             	add    $0x10,%esp
c002ec76:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int res = -1;
c002ec79:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if (file != NULL) 
c002ec80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002ec84:	74 15                	je     c002ec9b <sys_filesize+0x51>
    res = file_length(file->file);
c002ec86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ec89:	8b 40 04             	mov    0x4(%eax),%eax
c002ec8c:	83 ec 0c             	sub    $0xc,%esp
c002ec8f:	50                   	push   %eax
c002ec90:	e8 84 14 00 00       	call   c0030119 <file_length>
c002ec95:	83 c4 10             	add    $0x10,%esp
c002ec98:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_release (&fileSys_lock);
c002ec9b:	83 ec 0c             	sub    $0xc,%esp
c002ec9e:	68 a0 61 04 c0       	push   $0xc00461a0
c002eca3:	e8 62 4a ff ff       	call   c002370a <lock_release>
c002eca8:	83 c4 10             	add    $0x10,%esp
  return res;
c002ecab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002ecae:	c9                   	leave  
c002ecaf:	c3                   	ret    

c002ecb0 <sys_read>:

static int 
sys_read(int fd, void *buffer, unsigned size) {
c002ecb0:	55                   	push   %ebp
c002ecb1:	89 e5                	mov    %esp,%ebp
c002ecb3:	83 ec 18             	sub    $0x18,%esp
  // check valid
  check_valid_ptr(buffer);
c002ecb6:	83 ec 0c             	sub    $0xc,%esp
c002ecb9:	ff 75 0c             	pushl  0xc(%ebp)
c002ecbc:	e8 84 02 00 00       	call   c002ef45 <check_valid_ptr>
c002ecc1:	83 c4 10             	add    $0x10,%esp
  check_valid_ptr(buffer + size - 1);
c002ecc4:	8b 45 10             	mov    0x10(%ebp),%eax
c002ecc7:	8d 50 ff             	lea    -0x1(%eax),%edx
c002ecca:	8b 45 0c             	mov    0xc(%ebp),%eax
c002eccd:	01 d0                	add    %edx,%eax
c002eccf:	83 ec 0c             	sub    $0xc,%esp
c002ecd2:	50                   	push   %eax
c002ecd3:	e8 6d 02 00 00       	call   c002ef45 <check_valid_ptr>
c002ecd8:	83 c4 10             	add    $0x10,%esp
  lock_acquire(&fileSys_lock);
c002ecdb:	83 ec 0c             	sub    $0xc,%esp
c002ecde:	68 a0 61 04 c0       	push   $0xc00461a0
c002ece3:	e8 e3 47 ff ff       	call   c00234cb <lock_acquire>
c002ece8:	83 c4 10             	add    $0x10,%esp
  
  int res = -1;
c002eceb:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if (fd == 0) { // stdin
c002ecf2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002ecf6:	75 5d                	jne    c002ed55 <sys_read+0xa5>
    for (int i = 0; i < size; ++i) {
c002ecf8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c002ecff:	eb 44                	jmp    c002ed45 <sys_read+0x95>
      if(! put_user(buffer + i, input_getc())){
c002ed01:	e8 cc 85 ff ff       	call   c00272d2 <input_getc>
c002ed06:	0f b6 c0             	movzbl %al,%eax
c002ed09:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c002ed0c:	8b 55 0c             	mov    0xc(%ebp),%edx
c002ed0f:	01 ca                	add    %ecx,%edx
c002ed11:	83 ec 08             	sub    $0x8,%esp
c002ed14:	50                   	push   %eax
c002ed15:	52                   	push   %edx
c002ed16:	e8 f2 02 00 00       	call   c002f00d <put_user>
c002ed1b:	83 c4 10             	add    $0x10,%esp
c002ed1e:	83 f0 01             	xor    $0x1,%eax
c002ed21:	84 c0                	test   %al,%al
c002ed23:	74 1d                	je     c002ed42 <sys_read+0x92>
        lock_release (&fileSys_lock);
c002ed25:	83 ec 0c             	sub    $0xc,%esp
c002ed28:	68 a0 61 04 c0       	push   $0xc00461a0
c002ed2d:	e8 d8 49 ff ff       	call   c002370a <lock_release>
c002ed32:	83 c4 10             	add    $0x10,%esp
        sys_exit(-1); // segfault
c002ed35:	83 ec 0c             	sub    $0xc,%esp
c002ed38:	6a ff                	push   $0xffffffff
c002ed3a:	e8 8b fb ff ff       	call   c002e8ca <sys_exit>
c002ed3f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < size; ++i) {
c002ed42:	ff 45 f0             	incl   -0x10(%ebp)
c002ed45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ed48:	3b 45 10             	cmp    0x10(%ebp),%eax
c002ed4b:	72 b4                	jb     c002ed01 <sys_read+0x51>
      }
    }
    res = size;
c002ed4d:	8b 45 10             	mov    0x10(%ebp),%eax
c002ed50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ed53:	eb 4e                	jmp    c002eda3 <sys_read+0xf3>
  } else {
    // fd should be opened
    struct file_descriptor* fileD = get_file_descriptor(thread_current(), fd, 0); 
c002ed55:	e8 4e 21 ff ff       	call   c0020ea8 <thread_current>
c002ed5a:	83 ec 04             	sub    $0x4,%esp
c002ed5d:	6a 00                	push   $0x0
c002ed5f:	ff 75 08             	pushl  0x8(%ebp)
c002ed62:	50                   	push   %eax
c002ed63:	e8 3b f5 ff ff       	call   c002e2a3 <get_file_descriptor>
c002ed68:	83 c4 10             	add    $0x10,%esp
c002ed6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (fileD == NULL || fileD->file == NULL)
c002ed6e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002ed72:	74 0a                	je     c002ed7e <sys_read+0xce>
c002ed74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ed77:	8b 40 04             	mov    0x4(%eax),%eax
c002ed7a:	85 c0                	test   %eax,%eax
c002ed7c:	75 09                	jne    c002ed87 <sys_read+0xd7>
      res = -1;
c002ed7e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
c002ed85:	eb 1c                	jmp    c002eda3 <sys_read+0xf3>
    else {
#ifdef VM
        preload_pin_pages(buffer, size);
#endif
      res = file_read(fileD->file, buffer, size);
c002ed87:	8b 55 10             	mov    0x10(%ebp),%edx
c002ed8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002ed8d:	8b 40 04             	mov    0x4(%eax),%eax
c002ed90:	83 ec 04             	sub    $0x4,%esp
c002ed93:	52                   	push   %edx
c002ed94:	ff 75 0c             	pushl  0xc(%ebp)
c002ed97:	50                   	push   %eax
c002ed98:	e8 24 12 00 00       	call   c002ffc1 <file_read>
c002ed9d:	83 c4 10             	add    $0x10,%esp
c002eda0:	89 45 f4             	mov    %eax,-0xc(%ebp)
#ifdef VM
      preload_unpin_pages(buffer, size);
#endif
    }
  }
  lock_release(&fileSys_lock);
c002eda3:	83 ec 0c             	sub    $0xc,%esp
c002eda6:	68 a0 61 04 c0       	push   $0xc00461a0
c002edab:	e8 5a 49 ff ff       	call   c002370a <lock_release>
c002edb0:	83 c4 10             	add    $0x10,%esp
  return res;
c002edb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002edb6:	c9                   	leave  
c002edb7:	c3                   	ret    

c002edb8 <sys_seek>:

static void 
sys_seek(int fd, unsigned position) {
c002edb8:	55                   	push   %ebp
c002edb9:	89 e5                	mov    %esp,%ebp
c002edbb:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002edbe:	83 ec 0c             	sub    $0xc,%esp
c002edc1:	68 a0 61 04 c0       	push   $0xc00461a0
c002edc6:	e8 00 47 ff ff       	call   c00234cb <lock_acquire>
c002edcb:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fileD = get_file_descriptor(thread_current(), fd, 0); 
c002edce:	e8 d5 20 ff ff       	call   c0020ea8 <thread_current>
c002edd3:	83 ec 04             	sub    $0x4,%esp
c002edd6:	6a 00                	push   $0x0
c002edd8:	ff 75 08             	pushl  0x8(%ebp)
c002eddb:	50                   	push   %eax
c002eddc:	e8 c2 f4 ff ff       	call   c002e2a3 <get_file_descriptor>
c002ede1:	83 c4 10             	add    $0x10,%esp
c002ede4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fileD && fileD->file) {
c002ede7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002edeb:	74 22                	je     c002ee0f <sys_seek+0x57>
c002eded:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002edf0:	8b 40 04             	mov    0x4(%eax),%eax
c002edf3:	85 c0                	test   %eax,%eax
c002edf5:	74 18                	je     c002ee0f <sys_seek+0x57>
    file_seek(fileD->file, position);
c002edf7:	8b 55 0c             	mov    0xc(%ebp),%edx
c002edfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002edfd:	8b 40 04             	mov    0x4(%eax),%eax
c002ee00:	83 ec 08             	sub    $0x8,%esp
c002ee03:	52                   	push   %edx
c002ee04:	50                   	push   %eax
c002ee05:	e8 4f 13 00 00       	call   c0030159 <file_seek>
c002ee0a:	83 c4 10             	add    $0x10,%esp
c002ee0d:	eb 1d                	jmp    c002ee2c <sys_seek+0x74>
  } 
  else  {
    lock_release(&fileSys_lock);
c002ee0f:	83 ec 0c             	sub    $0xc,%esp
c002ee12:	68 a0 61 04 c0       	push   $0xc00461a0
c002ee17:	e8 ee 48 ff ff       	call   c002370a <lock_release>
c002ee1c:	83 c4 10             	add    $0x10,%esp
    sys_exit(-1);
c002ee1f:	83 ec 0c             	sub    $0xc,%esp
c002ee22:	6a ff                	push   $0xffffffff
c002ee24:	e8 a1 fa ff ff       	call   c002e8ca <sys_exit>
c002ee29:	83 c4 10             	add    $0x10,%esp
  }
  lock_release(&fileSys_lock);
c002ee2c:	83 ec 0c             	sub    $0xc,%esp
c002ee2f:	68 a0 61 04 c0       	push   $0xc00461a0
c002ee34:	e8 d1 48 ff ff       	call   c002370a <lock_release>
c002ee39:	83 c4 10             	add    $0x10,%esp
}
c002ee3c:	90                   	nop
c002ee3d:	c9                   	leave  
c002ee3e:	c3                   	ret    

c002ee3f <sys_tell>:

static unsigned 
sys_tell(int fd) {
c002ee3f:	55                   	push   %ebp
c002ee40:	89 e5                	mov    %esp,%ebp
c002ee42:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002ee45:	83 ec 0c             	sub    $0xc,%esp
c002ee48:	68 a0 61 04 c0       	push   $0xc00461a0
c002ee4d:	e8 79 46 ff ff       	call   c00234cb <lock_acquire>
c002ee52:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fileD = get_file_descriptor(thread_current(), fd, 0); 
c002ee55:	e8 4e 20 ff ff       	call   c0020ea8 <thread_current>
c002ee5a:	83 ec 04             	sub    $0x4,%esp
c002ee5d:	6a 00                	push   $0x0
c002ee5f:	ff 75 08             	pushl  0x8(%ebp)
c002ee62:	50                   	push   %eax
c002ee63:	e8 3b f4 ff ff       	call   c002e2a3 <get_file_descriptor>
c002ee68:	83 c4 10             	add    $0x10,%esp
c002ee6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  unsigned res = -1;
c002ee6e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if (fileD && fileD->file) 
c002ee75:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002ee79:	74 1f                	je     c002ee9a <sys_tell+0x5b>
c002ee7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ee7e:	8b 40 04             	mov    0x4(%eax),%eax
c002ee81:	85 c0                	test   %eax,%eax
c002ee83:	74 15                	je     c002ee9a <sys_tell+0x5b>
    res = file_tell(fileD->file);
c002ee85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002ee88:	8b 40 04             	mov    0x4(%eax),%eax
c002ee8b:	83 ec 0c             	sub    $0xc,%esp
c002ee8e:	50                   	push   %eax
c002ee8f:	e8 25 13 00 00       	call   c00301b9 <file_tell>
c002ee94:	83 c4 10             	add    $0x10,%esp
c002ee97:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_release(&fileSys_lock);
c002ee9a:	83 ec 0c             	sub    $0xc,%esp
c002ee9d:	68 a0 61 04 c0       	push   $0xc00461a0
c002eea2:	e8 63 48 ff ff       	call   c002370a <lock_release>
c002eea7:	83 c4 10             	add    $0x10,%esp
  return res;
c002eeaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c002eead:	c9                   	leave  
c002eeae:	c3                   	ret    

c002eeaf <sys_close>:

static void 
sys_close(int fd) {
c002eeaf:	55                   	push   %ebp
c002eeb0:	89 e5                	mov    %esp,%ebp
c002eeb2:	83 ec 18             	sub    $0x18,%esp
  struct file_descriptor* file = get_file_descriptor(thread_current(), fd, 0);
c002eeb5:	e8 ee 1f ff ff       	call   c0020ea8 <thread_current>
c002eeba:	83 ec 04             	sub    $0x4,%esp
c002eebd:	6a 00                	push   $0x0
c002eebf:	ff 75 08             	pushl  0x8(%ebp)
c002eec2:	50                   	push   %eax
c002eec3:	e8 db f3 ff ff       	call   c002e2a3 <get_file_descriptor>
c002eec8:	83 c4 10             	add    $0x10,%esp
c002eecb:	89 45 f4             	mov    %eax,-0xc(%ebp)
  lock_acquire (&fileSys_lock);
c002eece:	83 ec 0c             	sub    $0xc,%esp
c002eed1:	68 a0 61 04 c0       	push   $0xc00461a0
c002eed6:	e8 f0 45 ff ff       	call   c00234cb <lock_acquire>
c002eedb:	83 c4 10             	add    $0x10,%esp
  if (file) {
c002eede:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002eee2:	74 4e                	je     c002ef32 <sys_close+0x83>
    file_close(file->file);
c002eee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002eee7:	8b 40 04             	mov    0x4(%eax),%eax
c002eeea:	83 ec 0c             	sub    $0xc,%esp
c002eeed:	50                   	push   %eax
c002eeee:	e8 88 10 00 00       	call   c002ff7b <file_close>
c002eef3:	83 c4 10             	add    $0x10,%esp
    if (file->dir) dir_close(file->dir);
c002eef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002eef9:	8b 40 10             	mov    0x10(%eax),%eax
c002eefc:	85 c0                	test   %eax,%eax
c002eefe:	74 12                	je     c002ef12 <sys_close+0x63>
c002ef00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ef03:	8b 40 10             	mov    0x10(%eax),%eax
c002ef06:	83 ec 0c             	sub    $0xc,%esp
c002ef09:	50                   	push   %eax
c002ef0a:	e8 43 1b 00 00       	call   c0030a52 <dir_close>
c002ef0f:	83 c4 10             	add    $0x10,%esp
    list_remove(&(file->elem));
c002ef12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ef15:	83 c0 08             	add    $0x8,%eax
c002ef18:	83 ec 0c             	sub    $0xc,%esp
c002ef1b:	50                   	push   %eax
c002ef1c:	e8 82 bc ff ff       	call   c002aba3 <list_remove>
c002ef21:	83 c4 10             	add    $0x10,%esp
    palloc_free_page(file);
c002ef24:	83 ec 0c             	sub    $0xc,%esp
c002ef27:	ff 75 f4             	pushl  -0xc(%ebp)
c002ef2a:	e8 cc 4f ff ff       	call   c0023efb <palloc_free_page>
c002ef2f:	83 c4 10             	add    $0x10,%esp
  }
  lock_release (&fileSys_lock);
c002ef32:	83 ec 0c             	sub    $0xc,%esp
c002ef35:	68 a0 61 04 c0       	push   $0xc00461a0
c002ef3a:	e8 cb 47 ff ff       	call   c002370a <lock_release>
c002ef3f:	83 c4 10             	add    $0x10,%esp
}
c002ef42:	90                   	nop
c002ef43:	c9                   	leave  
c002ef44:	c3                   	ret    

c002ef45 <check_valid_ptr>:

/*****************************************************************/
static void
check_valid_ptr(const uint8_t *uaddr) {
c002ef45:	55                   	push   %ebp
c002ef46:	89 e5                	mov    %esp,%ebp
c002ef48:	83 ec 18             	sub    $0x18,%esp
  if (uaddr == NULL)
c002ef4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002ef4f:	75 0d                	jne    c002ef5e <check_valid_ptr+0x19>
    sys_exit(-1);
c002ef51:	83 ec 0c             	sub    $0xc,%esp
c002ef54:	6a ff                	push   $0xffffffff
c002ef56:	e8 6f f9 ff ff       	call   c002e8ca <sys_exit>
c002ef5b:	83 c4 10             	add    $0x10,%esp
  int res = get_user(uaddr);
c002ef5e:	83 ec 0c             	sub    $0xc,%esp
c002ef61:	ff 75 08             	pushl  0x8(%ebp)
c002ef64:	e8 72 00 00 00       	call   c002efdb <get_user>
c002ef69:	83 c4 10             	add    $0x10,%esp
c002ef6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (res == -1) // page fault || seg fault
c002ef6f:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c002ef73:	75 0d                	jne    c002ef82 <check_valid_ptr+0x3d>
    sys_exit (-1);
c002ef75:	83 ec 0c             	sub    $0xc,%esp
c002ef78:	6a ff                	push   $0xffffffff
c002ef7a:	e8 4b f9 ff ff       	call   c002e8ca <sys_exit>
c002ef7f:	83 c4 10             	add    $0x10,%esp
}
c002ef82:	90                   	nop
c002ef83:	c9                   	leave  
c002ef84:	c3                   	ret    

c002ef85 <mem_read>:

// read "bytes" data from *from* and put it to writeTo
static int
mem_read(void *from, void* writeTo, int bytes) {
c002ef85:	55                   	push   %ebp
c002ef86:	89 e5                	mov    %esp,%ebp
c002ef88:	83 ec 18             	sub    $0x18,%esp
  int32_t res;
  int i;
  for(i = 0; i < bytes; i++) {
c002ef8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c002ef92:	eb 3a                	jmp    c002efce <mem_read+0x49>
    res = get_user(from + i);
c002ef94:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002ef97:	8b 45 08             	mov    0x8(%ebp),%eax
c002ef9a:	01 d0                	add    %edx,%eax
c002ef9c:	83 ec 0c             	sub    $0xc,%esp
c002ef9f:	50                   	push   %eax
c002efa0:	e8 36 00 00 00       	call   c002efdb <get_user>
c002efa5:	83 c4 10             	add    $0x10,%esp
c002efa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (res == -1) // segfault or invalid memory access
c002efab:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c002efaf:	75 0d                	jne    c002efbe <mem_read+0x39>
      sys_exit(-1);
c002efb1:	83 ec 0c             	sub    $0xc,%esp
c002efb4:	6a ff                	push   $0xffffffff
c002efb6:	e8 0f f9 ff ff       	call   c002e8ca <sys_exit>
c002efbb:	83 c4 10             	add    $0x10,%esp
    *(char*)(writeTo + i) = res & 0xff;
c002efbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002efc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c002efc4:	01 d0                	add    %edx,%eax
c002efc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c002efc9:	88 10                	mov    %dl,(%eax)
  for(i = 0; i < bytes; i++) {
c002efcb:	ff 45 f4             	incl   -0xc(%ebp)
c002efce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002efd1:	3b 45 10             	cmp    0x10(%ebp),%eax
c002efd4:	7c be                	jl     c002ef94 <mem_read+0xf>
  }
  return (int) bytes;
c002efd6:	8b 45 10             	mov    0x10(%ebp),%eax
}
c002efd9:	c9                   	leave  
c002efda:	c3                   	ret    

c002efdb <get_user>:
 * 'uaddr' must be below PHYS_BASE.
 * Returns the byte value if successful (extract the least significant byte),
 * or -1 in case of error (a segfault occurred or invalid uaddr)
 */
static int32_t
get_user (const uint8_t *uaddr) {
c002efdb:	55                   	push   %ebp
c002efdc:	89 e5                	mov    %esp,%ebp
c002efde:	83 ec 10             	sub    $0x10,%esp
  // check valid 
  if (!is_user_vaddr(uaddr)) {
c002efe1:	ff 75 08             	pushl  0x8(%ebp)
c002efe4:	e8 ab f2 ff ff       	call   c002e294 <is_user_vaddr>
c002efe9:	83 c4 04             	add    $0x4,%esp
c002efec:	83 f0 01             	xor    $0x1,%eax
c002efef:	84 c0                	test   %al,%al
c002eff1:	74 07                	je     c002effa <get_user+0x1f>
    return -1;
c002eff3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c002eff8:	eb 11                	jmp    c002f00b <get_user+0x30>
  }

  int result;
  asm ("movl $1f, %0; movzbl %1, %0; 1:"
c002effa:	8b 55 08             	mov    0x8(%ebp),%edx
c002effd:	b8 05 f0 02 c0       	mov    $0xc002f005,%eax
c002f002:	0f b6 02             	movzbl (%edx),%eax
c002f005:	89 45 fc             	mov    %eax,-0x4(%ebp)
      : "=&a" (result) : "m" (*uaddr));
  return result;
c002f008:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c002f00b:	c9                   	leave  
c002f00c:	c3                   	ret    

c002f00d <put_user>:
/* Writes a single byte (content is 'byte') to user address 'udst'.
 * 'udst' must be below PHYS_BASE.
 * Returns true if successful, false if a segfault occurred.
 */
static bool
put_user (uint8_t *udst, uint8_t byte) {
c002f00d:	55                   	push   %ebp
c002f00e:	89 e5                	mov    %esp,%ebp
c002f010:	83 ec 14             	sub    $0x14,%esp
c002f013:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f016:	88 45 ec             	mov    %al,-0x14(%ebp)
  // check valid
  if (!is_user_vaddr(udst)) {
c002f019:	ff 75 08             	pushl  0x8(%ebp)
c002f01c:	e8 73 f2 ff ff       	call   c002e294 <is_user_vaddr>
c002f021:	83 c4 04             	add    $0x4,%esp
c002f024:	83 f0 01             	xor    $0x1,%eax
c002f027:	84 c0                	test   %al,%al
c002f029:	74 04                	je     c002f02f <put_user+0x22>
    return -1;
c002f02b:	b0 01                	mov    $0x1,%al
c002f02d:	eb 17                	jmp    c002f046 <put_user+0x39>
  }
  int error_code;
  asm ("movl $1f, %0; movb %b2, %1; 1:"
c002f02f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c002f032:	8a 55 ec             	mov    -0x14(%ebp),%dl
c002f035:	b8 3c f0 02 c0       	mov    $0xc002f03c,%eax
c002f03a:	88 11                	mov    %dl,(%ecx)
c002f03c:	89 45 fc             	mov    %eax,-0x4(%ebp)
      : "=&a" (error_code), "=m" (*udst) : "q" (byte));
  return error_code != -1;
c002f03f:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
c002f043:	0f 95 c0             	setne  %al
}
c002f046:	c9                   	leave  
c002f047:	c3                   	ret    

c002f048 <sys_chdir>:
}
#endif

#ifdef FILESYS
bool sys_chdir(const char *name) 
{
c002f048:	55                   	push   %ebp
c002f049:	89 e5                	mov    %esp,%ebp
c002f04b:	83 ec 18             	sub    $0x18,%esp
   // printf("---change directory to %s---\n",name);
    lock_acquire(&fileSys_lock);
c002f04e:	83 ec 0c             	sub    $0xc,%esp
c002f051:	68 a0 61 04 c0       	push   $0xc00461a0
c002f056:	e8 70 44 ff ff       	call   c00234cb <lock_acquire>
c002f05b:	83 c4 10             	add    $0x10,%esp
    struct dir *dir = dir_open_path(name);
c002f05e:	83 ec 0c             	sub    $0xc,%esp
c002f061:	ff 75 08             	pushl  0x8(%ebp)
c002f064:	e8 15 18 00 00       	call   c003087e <dir_open_path>
c002f069:	83 c4 10             	add    $0x10,%esp
c002f06c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dir == NULL) 
c002f06f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f073:	75 14                	jne    c002f089 <sys_chdir+0x41>
    {
      lock_release(&fileSys_lock);
c002f075:	83 ec 0c             	sub    $0xc,%esp
c002f078:	68 a0 61 04 c0       	push   $0xc00461a0
c002f07d:	e8 88 46 ff ff       	call   c002370a <lock_release>
c002f082:	83 c4 10             	add    $0x10,%esp
      return false;
c002f085:	b0 00                	mov    $0x0,%al
c002f087:	eb 3b                	jmp    c002f0c4 <sys_chdir+0x7c>
    }
    struct thread *t = thread_current();
c002f089:	e8 1a 1e ff ff       	call   c0020ea8 <thread_current>
c002f08e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    dir_close(t->cwd);
c002f091:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f094:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c002f09a:	83 ec 0c             	sub    $0xc,%esp
c002f09d:	50                   	push   %eax
c002f09e:	e8 af 19 00 00       	call   c0030a52 <dir_close>
c002f0a3:	83 c4 10             	add    $0x10,%esp
    t->cwd = dir;
c002f0a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f0a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002f0ac:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    lock_release(&fileSys_lock);
c002f0b2:	83 ec 0c             	sub    $0xc,%esp
c002f0b5:	68 a0 61 04 c0       	push   $0xc00461a0
c002f0ba:	e8 4b 46 ff ff       	call   c002370a <lock_release>
c002f0bf:	83 c4 10             	add    $0x10,%esp
    return true;
c002f0c2:	b0 01                	mov    $0x1,%al
}
c002f0c4:	c9                   	leave  
c002f0c5:	c3                   	ret    

c002f0c6 <sys_mkdir>:

bool sys_mkdir(const char *name) 
{
c002f0c6:	55                   	push   %ebp
c002f0c7:	89 e5                	mov    %esp,%ebp
c002f0c9:	53                   	push   %ebx
c002f0ca:	83 ec 24             	sub    $0x24,%esp
c002f0cd:	89 e0                	mov    %esp,%eax
c002f0cf:	89 c3                	mov    %eax,%ebx
  //printf("makedir!\n");
  lock_acquire(&fileSys_lock);
c002f0d1:	83 ec 0c             	sub    $0xc,%esp
c002f0d4:	68 a0 61 04 c0       	push   $0xc00461a0
c002f0d9:	e8 ed 43 ff ff       	call   c00234cb <lock_acquire>
c002f0de:	83 c4 10             	add    $0x10,%esp
  int len = strlen(name);
c002f0e1:	83 ec 0c             	sub    $0xc,%esp
c002f0e4:	ff 75 08             	pushl  0x8(%ebp)
c002f0e7:	e8 5d a7 ff ff       	call   c0029849 <strlen>
c002f0ec:	83 c4 10             	add    $0x10,%esp
c002f0ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (len == 0) 
c002f0f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f0f6:	75 17                	jne    c002f10f <sys_mkdir+0x49>
  {
    lock_release(&fileSys_lock);
c002f0f8:	83 ec 0c             	sub    $0xc,%esp
c002f0fb:	68 a0 61 04 c0       	push   $0xc00461a0
c002f100:	e8 05 46 ff ff       	call   c002370a <lock_release>
c002f105:	83 c4 10             	add    $0x10,%esp
    return false;
c002f108:	b0 00                	mov    $0x0,%al
c002f10a:	e9 3c 01 00 00       	jmp    c002f24b <sys_mkdir+0x185>
  }
  char directory[len], filename[len];
c002f10f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f112:	8d 50 ff             	lea    -0x1(%eax),%edx
c002f115:	89 55 f0             	mov    %edx,-0x10(%ebp)
c002f118:	89 c2                	mov    %eax,%edx
c002f11a:	b8 10 00 00 00       	mov    $0x10,%eax
c002f11f:	48                   	dec    %eax
c002f120:	01 d0                	add    %edx,%eax
c002f122:	b9 10 00 00 00       	mov    $0x10,%ecx
c002f127:	ba 00 00 00 00       	mov    $0x0,%edx
c002f12c:	f7 f1                	div    %ecx
c002f12e:	6b c0 10             	imul   $0x10,%eax,%eax
c002f131:	29 c4                	sub    %eax,%esp
c002f133:	89 e0                	mov    %esp,%eax
c002f135:	83 c0 00             	add    $0x0,%eax
c002f138:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002f13b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f13e:	8d 50 ff             	lea    -0x1(%eax),%edx
c002f141:	89 55 e8             	mov    %edx,-0x18(%ebp)
c002f144:	89 c2                	mov    %eax,%edx
c002f146:	b8 10 00 00 00       	mov    $0x10,%eax
c002f14b:	48                   	dec    %eax
c002f14c:	01 d0                	add    %edx,%eax
c002f14e:	b9 10 00 00 00       	mov    $0x10,%ecx
c002f153:	ba 00 00 00 00       	mov    $0x0,%edx
c002f158:	f7 f1                	div    %ecx
c002f15a:	6b c0 10             	imul   $0x10,%eax,%eax
c002f15d:	29 c4                	sub    %eax,%esp
c002f15f:	89 e0                	mov    %esp,%eax
c002f161:	83 c0 00             	add    $0x0,%eax
c002f164:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  parse_path_name(name, directory, filename);
c002f167:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002f16a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f16d:	83 ec 04             	sub    $0x4,%esp
c002f170:	52                   	push   %edx
c002f171:	50                   	push   %eax
c002f172:	ff 75 08             	pushl  0x8(%ebp)
c002f175:	e8 98 14 00 00       	call   c0030612 <parse_path_name>
c002f17a:	83 c4 10             	add    $0x10,%esp
  struct dir *dir = dir_open_path(directory);
c002f17d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002f180:	83 ec 0c             	sub    $0xc,%esp
c002f183:	50                   	push   %eax
c002f184:	e8 f5 16 00 00       	call   c003087e <dir_open_path>
c002f189:	83 c4 10             	add    $0x10,%esp
c002f18c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  block_sector_t inode_sector = 0;
c002f18f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  bool t2 = free_map_allocate (1, &inode_sector);
c002f196:	83 ec 08             	sub    $0x8,%esp
c002f199:	8d 45 d8             	lea    -0x28(%ebp),%eax
c002f19c:	50                   	push   %eax
c002f19d:	6a 01                	push   $0x1
c002f19f:	e8 0f 0b 00 00       	call   c002fcb3 <free_map_allocate>
c002f1a4:	83 c4 10             	add    $0x10,%esp
c002f1a7:	85 c0                	test   %eax,%eax
c002f1a9:	0f 95 c0             	setne  %al
c002f1ac:	88 45 df             	mov    %al,-0x21(%ebp)
  bool t3 = inode_create (inode_sector, 0, 1);
c002f1af:	8b 45 d8             	mov    -0x28(%ebp),%eax
c002f1b2:	83 ec 04             	sub    $0x4,%esp
c002f1b5:	6a 01                	push   $0x1
c002f1b7:	6a 00                	push   $0x0
c002f1b9:	50                   	push   %eax
c002f1ba:	e8 e6 22 00 00       	call   c00314a5 <inode_create>
c002f1bf:	83 c4 10             	add    $0x10,%esp
c002f1c2:	88 45 de             	mov    %al,-0x22(%ebp)
  bool t4 = dir_add (dir, filename, inode_sector, 1);
c002f1c5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c002f1c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002f1cb:	6a 01                	push   $0x1
c002f1cd:	52                   	push   %edx
c002f1ce:	50                   	push   %eax
c002f1cf:	ff 75 e0             	pushl  -0x20(%ebp)
c002f1d2:	e8 a3 1a 00 00       	call   c0030c7a <dir_add>
c002f1d7:	83 c4 10             	add    $0x10,%esp
c002f1da:	88 45 dd             	mov    %al,-0x23(%ebp)
 // printf("---filename:   %s\n", filename);
  //printf("-----%d %d %d-----\n", t2 ,t3, t4);
  bool success = (dir != NULL
                  && t2
                  && t3
                  && t4);
c002f1dd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002f1e1:	74 19                	je     c002f1fc <sys_mkdir+0x136>
                  && t2
c002f1e3:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
c002f1e7:	74 13                	je     c002f1fc <sys_mkdir+0x136>
                  && t3
c002f1e9:	80 7d de 00          	cmpb   $0x0,-0x22(%ebp)
c002f1ed:	74 0d                	je     c002f1fc <sys_mkdir+0x136>
                  && t4);
c002f1ef:	80 7d dd 00          	cmpb   $0x0,-0x23(%ebp)
c002f1f3:	74 07                	je     c002f1fc <sys_mkdir+0x136>
c002f1f5:	b8 01 00 00 00       	mov    $0x1,%eax
c002f1fa:	eb 05                	jmp    c002f201 <sys_mkdir+0x13b>
c002f1fc:	b8 00 00 00 00       	mov    $0x0,%eax
  bool success = (dir != NULL
c002f201:	88 45 dc             	mov    %al,-0x24(%ebp)
c002f204:	80 65 dc 01          	andb   $0x1,-0x24(%ebp)
  if (!success && inode_sector != 0)
c002f208:	8a 45 dc             	mov    -0x24(%ebp),%al
c002f20b:	83 f0 01             	xor    $0x1,%eax
c002f20e:	84 c0                	test   %al,%al
c002f210:	74 18                	je     c002f22a <sys_mkdir+0x164>
c002f212:	8b 45 d8             	mov    -0x28(%ebp),%eax
c002f215:	85 c0                	test   %eax,%eax
c002f217:	74 11                	je     c002f22a <sys_mkdir+0x164>
    free_map_release(inode_sector, 1);
c002f219:	8b 45 d8             	mov    -0x28(%ebp),%eax
c002f21c:	83 ec 08             	sub    $0x8,%esp
c002f21f:	6a 01                	push   $0x1
c002f221:	50                   	push   %eax
c002f222:	e8 0c 0b 00 00       	call   c002fd33 <free_map_release>
c002f227:	83 c4 10             	add    $0x10,%esp
  dir_close(dir);
c002f22a:	83 ec 0c             	sub    $0xc,%esp
c002f22d:	ff 75 e0             	pushl  -0x20(%ebp)
c002f230:	e8 1d 18 00 00       	call   c0030a52 <dir_close>
c002f235:	83 c4 10             	add    $0x10,%esp
  lock_release(&fileSys_lock);
c002f238:	83 ec 0c             	sub    $0xc,%esp
c002f23b:	68 a0 61 04 c0       	push   $0xc00461a0
c002f240:	e8 c5 44 ff ff       	call   c002370a <lock_release>
c002f245:	83 c4 10             	add    $0x10,%esp
  return success;
c002f248:	8a 45 dc             	mov    -0x24(%ebp),%al
c002f24b:	89 dc                	mov    %ebx,%esp
}
c002f24d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002f250:	c9                   	leave  
c002f251:	c3                   	ret    

c002f252 <sys_readdir>:

bool sys_readdir(int fd, char *name)
{
c002f252:	55                   	push   %ebp
c002f253:	89 e5                	mov    %esp,%ebp
c002f255:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002f258:	83 ec 0c             	sub    $0xc,%esp
c002f25b:	68 a0 61 04 c0       	push   $0xc00461a0
c002f260:	e8 66 42 ff ff       	call   c00234cb <lock_acquire>
c002f265:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fdr = get_file_descriptor(thread_current(), fd, 2);
c002f268:	e8 3b 1c ff ff       	call   c0020ea8 <thread_current>
c002f26d:	83 ec 04             	sub    $0x4,%esp
c002f270:	6a 02                	push   $0x2
c002f272:	ff 75 08             	pushl  0x8(%ebp)
c002f275:	50                   	push   %eax
c002f276:	e8 28 f0 ff ff       	call   c002e2a3 <get_file_descriptor>
c002f27b:	83 c4 10             	add    $0x10,%esp
c002f27e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fdr == NULL) 
c002f281:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f285:	75 17                	jne    c002f29e <sys_readdir+0x4c>
  {
    lock_release(&fileSys_lock);
c002f287:	83 ec 0c             	sub    $0xc,%esp
c002f28a:	68 a0 61 04 c0       	push   $0xc00461a0
c002f28f:	e8 76 44 ff ff       	call   c002370a <lock_release>
c002f294:	83 c4 10             	add    $0x10,%esp
    return false;
c002f297:	b0 00                	mov    $0x0,%al
c002f299:	e9 ac 00 00 00       	jmp    c002f34a <sys_readdir+0xf8>
  }
  struct inode *inode = file_get_inode(fdr->file);
c002f29e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f2a1:	8b 40 04             	mov    0x4(%eax),%eax
c002f2a4:	83 ec 0c             	sub    $0xc,%esp
c002f2a7:	50                   	push   %eax
c002f2a8:	e8 0a 0d 00 00       	call   c002ffb7 <file_get_inode>
c002f2ad:	83 c4 10             	add    $0x10,%esp
c002f2b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (inode == NULL) 
c002f2b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002f2b7:	75 14                	jne    c002f2cd <sys_readdir+0x7b>
  {
    lock_release(&fileSys_lock);
c002f2b9:	83 ec 0c             	sub    $0xc,%esp
c002f2bc:	68 a0 61 04 c0       	push   $0xc00461a0
c002f2c1:	e8 44 44 ff ff       	call   c002370a <lock_release>
c002f2c6:	83 c4 10             	add    $0x10,%esp
    return false;
c002f2c9:	b0 00                	mov    $0x0,%al
c002f2cb:	eb 7d                	jmp    c002f34a <sys_readdir+0xf8>
  }
  if (!inode_dir(inode)) 
c002f2cd:	83 ec 0c             	sub    $0xc,%esp
c002f2d0:	ff 75 f0             	pushl  -0x10(%ebp)
c002f2d3:	e8 41 2a 00 00       	call   c0031d19 <inode_dir>
c002f2d8:	83 c4 10             	add    $0x10,%esp
c002f2db:	85 c0                	test   %eax,%eax
c002f2dd:	75 14                	jne    c002f2f3 <sys_readdir+0xa1>
  {
    lock_release(&fileSys_lock);
c002f2df:	83 ec 0c             	sub    $0xc,%esp
c002f2e2:	68 a0 61 04 c0       	push   $0xc00461a0
c002f2e7:	e8 1e 44 ff ff       	call   c002370a <lock_release>
c002f2ec:	83 c4 10             	add    $0x10,%esp
    return false;
c002f2ef:	b0 00                	mov    $0x0,%al
c002f2f1:	eb 57                	jmp    c002f34a <sys_readdir+0xf8>
  }
  struct dir *dir = fdr -> dir;
c002f2f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f2f6:	8b 40 10             	mov    0x10(%eax),%eax
c002f2f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  ASSERT(dir != NULL);
c002f2fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c002f300:	75 21                	jne    c002f323 <sys_readdir+0xd1>
c002f302:	83 ec 0c             	sub    $0xc,%esp
c002f305:	68 5a 5b 03 c0       	push   $0xc0035b5a
c002f30a:	68 66 5b 03 c0       	push   $0xc0035b66
c002f30f:	68 a4 5b 03 c0       	push   $0xc0035ba4
c002f314:	68 ea 02 00 00       	push   $0x2ea
c002f319:	68 7d 5b 03 c0       	push   $0xc0035b7d
c002f31e:	e8 07 b2 ff ff       	call   c002a52a <debug_panic>
  bool tmp = dir_readdir(dir, name);
c002f323:	83 ec 08             	sub    $0x8,%esp
c002f326:	ff 75 0c             	pushl  0xc(%ebp)
c002f329:	ff 75 ec             	pushl  -0x14(%ebp)
c002f32c:	e8 fb 1a 00 00       	call   c0030e2c <dir_readdir>
c002f331:	83 c4 10             	add    $0x10,%esp
c002f334:	88 45 eb             	mov    %al,-0x15(%ebp)
  lock_release(&fileSys_lock);
c002f337:	83 ec 0c             	sub    $0xc,%esp
c002f33a:	68 a0 61 04 c0       	push   $0xc00461a0
c002f33f:	e8 c6 43 ff ff       	call   c002370a <lock_release>
c002f344:	83 c4 10             	add    $0x10,%esp
  return tmp;
c002f347:	8a 45 eb             	mov    -0x15(%ebp),%al
}
c002f34a:	c9                   	leave  
c002f34b:	c3                   	ret    

c002f34c <sys_isdir>:

bool sys_isdir(int fd) 
{
c002f34c:	55                   	push   %ebp
c002f34d:	89 e5                	mov    %esp,%ebp
c002f34f:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002f352:	83 ec 0c             	sub    $0xc,%esp
c002f355:	68 a0 61 04 c0       	push   $0xc00461a0
c002f35a:	e8 6c 41 ff ff       	call   c00234cb <lock_acquire>
c002f35f:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fdr = get_file_descriptor(thread_current(), fd , 0);
c002f362:	e8 41 1b ff ff       	call   c0020ea8 <thread_current>
c002f367:	83 ec 04             	sub    $0x4,%esp
c002f36a:	6a 00                	push   $0x0
c002f36c:	ff 75 08             	pushl  0x8(%ebp)
c002f36f:	50                   	push   %eax
c002f370:	e8 2e ef ff ff       	call   c002e2a3 <get_file_descriptor>
c002f375:	83 c4 10             	add    $0x10,%esp
c002f378:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (fdr == NULL) 
c002f37b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f37f:	75 14                	jne    c002f395 <sys_isdir+0x49>
  {
    lock_release(&fileSys_lock);
c002f381:	83 ec 0c             	sub    $0xc,%esp
c002f384:	68 a0 61 04 c0       	push   $0xc00461a0
c002f389:	e8 7c 43 ff ff       	call   c002370a <lock_release>
c002f38e:	83 c4 10             	add    $0x10,%esp
    return false;
c002f391:	b0 00                	mov    $0x0,%al
c002f393:	eb 52                	jmp    c002f3e7 <sys_isdir+0x9b>
  }
  struct inode *inode = file_get_inode(fdr->file);
c002f395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f398:	8b 40 04             	mov    0x4(%eax),%eax
c002f39b:	83 ec 0c             	sub    $0xc,%esp
c002f39e:	50                   	push   %eax
c002f39f:	e8 13 0c 00 00       	call   c002ffb7 <file_get_inode>
c002f3a4:	83 c4 10             	add    $0x10,%esp
c002f3a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (inode == NULL) 
c002f3aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002f3ae:	75 14                	jne    c002f3c4 <sys_isdir+0x78>
  {
    lock_release(&fileSys_lock);
c002f3b0:	83 ec 0c             	sub    $0xc,%esp
c002f3b3:	68 a0 61 04 c0       	push   $0xc00461a0
c002f3b8:	e8 4d 43 ff ff       	call   c002370a <lock_release>
c002f3bd:	83 c4 10             	add    $0x10,%esp
    return false;
c002f3c0:	b0 00                	mov    $0x0,%al
c002f3c2:	eb 23                	jmp    c002f3e7 <sys_isdir+0x9b>
  }
  lock_release(&fileSys_lock);
c002f3c4:	83 ec 0c             	sub    $0xc,%esp
c002f3c7:	68 a0 61 04 c0       	push   $0xc00461a0
c002f3cc:	e8 39 43 ff ff       	call   c002370a <lock_release>
c002f3d1:	83 c4 10             	add    $0x10,%esp
  return inode_dir(inode);
c002f3d4:	83 ec 0c             	sub    $0xc,%esp
c002f3d7:	ff 75 f0             	pushl  -0x10(%ebp)
c002f3da:	e8 3a 29 00 00       	call   c0031d19 <inode_dir>
c002f3df:	83 c4 10             	add    $0x10,%esp
c002f3e2:	85 c0                	test   %eax,%eax
c002f3e4:	0f 95 c0             	setne  %al
}
c002f3e7:	c9                   	leave  
c002f3e8:	c3                   	ret    

c002f3e9 <sys_inumber>:

int sys_inumber(int fd) 
{
c002f3e9:	55                   	push   %ebp
c002f3ea:	89 e5                	mov    %esp,%ebp
c002f3ec:	83 ec 18             	sub    $0x18,%esp
  lock_acquire(&fileSys_lock);
c002f3ef:	83 ec 0c             	sub    $0xc,%esp
c002f3f2:	68 a0 61 04 c0       	push   $0xc00461a0
c002f3f7:	e8 cf 40 ff ff       	call   c00234cb <lock_acquire>
c002f3fc:	83 c4 10             	add    $0x10,%esp
  struct file_descriptor* fdr = get_file_descriptor(thread_current(), fd, 0);
c002f3ff:	e8 a4 1a ff ff       	call   c0020ea8 <thread_current>
c002f404:	83 ec 04             	sub    $0x4,%esp
c002f407:	6a 00                	push   $0x0
c002f409:	ff 75 08             	pushl  0x8(%ebp)
c002f40c:	50                   	push   %eax
c002f40d:	e8 91 ee ff ff       	call   c002e2a3 <get_file_descriptor>
c002f412:	83 c4 10             	add    $0x10,%esp
c002f415:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct inode * inode = file_get_inode(fdr->file);
c002f418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f41b:	8b 40 04             	mov    0x4(%eax),%eax
c002f41e:	83 ec 0c             	sub    $0xc,%esp
c002f421:	50                   	push   %eax
c002f422:	e8 90 0b 00 00       	call   c002ffb7 <file_get_inode>
c002f427:	83 c4 10             	add    $0x10,%esp
c002f42a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  ASSERT(inode != NULL);
c002f42d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c002f431:	75 21                	jne    c002f454 <sys_inumber+0x6b>
c002f433:	83 ec 0c             	sub    $0xc,%esp
c002f436:	68 96 5b 03 c0       	push   $0xc0035b96
c002f43b:	68 66 5b 03 c0       	push   $0xc0035b66
c002f440:	68 b0 5b 03 c0       	push   $0xc0035bb0
c002f445:	68 08 03 00 00       	push   $0x308
c002f44a:	68 7d 5b 03 c0       	push   $0xc0035b7d
c002f44f:	e8 d6 b0 ff ff       	call   c002a52a <debug_panic>
  int ret = inode_num(inode);
c002f454:	83 ec 0c             	sub    $0xc,%esp
c002f457:	ff 75 f0             	pushl  -0x10(%ebp)
c002f45a:	e8 c9 28 00 00       	call   c0031d28 <inode_num>
c002f45f:	83 c4 10             	add    $0x10,%esp
c002f462:	89 45 ec             	mov    %eax,-0x14(%ebp)
  lock_release(&fileSys_lock);
c002f465:	83 ec 0c             	sub    $0xc,%esp
c002f468:	68 a0 61 04 c0       	push   $0xc00461a0
c002f46d:	e8 98 42 ff ff       	call   c002370a <lock_release>
c002f472:	83 c4 10             	add    $0x10,%esp
  return ret;
c002f475:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c002f478:	c9                   	leave  
c002f479:	c3                   	ret    

c002f47a <gdt_init>:
c002f47a:	55                   	push   %ebp
c002f47b:	89 e5                	mov    %esp,%ebp
c002f47d:	83 ec 18             	sub    $0x18,%esp
c002f480:	c7 05 e0 dc 03 c0 00 	movl   $0x0,0xc003dce0
c002f487:	00 00 00 
c002f48a:	c7 05 e4 dc 03 c0 00 	movl   $0x0,0xc003dce4
c002f491:	00 00 00 
c002f494:	83 ec 0c             	sub    $0xc,%esp
c002f497:	6a 00                	push   $0x0
c002f499:	e8 fe 01 00 00       	call   c002f69c <make_code_desc>
c002f49e:	83 c4 10             	add    $0x10,%esp
c002f4a1:	a3 e8 dc 03 c0       	mov    %eax,0xc003dce8
c002f4a6:	89 15 ec dc 03 c0    	mov    %edx,0xc003dcec
c002f4ac:	83 ec 0c             	sub    $0xc,%esp
c002f4af:	6a 00                	push   $0x0
c002f4b1:	e8 09 02 00 00       	call   c002f6bf <make_data_desc>
c002f4b6:	83 c4 10             	add    $0x10,%esp
c002f4b9:	a3 f0 dc 03 c0       	mov    %eax,0xc003dcf0
c002f4be:	89 15 f4 dc 03 c0    	mov    %edx,0xc003dcf4
c002f4c4:	83 ec 0c             	sub    $0xc,%esp
c002f4c7:	6a 03                	push   $0x3
c002f4c9:	e8 ce 01 00 00       	call   c002f69c <make_code_desc>
c002f4ce:	83 c4 10             	add    $0x10,%esp
c002f4d1:	a3 f8 dc 03 c0       	mov    %eax,0xc003dcf8
c002f4d6:	89 15 fc dc 03 c0    	mov    %edx,0xc003dcfc
c002f4dc:	83 ec 0c             	sub    $0xc,%esp
c002f4df:	6a 03                	push   $0x3
c002f4e1:	e8 d9 01 00 00       	call   c002f6bf <make_data_desc>
c002f4e6:	83 c4 10             	add    $0x10,%esp
c002f4e9:	a3 00 dd 03 c0       	mov    %eax,0xc003dd00
c002f4ee:	89 15 04 dd 03 c0    	mov    %edx,0xc003dd04
c002f4f4:	e8 8a 02 00 00       	call   c002f783 <tss_get>
c002f4f9:	83 ec 0c             	sub    $0xc,%esp
c002f4fc:	50                   	push   %eax
c002f4fd:	e8 e0 01 00 00       	call   c002f6e2 <make_tss_desc>
c002f502:	83 c4 10             	add    $0x10,%esp
c002f505:	a3 08 dd 03 c0       	mov    %eax,0xc003dd08
c002f50a:	89 15 0c dd 03 c0    	mov    %edx,0xc003dd0c
c002f510:	83 ec 08             	sub    $0x8,%esp
c002f513:	68 e0 dc 03 c0       	push   $0xc003dce0
c002f518:	6a 2f                	push   $0x2f
c002f51a:	e8 e4 01 00 00       	call   c002f703 <make_gdtr_operand>
c002f51f:	83 c4 10             	add    $0x10,%esp
c002f522:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002f525:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002f528:	0f 01 55 f0          	lgdtl  -0x10(%ebp)
c002f52c:	b8 28 00 00 00       	mov    $0x28,%eax
c002f531:	0f 00 d8             	ltr    %ax
c002f534:	90                   	nop
c002f535:	c9                   	leave  
c002f536:	c3                   	ret    

c002f537 <make_seg_desc>:
c002f537:	55                   	push   %ebp
c002f538:	89 e5                	mov    %esp,%ebp
c002f53a:	57                   	push   %edi
c002f53b:	56                   	push   %esi
c002f53c:	53                   	push   %ebx
c002f53d:	83 ec 2c             	sub    $0x2c,%esp
c002f540:	81 7d 0c ff ff 0f 00 	cmpl   $0xfffff,0xc(%ebp)
c002f547:	76 1e                	jbe    c002f567 <make_seg_desc+0x30>
c002f549:	83 ec 0c             	sub    $0xc,%esp
c002f54c:	68 bc 5b 03 c0       	push   $0xc0035bbc
c002f551:	68 cd 5b 03 c0       	push   $0xc0035bcd
c002f556:	68 90 5c 03 c0       	push   $0xc0035c90
c002f55b:	6a 5b                	push   $0x5b
c002f55d:	68 e4 5b 03 c0       	push   $0xc0035be4
c002f562:	e8 c3 af ff ff       	call   c002a52a <debug_panic>
c002f567:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c002f56b:	74 24                	je     c002f591 <make_seg_desc+0x5a>
c002f56d:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c002f571:	74 1e                	je     c002f591 <make_seg_desc+0x5a>
c002f573:	83 ec 0c             	sub    $0xc,%esp
c002f576:	68 fc 5b 03 c0       	push   $0xc0035bfc
c002f57b:	68 cd 5b 03 c0       	push   $0xc0035bcd
c002f580:	68 90 5c 03 c0       	push   $0xc0035c90
c002f585:	6a 5c                	push   $0x5c
c002f587:	68 e4 5b 03 c0       	push   $0xc0035be4
c002f58c:	e8 99 af ff ff       	call   c002a52a <debug_panic>
c002f591:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c002f595:	78 06                	js     c002f59d <make_seg_desc+0x66>
c002f597:	83 7d 14 0f          	cmpl   $0xf,0x14(%ebp)
c002f59b:	7e 1e                	jle    c002f5bb <make_seg_desc+0x84>
c002f59d:	83 ec 0c             	sub    $0xc,%esp
c002f5a0:	68 2a 5c 03 c0       	push   $0xc0035c2a
c002f5a5:	68 cd 5b 03 c0       	push   $0xc0035bcd
c002f5aa:	68 90 5c 03 c0       	push   $0xc0035c90
c002f5af:	6a 5d                	push   $0x5d
c002f5b1:	68 e4 5b 03 c0       	push   $0xc0035be4
c002f5b6:	e8 6f af ff ff       	call   c002a52a <debug_panic>
c002f5bb:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c002f5bf:	78 06                	js     c002f5c7 <make_seg_desc+0x90>
c002f5c1:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
c002f5c5:	7e 1e                	jle    c002f5e5 <make_seg_desc+0xae>
c002f5c7:	83 ec 0c             	sub    $0xc,%esp
c002f5ca:	68 42 5c 03 c0       	push   $0xc0035c42
c002f5cf:	68 cd 5b 03 c0       	push   $0xc0035bcd
c002f5d4:	68 90 5c 03 c0       	push   $0xc0035c90
c002f5d9:	6a 5e                	push   $0x5e
c002f5db:	68 e4 5b 03 c0       	push   $0xc0035be4
c002f5e0:	e8 45 af ff ff       	call   c002a52a <debug_panic>
c002f5e5:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c002f5e9:	74 24                	je     c002f60f <make_seg_desc+0xd8>
c002f5eb:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
c002f5ef:	74 1e                	je     c002f60f <make_seg_desc+0xd8>
c002f5f1:	83 ec 0c             	sub    $0xc,%esp
c002f5f4:	68 58 5c 03 c0       	push   $0xc0035c58
c002f5f9:	68 cd 5b 03 c0       	push   $0xc0035bcd
c002f5fe:	68 90 5c 03 c0       	push   $0xc0035c90
c002f603:	6a 5f                	push   $0x5f
c002f605:	68 e4 5b 03 c0       	push   $0xc0035be4
c002f60a:	e8 1b af ff ff       	call   c002a52a <debug_panic>
c002f60f:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f612:	0f b7 c0             	movzwl %ax,%eax
c002f615:	8b 55 08             	mov    0x8(%ebp),%edx
c002f618:	c1 e2 10             	shl    $0x10,%edx
c002f61b:	09 d0                	or     %edx,%eax
c002f61d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002f620:	8b 45 08             	mov    0x8(%ebp),%eax
c002f623:	c1 e8 10             	shr    $0x10,%eax
c002f626:	0f b6 c0             	movzbl %al,%eax
c002f629:	8b 55 14             	mov    0x14(%ebp),%edx
c002f62c:	c1 e2 08             	shl    $0x8,%edx
c002f62f:	09 c2                	or     %eax,%edx
c002f631:	8b 45 10             	mov    0x10(%ebp),%eax
c002f634:	c1 e0 0c             	shl    $0xc,%eax
c002f637:	09 c2                	or     %eax,%edx
c002f639:	8b 45 18             	mov    0x18(%ebp),%eax
c002f63c:	c1 e0 0d             	shl    $0xd,%eax
c002f63f:	09 c2                	or     %eax,%edx
c002f641:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f644:	25 00 00 0f 00       	and    $0xf0000,%eax
c002f649:	09 c2                	or     %eax,%edx
c002f64b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c002f64e:	c1 e0 17             	shl    $0x17,%eax
c002f651:	09 c2                	or     %eax,%edx
c002f653:	8b 45 08             	mov    0x8(%ebp),%eax
c002f656:	25 00 00 00 ff       	and    $0xff000000,%eax
c002f65b:	09 d0                	or     %edx,%eax
c002f65d:	0d 00 80 40 00       	or     $0x408000,%eax
c002f662:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002f665:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c002f668:	bf 00 00 00 00       	mov    $0x0,%edi
c002f66d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c002f670:	ba 00 00 00 00       	mov    $0x0,%edx
c002f675:	89 c2                	mov    %eax,%edx
c002f677:	b8 00 00 00 00       	mov    $0x0,%eax
c002f67c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c002f67f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c002f682:	89 f0                	mov    %esi,%eax
c002f684:	0b 45 d0             	or     -0x30(%ebp),%eax
c002f687:	89 c1                	mov    %eax,%ecx
c002f689:	89 f8                	mov    %edi,%eax
c002f68b:	0b 45 d4             	or     -0x2c(%ebp),%eax
c002f68e:	89 c3                	mov    %eax,%ebx
c002f690:	89 c8                	mov    %ecx,%eax
c002f692:	89 da                	mov    %ebx,%edx
c002f694:	8d 65 f4             	lea    -0xc(%ebp),%esp
c002f697:	5b                   	pop    %ebx
c002f698:	5e                   	pop    %esi
c002f699:	5f                   	pop    %edi
c002f69a:	5d                   	pop    %ebp
c002f69b:	c3                   	ret    

c002f69c <make_code_desc>:
c002f69c:	55                   	push   %ebp
c002f69d:	89 e5                	mov    %esp,%ebp
c002f69f:	83 ec 08             	sub    $0x8,%esp
c002f6a2:	83 ec 08             	sub    $0x8,%esp
c002f6a5:	6a 01                	push   $0x1
c002f6a7:	ff 75 08             	pushl  0x8(%ebp)
c002f6aa:	6a 0a                	push   $0xa
c002f6ac:	6a 01                	push   $0x1
c002f6ae:	68 ff ff 0f 00       	push   $0xfffff
c002f6b3:	6a 00                	push   $0x0
c002f6b5:	e8 7d fe ff ff       	call   c002f537 <make_seg_desc>
c002f6ba:	83 c4 20             	add    $0x20,%esp
c002f6bd:	c9                   	leave  
c002f6be:	c3                   	ret    

c002f6bf <make_data_desc>:
c002f6bf:	55                   	push   %ebp
c002f6c0:	89 e5                	mov    %esp,%ebp
c002f6c2:	83 ec 08             	sub    $0x8,%esp
c002f6c5:	83 ec 08             	sub    $0x8,%esp
c002f6c8:	6a 01                	push   $0x1
c002f6ca:	ff 75 08             	pushl  0x8(%ebp)
c002f6cd:	6a 02                	push   $0x2
c002f6cf:	6a 01                	push   $0x1
c002f6d1:	68 ff ff 0f 00       	push   $0xfffff
c002f6d6:	6a 00                	push   $0x0
c002f6d8:	e8 5a fe ff ff       	call   c002f537 <make_seg_desc>
c002f6dd:	83 c4 20             	add    $0x20,%esp
c002f6e0:	c9                   	leave  
c002f6e1:	c3                   	ret    

c002f6e2 <make_tss_desc>:
c002f6e2:	55                   	push   %ebp
c002f6e3:	89 e5                	mov    %esp,%ebp
c002f6e5:	83 ec 08             	sub    $0x8,%esp
c002f6e8:	8b 45 08             	mov    0x8(%ebp),%eax
c002f6eb:	83 ec 08             	sub    $0x8,%esp
c002f6ee:	6a 00                	push   $0x0
c002f6f0:	6a 00                	push   $0x0
c002f6f2:	6a 09                	push   $0x9
c002f6f4:	6a 00                	push   $0x0
c002f6f6:	6a 67                	push   $0x67
c002f6f8:	50                   	push   %eax
c002f6f9:	e8 39 fe ff ff       	call   c002f537 <make_seg_desc>
c002f6fe:	83 c4 20             	add    $0x20,%esp
c002f701:	c9                   	leave  
c002f702:	c3                   	ret    

c002f703 <make_gdtr_operand>:
c002f703:	55                   	push   %ebp
c002f704:	89 e5                	mov    %esp,%ebp
c002f706:	57                   	push   %edi
c002f707:	56                   	push   %esi
c002f708:	53                   	push   %ebx
c002f709:	83 ec 14             	sub    $0x14,%esp
c002f70c:	8b 45 08             	mov    0x8(%ebp),%eax
c002f70f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
c002f713:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c002f717:	89 c6                	mov    %eax,%esi
c002f719:	bf 00 00 00 00       	mov    $0x0,%edi
c002f71e:	8b 45 0c             	mov    0xc(%ebp),%eax
c002f721:	ba 00 00 00 00       	mov    $0x0,%edx
c002f726:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c002f72a:	c1 e0 10             	shl    $0x10,%eax
c002f72d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002f730:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c002f733:	89 f0                	mov    %esi,%eax
c002f735:	0b 45 e0             	or     -0x20(%ebp),%eax
c002f738:	89 c1                	mov    %eax,%ecx
c002f73a:	89 f8                	mov    %edi,%eax
c002f73c:	0b 45 e4             	or     -0x1c(%ebp),%eax
c002f73f:	89 c3                	mov    %eax,%ebx
c002f741:	89 c8                	mov    %ecx,%eax
c002f743:	89 da                	mov    %ebx,%edx
c002f745:	83 c4 14             	add    $0x14,%esp
c002f748:	5b                   	pop    %ebx
c002f749:	5e                   	pop    %esi
c002f74a:	5f                   	pop    %edi
c002f74b:	5d                   	pop    %ebp
c002f74c:	c3                   	ret    

c002f74d <tss_init>:
c002f74d:	55                   	push   %ebp
c002f74e:	89 e5                	mov    %esp,%ebp
c002f750:	83 ec 08             	sub    $0x8,%esp
c002f753:	83 ec 0c             	sub    $0xc,%esp
c002f756:	6a 03                	push   $0x3
c002f758:	e8 46 46 ff ff       	call   c0023da3 <palloc_get_page>
c002f75d:	83 c4 10             	add    $0x10,%esp
c002f760:	a3 10 dd 03 c0       	mov    %eax,0xc003dd10
c002f765:	a1 10 dd 03 c0       	mov    0xc003dd10,%eax
c002f76a:	66 c7 40 08 10 00    	movw   $0x10,0x8(%eax)
c002f770:	a1 10 dd 03 c0       	mov    0xc003dd10,%eax
c002f775:	66 c7 40 66 ff df    	movw   $0xdfff,0x66(%eax)
c002f77b:	e8 37 00 00 00       	call   c002f7b7 <tss_update>
c002f780:	90                   	nop
c002f781:	c9                   	leave  
c002f782:	c3                   	ret    

c002f783 <tss_get>:
c002f783:	55                   	push   %ebp
c002f784:	89 e5                	mov    %esp,%ebp
c002f786:	83 ec 08             	sub    $0x8,%esp
c002f789:	a1 10 dd 03 c0       	mov    0xc003dd10,%eax
c002f78e:	85 c0                	test   %eax,%eax
c002f790:	75 1e                	jne    c002f7b0 <tss_get+0x2d>
c002f792:	83 ec 0c             	sub    $0xc,%esp
c002f795:	68 a0 5c 03 c0       	push   $0xc0035ca0
c002f79a:	68 ac 5c 03 c0       	push   $0xc0035cac
c002f79f:	68 d8 5c 03 c0       	push   $0xc0035cd8
c002f7a4:	6a 5f                	push   $0x5f
c002f7a6:	68 c3 5c 03 c0       	push   $0xc0035cc3
c002f7ab:	e8 7a ad ff ff       	call   c002a52a <debug_panic>
c002f7b0:	a1 10 dd 03 c0       	mov    0xc003dd10,%eax
c002f7b5:	c9                   	leave  
c002f7b6:	c3                   	ret    

c002f7b7 <tss_update>:
c002f7b7:	55                   	push   %ebp
c002f7b8:	89 e5                	mov    %esp,%ebp
c002f7ba:	53                   	push   %ebx
c002f7bb:	83 ec 04             	sub    $0x4,%esp
c002f7be:	a1 10 dd 03 c0       	mov    0xc003dd10,%eax
c002f7c3:	85 c0                	test   %eax,%eax
c002f7c5:	75 1e                	jne    c002f7e5 <tss_update+0x2e>
c002f7c7:	83 ec 0c             	sub    $0xc,%esp
c002f7ca:	68 a0 5c 03 c0       	push   $0xc0035ca0
c002f7cf:	68 ac 5c 03 c0       	push   $0xc0035cac
c002f7d4:	68 e0 5c 03 c0       	push   $0xc0035ce0
c002f7d9:	6a 68                	push   $0x68
c002f7db:	68 c3 5c 03 c0       	push   $0xc0035cc3
c002f7e0:	e8 45 ad ff ff       	call   c002a52a <debug_panic>
c002f7e5:	8b 1d 10 dd 03 c0    	mov    0xc003dd10,%ebx
c002f7eb:	e8 b8 16 ff ff       	call   c0020ea8 <thread_current>
c002f7f0:	05 00 10 00 00       	add    $0x1000,%eax
c002f7f5:	89 43 04             	mov    %eax,0x4(%ebx)
c002f7f8:	90                   	nop
c002f7f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002f7fc:	c9                   	leave  
c002f7fd:	c3                   	ret    

c002f7fe <filesys_init>:
c002f7fe:	55                   	push   %ebp
c002f7ff:	89 e5                	mov    %esp,%ebp
c002f801:	83 ec 18             	sub    $0x18,%esp
c002f804:	8b 45 08             	mov    0x8(%ebp),%eax
c002f807:	88 45 f4             	mov    %al,-0xc(%ebp)
c002f80a:	83 ec 0c             	sub    $0xc,%esp
c002f80d:	6a 01                	push   $0x1
c002f80f:	e8 49 63 ff ff       	call   c0025b5d <block_get_role>
c002f814:	83 c4 10             	add    $0x10,%esp
c002f817:	a3 7c 61 04 c0       	mov    %eax,0xc004617c
c002f81c:	a1 7c 61 04 c0       	mov    0xc004617c,%eax
c002f821:	85 c0                	test   %eax,%eax
c002f823:	75 16                	jne    c002f83b <filesys_init+0x3d>
c002f825:	68 ec 5c 03 c0       	push   $0xc0035cec
c002f82a:	68 84 5d 03 c0       	push   $0xc0035d84
c002f82f:	6a 16                	push   $0x16
c002f831:	68 27 5d 03 c0       	push   $0xc0035d27
c002f836:	e8 ef ac ff ff       	call   c002a52a <debug_panic>
c002f83b:	e8 4c 1c 00 00       	call   c003148c <inode_init>
c002f840:	e8 fe 03 00 00       	call   c002fc43 <free_map_init>
c002f845:	e8 a4 09 00 00       	call   c00301ee <buffer_cache_init>
c002f84a:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
c002f84e:	74 05                	je     c002f855 <filesys_init+0x57>
c002f850:	e8 8c 03 00 00       	call   c002fbe1 <do_format>
c002f855:	e8 49 05 00 00       	call   c002fda3 <free_map_open>
c002f85a:	90                   	nop
c002f85b:	c9                   	leave  
c002f85c:	c3                   	ret    

c002f85d <filesys_done>:
c002f85d:	55                   	push   %ebp
c002f85e:	89 e5                	mov    %esp,%ebp
c002f860:	83 ec 08             	sub    $0x8,%esp
c002f863:	e8 b6 05 00 00       	call   c002fe1e <free_map_close>
c002f868:	e8 ec 09 00 00       	call   c0030259 <buffer_cache_close>
c002f86d:	90                   	nop
c002f86e:	c9                   	leave  
c002f86f:	c3                   	ret    

c002f870 <filesys_create>:
c002f870:	55                   	push   %ebp
c002f871:	89 e5                	mov    %esp,%ebp
c002f873:	53                   	push   %ebx
c002f874:	83 ec 24             	sub    $0x24,%esp
c002f877:	89 e0                	mov    %esp,%eax
c002f879:	89 c3                	mov    %eax,%ebx
c002f87b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c002f882:	83 ec 0c             	sub    $0xc,%esp
c002f885:	ff 75 08             	pushl  0x8(%ebp)
c002f888:	e8 bc 9f ff ff       	call   c0029849 <strlen>
c002f88d:	83 c4 10             	add    $0x10,%esp
c002f890:	89 c2                	mov    %eax,%edx
c002f892:	83 ea 01             	sub    $0x1,%edx
c002f895:	89 55 f4             	mov    %edx,-0xc(%ebp)
c002f898:	ba 10 00 00 00       	mov    $0x10,%edx
c002f89d:	83 ea 01             	sub    $0x1,%edx
c002f8a0:	01 d0                	add    %edx,%eax
c002f8a2:	b9 10 00 00 00       	mov    $0x10,%ecx
c002f8a7:	ba 00 00 00 00       	mov    $0x0,%edx
c002f8ac:	f7 f1                	div    %ecx
c002f8ae:	6b c0 10             	imul   $0x10,%eax,%eax
c002f8b1:	29 c4                	sub    %eax,%esp
c002f8b3:	89 e0                	mov    %esp,%eax
c002f8b5:	83 c0 00             	add    $0x0,%eax
c002f8b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c002f8bb:	83 ec 0c             	sub    $0xc,%esp
c002f8be:	ff 75 08             	pushl  0x8(%ebp)
c002f8c1:	e8 83 9f ff ff       	call   c0029849 <strlen>
c002f8c6:	83 c4 10             	add    $0x10,%esp
c002f8c9:	89 c2                	mov    %eax,%edx
c002f8cb:	83 ea 01             	sub    $0x1,%edx
c002f8ce:	89 55 ec             	mov    %edx,-0x14(%ebp)
c002f8d1:	ba 10 00 00 00       	mov    $0x10,%edx
c002f8d6:	83 ea 01             	sub    $0x1,%edx
c002f8d9:	01 d0                	add    %edx,%eax
c002f8db:	b9 10 00 00 00       	mov    $0x10,%ecx
c002f8e0:	ba 00 00 00 00       	mov    $0x0,%edx
c002f8e5:	f7 f1                	div    %ecx
c002f8e7:	6b c0 10             	imul   $0x10,%eax,%eax
c002f8ea:	29 c4                	sub    %eax,%esp
c002f8ec:	89 e0                	mov    %esp,%eax
c002f8ee:	83 c0 00             	add    $0x0,%eax
c002f8f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c002f8f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c002f8f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f8fa:	83 ec 04             	sub    $0x4,%esp
c002f8fd:	52                   	push   %edx
c002f8fe:	50                   	push   %eax
c002f8ff:	ff 75 08             	pushl  0x8(%ebp)
c002f902:	e8 0b 0d 00 00       	call   c0030612 <parse_path_name>
c002f907:	83 c4 10             	add    $0x10,%esp
c002f90a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c002f90d:	83 ec 0c             	sub    $0xc,%esp
c002f910:	50                   	push   %eax
c002f911:	e8 68 0f 00 00       	call   c003087e <dir_open_path>
c002f916:	83 c4 10             	add    $0x10,%esp
c002f919:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002f91c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c002f920:	74 4d                	je     c002f96f <filesys_create+0xff>
c002f922:	83 ec 08             	sub    $0x8,%esp
c002f925:	8d 45 dc             	lea    -0x24(%ebp),%eax
c002f928:	50                   	push   %eax
c002f929:	6a 01                	push   $0x1
c002f92b:	e8 83 03 00 00       	call   c002fcb3 <free_map_allocate>
c002f930:	83 c4 10             	add    $0x10,%esp
c002f933:	84 c0                	test   %al,%al
c002f935:	74 38                	je     c002f96f <filesys_create+0xff>
c002f937:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002f93a:	83 ec 04             	sub    $0x4,%esp
c002f93d:	6a 00                	push   $0x0
c002f93f:	ff 75 0c             	pushl  0xc(%ebp)
c002f942:	50                   	push   %eax
c002f943:	e8 5d 1b 00 00       	call   c00314a5 <inode_create>
c002f948:	83 c4 10             	add    $0x10,%esp
c002f94b:	84 c0                	test   %al,%al
c002f94d:	74 20                	je     c002f96f <filesys_create+0xff>
c002f94f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c002f952:	8b 45 e8             	mov    -0x18(%ebp),%eax
c002f955:	6a 00                	push   $0x0
c002f957:	52                   	push   %edx
c002f958:	50                   	push   %eax
c002f959:	ff 75 e4             	pushl  -0x1c(%ebp)
c002f95c:	e8 19 13 00 00       	call   c0030c7a <dir_add>
c002f961:	83 c4 10             	add    $0x10,%esp
c002f964:	84 c0                	test   %al,%al
c002f966:	74 07                	je     c002f96f <filesys_create+0xff>
c002f968:	b8 01 00 00 00       	mov    $0x1,%eax
c002f96d:	eb 05                	jmp    c002f974 <filesys_create+0x104>
c002f96f:	b8 00 00 00 00       	mov    $0x0,%eax
c002f974:	88 45 e3             	mov    %al,-0x1d(%ebp)
c002f977:	80 65 e3 01          	andb   $0x1,-0x1d(%ebp)
c002f97b:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c002f97f:	83 f0 01             	xor    $0x1,%eax
c002f982:	84 c0                	test   %al,%al
c002f984:	74 18                	je     c002f99e <filesys_create+0x12e>
c002f986:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002f989:	85 c0                	test   %eax,%eax
c002f98b:	74 11                	je     c002f99e <filesys_create+0x12e>
c002f98d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002f990:	83 ec 08             	sub    $0x8,%esp
c002f993:	6a 01                	push   $0x1
c002f995:	50                   	push   %eax
c002f996:	e8 98 03 00 00       	call   c002fd33 <free_map_release>
c002f99b:	83 c4 10             	add    $0x10,%esp
c002f99e:	83 ec 0c             	sub    $0xc,%esp
c002f9a1:	ff 75 e4             	pushl  -0x1c(%ebp)
c002f9a4:	e8 a9 10 00 00       	call   c0030a52 <dir_close>
c002f9a9:	83 c4 10             	add    $0x10,%esp
c002f9ac:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c002f9b0:	89 dc                	mov    %ebx,%esp
c002f9b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002f9b5:	c9                   	leave  
c002f9b6:	c3                   	ret    

c002f9b7 <filesys_open>:
c002f9b7:	55                   	push   %ebp
c002f9b8:	89 e5                	mov    %esp,%ebp
c002f9ba:	53                   	push   %ebx
c002f9bb:	83 ec 24             	sub    $0x24,%esp
c002f9be:	89 e0                	mov    %esp,%eax
c002f9c0:	89 c3                	mov    %eax,%ebx
c002f9c2:	83 ec 0c             	sub    $0xc,%esp
c002f9c5:	ff 75 08             	pushl  0x8(%ebp)
c002f9c8:	e8 7c 9e ff ff       	call   c0029849 <strlen>
c002f9cd:	83 c4 10             	add    $0x10,%esp
c002f9d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002f9d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002f9d7:	75 0a                	jne    c002f9e3 <filesys_open+0x2c>
c002f9d9:	b8 00 00 00 00       	mov    $0x0,%eax
c002f9de:	e9 0f 01 00 00       	jmp    c002faf2 <filesys_open+0x13b>
c002f9e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002f9e6:	83 c0 01             	add    $0x1,%eax
c002f9e9:	8d 50 ff             	lea    -0x1(%eax),%edx
c002f9ec:	89 55 f0             	mov    %edx,-0x10(%ebp)
c002f9ef:	89 c2                	mov    %eax,%edx
c002f9f1:	b8 10 00 00 00       	mov    $0x10,%eax
c002f9f6:	83 e8 01             	sub    $0x1,%eax
c002f9f9:	01 d0                	add    %edx,%eax
c002f9fb:	b9 10 00 00 00       	mov    $0x10,%ecx
c002fa00:	ba 00 00 00 00       	mov    $0x0,%edx
c002fa05:	f7 f1                	div    %ecx
c002fa07:	6b c0 10             	imul   $0x10,%eax,%eax
c002fa0a:	29 c4                	sub    %eax,%esp
c002fa0c:	89 e0                	mov    %esp,%eax
c002fa0e:	83 c0 00             	add    $0x0,%eax
c002fa11:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002fa14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fa17:	83 c0 01             	add    $0x1,%eax
c002fa1a:	8d 50 ff             	lea    -0x1(%eax),%edx
c002fa1d:	89 55 e8             	mov    %edx,-0x18(%ebp)
c002fa20:	89 c2                	mov    %eax,%edx
c002fa22:	b8 10 00 00 00       	mov    $0x10,%eax
c002fa27:	83 e8 01             	sub    $0x1,%eax
c002fa2a:	01 d0                	add    %edx,%eax
c002fa2c:	b9 10 00 00 00       	mov    $0x10,%ecx
c002fa31:	ba 00 00 00 00       	mov    $0x0,%edx
c002fa36:	f7 f1                	div    %ecx
c002fa38:	6b c0 10             	imul   $0x10,%eax,%eax
c002fa3b:	29 c4                	sub    %eax,%esp
c002fa3d:	89 e0                	mov    %esp,%eax
c002fa3f:	83 c0 00             	add    $0x0,%eax
c002fa42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002fa45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002fa48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002fa4b:	83 ec 04             	sub    $0x4,%esp
c002fa4e:	52                   	push   %edx
c002fa4f:	50                   	push   %eax
c002fa50:	ff 75 08             	pushl  0x8(%ebp)
c002fa53:	e8 ba 0b 00 00       	call   c0030612 <parse_path_name>
c002fa58:	83 c4 10             	add    $0x10,%esp
c002fa5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002fa5e:	83 ec 0c             	sub    $0xc,%esp
c002fa61:	50                   	push   %eax
c002fa62:	e8 17 0e 00 00       	call   c003087e <dir_open_path>
c002fa67:	83 c4 10             	add    $0x10,%esp
c002fa6a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002fa6d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c002fa74:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002fa78:	75 07                	jne    c002fa81 <filesys_open+0xca>
c002fa7a:	b8 00 00 00 00       	mov    $0x0,%eax
c002fa7f:	eb 71                	jmp    c002faf2 <filesys_open+0x13b>
c002fa81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002fa84:	0f b6 00             	movzbl (%eax),%eax
c002fa87:	84 c0                	test   %al,%al
c002fa89:	74 26                	je     c002fab1 <filesys_open+0xfa>
c002fa8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002fa8e:	83 ec 04             	sub    $0x4,%esp
c002fa91:	8d 55 dc             	lea    -0x24(%ebp),%edx
c002fa94:	52                   	push   %edx
c002fa95:	50                   	push   %eax
c002fa96:	ff 75 e0             	pushl  -0x20(%ebp)
c002fa99:	e8 cd 10 00 00       	call   c0030b6b <dir_lookup>
c002fa9e:	83 c4 10             	add    $0x10,%esp
c002faa1:	83 ec 0c             	sub    $0xc,%esp
c002faa4:	ff 75 e0             	pushl  -0x20(%ebp)
c002faa7:	e8 a6 0f 00 00       	call   c0030a52 <dir_close>
c002faac:	83 c4 10             	add    $0x10,%esp
c002faaf:	eb 11                	jmp    c002fac2 <filesys_open+0x10b>
c002fab1:	83 ec 0c             	sub    $0xc,%esp
c002fab4:	ff 75 e0             	pushl  -0x20(%ebp)
c002fab7:	e8 c4 0f 00 00       	call   c0030a80 <dir_get_inode>
c002fabc:	83 c4 10             	add    $0x10,%esp
c002fabf:	89 45 dc             	mov    %eax,-0x24(%ebp)
c002fac2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002fac5:	85 c0                	test   %eax,%eax
c002fac7:	74 13                	je     c002fadc <filesys_open+0x125>
c002fac9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002facc:	83 ec 0c             	sub    $0xc,%esp
c002facf:	50                   	push   %eax
c002fad0:	e8 5e 22 00 00       	call   c0031d33 <inode_is_removed>
c002fad5:	83 c4 10             	add    $0x10,%esp
c002fad8:	84 c0                	test   %al,%al
c002fada:	74 07                	je     c002fae3 <filesys_open+0x12c>
c002fadc:	b8 00 00 00 00       	mov    $0x0,%eax
c002fae1:	eb 0f                	jmp    c002faf2 <filesys_open+0x13b>
c002fae3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c002fae6:	83 ec 0c             	sub    $0xc,%esp
c002fae9:	50                   	push   %eax
c002faea:	e8 02 04 00 00       	call   c002fef1 <file_open>
c002faef:	83 c4 10             	add    $0x10,%esp
c002faf2:	89 dc                	mov    %ebx,%esp
c002faf4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002faf7:	c9                   	leave  
c002faf8:	c3                   	ret    

c002faf9 <filesys_remove>:
c002faf9:	55                   	push   %ebp
c002fafa:	89 e5                	mov    %esp,%ebp
c002fafc:	53                   	push   %ebx
c002fafd:	83 ec 24             	sub    $0x24,%esp
c002fb00:	89 e0                	mov    %esp,%eax
c002fb02:	89 c3                	mov    %eax,%ebx
c002fb04:	83 ec 0c             	sub    $0xc,%esp
c002fb07:	ff 75 08             	pushl  0x8(%ebp)
c002fb0a:	e8 3a 9d ff ff       	call   c0029849 <strlen>
c002fb0f:	83 c4 10             	add    $0x10,%esp
c002fb12:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002fb15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fb18:	8d 50 ff             	lea    -0x1(%eax),%edx
c002fb1b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c002fb1e:	89 c2                	mov    %eax,%edx
c002fb20:	b8 10 00 00 00       	mov    $0x10,%eax
c002fb25:	83 e8 01             	sub    $0x1,%eax
c002fb28:	01 d0                	add    %edx,%eax
c002fb2a:	b9 10 00 00 00       	mov    $0x10,%ecx
c002fb2f:	ba 00 00 00 00       	mov    $0x0,%edx
c002fb34:	f7 f1                	div    %ecx
c002fb36:	6b c0 10             	imul   $0x10,%eax,%eax
c002fb39:	29 c4                	sub    %eax,%esp
c002fb3b:	89 e0                	mov    %esp,%eax
c002fb3d:	83 c0 00             	add    $0x0,%eax
c002fb40:	89 45 ec             	mov    %eax,-0x14(%ebp)
c002fb43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fb46:	8d 50 ff             	lea    -0x1(%eax),%edx
c002fb49:	89 55 e8             	mov    %edx,-0x18(%ebp)
c002fb4c:	89 c2                	mov    %eax,%edx
c002fb4e:	b8 10 00 00 00       	mov    $0x10,%eax
c002fb53:	83 e8 01             	sub    $0x1,%eax
c002fb56:	01 d0                	add    %edx,%eax
c002fb58:	b9 10 00 00 00       	mov    $0x10,%ecx
c002fb5d:	ba 00 00 00 00       	mov    $0x0,%edx
c002fb62:	f7 f1                	div    %ecx
c002fb64:	6b c0 10             	imul   $0x10,%eax,%eax
c002fb67:	29 c4                	sub    %eax,%esp
c002fb69:	89 e0                	mov    %esp,%eax
c002fb6b:	83 c0 00             	add    $0x0,%eax
c002fb6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c002fb71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c002fb74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002fb77:	83 ec 04             	sub    $0x4,%esp
c002fb7a:	52                   	push   %edx
c002fb7b:	50                   	push   %eax
c002fb7c:	ff 75 08             	pushl  0x8(%ebp)
c002fb7f:	e8 8e 0a 00 00       	call   c0030612 <parse_path_name>
c002fb84:	83 c4 10             	add    $0x10,%esp
c002fb87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c002fb8a:	83 ec 0c             	sub    $0xc,%esp
c002fb8d:	50                   	push   %eax
c002fb8e:	e8 eb 0c 00 00       	call   c003087e <dir_open_path>
c002fb93:	83 c4 10             	add    $0x10,%esp
c002fb96:	89 45 e0             	mov    %eax,-0x20(%ebp)
c002fb99:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c002fb9d:	74 1d                	je     c002fbbc <filesys_remove+0xc3>
c002fb9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c002fba2:	83 ec 08             	sub    $0x8,%esp
c002fba5:	50                   	push   %eax
c002fba6:	ff 75 e0             	pushl  -0x20(%ebp)
c002fba9:	e8 2e 13 00 00       	call   c0030edc <dir_remove>
c002fbae:	83 c4 10             	add    $0x10,%esp
c002fbb1:	84 c0                	test   %al,%al
c002fbb3:	74 07                	je     c002fbbc <filesys_remove+0xc3>
c002fbb5:	b8 01 00 00 00       	mov    $0x1,%eax
c002fbba:	eb 05                	jmp    c002fbc1 <filesys_remove+0xc8>
c002fbbc:	b8 00 00 00 00       	mov    $0x0,%eax
c002fbc1:	88 45 df             	mov    %al,-0x21(%ebp)
c002fbc4:	80 65 df 01          	andb   $0x1,-0x21(%ebp)
c002fbc8:	83 ec 0c             	sub    $0xc,%esp
c002fbcb:	ff 75 e0             	pushl  -0x20(%ebp)
c002fbce:	e8 7f 0e 00 00       	call   c0030a52 <dir_close>
c002fbd3:	83 c4 10             	add    $0x10,%esp
c002fbd6:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c002fbda:	89 dc                	mov    %ebx,%esp
c002fbdc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c002fbdf:	c9                   	leave  
c002fbe0:	c3                   	ret    

c002fbe1 <do_format>:
c002fbe1:	55                   	push   %ebp
c002fbe2:	89 e5                	mov    %esp,%ebp
c002fbe4:	83 ec 08             	sub    $0x8,%esp
c002fbe7:	83 ec 0c             	sub    $0xc,%esp
c002fbea:	68 3f 5d 03 c0       	push   $0xc0035d3f
c002fbef:	e8 d5 83 ff ff       	call   c0027fc9 <printf>
c002fbf4:	83 c4 10             	add    $0x10,%esp
c002fbf7:	e8 3c 02 00 00       	call   c002fe38 <free_map_create>
c002fbfc:	83 ec 08             	sub    $0x8,%esp
c002fbff:	6a 10                	push   $0x10
c002fc01:	6a 01                	push   $0x1
c002fc03:	e8 44 0b 00 00       	call   c003074c <dir_create>
c002fc08:	83 c4 10             	add    $0x10,%esp
c002fc0b:	83 f0 01             	xor    $0x1,%eax
c002fc0e:	84 c0                	test   %al,%al
c002fc10:	74 19                	je     c002fc2b <do_format+0x4a>
c002fc12:	68 5c 5d 03 c0       	push   $0xc0035d5c
c002fc17:	68 94 5d 03 c0       	push   $0xc0035d94
c002fc1c:	68 83 00 00 00       	push   $0x83
c002fc21:	68 27 5d 03 c0       	push   $0xc0035d27
c002fc26:	e8 ff a8 ff ff       	call   c002a52a <debug_panic>
c002fc2b:	e8 ee 01 00 00       	call   c002fe1e <free_map_close>
c002fc30:	83 ec 0c             	sub    $0xc,%esp
c002fc33:	68 7b 5d 03 c0       	push   $0xc0035d7b
c002fc38:	e8 b4 cb ff ff       	call   c002c7f1 <puts>
c002fc3d:	83 c4 10             	add    $0x10,%esp
c002fc40:	90                   	nop
c002fc41:	c9                   	leave  
c002fc42:	c3                   	ret    

c002fc43 <free_map_init>:
c002fc43:	55                   	push   %ebp
c002fc44:	89 e5                	mov    %esp,%ebp
c002fc46:	83 ec 08             	sub    $0x8,%esp
c002fc49:	a1 7c 61 04 c0       	mov    0xc004617c,%eax
c002fc4e:	83 ec 0c             	sub    $0xc,%esp
c002fc51:	50                   	push   %eax
c002fc52:	e8 44 61 ff ff       	call   c0025d9b <block_size>
c002fc57:	83 c4 10             	add    $0x10,%esp
c002fc5a:	83 ec 0c             	sub    $0xc,%esp
c002fc5d:	50                   	push   %eax
c002fc5e:	e8 4a b9 ff ff       	call   c002b5ad <bitmap_create>
c002fc63:	83 c4 10             	add    $0x10,%esp
c002fc66:	a3 18 dd 03 c0       	mov    %eax,0xc003dd18
c002fc6b:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fc70:	85 c0                	test   %eax,%eax
c002fc72:	75 16                	jne    c002fc8a <free_map_init+0x47>
c002fc74:	68 a0 5d 03 c0       	push   $0xc0035da0
c002fc79:	68 84 5e 03 c0       	push   $0xc0035e84
c002fc7e:	6a 11                	push   $0x11
c002fc80:	68 d8 5d 03 c0       	push   $0xc0035dd8
c002fc85:	e8 a0 a8 ff ff       	call   c002a52a <debug_panic>
c002fc8a:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fc8f:	83 ec 08             	sub    $0x8,%esp
c002fc92:	6a 00                	push   $0x0
c002fc94:	50                   	push   %eax
c002fc95:	e8 d0 ba ff ff       	call   c002b76a <bitmap_mark>
c002fc9a:	83 c4 10             	add    $0x10,%esp
c002fc9d:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fca2:	83 ec 08             	sub    $0x8,%esp
c002fca5:	6a 01                	push   $0x1
c002fca7:	50                   	push   %eax
c002fca8:	e8 bd ba ff ff       	call   c002b76a <bitmap_mark>
c002fcad:	83 c4 10             	add    $0x10,%esp
c002fcb0:	90                   	nop
c002fcb1:	c9                   	leave  
c002fcb2:	c3                   	ret    

c002fcb3 <free_map_allocate>:
c002fcb3:	55                   	push   %ebp
c002fcb4:	89 e5                	mov    %esp,%ebp
c002fcb6:	83 ec 18             	sub    $0x18,%esp
c002fcb9:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fcbe:	6a 00                	push   $0x0
c002fcc0:	ff 75 08             	pushl  0x8(%ebp)
c002fcc3:	6a 00                	push   $0x0
c002fcc5:	50                   	push   %eax
c002fcc6:	e8 bf bf ff ff       	call   c002bc8a <bitmap_scan_and_flip>
c002fccb:	83 c4 10             	add    $0x10,%esp
c002fcce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002fcd1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c002fcd5:	74 45                	je     c002fd1c <free_map_allocate+0x69>
c002fcd7:	a1 14 dd 03 c0       	mov    0xc003dd14,%eax
c002fcdc:	85 c0                	test   %eax,%eax
c002fcde:	74 3c                	je     c002fd1c <free_map_allocate+0x69>
c002fce0:	8b 15 14 dd 03 c0    	mov    0xc003dd14,%edx
c002fce6:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fceb:	83 ec 08             	sub    $0x8,%esp
c002fcee:	52                   	push   %edx
c002fcef:	50                   	push   %eax
c002fcf0:	e8 8e c0 ff ff       	call   c002bd83 <bitmap_write>
c002fcf5:	83 c4 10             	add    $0x10,%esp
c002fcf8:	83 f0 01             	xor    $0x1,%eax
c002fcfb:	84 c0                	test   %al,%al
c002fcfd:	74 1d                	je     c002fd1c <free_map_allocate+0x69>
c002fcff:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fd04:	6a 00                	push   $0x0
c002fd06:	ff 75 08             	pushl  0x8(%ebp)
c002fd09:	ff 75 f4             	pushl  -0xc(%ebp)
c002fd0c:	50                   	push   %eax
c002fd0d:	e8 eb bb ff ff       	call   c002b8fd <bitmap_set_multiple>
c002fd12:	83 c4 10             	add    $0x10,%esp
c002fd15:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
c002fd1c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c002fd20:	74 08                	je     c002fd2a <free_map_allocate+0x77>
c002fd22:	8b 45 0c             	mov    0xc(%ebp),%eax
c002fd25:	8b 55 f4             	mov    -0xc(%ebp),%edx
c002fd28:	89 10                	mov    %edx,(%eax)
c002fd2a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c002fd2e:	0f 95 c0             	setne  %al
c002fd31:	c9                   	leave  
c002fd32:	c3                   	ret    

c002fd33 <free_map_release>:
c002fd33:	55                   	push   %ebp
c002fd34:	89 e5                	mov    %esp,%ebp
c002fd36:	83 ec 08             	sub    $0x8,%esp
c002fd39:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fd3e:	83 ec 04             	sub    $0x4,%esp
c002fd41:	ff 75 0c             	pushl  0xc(%ebp)
c002fd44:	ff 75 08             	pushl  0x8(%ebp)
c002fd47:	50                   	push   %eax
c002fd48:	e8 5b be ff ff       	call   c002bba8 <bitmap_all>
c002fd4d:	83 c4 10             	add    $0x10,%esp
c002fd50:	84 c0                	test   %al,%al
c002fd52:	75 1e                	jne    c002fd72 <free_map_release+0x3f>
c002fd54:	83 ec 0c             	sub    $0xc,%esp
c002fd57:	68 f4 5d 03 c0       	push   $0xc0035df4
c002fd5c:	68 17 5e 03 c0       	push   $0xc0035e17
c002fd61:	68 94 5e 03 c0       	push   $0xc0035e94
c002fd66:	6a 2f                	push   $0x2f
c002fd68:	68 d8 5d 03 c0       	push   $0xc0035dd8
c002fd6d:	e8 b8 a7 ff ff       	call   c002a52a <debug_panic>
c002fd72:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fd77:	6a 00                	push   $0x0
c002fd79:	ff 75 0c             	pushl  0xc(%ebp)
c002fd7c:	ff 75 08             	pushl  0x8(%ebp)
c002fd7f:	50                   	push   %eax
c002fd80:	e8 78 bb ff ff       	call   c002b8fd <bitmap_set_multiple>
c002fd85:	83 c4 10             	add    $0x10,%esp
c002fd88:	8b 15 14 dd 03 c0    	mov    0xc003dd14,%edx
c002fd8e:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fd93:	83 ec 08             	sub    $0x8,%esp
c002fd96:	52                   	push   %edx
c002fd97:	50                   	push   %eax
c002fd98:	e8 e6 bf ff ff       	call   c002bd83 <bitmap_write>
c002fd9d:	83 c4 10             	add    $0x10,%esp
c002fda0:	90                   	nop
c002fda1:	c9                   	leave  
c002fda2:	c3                   	ret    

c002fda3 <free_map_open>:
c002fda3:	55                   	push   %ebp
c002fda4:	89 e5                	mov    %esp,%ebp
c002fda6:	83 ec 08             	sub    $0x8,%esp
c002fda9:	83 ec 0c             	sub    $0xc,%esp
c002fdac:	6a 00                	push   $0x0
c002fdae:	e8 c7 17 00 00       	call   c003157a <inode_open>
c002fdb3:	83 c4 10             	add    $0x10,%esp
c002fdb6:	83 ec 0c             	sub    $0xc,%esp
c002fdb9:	50                   	push   %eax
c002fdba:	e8 32 01 00 00       	call   c002fef1 <file_open>
c002fdbf:	83 c4 10             	add    $0x10,%esp
c002fdc2:	a3 14 dd 03 c0       	mov    %eax,0xc003dd14
c002fdc7:	a1 14 dd 03 c0       	mov    0xc003dd14,%eax
c002fdcc:	85 c0                	test   %eax,%eax
c002fdce:	75 16                	jne    c002fde6 <free_map_open+0x43>
c002fdd0:	68 2e 5e 03 c0       	push   $0xc0035e2e
c002fdd5:	68 a8 5e 03 c0       	push   $0xc0035ea8
c002fdda:	6a 3a                	push   $0x3a
c002fddc:	68 d8 5d 03 c0       	push   $0xc0035dd8
c002fde1:	e8 44 a7 ff ff       	call   c002a52a <debug_panic>
c002fde6:	8b 15 14 dd 03 c0    	mov    0xc003dd14,%edx
c002fdec:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fdf1:	83 ec 08             	sub    $0x8,%esp
c002fdf4:	52                   	push   %edx
c002fdf5:	50                   	push   %eax
c002fdf6:	e8 ee be ff ff       	call   c002bce9 <bitmap_read>
c002fdfb:	83 c4 10             	add    $0x10,%esp
c002fdfe:	83 f0 01             	xor    $0x1,%eax
c002fe01:	84 c0                	test   %al,%al
c002fe03:	74 16                	je     c002fe1b <free_map_open+0x78>
c002fe05:	68 42 5e 03 c0       	push   $0xc0035e42
c002fe0a:	68 a8 5e 03 c0       	push   $0xc0035ea8
c002fe0f:	6a 3c                	push   $0x3c
c002fe11:	68 d8 5d 03 c0       	push   $0xc0035dd8
c002fe16:	e8 0f a7 ff ff       	call   c002a52a <debug_panic>
c002fe1b:	90                   	nop
c002fe1c:	c9                   	leave  
c002fe1d:	c3                   	ret    

c002fe1e <free_map_close>:
c002fe1e:	55                   	push   %ebp
c002fe1f:	89 e5                	mov    %esp,%ebp
c002fe21:	83 ec 08             	sub    $0x8,%esp
c002fe24:	a1 14 dd 03 c0       	mov    0xc003dd14,%eax
c002fe29:	83 ec 0c             	sub    $0xc,%esp
c002fe2c:	50                   	push   %eax
c002fe2d:	e8 49 01 00 00       	call   c002ff7b <file_close>
c002fe32:	83 c4 10             	add    $0x10,%esp
c002fe35:	90                   	nop
c002fe36:	c9                   	leave  
c002fe37:	c3                   	ret    

c002fe38 <free_map_create>:
c002fe38:	55                   	push   %ebp
c002fe39:	89 e5                	mov    %esp,%ebp
c002fe3b:	83 ec 08             	sub    $0x8,%esp
c002fe3e:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fe43:	83 ec 0c             	sub    $0xc,%esp
c002fe46:	50                   	push   %eax
c002fe47:	e8 8a be ff ff       	call   c002bcd6 <bitmap_file_size>
c002fe4c:	83 c4 10             	add    $0x10,%esp
c002fe4f:	83 ec 04             	sub    $0x4,%esp
c002fe52:	6a 00                	push   $0x0
c002fe54:	50                   	push   %eax
c002fe55:	6a 00                	push   $0x0
c002fe57:	e8 49 16 00 00       	call   c00314a5 <inode_create>
c002fe5c:	83 c4 10             	add    $0x10,%esp
c002fe5f:	83 f0 01             	xor    $0x1,%eax
c002fe62:	84 c0                	test   %al,%al
c002fe64:	74 16                	je     c002fe7c <free_map_create+0x44>
c002fe66:	68 56 5e 03 c0       	push   $0xc0035e56
c002fe6b:	68 b8 5e 03 c0       	push   $0xc0035eb8
c002fe70:	6a 4d                	push   $0x4d
c002fe72:	68 d8 5d 03 c0       	push   $0xc0035dd8
c002fe77:	e8 ae a6 ff ff       	call   c002a52a <debug_panic>
c002fe7c:	83 ec 0c             	sub    $0xc,%esp
c002fe7f:	6a 00                	push   $0x0
c002fe81:	e8 f4 16 00 00       	call   c003157a <inode_open>
c002fe86:	83 c4 10             	add    $0x10,%esp
c002fe89:	83 ec 0c             	sub    $0xc,%esp
c002fe8c:	50                   	push   %eax
c002fe8d:	e8 5f 00 00 00       	call   c002fef1 <file_open>
c002fe92:	83 c4 10             	add    $0x10,%esp
c002fe95:	a3 14 dd 03 c0       	mov    %eax,0xc003dd14
c002fe9a:	a1 14 dd 03 c0       	mov    0xc003dd14,%eax
c002fe9f:	85 c0                	test   %eax,%eax
c002fea1:	75 16                	jne    c002feb9 <free_map_create+0x81>
c002fea3:	68 2e 5e 03 c0       	push   $0xc0035e2e
c002fea8:	68 b8 5e 03 c0       	push   $0xc0035eb8
c002fead:	6a 52                	push   $0x52
c002feaf:	68 d8 5d 03 c0       	push   $0xc0035dd8
c002feb4:	e8 71 a6 ff ff       	call   c002a52a <debug_panic>
c002feb9:	8b 15 14 dd 03 c0    	mov    0xc003dd14,%edx
c002febf:	a1 18 dd 03 c0       	mov    0xc003dd18,%eax
c002fec4:	83 ec 08             	sub    $0x8,%esp
c002fec7:	52                   	push   %edx
c002fec8:	50                   	push   %eax
c002fec9:	e8 b5 be ff ff       	call   c002bd83 <bitmap_write>
c002fece:	83 c4 10             	add    $0x10,%esp
c002fed1:	83 f0 01             	xor    $0x1,%eax
c002fed4:	84 c0                	test   %al,%al
c002fed6:	74 16                	je     c002feee <free_map_create+0xb6>
c002fed8:	68 6f 5e 03 c0       	push   $0xc0035e6f
c002fedd:	68 b8 5e 03 c0       	push   $0xc0035eb8
c002fee2:	6a 54                	push   $0x54
c002fee4:	68 d8 5d 03 c0       	push   $0xc0035dd8
c002fee9:	e8 3c a6 ff ff       	call   c002a52a <debug_panic>
c002feee:	90                   	nop
c002feef:	c9                   	leave  
c002fef0:	c3                   	ret    

c002fef1 <file_open>:
c002fef1:	55                   	push   %ebp
c002fef2:	89 e5                	mov    %esp,%ebp
c002fef4:	83 ec 18             	sub    $0x18,%esp
c002fef7:	83 ec 08             	sub    $0x8,%esp
c002fefa:	6a 0c                	push   $0xc
c002fefc:	6a 01                	push   $0x1
c002fefe:	e8 b9 43 ff ff       	call   c00242bc <calloc>
c002ff03:	83 c4 10             	add    $0x10,%esp
c002ff06:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ff09:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002ff0d:	74 24                	je     c002ff33 <file_open+0x42>
c002ff0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c002ff13:	74 1e                	je     c002ff33 <file_open+0x42>
c002ff15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ff18:	8b 55 08             	mov    0x8(%ebp),%edx
c002ff1b:	89 10                	mov    %edx,(%eax)
c002ff1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ff20:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c002ff27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ff2a:	c6 40 08 00          	movb   $0x0,0x8(%eax)
c002ff2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ff31:	eb 21                	jmp    c002ff54 <file_open+0x63>
c002ff33:	83 ec 0c             	sub    $0xc,%esp
c002ff36:	ff 75 08             	pushl  0x8(%ebp)
c002ff39:	e8 25 19 00 00       	call   c0031863 <inode_close>
c002ff3e:	83 c4 10             	add    $0x10,%esp
c002ff41:	83 ec 0c             	sub    $0xc,%esp
c002ff44:	ff 75 f4             	pushl  -0xc(%ebp)
c002ff47:	e8 9f 44 ff ff       	call   c00243eb <free>
c002ff4c:	83 c4 10             	add    $0x10,%esp
c002ff4f:	b8 00 00 00 00       	mov    $0x0,%eax
c002ff54:	c9                   	leave  
c002ff55:	c3                   	ret    

c002ff56 <file_reopen>:
c002ff56:	55                   	push   %ebp
c002ff57:	89 e5                	mov    %esp,%ebp
c002ff59:	83 ec 08             	sub    $0x8,%esp
c002ff5c:	8b 45 08             	mov    0x8(%ebp),%eax
c002ff5f:	8b 00                	mov    (%eax),%eax
c002ff61:	83 ec 0c             	sub    $0xc,%esp
c002ff64:	50                   	push   %eax
c002ff65:	e8 f4 16 00 00       	call   c003165e <inode_reopen>
c002ff6a:	83 c4 10             	add    $0x10,%esp
c002ff6d:	83 ec 0c             	sub    $0xc,%esp
c002ff70:	50                   	push   %eax
c002ff71:	e8 7b ff ff ff       	call   c002fef1 <file_open>
c002ff76:	83 c4 10             	add    $0x10,%esp
c002ff79:	c9                   	leave  
c002ff7a:	c3                   	ret    

c002ff7b <file_close>:
c002ff7b:	55                   	push   %ebp
c002ff7c:	89 e5                	mov    %esp,%ebp
c002ff7e:	83 ec 08             	sub    $0x8,%esp
c002ff81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c002ff85:	74 2d                	je     c002ffb4 <file_close+0x39>
c002ff87:	83 ec 0c             	sub    $0xc,%esp
c002ff8a:	ff 75 08             	pushl  0x8(%ebp)
c002ff8d:	e8 34 01 00 00       	call   c00300c6 <file_allow_write>
c002ff92:	83 c4 10             	add    $0x10,%esp
c002ff95:	8b 45 08             	mov    0x8(%ebp),%eax
c002ff98:	8b 00                	mov    (%eax),%eax
c002ff9a:	83 ec 0c             	sub    $0xc,%esp
c002ff9d:	50                   	push   %eax
c002ff9e:	e8 c0 18 00 00       	call   c0031863 <inode_close>
c002ffa3:	83 c4 10             	add    $0x10,%esp
c002ffa6:	83 ec 0c             	sub    $0xc,%esp
c002ffa9:	ff 75 08             	pushl  0x8(%ebp)
c002ffac:	e8 3a 44 ff ff       	call   c00243eb <free>
c002ffb1:	83 c4 10             	add    $0x10,%esp
c002ffb4:	90                   	nop
c002ffb5:	c9                   	leave  
c002ffb6:	c3                   	ret    

c002ffb7 <file_get_inode>:
c002ffb7:	55                   	push   %ebp
c002ffb8:	89 e5                	mov    %esp,%ebp
c002ffba:	8b 45 08             	mov    0x8(%ebp),%eax
c002ffbd:	8b 00                	mov    (%eax),%eax
c002ffbf:	5d                   	pop    %ebp
c002ffc0:	c3                   	ret    

c002ffc1 <file_read>:
c002ffc1:	55                   	push   %ebp
c002ffc2:	89 e5                	mov    %esp,%ebp
c002ffc4:	83 ec 18             	sub    $0x18,%esp
c002ffc7:	8b 45 08             	mov    0x8(%ebp),%eax
c002ffca:	8b 50 04             	mov    0x4(%eax),%edx
c002ffcd:	8b 45 08             	mov    0x8(%ebp),%eax
c002ffd0:	8b 00                	mov    (%eax),%eax
c002ffd2:	52                   	push   %edx
c002ffd3:	ff 75 10             	pushl  0x10(%ebp)
c002ffd6:	ff 75 0c             	pushl  0xc(%ebp)
c002ffd9:	50                   	push   %eax
c002ffda:	e8 2f 19 00 00       	call   c003190e <inode_read_at>
c002ffdf:	83 c4 10             	add    $0x10,%esp
c002ffe2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c002ffe5:	8b 45 08             	mov    0x8(%ebp),%eax
c002ffe8:	8b 50 04             	mov    0x4(%eax),%edx
c002ffeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002ffee:	01 c2                	add    %eax,%edx
c002fff0:	8b 45 08             	mov    0x8(%ebp),%eax
c002fff3:	89 50 04             	mov    %edx,0x4(%eax)
c002fff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c002fff9:	c9                   	leave  
c002fffa:	c3                   	ret    

c002fffb <file_read_at>:
c002fffb:	55                   	push   %ebp
c002fffc:	89 e5                	mov    %esp,%ebp
c002fffe:	83 ec 08             	sub    $0x8,%esp
c0030001:	8b 45 08             	mov    0x8(%ebp),%eax
c0030004:	8b 00                	mov    (%eax),%eax
c0030006:	ff 75 14             	pushl  0x14(%ebp)
c0030009:	ff 75 10             	pushl  0x10(%ebp)
c003000c:	ff 75 0c             	pushl  0xc(%ebp)
c003000f:	50                   	push   %eax
c0030010:	e8 f9 18 00 00       	call   c003190e <inode_read_at>
c0030015:	83 c4 10             	add    $0x10,%esp
c0030018:	c9                   	leave  
c0030019:	c3                   	ret    

c003001a <file_write>:
c003001a:	55                   	push   %ebp
c003001b:	89 e5                	mov    %esp,%ebp
c003001d:	83 ec 18             	sub    $0x18,%esp
c0030020:	8b 45 08             	mov    0x8(%ebp),%eax
c0030023:	8b 50 04             	mov    0x4(%eax),%edx
c0030026:	8b 45 08             	mov    0x8(%ebp),%eax
c0030029:	8b 00                	mov    (%eax),%eax
c003002b:	52                   	push   %edx
c003002c:	ff 75 10             	pushl  0x10(%ebp)
c003002f:	ff 75 0c             	pushl  0xc(%ebp)
c0030032:	50                   	push   %eax
c0030033:	e8 11 1a 00 00       	call   c0031a49 <inode_write_at>
c0030038:	83 c4 10             	add    $0x10,%esp
c003003b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003003e:	8b 45 08             	mov    0x8(%ebp),%eax
c0030041:	8b 50 04             	mov    0x4(%eax),%edx
c0030044:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030047:	01 c2                	add    %eax,%edx
c0030049:	8b 45 08             	mov    0x8(%ebp),%eax
c003004c:	89 50 04             	mov    %edx,0x4(%eax)
c003004f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030052:	c9                   	leave  
c0030053:	c3                   	ret    

c0030054 <file_write_at>:
c0030054:	55                   	push   %ebp
c0030055:	89 e5                	mov    %esp,%ebp
c0030057:	83 ec 08             	sub    $0x8,%esp
c003005a:	8b 45 08             	mov    0x8(%ebp),%eax
c003005d:	8b 00                	mov    (%eax),%eax
c003005f:	ff 75 14             	pushl  0x14(%ebp)
c0030062:	ff 75 10             	pushl  0x10(%ebp)
c0030065:	ff 75 0c             	pushl  0xc(%ebp)
c0030068:	50                   	push   %eax
c0030069:	e8 db 19 00 00       	call   c0031a49 <inode_write_at>
c003006e:	83 c4 10             	add    $0x10,%esp
c0030071:	c9                   	leave  
c0030072:	c3                   	ret    

c0030073 <file_deny_write>:
c0030073:	55                   	push   %ebp
c0030074:	89 e5                	mov    %esp,%ebp
c0030076:	83 ec 08             	sub    $0x8,%esp
c0030079:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c003007d:	75 1e                	jne    c003009d <file_deny_write+0x2a>
c003007f:	83 ec 0c             	sub    $0xc,%esp
c0030082:	68 c8 5e 03 c0       	push   $0xc0035ec8
c0030087:	68 d5 5e 03 c0       	push   $0xc0035ed5
c003008c:	68 10 5f 03 c0       	push   $0xc0035f10
c0030091:	6a 79                	push   $0x79
c0030093:	68 ec 5e 03 c0       	push   $0xc0035eec
c0030098:	e8 8d a4 ff ff       	call   c002a52a <debug_panic>
c003009d:	8b 45 08             	mov    0x8(%ebp),%eax
c00300a0:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c00300a4:	83 f0 01             	xor    $0x1,%eax
c00300a7:	84 c0                	test   %al,%al
c00300a9:	74 18                	je     c00300c3 <file_deny_write+0x50>
c00300ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00300ae:	c6 40 08 01          	movb   $0x1,0x8(%eax)
c00300b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00300b5:	8b 00                	mov    (%eax),%eax
c00300b7:	83 ec 0c             	sub    $0xc,%esp
c00300ba:	50                   	push   %eax
c00300bb:	e8 8e 1b 00 00       	call   c0031c4e <inode_deny_write>
c00300c0:	83 c4 10             	add    $0x10,%esp
c00300c3:	90                   	nop
c00300c4:	c9                   	leave  
c00300c5:	c3                   	ret    

c00300c6 <file_allow_write>:
c00300c6:	55                   	push   %ebp
c00300c7:	89 e5                	mov    %esp,%ebp
c00300c9:	83 ec 08             	sub    $0x8,%esp
c00300cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00300d0:	75 21                	jne    c00300f3 <file_allow_write+0x2d>
c00300d2:	83 ec 0c             	sub    $0xc,%esp
c00300d5:	68 c8 5e 03 c0       	push   $0xc0035ec8
c00300da:	68 d5 5e 03 c0       	push   $0xc0035ed5
c00300df:	68 20 5f 03 c0       	push   $0xc0035f20
c00300e4:	68 87 00 00 00       	push   $0x87
c00300e9:	68 ec 5e 03 c0       	push   $0xc0035eec
c00300ee:	e8 37 a4 ff ff       	call   c002a52a <debug_panic>
c00300f3:	8b 45 08             	mov    0x8(%ebp),%eax
c00300f6:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c00300fa:	84 c0                	test   %al,%al
c00300fc:	74 18                	je     c0030116 <file_allow_write+0x50>
c00300fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0030101:	c6 40 08 00          	movb   $0x0,0x8(%eax)
c0030105:	8b 45 08             	mov    0x8(%ebp),%eax
c0030108:	8b 00                	mov    (%eax),%eax
c003010a:	83 ec 0c             	sub    $0xc,%esp
c003010d:	50                   	push   %eax
c003010e:	e8 84 1b 00 00       	call   c0031c97 <inode_allow_write>
c0030113:	83 c4 10             	add    $0x10,%esp
c0030116:	90                   	nop
c0030117:	c9                   	leave  
c0030118:	c3                   	ret    

c0030119 <file_length>:
c0030119:	55                   	push   %ebp
c003011a:	89 e5                	mov    %esp,%ebp
c003011c:	83 ec 08             	sub    $0x8,%esp
c003011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030123:	75 21                	jne    c0030146 <file_length+0x2d>
c0030125:	83 ec 0c             	sub    $0xc,%esp
c0030128:	68 c8 5e 03 c0       	push   $0xc0035ec8
c003012d:	68 d5 5e 03 c0       	push   $0xc0035ed5
c0030132:	68 34 5f 03 c0       	push   $0xc0035f34
c0030137:	68 93 00 00 00       	push   $0x93
c003013c:	68 ec 5e 03 c0       	push   $0xc0035eec
c0030141:	e8 e4 a3 ff ff       	call   c002a52a <debug_panic>
c0030146:	8b 45 08             	mov    0x8(%ebp),%eax
c0030149:	8b 00                	mov    (%eax),%eax
c003014b:	83 ec 0c             	sub    $0xc,%esp
c003014e:	50                   	push   %eax
c003014f:	e8 b7 1b 00 00       	call   c0031d0b <inode_length>
c0030154:	83 c4 10             	add    $0x10,%esp
c0030157:	c9                   	leave  
c0030158:	c3                   	ret    

c0030159 <file_seek>:
c0030159:	55                   	push   %ebp
c003015a:	89 e5                	mov    %esp,%ebp
c003015c:	83 ec 08             	sub    $0x8,%esp
c003015f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030163:	75 21                	jne    c0030186 <file_seek+0x2d>
c0030165:	83 ec 0c             	sub    $0xc,%esp
c0030168:	68 c8 5e 03 c0       	push   $0xc0035ec8
c003016d:	68 d5 5e 03 c0       	push   $0xc0035ed5
c0030172:	68 40 5f 03 c0       	push   $0xc0035f40
c0030177:	68 9c 00 00 00       	push   $0x9c
c003017c:	68 ec 5e 03 c0       	push   $0xc0035eec
c0030181:	e8 a4 a3 ff ff       	call   c002a52a <debug_panic>
c0030186:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c003018a:	79 21                	jns    c00301ad <file_seek+0x54>
c003018c:	83 ec 0c             	sub    $0xc,%esp
c003018f:	68 01 5f 03 c0       	push   $0xc0035f01
c0030194:	68 d5 5e 03 c0       	push   $0xc0035ed5
c0030199:	68 40 5f 03 c0       	push   $0xc0035f40
c003019e:	68 9d 00 00 00       	push   $0x9d
c00301a3:	68 ec 5e 03 c0       	push   $0xc0035eec
c00301a8:	e8 7d a3 ff ff       	call   c002a52a <debug_panic>
c00301ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00301b0:	8b 55 0c             	mov    0xc(%ebp),%edx
c00301b3:	89 50 04             	mov    %edx,0x4(%eax)
c00301b6:	90                   	nop
c00301b7:	c9                   	leave  
c00301b8:	c3                   	ret    

c00301b9 <file_tell>:
c00301b9:	55                   	push   %ebp
c00301ba:	89 e5                	mov    %esp,%ebp
c00301bc:	83 ec 08             	sub    $0x8,%esp
c00301bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00301c3:	75 21                	jne    c00301e6 <file_tell+0x2d>
c00301c5:	83 ec 0c             	sub    $0xc,%esp
c00301c8:	68 c8 5e 03 c0       	push   $0xc0035ec8
c00301cd:	68 d5 5e 03 c0       	push   $0xc0035ed5
c00301d2:	68 4c 5f 03 c0       	push   $0xc0035f4c
c00301d7:	68 a6 00 00 00       	push   $0xa6
c00301dc:	68 ec 5e 03 c0       	push   $0xc0035eec
c00301e1:	e8 44 a3 ff ff       	call   c002a52a <debug_panic>
c00301e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00301e9:	8b 40 04             	mov    0x4(%eax),%eax
c00301ec:	c9                   	leave  
c00301ed:	c3                   	ret    

c00301ee <buffer_cache_init>:
c00301ee:	55                   	push   %ebp
c00301ef:	89 e5                	mov    %esp,%ebp
c00301f1:	83 ec 18             	sub    $0x18,%esp
c00301f4:	83 ec 0c             	sub    $0xc,%esp
c00301f7:	68 20 5f 04 c0       	push   $0xc0045f20
c00301fc:	e8 7d 32 ff ff       	call   c002347e <lock_init>
c0030201:	83 c4 10             	add    $0x10,%esp
c0030204:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c003020b:	eb 43                	jmp    c0030250 <buffer_cache_init+0x62>
c003020d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030210:	c1 e0 03             	shl    $0x3,%eax
c0030213:	89 c2                	mov    %eax,%edx
c0030215:	c1 e2 06             	shl    $0x6,%edx
c0030218:	01 d0                	add    %edx,%eax
c003021a:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c003021f:	c6 00 00             	movb   $0x0,(%eax)
c0030222:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030225:	c1 e0 03             	shl    $0x3,%eax
c0030228:	89 c2                	mov    %eax,%edx
c003022a:	c1 e2 06             	shl    $0x6,%edx
c003022d:	01 d0                	add    %edx,%eax
c003022f:	05 21 dd 03 c0       	add    $0xc003dd21,%eax
c0030234:	c6 00 00             	movb   $0x0,(%eax)
c0030237:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003023a:	c1 e0 03             	shl    $0x3,%eax
c003023d:	89 c2                	mov    %eax,%edx
c003023f:	c1 e2 06             	shl    $0x6,%edx
c0030242:	01 d0                	add    %edx,%eax
c0030244:	05 22 dd 03 c0       	add    $0xc003dd22,%eax
c0030249:	c6 00 00             	movb   $0x0,(%eax)
c003024c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0030250:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
c0030254:	76 b7                	jbe    c003020d <buffer_cache_init+0x1f>
c0030256:	90                   	nop
c0030257:	c9                   	leave  
c0030258:	c3                   	ret    

c0030259 <buffer_cache_close>:
c0030259:	55                   	push   %ebp
c003025a:	89 e5                	mov    %esp,%ebp
c003025c:	83 ec 18             	sub    $0x18,%esp
c003025f:	83 ec 0c             	sub    $0xc,%esp
c0030262:	68 20 5f 04 c0       	push   $0xc0045f20
c0030267:	e8 5f 32 ff ff       	call   c00234cb <lock_acquire>
c003026c:	83 c4 10             	add    $0x10,%esp
c003026f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0030276:	eb 72                	jmp    c00302ea <buffer_cache_close+0x91>
c0030278:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003027b:	c1 e0 03             	shl    $0x3,%eax
c003027e:	89 c2                	mov    %eax,%edx
c0030280:	c1 e2 06             	shl    $0x6,%edx
c0030283:	01 d0                	add    %edx,%eax
c0030285:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c003028a:	0f b6 00             	movzbl (%eax),%eax
c003028d:	84 c0                	test   %al,%al
c003028f:	74 55                	je     c00302e6 <buffer_cache_close+0x8d>
c0030291:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030294:	c1 e0 03             	shl    $0x3,%eax
c0030297:	89 c2                	mov    %eax,%edx
c0030299:	c1 e2 06             	shl    $0x6,%edx
c003029c:	01 d0                	add    %edx,%eax
c003029e:	05 21 dd 03 c0       	add    $0xc003dd21,%eax
c00302a3:	0f b6 00             	movzbl (%eax),%eax
c00302a6:	84 c0                	test   %al,%al
c00302a8:	74 3c                	je     c00302e6 <buffer_cache_close+0x8d>
c00302aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00302ad:	c1 e0 03             	shl    $0x3,%eax
c00302b0:	89 c2                	mov    %eax,%edx
c00302b2:	c1 e2 06             	shl    $0x6,%edx
c00302b5:	01 d0                	add    %edx,%eax
c00302b7:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c00302bc:	8d 48 08             	lea    0x8(%eax),%ecx
c00302bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00302c2:	c1 e0 03             	shl    $0x3,%eax
c00302c5:	89 c2                	mov    %eax,%edx
c00302c7:	c1 e2 06             	shl    $0x6,%edx
c00302ca:	01 d0                	add    %edx,%eax
c00302cc:	05 24 dd 03 c0       	add    $0xc003dd24,%eax
c00302d1:	8b 10                	mov    (%eax),%edx
c00302d3:	a1 7c 61 04 c0       	mov    0xc004617c,%eax
c00302d8:	83 ec 04             	sub    $0x4,%esp
c00302db:	51                   	push   %ecx
c00302dc:	52                   	push   %edx
c00302dd:	50                   	push   %eax
c00302de:	e8 3c 5a ff ff       	call   c0025d1f <block_write>
c00302e3:	83 c4 10             	add    $0x10,%esp
c00302e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00302ea:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
c00302ee:	76 88                	jbe    c0030278 <buffer_cache_close+0x1f>
c00302f0:	83 ec 0c             	sub    $0xc,%esp
c00302f3:	68 20 5f 04 c0       	push   $0xc0045f20
c00302f8:	e8 0d 34 ff ff       	call   c002370a <lock_release>
c00302fd:	83 c4 10             	add    $0x10,%esp
c0030300:	90                   	nop
c0030301:	c9                   	leave  
c0030302:	c3                   	ret    

c0030303 <buffer_cache_lookup>:
c0030303:	55                   	push   %ebp
c0030304:	89 e5                	mov    %esp,%ebp
c0030306:	83 ec 10             	sub    $0x10,%esp
c0030309:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0030310:	eb 4a                	jmp    c003035c <buffer_cache_lookup+0x59>
c0030312:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0030315:	c1 e0 03             	shl    $0x3,%eax
c0030318:	89 c2                	mov    %eax,%edx
c003031a:	c1 e2 06             	shl    $0x6,%edx
c003031d:	01 d0                	add    %edx,%eax
c003031f:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c0030324:	0f b6 00             	movzbl (%eax),%eax
c0030327:	84 c0                	test   %al,%al
c0030329:	74 2d                	je     c0030358 <buffer_cache_lookup+0x55>
c003032b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c003032e:	c1 e0 03             	shl    $0x3,%eax
c0030331:	89 c2                	mov    %eax,%edx
c0030333:	c1 e2 06             	shl    $0x6,%edx
c0030336:	01 d0                	add    %edx,%eax
c0030338:	05 24 dd 03 c0       	add    $0xc003dd24,%eax
c003033d:	8b 00                	mov    (%eax),%eax
c003033f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0030342:	75 14                	jne    c0030358 <buffer_cache_lookup+0x55>
c0030344:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0030347:	c1 e0 03             	shl    $0x3,%eax
c003034a:	89 c2                	mov    %eax,%edx
c003034c:	c1 e2 06             	shl    $0x6,%edx
c003034f:	01 d0                	add    %edx,%eax
c0030351:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c0030356:	eb 0f                	jmp    c0030367 <buffer_cache_lookup+0x64>
c0030358:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c003035c:	83 7d fc 3f          	cmpl   $0x3f,-0x4(%ebp)
c0030360:	76 b0                	jbe    c0030312 <buffer_cache_lookup+0xf>
c0030362:	b8 00 00 00 00       	mov    $0x0,%eax
c0030367:	c9                   	leave  
c0030368:	c3                   	ret    

c0030369 <buffer_cache_evict>:
c0030369:	55                   	push   %ebp
c003036a:	89 e5                	mov    %esp,%ebp
c003036c:	83 ec 08             	sub    $0x8,%esp
c003036f:	83 ec 0c             	sub    $0xc,%esp
c0030372:	68 20 5f 04 c0       	push   $0xc0045f20
c0030377:	e8 4f 34 ff ff       	call   c00237cb <lock_held_by_current_thread>
c003037c:	83 c4 10             	add    $0x10,%esp
c003037f:	84 c0                	test   %al,%al
c0030381:	75 1e                	jne    c00303a1 <buffer_cache_evict+0x38>
c0030383:	83 ec 0c             	sub    $0xc,%esp
c0030386:	68 58 5f 03 c0       	push   $0xc0035f58
c003038b:	68 88 5f 03 c0       	push   $0xc0035f88
c0030390:	68 cc 5f 03 c0       	push   $0xc0035fcc
c0030395:	6a 3d                	push   $0x3d
c0030397:	68 9f 5f 03 c0       	push   $0xc0035f9f
c003039c:	e8 89 a1 ff ff       	call   c002a52a <debug_panic>
c00303a1:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c00303a6:	c1 e0 03             	shl    $0x3,%eax
c00303a9:	89 c2                	mov    %eax,%edx
c00303ab:	c1 e2 06             	shl    $0x6,%edx
c00303ae:	01 d0                	add    %edx,%eax
c00303b0:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c00303b5:	0f b6 00             	movzbl (%eax),%eax
c00303b8:	83 f0 01             	xor    $0x1,%eax
c00303bb:	84 c0                	test   %al,%al
c00303bd:	74 19                	je     c00303d8 <buffer_cache_evict+0x6f>
c00303bf:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c00303c4:	c1 e0 03             	shl    $0x3,%eax
c00303c7:	89 c2                	mov    %eax,%edx
c00303c9:	c1 e2 06             	shl    $0x6,%edx
c00303cc:	01 d0                	add    %edx,%eax
c00303ce:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c00303d3:	e9 04 01 00 00       	jmp    c00304dc <buffer_cache_evict+0x173>
c00303d8:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c00303dd:	c1 e0 03             	shl    $0x3,%eax
c00303e0:	89 c2                	mov    %eax,%edx
c00303e2:	c1 e2 06             	shl    $0x6,%edx
c00303e5:	01 d0                	add    %edx,%eax
c00303e7:	05 22 dd 03 c0       	add    $0xc003dd22,%eax
c00303ec:	0f b6 00             	movzbl (%eax),%eax
c00303ef:	84 c0                	test   %al,%al
c00303f1:	74 29                	je     c003041c <buffer_cache_evict+0xb3>
c00303f3:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c00303f8:	c1 e0 03             	shl    $0x3,%eax
c00303fb:	89 c2                	mov    %eax,%edx
c00303fd:	c1 e2 06             	shl    $0x6,%edx
c0030400:	01 d0                	add    %edx,%eax
c0030402:	05 22 dd 03 c0       	add    $0xc003dd22,%eax
c0030407:	c6 00 00             	movb   $0x0,(%eax)
c003040a:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c003040f:	83 c0 01             	add    $0x1,%eax
c0030412:	83 e0 3f             	and    $0x3f,%eax
c0030415:	a3 44 5f 04 c0       	mov    %eax,0xc0045f44
c003041a:	eb 85                	jmp    c00303a1 <buffer_cache_evict+0x38>
c003041c:	90                   	nop
c003041d:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c0030422:	c1 e0 03             	shl    $0x3,%eax
c0030425:	89 c2                	mov    %eax,%edx
c0030427:	c1 e2 06             	shl    $0x6,%edx
c003042a:	01 d0                	add    %edx,%eax
c003042c:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c0030431:	0f b6 00             	movzbl (%eax),%eax
c0030434:	84 c0                	test   %al,%al
c0030436:	75 1e                	jne    c0030456 <buffer_cache_evict+0xed>
c0030438:	83 ec 0c             	sub    $0xc,%esp
c003043b:	68 b5 5f 03 c0       	push   $0xc0035fb5
c0030440:	68 88 5f 03 c0       	push   $0xc0035f88
c0030445:	68 cc 5f 03 c0       	push   $0xc0035fcc
c003044a:	6a 4a                	push   $0x4a
c003044c:	68 9f 5f 03 c0       	push   $0xc0035f9f
c0030451:	e8 d4 a0 ff ff       	call   c002a52a <debug_panic>
c0030456:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c003045b:	c1 e0 03             	shl    $0x3,%eax
c003045e:	89 c2                	mov    %eax,%edx
c0030460:	c1 e2 06             	shl    $0x6,%edx
c0030463:	01 d0                	add    %edx,%eax
c0030465:	05 21 dd 03 c0       	add    $0xc003dd21,%eax
c003046a:	0f b6 00             	movzbl (%eax),%eax
c003046d:	84 c0                	test   %al,%al
c003046f:	74 40                	je     c00304b1 <buffer_cache_evict+0x148>
c0030471:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c0030476:	c1 e0 03             	shl    $0x3,%eax
c0030479:	89 c2                	mov    %eax,%edx
c003047b:	c1 e2 06             	shl    $0x6,%edx
c003047e:	01 d0                	add    %edx,%eax
c0030480:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c0030485:	8d 48 08             	lea    0x8(%eax),%ecx
c0030488:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c003048d:	c1 e0 03             	shl    $0x3,%eax
c0030490:	89 c2                	mov    %eax,%edx
c0030492:	c1 e2 06             	shl    $0x6,%edx
c0030495:	01 d0                	add    %edx,%eax
c0030497:	05 24 dd 03 c0       	add    $0xc003dd24,%eax
c003049c:	8b 10                	mov    (%eax),%edx
c003049e:	a1 7c 61 04 c0       	mov    0xc004617c,%eax
c00304a3:	83 ec 04             	sub    $0x4,%esp
c00304a6:	51                   	push   %ecx
c00304a7:	52                   	push   %edx
c00304a8:	50                   	push   %eax
c00304a9:	e8 71 58 ff ff       	call   c0025d1f <block_write>
c00304ae:	83 c4 10             	add    $0x10,%esp
c00304b1:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c00304b6:	c1 e0 03             	shl    $0x3,%eax
c00304b9:	89 c2                	mov    %eax,%edx
c00304bb:	c1 e2 06             	shl    $0x6,%edx
c00304be:	01 d0                	add    %edx,%eax
c00304c0:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c00304c5:	c6 00 00             	movb   $0x0,(%eax)
c00304c8:	a1 44 5f 04 c0       	mov    0xc0045f44,%eax
c00304cd:	c1 e0 03             	shl    $0x3,%eax
c00304d0:	89 c2                	mov    %eax,%edx
c00304d2:	c1 e2 06             	shl    $0x6,%edx
c00304d5:	01 d0                	add    %edx,%eax
c00304d7:	05 20 dd 03 c0       	add    $0xc003dd20,%eax
c00304dc:	c9                   	leave  
c00304dd:	c3                   	ret    

c00304de <buffer_cache_read>:
c00304de:	55                   	push   %ebp
c00304df:	89 e5                	mov    %esp,%ebp
c00304e1:	83 ec 18             	sub    $0x18,%esp
c00304e4:	83 ec 0c             	sub    $0xc,%esp
c00304e7:	68 20 5f 04 c0       	push   $0xc0045f20
c00304ec:	e8 da 2f ff ff       	call   c00234cb <lock_acquire>
c00304f1:	83 c4 10             	add    $0x10,%esp
c00304f4:	83 ec 0c             	sub    $0xc,%esp
c00304f7:	ff 75 08             	pushl  0x8(%ebp)
c00304fa:	e8 04 fe ff ff       	call   c0030303 <buffer_cache_lookup>
c00304ff:	83 c4 10             	add    $0x10,%esp
c0030502:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030509:	75 39                	jne    c0030544 <buffer_cache_read+0x66>
c003050b:	e8 59 fe ff ff       	call   c0030369 <buffer_cache_evict>
c0030510:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030513:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030516:	c6 00 01             	movb   $0x1,(%eax)
c0030519:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003051c:	c6 40 01 00          	movb   $0x0,0x1(%eax)
c0030520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030523:	8b 55 08             	mov    0x8(%ebp),%edx
c0030526:	89 50 04             	mov    %edx,0x4(%eax)
c0030529:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003052c:	8d 50 08             	lea    0x8(%eax),%edx
c003052f:	a1 7c 61 04 c0       	mov    0xc004617c,%eax
c0030534:	83 ec 04             	sub    $0x4,%esp
c0030537:	52                   	push   %edx
c0030538:	ff 75 08             	pushl  0x8(%ebp)
c003053b:	50                   	push   %eax
c003053c:	e8 8f 57 ff ff       	call   c0025cd0 <block_read>
c0030541:	83 c4 10             	add    $0x10,%esp
c0030544:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030547:	c6 40 02 01          	movb   $0x1,0x2(%eax)
c003054b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003054e:	83 c0 08             	add    $0x8,%eax
c0030551:	83 ec 04             	sub    $0x4,%esp
c0030554:	68 00 02 00 00       	push   $0x200
c0030559:	50                   	push   %eax
c003055a:	ff 75 0c             	pushl  0xc(%ebp)
c003055d:	e8 88 8c ff ff       	call   c00291ea <memcpy>
c0030562:	83 c4 10             	add    $0x10,%esp
c0030565:	83 ec 0c             	sub    $0xc,%esp
c0030568:	68 20 5f 04 c0       	push   $0xc0045f20
c003056d:	e8 98 31 ff ff       	call   c002370a <lock_release>
c0030572:	83 c4 10             	add    $0x10,%esp
c0030575:	90                   	nop
c0030576:	c9                   	leave  
c0030577:	c3                   	ret    

c0030578 <buffer_cache_write>:
c0030578:	55                   	push   %ebp
c0030579:	89 e5                	mov    %esp,%ebp
c003057b:	83 ec 18             	sub    $0x18,%esp
c003057e:	83 ec 0c             	sub    $0xc,%esp
c0030581:	68 20 5f 04 c0       	push   $0xc0045f20
c0030586:	e8 40 2f ff ff       	call   c00234cb <lock_acquire>
c003058b:	83 c4 10             	add    $0x10,%esp
c003058e:	83 ec 0c             	sub    $0xc,%esp
c0030591:	ff 75 08             	pushl  0x8(%ebp)
c0030594:	e8 6a fd ff ff       	call   c0030303 <buffer_cache_lookup>
c0030599:	83 c4 10             	add    $0x10,%esp
c003059c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003059f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00305a3:	75 32                	jne    c00305d7 <buffer_cache_write+0x5f>
c00305a5:	e8 bf fd ff ff       	call   c0030369 <buffer_cache_evict>
c00305aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00305ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00305b0:	c6 00 01             	movb   $0x1,(%eax)
c00305b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00305b6:	8b 55 08             	mov    0x8(%ebp),%edx
c00305b9:	89 50 04             	mov    %edx,0x4(%eax)
c00305bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00305bf:	8d 50 08             	lea    0x8(%eax),%edx
c00305c2:	a1 7c 61 04 c0       	mov    0xc004617c,%eax
c00305c7:	83 ec 04             	sub    $0x4,%esp
c00305ca:	52                   	push   %edx
c00305cb:	ff 75 08             	pushl  0x8(%ebp)
c00305ce:	50                   	push   %eax
c00305cf:	e8 fc 56 ff ff       	call   c0025cd0 <block_read>
c00305d4:	83 c4 10             	add    $0x10,%esp
c00305d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00305da:	c6 40 02 01          	movb   $0x1,0x2(%eax)
c00305de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00305e1:	c6 40 01 01          	movb   $0x1,0x1(%eax)
c00305e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00305e8:	83 c0 08             	add    $0x8,%eax
c00305eb:	83 ec 04             	sub    $0x4,%esp
c00305ee:	68 00 02 00 00       	push   $0x200
c00305f3:	ff 75 0c             	pushl  0xc(%ebp)
c00305f6:	50                   	push   %eax
c00305f7:	e8 ee 8b ff ff       	call   c00291ea <memcpy>
c00305fc:	83 c4 10             	add    $0x10,%esp
c00305ff:	83 ec 0c             	sub    $0xc,%esp
c0030602:	68 20 5f 04 c0       	push   $0xc0045f20
c0030607:	e8 fe 30 ff ff       	call   c002370a <lock_release>
c003060c:	83 c4 10             	add    $0x10,%esp
c003060f:	90                   	nop
c0030610:	c9                   	leave  
c0030611:	c3                   	ret    

c0030612 <parse_path_name>:
c0030612:	55                   	push   %ebp
c0030613:	89 e5                	mov    %esp,%ebp
c0030615:	83 ec 28             	sub    $0x28,%esp
c0030618:	83 ec 0c             	sub    $0xc,%esp
c003061b:	ff 75 08             	pushl  0x8(%ebp)
c003061e:	e8 26 92 ff ff       	call   c0029849 <strlen>
c0030623:	83 c4 10             	add    $0x10,%esp
c0030626:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0030629:	8b 45 e8             	mov    -0x18(%ebp),%eax
c003062c:	83 c0 01             	add    $0x1,%eax
c003062f:	83 ec 0c             	sub    $0xc,%esp
c0030632:	50                   	push   %eax
c0030633:	e8 b6 3a ff ff       	call   c00240ee <malloc>
c0030638:	83 c4 10             	add    $0x10,%esp
c003063b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c003063e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0030641:	83 c0 01             	add    $0x1,%eax
c0030644:	83 ec 04             	sub    $0x4,%esp
c0030647:	50                   	push   %eax
c0030648:	ff 75 08             	pushl  0x8(%ebp)
c003064b:	ff 75 e4             	pushl  -0x1c(%ebp)
c003064e:	e8 97 8b ff ff       	call   c00291ea <memcpy>
c0030653:	83 c4 10             	add    $0x10,%esp
c0030656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0030659:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003065c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0030660:	7e 1c                	jle    c003067e <parse_path_name+0x6c>
c0030662:	8b 45 08             	mov    0x8(%ebp),%eax
c0030665:	0f b6 00             	movzbl (%eax),%eax
c0030668:	3c 2f                	cmp    $0x2f,%al
c003066a:	75 12                	jne    c003067e <parse_path_name+0x6c>
c003066c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030670:	74 0c                	je     c003067e <parse_path_name+0x6c>
c0030672:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030675:	8d 50 01             	lea    0x1(%eax),%edx
c0030678:	89 55 f4             	mov    %edx,-0xc(%ebp)
c003067b:	c6 00 2f             	movb   $0x2f,(%eax)
c003067e:	c7 45 ec e0 5f 03 c0 	movl   $0xc0035fe0,-0x14(%ebp)
c0030685:	83 ec 04             	sub    $0x4,%esp
c0030688:	8d 45 dc             	lea    -0x24(%ebp),%eax
c003068b:	50                   	push   %eax
c003068c:	68 e1 5f 03 c0       	push   $0xc0035fe1
c0030691:	ff 75 e4             	pushl  -0x1c(%ebp)
c0030694:	e8 43 90 ff ff       	call   c00296dc <strtok_r>
c0030699:	83 c4 10             	add    $0x10,%esp
c003069c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c003069f:	eb 65                	jmp    c0030706 <parse_path_name+0xf4>
c00306a1:	83 ec 0c             	sub    $0xc,%esp
c00306a4:	ff 75 ec             	pushl  -0x14(%ebp)
c00306a7:	e8 9d 91 ff ff       	call   c0029849 <strlen>
c00306ac:	83 c4 10             	add    $0x10,%esp
c00306af:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00306b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00306b6:	74 2f                	je     c00306e7 <parse_path_name+0xd5>
c00306b8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c00306bc:	7e 29                	jle    c00306e7 <parse_path_name+0xd5>
c00306be:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00306c1:	83 ec 04             	sub    $0x4,%esp
c00306c4:	50                   	push   %eax
c00306c5:	ff 75 ec             	pushl  -0x14(%ebp)
c00306c8:	ff 75 f4             	pushl  -0xc(%ebp)
c00306cb:	e8 1a 8b ff ff       	call   c00291ea <memcpy>
c00306d0:	83 c4 10             	add    $0x10,%esp
c00306d3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00306d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00306d9:	01 d0                	add    %edx,%eax
c00306db:	c6 00 2f             	movb   $0x2f,(%eax)
c00306de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00306e1:	83 c0 01             	add    $0x1,%eax
c00306e4:	01 45 f4             	add    %eax,-0xc(%ebp)
c00306e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00306ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00306ed:	83 ec 04             	sub    $0x4,%esp
c00306f0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c00306f3:	50                   	push   %eax
c00306f4:	68 e1 5f 03 c0       	push   $0xc0035fe1
c00306f9:	6a 00                	push   $0x0
c00306fb:	e8 dc 8f ff ff       	call   c00296dc <strtok_r>
c0030700:	83 c4 10             	add    $0x10,%esp
c0030703:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0030706:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c003070a:	75 95                	jne    c00306a1 <parse_path_name+0x8f>
c003070c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030710:	74 06                	je     c0030718 <parse_path_name+0x106>
c0030712:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030715:	c6 00 00             	movb   $0x0,(%eax)
c0030718:	83 ec 0c             	sub    $0xc,%esp
c003071b:	ff 75 ec             	pushl  -0x14(%ebp)
c003071e:	e8 26 91 ff ff       	call   c0029849 <strlen>
c0030723:	83 c4 10             	add    $0x10,%esp
c0030726:	83 c0 01             	add    $0x1,%eax
c0030729:	83 ec 04             	sub    $0x4,%esp
c003072c:	50                   	push   %eax
c003072d:	ff 75 ec             	pushl  -0x14(%ebp)
c0030730:	ff 75 10             	pushl  0x10(%ebp)
c0030733:	e8 b2 8a ff ff       	call   c00291ea <memcpy>
c0030738:	83 c4 10             	add    $0x10,%esp
c003073b:	83 ec 0c             	sub    $0xc,%esp
c003073e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0030741:	e8 a5 3c ff ff       	call   c00243eb <free>
c0030746:	83 c4 10             	add    $0x10,%esp
c0030749:	90                   	nop
c003074a:	c9                   	leave  
c003074b:	c3                   	ret    

c003074c <dir_create>:
c003074c:	55                   	push   %ebp
c003074d:	89 e5                	mov    %esp,%ebp
c003074f:	83 ec 28             	sub    $0x28,%esp
c0030752:	8b 55 0c             	mov    0xc(%ebp),%edx
c0030755:	89 d0                	mov    %edx,%eax
c0030757:	c1 e0 02             	shl    $0x2,%eax
c003075a:	01 d0                	add    %edx,%eax
c003075c:	c1 e0 02             	shl    $0x2,%eax
c003075f:	83 ec 04             	sub    $0x4,%esp
c0030762:	6a 01                	push   $0x1
c0030764:	50                   	push   %eax
c0030765:	ff 75 08             	pushl  0x8(%ebp)
c0030768:	e8 38 0d 00 00       	call   c00314a5 <inode_create>
c003076d:	83 c4 10             	add    $0x10,%esp
c0030770:	88 45 f7             	mov    %al,-0x9(%ebp)
c0030773:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0030777:	83 f0 01             	xor    $0x1,%eax
c003077a:	84 c0                	test   %al,%al
c003077c:	74 07                	je     c0030785 <dir_create+0x39>
c003077e:	b8 00 00 00 00       	mov    $0x0,%eax
c0030783:	eb 78                	jmp    c00307fd <dir_create+0xb1>
c0030785:	83 ec 0c             	sub    $0xc,%esp
c0030788:	ff 75 08             	pushl  0x8(%ebp)
c003078b:	e8 ea 0d 00 00       	call   c003157a <inode_open>
c0030790:	83 c4 10             	add    $0x10,%esp
c0030793:	83 ec 0c             	sub    $0xc,%esp
c0030796:	50                   	push   %eax
c0030797:	e8 63 00 00 00       	call   c00307ff <dir_open>
c003079c:	83 c4 10             	add    $0x10,%esp
c003079f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00307a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00307a6:	75 1e                	jne    c00307c6 <dir_create+0x7a>
c00307a8:	83 ec 0c             	sub    $0xc,%esp
c00307ab:	68 e3 5f 03 c0       	push   $0xc0035fe3
c00307b0:	68 ef 5f 03 c0       	push   $0xc0035fef
c00307b5:	68 34 60 03 c0       	push   $0xc0036034
c00307ba:	6a 42                	push   $0x42
c00307bc:	68 06 60 03 c0       	push   $0xc0036006
c00307c1:	e8 64 9d ff ff       	call   c002a52a <debug_panic>
c00307c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00307c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c00307cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00307cf:	8b 00                	mov    (%eax),%eax
c00307d1:	6a 00                	push   $0x0
c00307d3:	6a 14                	push   $0x14
c00307d5:	8d 55 dc             	lea    -0x24(%ebp),%edx
c00307d8:	52                   	push   %edx
c00307d9:	50                   	push   %eax
c00307da:	e8 6a 12 00 00       	call   c0031a49 <inode_write_at>
c00307df:	83 c4 10             	add    $0x10,%esp
c00307e2:	83 f8 14             	cmp    $0x14,%eax
c00307e5:	74 04                	je     c00307eb <dir_create+0x9f>
c00307e7:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00307eb:	83 ec 0c             	sub    $0xc,%esp
c00307ee:	ff 75 f0             	pushl  -0x10(%ebp)
c00307f1:	e8 5c 02 00 00       	call   c0030a52 <dir_close>
c00307f6:	83 c4 10             	add    $0x10,%esp
c00307f9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00307fd:	c9                   	leave  
c00307fe:	c3                   	ret    

c00307ff <dir_open>:
c00307ff:	55                   	push   %ebp
c0030800:	89 e5                	mov    %esp,%ebp
c0030802:	83 ec 18             	sub    $0x18,%esp
c0030805:	83 ec 08             	sub    $0x8,%esp
c0030808:	6a 08                	push   $0x8
c003080a:	6a 01                	push   $0x1
c003080c:	e8 ab 3a ff ff       	call   c00242bc <calloc>
c0030811:	83 c4 10             	add    $0x10,%esp
c0030814:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030817:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c003081b:	74 1d                	je     c003083a <dir_open+0x3b>
c003081d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030821:	74 17                	je     c003083a <dir_open+0x3b>
c0030823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030826:	8b 55 08             	mov    0x8(%ebp),%edx
c0030829:	89 10                	mov    %edx,(%eax)
c003082b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003082e:	c7 40 04 14 00 00 00 	movl   $0x14,0x4(%eax)
c0030835:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030838:	eb 21                	jmp    c003085b <dir_open+0x5c>
c003083a:	83 ec 0c             	sub    $0xc,%esp
c003083d:	ff 75 08             	pushl  0x8(%ebp)
c0030840:	e8 1e 10 00 00       	call   c0031863 <inode_close>
c0030845:	83 c4 10             	add    $0x10,%esp
c0030848:	83 ec 0c             	sub    $0xc,%esp
c003084b:	ff 75 f4             	pushl  -0xc(%ebp)
c003084e:	e8 98 3b ff ff       	call   c00243eb <free>
c0030853:	83 c4 10             	add    $0x10,%esp
c0030856:	b8 00 00 00 00       	mov    $0x0,%eax
c003085b:	c9                   	leave  
c003085c:	c3                   	ret    

c003085d <dir_open_root>:
c003085d:	55                   	push   %ebp
c003085e:	89 e5                	mov    %esp,%ebp
c0030860:	83 ec 08             	sub    $0x8,%esp
c0030863:	83 ec 0c             	sub    $0xc,%esp
c0030866:	6a 01                	push   $0x1
c0030868:	e8 0d 0d 00 00       	call   c003157a <inode_open>
c003086d:	83 c4 10             	add    $0x10,%esp
c0030870:	83 ec 0c             	sub    $0xc,%esp
c0030873:	50                   	push   %eax
c0030874:	e8 86 ff ff ff       	call   c00307ff <dir_open>
c0030879:	83 c4 10             	add    $0x10,%esp
c003087c:	c9                   	leave  
c003087d:	c3                   	ret    

c003087e <dir_open_path>:
c003087e:	55                   	push   %ebp
c003087f:	89 e5                	mov    %esp,%ebp
c0030881:	53                   	push   %ebx
c0030882:	83 ec 34             	sub    $0x34,%esp
c0030885:	89 e0                	mov    %esp,%eax
c0030887:	89 c3                	mov    %eax,%ebx
c0030889:	83 ec 0c             	sub    $0xc,%esp
c003088c:	ff 75 08             	pushl  0x8(%ebp)
c003088f:	e8 b5 8f ff ff       	call   c0029849 <strlen>
c0030894:	83 c4 10             	add    $0x10,%esp
c0030897:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003089a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c003089d:	83 c0 01             	add    $0x1,%eax
c00308a0:	8d 50 ff             	lea    -0x1(%eax),%edx
c00308a3:	89 55 e8             	mov    %edx,-0x18(%ebp)
c00308a6:	89 c2                	mov    %eax,%edx
c00308a8:	b8 10 00 00 00       	mov    $0x10,%eax
c00308ad:	83 e8 01             	sub    $0x1,%eax
c00308b0:	01 d0                	add    %edx,%eax
c00308b2:	b9 10 00 00 00       	mov    $0x10,%ecx
c00308b7:	ba 00 00 00 00       	mov    $0x0,%edx
c00308bc:	f7 f1                	div    %ecx
c00308be:	6b c0 10             	imul   $0x10,%eax,%eax
c00308c1:	29 c4                	sub    %eax,%esp
c00308c3:	89 e0                	mov    %esp,%eax
c00308c5:	83 c0 00             	add    $0x0,%eax
c00308c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00308cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00308ce:	83 c0 01             	add    $0x1,%eax
c00308d1:	89 c2                	mov    %eax,%edx
c00308d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00308d6:	83 ec 04             	sub    $0x4,%esp
c00308d9:	52                   	push   %edx
c00308da:	ff 75 08             	pushl  0x8(%ebp)
c00308dd:	50                   	push   %eax
c00308de:	e8 e4 8f ff ff       	call   c00298c7 <strlcpy>
c00308e3:	83 c4 10             	add    $0x10,%esp
c00308e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00308e9:	0f b6 00             	movzbl (%eax),%eax
c00308ec:	3c 2f                	cmp    $0x2f,%al
c00308ee:	75 0a                	jne    c00308fa <dir_open_path+0x7c>
c00308f0:	e8 68 ff ff ff       	call   c003085d <dir_open_root>
c00308f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00308f8:	eb 37                	jmp    c0030931 <dir_open_path+0xb3>
c00308fa:	e8 a9 05 ff ff       	call   c0020ea8 <thread_current>
c00308ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0030902:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0030905:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c003090b:	85 c0                	test   %eax,%eax
c003090d:	75 0a                	jne    c0030919 <dir_open_path+0x9b>
c003090f:	e8 49 ff ff ff       	call   c003085d <dir_open_root>
c0030914:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030917:	eb 18                	jmp    c0030931 <dir_open_path+0xb3>
c0030919:	8b 45 e0             	mov    -0x20(%ebp),%eax
c003091c:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c0030922:	83 ec 0c             	sub    $0xc,%esp
c0030925:	50                   	push   %eax
c0030926:	e8 02 01 00 00       	call   c0030a2d <dir_reopen>
c003092b:	83 c4 10             	add    $0x10,%esp
c003092e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030931:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0030934:	83 ec 04             	sub    $0x4,%esp
c0030937:	8d 55 d8             	lea    -0x28(%ebp),%edx
c003093a:	52                   	push   %edx
c003093b:	68 e1 5f 03 c0       	push   $0xc0035fe1
c0030940:	50                   	push   %eax
c0030941:	e8 96 8d ff ff       	call   c00296dc <strtok_r>
c0030946:	83 c4 10             	add    $0x10,%esp
c0030949:	89 45 f0             	mov    %eax,-0x10(%ebp)
c003094c:	e9 95 00 00 00       	jmp    c00309e6 <dir_open_path+0x168>
c0030951:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c0030958:	83 ec 04             	sub    $0x4,%esp
c003095b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c003095e:	50                   	push   %eax
c003095f:	ff 75 f0             	pushl  -0x10(%ebp)
c0030962:	ff 75 f4             	pushl  -0xc(%ebp)
c0030965:	e8 01 02 00 00       	call   c0030b6b <dir_lookup>
c003096a:	83 c4 10             	add    $0x10,%esp
c003096d:	83 f0 01             	xor    $0x1,%eax
c0030970:	84 c0                	test   %al,%al
c0030972:	74 18                	je     c003098c <dir_open_path+0x10e>
c0030974:	83 ec 0c             	sub    $0xc,%esp
c0030977:	ff 75 f4             	pushl  -0xc(%ebp)
c003097a:	e8 d3 00 00 00       	call   c0030a52 <dir_close>
c003097f:	83 c4 10             	add    $0x10,%esp
c0030982:	b8 00 00 00 00       	mov    $0x0,%eax
c0030987:	e9 9a 00 00 00       	jmp    c0030a26 <dir_open_path+0x1a8>
c003098c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c003098f:	83 ec 0c             	sub    $0xc,%esp
c0030992:	50                   	push   %eax
c0030993:	e8 67 fe ff ff       	call   c00307ff <dir_open>
c0030998:	83 c4 10             	add    $0x10,%esp
c003099b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c003099e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c00309a2:	75 15                	jne    c00309b9 <dir_open_path+0x13b>
c00309a4:	83 ec 0c             	sub    $0xc,%esp
c00309a7:	ff 75 f4             	pushl  -0xc(%ebp)
c00309aa:	e8 a3 00 00 00       	call   c0030a52 <dir_close>
c00309af:	83 c4 10             	add    $0x10,%esp
c00309b2:	b8 00 00 00 00       	mov    $0x0,%eax
c00309b7:	eb 6d                	jmp    c0030a26 <dir_open_path+0x1a8>
c00309b9:	83 ec 0c             	sub    $0xc,%esp
c00309bc:	ff 75 f4             	pushl  -0xc(%ebp)
c00309bf:	e8 8e 00 00 00       	call   c0030a52 <dir_close>
c00309c4:	83 c4 10             	add    $0x10,%esp
c00309c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00309ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00309cd:	83 ec 04             	sub    $0x4,%esp
c00309d0:	8d 45 d8             	lea    -0x28(%ebp),%eax
c00309d3:	50                   	push   %eax
c00309d4:	68 e1 5f 03 c0       	push   $0xc0035fe1
c00309d9:	6a 00                	push   $0x0
c00309db:	e8 fc 8c ff ff       	call   c00296dc <strtok_r>
c00309e0:	83 c4 10             	add    $0x10,%esp
c00309e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00309e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00309ea:	0f 85 61 ff ff ff    	jne    c0030951 <dir_open_path+0xd3>
c00309f0:	83 ec 0c             	sub    $0xc,%esp
c00309f3:	ff 75 f4             	pushl  -0xc(%ebp)
c00309f6:	e8 85 00 00 00       	call   c0030a80 <dir_get_inode>
c00309fb:	83 c4 10             	add    $0x10,%esp
c00309fe:	83 ec 0c             	sub    $0xc,%esp
c0030a01:	50                   	push   %eax
c0030a02:	e8 2c 13 00 00       	call   c0031d33 <inode_is_removed>
c0030a07:	83 c4 10             	add    $0x10,%esp
c0030a0a:	84 c0                	test   %al,%al
c0030a0c:	74 15                	je     c0030a23 <dir_open_path+0x1a5>
c0030a0e:	83 ec 0c             	sub    $0xc,%esp
c0030a11:	ff 75 f4             	pushl  -0xc(%ebp)
c0030a14:	e8 39 00 00 00       	call   c0030a52 <dir_close>
c0030a19:	83 c4 10             	add    $0x10,%esp
c0030a1c:	b8 00 00 00 00       	mov    $0x0,%eax
c0030a21:	eb 03                	jmp    c0030a26 <dir_open_path+0x1a8>
c0030a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030a26:	89 dc                	mov    %ebx,%esp
c0030a28:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0030a2b:	c9                   	leave  
c0030a2c:	c3                   	ret    

c0030a2d <dir_reopen>:
c0030a2d:	55                   	push   %ebp
c0030a2e:	89 e5                	mov    %esp,%ebp
c0030a30:	83 ec 08             	sub    $0x8,%esp
c0030a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0030a36:	8b 00                	mov    (%eax),%eax
c0030a38:	83 ec 0c             	sub    $0xc,%esp
c0030a3b:	50                   	push   %eax
c0030a3c:	e8 1d 0c 00 00       	call   c003165e <inode_reopen>
c0030a41:	83 c4 10             	add    $0x10,%esp
c0030a44:	83 ec 0c             	sub    $0xc,%esp
c0030a47:	50                   	push   %eax
c0030a48:	e8 b2 fd ff ff       	call   c00307ff <dir_open>
c0030a4d:	83 c4 10             	add    $0x10,%esp
c0030a50:	c9                   	leave  
c0030a51:	c3                   	ret    

c0030a52 <dir_close>:
c0030a52:	55                   	push   %ebp
c0030a53:	89 e5                	mov    %esp,%ebp
c0030a55:	83 ec 08             	sub    $0x8,%esp
c0030a58:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030a5c:	74 1f                	je     c0030a7d <dir_close+0x2b>
c0030a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0030a61:	8b 00                	mov    (%eax),%eax
c0030a63:	83 ec 0c             	sub    $0xc,%esp
c0030a66:	50                   	push   %eax
c0030a67:	e8 f7 0d 00 00       	call   c0031863 <inode_close>
c0030a6c:	83 c4 10             	add    $0x10,%esp
c0030a6f:	83 ec 0c             	sub    $0xc,%esp
c0030a72:	ff 75 08             	pushl  0x8(%ebp)
c0030a75:	e8 71 39 ff ff       	call   c00243eb <free>
c0030a7a:	83 c4 10             	add    $0x10,%esp
c0030a7d:	90                   	nop
c0030a7e:	c9                   	leave  
c0030a7f:	c3                   	ret    

c0030a80 <dir_get_inode>:
c0030a80:	55                   	push   %ebp
c0030a81:	89 e5                	mov    %esp,%ebp
c0030a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0030a86:	8b 00                	mov    (%eax),%eax
c0030a88:	5d                   	pop    %ebp
c0030a89:	c3                   	ret    

c0030a8a <lookup>:
c0030a8a:	55                   	push   %ebp
c0030a8b:	89 e5                	mov    %esp,%ebp
c0030a8d:	83 ec 28             	sub    $0x28,%esp
c0030a90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030a94:	75 21                	jne    c0030ab7 <lookup+0x2d>
c0030a96:	83 ec 0c             	sub    $0xc,%esp
c0030a99:	68 e3 5f 03 c0       	push   $0xc0035fe3
c0030a9e:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030aa3:	68 40 60 03 c0       	push   $0xc0036040
c0030aa8:	68 bc 00 00 00       	push   $0xbc
c0030aad:	68 06 60 03 c0       	push   $0xc0036006
c0030ab2:	e8 73 9a ff ff       	call   c002a52a <debug_panic>
c0030ab7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0030abb:	75 21                	jne    c0030ade <lookup+0x54>
c0030abd:	83 ec 0c             	sub    $0xc,%esp
c0030ac0:	68 20 60 03 c0       	push   $0xc0036020
c0030ac5:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030aca:	68 40 60 03 c0       	push   $0xc0036040
c0030acf:	68 bd 00 00 00       	push   $0xbd
c0030ad4:	68 06 60 03 c0       	push   $0xc0036006
c0030ad9:	e8 4c 9a ff ff       	call   c002a52a <debug_panic>
c0030ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0030ae5:	eb 60                	jmp    c0030b47 <lookup+0xbd>
c0030ae7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0030aeb:	84 c0                	test   %al,%al
c0030aed:	74 54                	je     c0030b43 <lookup+0xb9>
c0030aef:	83 ec 08             	sub    $0x8,%esp
c0030af2:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0030af5:	83 c0 04             	add    $0x4,%eax
c0030af8:	50                   	push   %eax
c0030af9:	ff 75 0c             	pushl  0xc(%ebp)
c0030afc:	e8 f1 88 ff ff       	call   c00293f2 <strcmp>
c0030b01:	83 c4 10             	add    $0x10,%esp
c0030b04:	85 c0                	test   %eax,%eax
c0030b06:	75 3b                	jne    c0030b43 <lookup+0xb9>
c0030b08:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0030b0c:	74 20                	je     c0030b2e <lookup+0xa4>
c0030b0e:	8b 45 10             	mov    0x10(%ebp),%eax
c0030b11:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0030b14:	89 10                	mov    %edx,(%eax)
c0030b16:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0030b19:	89 50 04             	mov    %edx,0x4(%eax)
c0030b1c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0030b1f:	89 50 08             	mov    %edx,0x8(%eax)
c0030b22:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0030b25:	89 50 0c             	mov    %edx,0xc(%eax)
c0030b28:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0030b2b:	89 50 10             	mov    %edx,0x10(%eax)
c0030b2e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0030b32:	74 08                	je     c0030b3c <lookup+0xb2>
c0030b34:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0030b37:	8b 45 14             	mov    0x14(%ebp),%eax
c0030b3a:	89 10                	mov    %edx,(%eax)
c0030b3c:	b8 01 00 00 00       	mov    $0x1,%eax
c0030b41:	eb 26                	jmp    c0030b69 <lookup+0xdf>
c0030b43:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
c0030b47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0030b4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0030b4d:	8b 00                	mov    (%eax),%eax
c0030b4f:	52                   	push   %edx
c0030b50:	6a 14                	push   $0x14
c0030b52:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0030b55:	52                   	push   %edx
c0030b56:	50                   	push   %eax
c0030b57:	e8 b2 0d 00 00       	call   c003190e <inode_read_at>
c0030b5c:	83 c4 10             	add    $0x10,%esp
c0030b5f:	83 f8 14             	cmp    $0x14,%eax
c0030b62:	74 83                	je     c0030ae7 <lookup+0x5d>
c0030b64:	b8 00 00 00 00       	mov    $0x0,%eax
c0030b69:	c9                   	leave  
c0030b6a:	c3                   	ret    

c0030b6b <dir_lookup>:
c0030b6b:	55                   	push   %ebp
c0030b6c:	89 e5                	mov    %esp,%ebp
c0030b6e:	83 ec 28             	sub    $0x28,%esp
c0030b71:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030b75:	75 21                	jne    c0030b98 <dir_lookup+0x2d>
c0030b77:	83 ec 0c             	sub    $0xc,%esp
c0030b7a:	68 e3 5f 03 c0       	push   $0xc0035fe3
c0030b7f:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030b84:	68 48 60 03 c0       	push   $0xc0036048
c0030b89:	68 d9 00 00 00       	push   $0xd9
c0030b8e:	68 06 60 03 c0       	push   $0xc0036006
c0030b93:	e8 92 99 ff ff       	call   c002a52a <debug_panic>
c0030b98:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0030b9c:	75 21                	jne    c0030bbf <dir_lookup+0x54>
c0030b9e:	83 ec 0c             	sub    $0xc,%esp
c0030ba1:	68 20 60 03 c0       	push   $0xc0036020
c0030ba6:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030bab:	68 48 60 03 c0       	push   $0xc0036048
c0030bb0:	68 da 00 00 00       	push   $0xda
c0030bb5:	68 06 60 03 c0       	push   $0xc0036006
c0030bba:	e8 6b 99 ff ff       	call   c002a52a <debug_panic>
c0030bbf:	83 ec 08             	sub    $0x8,%esp
c0030bc2:	68 2d 60 03 c0       	push   $0xc003602d
c0030bc7:	ff 75 0c             	pushl  0xc(%ebp)
c0030bca:	e8 23 88 ff ff       	call   c00293f2 <strcmp>
c0030bcf:	83 c4 10             	add    $0x10,%esp
c0030bd2:	85 c0                	test   %eax,%eax
c0030bd4:	75 1a                	jne    c0030bf0 <dir_lookup+0x85>
c0030bd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0030bd9:	8b 00                	mov    (%eax),%eax
c0030bdb:	83 ec 0c             	sub    $0xc,%esp
c0030bde:	50                   	push   %eax
c0030bdf:	e8 96 09 00 00       	call   c003157a <inode_open>
c0030be4:	83 c4 10             	add    $0x10,%esp
c0030be7:	89 c2                	mov    %eax,%edx
c0030be9:	8b 45 10             	mov    0x10(%ebp),%eax
c0030bec:	89 10                	mov    %edx,(%eax)
c0030bee:	eb 7e                	jmp    c0030c6e <dir_lookup+0x103>
c0030bf0:	83 ec 08             	sub    $0x8,%esp
c0030bf3:	68 2f 60 03 c0       	push   $0xc003602f
c0030bf8:	ff 75 0c             	pushl  0xc(%ebp)
c0030bfb:	e8 f2 87 ff ff       	call   c00293f2 <strcmp>
c0030c00:	83 c4 10             	add    $0x10,%esp
c0030c03:	85 c0                	test   %eax,%eax
c0030c05:	75 2e                	jne    c0030c35 <dir_lookup+0xca>
c0030c07:	8b 45 08             	mov    0x8(%ebp),%eax
c0030c0a:	8b 00                	mov    (%eax),%eax
c0030c0c:	6a 00                	push   $0x0
c0030c0e:	6a 14                	push   $0x14
c0030c10:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0030c13:	52                   	push   %edx
c0030c14:	50                   	push   %eax
c0030c15:	e8 f4 0c 00 00       	call   c003190e <inode_read_at>
c0030c1a:	83 c4 10             	add    $0x10,%esp
c0030c1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0030c20:	83 ec 0c             	sub    $0xc,%esp
c0030c23:	50                   	push   %eax
c0030c24:	e8 51 09 00 00       	call   c003157a <inode_open>
c0030c29:	83 c4 10             	add    $0x10,%esp
c0030c2c:	89 c2                	mov    %eax,%edx
c0030c2e:	8b 45 10             	mov    0x10(%ebp),%eax
c0030c31:	89 10                	mov    %edx,(%eax)
c0030c33:	eb 39                	jmp    c0030c6e <dir_lookup+0x103>
c0030c35:	6a 00                	push   $0x0
c0030c37:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0030c3a:	50                   	push   %eax
c0030c3b:	ff 75 0c             	pushl  0xc(%ebp)
c0030c3e:	ff 75 08             	pushl  0x8(%ebp)
c0030c41:	e8 44 fe ff ff       	call   c0030a8a <lookup>
c0030c46:	83 c4 10             	add    $0x10,%esp
c0030c49:	84 c0                	test   %al,%al
c0030c4b:	74 18                	je     c0030c65 <dir_lookup+0xfa>
c0030c4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0030c50:	83 ec 0c             	sub    $0xc,%esp
c0030c53:	50                   	push   %eax
c0030c54:	e8 21 09 00 00       	call   c003157a <inode_open>
c0030c59:	83 c4 10             	add    $0x10,%esp
c0030c5c:	89 c2                	mov    %eax,%edx
c0030c5e:	8b 45 10             	mov    0x10(%ebp),%eax
c0030c61:	89 10                	mov    %edx,(%eax)
c0030c63:	eb 09                	jmp    c0030c6e <dir_lookup+0x103>
c0030c65:	8b 45 10             	mov    0x10(%ebp),%eax
c0030c68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0030c6e:	8b 45 10             	mov    0x10(%ebp),%eax
c0030c71:	8b 00                	mov    (%eax),%eax
c0030c73:	85 c0                	test   %eax,%eax
c0030c75:	0f 95 c0             	setne  %al
c0030c78:	c9                   	leave  
c0030c79:	c3                   	ret    

c0030c7a <dir_add>:
c0030c7a:	55                   	push   %ebp
c0030c7b:	89 e5                	mov    %esp,%ebp
c0030c7d:	83 ec 38             	sub    $0x38,%esp
c0030c80:	8b 45 14             	mov    0x14(%ebp),%eax
c0030c83:	88 45 d4             	mov    %al,-0x2c(%ebp)
c0030c86:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
c0030c8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030c8e:	75 21                	jne    c0030cb1 <dir_add+0x37>
c0030c90:	83 ec 0c             	sub    $0xc,%esp
c0030c93:	68 e3 5f 03 c0       	push   $0xc0035fe3
c0030c98:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030c9d:	68 54 60 03 c0       	push   $0xc0036054
c0030ca2:	68 f8 00 00 00       	push   $0xf8
c0030ca7:	68 06 60 03 c0       	push   $0xc0036006
c0030cac:	e8 79 98 ff ff       	call   c002a52a <debug_panic>
c0030cb1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0030cb5:	75 21                	jne    c0030cd8 <dir_add+0x5e>
c0030cb7:	83 ec 0c             	sub    $0xc,%esp
c0030cba:	68 20 60 03 c0       	push   $0xc0036020
c0030cbf:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030cc4:	68 54 60 03 c0       	push   $0xc0036054
c0030cc9:	68 f9 00 00 00       	push   $0xf9
c0030cce:	68 06 60 03 c0       	push   $0xc0036006
c0030cd3:	e8 52 98 ff ff       	call   c002a52a <debug_panic>
c0030cd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0030cdb:	0f b6 00             	movzbl (%eax),%eax
c0030cde:	84 c0                	test   %al,%al
c0030ce0:	74 13                	je     c0030cf5 <dir_add+0x7b>
c0030ce2:	83 ec 0c             	sub    $0xc,%esp
c0030ce5:	ff 75 0c             	pushl  0xc(%ebp)
c0030ce8:	e8 5c 8b ff ff       	call   c0029849 <strlen>
c0030ced:	83 c4 10             	add    $0x10,%esp
c0030cf0:	83 f8 0e             	cmp    $0xe,%eax
c0030cf3:	76 0a                	jbe    c0030cff <dir_add+0x85>
c0030cf5:	b8 00 00 00 00       	mov    $0x0,%eax
c0030cfa:	e9 2b 01 00 00       	jmp    c0030e2a <dir_add+0x1b0>
c0030cff:	6a 00                	push   $0x0
c0030d01:	6a 00                	push   $0x0
c0030d03:	ff 75 0c             	pushl  0xc(%ebp)
c0030d06:	ff 75 08             	pushl  0x8(%ebp)
c0030d09:	e8 7c fd ff ff       	call   c0030a8a <lookup>
c0030d0e:	83 c4 10             	add    $0x10,%esp
c0030d11:	84 c0                	test   %al,%al
c0030d13:	0f 85 09 01 00 00    	jne    c0030e22 <dir_add+0x1a8>
c0030d19:	80 7d d4 00          	cmpb   $0x0,-0x2c(%ebp)
c0030d1d:	0f 84 80 00 00 00    	je     c0030da3 <dir_add+0x129>
c0030d23:	83 ec 0c             	sub    $0xc,%esp
c0030d26:	ff 75 10             	pushl  0x10(%ebp)
c0030d29:	e8 4c 08 00 00       	call   c003157a <inode_open>
c0030d2e:	83 c4 10             	add    $0x10,%esp
c0030d31:	83 ec 0c             	sub    $0xc,%esp
c0030d34:	50                   	push   %eax
c0030d35:	e8 c5 fa ff ff       	call   c00307ff <dir_open>
c0030d3a:	83 c4 10             	add    $0x10,%esp
c0030d3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0030d40:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0030d44:	0f 84 db 00 00 00    	je     c0030e25 <dir_add+0x1ab>
c0030d4a:	83 ec 0c             	sub    $0xc,%esp
c0030d4d:	ff 75 08             	pushl  0x8(%ebp)
c0030d50:	e8 2b fd ff ff       	call   c0030a80 <dir_get_inode>
c0030d55:	83 c4 10             	add    $0x10,%esp
c0030d58:	83 ec 0c             	sub    $0xc,%esp
c0030d5b:	50                   	push   %eax
c0030d5c:	e8 1a 09 00 00       	call   c003167b <inode_get_inumber>
c0030d61:	83 c4 10             	add    $0x10,%esp
c0030d64:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0030d67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0030d6a:	8b 00                	mov    (%eax),%eax
c0030d6c:	6a 00                	push   $0x0
c0030d6e:	6a 14                	push   $0x14
c0030d70:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0030d73:	52                   	push   %edx
c0030d74:	50                   	push   %eax
c0030d75:	e8 cf 0c 00 00       	call   c0031a49 <inode_write_at>
c0030d7a:	83 c4 10             	add    $0x10,%esp
c0030d7d:	83 f8 14             	cmp    $0x14,%eax
c0030d80:	74 13                	je     c0030d95 <dir_add+0x11b>
c0030d82:	83 ec 0c             	sub    $0xc,%esp
c0030d85:	ff 75 ec             	pushl  -0x14(%ebp)
c0030d88:	e8 c5 fc ff ff       	call   c0030a52 <dir_close>
c0030d8d:	83 c4 10             	add    $0x10,%esp
c0030d90:	e9 91 00 00 00       	jmp    c0030e26 <dir_add+0x1ac>
c0030d95:	83 ec 0c             	sub    $0xc,%esp
c0030d98:	ff 75 ec             	pushl  -0x14(%ebp)
c0030d9b:	e8 b2 fc ff ff       	call   c0030a52 <dir_close>
c0030da0:	83 c4 10             	add    $0x10,%esp
c0030da3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0030daa:	eb 14                	jmp    c0030dc0 <dir_add+0x146>
c0030dac:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0030db0:	83 f0 01             	xor    $0x1,%eax
c0030db3:	84 c0                	test   %al,%al
c0030db5:	75 27                	jne    c0030dde <dir_add+0x164>
c0030db7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030dba:	83 c0 14             	add    $0x14,%eax
c0030dbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030dc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0030dc3:	8b 00                	mov    (%eax),%eax
c0030dc5:	ff 75 f4             	pushl  -0xc(%ebp)
c0030dc8:	6a 14                	push   $0x14
c0030dca:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0030dcd:	52                   	push   %edx
c0030dce:	50                   	push   %eax
c0030dcf:	e8 3a 0b 00 00       	call   c003190e <inode_read_at>
c0030dd4:	83 c4 10             	add    $0x10,%esp
c0030dd7:	83 f8 14             	cmp    $0x14,%eax
c0030dda:	74 d0                	je     c0030dac <dir_add+0x132>
c0030ddc:	eb 01                	jmp    c0030ddf <dir_add+0x165>
c0030dde:	90                   	nop
c0030ddf:	c6 45 eb 01          	movb   $0x1,-0x15(%ebp)
c0030de3:	83 ec 04             	sub    $0x4,%esp
c0030de6:	6a 0f                	push   $0xf
c0030de8:	ff 75 0c             	pushl  0xc(%ebp)
c0030deb:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0030dee:	83 c0 04             	add    $0x4,%eax
c0030df1:	50                   	push   %eax
c0030df2:	e8 d0 8a ff ff       	call   c00298c7 <strlcpy>
c0030df7:	83 c4 10             	add    $0x10,%esp
c0030dfa:	8b 45 10             	mov    0x10(%ebp),%eax
c0030dfd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0030e00:	8b 45 08             	mov    0x8(%ebp),%eax
c0030e03:	8b 00                	mov    (%eax),%eax
c0030e05:	ff 75 f4             	pushl  -0xc(%ebp)
c0030e08:	6a 14                	push   $0x14
c0030e0a:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0030e0d:	52                   	push   %edx
c0030e0e:	50                   	push   %eax
c0030e0f:	e8 35 0c 00 00       	call   c0031a49 <inode_write_at>
c0030e14:	83 c4 10             	add    $0x10,%esp
c0030e17:	83 f8 14             	cmp    $0x14,%eax
c0030e1a:	0f 94 c0             	sete   %al
c0030e1d:	88 45 f3             	mov    %al,-0xd(%ebp)
c0030e20:	eb 04                	jmp    c0030e26 <dir_add+0x1ac>
c0030e22:	90                   	nop
c0030e23:	eb 01                	jmp    c0030e26 <dir_add+0x1ac>
c0030e25:	90                   	nop
c0030e26:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0030e2a:	c9                   	leave  
c0030e2b:	c3                   	ret    

c0030e2c <dir_readdir>:
c0030e2c:	55                   	push   %ebp
c0030e2d:	89 e5                	mov    %esp,%ebp
c0030e2f:	83 ec 28             	sub    $0x28,%esp
c0030e32:	eb 37                	jmp    c0030e6b <dir_readdir+0x3f>
c0030e34:	8b 45 08             	mov    0x8(%ebp),%eax
c0030e37:	8b 40 04             	mov    0x4(%eax),%eax
c0030e3a:	83 c0 14             	add    $0x14,%eax
c0030e3d:	89 c2                	mov    %eax,%edx
c0030e3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0030e42:	89 50 04             	mov    %edx,0x4(%eax)
c0030e45:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0030e49:	84 c0                	test   %al,%al
c0030e4b:	74 1e                	je     c0030e6b <dir_readdir+0x3f>
c0030e4d:	83 ec 04             	sub    $0x4,%esp
c0030e50:	6a 0f                	push   $0xf
c0030e52:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0030e55:	83 c0 04             	add    $0x4,%eax
c0030e58:	50                   	push   %eax
c0030e59:	ff 75 0c             	pushl  0xc(%ebp)
c0030e5c:	e8 66 8a ff ff       	call   c00298c7 <strlcpy>
c0030e61:	83 c4 10             	add    $0x10,%esp
c0030e64:	b8 01 00 00 00       	mov    $0x1,%eax
c0030e69:	eb 25                	jmp    c0030e90 <dir_readdir+0x64>
c0030e6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0030e6e:	8b 50 04             	mov    0x4(%eax),%edx
c0030e71:	8b 45 08             	mov    0x8(%ebp),%eax
c0030e74:	8b 00                	mov    (%eax),%eax
c0030e76:	52                   	push   %edx
c0030e77:	6a 14                	push   $0x14
c0030e79:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0030e7c:	52                   	push   %edx
c0030e7d:	50                   	push   %eax
c0030e7e:	e8 8b 0a 00 00       	call   c003190e <inode_read_at>
c0030e83:	83 c4 10             	add    $0x10,%esp
c0030e86:	83 f8 14             	cmp    $0x14,%eax
c0030e89:	74 a9                	je     c0030e34 <dir_readdir+0x8>
c0030e8b:	b8 00 00 00 00       	mov    $0x0,%eax
c0030e90:	c9                   	leave  
c0030e91:	c3                   	ret    

c0030e92 <dir_isempty>:
c0030e92:	55                   	push   %ebp
c0030e93:	89 e5                	mov    %esp,%ebp
c0030e95:	83 ec 28             	sub    $0x28,%esp
c0030e98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0030e9f:	eb 18                	jmp    c0030eb9 <dir_isempty+0x27>
c0030ea1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0030ea5:	84 c0                	test   %al,%al
c0030ea7:	74 07                	je     c0030eb0 <dir_isempty+0x1e>
c0030ea9:	b8 00 00 00 00       	mov    $0x0,%eax
c0030eae:	eb 2a                	jmp    c0030eda <dir_isempty+0x48>
c0030eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0030eb3:	83 c0 14             	add    $0x14,%eax
c0030eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0030ebc:	8b 00                	mov    (%eax),%eax
c0030ebe:	ff 75 f4             	pushl  -0xc(%ebp)
c0030ec1:	6a 14                	push   $0x14
c0030ec3:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0030ec6:	52                   	push   %edx
c0030ec7:	50                   	push   %eax
c0030ec8:	e8 41 0a 00 00       	call   c003190e <inode_read_at>
c0030ecd:	83 c4 10             	add    $0x10,%esp
c0030ed0:	83 f8 14             	cmp    $0x14,%eax
c0030ed3:	74 cc                	je     c0030ea1 <dir_isempty+0xf>
c0030ed5:	b8 01 00 00 00       	mov    $0x1,%eax
c0030eda:	c9                   	leave  
c0030edb:	c3                   	ret    

c0030edc <dir_remove>:
c0030edc:	55                   	push   %ebp
c0030edd:	89 e5                	mov    %esp,%ebp
c0030edf:	83 ec 38             	sub    $0x38,%esp
c0030ee2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0030ee9:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
c0030eed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0030ef1:	75 21                	jne    c0030f14 <dir_remove+0x38>
c0030ef3:	83 ec 0c             	sub    $0xc,%esp
c0030ef6:	68 e3 5f 03 c0       	push   $0xc0035fe3
c0030efb:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030f00:	68 5c 60 03 c0       	push   $0xc003605c
c0030f05:	68 54 01 00 00       	push   $0x154
c0030f0a:	68 06 60 03 c0       	push   $0xc0036006
c0030f0f:	e8 16 96 ff ff       	call   c002a52a <debug_panic>
c0030f14:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0030f18:	75 21                	jne    c0030f3b <dir_remove+0x5f>
c0030f1a:	83 ec 0c             	sub    $0xc,%esp
c0030f1d:	68 20 60 03 c0       	push   $0xc0036020
c0030f22:	68 ef 5f 03 c0       	push   $0xc0035fef
c0030f27:	68 5c 60 03 c0       	push   $0xc003605c
c0030f2c:	68 55 01 00 00       	push   $0x155
c0030f31:	68 06 60 03 c0       	push   $0xc0036006
c0030f36:	e8 ef 95 ff ff       	call   c002a52a <debug_panic>
c0030f3b:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0030f3e:	50                   	push   %eax
c0030f3f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0030f42:	50                   	push   %eax
c0030f43:	ff 75 0c             	pushl  0xc(%ebp)
c0030f46:	ff 75 08             	pushl  0x8(%ebp)
c0030f49:	e8 3c fb ff ff       	call   c0030a8a <lookup>
c0030f4e:	83 c4 10             	add    $0x10,%esp
c0030f51:	83 f0 01             	xor    $0x1,%eax
c0030f54:	84 c0                	test   %al,%al
c0030f56:	0f 85 9e 00 00 00    	jne    c0030ffa <dir_remove+0x11e>
c0030f5c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0030f5f:	83 ec 0c             	sub    $0xc,%esp
c0030f62:	50                   	push   %eax
c0030f63:	e8 12 06 00 00       	call   c003157a <inode_open>
c0030f68:	83 c4 10             	add    $0x10,%esp
c0030f6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0030f6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0030f72:	0f 84 85 00 00 00    	je     c0030ffd <dir_remove+0x121>
c0030f78:	83 ec 0c             	sub    $0xc,%esp
c0030f7b:	ff 75 f4             	pushl  -0xc(%ebp)
c0030f7e:	e8 96 0d 00 00       	call   c0031d19 <inode_dir>
c0030f83:	83 c4 10             	add    $0x10,%esp
c0030f86:	85 c0                	test   %eax,%eax
c0030f88:	74 3b                	je     c0030fc5 <dir_remove+0xe9>
c0030f8a:	83 ec 0c             	sub    $0xc,%esp
c0030f8d:	ff 75 f4             	pushl  -0xc(%ebp)
c0030f90:	e8 6a f8 ff ff       	call   c00307ff <dir_open>
c0030f95:	83 c4 10             	add    $0x10,%esp
c0030f98:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0030f9b:	83 ec 0c             	sub    $0xc,%esp
c0030f9e:	ff 75 ec             	pushl  -0x14(%ebp)
c0030fa1:	e8 ec fe ff ff       	call   c0030e92 <dir_isempty>
c0030fa6:	83 c4 10             	add    $0x10,%esp
c0030fa9:	88 45 eb             	mov    %al,-0x15(%ebp)
c0030fac:	83 ec 0c             	sub    $0xc,%esp
c0030faf:	ff 75 ec             	pushl  -0x14(%ebp)
c0030fb2:	e8 9b fa ff ff       	call   c0030a52 <dir_close>
c0030fb7:	83 c4 10             	add    $0x10,%esp
c0030fba:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0030fbe:	83 f0 01             	xor    $0x1,%eax
c0030fc1:	84 c0                	test   %al,%al
c0030fc3:	75 3b                	jne    c0031000 <dir_remove+0x124>
c0030fc5:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0030fc9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0030fcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0030fcf:	8b 00                	mov    (%eax),%eax
c0030fd1:	52                   	push   %edx
c0030fd2:	6a 14                	push   $0x14
c0030fd4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0030fd7:	52                   	push   %edx
c0030fd8:	50                   	push   %eax
c0030fd9:	e8 6b 0a 00 00       	call   c0031a49 <inode_write_at>
c0030fde:	83 c4 10             	add    $0x10,%esp
c0030fe1:	83 f8 14             	cmp    $0x14,%eax
c0030fe4:	75 1d                	jne    c0031003 <dir_remove+0x127>
c0030fe6:	83 ec 0c             	sub    $0xc,%esp
c0030fe9:	ff 75 f4             	pushl  -0xc(%ebp)
c0030fec:	e8 e6 08 00 00       	call   c00318d7 <inode_remove>
c0030ff1:	83 c4 10             	add    $0x10,%esp
c0030ff4:	c6 45 f3 01          	movb   $0x1,-0xd(%ebp)
c0030ff8:	eb 0a                	jmp    c0031004 <dir_remove+0x128>
c0030ffa:	90                   	nop
c0030ffb:	eb 07                	jmp    c0031004 <dir_remove+0x128>
c0030ffd:	90                   	nop
c0030ffe:	eb 04                	jmp    c0031004 <dir_remove+0x128>
c0031000:	90                   	nop
c0031001:	eb 01                	jmp    c0031004 <dir_remove+0x128>
c0031003:	90                   	nop
c0031004:	83 ec 0c             	sub    $0xc,%esp
c0031007:	ff 75 f4             	pushl  -0xc(%ebp)
c003100a:	e8 54 08 00 00       	call   c0031863 <inode_close>
c003100f:	83 c4 10             	add    $0x10,%esp
c0031012:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0031016:	c9                   	leave  
c0031017:	c3                   	ret    

c0031018 <min>:
c0031018:	55                   	push   %ebp
c0031019:	89 e5                	mov    %esp,%ebp
c003101b:	8b 45 08             	mov    0x8(%ebp),%eax
c003101e:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0031021:	0f 46 45 0c          	cmovbe 0xc(%ebp),%eax
c0031025:	5d                   	pop    %ebp
c0031026:	c3                   	ret    

c0031027 <inode_indirect_allocate>:
c0031027:	55                   	push   %ebp
c0031028:	89 e5                	mov    %esp,%ebp
c003102a:	81 ec 18 02 00 00    	sub    $0x218,%esp
c0031030:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0031034:	75 4a                	jne    c0031080 <inode_indirect_allocate+0x59>
c0031036:	8b 45 08             	mov    0x8(%ebp),%eax
c0031039:	8b 00                	mov    (%eax),%eax
c003103b:	85 c0                	test   %eax,%eax
c003103d:	75 21                	jne    c0031060 <inode_indirect_allocate+0x39>
c003103f:	83 ec 08             	sub    $0x8,%esp
c0031042:	ff 75 08             	pushl  0x8(%ebp)
c0031045:	6a 01                	push   $0x1
c0031047:	e8 67 ec ff ff       	call   c002fcb3 <free_map_allocate>
c003104c:	83 c4 10             	add    $0x10,%esp
c003104f:	83 f0 01             	xor    $0x1,%eax
c0031052:	84 c0                	test   %al,%al
c0031054:	74 0a                	je     c0031060 <inode_indirect_allocate+0x39>
c0031056:	b8 00 00 00 00       	mov    $0x0,%eax
c003105b:	e9 34 01 00 00       	jmp    c0031194 <inode_indirect_allocate+0x16d>
c0031060:	8b 45 08             	mov    0x8(%ebp),%eax
c0031063:	8b 00                	mov    (%eax),%eax
c0031065:	83 ec 08             	sub    $0x8,%esp
c0031068:	68 60 5f 04 c0       	push   $0xc0045f60
c003106d:	50                   	push   %eax
c003106e:	e8 05 f5 ff ff       	call   c0030578 <buffer_cache_write>
c0031073:	83 c4 10             	add    $0x10,%esp
c0031076:	b8 01 00 00 00       	mov    $0x1,%eax
c003107b:	e9 14 01 00 00       	jmp    c0031194 <inode_indirect_allocate+0x16d>
c0031080:	8b 45 08             	mov    0x8(%ebp),%eax
c0031083:	8b 00                	mov    (%eax),%eax
c0031085:	85 c0                	test   %eax,%eax
c0031087:	75 26                	jne    c00310af <inode_indirect_allocate+0x88>
c0031089:	83 ec 08             	sub    $0x8,%esp
c003108c:	ff 75 08             	pushl  0x8(%ebp)
c003108f:	6a 01                	push   $0x1
c0031091:	e8 1d ec ff ff       	call   c002fcb3 <free_map_allocate>
c0031096:	83 c4 10             	add    $0x10,%esp
c0031099:	8b 45 08             	mov    0x8(%ebp),%eax
c003109c:	8b 00                	mov    (%eax),%eax
c003109e:	83 ec 08             	sub    $0x8,%esp
c00310a1:	68 60 5f 04 c0       	push   $0xc0045f60
c00310a6:	50                   	push   %eax
c00310a7:	e8 cc f4 ff ff       	call   c0030578 <buffer_cache_write>
c00310ac:	83 c4 10             	add    $0x10,%esp
c00310af:	8b 45 08             	mov    0x8(%ebp),%eax
c00310b2:	8b 00                	mov    (%eax),%eax
c00310b4:	83 ec 08             	sub    $0x8,%esp
c00310b7:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
c00310bd:	52                   	push   %edx
c00310be:	50                   	push   %eax
c00310bf:	e8 1a f4 ff ff       	call   c00304de <buffer_cache_read>
c00310c4:	83 c4 10             	add    $0x10,%esp
c00310c7:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c00310cb:	75 07                	jne    c00310d4 <inode_indirect_allocate+0xad>
c00310cd:	b8 01 00 00 00       	mov    $0x1,%eax
c00310d2:	eb 05                	jmp    c00310d9 <inode_indirect_allocate+0xb2>
c00310d4:	b8 80 00 00 00       	mov    $0x80,%eax
c00310d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00310dc:	8b 55 0c             	mov    0xc(%ebp),%edx
c00310df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00310e2:	01 d0                	add    %edx,%eax
c00310e4:	83 e8 01             	sub    $0x1,%eax
c00310e7:	ba 00 00 00 00       	mov    $0x0,%edx
c00310ec:	f7 75 f0             	divl   -0x10(%ebp)
c00310ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00310f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00310f9:	eb 50                	jmp    c003114b <inode_indirect_allocate+0x124>
c00310fb:	83 ec 08             	sub    $0x8,%esp
c00310fe:	ff 75 f0             	pushl  -0x10(%ebp)
c0031101:	ff 75 0c             	pushl  0xc(%ebp)
c0031104:	e8 0f ff ff ff       	call   c0031018 <min>
c0031109:	83 c4 10             	add    $0x10,%esp
c003110c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c003110f:	8b 45 10             	mov    0x10(%ebp),%eax
c0031112:	8d 50 ff             	lea    -0x1(%eax),%edx
c0031115:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c003111b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c003111e:	c1 e1 02             	shl    $0x2,%ecx
c0031121:	01 c8                	add    %ecx,%eax
c0031123:	83 ec 04             	sub    $0x4,%esp
c0031126:	52                   	push   %edx
c0031127:	ff 75 e8             	pushl  -0x18(%ebp)
c003112a:	50                   	push   %eax
c003112b:	e8 f7 fe ff ff       	call   c0031027 <inode_indirect_allocate>
c0031130:	83 c4 10             	add    $0x10,%esp
c0031133:	83 f0 01             	xor    $0x1,%eax
c0031136:	84 c0                	test   %al,%al
c0031138:	74 07                	je     c0031141 <inode_indirect_allocate+0x11a>
c003113a:	b8 00 00 00 00       	mov    $0x0,%eax
c003113f:	eb 53                	jmp    c0031194 <inode_indirect_allocate+0x16d>
c0031141:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0031144:	29 45 0c             	sub    %eax,0xc(%ebp)
c0031147:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c003114b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003114e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0031151:	72 a8                	jb     c00310fb <inode_indirect_allocate+0xd4>
c0031153:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0031157:	74 1e                	je     c0031177 <inode_indirect_allocate+0x150>
c0031159:	83 ec 0c             	sub    $0xc,%esp
c003115c:	68 68 60 03 c0       	push   $0xc0036068
c0031161:	68 79 60 03 c0       	push   $0xc0036079
c0031166:	68 04 61 03 c0       	push   $0xc0036104
c003116b:	6a 3d                	push   $0x3d
c003116d:	68 90 60 03 c0       	push   $0xc0036090
c0031172:	e8 b3 93 ff ff       	call   c002a52a <debug_panic>
c0031177:	8b 45 08             	mov    0x8(%ebp),%eax
c003117a:	8b 00                	mov    (%eax),%eax
c003117c:	83 ec 08             	sub    $0x8,%esp
c003117f:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
c0031185:	52                   	push   %edx
c0031186:	50                   	push   %eax
c0031187:	e8 ec f3 ff ff       	call   c0030578 <buffer_cache_write>
c003118c:	83 c4 10             	add    $0x10,%esp
c003118f:	b8 01 00 00 00       	mov    $0x1,%eax
c0031194:	c9                   	leave  
c0031195:	c3                   	ret    

c0031196 <bytes_to_sectors>:
c0031196:	55                   	push   %ebp
c0031197:	89 e5                	mov    %esp,%ebp
c0031199:	8b 45 08             	mov    0x8(%ebp),%eax
c003119c:	05 ff 01 00 00       	add    $0x1ff,%eax
c00311a1:	8d 90 ff 01 00 00    	lea    0x1ff(%eax),%edx
c00311a7:	85 c0                	test   %eax,%eax
c00311a9:	0f 48 c2             	cmovs  %edx,%eax
c00311ac:	c1 f8 09             	sar    $0x9,%eax
c00311af:	5d                   	pop    %ebp
c00311b0:	c3                   	ret    

c00311b1 <inode_allocate>:
c00311b1:	55                   	push   %ebp
c00311b2:	89 e5                	mov    %esp,%ebp
c00311b4:	83 ec 18             	sub    $0x18,%esp
c00311b7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00311bb:	79 0a                	jns    c00311c7 <inode_allocate+0x16>
c00311bd:	b8 00 00 00 00       	mov    $0x0,%eax
c00311c2:	e9 6a 01 00 00       	jmp    c0031331 <inode_allocate+0x180>
c00311c7:	ff 75 0c             	pushl  0xc(%ebp)
c00311ca:	e8 c7 ff ff ff       	call   c0031196 <bytes_to_sectors>
c00311cf:	83 c4 04             	add    $0x4,%esp
c00311d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00311d5:	6a 7b                	push   $0x7b
c00311d7:	ff 75 f0             	pushl  -0x10(%ebp)
c00311da:	e8 39 fe ff ff       	call   c0031018 <min>
c00311df:	83 c4 08             	add    $0x8,%esp
c00311e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00311e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00311ec:	eb 59                	jmp    c0031247 <inode_allocate+0x96>
c00311ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00311f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00311f4:	8b 04 90             	mov    (%eax,%edx,4),%eax
c00311f7:	85 c0                	test   %eax,%eax
c00311f9:	75 48                	jne    c0031243 <inode_allocate+0x92>
c00311fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00311fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0031205:	8b 45 08             	mov    0x8(%ebp),%eax
c0031208:	01 d0                	add    %edx,%eax
c003120a:	83 ec 08             	sub    $0x8,%esp
c003120d:	50                   	push   %eax
c003120e:	6a 01                	push   $0x1
c0031210:	e8 9e ea ff ff       	call   c002fcb3 <free_map_allocate>
c0031215:	83 c4 10             	add    $0x10,%esp
c0031218:	83 f0 01             	xor    $0x1,%eax
c003121b:	84 c0                	test   %al,%al
c003121d:	74 0a                	je     c0031229 <inode_allocate+0x78>
c003121f:	b8 00 00 00 00       	mov    $0x0,%eax
c0031224:	e9 08 01 00 00       	jmp    c0031331 <inode_allocate+0x180>
c0031229:	8b 45 08             	mov    0x8(%ebp),%eax
c003122c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c003122f:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0031232:	83 ec 08             	sub    $0x8,%esp
c0031235:	68 60 5f 04 c0       	push   $0xc0045f60
c003123a:	50                   	push   %eax
c003123b:	e8 38 f3 ff ff       	call   c0030578 <buffer_cache_write>
c0031240:	83 c4 10             	add    $0x10,%esp
c0031243:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0031247:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003124a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c003124d:	72 9f                	jb     c00311ee <inode_allocate+0x3d>
c003124f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0031252:	29 45 f0             	sub    %eax,-0x10(%ebp)
c0031255:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031259:	75 0a                	jne    c0031265 <inode_allocate+0xb4>
c003125b:	b8 01 00 00 00       	mov    $0x1,%eax
c0031260:	e9 cc 00 00 00       	jmp    c0031331 <inode_allocate+0x180>
c0031265:	83 ec 08             	sub    $0x8,%esp
c0031268:	68 80 00 00 00       	push   $0x80
c003126d:	ff 75 f0             	pushl  -0x10(%ebp)
c0031270:	e8 a3 fd ff ff       	call   c0031018 <min>
c0031275:	83 c4 10             	add    $0x10,%esp
c0031278:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003127b:	8b 45 08             	mov    0x8(%ebp),%eax
c003127e:	05 ec 01 00 00       	add    $0x1ec,%eax
c0031283:	83 ec 04             	sub    $0x4,%esp
c0031286:	6a 01                	push   $0x1
c0031288:	ff 75 ec             	pushl  -0x14(%ebp)
c003128b:	50                   	push   %eax
c003128c:	e8 96 fd ff ff       	call   c0031027 <inode_indirect_allocate>
c0031291:	83 c4 10             	add    $0x10,%esp
c0031294:	83 f0 01             	xor    $0x1,%eax
c0031297:	84 c0                	test   %al,%al
c0031299:	74 0a                	je     c00312a5 <inode_allocate+0xf4>
c003129b:	b8 00 00 00 00       	mov    $0x0,%eax
c00312a0:	e9 8c 00 00 00       	jmp    c0031331 <inode_allocate+0x180>
c00312a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00312a8:	29 45 f0             	sub    %eax,-0x10(%ebp)
c00312ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00312af:	75 07                	jne    c00312b8 <inode_allocate+0x107>
c00312b1:	b8 01 00 00 00       	mov    $0x1,%eax
c00312b6:	eb 79                	jmp    c0031331 <inode_allocate+0x180>
c00312b8:	83 ec 08             	sub    $0x8,%esp
c00312bb:	68 00 40 00 00       	push   $0x4000
c00312c0:	ff 75 f0             	pushl  -0x10(%ebp)
c00312c3:	e8 50 fd ff ff       	call   c0031018 <min>
c00312c8:	83 c4 10             	add    $0x10,%esp
c00312cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00312ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00312d1:	05 f0 01 00 00       	add    $0x1f0,%eax
c00312d6:	83 ec 04             	sub    $0x4,%esp
c00312d9:	6a 02                	push   $0x2
c00312db:	ff 75 ec             	pushl  -0x14(%ebp)
c00312de:	50                   	push   %eax
c00312df:	e8 43 fd ff ff       	call   c0031027 <inode_indirect_allocate>
c00312e4:	83 c4 10             	add    $0x10,%esp
c00312e7:	83 f0 01             	xor    $0x1,%eax
c00312ea:	84 c0                	test   %al,%al
c00312ec:	74 07                	je     c00312f5 <inode_allocate+0x144>
c00312ee:	b8 00 00 00 00       	mov    $0x0,%eax
c00312f3:	eb 3c                	jmp    c0031331 <inode_allocate+0x180>
c00312f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00312f8:	29 45 f0             	sub    %eax,-0x10(%ebp)
c00312fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00312ff:	75 07                	jne    c0031308 <inode_allocate+0x157>
c0031301:	b8 01 00 00 00       	mov    $0x1,%eax
c0031306:	eb 29                	jmp    c0031331 <inode_allocate+0x180>
c0031308:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c003130c:	74 1e                	je     c003132c <inode_allocate+0x17b>
c003130e:	83 ec 0c             	sub    $0xc,%esp
c0031311:	68 68 60 03 c0       	push   $0xc0036068
c0031316:	68 79 60 03 c0       	push   $0xc0036079
c003131b:	68 1c 61 03 c0       	push   $0xc003611c
c0031320:	6a 6c                	push   $0x6c
c0031322:	68 90 60 03 c0       	push   $0xc0036090
c0031327:	e8 fe 91 ff ff       	call   c002a52a <debug_panic>
c003132c:	b8 00 00 00 00       	mov    $0x0,%eax
c0031331:	c9                   	leave  
c0031332:	c3                   	ret    

c0031333 <index_to_sector>:
c0031333:	55                   	push   %ebp
c0031334:	89 e5                	mov    %esp,%ebp
c0031336:	81 ec 18 02 00 00    	sub    $0x218,%esp
c003133c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0031343:	83 7d 0c 7a          	cmpl   $0x7a,0xc(%ebp)
c0031347:	7f 0e                	jg     c0031357 <index_to_sector+0x24>
c0031349:	8b 45 08             	mov    0x8(%ebp),%eax
c003134c:	8b 55 0c             	mov    0xc(%ebp),%edx
c003134f:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0031352:	e9 c0 00 00 00       	jmp    c0031417 <index_to_sector+0xe4>
c0031357:	83 45 f4 7b          	addl   $0x7b,-0xc(%ebp)
c003135b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003135e:	83 e8 80             	sub    $0xffffff80,%eax
c0031361:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0031364:	7e 2e                	jle    c0031394 <index_to_sector+0x61>
c0031366:	8b 45 08             	mov    0x8(%ebp),%eax
c0031369:	8b 80 ec 01 00 00    	mov    0x1ec(%eax),%eax
c003136f:	83 ec 08             	sub    $0x8,%esp
c0031372:	8d 95 ec fd ff ff    	lea    -0x214(%ebp),%edx
c0031378:	52                   	push   %edx
c0031379:	50                   	push   %eax
c003137a:	e8 5f f1 ff ff       	call   c00304de <buffer_cache_read>
c003137f:	83 c4 10             	add    $0x10,%esp
c0031382:	8b 45 0c             	mov    0xc(%ebp),%eax
c0031385:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0031388:	8b 84 85 ec fd ff ff 	mov    -0x214(%ebp,%eax,4),%eax
c003138f:	e9 83 00 00 00       	jmp    c0031417 <index_to_sector+0xe4>
c0031394:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
c0031398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c003139b:	05 00 40 00 00       	add    $0x4000,%eax
c00313a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00313a3:	7e 6d                	jle    c0031412 <index_to_sector+0xdf>
c00313a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00313a8:	2b 45 f4             	sub    -0xc(%ebp),%eax
c00313ab:	8d 50 7f             	lea    0x7f(%eax),%edx
c00313ae:	85 c0                	test   %eax,%eax
c00313b0:	0f 48 c2             	cmovs  %edx,%eax
c00313b3:	c1 f8 07             	sar    $0x7,%eax
c00313b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00313b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00313bc:	2b 45 f4             	sub    -0xc(%ebp),%eax
c00313bf:	99                   	cltd   
c00313c0:	c1 ea 19             	shr    $0x19,%edx
c00313c3:	01 d0                	add    %edx,%eax
c00313c5:	83 e0 7f             	and    $0x7f,%eax
c00313c8:	29 d0                	sub    %edx,%eax
c00313ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00313cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00313d0:	8b 80 f0 01 00 00    	mov    0x1f0(%eax),%eax
c00313d6:	83 ec 08             	sub    $0x8,%esp
c00313d9:	8d 95 ec fd ff ff    	lea    -0x214(%ebp),%edx
c00313df:	52                   	push   %edx
c00313e0:	50                   	push   %eax
c00313e1:	e8 f8 f0 ff ff       	call   c00304de <buffer_cache_read>
c00313e6:	83 c4 10             	add    $0x10,%esp
c00313e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00313ec:	8b 84 85 ec fd ff ff 	mov    -0x214(%ebp,%eax,4),%eax
c00313f3:	83 ec 08             	sub    $0x8,%esp
c00313f6:	8d 95 ec fd ff ff    	lea    -0x214(%ebp),%edx
c00313fc:	52                   	push   %edx
c00313fd:	50                   	push   %eax
c00313fe:	e8 db f0 ff ff       	call   c00304de <buffer_cache_read>
c0031403:	83 c4 10             	add    $0x10,%esp
c0031406:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0031409:	8b 84 85 ec fd ff ff 	mov    -0x214(%ebp,%eax,4),%eax
c0031410:	eb 05                	jmp    c0031417 <index_to_sector+0xe4>
c0031412:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0031417:	c9                   	leave  
c0031418:	c3                   	ret    

c0031419 <byte_to_sector>:
c0031419:	55                   	push   %ebp
c003141a:	89 e5                	mov    %esp,%ebp
c003141c:	83 ec 18             	sub    $0x18,%esp
c003141f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0031423:	75 21                	jne    c0031446 <byte_to_sector+0x2d>
c0031425:	83 ec 0c             	sub    $0xc,%esp
c0031428:	68 a6 60 03 c0       	push   $0xc00360a6
c003142d:	68 79 60 03 c0       	push   $0xc0036079
c0031432:	68 2c 61 03 c0       	push   $0xc003612c
c0031437:	68 a8 00 00 00       	push   $0xa8
c003143c:	68 90 60 03 c0       	push   $0xc0036090
c0031441:	e8 e4 90 ff ff       	call   c002a52a <debug_panic>
c0031446:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c003144a:	78 39                	js     c0031485 <byte_to_sector+0x6c>
c003144c:	8b 45 08             	mov    0x8(%ebp),%eax
c003144f:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
c0031455:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0031458:	7e 2b                	jle    c0031485 <byte_to_sector+0x6c>
c003145a:	8b 45 0c             	mov    0xc(%ebp),%eax
c003145d:	8d 90 ff 01 00 00    	lea    0x1ff(%eax),%edx
c0031463:	85 c0                	test   %eax,%eax
c0031465:	0f 48 c2             	cmovs  %edx,%eax
c0031468:	c1 f8 09             	sar    $0x9,%eax
c003146b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c003146e:	8b 45 08             	mov    0x8(%ebp),%eax
c0031471:	83 c0 18             	add    $0x18,%eax
c0031474:	83 ec 08             	sub    $0x8,%esp
c0031477:	ff 75 f4             	pushl  -0xc(%ebp)
c003147a:	50                   	push   %eax
c003147b:	e8 b3 fe ff ff       	call   c0031333 <index_to_sector>
c0031480:	83 c4 10             	add    $0x10,%esp
c0031483:	eb 05                	jmp    c003148a <byte_to_sector+0x71>
c0031485:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c003148a:	c9                   	leave  
c003148b:	c3                   	ret    

c003148c <inode_init>:
c003148c:	55                   	push   %ebp
c003148d:	89 e5                	mov    %esp,%ebp
c003148f:	83 ec 08             	sub    $0x8,%esp
c0031492:	83 ec 0c             	sub    $0xc,%esp
c0031495:	68 60 61 04 c0       	push   $0xc0046160
c003149a:	e8 fe 92 ff ff       	call   c002a79d <list_init>
c003149f:	83 c4 10             	add    $0x10,%esp
c00314a2:	90                   	nop
c00314a3:	c9                   	leave  
c00314a4:	c3                   	ret    

c00314a5 <inode_create>:
c00314a5:	55                   	push   %ebp
c00314a6:	89 e5                	mov    %esp,%ebp
c00314a8:	83 ec 28             	sub    $0x28,%esp
c00314ab:	8b 45 10             	mov    0x10(%ebp),%eax
c00314ae:	88 45 e4             	mov    %al,-0x1c(%ebp)
c00314b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c00314b8:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00314bc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00314c0:	79 21                	jns    c00314e3 <inode_create+0x3e>
c00314c2:	83 ec 0c             	sub    $0xc,%esp
c00314c5:	68 b4 60 03 c0       	push   $0xc00360b4
c00314ca:	68 79 60 03 c0       	push   $0xc0036079
c00314cf:	68 3c 61 03 c0       	push   $0xc003613c
c00314d4:	68 c8 00 00 00       	push   $0xc8
c00314d9:	68 90 60 03 c0       	push   $0xc0036090
c00314de:	e8 47 90 ff ff       	call   c002a52a <debug_panic>
c00314e3:	83 ec 08             	sub    $0x8,%esp
c00314e6:	68 00 02 00 00       	push   $0x200
c00314eb:	6a 01                	push   $0x1
c00314ed:	e8 ca 2d ff ff       	call   c00242bc <calloc>
c00314f2:	83 c4 10             	add    $0x10,%esp
c00314f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00314f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00314fc:	74 76                	je     c0031574 <inode_create+0xcf>
c00314fe:	83 ec 0c             	sub    $0xc,%esp
c0031501:	ff 75 0c             	pushl  0xc(%ebp)
c0031504:	e8 8d fc ff ff       	call   c0031196 <bytes_to_sectors>
c0031509:	83 c4 10             	add    $0x10,%esp
c003150c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003150f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031512:	8b 55 0c             	mov    0xc(%ebp),%edx
c0031515:	89 90 f8 01 00 00    	mov    %edx,0x1f8(%eax)
c003151b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003151e:	c7 80 fc 01 00 00 44 	movl   $0x494e4f44,0x1fc(%eax)
c0031525:	4f 4e 49 
c0031528:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003152b:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c003152f:	88 90 f4 01 00 00    	mov    %dl,0x1f4(%eax)
c0031535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031538:	8b 80 f8 01 00 00    	mov    0x1f8(%eax),%eax
c003153e:	83 ec 08             	sub    $0x8,%esp
c0031541:	50                   	push   %eax
c0031542:	ff 75 f0             	pushl  -0x10(%ebp)
c0031545:	e8 67 fc ff ff       	call   c00311b1 <inode_allocate>
c003154a:	83 c4 10             	add    $0x10,%esp
c003154d:	84 c0                	test   %al,%al
c003154f:	74 15                	je     c0031566 <inode_create+0xc1>
c0031551:	83 ec 08             	sub    $0x8,%esp
c0031554:	ff 75 f0             	pushl  -0x10(%ebp)
c0031557:	ff 75 08             	pushl  0x8(%ebp)
c003155a:	e8 19 f0 ff ff       	call   c0030578 <buffer_cache_write>
c003155f:	83 c4 10             	add    $0x10,%esp
c0031562:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
c0031566:	83 ec 0c             	sub    $0xc,%esp
c0031569:	ff 75 f0             	pushl  -0x10(%ebp)
c003156c:	e8 7a 2e ff ff       	call   c00243eb <free>
c0031571:	83 c4 10             	add    $0x10,%esp
c0031574:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0031578:	c9                   	leave  
c0031579:	c3                   	ret    

c003157a <inode_open>:
c003157a:	55                   	push   %ebp
c003157b:	89 e5                	mov    %esp,%ebp
c003157d:	83 ec 18             	sub    $0x18,%esp
c0031580:	83 ec 0c             	sub    $0xc,%esp
c0031583:	68 60 61 04 c0       	push   $0xc0046160
c0031588:	e8 65 92 ff ff       	call   c002a7f2 <list_begin>
c003158d:	83 c4 10             	add    $0x10,%esp
c0031590:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031593:	eb 3e                	jmp    c00315d3 <inode_open+0x59>
c0031595:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031598:	83 c0 04             	add    $0x4,%eax
c003159b:	83 e8 04             	sub    $0x4,%eax
c003159e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00315a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00315a4:	8b 40 08             	mov    0x8(%eax),%eax
c00315a7:	3b 45 08             	cmp    0x8(%ebp),%eax
c00315aa:	75 16                	jne    c00315c2 <inode_open+0x48>
c00315ac:	83 ec 0c             	sub    $0xc,%esp
c00315af:	ff 75 f0             	pushl  -0x10(%ebp)
c00315b2:	e8 a7 00 00 00       	call   c003165e <inode_reopen>
c00315b7:	83 c4 10             	add    $0x10,%esp
c00315ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00315bd:	e9 9a 00 00 00       	jmp    c003165c <inode_open+0xe2>
c00315c2:	83 ec 0c             	sub    $0xc,%esp
c00315c5:	ff 75 f4             	pushl  -0xc(%ebp)
c00315c8:	e8 57 92 ff ff       	call   c002a824 <list_next>
c00315cd:	83 c4 10             	add    $0x10,%esp
c00315d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00315d3:	83 ec 0c             	sub    $0xc,%esp
c00315d6:	68 60 61 04 c0       	push   $0xc0046160
c00315db:	e8 8e 92 ff ff       	call   c002a86e <list_end>
c00315e0:	83 c4 10             	add    $0x10,%esp
c00315e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00315e6:	75 ad                	jne    c0031595 <inode_open+0x1b>
c00315e8:	83 ec 0c             	sub    $0xc,%esp
c00315eb:	68 18 02 00 00       	push   $0x218
c00315f0:	e8 f9 2a ff ff       	call   c00240ee <malloc>
c00315f5:	83 c4 10             	add    $0x10,%esp
c00315f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00315fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00315ff:	75 07                	jne    c0031608 <inode_open+0x8e>
c0031601:	b8 00 00 00 00       	mov    $0x0,%eax
c0031606:	eb 54                	jmp    c003165c <inode_open+0xe2>
c0031608:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003160b:	83 ec 08             	sub    $0x8,%esp
c003160e:	50                   	push   %eax
c003160f:	68 60 61 04 c0       	push   $0xc0046160
c0031614:	e8 3e 95 ff ff       	call   c002ab57 <list_push_front>
c0031619:	83 c4 10             	add    $0x10,%esp
c003161c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003161f:	8b 55 08             	mov    0x8(%ebp),%edx
c0031622:	89 50 08             	mov    %edx,0x8(%eax)
c0031625:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031628:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
c003162f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031632:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
c0031639:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003163c:	c6 40 10 00          	movb   $0x0,0x10(%eax)
c0031640:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031643:	8d 50 18             	lea    0x18(%eax),%edx
c0031646:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0031649:	8b 40 08             	mov    0x8(%eax),%eax
c003164c:	83 ec 08             	sub    $0x8,%esp
c003164f:	52                   	push   %edx
c0031650:	50                   	push   %eax
c0031651:	e8 88 ee ff ff       	call   c00304de <buffer_cache_read>
c0031656:	83 c4 10             	add    $0x10,%esp
c0031659:	8b 45 f0             	mov    -0x10(%ebp),%eax
c003165c:	c9                   	leave  
c003165d:	c3                   	ret    

c003165e <inode_reopen>:
c003165e:	55                   	push   %ebp
c003165f:	89 e5                	mov    %esp,%ebp
c0031661:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0031665:	74 0f                	je     c0031676 <inode_reopen+0x18>
c0031667:	8b 45 08             	mov    0x8(%ebp),%eax
c003166a:	8b 40 0c             	mov    0xc(%eax),%eax
c003166d:	8d 50 01             	lea    0x1(%eax),%edx
c0031670:	8b 45 08             	mov    0x8(%ebp),%eax
c0031673:	89 50 0c             	mov    %edx,0xc(%eax)
c0031676:	8b 45 08             	mov    0x8(%ebp),%eax
c0031679:	5d                   	pop    %ebp
c003167a:	c3                   	ret    

c003167b <inode_get_inumber>:
c003167b:	55                   	push   %ebp
c003167c:	89 e5                	mov    %esp,%ebp
c003167e:	8b 45 08             	mov    0x8(%ebp),%eax
c0031681:	8b 40 08             	mov    0x8(%eax),%eax
c0031684:	5d                   	pop    %ebp
c0031685:	c3                   	ret    

c0031686 <inode_delete_indirect>:
c0031686:	55                   	push   %ebp
c0031687:	89 e5                	mov    %esp,%ebp
c0031689:	81 ec 18 02 00 00    	sub    $0x218,%esp
c003168f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0031693:	75 15                	jne    c00316aa <inode_delete_indirect+0x24>
c0031695:	83 ec 08             	sub    $0x8,%esp
c0031698:	6a 01                	push   $0x1
c003169a:	ff 75 08             	pushl  0x8(%ebp)
c003169d:	e8 91 e6 ff ff       	call   c002fd33 <free_map_release>
c00316a2:	83 c4 10             	add    $0x10,%esp
c00316a5:	e9 c6 00 00 00       	jmp    c0031770 <inode_delete_indirect+0xea>
c00316aa:	83 ec 08             	sub    $0x8,%esp
c00316ad:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00316b3:	50                   	push   %eax
c00316b4:	ff 75 08             	pushl  0x8(%ebp)
c00316b7:	e8 22 ee ff ff       	call   c00304de <buffer_cache_read>
c00316bc:	83 c4 10             	add    $0x10,%esp
c00316bf:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c00316c3:	75 07                	jne    c00316cc <inode_delete_indirect+0x46>
c00316c5:	b8 01 00 00 00       	mov    $0x1,%eax
c00316ca:	eb 05                	jmp    c00316d1 <inode_delete_indirect+0x4b>
c00316cc:	b8 80 00 00 00       	mov    $0x80,%eax
c00316d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00316d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c00316d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00316da:	01 d0                	add    %edx,%eax
c00316dc:	83 e8 01             	sub    $0x1,%eax
c00316df:	ba 00 00 00 00       	mov    $0x0,%edx
c00316e4:	f7 75 f0             	divl   -0x10(%ebp)
c00316e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00316ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00316f1:	eb 3e                	jmp    c0031731 <inode_delete_indirect+0xab>
c00316f3:	83 ec 08             	sub    $0x8,%esp
c00316f6:	ff 75 f0             	pushl  -0x10(%ebp)
c00316f9:	ff 75 0c             	pushl  0xc(%ebp)
c00316fc:	e8 17 f9 ff ff       	call   c0031018 <min>
c0031701:	83 c4 10             	add    $0x10,%esp
c0031704:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031707:	8b 45 10             	mov    0x10(%ebp),%eax
c003170a:	8d 50 ff             	lea    -0x1(%eax),%edx
c003170d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031710:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
c0031717:	83 ec 04             	sub    $0x4,%esp
c003171a:	52                   	push   %edx
c003171b:	ff 75 e8             	pushl  -0x18(%ebp)
c003171e:	50                   	push   %eax
c003171f:	e8 62 ff ff ff       	call   c0031686 <inode_delete_indirect>
c0031724:	83 c4 10             	add    $0x10,%esp
c0031727:	8b 45 e8             	mov    -0x18(%ebp),%eax
c003172a:	29 45 0c             	sub    %eax,0xc(%ebp)
c003172d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0031731:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031734:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0031737:	72 ba                	jb     c00316f3 <inode_delete_indirect+0x6d>
c0031739:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c003173d:	74 21                	je     c0031760 <inode_delete_indirect+0xda>
c003173f:	83 ec 0c             	sub    $0xc,%esp
c0031742:	68 68 60 03 c0       	push   $0xc0036068
c0031747:	68 79 60 03 c0       	push   $0xc0036079
c003174c:	68 4c 61 03 c0       	push   $0xc003614c
c0031751:	68 28 01 00 00       	push   $0x128
c0031756:	68 90 60 03 c0       	push   $0xc0036090
c003175b:	e8 ca 8d ff ff       	call   c002a52a <debug_panic>
c0031760:	83 ec 08             	sub    $0x8,%esp
c0031763:	6a 01                	push   $0x1
c0031765:	ff 75 08             	pushl  0x8(%ebp)
c0031768:	e8 c6 e5 ff ff       	call   c002fd33 <free_map_release>
c003176d:	83 c4 10             	add    $0x10,%esp
c0031770:	c9                   	leave  
c0031771:	c3                   	ret    

c0031772 <inode_delete>:
c0031772:	55                   	push   %ebp
c0031773:	89 e5                	mov    %esp,%ebp
c0031775:	83 ec 18             	sub    $0x18,%esp
c0031778:	8b 45 08             	mov    0x8(%ebp),%eax
c003177b:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
c0031781:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031784:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031788:	0f 88 cc 00 00 00    	js     c003185a <inode_delete+0xe8>
c003178e:	ff 75 f0             	pushl  -0x10(%ebp)
c0031791:	e8 00 fa ff ff       	call   c0031196 <bytes_to_sectors>
c0031796:	83 c4 04             	add    $0x4,%esp
c0031799:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003179c:	6a 7b                	push   $0x7b
c003179e:	ff 75 ec             	pushl  -0x14(%ebp)
c00317a1:	e8 72 f8 ff ff       	call   c0031018 <min>
c00317a6:	83 c4 08             	add    $0x8,%esp
c00317a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00317ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00317b3:	eb 1f                	jmp    c00317d4 <inode_delete+0x62>
c00317b5:	8b 45 08             	mov    0x8(%ebp),%eax
c00317b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00317bb:	83 c2 04             	add    $0x4,%edx
c00317be:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
c00317c2:	83 ec 08             	sub    $0x8,%esp
c00317c5:	6a 01                	push   $0x1
c00317c7:	50                   	push   %eax
c00317c8:	e8 66 e5 ff ff       	call   c002fd33 <free_map_release>
c00317cd:	83 c4 10             	add    $0x10,%esp
c00317d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00317d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00317d7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c00317da:	72 d9                	jb     c00317b5 <inode_delete+0x43>
c00317dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00317df:	29 45 ec             	sub    %eax,-0x14(%ebp)
c00317e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00317e6:	74 75                	je     c003185d <inode_delete+0xeb>
c00317e8:	83 ec 08             	sub    $0x8,%esp
c00317eb:	68 80 00 00 00       	push   $0x80
c00317f0:	ff 75 ec             	pushl  -0x14(%ebp)
c00317f3:	e8 20 f8 ff ff       	call   c0031018 <min>
c00317f8:	83 c4 10             	add    $0x10,%esp
c00317fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00317fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0031801:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
c0031807:	83 ec 04             	sub    $0x4,%esp
c003180a:	6a 01                	push   $0x1
c003180c:	ff 75 e8             	pushl  -0x18(%ebp)
c003180f:	50                   	push   %eax
c0031810:	e8 71 fe ff ff       	call   c0031686 <inode_delete_indirect>
c0031815:	83 c4 10             	add    $0x10,%esp
c0031818:	8b 45 e8             	mov    -0x18(%ebp),%eax
c003181b:	29 45 ec             	sub    %eax,-0x14(%ebp)
c003181e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0031822:	74 3c                	je     c0031860 <inode_delete+0xee>
c0031824:	83 ec 08             	sub    $0x8,%esp
c0031827:	68 00 40 00 00       	push   $0x4000
c003182c:	ff 75 ec             	pushl  -0x14(%ebp)
c003182f:	e8 e4 f7 ff ff       	call   c0031018 <min>
c0031834:	83 c4 10             	add    $0x10,%esp
c0031837:	89 45 e8             	mov    %eax,-0x18(%ebp)
c003183a:	8b 45 08             	mov    0x8(%ebp),%eax
c003183d:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
c0031843:	83 ec 04             	sub    $0x4,%esp
c0031846:	6a 02                	push   $0x2
c0031848:	ff 75 e8             	pushl  -0x18(%ebp)
c003184b:	50                   	push   %eax
c003184c:	e8 35 fe ff ff       	call   c0031686 <inode_delete_indirect>
c0031851:	83 c4 10             	add    $0x10,%esp
c0031854:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0031858:	eb 07                	jmp    c0031861 <inode_delete+0xef>
c003185a:	90                   	nop
c003185b:	eb 04                	jmp    c0031861 <inode_delete+0xef>
c003185d:	90                   	nop
c003185e:	eb 01                	jmp    c0031861 <inode_delete+0xef>
c0031860:	90                   	nop
c0031861:	c9                   	leave  
c0031862:	c3                   	ret    

c0031863 <inode_close>:
c0031863:	55                   	push   %ebp
c0031864:	89 e5                	mov    %esp,%ebp
c0031866:	83 ec 08             	sub    $0x8,%esp
c0031869:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c003186d:	74 65                	je     c00318d4 <inode_close+0x71>
c003186f:	8b 45 08             	mov    0x8(%ebp),%eax
c0031872:	8b 40 0c             	mov    0xc(%eax),%eax
c0031875:	8d 50 ff             	lea    -0x1(%eax),%edx
c0031878:	8b 45 08             	mov    0x8(%ebp),%eax
c003187b:	89 50 0c             	mov    %edx,0xc(%eax)
c003187e:	8b 45 08             	mov    0x8(%ebp),%eax
c0031881:	8b 40 0c             	mov    0xc(%eax),%eax
c0031884:	85 c0                	test   %eax,%eax
c0031886:	75 4d                	jne    c00318d5 <inode_close+0x72>
c0031888:	8b 45 08             	mov    0x8(%ebp),%eax
c003188b:	83 ec 0c             	sub    $0xc,%esp
c003188e:	50                   	push   %eax
c003188f:	e8 0f 93 ff ff       	call   c002aba3 <list_remove>
c0031894:	83 c4 10             	add    $0x10,%esp
c0031897:	8b 45 08             	mov    0x8(%ebp),%eax
c003189a:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c003189e:	84 c0                	test   %al,%al
c00318a0:	74 22                	je     c00318c4 <inode_close+0x61>
c00318a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00318a5:	8b 40 08             	mov    0x8(%eax),%eax
c00318a8:	83 ec 08             	sub    $0x8,%esp
c00318ab:	6a 01                	push   $0x1
c00318ad:	50                   	push   %eax
c00318ae:	e8 80 e4 ff ff       	call   c002fd33 <free_map_release>
c00318b3:	83 c4 10             	add    $0x10,%esp
c00318b6:	83 ec 0c             	sub    $0xc,%esp
c00318b9:	ff 75 08             	pushl  0x8(%ebp)
c00318bc:	e8 b1 fe ff ff       	call   c0031772 <inode_delete>
c00318c1:	83 c4 10             	add    $0x10,%esp
c00318c4:	83 ec 0c             	sub    $0xc,%esp
c00318c7:	ff 75 08             	pushl  0x8(%ebp)
c00318ca:	e8 1c 2b ff ff       	call   c00243eb <free>
c00318cf:	83 c4 10             	add    $0x10,%esp
c00318d2:	eb 01                	jmp    c00318d5 <inode_close+0x72>
c00318d4:	90                   	nop
c00318d5:	c9                   	leave  
c00318d6:	c3                   	ret    

c00318d7 <inode_remove>:
c00318d7:	55                   	push   %ebp
c00318d8:	89 e5                	mov    %esp,%ebp
c00318da:	83 ec 08             	sub    $0x8,%esp
c00318dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00318e1:	75 21                	jne    c0031904 <inode_remove+0x2d>
c00318e3:	83 ec 0c             	sub    $0xc,%esp
c00318e6:	68 a6 60 03 c0       	push   $0xc00360a6
c00318eb:	68 79 60 03 c0       	push   $0xc0036079
c00318f0:	68 64 61 03 c0       	push   $0xc0036164
c00318f5:	68 67 01 00 00       	push   $0x167
c00318fa:	68 90 60 03 c0       	push   $0xc0036090
c00318ff:	e8 26 8c ff ff       	call   c002a52a <debug_panic>
c0031904:	8b 45 08             	mov    0x8(%ebp),%eax
c0031907:	c6 40 10 01          	movb   $0x1,0x10(%eax)
c003190b:	90                   	nop
c003190c:	c9                   	leave  
c003190d:	c3                   	ret    

c003190e <inode_read_at>:
c003190e:	55                   	push   %ebp
c003190f:	89 e5                	mov    %esp,%ebp
c0031911:	53                   	push   %ebx
c0031912:	83 ec 34             	sub    $0x34,%esp
c0031915:	8b 45 0c             	mov    0xc(%ebp),%eax
c0031918:	89 45 ec             	mov    %eax,-0x14(%ebp)
c003191b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0031922:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0031929:	e9 f5 00 00 00       	jmp    c0031a23 <inode_read_at+0x115>
c003192e:	83 ec 08             	sub    $0x8,%esp
c0031931:	ff 75 14             	pushl  0x14(%ebp)
c0031934:	ff 75 08             	pushl  0x8(%ebp)
c0031937:	e8 dd fa ff ff       	call   c0031419 <byte_to_sector>
c003193c:	83 c4 10             	add    $0x10,%esp
c003193f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031942:	8b 45 14             	mov    0x14(%ebp),%eax
c0031945:	99                   	cltd   
c0031946:	c1 ea 17             	shr    $0x17,%edx
c0031949:	01 d0                	add    %edx,%eax
c003194b:	25 ff 01 00 00       	and    $0x1ff,%eax
c0031950:	29 d0                	sub    %edx,%eax
c0031952:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0031955:	83 ec 0c             	sub    $0xc,%esp
c0031958:	ff 75 08             	pushl  0x8(%ebp)
c003195b:	e8 ab 03 00 00       	call   c0031d0b <inode_length>
c0031960:	83 c4 10             	add    $0x10,%esp
c0031963:	2b 45 14             	sub    0x14(%ebp),%eax
c0031966:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0031969:	b8 00 02 00 00       	mov    $0x200,%eax
c003196e:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0031971:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0031974:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0031977:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c003197a:	0f 4e 45 dc          	cmovle -0x24(%ebp),%eax
c003197e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0031981:	8b 45 10             	mov    0x10(%ebp),%eax
c0031984:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0031987:	0f 4e 45 d8          	cmovle -0x28(%ebp),%eax
c003198b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c003198e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0031992:	0f 8e 97 00 00 00    	jle    c0031a2f <inode_read_at+0x121>
c0031998:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c003199c:	75 22                	jne    c00319c0 <inode_read_at+0xb2>
c003199e:	81 7d d4 00 02 00 00 	cmpl   $0x200,-0x2c(%ebp)
c00319a5:	75 19                	jne    c00319c0 <inode_read_at+0xb2>
c00319a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00319aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00319ad:	01 d0                	add    %edx,%eax
c00319af:	83 ec 08             	sub    $0x8,%esp
c00319b2:	50                   	push   %eax
c00319b3:	ff 75 e8             	pushl  -0x18(%ebp)
c00319b6:	e8 23 eb ff ff       	call   c00304de <buffer_cache_read>
c00319bb:	83 c4 10             	add    $0x10,%esp
c00319be:	eb 51                	jmp    c0031a11 <inode_read_at+0x103>
c00319c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00319c4:	75 19                	jne    c00319df <inode_read_at+0xd1>
c00319c6:	83 ec 0c             	sub    $0xc,%esp
c00319c9:	68 00 02 00 00       	push   $0x200
c00319ce:	e8 1b 27 ff ff       	call   c00240ee <malloc>
c00319d3:	83 c4 10             	add    $0x10,%esp
c00319d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00319d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00319dd:	74 53                	je     c0031a32 <inode_read_at+0x124>
c00319df:	83 ec 08             	sub    $0x8,%esp
c00319e2:	ff 75 f0             	pushl  -0x10(%ebp)
c00319e5:	ff 75 e8             	pushl  -0x18(%ebp)
c00319e8:	e8 f1 ea ff ff       	call   c00304de <buffer_cache_read>
c00319ed:	83 c4 10             	add    $0x10,%esp
c00319f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00319f3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c00319f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00319f9:	01 d1                	add    %edx,%ecx
c00319fb:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c00319fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0031a01:	01 da                	add    %ebx,%edx
c0031a03:	83 ec 04             	sub    $0x4,%esp
c0031a06:	50                   	push   %eax
c0031a07:	51                   	push   %ecx
c0031a08:	52                   	push   %edx
c0031a09:	e8 dc 77 ff ff       	call   c00291ea <memcpy>
c0031a0e:	83 c4 10             	add    $0x10,%esp
c0031a11:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031a14:	29 45 10             	sub    %eax,0x10(%ebp)
c0031a17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031a1a:	01 45 14             	add    %eax,0x14(%ebp)
c0031a1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031a20:	01 45 f4             	add    %eax,-0xc(%ebp)
c0031a23:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0031a27:	0f 8f 01 ff ff ff    	jg     c003192e <inode_read_at+0x20>
c0031a2d:	eb 04                	jmp    c0031a33 <inode_read_at+0x125>
c0031a2f:	90                   	nop
c0031a30:	eb 01                	jmp    c0031a33 <inode_read_at+0x125>
c0031a32:	90                   	nop
c0031a33:	83 ec 0c             	sub    $0xc,%esp
c0031a36:	ff 75 f0             	pushl  -0x10(%ebp)
c0031a39:	e8 ad 29 ff ff       	call   c00243eb <free>
c0031a3e:	83 c4 10             	add    $0x10,%esp
c0031a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031a44:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0031a47:	c9                   	leave  
c0031a48:	c3                   	ret    

c0031a49 <inode_write_at>:
c0031a49:	55                   	push   %ebp
c0031a4a:	89 e5                	mov    %esp,%ebp
c0031a4c:	53                   	push   %ebx
c0031a4d:	83 ec 34             	sub    $0x34,%esp
c0031a50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0031a53:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031a56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0031a5d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0031a64:	8b 45 08             	mov    0x8(%ebp),%eax
c0031a67:	8b 40 14             	mov    0x14(%eax),%eax
c0031a6a:	85 c0                	test   %eax,%eax
c0031a6c:	74 0a                	je     c0031a78 <inode_write_at+0x2f>
c0031a6e:	b8 00 00 00 00       	mov    $0x0,%eax
c0031a73:	e9 d1 01 00 00       	jmp    c0031c49 <inode_write_at+0x200>
c0031a78:	8b 55 14             	mov    0x14(%ebp),%edx
c0031a7b:	8b 45 10             	mov    0x10(%ebp),%eax
c0031a7e:	01 d0                	add    %edx,%eax
c0031a80:	83 e8 01             	sub    $0x1,%eax
c0031a83:	83 ec 08             	sub    $0x8,%esp
c0031a86:	50                   	push   %eax
c0031a87:	ff 75 08             	pushl  0x8(%ebp)
c0031a8a:	e8 8a f9 ff ff       	call   c0031419 <byte_to_sector>
c0031a8f:	83 c4 10             	add    $0x10,%esp
c0031a92:	83 f8 ff             	cmp    $0xffffffff,%eax
c0031a95:	0f 85 8d 01 00 00    	jne    c0031c28 <inode_write_at+0x1df>
c0031a9b:	8b 55 14             	mov    0x14(%ebp),%edx
c0031a9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0031aa1:	01 c2                	add    %eax,%edx
c0031aa3:	8b 45 08             	mov    0x8(%ebp),%eax
c0031aa6:	83 c0 18             	add    $0x18,%eax
c0031aa9:	83 ec 08             	sub    $0x8,%esp
c0031aac:	52                   	push   %edx
c0031aad:	50                   	push   %eax
c0031aae:	e8 fe f6 ff ff       	call   c00311b1 <inode_allocate>
c0031ab3:	83 c4 10             	add    $0x10,%esp
c0031ab6:	83 f0 01             	xor    $0x1,%eax
c0031ab9:	84 c0                	test   %al,%al
c0031abb:	74 0a                	je     c0031ac7 <inode_write_at+0x7e>
c0031abd:	b8 00 00 00 00       	mov    $0x0,%eax
c0031ac2:	e9 82 01 00 00       	jmp    c0031c49 <inode_write_at+0x200>
c0031ac7:	8b 55 14             	mov    0x14(%ebp),%edx
c0031aca:	8b 45 10             	mov    0x10(%ebp),%eax
c0031acd:	01 c2                	add    %eax,%edx
c0031acf:	8b 45 08             	mov    0x8(%ebp),%eax
c0031ad2:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
c0031ad8:	8b 45 08             	mov    0x8(%ebp),%eax
c0031adb:	8d 50 18             	lea    0x18(%eax),%edx
c0031ade:	8b 45 08             	mov    0x8(%ebp),%eax
c0031ae1:	8b 40 08             	mov    0x8(%eax),%eax
c0031ae4:	83 ec 08             	sub    $0x8,%esp
c0031ae7:	52                   	push   %edx
c0031ae8:	50                   	push   %eax
c0031ae9:	e8 8a ea ff ff       	call   c0030578 <buffer_cache_write>
c0031aee:	83 c4 10             	add    $0x10,%esp
c0031af1:	e9 32 01 00 00       	jmp    c0031c28 <inode_write_at+0x1df>
c0031af6:	83 ec 08             	sub    $0x8,%esp
c0031af9:	ff 75 14             	pushl  0x14(%ebp)
c0031afc:	ff 75 08             	pushl  0x8(%ebp)
c0031aff:	e8 15 f9 ff ff       	call   c0031419 <byte_to_sector>
c0031b04:	83 c4 10             	add    $0x10,%esp
c0031b07:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031b0a:	8b 45 14             	mov    0x14(%ebp),%eax
c0031b0d:	99                   	cltd   
c0031b0e:	c1 ea 17             	shr    $0x17,%edx
c0031b11:	01 d0                	add    %edx,%eax
c0031b13:	25 ff 01 00 00       	and    $0x1ff,%eax
c0031b18:	29 d0                	sub    %edx,%eax
c0031b1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0031b1d:	83 ec 0c             	sub    $0xc,%esp
c0031b20:	ff 75 08             	pushl  0x8(%ebp)
c0031b23:	e8 e3 01 00 00       	call   c0031d0b <inode_length>
c0031b28:	83 c4 10             	add    $0x10,%esp
c0031b2b:	2b 45 14             	sub    0x14(%ebp),%eax
c0031b2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0031b31:	b8 00 02 00 00       	mov    $0x200,%eax
c0031b36:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0031b39:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0031b3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0031b3f:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0031b42:	0f 4e 45 dc          	cmovle -0x24(%ebp),%eax
c0031b46:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0031b49:	8b 45 10             	mov    0x10(%ebp),%eax
c0031b4c:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0031b4f:	0f 4e 45 d8          	cmovle -0x28(%ebp),%eax
c0031b53:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0031b56:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0031b5a:	0f 8e d4 00 00 00    	jle    c0031c34 <inode_write_at+0x1eb>
c0031b60:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0031b64:	75 25                	jne    c0031b8b <inode_write_at+0x142>
c0031b66:	81 7d d4 00 02 00 00 	cmpl   $0x200,-0x2c(%ebp)
c0031b6d:	75 1c                	jne    c0031b8b <inode_write_at+0x142>
c0031b6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0031b72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0031b75:	01 d0                	add    %edx,%eax
c0031b77:	83 ec 08             	sub    $0x8,%esp
c0031b7a:	50                   	push   %eax
c0031b7b:	ff 75 e8             	pushl  -0x18(%ebp)
c0031b7e:	e8 f5 e9 ff ff       	call   c0030578 <buffer_cache_write>
c0031b83:	83 c4 10             	add    $0x10,%esp
c0031b86:	e9 8b 00 00 00       	jmp    c0031c16 <inode_write_at+0x1cd>
c0031b8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031b8f:	75 1d                	jne    c0031bae <inode_write_at+0x165>
c0031b91:	83 ec 0c             	sub    $0xc,%esp
c0031b94:	68 00 02 00 00       	push   $0x200
c0031b99:	e8 50 25 ff ff       	call   c00240ee <malloc>
c0031b9e:	83 c4 10             	add    $0x10,%esp
c0031ba1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031ba4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031ba8:	0f 84 89 00 00 00    	je     c0031c37 <inode_write_at+0x1ee>
c0031bae:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0031bb2:	7f 08                	jg     c0031bbc <inode_write_at+0x173>
c0031bb4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031bb7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0031bba:	7d 13                	jge    c0031bcf <inode_write_at+0x186>
c0031bbc:	83 ec 08             	sub    $0x8,%esp
c0031bbf:	ff 75 f0             	pushl  -0x10(%ebp)
c0031bc2:	ff 75 e8             	pushl  -0x18(%ebp)
c0031bc5:	e8 14 e9 ff ff       	call   c00304de <buffer_cache_read>
c0031bca:	83 c4 10             	add    $0x10,%esp
c0031bcd:	eb 15                	jmp    c0031be4 <inode_write_at+0x19b>
c0031bcf:	83 ec 04             	sub    $0x4,%esp
c0031bd2:	68 00 02 00 00       	push   $0x200
c0031bd7:	6a 00                	push   $0x0
c0031bd9:	ff 75 f0             	pushl  -0x10(%ebp)
c0031bdc:	e8 0f 7c ff ff       	call   c00297f0 <memset>
c0031be1:	83 c4 10             	add    $0x10,%esp
c0031be4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031be7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0031bea:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0031bed:	01 d1                	add    %edx,%ecx
c0031bef:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c0031bf2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0031bf5:	01 da                	add    %ebx,%edx
c0031bf7:	83 ec 04             	sub    $0x4,%esp
c0031bfa:	50                   	push   %eax
c0031bfb:	51                   	push   %ecx
c0031bfc:	52                   	push   %edx
c0031bfd:	e8 e8 75 ff ff       	call   c00291ea <memcpy>
c0031c02:	83 c4 10             	add    $0x10,%esp
c0031c05:	83 ec 08             	sub    $0x8,%esp
c0031c08:	ff 75 f0             	pushl  -0x10(%ebp)
c0031c0b:	ff 75 e8             	pushl  -0x18(%ebp)
c0031c0e:	e8 65 e9 ff ff       	call   c0030578 <buffer_cache_write>
c0031c13:	83 c4 10             	add    $0x10,%esp
c0031c16:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031c19:	29 45 10             	sub    %eax,0x10(%ebp)
c0031c1c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031c1f:	01 45 14             	add    %eax,0x14(%ebp)
c0031c22:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0031c25:	01 45 f4             	add    %eax,-0xc(%ebp)
c0031c28:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0031c2c:	0f 8f c4 fe ff ff    	jg     c0031af6 <inode_write_at+0xad>
c0031c32:	eb 04                	jmp    c0031c38 <inode_write_at+0x1ef>
c0031c34:	90                   	nop
c0031c35:	eb 01                	jmp    c0031c38 <inode_write_at+0x1ef>
c0031c37:	90                   	nop
c0031c38:	83 ec 0c             	sub    $0xc,%esp
c0031c3b:	ff 75 f0             	pushl  -0x10(%ebp)
c0031c3e:	e8 a8 27 ff ff       	call   c00243eb <free>
c0031c43:	83 c4 10             	add    $0x10,%esp
c0031c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0031c49:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0031c4c:	c9                   	leave  
c0031c4d:	c3                   	ret    

c0031c4e <inode_deny_write>:
c0031c4e:	55                   	push   %ebp
c0031c4f:	89 e5                	mov    %esp,%ebp
c0031c51:	83 ec 08             	sub    $0x8,%esp
c0031c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0031c57:	8b 40 14             	mov    0x14(%eax),%eax
c0031c5a:	8d 50 01             	lea    0x1(%eax),%edx
c0031c5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0031c60:	89 50 14             	mov    %edx,0x14(%eax)
c0031c63:	8b 45 08             	mov    0x8(%ebp),%eax
c0031c66:	8b 50 14             	mov    0x14(%eax),%edx
c0031c69:	8b 45 08             	mov    0x8(%ebp),%eax
c0031c6c:	8b 40 0c             	mov    0xc(%eax),%eax
c0031c6f:	39 c2                	cmp    %eax,%edx
c0031c71:	7e 21                	jle    c0031c94 <inode_deny_write+0x46>
c0031c73:	83 ec 0c             	sub    $0xc,%esp
c0031c76:	68 c0 60 03 c0       	push   $0xc00360c0
c0031c7b:	68 79 60 03 c0       	push   $0xc0036079
c0031c80:	68 74 61 03 c0       	push   $0xc0036174
c0031c85:	68 f5 01 00 00       	push   $0x1f5
c0031c8a:	68 90 60 03 c0       	push   $0xc0036090
c0031c8f:	e8 96 88 ff ff       	call   c002a52a <debug_panic>
c0031c94:	90                   	nop
c0031c95:	c9                   	leave  
c0031c96:	c3                   	ret    

c0031c97 <inode_allow_write>:
c0031c97:	55                   	push   %ebp
c0031c98:	89 e5                	mov    %esp,%ebp
c0031c9a:	83 ec 08             	sub    $0x8,%esp
c0031c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0031ca0:	8b 40 14             	mov    0x14(%eax),%eax
c0031ca3:	85 c0                	test   %eax,%eax
c0031ca5:	7f 21                	jg     c0031cc8 <inode_allow_write+0x31>
c0031ca7:	83 ec 0c             	sub    $0xc,%esp
c0031caa:	68 e9 60 03 c0       	push   $0xc00360e9
c0031caf:	68 79 60 03 c0       	push   $0xc0036079
c0031cb4:	68 88 61 03 c0       	push   $0xc0036188
c0031cb9:	68 fe 01 00 00       	push   $0x1fe
c0031cbe:	68 90 60 03 c0       	push   $0xc0036090
c0031cc3:	e8 62 88 ff ff       	call   c002a52a <debug_panic>
c0031cc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0031ccb:	8b 50 14             	mov    0x14(%eax),%edx
c0031cce:	8b 45 08             	mov    0x8(%ebp),%eax
c0031cd1:	8b 40 0c             	mov    0xc(%eax),%eax
c0031cd4:	39 c2                	cmp    %eax,%edx
c0031cd6:	7e 21                	jle    c0031cf9 <inode_allow_write+0x62>
c0031cd8:	83 ec 0c             	sub    $0xc,%esp
c0031cdb:	68 c0 60 03 c0       	push   $0xc00360c0
c0031ce0:	68 79 60 03 c0       	push   $0xc0036079
c0031ce5:	68 88 61 03 c0       	push   $0xc0036188
c0031cea:	68 ff 01 00 00       	push   $0x1ff
c0031cef:	68 90 60 03 c0       	push   $0xc0036090
c0031cf4:	e8 31 88 ff ff       	call   c002a52a <debug_panic>
c0031cf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0031cfc:	8b 40 14             	mov    0x14(%eax),%eax
c0031cff:	8d 50 ff             	lea    -0x1(%eax),%edx
c0031d02:	8b 45 08             	mov    0x8(%ebp),%eax
c0031d05:	89 50 14             	mov    %edx,0x14(%eax)
c0031d08:	90                   	nop
c0031d09:	c9                   	leave  
c0031d0a:	c3                   	ret    

c0031d0b <inode_length>:
c0031d0b:	55                   	push   %ebp
c0031d0c:	89 e5                	mov    %esp,%ebp
c0031d0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0031d11:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
c0031d17:	5d                   	pop    %ebp
c0031d18:	c3                   	ret    

c0031d19 <inode_dir>:
c0031d19:	55                   	push   %ebp
c0031d1a:	89 e5                	mov    %esp,%ebp
c0031d1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0031d1f:	0f b6 80 0c 02 00 00 	movzbl 0x20c(%eax),%eax
c0031d26:	5d                   	pop    %ebp
c0031d27:	c3                   	ret    

c0031d28 <inode_num>:
c0031d28:	55                   	push   %ebp
c0031d29:	89 e5                	mov    %esp,%ebp
c0031d2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0031d2e:	8b 40 08             	mov    0x8(%eax),%eax
c0031d31:	5d                   	pop    %ebp
c0031d32:	c3                   	ret    

c0031d33 <inode_is_removed>:
c0031d33:	55                   	push   %ebp
c0031d34:	89 e5                	mov    %esp,%ebp
c0031d36:	8b 45 08             	mov    0x8(%ebp),%eax
c0031d39:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c0031d3d:	5d                   	pop    %ebp
c0031d3e:	c3                   	ret    

c0031d3f <fsutil_ls>:
c0031d3f:	55                   	push   %ebp
c0031d40:	89 e5                	mov    %esp,%ebp
c0031d42:	83 ec 28             	sub    $0x28,%esp
c0031d45:	83 ec 0c             	sub    $0xc,%esp
c0031d48:	68 9c 61 03 c0       	push   $0xc003619c
c0031d4d:	e8 9f aa ff ff       	call   c002c7f1 <puts>
c0031d52:	83 c4 10             	add    $0x10,%esp
c0031d55:	e8 03 eb ff ff       	call   c003085d <dir_open_root>
c0031d5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031d5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0031d61:	75 25                	jne    c0031d88 <fsutil_ls+0x49>
c0031d63:	68 b9 61 03 c0       	push   $0xc00361b9
c0031d68:	68 44 64 03 c0       	push   $0xc0036444
c0031d6d:	6a 18                	push   $0x18
c0031d6f:	68 ce 61 03 c0       	push   $0xc00361ce
c0031d74:	e8 b1 87 ff ff       	call   c002a52a <debug_panic>
c0031d79:	83 ec 0c             	sub    $0xc,%esp
c0031d7c:	8d 45 e5             	lea    -0x1b(%ebp),%eax
c0031d7f:	50                   	push   %eax
c0031d80:	e8 6c aa ff ff       	call   c002c7f1 <puts>
c0031d85:	83 c4 10             	add    $0x10,%esp
c0031d88:	83 ec 08             	sub    $0x8,%esp
c0031d8b:	8d 45 e5             	lea    -0x1b(%ebp),%eax
c0031d8e:	50                   	push   %eax
c0031d8f:	ff 75 f4             	pushl  -0xc(%ebp)
c0031d92:	e8 95 f0 ff ff       	call   c0030e2c <dir_readdir>
c0031d97:	83 c4 10             	add    $0x10,%esp
c0031d9a:	84 c0                	test   %al,%al
c0031d9c:	75 db                	jne    c0031d79 <fsutil_ls+0x3a>
c0031d9e:	83 ec 0c             	sub    $0xc,%esp
c0031da1:	ff 75 f4             	pushl  -0xc(%ebp)
c0031da4:	e8 a9 ec ff ff       	call   c0030a52 <dir_close>
c0031da9:	83 c4 10             	add    $0x10,%esp
c0031dac:	83 ec 0c             	sub    $0xc,%esp
c0031daf:	68 e5 61 03 c0       	push   $0xc00361e5
c0031db4:	e8 38 aa ff ff       	call   c002c7f1 <puts>
c0031db9:	83 c4 10             	add    $0x10,%esp
c0031dbc:	90                   	nop
c0031dbd:	c9                   	leave  
c0031dbe:	c3                   	ret    

c0031dbf <fsutil_cat>:
c0031dbf:	55                   	push   %ebp
c0031dc0:	89 e5                	mov    %esp,%ebp
c0031dc2:	83 ec 28             	sub    $0x28,%esp
c0031dc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0031dc8:	8b 40 04             	mov    0x4(%eax),%eax
c0031dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031dce:	83 ec 08             	sub    $0x8,%esp
c0031dd1:	ff 75 f4             	pushl  -0xc(%ebp)
c0031dd4:	68 f8 61 03 c0       	push   $0xc00361f8
c0031dd9:	e8 eb 61 ff ff       	call   c0027fc9 <printf>
c0031dde:	83 c4 10             	add    $0x10,%esp
c0031de1:	83 ec 0c             	sub    $0xc,%esp
c0031de4:	ff 75 f4             	pushl  -0xc(%ebp)
c0031de7:	e8 cb db ff ff       	call   c002f9b7 <filesys_open>
c0031dec:	83 c4 10             	add    $0x10,%esp
c0031def:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031df2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031df6:	75 1c                	jne    c0031e14 <fsutil_cat+0x55>
c0031df8:	83 ec 0c             	sub    $0xc,%esp
c0031dfb:	ff 75 f4             	pushl  -0xc(%ebp)
c0031dfe:	68 19 62 03 c0       	push   $0xc0036219
c0031e03:	68 50 64 03 c0       	push   $0xc0036450
c0031e08:	6a 2c                	push   $0x2c
c0031e0a:	68 ce 61 03 c0       	push   $0xc00361ce
c0031e0f:	e8 16 87 ff ff       	call   c002a52a <debug_panic>
c0031e14:	83 ec 0c             	sub    $0xc,%esp
c0031e17:	6a 01                	push   $0x1
c0031e19:	e8 85 1f ff ff       	call   c0023da3 <palloc_get_page>
c0031e1e:	83 c4 10             	add    $0x10,%esp
c0031e21:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031e24:	83 ec 0c             	sub    $0xc,%esp
c0031e27:	ff 75 f0             	pushl  -0x10(%ebp)
c0031e2a:	e8 8a e3 ff ff       	call   c00301b9 <file_tell>
c0031e2f:	83 c4 10             	add    $0x10,%esp
c0031e32:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031e35:	83 ec 04             	sub    $0x4,%esp
c0031e38:	68 00 10 00 00       	push   $0x1000
c0031e3d:	ff 75 ec             	pushl  -0x14(%ebp)
c0031e40:	ff 75 f0             	pushl  -0x10(%ebp)
c0031e43:	e8 79 e1 ff ff       	call   c002ffc1 <file_read>
c0031e48:	83 c4 10             	add    $0x10,%esp
c0031e4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0031e4e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0031e52:	74 17                	je     c0031e6b <fsutil_cat+0xac>
c0031e54:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0031e57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0031e5a:	6a 01                	push   $0x1
c0031e5c:	52                   	push   %edx
c0031e5d:	ff 75 ec             	pushl  -0x14(%ebp)
c0031e60:	50                   	push   %eax
c0031e61:	e8 9e 6c ff ff       	call   c0028b04 <hex_dump>
c0031e66:	83 c4 10             	add    $0x10,%esp
c0031e69:	eb b9                	jmp    c0031e24 <fsutil_cat+0x65>
c0031e6b:	90                   	nop
c0031e6c:	83 ec 0c             	sub    $0xc,%esp
c0031e6f:	ff 75 ec             	pushl  -0x14(%ebp)
c0031e72:	e8 84 20 ff ff       	call   c0023efb <palloc_free_page>
c0031e77:	83 c4 10             	add    $0x10,%esp
c0031e7a:	83 ec 0c             	sub    $0xc,%esp
c0031e7d:	ff 75 f0             	pushl  -0x10(%ebp)
c0031e80:	e8 f6 e0 ff ff       	call   c002ff7b <file_close>
c0031e85:	83 c4 10             	add    $0x10,%esp
c0031e88:	90                   	nop
c0031e89:	c9                   	leave  
c0031e8a:	c3                   	ret    

c0031e8b <fsutil_rm>:
c0031e8b:	55                   	push   %ebp
c0031e8c:	89 e5                	mov    %esp,%ebp
c0031e8e:	83 ec 18             	sub    $0x18,%esp
c0031e91:	8b 45 08             	mov    0x8(%ebp),%eax
c0031e94:	8b 40 04             	mov    0x4(%eax),%eax
c0031e97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031e9a:	83 ec 08             	sub    $0x8,%esp
c0031e9d:	ff 75 f4             	pushl  -0xc(%ebp)
c0031ea0:	68 29 62 03 c0       	push   $0xc0036229
c0031ea5:	e8 1f 61 ff ff       	call   c0027fc9 <printf>
c0031eaa:	83 c4 10             	add    $0x10,%esp
c0031ead:	83 ec 0c             	sub    $0xc,%esp
c0031eb0:	ff 75 f4             	pushl  -0xc(%ebp)
c0031eb3:	e8 41 dc ff ff       	call   c002faf9 <filesys_remove>
c0031eb8:	83 c4 10             	add    $0x10,%esp
c0031ebb:	83 f0 01             	xor    $0x1,%eax
c0031ebe:	84 c0                	test   %al,%al
c0031ec0:	74 1c                	je     c0031ede <fsutil_rm+0x53>
c0031ec2:	83 ec 0c             	sub    $0xc,%esp
c0031ec5:	ff 75 f4             	pushl  -0xc(%ebp)
c0031ec8:	68 3b 62 03 c0       	push   $0xc003623b
c0031ecd:	68 5c 64 03 c0       	push   $0xc003645c
c0031ed2:	6a 43                	push   $0x43
c0031ed4:	68 ce 61 03 c0       	push   $0xc00361ce
c0031ed9:	e8 4c 86 ff ff       	call   c002a52a <debug_panic>
c0031ede:	90                   	nop
c0031edf:	c9                   	leave  
c0031ee0:	c3                   	ret    

c0031ee1 <fsutil_extract>:
c0031ee1:	55                   	push   %ebp
c0031ee2:	89 e5                	mov    %esp,%ebp
c0031ee4:	83 ec 38             	sub    $0x38,%esp
c0031ee7:	83 ec 0c             	sub    $0xc,%esp
c0031eea:	68 00 02 00 00       	push   $0x200
c0031eef:	e8 fa 21 ff ff       	call   c00240ee <malloc>
c0031ef4:	83 c4 10             	add    $0x10,%esp
c0031ef7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0031efa:	83 ec 0c             	sub    $0xc,%esp
c0031efd:	68 00 02 00 00       	push   $0x200
c0031f02:	e8 e7 21 ff ff       	call   c00240ee <malloc>
c0031f07:	83 c4 10             	add    $0x10,%esp
c0031f0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0031f0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0031f11:	74 06                	je     c0031f19 <fsutil_extract+0x38>
c0031f13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0031f17:	75 16                	jne    c0031f2f <fsutil_extract+0x4e>
c0031f19:	68 4e 62 03 c0       	push   $0xc003624e
c0031f1e:	68 68 64 03 c0       	push   $0xc0036468
c0031f23:	6a 54                	push   $0x54
c0031f25:	68 ce 61 03 c0       	push   $0xc00361ce
c0031f2a:	e8 fb 85 ff ff       	call   c002a52a <debug_panic>
c0031f2f:	83 ec 0c             	sub    $0xc,%esp
c0031f32:	6a 02                	push   $0x2
c0031f34:	e8 24 3c ff ff       	call   c0025b5d <block_get_role>
c0031f39:	83 c4 10             	add    $0x10,%esp
c0031f3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0031f3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0031f43:	75 16                	jne    c0031f5b <fsutil_extract+0x7a>
c0031f45:	68 68 62 03 c0       	push   $0xc0036268
c0031f4a:	68 68 64 03 c0       	push   $0xc0036468
c0031f4f:	6a 59                	push   $0x59
c0031f51:	68 ce 61 03 c0       	push   $0xc00361ce
c0031f56:	e8 cf 85 ff ff       	call   c002a52a <debug_panic>
c0031f5b:	83 ec 0c             	sub    $0xc,%esp
c0031f5e:	68 88 62 03 c0       	push   $0xc0036288
c0031f63:	e8 89 a8 ff ff       	call   c002c7f1 <puts>
c0031f68:	83 c4 10             	add    $0x10,%esp
c0031f6b:	a1 70 61 04 c0       	mov    0xc0046170,%eax
c0031f70:	8d 50 01             	lea    0x1(%eax),%edx
c0031f73:	89 15 70 61 04 c0    	mov    %edx,0xc0046170
c0031f79:	83 ec 04             	sub    $0x4,%esp
c0031f7c:	ff 75 f4             	pushl  -0xc(%ebp)
c0031f7f:	50                   	push   %eax
c0031f80:	ff 75 ec             	pushl  -0x14(%ebp)
c0031f83:	e8 48 3d ff ff       	call   c0025cd0 <block_read>
c0031f88:	83 c4 10             	add    $0x10,%esp
c0031f8b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0031f8e:	50                   	push   %eax
c0031f8f:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0031f92:	50                   	push   %eax
c0031f93:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0031f96:	50                   	push   %eax
c0031f97:	ff 75 f4             	pushl  -0xc(%ebp)
c0031f9a:	e8 b1 82 ff ff       	call   c002a250 <ustar_parse_header>
c0031f9f:	83 c4 10             	add    $0x10,%esp
c0031fa2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0031fa5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0031fa9:	74 25                	je     c0031fd0 <fsutil_extract+0xef>
c0031fab:	a1 70 61 04 c0       	mov    0xc0046170,%eax
c0031fb0:	83 e8 01             	sub    $0x1,%eax
c0031fb3:	83 ec 08             	sub    $0x8,%esp
c0031fb6:	ff 75 e8             	pushl  -0x18(%ebp)
c0031fb9:	50                   	push   %eax
c0031fba:	68 cc 62 03 c0       	push   $0xc00362cc
c0031fbf:	68 68 64 03 c0       	push   $0xc0036468
c0031fc4:	6a 69                	push   $0x69
c0031fc6:	68 ce 61 03 c0       	push   $0xc00361ce
c0031fcb:	e8 5a 85 ff ff       	call   c002a52a <debug_panic>
c0031fd0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0031fd3:	83 f8 ff             	cmp    $0xffffffff,%eax
c0031fd6:	75 6c                	jne    c0032044 <fsutil_extract+0x163>
c0031fd8:	83 ec 0c             	sub    $0xc,%esp
c0031fdb:	68 ef 62 03 c0       	push   $0xc00362ef
c0031fe0:	e8 0c a8 ff ff       	call   c002c7f1 <puts>
c0031fe5:	83 c4 10             	add    $0x10,%esp
c0031fe8:	83 ec 04             	sub    $0x4,%esp
c0031feb:	68 00 02 00 00       	push   $0x200
c0031ff0:	6a 00                	push   $0x0
c0031ff2:	ff 75 f4             	pushl  -0xc(%ebp)
c0031ff5:	e8 f6 77 ff ff       	call   c00297f0 <memset>
c0031ffa:	83 c4 10             	add    $0x10,%esp
c0031ffd:	83 ec 04             	sub    $0x4,%esp
c0032000:	ff 75 f4             	pushl  -0xc(%ebp)
c0032003:	6a 00                	push   $0x0
c0032005:	ff 75 ec             	pushl  -0x14(%ebp)
c0032008:	e8 12 3d ff ff       	call   c0025d1f <block_write>
c003200d:	83 c4 10             	add    $0x10,%esp
c0032010:	83 ec 04             	sub    $0x4,%esp
c0032013:	ff 75 f4             	pushl  -0xc(%ebp)
c0032016:	6a 01                	push   $0x1
c0032018:	ff 75 ec             	pushl  -0x14(%ebp)
c003201b:	e8 ff 3c ff ff       	call   c0025d1f <block_write>
c0032020:	83 c4 10             	add    $0x10,%esp
c0032023:	83 ec 0c             	sub    $0xc,%esp
c0032026:	ff 75 f0             	pushl  -0x10(%ebp)
c0032029:	e8 bd 23 ff ff       	call   c00243eb <free>
c003202e:	83 c4 10             	add    $0x10,%esp
c0032031:	83 ec 0c             	sub    $0xc,%esp
c0032034:	ff 75 f4             	pushl  -0xc(%ebp)
c0032037:	e8 af 23 ff ff       	call   c00243eb <free>
c003203c:	83 c4 10             	add    $0x10,%esp
c003203f:	e9 44 01 00 00       	jmp    c0032188 <fsutil_extract+0x2a7>
c0032044:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0032047:	83 f8 35             	cmp    $0x35,%eax
c003204a:	75 19                	jne    c0032065 <fsutil_extract+0x184>
c003204c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c003204f:	83 ec 08             	sub    $0x8,%esp
c0032052:	50                   	push   %eax
c0032053:	68 08 63 03 c0       	push   $0xc0036308
c0032058:	e8 6c 5f ff ff       	call   c0027fc9 <printf>
c003205d:	83 c4 10             	add    $0x10,%esp
c0032060:	e9 06 ff ff ff       	jmp    c0031f6b <fsutil_extract+0x8a>
c0032065:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0032068:	83 f8 30             	cmp    $0x30,%eax
c003206b:	0f 85 fa fe ff ff    	jne    c0031f6b <fsutil_extract+0x8a>
c0032071:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0032074:	83 ec 08             	sub    $0x8,%esp
c0032077:	50                   	push   %eax
c0032078:	68 20 63 03 c0       	push   $0xc0036320
c003207d:	e8 47 5f ff ff       	call   c0027fc9 <printf>
c0032082:	83 c4 10             	add    $0x10,%esp
c0032085:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0032088:	8b 45 dc             	mov    -0x24(%ebp),%eax
c003208b:	83 ec 08             	sub    $0x8,%esp
c003208e:	52                   	push   %edx
c003208f:	50                   	push   %eax
c0032090:	e8 db d7 ff ff       	call   c002f870 <filesys_create>
c0032095:	83 c4 10             	add    $0x10,%esp
c0032098:	83 f0 01             	xor    $0x1,%eax
c003209b:	84 c0                	test   %al,%al
c003209d:	74 1d                	je     c00320bc <fsutil_extract+0x1db>
c003209f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00320a2:	83 ec 0c             	sub    $0xc,%esp
c00320a5:	50                   	push   %eax
c00320a6:	68 46 63 03 c0       	push   $0xc0036346
c00320ab:	68 68 64 03 c0       	push   $0xc0036468
c00320b0:	6a 7a                	push   $0x7a
c00320b2:	68 ce 61 03 c0       	push   $0xc00361ce
c00320b7:	e8 6e 84 ff ff       	call   c002a52a <debug_panic>
c00320bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00320bf:	83 ec 0c             	sub    $0xc,%esp
c00320c2:	50                   	push   %eax
c00320c3:	e8 ef d8 ff ff       	call   c002f9b7 <filesys_open>
c00320c8:	83 c4 10             	add    $0x10,%esp
c00320cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00320ce:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00320d2:	0f 85 96 00 00 00    	jne    c003216e <fsutil_extract+0x28d>
c00320d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00320db:	83 ec 0c             	sub    $0xc,%esp
c00320de:	50                   	push   %eax
c00320df:	68 19 62 03 c0       	push   $0xc0036219
c00320e4:	68 68 64 03 c0       	push   $0xc0036468
c00320e9:	6a 7d                	push   $0x7d
c00320eb:	68 ce 61 03 c0       	push   $0xc00361ce
c00320f0:	e8 35 84 ff ff       	call   c002a52a <debug_panic>
c00320f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00320f8:	ba 00 02 00 00       	mov    $0x200,%edx
c00320fd:	3d 00 02 00 00       	cmp    $0x200,%eax
c0032102:	0f 4f c2             	cmovg  %edx,%eax
c0032105:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0032108:	a1 70 61 04 c0       	mov    0xc0046170,%eax
c003210d:	8d 50 01             	lea    0x1(%eax),%edx
c0032110:	89 15 70 61 04 c0    	mov    %edx,0xc0046170
c0032116:	83 ec 04             	sub    $0x4,%esp
c0032119:	ff 75 f0             	pushl  -0x10(%ebp)
c003211c:	50                   	push   %eax
c003211d:	ff 75 ec             	pushl  -0x14(%ebp)
c0032120:	e8 ab 3b ff ff       	call   c0025cd0 <block_read>
c0032125:	83 c4 10             	add    $0x10,%esp
c0032128:	83 ec 04             	sub    $0x4,%esp
c003212b:	ff 75 e0             	pushl  -0x20(%ebp)
c003212e:	ff 75 f0             	pushl  -0x10(%ebp)
c0032131:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032134:	e8 e1 de ff ff       	call   c003001a <file_write>
c0032139:	83 c4 10             	add    $0x10,%esp
c003213c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c003213f:	74 24                	je     c0032165 <fsutil_extract+0x284>
c0032141:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0032144:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0032147:	83 ec 08             	sub    $0x8,%esp
c003214a:	52                   	push   %edx
c003214b:	50                   	push   %eax
c003214c:	68 58 63 03 c0       	push   $0xc0036358
c0032151:	68 68 64 03 c0       	push   $0xc0036468
c0032156:	68 88 00 00 00       	push   $0x88
c003215b:	68 ce 61 03 c0       	push   $0xc00361ce
c0032160:	e8 c5 83 ff ff       	call   c002a52a <debug_panic>
c0032165:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0032168:	2b 45 e0             	sub    -0x20(%ebp),%eax
c003216b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c003216e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0032171:	85 c0                	test   %eax,%eax
c0032173:	7f 80                	jg     c00320f5 <fsutil_extract+0x214>
c0032175:	83 ec 0c             	sub    $0xc,%esp
c0032178:	ff 75 e4             	pushl  -0x1c(%ebp)
c003217b:	e8 fb dd ff ff       	call   c002ff7b <file_close>
c0032180:	83 c4 10             	add    $0x10,%esp
c0032183:	e9 e3 fd ff ff       	jmp    c0031f6b <fsutil_extract+0x8a>
c0032188:	c9                   	leave  
c0032189:	c3                   	ret    

c003218a <fsutil_append>:
c003218a:	55                   	push   %ebp
c003218b:	89 e5                	mov    %esp,%ebp
c003218d:	83 ec 28             	sub    $0x28,%esp
c0032190:	8b 45 08             	mov    0x8(%ebp),%eax
c0032193:	8b 40 04             	mov    0x4(%eax),%eax
c0032196:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0032199:	83 ec 08             	sub    $0x8,%esp
c003219c:	ff 75 f0             	pushl  -0x10(%ebp)
c003219f:	68 84 63 03 c0       	push   $0xc0036384
c00321a4:	e8 20 5e ff ff       	call   c0027fc9 <printf>
c00321a9:	83 c4 10             	add    $0x10,%esp
c00321ac:	83 ec 0c             	sub    $0xc,%esp
c00321af:	68 00 02 00 00       	push   $0x200
c00321b4:	e8 35 1f ff ff       	call   c00240ee <malloc>
c00321b9:	83 c4 10             	add    $0x10,%esp
c00321bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00321bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00321c3:	75 19                	jne    c00321de <fsutil_append+0x54>
c00321c5:	68 ba 63 03 c0       	push   $0xc00363ba
c00321ca:	68 78 64 03 c0       	push   $0xc0036478
c00321cf:	68 b6 00 00 00       	push   $0xb6
c00321d4:	68 ce 61 03 c0       	push   $0xc00361ce
c00321d9:	e8 4c 83 ff ff       	call   c002a52a <debug_panic>
c00321de:	83 ec 0c             	sub    $0xc,%esp
c00321e1:	ff 75 f0             	pushl  -0x10(%ebp)
c00321e4:	e8 ce d7 ff ff       	call   c002f9b7 <filesys_open>
c00321e9:	83 c4 10             	add    $0x10,%esp
c00321ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
c00321ef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00321f3:	75 1f                	jne    c0032214 <fsutil_append+0x8a>
c00321f5:	83 ec 0c             	sub    $0xc,%esp
c00321f8:	ff 75 f0             	pushl  -0x10(%ebp)
c00321fb:	68 19 62 03 c0       	push   $0xc0036219
c0032200:	68 78 64 03 c0       	push   $0xc0036478
c0032205:	68 bb 00 00 00       	push   $0xbb
c003220a:	68 ce 61 03 c0       	push   $0xc00361ce
c003220f:	e8 16 83 ff ff       	call   c002a52a <debug_panic>
c0032214:	83 ec 0c             	sub    $0xc,%esp
c0032217:	ff 75 e8             	pushl  -0x18(%ebp)
c003221a:	e8 fa de ff ff       	call   c0030119 <file_length>
c003221f:	83 c4 10             	add    $0x10,%esp
c0032222:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0032225:	83 ec 0c             	sub    $0xc,%esp
c0032228:	6a 02                	push   $0x2
c003222a:	e8 2e 39 ff ff       	call   c0025b5d <block_get_role>
c003222f:	83 c4 10             	add    $0x10,%esp
c0032232:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0032235:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0032239:	75 19                	jne    c0032254 <fsutil_append+0xca>
c003223b:	68 68 62 03 c0       	push   $0xc0036268
c0032240:	68 78 64 03 c0       	push   $0xc0036478
c0032245:	68 c1 00 00 00       	push   $0xc1
c003224a:	68 ce 61 03 c0       	push   $0xc00361ce
c003224f:	e8 d6 82 ff ff       	call   c002a52a <debug_panic>
c0032254:	ff 75 ec             	pushl  -0x14(%ebp)
c0032257:	ff 75 f4             	pushl  -0xc(%ebp)
c003225a:	6a 30                	push   $0x30
c003225c:	ff 75 f0             	pushl  -0x10(%ebp)
c003225f:	e8 53 7d ff ff       	call   c0029fb7 <ustar_make_header>
c0032264:	83 c4 10             	add    $0x10,%esp
c0032267:	83 f0 01             	xor    $0x1,%eax
c003226a:	84 c0                	test   %al,%al
c003226c:	74 1f                	je     c003228d <fsutil_append+0x103>
c003226e:	83 ec 0c             	sub    $0xc,%esp
c0032271:	ff 75 f0             	pushl  -0x10(%ebp)
c0032274:	68 d4 63 03 c0       	push   $0xc00363d4
c0032279:	68 78 64 03 c0       	push   $0xc0036478
c003227e:	68 c5 00 00 00       	push   $0xc5
c0032283:	68 ce 61 03 c0       	push   $0xc00361ce
c0032288:	e8 9d 82 ff ff       	call   c002a52a <debug_panic>
c003228d:	a1 74 61 04 c0       	mov    0xc0046174,%eax
c0032292:	8d 50 01             	lea    0x1(%eax),%edx
c0032295:	89 15 74 61 04 c0    	mov    %edx,0xc0046174
c003229b:	83 ec 04             	sub    $0x4,%esp
c003229e:	ff 75 ec             	pushl  -0x14(%ebp)
c00322a1:	50                   	push   %eax
c00322a2:	ff 75 e4             	pushl  -0x1c(%ebp)
c00322a5:	e8 75 3a ff ff       	call   c0025d1f <block_write>
c00322aa:	83 c4 10             	add    $0x10,%esp
c00322ad:	e9 cd 00 00 00       	jmp    c003237f <fsutil_append+0x1f5>
c00322b2:	b8 00 02 00 00       	mov    $0x200,%eax
c00322b7:	81 7d f4 00 02 00 00 	cmpl   $0x200,-0xc(%ebp)
c00322be:	0f 4e 45 f4          	cmovle -0xc(%ebp),%eax
c00322c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c00322c5:	83 ec 0c             	sub    $0xc,%esp
c00322c8:	ff 75 e4             	pushl  -0x1c(%ebp)
c00322cb:	e8 cb 3a ff ff       	call   c0025d9b <block_size>
c00322d0:	83 c4 10             	add    $0x10,%esp
c00322d3:	89 c2                	mov    %eax,%edx
c00322d5:	a1 74 61 04 c0       	mov    0xc0046174,%eax
c00322da:	39 c2                	cmp    %eax,%edx
c00322dc:	77 1f                	ja     c00322fd <fsutil_append+0x173>
c00322de:	83 ec 0c             	sub    $0xc,%esp
c00322e1:	ff 75 f0             	pushl  -0x10(%ebp)
c00322e4:	68 f8 63 03 c0       	push   $0xc00363f8
c00322e9:	68 78 64 03 c0       	push   $0xc0036478
c00322ee:	68 cd 00 00 00       	push   $0xcd
c00322f3:	68 ce 61 03 c0       	push   $0xc00361ce
c00322f8:	e8 2d 82 ff ff       	call   c002a52a <debug_panic>
c00322fd:	83 ec 04             	sub    $0x4,%esp
c0032300:	ff 75 e0             	pushl  -0x20(%ebp)
c0032303:	ff 75 ec             	pushl  -0x14(%ebp)
c0032306:	ff 75 e8             	pushl  -0x18(%ebp)
c0032309:	e8 b3 dc ff ff       	call   c002ffc1 <file_read>
c003230e:	83 c4 10             	add    $0x10,%esp
c0032311:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0032314:	74 22                	je     c0032338 <fsutil_append+0x1ae>
c0032316:	83 ec 08             	sub    $0x8,%esp
c0032319:	ff 75 f4             	pushl  -0xc(%ebp)
c003231c:	ff 75 f0             	pushl  -0x10(%ebp)
c003231f:	68 1c 64 03 c0       	push   $0xc003641c
c0032324:	68 78 64 03 c0       	push   $0xc0036478
c0032329:	68 cf 00 00 00       	push   $0xcf
c003232e:	68 ce 61 03 c0       	push   $0xc00361ce
c0032333:	e8 f2 81 ff ff       	call   c002a52a <debug_panic>
c0032338:	b8 00 02 00 00       	mov    $0x200,%eax
c003233d:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0032340:	89 c1                	mov    %eax,%ecx
c0032342:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0032345:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0032348:	01 d0                	add    %edx,%eax
c003234a:	83 ec 04             	sub    $0x4,%esp
c003234d:	51                   	push   %ecx
c003234e:	6a 00                	push   $0x0
c0032350:	50                   	push   %eax
c0032351:	e8 9a 74 ff ff       	call   c00297f0 <memset>
c0032356:	83 c4 10             	add    $0x10,%esp
c0032359:	a1 74 61 04 c0       	mov    0xc0046174,%eax
c003235e:	8d 50 01             	lea    0x1(%eax),%edx
c0032361:	89 15 74 61 04 c0    	mov    %edx,0xc0046174
c0032367:	83 ec 04             	sub    $0x4,%esp
c003236a:	ff 75 ec             	pushl  -0x14(%ebp)
c003236d:	50                   	push   %eax
c003236e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0032371:	e8 a9 39 ff ff       	call   c0025d1f <block_write>
c0032376:	83 c4 10             	add    $0x10,%esp
c0032379:	8b 45 e0             	mov    -0x20(%ebp),%eax
c003237c:	29 45 f4             	sub    %eax,-0xc(%ebp)
c003237f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0032383:	0f 8f 29 ff ff ff    	jg     c00322b2 <fsutil_append+0x128>
c0032389:	83 ec 04             	sub    $0x4,%esp
c003238c:	68 00 02 00 00       	push   $0x200
c0032391:	6a 00                	push   $0x0
c0032393:	ff 75 ec             	pushl  -0x14(%ebp)
c0032396:	e8 55 74 ff ff       	call   c00297f0 <memset>
c003239b:	83 c4 10             	add    $0x10,%esp
c003239e:	a1 74 61 04 c0       	mov    0xc0046174,%eax
c00323a3:	83 ec 04             	sub    $0x4,%esp
c00323a6:	ff 75 ec             	pushl  -0x14(%ebp)
c00323a9:	50                   	push   %eax
c00323aa:	ff 75 e4             	pushl  -0x1c(%ebp)
c00323ad:	e8 6d 39 ff ff       	call   c0025d1f <block_write>
c00323b2:	83 c4 10             	add    $0x10,%esp
c00323b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00323b8:	8d 50 01             	lea    0x1(%eax),%edx
c00323bb:	a1 74 61 04 c0       	mov    0xc0046174,%eax
c00323c0:	83 ec 04             	sub    $0x4,%esp
c00323c3:	52                   	push   %edx
c00323c4:	50                   	push   %eax
c00323c5:	ff 75 e4             	pushl  -0x1c(%ebp)
c00323c8:	e8 52 39 ff ff       	call   c0025d1f <block_write>
c00323cd:	83 c4 10             	add    $0x10,%esp
c00323d0:	83 ec 0c             	sub    $0xc,%esp
c00323d3:	ff 75 e8             	pushl  -0x18(%ebp)
c00323d6:	e8 a0 db ff ff       	call   c002ff7b <file_close>
c00323db:	83 c4 10             	add    $0x10,%esp
c00323de:	83 ec 0c             	sub    $0xc,%esp
c00323e1:	ff 75 ec             	pushl  -0x14(%ebp)
c00323e4:	e8 02 20 ff ff       	call   c00243eb <free>
c00323e9:	83 c4 10             	add    $0x10,%esp
c00323ec:	90                   	nop
c00323ed:	c9                   	leave  
c00323ee:	c3                   	ret    
